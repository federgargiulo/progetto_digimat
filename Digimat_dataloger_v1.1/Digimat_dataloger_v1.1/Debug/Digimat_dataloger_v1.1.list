
Digimat_dataloger_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a708  0800a708  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a710  0800a710  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800a718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016f60  20000148  0800a860  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200170a8  0800a860  000270a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ea89  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059e7  00000000  00000000  0007ec01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0004f5f5  00000000  00000000  000845e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024a0  00000000  00000000  000d3be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009588  00000000  00000000  000d6080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2bb  00000000  00000000  000df608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044780  00000000  00000000  000fa8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2411  00000000  00000000  0013f043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e1454  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009b4c  00000000  00000000  001e14a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a188 	.word	0x0800a188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	0800a188 	.word	0x0800a188

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void) 
{
 8000584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000588:	4834      	ldr	r0, [pc, #208]	; (800065c <SD_PowerOn+0xd8>)
 800058a:	4d35      	ldr	r5, [pc, #212]	; (8000660 <SD_PowerOn+0xdc>)
{
 800058c:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2110      	movs	r1, #16
 8000592:	f004 fd07 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f004 faf6 	bl	8004b88 <HAL_Delay>
 800059c:	240a      	movs	r4, #10
 800059e:	26ff      	movs	r6, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a0:	682a      	ldr	r2, [r5, #0]
 80005a2:	f88d 600d 	strb.w	r6, [sp, #13]
 80005a6:	6893      	ldr	r3, [r2, #8]
 80005a8:	079f      	lsls	r7, r3, #30
 80005aa:	d5fc      	bpl.n	80005a6 <SD_PowerOn+0x22>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	2201      	movs	r2, #1
 80005b0:	f10d 010d 	add.w	r1, sp, #13
 80005b4:	4628      	mov	r0, r5
 80005b6:	f005 fe69 	bl	800628c <HAL_SPI_Transmit>
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
	for(int i = 0; i < 10; i++)
 80005ba:	3c01      	subs	r4, #1
 80005bc:	d1f0      	bne.n	80005a0 <SD_PowerOn+0x1c>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005be:	4622      	mov	r2, r4
 80005c0:	2110      	movs	r1, #16
 80005c2:	4826      	ldr	r0, [pc, #152]	; (800065c <SD_PowerOn+0xd8>)
 80005c4:	f004 fcee 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f004 fadd 	bl	8004b88 <HAL_Delay>

	/* slave select */
	SELECT();

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005ce:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
 80005d0:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005d4:	682a      	ldr	r2, [r5, #0]
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005d6:	9104      	str	r1, [sp, #16]
	args[4] = 0;
 80005d8:	f8ad 3014 	strh.w	r3, [sp, #20]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005dc:	6893      	ldr	r3, [r2, #8]
 80005de:	0798      	lsls	r0, r3, #30
 80005e0:	d5fc      	bpl.n	80005dc <SD_PowerOn+0x58>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005e2:	481f      	ldr	r0, [pc, #124]	; (8000660 <SD_PowerOn+0xdc>)
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005e4:	4f1e      	ldr	r7, [pc, #120]	; (8000660 <SD_PowerOn+0xdc>)
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	2206      	movs	r2, #6
 80005ea:	a904      	add	r1, sp, #16
 80005ec:	f005 fe4e 	bl	800628c <HAL_SPI_Transmit>
}
 80005f0:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	dummy = 0xFF;
 80005f4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005f8:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005fa:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 80005fc:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000600:	6893      	ldr	r3, [r2, #8]
 8000602:	0799      	lsls	r1, r3, #30
 8000604:	d5fc      	bpl.n	8000600 <SD_PowerOn+0x7c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000606:	2301      	movs	r3, #1
 8000608:	9600      	str	r6, [sp, #0]
 800060a:	f10d 020f 	add.w	r2, sp, #15
 800060e:	f10d 010e 	add.w	r1, sp, #14
 8000612:	4638      	mov	r0, r7
 8000614:	f005 ff8c 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000618:	f89d 300f 	ldrb.w	r3, [sp, #15]
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800061c:	2b01      	cmp	r3, #1
 800061e:	d001      	beq.n	8000624 <SD_PowerOn+0xa0>
 8000620:	3c01      	subs	r4, #1
 8000622:	d1ea      	bne.n	80005fa <SD_PowerOn+0x76>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <SD_PowerOn+0xd8>)
 8000628:	2110      	movs	r1, #16
 800062a:	f004 fcbb 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f004 faaa 	bl	8004b88 <HAL_Delay>
static void SPI_TxByte(uint8_t data)
 8000634:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000636:	682a      	ldr	r2, [r5, #0]
 8000638:	f88d 300f 	strb.w	r3, [sp, #15]
 800063c:	6893      	ldr	r3, [r2, #8]
 800063e:	079b      	lsls	r3, r3, #30
 8000640:	d5fc      	bpl.n	800063c <SD_PowerOn+0xb8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2201      	movs	r2, #1
 8000646:	f10d 010f 	add.w	r1, sp, #15
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <SD_PowerOn+0xdc>)
 800064c:	f005 fe1e 	bl	800628c <HAL_SPI_Transmit>
	}

	DESELECT();
	SPI_TxByte(0XFF);

	PowerFlag = 1;
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <SD_PowerOn+0xe0>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
}
 8000656:	b006      	add	sp, #24
 8000658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800065c:	40020000 	.word	0x40020000
 8000660:	200023e0 	.word	0x200023e0
 8000664:	20000165 	.word	0x20000165

08000668 <SD_RxDataBlock>:
	return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800066c:	4e34      	ldr	r6, [pc, #208]	; (8000740 <SD_RxDataBlock+0xd8>)
 800066e:	4c35      	ldr	r4, [pc, #212]	; (8000744 <SD_RxDataBlock+0xdc>)
 8000670:	23c8      	movs	r3, #200	; 0xc8
{
 8000672:	b085      	sub	sp, #20
 8000674:	4605      	mov	r5, r0
 8000676:	4689      	mov	r9, r1
	Timer1 = 200;
 8000678:	8033      	strh	r3, [r6, #0]
	dummy = 0xFF;
 800067a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800067e:	2764      	movs	r7, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000680:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000682:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000686:	6893      	ldr	r3, [r2, #8]
 8000688:	079b      	lsls	r3, r3, #30
 800068a:	d5fc      	bpl.n	8000686 <SD_RxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800068c:	2301      	movs	r3, #1
 800068e:	9700      	str	r7, [sp, #0]
 8000690:	f10d 020f 	add.w	r2, sp, #15
 8000694:	f10d 010e 	add.w	r1, sp, #14
 8000698:	4620      	mov	r0, r4
 800069a:	f005 ff49 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 800069e:	f89d 300f 	ldrb.w	r3, [sp, #15]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
	} while((token == 0xFF) && Timer1);
 80006a2:	2bff      	cmp	r3, #255	; 0xff
 80006a4:	d106      	bne.n	80006b4 <SD_RxDataBlock+0x4c>
 80006a6:	8830      	ldrh	r0, [r6, #0]
 80006a8:	b280      	uxth	r0, r0
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d1e8      	bne.n	8000680 <SD_RxDataBlock+0x18>
	/* discard CRC */
	SPI_RxByte();
	SPI_RxByte();

	return TRUE;
}
 80006ae:	b005      	add	sp, #20
 80006b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 80006b4:	2bfe      	cmp	r3, #254	; 0xfe
 80006b6:	d140      	bne.n	800073a <SD_RxDataBlock+0xd2>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006b8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8000744 <SD_RxDataBlock+0xdc>
 80006bc:	44a9      	add	r9, r5
	dummy = 0xFF;
 80006be:	27ff      	movs	r7, #255	; 0xff
 80006c0:	3d01      	subs	r5, #1
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006c2:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006c4:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80006c6:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006ca:	6893      	ldr	r3, [r2, #8]
 80006cc:	0798      	lsls	r0, r3, #30
 80006ce:	d5fc      	bpl.n	80006ca <SD_RxDataBlock+0x62>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006d0:	2301      	movs	r3, #1
 80006d2:	9600      	str	r6, [sp, #0]
 80006d4:	f10d 020f 	add.w	r2, sp, #15
 80006d8:	f10d 010e 	add.w	r1, sp, #14
 80006dc:	4640      	mov	r0, r8
 80006de:	f005 ff27 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 80006e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
	*buff = SPI_RxByte();
 80006e6:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while(len--);
 80006ea:	45a9      	cmp	r9, r5
 80006ec:	d1ea      	bne.n	80006c4 <SD_RxDataBlock+0x5c>
	dummy = 0xFF;
 80006ee:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006f0:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80006f2:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006f6:	6893      	ldr	r3, [r2, #8]
 80006f8:	0799      	lsls	r1, r3, #30
 80006fa:	d5fc      	bpl.n	80006f6 <SD_RxDataBlock+0x8e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006fc:	2364      	movs	r3, #100	; 0x64
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	f10d 020f 	add.w	r2, sp, #15
 8000704:	2301      	movs	r3, #1
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <SD_RxDataBlock+0xdc>)
 8000708:	f10d 010e 	add.w	r1, sp, #14
 800070c:	f005 ff10 	bl	8006530 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8000710:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000712:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000714:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000718:	6893      	ldr	r3, [r2, #8]
 800071a:	079b      	lsls	r3, r3, #30
 800071c:	d5fc      	bpl.n	8000718 <SD_RxDataBlock+0xb0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	f10d 020f 	add.w	r2, sp, #15
 8000726:	2301      	movs	r3, #1
 8000728:	f10d 010e 	add.w	r1, sp, #14
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <SD_RxDataBlock+0xdc>)
 800072e:	f005 feff 	bl	8006530 <HAL_SPI_TransmitReceive>
	return TRUE;
 8000732:	2001      	movs	r0, #1
}
 8000734:	b005      	add	sp, #20
 8000736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 800073a:	2000      	movs	r0, #0
 800073c:	e7b7      	b.n	80006ae <SD_RxDataBlock+0x46>
 800073e:	bf00      	nop
 8000740:	20016d0a 	.word	0x20016d0a
 8000744:	200023e0 	.word	0x200023e0

08000748 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Timer2 = 500;
 800074c:	4d52      	ldr	r5, [pc, #328]	; (8000898 <SD_TxDataBlock+0x150>)
 800074e:	4c53      	ldr	r4, [pc, #332]	; (800089c <SD_TxDataBlock+0x154>)
 8000750:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8000754:	b085      	sub	sp, #20
 8000756:	4681      	mov	r9, r0
 8000758:	4688      	mov	r8, r1
	Timer2 = 500;
 800075a:	802b      	strh	r3, [r5, #0]
	dummy = 0xFF;
 800075c:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800075e:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000760:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000762:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000766:	6893      	ldr	r3, [r2, #8]
 8000768:	079b      	lsls	r3, r3, #30
 800076a:	d5fc      	bpl.n	8000766 <SD_TxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800076c:	2301      	movs	r3, #1
 800076e:	9600      	str	r6, [sp, #0]
 8000770:	f10d 020f 	add.w	r2, sp, #15
 8000774:	f10d 010e 	add.w	r1, sp, #14
 8000778:	4620      	mov	r0, r4
 800077a:	f005 fed9 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 800077e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 8000782:	2bff      	cmp	r3, #255	; 0xff
 8000784:	d006      	beq.n	8000794 <SD_TxDataBlock+0x4c>
 8000786:	8828      	ldrh	r0, [r5, #0]
 8000788:	b280      	uxth	r0, r0
 800078a:	2800      	cmp	r0, #0
 800078c:	d1e8      	bne.n	8000760 <SD_TxDataBlock+0x18>

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;

	return FALSE;
}
 800078e:	b005      	add	sp, #20
 8000790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000794:	6822      	ldr	r2, [r4, #0]
 8000796:	f88d 800f 	strb.w	r8, [sp, #15]
 800079a:	6893      	ldr	r3, [r2, #8]
 800079c:	079f      	lsls	r7, r3, #30
 800079e:	d5fc      	bpl.n	800079a <SD_TxDataBlock+0x52>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80007a0:	483e      	ldr	r0, [pc, #248]	; (800089c <SD_TxDataBlock+0x154>)
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	f10d 010f 	add.w	r1, sp, #15
 80007aa:	f005 fd6f 	bl	800628c <HAL_SPI_Transmit>
	if (token != 0xFD)
 80007ae:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
 80007b2:	d06a      	beq.n	800088a <SD_TxDataBlock+0x142>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007b4:	6822      	ldr	r2, [r4, #0]
 80007b6:	6893      	ldr	r3, [r2, #8]
 80007b8:	079e      	lsls	r6, r3, #30
 80007ba:	d5fc      	bpl.n	80007b6 <SD_TxDataBlock+0x6e>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	4836      	ldr	r0, [pc, #216]	; (800089c <SD_TxDataBlock+0x154>)
 80007c4:	4649      	mov	r1, r9
 80007c6:	f005 fd61 	bl	800628c <HAL_SPI_Transmit>
	dummy = 0xFF;
 80007ca:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007cc:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80007ce:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007d2:	6893      	ldr	r3, [r2, #8]
 80007d4:	079d      	lsls	r5, r3, #30
 80007d6:	d5fc      	bpl.n	80007d2 <SD_TxDataBlock+0x8a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	f10d 020f 	add.w	r2, sp, #15
 80007e0:	2301      	movs	r3, #1
 80007e2:	482e      	ldr	r0, [pc, #184]	; (800089c <SD_TxDataBlock+0x154>)
 80007e4:	f10d 010e 	add.w	r1, sp, #14
 80007e8:	f005 fea2 	bl	8006530 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 80007ec:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007ee:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80007f0:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007f4:	6893      	ldr	r3, [r2, #8]
 80007f6:	0798      	lsls	r0, r3, #30
 80007f8:	d5fc      	bpl.n	80007f4 <SD_TxDataBlock+0xac>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80007fa:	2664      	movs	r6, #100	; 0x64
 80007fc:	4827      	ldr	r0, [pc, #156]	; (800089c <SD_TxDataBlock+0x154>)
 80007fe:	9600      	str	r6, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	f10d 020f 	add.w	r2, sp, #15
 8000806:	f10d 010e 	add.w	r1, sp, #14
 800080a:	f005 fe91 	bl	8006530 <HAL_SPI_TransmitReceive>
 800080e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800089c <SD_TxDataBlock+0x154>
 8000812:	f04f 0941 	mov.w	r9, #65	; 0x41
	dummy = 0xFF;
 8000816:	27ff      	movs	r7, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000818:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800081a:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800081e:	6893      	ldr	r3, [r2, #8]
 8000820:	0799      	lsls	r1, r3, #30
 8000822:	d5fc      	bpl.n	800081e <SD_TxDataBlock+0xd6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000824:	9600      	str	r6, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	f10d 020f 	add.w	r2, sp, #15
 800082c:	f10d 010e 	add.w	r1, sp, #14
 8000830:	4640      	mov	r0, r8
 8000832:	f005 fe7d 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000836:	f89d 500f 	ldrb.w	r5, [sp, #15]
			if ((resp & 0x1F) == 0x05) break;
 800083a:	f005 051f 	and.w	r5, r5, #31
 800083e:	2d05      	cmp	r5, #5
 8000840:	d004      	beq.n	800084c <SD_TxDataBlock+0x104>
		while (i <= 64)
 8000842:	f109 33ff 	add.w	r3, r9, #4294967295
 8000846:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
 800084a:	d1e5      	bne.n	8000818 <SD_TxDataBlock+0xd0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800084c:	4f13      	ldr	r7, [pc, #76]	; (800089c <SD_TxDataBlock+0x154>)
	dummy = 0xFF;
 800084e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000852:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000854:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8000856:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800085a:	6893      	ldr	r3, [r2, #8]
 800085c:	079b      	lsls	r3, r3, #30
 800085e:	d5fc      	bpl.n	800085a <SD_TxDataBlock+0x112>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000860:	2301      	movs	r3, #1
 8000862:	9600      	str	r6, [sp, #0]
 8000864:	f10d 020f 	add.w	r2, sp, #15
 8000868:	f10d 010e 	add.w	r1, sp, #14
 800086c:	4638      	mov	r0, r7
 800086e:	f005 fe5f 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000872:	f89d 300f 	ldrb.w	r3, [sp, #15]
		while (SPI_RxByte() == 0);
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0ec      	beq.n	8000854 <SD_TxDataBlock+0x10c>
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800087a:	f1a5 0005 	sub.w	r0, r5, #5
 800087e:	fab0 f080 	clz	r0, r0
 8000882:	0940      	lsrs	r0, r0, #5
}
 8000884:	b005      	add	sp, #20
 8000886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800088a:	2500      	movs	r5, #0
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800088c:	f1a5 0005 	sub.w	r0, r5, #5
 8000890:	fab0 f080 	clz	r0, r0
 8000894:	0940      	lsrs	r0, r0, #5
 8000896:	e7f5      	b.n	8000884 <SD_TxDataBlock+0x13c>
 8000898:	20016d0b 	.word	0x20016d0b
 800089c:	200023e0 	.word	0x200023e0

080008a0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Timer2 = 500;
 80008a4:	4d5c      	ldr	r5, [pc, #368]	; (8000a18 <SD_SendCmd+0x178>)
 80008a6:	4c5d      	ldr	r4, [pc, #372]	; (8000a1c <SD_SendCmd+0x17c>)
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 80008ac:	b085      	sub	sp, #20
 80008ae:	4681      	mov	r9, r0
 80008b0:	4688      	mov	r8, r1
	Timer2 = 500;
 80008b2:	802b      	strh	r3, [r5, #0]
	dummy = 0xFF;
 80008b4:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80008b6:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008b8:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80008ba:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008be:	6893      	ldr	r3, [r2, #8]
 80008c0:	0798      	lsls	r0, r3, #30
 80008c2:	d5fc      	bpl.n	80008be <SD_SendCmd+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80008c4:	2301      	movs	r3, #1
 80008c6:	9600      	str	r6, [sp, #0]
 80008c8:	f10d 020f 	add.w	r2, sp, #15
 80008cc:	f10d 010e 	add.w	r1, sp, #14
 80008d0:	4620      	mov	r0, r4
 80008d2:	f005 fe2d 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 80008d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 80008da:	2bff      	cmp	r3, #255	; 0xff
 80008dc:	d007      	beq.n	80008ee <SD_SendCmd+0x4e>
 80008de:	882b      	ldrh	r3, [r5, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1e8      	bne.n	80008b8 <SD_SendCmd+0x18>
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008e6:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 80008e8:	b005      	add	sp, #20
 80008ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008ee:	6822      	ldr	r2, [r4, #0]
 80008f0:	f88d 900f 	strb.w	r9, [sp, #15]
 80008f4:	6893      	ldr	r3, [r2, #8]
 80008f6:	0799      	lsls	r1, r3, #30
 80008f8:	d5fc      	bpl.n	80008f4 <SD_SendCmd+0x54>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	2201      	movs	r2, #1
 80008fe:	4847      	ldr	r0, [pc, #284]	; (8000a1c <SD_SendCmd+0x17c>)
 8000900:	f10d 010f 	add.w	r1, sp, #15
 8000904:	f005 fcc2 	bl	800628c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000908:	ea4f 6318 	mov.w	r3, r8, lsr #24
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800090c:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800090e:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000912:	6893      	ldr	r3, [r2, #8]
 8000914:	079b      	lsls	r3, r3, #30
 8000916:	d5fc      	bpl.n	8000912 <SD_SendCmd+0x72>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	2201      	movs	r2, #1
 800091c:	483f      	ldr	r0, [pc, #252]	; (8000a1c <SD_SendCmd+0x17c>)
 800091e:	f10d 010f 	add.w	r1, sp, #15
 8000922:	f005 fcb3 	bl	800628c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000926:	ea4f 4318 	mov.w	r3, r8, lsr #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800092a:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800092c:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000930:	6893      	ldr	r3, [r2, #8]
 8000932:	079f      	lsls	r7, r3, #30
 8000934:	d5fc      	bpl.n	8000930 <SD_SendCmd+0x90>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	2201      	movs	r2, #1
 800093a:	4838      	ldr	r0, [pc, #224]	; (8000a1c <SD_SendCmd+0x17c>)
 800093c:	f10d 010f 	add.w	r1, sp, #15
 8000940:	f005 fca4 	bl	800628c <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000944:	ea4f 2318 	mov.w	r3, r8, lsr #8
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000948:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800094a:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800094e:	6893      	ldr	r3, [r2, #8]
 8000950:	079e      	lsls	r6, r3, #30
 8000952:	d5fc      	bpl.n	800094e <SD_SendCmd+0xae>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000954:	2201      	movs	r2, #1
 8000956:	4831      	ldr	r0, [pc, #196]	; (8000a1c <SD_SendCmd+0x17c>)
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	f10d 010f 	add.w	r1, sp, #15
 800095e:	f005 fc95 	bl	800628c <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000962:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000964:	f88d 800f 	strb.w	r8, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000968:	6893      	ldr	r3, [r2, #8]
 800096a:	079d      	lsls	r5, r3, #30
 800096c:	d5fc      	bpl.n	8000968 <SD_SendCmd+0xc8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800096e:	482b      	ldr	r0, [pc, #172]	; (8000a1c <SD_SendCmd+0x17c>)
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	2201      	movs	r2, #1
 8000974:	f10d 010f 	add.w	r1, sp, #15
 8000978:	f005 fc88 	bl	800628c <HAL_SPI_Transmit>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800097c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000980:	d035      	beq.n	80009ee <SD_SendCmd+0x14e>
	else crc = 1;
 8000982:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 8000986:	bf0c      	ite	eq
 8000988:	2387      	moveq	r3, #135	; 0x87
 800098a:	2301      	movne	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800098c:	6822      	ldr	r2, [r4, #0]
 800098e:	f88d 300f 	strb.w	r3, [sp, #15]
 8000992:	6893      	ldr	r3, [r2, #8]
 8000994:	0798      	lsls	r0, r3, #30
 8000996:	d5fc      	bpl.n	8000992 <SD_SendCmd+0xf2>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000998:	4820      	ldr	r0, [pc, #128]	; (8000a1c <SD_SendCmd+0x17c>)
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	2201      	movs	r2, #1
 800099e:	f10d 010f 	add.w	r1, sp, #15
 80009a2:	f005 fc73 	bl	800628c <HAL_SPI_Transmit>
	if (cmd == CMD12) SPI_RxByte();
 80009a6:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 80009aa:	d022      	beq.n	80009f2 <SD_SendCmd+0x152>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009ac:	4f1b      	ldr	r7, [pc, #108]	; (8000a1c <SD_SendCmd+0x17c>)
	else crc = 1;
 80009ae:	250a      	movs	r5, #10
	dummy = 0xFF;
 80009b0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009b4:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009b6:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80009b8:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009bc:	6893      	ldr	r3, [r2, #8]
 80009be:	079b      	lsls	r3, r3, #30
 80009c0:	d5fc      	bpl.n	80009bc <SD_SendCmd+0x11c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009c2:	2301      	movs	r3, #1
 80009c4:	9600      	str	r6, [sp, #0]
 80009c6:	f10d 020f 	add.w	r2, sp, #15
 80009ca:	f10d 010e 	add.w	r1, sp, #14
 80009ce:	4638      	mov	r0, r7
 80009d0:	f005 fdae 	bl	8006530 <HAL_SPI_TransmitReceive>
	} while ((res & 0x80) && --n);
 80009d4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
	return data;
 80009d8:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da83      	bge.n	80008e8 <SD_SendCmd+0x48>
 80009e0:	1e6b      	subs	r3, r5, #1
 80009e2:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80009e6:	d1e6      	bne.n	80009b6 <SD_SendCmd+0x116>
}
 80009e8:	b005      	add	sp, #20
 80009ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80009ee:	2395      	movs	r3, #149	; 0x95
 80009f0:	e7cc      	b.n	800098c <SD_SendCmd+0xec>
	dummy = 0xFF;
 80009f2:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009f4:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80009f6:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009fa:	6893      	ldr	r3, [r2, #8]
 80009fc:	0799      	lsls	r1, r3, #30
 80009fe:	d5fc      	bpl.n	80009fa <SD_SendCmd+0x15a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	f10d 020f 	add.w	r2, sp, #15
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f10d 010e 	add.w	r1, sp, #14
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <SD_SendCmd+0x17c>)
 8000a10:	f005 fd8e 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000a14:	e7ca      	b.n	80009ac <SD_SendCmd+0x10c>
 8000a16:	bf00      	nop
 8000a18:	20016d0b 	.word	0x20016d0b
 8000a1c:	200023e0 	.word	0x200023e0

08000a20 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d145      	bne.n	8000ab0 <SD_disk_initialize+0x90>
{
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000a28:	4d7f      	ldr	r5, [pc, #508]	; (8000c28 <SD_disk_initialize+0x208>)
 8000a2a:	782c      	ldrb	r4, [r5, #0]
 8000a2c:	f014 0402 	ands.w	r4, r4, #2
{
 8000a30:	b087      	sub	sp, #28
	if(Stat & STA_NODISK) return Stat;
 8000a32:	d004      	beq.n	8000a3e <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 8000a34:	7828      	ldrb	r0, [r5, #0]
 8000a36:	b2c0      	uxtb	r0, r0
}
 8000a38:	b007      	add	sp, #28
 8000a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SD_PowerOn();
 8000a3e:	f7ff fda1 	bl	8000584 <SD_PowerOn>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000a42:	4622      	mov	r2, r4
 8000a44:	2110      	movs	r1, #16
 8000a46:	4879      	ldr	r0, [pc, #484]	; (8000c2c <SD_disk_initialize+0x20c>)
 8000a48:	f004 faac 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f004 f89b 	bl	8004b88 <HAL_Delay>
	if (SD_SendCmd(CMD0, 0) == 1)
 8000a52:	4621      	mov	r1, r4
 8000a54:	2040      	movs	r0, #64	; 0x40
 8000a56:	f7ff ff23 	bl	80008a0 <SD_SendCmd>
 8000a5a:	2801      	cmp	r0, #1
 8000a5c:	4607      	mov	r7, r0
 8000a5e:	d030      	beq.n	8000ac2 <SD_disk_initialize+0xa2>
 8000a60:	4e73      	ldr	r6, [pc, #460]	; (8000c30 <SD_disk_initialize+0x210>)
 8000a62:	f10d 0813 	add.w	r8, sp, #19
 8000a66:	f10d 0712 	add.w	r7, sp, #18
	CardType = type;
 8000a6a:	4b72      	ldr	r3, [pc, #456]	; (8000c34 <SD_disk_initialize+0x214>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000a6c:	486f      	ldr	r0, [pc, #444]	; (8000c2c <SD_disk_initialize+0x20c>)
	CardType = type;
 8000a6e:	701c      	strb	r4, [r3, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	f004 fa96 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f004 f885 	bl	8004b88 <HAL_Delay>
	dummy = 0xFF;
 8000a7e:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a80:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000a82:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a86:	6893      	ldr	r3, [r2, #8]
 8000a88:	079b      	lsls	r3, r3, #30
 8000a8a:	d5fc      	bpl.n	8000a86 <SD_disk_initialize+0x66>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a8c:	2364      	movs	r3, #100	; 0x64
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4867      	ldr	r0, [pc, #412]	; (8000c30 <SD_disk_initialize+0x210>)
 8000a92:	2301      	movs	r3, #1
 8000a94:	4642      	mov	r2, r8
 8000a96:	4639      	mov	r1, r7
 8000a98:	f005 fd4a 	bl	8006530 <HAL_SPI_TransmitReceive>
	if (type)
 8000a9c:	b154      	cbz	r4, 8000ab4 <SD_disk_initialize+0x94>
		Stat &= ~STA_NOINIT;
 8000a9e:	782b      	ldrb	r3, [r5, #0]
 8000aa0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000aa4:	702b      	strb	r3, [r5, #0]
	return Stat;
 8000aa6:	7828      	ldrb	r0, [r5, #0]
 8000aa8:	b2c0      	uxtb	r0, r0
}
 8000aaa:	b007      	add	sp, #28
 8000aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(drv) return STA_NOINIT;
 8000ab0:	2001      	movs	r0, #1
}
 8000ab2:	4770      	bx	lr
	return Stat;
 8000ab4:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 8000ab6:	4b60      	ldr	r3, [pc, #384]	; (8000c38 <SD_disk_initialize+0x218>)
	return Stat;
 8000ab8:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 8000aba:	701c      	strb	r4, [r3, #0]
}
 8000abc:	b007      	add	sp, #28
 8000abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Timer1 = 1000;
 8000ac2:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000c3c <SD_disk_initialize+0x21c>
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000aca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ace:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 8000ad0:	f8a9 3000 	strh.w	r3, [r9]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ad4:	f7ff fee4 	bl	80008a0 <SD_SendCmd>
 8000ad8:	2801      	cmp	r0, #1
 8000ada:	d168      	bne.n	8000bae <SD_disk_initialize+0x18e>
 8000adc:	4e54      	ldr	r6, [pc, #336]	; (8000c30 <SD_disk_initialize+0x210>)
 8000ade:	ab05      	add	r3, sp, #20
 8000ae0:	9303      	str	r3, [sp, #12]
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	f10d 0813 	add.w	r8, sp, #19
 8000ae8:	f10d 0712 	add.w	r7, sp, #18
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000aec:	46b3      	mov	fp, r6
	dummy = 0xFF;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000af2:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000af4:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000af8:	6893      	ldr	r3, [r2, #8]
 8000afa:	0799      	lsls	r1, r3, #30
 8000afc:	d5fc      	bpl.n	8000af8 <SD_disk_initialize+0xd8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000afe:	2364      	movs	r3, #100	; 0x64
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4642      	mov	r2, r8
 8000b04:	2301      	movs	r3, #1
 8000b06:	4639      	mov	r1, r7
 8000b08:	4658      	mov	r0, fp
 8000b0a:	f005 fd11 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000b0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
				ocr[n] = SPI_RxByte();
 8000b12:	f80a 3b01 	strb.w	r3, [sl], #1
			for (n = 0; n < 4; n++)
 8000b16:	ab06      	add	r3, sp, #24
 8000b18:	459a      	cmp	sl, r3
 8000b1a:	d1e8      	bne.n	8000aee <SD_disk_initialize+0xce>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b1c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d1a2      	bne.n	8000a6a <SD_disk_initialize+0x4a>
 8000b24:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000b28:	2baa      	cmp	r3, #170	; 0xaa
 8000b2a:	d19e      	bne.n	8000a6a <SD_disk_initialize+0x4a>
 8000b2c:	e003      	b.n	8000b36 <SD_disk_initialize+0x116>
				} while (Timer1);
 8000b2e:	f8b9 3000 	ldrh.w	r3, [r9]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b163      	cbz	r3, 8000b50 <SD_disk_initialize+0x130>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b36:	2100      	movs	r1, #0
 8000b38:	2077      	movs	r0, #119	; 0x77
 8000b3a:	f7ff feb1 	bl	80008a0 <SD_SendCmd>
 8000b3e:	2801      	cmp	r0, #1
 8000b40:	d8f5      	bhi.n	8000b2e <SD_disk_initialize+0x10e>
 8000b42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b46:	2069      	movs	r0, #105	; 0x69
 8000b48:	f7ff feaa 	bl	80008a0 <SD_SendCmd>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1ee      	bne.n	8000b2e <SD_disk_initialize+0x10e>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b50:	f8b9 3000 	ldrh.w	r3, [r9]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d087      	beq.n	8000a6a <SD_disk_initialize+0x4a>
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	207a      	movs	r0, #122	; 0x7a
 8000b5e:	f7ff fe9f 	bl	80008a0 <SD_SendCmd>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d181      	bne.n	8000a6a <SD_disk_initialize+0x4a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b66:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8000c30 <SD_disk_initialize+0x210>
 8000b6a:	f8dd b00c 	ldr.w	fp, [sp, #12]
	dummy = 0xFF;
 8000b6e:	24ff      	movs	r4, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b70:	f04f 0a64 	mov.w	sl, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b74:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8000b76:	f88d 4012 	strb.w	r4, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b7a:	6883      	ldr	r3, [r0, #8]
 8000b7c:	079a      	lsls	r2, r3, #30
 8000b7e:	d5fc      	bpl.n	8000b7a <SD_disk_initialize+0x15a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b80:	2301      	movs	r3, #1
 8000b82:	f8cd a000 	str.w	sl, [sp]
 8000b86:	4642      	mov	r2, r8
 8000b88:	4639      	mov	r1, r7
 8000b8a:	4648      	mov	r0, r9
 8000b8c:	f005 fcd0 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000b90:	f89d 3013 	ldrb.w	r3, [sp, #19]
						ocr[n] = SPI_RxByte();
 8000b94:	f80b 3b01 	strb.w	r3, [fp], #1
					for (n = 0; n < 4; n++)
 8000b98:	ab06      	add	r3, sp, #24
 8000b9a:	459b      	cmp	fp, r3
 8000b9c:	d1ea      	bne.n	8000b74 <SD_disk_initialize+0x154>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000b9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000ba2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000ba6:	bf14      	ite	ne
 8000ba8:	240c      	movne	r4, #12
 8000baa:	2404      	moveq	r4, #4
 8000bac:	e75d      	b.n	8000a6a <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000bae:	4621      	mov	r1, r4
 8000bb0:	2077      	movs	r0, #119	; 0x77
 8000bb2:	f7ff fe75 	bl	80008a0 <SD_SendCmd>
 8000bb6:	2801      	cmp	r0, #1
 8000bb8:	d804      	bhi.n	8000bc4 <SD_disk_initialize+0x1a4>
 8000bba:	e01c      	b.n	8000bf6 <SD_disk_initialize+0x1d6>
			} while (Timer1);
 8000bbc:	f8b9 3000 	ldrh.w	r3, [r9]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b12b      	cbz	r3, 8000bd0 <SD_disk_initialize+0x1b0>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2041      	movs	r0, #65	; 0x41
 8000bc8:	f7ff fe6a 	bl	80008a0 <SD_SendCmd>
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d1f5      	bne.n	8000bbc <SD_disk_initialize+0x19c>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000bd0:	f8b9 3000 	ldrh.w	r3, [r9]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f43f af42 	beq.w	8000a60 <SD_disk_initialize+0x40>
 8000bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be0:	2050      	movs	r0, #80	; 0x50
 8000be2:	f7ff fe5d 	bl	80008a0 <SD_SendCmd>
 8000be6:	4e12      	ldr	r6, [pc, #72]	; (8000c30 <SD_disk_initialize+0x210>)
 8000be8:	b900      	cbnz	r0, 8000bec <SD_disk_initialize+0x1cc>
 8000bea:	463c      	mov	r4, r7
 8000bec:	f10d 0813 	add.w	r8, sp, #19
 8000bf0:	f10d 0712 	add.w	r7, sp, #18
 8000bf4:	e739      	b.n	8000a6a <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000bf6:	4621      	mov	r1, r4
 8000bf8:	2069      	movs	r0, #105	; 0x69
 8000bfa:	f7ff fe51 	bl	80008a0 <SD_SendCmd>
 8000bfe:	2801      	cmp	r0, #1
 8000c00:	d8e0      	bhi.n	8000bc4 <SD_disk_initialize+0x1a4>
 8000c02:	e003      	b.n	8000c0c <SD_disk_initialize+0x1ec>
			} while (Timer1);
 8000c04:	f8b9 3000 	ldrh.w	r3, [r9]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b15b      	cbz	r3, 8000c24 <SD_disk_initialize+0x204>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2077      	movs	r0, #119	; 0x77
 8000c10:	f7ff fe46 	bl	80008a0 <SD_SendCmd>
 8000c14:	2801      	cmp	r0, #1
 8000c16:	d8f5      	bhi.n	8000c04 <SD_disk_initialize+0x1e4>
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2069      	movs	r0, #105	; 0x69
 8000c1c:	f7ff fe40 	bl	80008a0 <SD_SendCmd>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1ef      	bne.n	8000c04 <SD_disk_initialize+0x1e4>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000c24:	2702      	movs	r7, #2
 8000c26:	e7d3      	b.n	8000bd0 <SD_disk_initialize+0x1b0>
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	200023e0 	.word	0x200023e0
 8000c34:	20000164 	.word	0x20000164
 8000c38:	20000165 	.word	0x20000165
 8000c3c:	20016d0a 	.word	0x20016d0a

08000c40 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 8000c40:	b918      	cbnz	r0, 8000c4a <SD_disk_status+0xa>
	return Stat;
 8000c42:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <SD_disk_status+0x10>)
 8000c44:	7818      	ldrb	r0, [r3, #0]
 8000c46:	b2c0      	uxtb	r0, r0
 8000c48:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8000c4a:	2001      	movs	r0, #1
}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000000 	.word	0x20000000

08000c54 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c58:	b089      	sub	sp, #36	; 0x24
 8000c5a:	9303      	str	r3, [sp, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d150      	bne.n	8000d02 <SD_disk_read+0xae>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d04e      	beq.n	8000d02 <SD_disk_read+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c64:	4b9d      	ldr	r3, [pc, #628]	; (8000edc <SD_disk_read+0x288>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	07dc      	lsls	r4, r3, #31
 8000c6a:	d471      	bmi.n	8000d50 <SD_disk_read+0xfc>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c6c:	4b9c      	ldr	r3, [pc, #624]	; (8000ee0 <SD_disk_read+0x28c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	0758      	lsls	r0, r3, #29
 8000c72:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c74:	489b      	ldr	r0, [pc, #620]	; (8000ee4 <SD_disk_read+0x290>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c76:	bf58      	it	pl
 8000c78:	0254      	lslpl	r4, r2, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c7a:	468a      	mov	sl, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	f004 f990 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f003 ff7f 	bl	8004b88 <HAL_Delay>

	SELECT();

	if (count == 1)
 8000c8a:	9b03      	ldr	r3, [sp, #12]
 8000c8c:	2b01      	cmp	r3, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000c8e:	4621      	mov	r1, r4
	if (count == 1)
 8000c90:	f000 80ab 	beq.w	8000dea <SD_disk_read+0x196>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000c94:	2052      	movs	r0, #82	; 0x52
 8000c96:	f7ff fe03 	bl	80008a0 <SD_SendCmd>
 8000c9a:	4e93      	ldr	r6, [pc, #588]	; (8000ee8 <SD_disk_read+0x294>)
 8000c9c:	9004      	str	r0, [sp, #16]
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d135      	bne.n	8000d0e <SD_disk_read+0xba>
 8000ca2:	f10d 051f 	add.w	r5, sp, #31
 8000ca6:	f10d 041e 	add.w	r4, sp, #30
 8000caa:	f8df b240 	ldr.w	fp, [pc, #576]	; 8000eec <SD_disk_read+0x298>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cae:	462a      	mov	r2, r5
	dummy = 0xFF;
 8000cb0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cb4:	4637      	mov	r7, r6
 8000cb6:	4625      	mov	r5, r4
	Timer1 = 200;
 8000cb8:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8000cbc:	f8ab 3000 	strh.w	r3, [fp]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cc0:	2464      	movs	r4, #100	; 0x64
 8000cc2:	4691      	mov	r9, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cc4:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000cc6:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cca:	6893      	ldr	r3, [r2, #8]
 8000ccc:	0799      	lsls	r1, r3, #30
 8000cce:	d5fc      	bpl.n	8000cca <SD_disk_read+0x76>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	9400      	str	r4, [sp, #0]
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	4638      	mov	r0, r7
 8000cda:	f005 fc29 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000cde:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8000ce2:	2bff      	cmp	r3, #255	; 0xff
 8000ce4:	d13a      	bne.n	8000d5c <SD_disk_read+0x108>
 8000ce6:	f8bb 3000 	ldrh.w	r3, [fp]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1e9      	bne.n	8000cc4 <SD_disk_read+0x70>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	462c      	mov	r4, r5
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	464d      	mov	r5, r9
				if (!SD_RxDataBlock(buff, 512)) break;
				buff += 512;
			} while (--count);

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	204c      	movs	r0, #76	; 0x4c
 8000cfc:	f7ff fdd0 	bl	80008a0 <SD_SendCmd>
 8000d00:	e00b      	b.n	8000d1a <SD_disk_read+0xc6>
	if (pdrv || !count) return RES_PARERR;
 8000d02:	2304      	movs	r3, #4
 8000d04:	9304      	str	r3, [sp, #16]
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8000d06:	9804      	ldr	r0, [sp, #16]
 8000d08:	b009      	add	sp, #36	; 0x24
 8000d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9304      	str	r3, [sp, #16]
 8000d12:	f10d 051f 	add.w	r5, sp, #31
 8000d16:	f10d 041e 	add.w	r4, sp, #30
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4871      	ldr	r0, [pc, #452]	; (8000ee4 <SD_disk_read+0x290>)
 8000d1e:	2110      	movs	r1, #16
 8000d20:	f004 f940 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f003 ff2f 	bl	8004b88 <HAL_Delay>
	dummy = 0xFF;
 8000d2a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d2c:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000d2e:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d32:	6893      	ldr	r3, [r2, #8]
 8000d34:	079b      	lsls	r3, r3, #30
 8000d36:	d5fc      	bpl.n	8000d32 <SD_disk_read+0xde>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	462a      	mov	r2, r5
 8000d3e:	2301      	movs	r3, #1
 8000d40:	4621      	mov	r1, r4
 8000d42:	4869      	ldr	r0, [pc, #420]	; (8000ee8 <SD_disk_read+0x294>)
 8000d44:	f005 fbf4 	bl	8006530 <HAL_SPI_TransmitReceive>
}
 8000d48:	9804      	ldr	r0, [sp, #16]
 8000d4a:	b009      	add	sp, #36	; 0x24
 8000d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d50:	2303      	movs	r3, #3
 8000d52:	9304      	str	r3, [sp, #16]
}
 8000d54:	9804      	ldr	r0, [sp, #16]
 8000d56:	b009      	add	sp, #36	; 0x24
 8000d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(token != 0xFE) return FALSE;
 8000d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8000d5e:	464a      	mov	r2, r9
 8000d60:	d177      	bne.n	8000e52 <SD_disk_read+0x1fe>
 8000d62:	f10a 39ff 	add.w	r9, sl, #4294967295
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d66:	f8cd b014 	str.w	fp, [sp, #20]
 8000d6a:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8000d6e:	2464      	movs	r4, #100	; 0x64
 8000d70:	4693      	mov	fp, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d72:	6831      	ldr	r1, [r6, #0]
	dummy = 0xFF;
 8000d74:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d78:	688b      	ldr	r3, [r1, #8]
 8000d7a:	079b      	lsls	r3, r3, #30
 8000d7c:	d5fc      	bpl.n	8000d78 <SD_disk_read+0x124>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9400      	str	r4, [sp, #0]
 8000d82:	465a      	mov	r2, fp
 8000d84:	4629      	mov	r1, r5
 8000d86:	4638      	mov	r0, r7
 8000d88:	f005 fbd2 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000d8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8000d90:	f809 3f01 	strb.w	r3, [r9, #1]!
	} while(len--);
 8000d94:	45d1      	cmp	r9, sl
 8000d96:	d1ec      	bne.n	8000d72 <SD_disk_read+0x11e>
	dummy = 0xFF;
 8000d98:	465a      	mov	r2, fp
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d9a:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8000d9c:	f8dd b014 	ldr.w	fp, [sp, #20]
 8000da0:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000da4:	6883      	ldr	r3, [r0, #8]
 8000da6:	079c      	lsls	r4, r3, #30
 8000da8:	d5fc      	bpl.n	8000da4 <SD_disk_read+0x150>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000daa:	2364      	movs	r3, #100	; 0x64
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4629      	mov	r1, r5
 8000db0:	2301      	movs	r3, #1
 8000db2:	4638      	mov	r0, r7
 8000db4:	9205      	str	r2, [sp, #20]
 8000db6:	f005 fbbb 	bl	8006530 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dba:	6830      	ldr	r0, [r6, #0]
 8000dbc:	9a05      	ldr	r2, [sp, #20]
	dummy = 0xFF;
 8000dbe:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dc2:	6883      	ldr	r3, [r0, #8]
 8000dc4:	0799      	lsls	r1, r3, #30
 8000dc6:	d5fc      	bpl.n	8000dc2 <SD_disk_read+0x16e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000dc8:	2364      	movs	r3, #100	; 0x64
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4629      	mov	r1, r5
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	9205      	str	r2, [sp, #20]
 8000dd4:	f005 fbac 	bl	8006530 <HAL_SPI_TransmitReceive>
			} while (--count);
 8000dd8:	9b03      	ldr	r3, [sp, #12]
 8000dda:	9a05      	ldr	r2, [sp, #20]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	f47f af6a 	bne.w	8000cb8 <SD_disk_read+0x64>
 8000de4:	462c      	mov	r4, r5
 8000de6:	4615      	mov	r5, r2
 8000de8:	e786      	b.n	8000cf8 <SD_disk_read+0xa4>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000dea:	2051      	movs	r0, #81	; 0x51
 8000dec:	f7ff fd58 	bl	80008a0 <SD_SendCmd>
 8000df0:	9004      	str	r0, [sp, #16]
 8000df2:	b138      	cbz	r0, 8000e04 <SD_disk_read+0x1b0>
 8000df4:	4e3c      	ldr	r6, [pc, #240]	; (8000ee8 <SD_disk_read+0x294>)
 8000df6:	f10d 051f 	add.w	r5, sp, #31
 8000dfa:	f10d 041e 	add.w	r4, sp, #30
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	e78a      	b.n	8000d1a <SD_disk_read+0xc6>
	Timer1 = 200;
 8000e04:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8000eec <SD_disk_read+0x298>
 8000e08:	4e37      	ldr	r6, [pc, #220]	; (8000ee8 <SD_disk_read+0x294>)
 8000e0a:	23c8      	movs	r3, #200	; 0xc8
 8000e0c:	f8ab 3000 	strh.w	r3, [fp]
 8000e10:	f10d 051f 	add.w	r5, sp, #31
 8000e14:	f10d 041e 	add.w	r4, sp, #30
	dummy = 0xFF;
 8000e18:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e1c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e20:	4637      	mov	r7, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e22:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8000e24:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e28:	6893      	ldr	r3, [r2, #8]
 8000e2a:	0799      	lsls	r1, r3, #30
 8000e2c:	d5fc      	bpl.n	8000e28 <SD_disk_read+0x1d4>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f8cd 9000 	str.w	r9, [sp]
 8000e34:	462a      	mov	r2, r5
 8000e36:	4621      	mov	r1, r4
 8000e38:	4638      	mov	r0, r7
 8000e3a:	f005 fb79 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000e3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d10a      	bne.n	8000e5c <SD_disk_read+0x208>
 8000e46:	f8bb 3000 	ldrh.w	r3, [fp]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1e8      	bne.n	8000e22 <SD_disk_read+0x1ce>
 8000e50:	e7d5      	b.n	8000dfe <SD_disk_read+0x1aa>
 8000e52:	2301      	movs	r3, #1
 8000e54:	462c      	mov	r4, r5
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	464d      	mov	r5, r9
 8000e5a:	e74d      	b.n	8000cf8 <SD_disk_read+0xa4>
	if(token != 0xFE) return FALSE;
 8000e5c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e5e:	d1ce      	bne.n	8000dfe <SD_disk_read+0x1aa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e60:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000ee8 <SD_disk_read+0x294>
 8000e64:	f10a 37ff 	add.w	r7, sl, #4294967295
	dummy = 0xFF;
 8000e68:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8000e6c:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e70:	f04f 0b64 	mov.w	fp, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e74:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8000e76:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e7a:	6883      	ldr	r3, [r0, #8]
 8000e7c:	079b      	lsls	r3, r3, #30
 8000e7e:	d5fc      	bpl.n	8000e7a <SD_disk_read+0x226>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e80:	2301      	movs	r3, #1
 8000e82:	f8cd b000 	str.w	fp, [sp]
 8000e86:	462a      	mov	r2, r5
 8000e88:	4621      	mov	r1, r4
 8000e8a:	4648      	mov	r0, r9
 8000e8c:	f005 fb50 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8000e90:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8000e94:	f807 3f01 	strb.w	r3, [r7, #1]!
	} while(len--);
 8000e98:	4557      	cmp	r7, sl
 8000e9a:	d1eb      	bne.n	8000e74 <SD_disk_read+0x220>
	dummy = 0xFF;
 8000e9c:	23ff      	movs	r3, #255	; 0xff
 8000e9e:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ea2:	6833      	ldr	r3, [r6, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	0797      	lsls	r7, r2, #30
 8000ea8:	d5fc      	bpl.n	8000ea4 <SD_disk_read+0x250>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <SD_disk_read+0x294>)
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	462a      	mov	r2, r5
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	f005 fb3b 	bl	8006530 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8000eba:	23ff      	movs	r3, #255	; 0xff
 8000ebc:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	0790      	lsls	r0, r2, #30
 8000ec6:	d5fc      	bpl.n	8000ec2 <SD_disk_read+0x26e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	462a      	mov	r2, r5
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <SD_disk_read+0x294>)
 8000ed4:	f005 fb2c 	bl	8006530 <HAL_SPI_TransmitReceive>
	return TRUE;
 8000ed8:	e71f      	b.n	8000d1a <SD_disk_read+0xc6>
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000164 	.word	0x20000164
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	200023e0 	.word	0x200023e0
 8000eec:	20016d0a 	.word	0x20016d0a

08000ef0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	b085      	sub	sp, #20
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d155      	bne.n	8000fa4 <SD_disk_write+0xb4>
 8000ef8:	461c      	mov	r4, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d052      	beq.n	8000fa4 <SD_disk_write+0xb4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <SD_disk_write+0xfc>)
 8000f00:	4616      	mov	r6, r2
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	07d5      	lsls	r5, r2, #31
 8000f06:	d451      	bmi.n	8000fac <SD_disk_write+0xbc>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0758      	lsls	r0, r3, #29
 8000f0c:	d452      	bmi.n	8000fb4 <SD_disk_write+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f0e:	4f38      	ldr	r7, [pc, #224]	; (8000ff0 <SD_disk_write+0x100>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f10:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <SD_disk_write+0x104>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f12:	783b      	ldrb	r3, [r7, #0]
 8000f14:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f18:	0759      	lsls	r1, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f1a:	f04f 0110 	mov.w	r1, #16
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f1e:	bf58      	it	pl
 8000f20:	0276      	lslpl	r6, r6, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f22:	f004 f83f 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f003 fe2e 	bl	8004b88 <HAL_Delay>

	SELECT();

	if (count == 1)
 8000f2c:	2c01      	cmp	r4, #1
 8000f2e:	d04e      	beq.n	8000fce <SD_disk_write+0xde>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f30:	783b      	ldrb	r3, [r7, #0]
 8000f32:	079a      	lsls	r2, r3, #30
 8000f34:	d442      	bmi.n	8000fbc <SD_disk_write+0xcc>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f36:	4631      	mov	r1, r6
 8000f38:	2059      	movs	r0, #89	; 0x59
 8000f3a:	f7ff fcb1 	bl	80008a0 <SD_SendCmd>
 8000f3e:	b1f8      	cbz	r0, 8000f80 <SD_disk_write+0x90>
 8000f40:	2401      	movs	r4, #1
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <SD_disk_write+0x104>)
 8000f46:	2110      	movs	r1, #16
 8000f48:	f004 f82c 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f003 fe1b 	bl	8004b88 <HAL_Delay>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f52:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <SD_disk_write+0x108>)
	dummy = 0xFF;
 8000f54:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f56:	6812      	ldr	r2, [r2, #0]
	dummy = 0xFF;
 8000f58:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	079b      	lsls	r3, r3, #30
 8000f60:	d5fc      	bpl.n	8000f5c <SD_disk_write+0x6c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	f10d 020f 	add.w	r2, sp, #15
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f10d 010e 	add.w	r1, sp, #14
 8000f70:	4821      	ldr	r0, [pc, #132]	; (8000ff8 <SD_disk_write+0x108>)
 8000f72:	f005 fadd 	bl	8006530 <HAL_SPI_TransmitReceive>
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8000f76:	4620      	mov	r0, r4
 8000f78:	b005      	add	sp, #20
 8000f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} while (--count);
 8000f7c:	3c01      	subs	r4, #1
 8000f7e:	d007      	beq.n	8000f90 <SD_disk_write+0xa0>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f80:	4628      	mov	r0, r5
 8000f82:	21fc      	movs	r1, #252	; 0xfc
 8000f84:	f7ff fbe0 	bl	8000748 <SD_TxDataBlock>
				buff += 512;
 8000f88:	f505 7500 	add.w	r5, r5, #512	; 0x200
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d1f5      	bne.n	8000f7c <SD_disk_write+0x8c>
			if(!SD_TxDataBlock(0, 0xFD))
 8000f90:	21fd      	movs	r1, #253	; 0xfd
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fbd8 	bl	8000748 <SD_TxDataBlock>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d0d1      	beq.n	8000f40 <SD_disk_write+0x50>
	return count ? RES_ERROR : RES_OK;
 8000f9c:	3c00      	subs	r4, #0
 8000f9e:	bf18      	it	ne
 8000fa0:	2401      	movne	r4, #1
 8000fa2:	e7ce      	b.n	8000f42 <SD_disk_write+0x52>
	if (pdrv || !count) return RES_PARERR;
 8000fa4:	2404      	movs	r4, #4
}
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	b005      	add	sp, #20
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000fac:	2403      	movs	r4, #3
}
 8000fae:	4620      	mov	r0, r4
 8000fb0:	b005      	add	sp, #20
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000fb4:	2402      	movs	r4, #2
}
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	b005      	add	sp, #20
 8000fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SD_SendCmd(CMD55, 0);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2077      	movs	r0, #119	; 0x77
 8000fc0:	f7ff fc6e 	bl	80008a0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	2057      	movs	r0, #87	; 0x57
 8000fc8:	f7ff fc6a 	bl	80008a0 <SD_SendCmd>
 8000fcc:	e7b3      	b.n	8000f36 <SD_disk_write+0x46>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fce:	4631      	mov	r1, r6
 8000fd0:	2058      	movs	r0, #88	; 0x58
 8000fd2:	f7ff fc65 	bl	80008a0 <SD_SendCmd>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d1b2      	bne.n	8000f40 <SD_disk_write+0x50>
 8000fda:	21fe      	movs	r1, #254	; 0xfe
 8000fdc:	4628      	mov	r0, r5
 8000fde:	f7ff fbb3 	bl	8000748 <SD_TxDataBlock>
	return count ? RES_ERROR : RES_OK;
 8000fe2:	fab0 f480 	clz	r4, r0
 8000fe6:	0964      	lsrs	r4, r4, #5
 8000fe8:	e7ab      	b.n	8000f42 <SD_disk_write+0x52>
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000164 	.word	0x20000164
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	200023e0 	.word	0x200023e0

08000ffc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	b08b      	sub	sp, #44	; 0x2c
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001002:	bb08      	cbnz	r0, 8001048 <SD_disk_ioctl+0x4c>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8001004:	2905      	cmp	r1, #5
 8001006:	460d      	mov	r5, r1
 8001008:	4617      	mov	r7, r2
 800100a:	d017      	beq.n	800103c <SD_disk_ioctl+0x40>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800100c:	4b87      	ldr	r3, [pc, #540]	; (800122c <SD_disk_ioctl+0x230>)
 800100e:	781c      	ldrb	r4, [r3, #0]
 8001010:	f014 0401 	ands.w	r4, r4, #1
 8001014:	d11d      	bne.n	8001052 <SD_disk_ioctl+0x56>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001016:	4886      	ldr	r0, [pc, #536]	; (8001230 <SD_disk_ioctl+0x234>)
 8001018:	4622      	mov	r2, r4
 800101a:	2110      	movs	r1, #16
 800101c:	f003 ffc2 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f003 fdb1 	bl	8004b88 <HAL_Delay>

		SELECT();

		switch (ctrl)
 8001026:	2d0d      	cmp	r5, #13
 8001028:	d818      	bhi.n	800105c <SD_disk_ioctl+0x60>
 800102a:	e8df f005 	tbb	[pc, r5]
 800102e:	7650      	.short	0x7650
 8001030:	17171792 	.word	0x17171792
 8001034:	17171717 	.word	0x17171717
 8001038:	45998117 	.word	0x45998117
		switch (*ptr)
 800103c:	7814      	ldrb	r4, [r2, #0]
 800103e:	2c01      	cmp	r4, #1
 8001040:	d034      	beq.n	80010ac <SD_disk_ioctl+0xb0>
 8001042:	2c02      	cmp	r4, #2
 8001044:	d02d      	beq.n	80010a2 <SD_disk_ioctl+0xa6>
 8001046:	b34c      	cbz	r4, 800109c <SD_disk_ioctl+0xa0>
 8001048:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 800104a:	4620      	mov	r0, r4
 800104c:	b00b      	add	sp, #44	; 0x2c
 800104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001052:	2403      	movs	r4, #3
}
 8001054:	4620      	mov	r0, r4
 8001056:	b00b      	add	sp, #44	; 0x2c
 8001058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800105c:	4e75      	ldr	r6, [pc, #468]	; (8001234 <SD_disk_ioctl+0x238>)
		switch (ctrl)
 800105e:	2404      	movs	r4, #4
 8001060:	f10d 0717 	add.w	r7, sp, #23
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	4872      	ldr	r0, [pc, #456]	; (8001230 <SD_disk_ioctl+0x234>)
 8001068:	2110      	movs	r1, #16
 800106a:	f003 ff9b 	bl	8004fa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f003 fd8a 	bl	8004b88 <HAL_Delay>
	dummy = 0xFF;
 8001074:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001076:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001078:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800107c:	6893      	ldr	r3, [r2, #8]
 800107e:	079b      	lsls	r3, r3, #30
 8001080:	d5fc      	bpl.n	800107c <SD_disk_ioctl+0x80>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	463a      	mov	r2, r7
 8001088:	2301      	movs	r3, #1
 800108a:	f10d 0116 	add.w	r1, sp, #22
 800108e:	4869      	ldr	r0, [pc, #420]	; (8001234 <SD_disk_ioctl+0x238>)
 8001090:	f005 fa4e 	bl	8006530 <HAL_SPI_TransmitReceive>
}
 8001094:	4620      	mov	r0, r4
 8001096:	b00b      	add	sp, #44	; 0x2c
 8001098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PowerFlag = 0;
 800109c:	4b66      	ldr	r3, [pc, #408]	; (8001238 <SD_disk_ioctl+0x23c>)
 800109e:	701c      	strb	r4, [r3, #0]
			break;
 80010a0:	e7d3      	b.n	800104a <SD_disk_ioctl+0x4e>
	return PowerFlag;
 80010a2:	4b65      	ldr	r3, [pc, #404]	; (8001238 <SD_disk_ioctl+0x23c>)
			*(ptr + 1) = SD_CheckPower();
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 80010a8:	4604      	mov	r4, r0
			break;
 80010aa:	e7ce      	b.n	800104a <SD_disk_ioctl+0x4e>
 80010ac:	9003      	str	r0, [sp, #12]
			SD_PowerOn();		/* Power On */
 80010ae:	f7ff fa69 	bl	8000584 <SD_PowerOn>
			res = RES_OK;
 80010b2:	9803      	ldr	r0, [sp, #12]
 80010b4:	4604      	mov	r4, r0
			break;
 80010b6:	e7c8      	b.n	800104a <SD_disk_ioctl+0x4e>
			if (SD_SendCmd(CMD58, 0) == 0)
 80010b8:	2100      	movs	r1, #0
 80010ba:	207a      	movs	r0, #122	; 0x7a
 80010bc:	f7ff fbf0 	bl	80008a0 <SD_SendCmd>
 80010c0:	4e5c      	ldr	r6, [pc, #368]	; (8001234 <SD_disk_ioctl+0x238>)
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d055      	beq.n	8001172 <SD_disk_ioctl+0x176>
 80010c6:	f10d 0717 	add.w	r7, sp, #23
			res = RES_PARERR;
 80010ca:	2404      	movs	r4, #4
 80010cc:	e7ca      	b.n	8001064 <SD_disk_ioctl+0x68>
	Timer2 = 500;
 80010ce:	4c5b      	ldr	r4, [pc, #364]	; (800123c <SD_disk_ioctl+0x240>)
 80010d0:	4e58      	ldr	r6, [pc, #352]	; (8001234 <SD_disk_ioctl+0x238>)
 80010d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010d6:	8023      	strh	r3, [r4, #0]
 80010d8:	f10d 0b18 	add.w	fp, sp, #24
 80010dc:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 80010e0:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010e4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010e8:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010ea:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80010ec:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010f0:	6893      	ldr	r3, [r2, #8]
 80010f2:	0798      	lsls	r0, r3, #30
 80010f4:	d5fc      	bpl.n	80010f0 <SD_disk_ioctl+0xf4>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8cd 9000 	str.w	r9, [sp]
 80010fc:	465a      	mov	r2, fp
 80010fe:	4639      	mov	r1, r7
 8001100:	4640      	mov	r0, r8
 8001102:	f005 fa15 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 8001106:	f89d 3018 	ldrb.w	r3, [sp, #24]
	} while ((res != 0xFF) && Timer2);
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d02f      	beq.n	800116e <SD_disk_ioctl+0x172>
 800110e:	8823      	ldrh	r3, [r4, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1e9      	bne.n	80010ea <SD_disk_ioctl+0xee>
	res = RES_ERROR;
 8001116:	2401      	movs	r4, #1
 8001118:	e7a4      	b.n	8001064 <SD_disk_ioctl+0x68>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800111a:	2100      	movs	r1, #0
 800111c:	2049      	movs	r0, #73	; 0x49
 800111e:	f7ff fbbf 	bl	80008a0 <SD_SendCmd>
 8001122:	4604      	mov	r4, r0
 8001124:	2800      	cmp	r0, #0
 8001126:	d044      	beq.n	80011b2 <SD_disk_ioctl+0x1b6>
 8001128:	4e42      	ldr	r6, [pc, #264]	; (8001234 <SD_disk_ioctl+0x238>)
 800112a:	f10d 0717 	add.w	r7, sp, #23
 800112e:	e7f2      	b.n	8001116 <SD_disk_ioctl+0x11a>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001130:	2100      	movs	r1, #0
 8001132:	2049      	movs	r0, #73	; 0x49
 8001134:	f7ff fbb4 	bl	80008a0 <SD_SendCmd>
 8001138:	2800      	cmp	r0, #0
 800113a:	d1f5      	bne.n	8001128 <SD_disk_ioctl+0x12c>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800113c:	4638      	mov	r0, r7
 800113e:	2110      	movs	r1, #16
 8001140:	f7ff fa92 	bl	8000668 <SD_RxDataBlock>
	res = RES_ERROR;
 8001144:	fab0 f480 	clz	r4, r0
 8001148:	4e3a      	ldr	r6, [pc, #232]	; (8001234 <SD_disk_ioctl+0x238>)
 800114a:	0964      	lsrs	r4, r4, #5
 800114c:	f10d 0717 	add.w	r7, sp, #23
 8001150:	e788      	b.n	8001064 <SD_disk_ioctl+0x68>
			*(WORD*) buff = 512;
 8001152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001156:	803b      	strh	r3, [r7, #0]
			break;
 8001158:	4e36      	ldr	r6, [pc, #216]	; (8001234 <SD_disk_ioctl+0x238>)
 800115a:	f10d 0717 	add.w	r7, sp, #23
 800115e:	e781      	b.n	8001064 <SD_disk_ioctl+0x68>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001160:	2100      	movs	r1, #0
 8001162:	204a      	movs	r0, #74	; 0x4a
 8001164:	f7ff fb9c 	bl	80008a0 <SD_SendCmd>
 8001168:	2800      	cmp	r0, #0
 800116a:	d1dd      	bne.n	8001128 <SD_disk_ioctl+0x12c>
 800116c:	e7e6      	b.n	800113c <SD_disk_ioctl+0x140>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800116e:	462c      	mov	r4, r5
 8001170:	e778      	b.n	8001064 <SD_disk_ioctl+0x68>
 8001172:	1e7d      	subs	r5, r7, #1
 8001174:	1cfc      	adds	r4, r7, #3
 8001176:	f10d 0b18 	add.w	fp, sp, #24
 800117a:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 800117e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001182:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001186:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001188:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 800118a:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800118e:	6893      	ldr	r3, [r2, #8]
 8001190:	0799      	lsls	r1, r3, #30
 8001192:	d5fc      	bpl.n	800118e <SD_disk_ioctl+0x192>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001194:	2301      	movs	r3, #1
 8001196:	f8cd 9000 	str.w	r9, [sp]
 800119a:	465a      	mov	r2, fp
 800119c:	4639      	mov	r1, r7
 800119e:	4640      	mov	r0, r8
 80011a0:	f005 f9c6 	bl	8006530 <HAL_SPI_TransmitReceive>
	return data;
 80011a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
					*ptr++ = SPI_RxByte();
 80011a8:	f805 3f01 	strb.w	r3, [r5, #1]!
				for (n = 0; n < 4; n++)
 80011ac:	42ac      	cmp	r4, r5
 80011ae:	d1eb      	bne.n	8001188 <SD_disk_ioctl+0x18c>
 80011b0:	e78b      	b.n	80010ca <SD_disk_ioctl+0xce>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011b2:	2110      	movs	r1, #16
 80011b4:	a806      	add	r0, sp, #24
 80011b6:	f7ff fa57 	bl	8000668 <SD_RxDataBlock>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d0b4      	beq.n	8001128 <SD_disk_ioctl+0x12c>
				if ((csd[0] >> 6) == 1)
 80011be:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d022      	beq.n	800120e <SD_disk_ioctl+0x212>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80011cc:	f89d 1020 	ldrb.w	r1, [sp, #32]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011d0:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80011d4:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 80011d8:	4e16      	ldr	r6, [pc, #88]	; (8001234 <SD_disk_ioctl+0x238>)
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 80011e0:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80011e4:	0289      	lsls	r1, r1, #10
 80011e6:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80011ea:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011ec:	440b      	add	r3, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011ee:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80011f2:	f002 020f 	and.w	r2, r2, #15
 80011f6:	0049      	lsls	r1, r1, #1
 80011f8:	f001 0106 	and.w	r1, r1, #6
 80011fc:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001200:	440a      	add	r2, r1
 8001202:	3a07      	subs	r2, #7
 8001204:	4093      	lsls	r3, r2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	f10d 0717 	add.w	r7, sp, #23
 800120c:	e72a      	b.n	8001064 <SD_disk_ioctl+0x68>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800120e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8001212:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8001216:	4e07      	ldr	r6, [pc, #28]	; (8001234 <SD_disk_ioctl+0x238>)
 8001218:	3301      	adds	r3, #1
 800121a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 800121e:	b29b      	uxth	r3, r3
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	f10d 0717 	add.w	r7, sp, #23
 8001228:	e71c      	b.n	8001064 <SD_disk_ioctl+0x68>
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	40020000 	.word	0x40020000
 8001234:	200023e0 	.word	0x200023e0
 8001238:	20000165 	.word	0x20000165
 800123c:	20016d0b 	.word	0x20016d0b

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	2300      	movs	r3, #0
{
 8001244:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800124a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001252:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4928      	ldr	r1, [pc, #160]	; (80012f8 <SystemClock_Config+0xb8>)
 8001258:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001266:	6408      	str	r0, [r1, #64]	; 0x40
 8001268:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800126a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800126e:	9100      	str	r1, [sp, #0]
 8001270:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800127a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001286:	9301      	str	r3, [sp, #4]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800128a:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2100      	movs	r1, #0
 800128e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001292:	2010      	movs	r0, #16
 8001294:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001298:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800129c:	2004      	movs	r0, #4
 800129e:	2107      	movs	r1, #7
 80012a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a6:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ae:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f004 fc53 	bl	8005b5c <HAL_RCC_OscConfig>
 80012b6:	b108      	cbz	r0, 80012bc <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012ba:	e7fe      	b.n	80012ba <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80012e8 <SystemClock_Config+0xa8>
 80012c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80012c4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80012f0 <SystemClock_Config+0xb0>
 80012c8:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ca:	4621      	mov	r1, r4
 80012cc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d4:	f004 fe5a 	bl	8005f8c <HAL_RCC_ClockConfig>
 80012d8:	b108      	cbz	r0, 80012de <SystemClock_Config+0x9e>
 80012da:	b672      	cpsid	i
	while (1)
 80012dc:	e7fe      	b.n	80012dc <SystemClock_Config+0x9c>
}
 80012de:	b014      	add	sp, #80	; 0x50
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	0000000f 	.word	0x0000000f
 80012ec:	00000002 	.word	0x00000002
 80012f0:	00000000 	.word	0x00000000
 80012f4:	00001000 	.word	0x00001000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <main>:
{
 8001300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	2400      	movs	r4, #0
{
 8001306:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001308:	f003 fc12 	bl	8004b30 <HAL_Init>
  SystemClock_Config();
 800130c:	f7ff ff98 	bl	8001240 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001314:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4bb0      	ldr	r3, [pc, #704]	; (80015dc <main+0x2dc>)
 800131a:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001320:	48af      	ldr	r0, [pc, #700]	; (80015e0 <main+0x2e0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001322:	4db0      	ldr	r5, [pc, #704]	; (80015e4 <main+0x2e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001324:	f041 0104 	orr.w	r1, r1, #4
 8001328:	6319      	str	r1, [r3, #48]	; 0x30
 800132a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132c:	f001 0104 	and.w	r1, r1, #4
 8001330:	9102      	str	r1, [sp, #8]
 8001332:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001334:	9403      	str	r4, [sp, #12]
 8001336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001338:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800133c:	6319      	str	r1, [r3, #48]	; 0x30
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001344:	9103      	str	r1, [sp, #12]
 8001346:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	9404      	str	r4, [sp, #16]
 800134a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134c:	f041 0101 	orr.w	r1, r1, #1
 8001350:	6319      	str	r1, [r3, #48]	; 0x30
 8001352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001354:	f001 0101 	and.w	r1, r1, #1
 8001358:	9104      	str	r1, [sp, #16]
 800135a:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	9405      	str	r4, [sp, #20]
 800135e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001360:	f041 0102 	orr.w	r1, r1, #2
 8001364:	6319      	str	r1, [r3, #48]	; 0x30
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 800136c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001370:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001374:	f003 fe16 	bl	8004fa4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001380:	4899      	ldr	r0, [pc, #612]	; (80015e8 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001384:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = B1_Pin;
 8001386:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 800138a:	2600      	movs	r6, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800138c:	f003 fc86 	bl	8004c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 8001390:	2700      	movs	r7, #0
 8001392:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	4892      	ldr	r0, [pc, #584]	; (80015e0 <main+0x2e0>)
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 8001396:	2230      	movs	r2, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 800139a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800139e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f003 fc7b 	bl	8004c9c <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 80013a6:	4891      	ldr	r0, [pc, #580]	; (80015ec <main+0x2ec>)
  hspi1.Init.CRCPolynomial = 10;
 80013a8:	230a      	movs	r3, #10
 80013aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013b0:	e9c0 5300 	strd	r5, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013b4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80013b8:	2330      	movs	r3, #48	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013be:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c2:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013c6:	e9c0 c306 	strd	ip, r3, [r0, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ca:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013cc:	f004 fefc 	bl	80061c8 <HAL_SPI_Init>
 80013d0:	b108      	cbz	r0, 80013d6 <main+0xd6>
 80013d2:	b672      	cpsid	i
	while (1)
 80013d4:	e7fe      	b.n	80013d4 <main+0xd4>
  huart2.Instance = USART2;
 80013d6:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <main+0x2f0>)
  huart2.Init.BaudRate = 115200;
 80013d8:	4986      	ldr	r1, [pc, #536]	; (80015f4 <main+0x2f4>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 115200;
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80013e8:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ec:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f2:	f005 fc51 	bl	8006c98 <HAL_UART_Init>
 80013f6:	4604      	mov	r4, r0
 80013f8:	b108      	cbz	r0, 80013fe <main+0xfe>
 80013fa:	b672      	cpsid	i
	while (1)
 80013fc:	e7fe      	b.n	80013fc <main+0xfc>
  MX_FATFS_Init();
 80013fe:	f005 fd93 	bl	8006f28 <MX_FATFS_Init>
  htim3.Instance = TIM3;
 8001402:	4d7d      	ldr	r5, [pc, #500]	; (80015f8 <main+0x2f8>)
  htim3.Init.Prescaler = 84-1;
 8001404:	4a7d      	ldr	r2, [pc, #500]	; (80015fc <main+0x2fc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	60ac      	str	r4, [r5, #8]
  htim3.Init.Prescaler = 84-1;
 8001408:	2353      	movs	r3, #83	; 0x53
 800140a:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140e:	4628      	mov	r0, r5
  htim3.Init.Period = 1000-1;
 8001410:	f240 33e7 	movw	r3, #999	; 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001414:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001418:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 1000-1;
 8001424:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001426:	f005 f9cd 	bl	80067c4 <HAL_TIM_Base_Init>
 800142a:	b108      	cbz	r0, 8001430 <main+0x130>
 800142c:	b672      	cpsid	i
	while (1)
 800142e:	e7fe      	b.n	800142e <main+0x12e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001434:	a908      	add	r1, sp, #32
 8001436:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143a:	f005 fa8d 	bl	8006958 <HAL_TIM_ConfigClockSource>
 800143e:	b108      	cbz	r0, 8001444 <main+0x144>
 8001440:	b672      	cpsid	i
	while (1)
 8001442:	e7fe      	b.n	8001442 <main+0x142>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001444:	a906      	add	r1, sp, #24
 8001446:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144c:	f005 fbe8 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4604      	mov	r4, r0
 8001452:	b108      	cbz	r0, 8001458 <main+0x158>
 8001454:	b672      	cpsid	i
	while (1)
 8001456:	e7fe      	b.n	8001456 <main+0x156>
	HAL_Delay (500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	stato_data_logger= WAIT_FOR_START;
 800145c:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8001638 <main+0x338>
 8001460:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800162c <main+0x32c>
 8001464:	4f66      	ldr	r7, [pc, #408]	; (8001600 <main+0x300>)
 8001466:	4e67      	ldr	r6, [pc, #412]	; (8001604 <main+0x304>)
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 8001468:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800163c <main+0x33c>
	HAL_Delay (500);
 800146c:	f003 fb8c 	bl	8004b88 <HAL_Delay>
	HAL_TIM_Base_Init(&htim3);
 8001470:	4628      	mov	r0, r5
	stato_data_logger= WAIT_FOR_START;
 8001472:	f88b 4000 	strb.w	r4, [fp]
	HAL_TIM_Base_Init(&htim3);
 8001476:	f005 f9a5 	bl	80067c4 <HAL_TIM_Base_Init>
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 800147a:	4645      	mov	r5, r8
		switch (stato_data_logger){
 800147c:	f89b 3000 	ldrb.w	r3, [fp]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d8fd      	bhi.n	8001480 <main+0x180>
 8001484:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001488:	005800de 	.word	0x005800de
 800148c:	00040043 	.word	0x00040043
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001490:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8001634 <main+0x334>
		switch (stato_data_logger){
 8001494:	2400      	movs	r4, #0
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro[i].x, misure_accelerometro[i].y, misure_accelerometro[i].z );
 8001496:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800149a:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 800149e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80014a2:	684b      	ldr	r3, [r1, #4]
 80014a4:	6889      	ldr	r1, [r1, #8]
 80014a6:	9100      	str	r1, [sp, #0]
 80014a8:	4628      	mov	r0, r5
 80014aa:	4649      	mov	r1, r9
 80014ac:	f008 f9fe 	bl	80098ac <siprintf>
	while (*buf++ != '\0') i++;
 80014b0:	f898 2000 	ldrb.w	r2, [r8]
 80014b4:	b132      	cbz	r2, 80014c4 <main+0x1c4>
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <main+0x308>)
	int i=0;
 80014b8:	2200      	movs	r2, #0
	while (*buf++ != '\0') i++;
 80014ba:	f813 1b01 	ldrb.w	r1, [r3], #1
 80014be:	3201      	adds	r2, #1
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d1fa      	bne.n	80014ba <main+0x1ba>
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80014c4:	4653      	mov	r3, sl
 80014c6:	4851      	ldr	r0, [pc, #324]	; (800160c <main+0x30c>)
 80014c8:	4629      	mov	r1, r5
 80014ca:	f007 fea7 	bl	800921c <f_write>
			for(int i=0; i<DIM; i++){
 80014ce:	3401      	adds	r4, #1
 80014d0:	f641 3358 	movw	r3, #7000	; 0x1b58
 80014d4:	429c      	cmp	r4, r3
				fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80014d6:	7038      	strb	r0, [r7, #0]
			for(int i=0; i<DIM; i++){
 80014d8:	d1dd      	bne.n	8001496 <main+0x196>
			f_close(&fil);
 80014da:	484c      	ldr	r0, [pc, #304]	; (800160c <main+0x30c>)
 80014dc:	f008 f894 	bl	8009608 <f_close>
			f_sync(&fil);
 80014e0:	484a      	ldr	r0, [pc, #296]	; (800160c <main+0x30c>)
 80014e2:	f008 f82d 	bl	8009540 <f_sync>
			fresult = f_mount(NULL, "/", 1);
 80014e6:	494a      	ldr	r1, [pc, #296]	; (8001610 <main+0x310>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	2000      	movs	r0, #0
 80014ec:	f007 fcd8 	bl	8008ea0 <f_mount>
 80014f0:	7038      	strb	r0, [r7, #0]
			if (fresult == FR_OK)
 80014f2:	2800      	cmp	r0, #0
 80014f4:	f000 80da 	beq.w	80016ac <main+0x3ac>
			if(IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 80014f8:	2102      	movs	r1, #2
 80014fa:	2000      	movs	r0, #0
 80014fc:	f003 fa44 	bl	8004988 <IKS01A3_MOTION_SENSOR_Disable>
 8001500:	2800      	cmp	r0, #0
 8001502:	f000 80d0 	beq.w	80016a6 <main+0x3a6>
			stato_data_logger=WAIT_FOR_START;
 8001506:	2300      	movs	r3, #0
 8001508:	f88b 3000 	strb.w	r3, [fp]
			break;
 800150c:	e7b6      	b.n	800147c <main+0x17c>
			if(contatore_acquisizioni>=DIM){
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <main+0x314>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f641 3357 	movw	r3, #6999	; 0x1b57
 8001516:	429a      	cmp	r2, r3
 8001518:	f300 80ac 	bgt.w	8001674 <main+0x374>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 800151c:	4832      	ldr	r0, [pc, #200]	; (80015e8 <main+0x2e8>)
 800151e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001522:	f003 fd39 	bl	8004f98 <HAL_GPIO_ReadPin>
 8001526:	2800      	cmp	r0, #0
 8001528:	d1a8      	bne.n	800147c <main+0x17c>
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 800152a:	2303      	movs	r3, #3
				HAL_TIM_Base_Stop_IT(&htim3);
 800152c:	4832      	ldr	r0, [pc, #200]	; (80015f8 <main+0x2f8>)
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 800152e:	f88b 3000 	strb.w	r3, [fp]
				HAL_TIM_Base_Stop_IT(&htim3);
 8001532:	f005 f9f9 	bl	8006928 <HAL_TIM_Base_Stop_IT>
 8001536:	e7a1      	b.n	800147c <main+0x17c>
			HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f003 fb25 	bl	8004b88 <HAL_Delay>
			acquisizione++;
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <main+0x318>)
 8001540:	6813      	ldr	r3, [r2, #0]
			if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001542:	2102      	movs	r1, #2
			acquisizione++;
 8001544:	3301      	adds	r3, #1
			if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001546:	2000      	movs	r0, #0
			acquisizione++;
 8001548:	6013      	str	r3, [r2, #0]
			if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 800154a:	f002 ffd7 	bl	80044fc <IKS01A3_MOTION_SENSOR_Init>
 800154e:	4604      	mov	r4, r0
 8001550:	2800      	cmp	r0, #0
 8001552:	f000 8099 	beq.w	8001688 <main+0x388>
			fresult = f_mount(&fs, "/", 1);
 8001556:	492e      	ldr	r1, [pc, #184]	; (8001610 <main+0x310>)
 8001558:	4830      	ldr	r0, [pc, #192]	; (800161c <main+0x31c>)
 800155a:	2201      	movs	r2, #1
 800155c:	f007 fca0 	bl	8008ea0 <f_mount>
 8001560:	7038      	strb	r0, [r7, #0]
			if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001562:	2800      	cmp	r0, #0
 8001564:	d07e      	beq.n	8001664 <main+0x364>
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001566:	492e      	ldr	r1, [pc, #184]	; (8001620 <main+0x320>)
 8001568:	4821      	ldr	r0, [pc, #132]	; (80015f0 <main+0x2f0>)
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	2221      	movs	r2, #33	; 0x21
 8001570:	f005 fc2c 	bl	8006dcc <HAL_UART_Transmit>
			sprintf(nome_file, "acqusizione_%d.txt ",acquisizione);
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <main+0x318>)
 8001576:	492b      	ldr	r1, [pc, #172]	; (8001624 <main+0x324>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	482b      	ldr	r0, [pc, #172]	; (8001628 <main+0x328>)
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 800157c:	4c2b      	ldr	r4, [pc, #172]	; (800162c <main+0x32c>)
			sprintf(nome_file, "acqusizione_%d.txt ",acquisizione);
 800157e:	f008 f995 	bl	80098ac <siprintf>
			fresult = f_open(&fil, nome_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001582:	4929      	ldr	r1, [pc, #164]	; (8001628 <main+0x328>)
 8001584:	4821      	ldr	r0, [pc, #132]	; (800160c <main+0x30c>)
 8001586:	220a      	movs	r2, #10
 8001588:	f007 fccc 	bl	8008f24 <f_open>
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 800158c:	4928      	ldr	r1, [pc, #160]	; (8001630 <main+0x330>)
			fresult = f_open(&fil, nome_file, FA_CREATE_ALWAYS | FA_WRITE);
 800158e:	7038      	strb	r0, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	220b      	movs	r2, #11
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <main+0x2f0>)
 8001598:	f005 fc18 	bl	8006dcc <HAL_UART_Transmit>
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 800159c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8001640 <main+0x340>
 80015a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	while (*buf++ != '\0') i++;
 80015a6:	782a      	ldrb	r2, [r5, #0]
			sprintf((char *)buffer, "X[mg],Y[mg],Z[mg]\r\n");
 80015a8:	f8dc 3000 	ldr.w	r3, [ip]
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	46a8      	mov	r8, r5
	while (*buf++ != '\0') i++;
 80015b0:	b13a      	cbz	r2, 80015c2 <main+0x2c2>
 80015b2:	f1a4 030f 	sub.w	r3, r4, #15
	int i=0;
 80015b6:	2200      	movs	r2, #0
	while (*buf++ != '\0') i++;
 80015b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80015bc:	3201      	adds	r2, #1
 80015be:	2900      	cmp	r1, #0
 80015c0:	d1fa      	bne.n	80015b8 <main+0x2b8>
			fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <main+0x334>)
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <main+0x30c>)
 80015c6:	4629      	mov	r1, r5
 80015c8:	f007 fe28 	bl	800921c <f_write>
 80015cc:	7038      	strb	r0, [r7, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <main+0x2f8>)
 80015d0:	f005 f976 	bl	80068c0 <HAL_TIM_Base_Start_IT>
			stato_data_logger=WAIT_FOR_STOP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f88b 3000 	strb.w	r3, [fp]
			break;
 80015da:	e74f      	b.n	800147c <main+0x17c>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40013000 	.word	0x40013000
 80015e8:	40020800 	.word	0x40020800
 80015ec:	200023e0 	.word	0x200023e0
 80015f0:	20002480 	.word	0x20002480
 80015f4:	40004400 	.word	0x40004400
 80015f8:	20002438 	.word	0x20002438
 80015fc:	40000400 	.word	0x40000400
 8001600:	200013a4 	.word	0x200013a4
 8001604:	200024c4 	.word	0x200024c4
 8001608:	2000016d 	.word	0x2000016d
 800160c:	20000374 	.word	0x20000374
 8001610:	0800a1a0 	.word	0x0800a1a0
 8001614:	20000370 	.word	0x20000370
 8001618:	20000168 	.word	0x20000168
 800161c:	200013a8 	.word	0x200013a8
 8001620:	0800a1a4 	.word	0x0800a1a4
 8001624:	0800a1ec 	.word	0x0800a1ec
 8001628:	20016ce4 	.word	0x20016ce4
 800162c:	2000016c 	.word	0x2000016c
 8001630:	0800a200 	.word	0x0800a200
 8001634:	2000036c 	.word	0x2000036c
 8001638:	20016d08 	.word	0x20016d08
 800163c:	0800a220 	.word	0x0800a220
 8001640:	0800a20c 	.word	0x0800a20c
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET){
 8001644:	481d      	ldr	r0, [pc, #116]	; (80016bc <main+0x3bc>)
 8001646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164a:	f003 fca5 	bl	8004f98 <HAL_GPIO_ReadPin>
 800164e:	2800      	cmp	r0, #0
 8001650:	f47f af14 	bne.w	800147c <main+0x17c>
				acquisizione=0;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <main+0x3c0>)
 8001656:	6018      	str	r0, [r3, #0]
				contatore_acquisizioni=0;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <main+0x3c4>)
 800165a:	6018      	str	r0, [r3, #0]
				stato_data_logger=WAIT_FOR_OPEN_FILE;
 800165c:	2301      	movs	r3, #1
 800165e:	f88b 3000 	strb.w	r3, [fp]
				contatore_acquisizioni=0;
 8001662:	e70b      	b.n	800147c <main+0x17c>
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001664:	4918      	ldr	r1, [pc, #96]	; (80016c8 <main+0x3c8>)
 8001666:	4819      	ldr	r0, [pc, #100]	; (80016cc <main+0x3cc>)
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2221      	movs	r2, #33	; 0x21
 800166e:	f005 fbad 	bl	8006dcc <HAL_UART_Transmit>
}
 8001672:	e77f      	b.n	8001574 <main+0x274>
				HAL_TIM_Base_Stop_IT(&htim3);
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <main+0x3d0>)
 8001676:	f005 f957 	bl	8006928 <HAL_TIM_Base_Stop_IT>
				contatore_acquisizioni=0;
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <main+0x3c4>)
 800167c:	2300      	movs	r3, #0
 800167e:	6013      	str	r3, [r2, #0]
				stato_data_logger=WAIT_FOR_CLOSE_FILE;
 8001680:	2303      	movs	r3, #3
 8001682:	f88b 3000 	strb.w	r3, [fp]
 8001686:	e749      	b.n	800151c <main+0x21c>
				IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 3332);
 8001688:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80016d4 <main+0x3d4>
 800168c:	2102      	movs	r1, #2
 800168e:	f003 f9ff 	bl	8004a90 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
				IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001692:	2102      	movs	r1, #2
 8001694:	4620      	mov	r0, r4
 8001696:	f003 f94b 	bl	8004930 <IKS01A3_MOTION_SENSOR_Enable>
				IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &result);
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <main+0x3d8>)
 800169c:	4620      	mov	r0, r4
 800169e:	2102      	movs	r1, #2
 80016a0:	f003 f9ca 	bl	8004a38 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 80016a4:	e757      	b.n	8001556 <main+0x256>
				IKS01A3_MOTION_SENSOR_DeInit(IKS01A3_LSM6DSO_0);
 80016a6:	f003 f92b 	bl	8004900 <IKS01A3_MOTION_SENSOR_DeInit>
 80016aa:	e72c      	b.n	8001506 <main+0x206>
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80016ac:	490b      	ldr	r1, [pc, #44]	; (80016dc <main+0x3dc>)
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <main+0x3cc>)
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	2222      	movs	r2, #34	; 0x22
 80016b6:	f005 fb89 	bl	8006dcc <HAL_UART_Transmit>
}
 80016ba:	e71d      	b.n	80014f8 <main+0x1f8>
 80016bc:	40020800 	.word	0x40020800
 80016c0:	20000168 	.word	0x20000168
 80016c4:	20000370 	.word	0x20000370
 80016c8:	0800a1c8 	.word	0x0800a1c8
 80016cc:	20002480 	.word	0x20002480
 80016d0:	20002438 	.word	0x20002438
 80016d4:	45504000 	.word	0x45504000
 80016d8:	20016d04 	.word	0x20016d04
 80016dc:	0800a230 	.word	0x0800a230

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_MspInit+0x38>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	9100      	str	r1, [sp, #0]
 80016e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
 80016f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016f6:	9200      	str	r2, [sp, #0]
 80016f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	9101      	str	r1, [sp, #4]
 80016fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800170e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001712:	f003 ba4b 	b.w	8004bac <HAL_NVIC_SetPriorityGrouping>
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800171c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <HAL_SPI_MspInit+0x94>)
 8001720:	6801      	ldr	r1, [r0, #0]
{
 8001722:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8001726:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800172c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001730:	9308      	str	r3, [sp, #32]
  if(hspi->Instance==SPI1)
 8001732:	d001      	beq.n	8001738 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001734:	b00a      	add	sp, #40	; 0x28
 8001736:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001738:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	481c      	ldr	r0, [pc, #112]	; (80017b4 <HAL_SPI_MspInit+0x98>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001742:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001746:	6451      	str	r1, [r2, #68]	; 0x44
 8001748:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800174a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800174e:	9101      	str	r1, [sp, #4]
 8001750:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001756:	f041 0101 	orr.w	r1, r1, #1
 800175a:	6311      	str	r1, [r2, #48]	; 0x30
 800175c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800175e:	f001 0101 	and.w	r1, r1, #1
 8001762:	9102      	str	r1, [sp, #8]
 8001764:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	9303      	str	r3, [sp, #12]
 8001768:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001778:	22c0      	movs	r2, #192	; 0xc0
 800177a:	2302      	movs	r3, #2
 800177c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001780:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001786:	e9cd 3407 	strd	r3, r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f003 fa86 	bl	8004c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001790:	2208      	movs	r2, #8
 8001792:	2302      	movs	r3, #2
 8001794:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179c:	2200      	movs	r2, #0
 800179e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f003 fa79 	bl	8004c9c <HAL_GPIO_Init>
}
 80017aa:	b00a      	add	sp, #40	; 0x28
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	bf00      	nop
 80017b0:	40013000 	.word	0x40013000
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400

080017bc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_TIM_Base_MspInit+0x3c>)
 80017be:	6802      	ldr	r2, [r0, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d000      	beq.n	80017c6 <HAL_TIM_Base_MspInit+0xa>
 80017c4:	4770      	bx	lr
{
 80017c6:	b500      	push	{lr}
 80017c8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	2200      	movs	r2, #0
 80017cc:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80017d0:	9201      	str	r2, [sp, #4]
 80017d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017d4:	f041 0102 	orr.w	r1, r1, #2
 80017d8:	6419      	str	r1, [r3, #64]	; 0x40
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e2:	201d      	movs	r0, #29
 80017e4:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e8:	f003 f9f2 	bl	8004bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ec:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017ee:	b003      	add	sp, #12
 80017f0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017f4:	f003 ba2a 	b.w	8004c4c <HAL_NVIC_EnableIRQ>
 80017f8:	40000400 	.word	0x40000400
 80017fc:	00000000 	.word	0x00000000

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8001802:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <HAL_UART_MspInit+0x70>)
 8001804:	6801      	ldr	r1, [r0, #0]
{
 8001806:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800180a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001810:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001814:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8001816:	d002      	beq.n	800181e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001818:	b009      	add	sp, #36	; 0x24
 800181a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800181e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001826:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800182a:	6410      	str	r0, [r2, #64]	; 0x40
 800182c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800182e:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8001832:	9000      	str	r0, [sp, #0]
 8001834:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001844:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001868 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001850:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001852:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001858:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f003 fa1f 	bl	8004c9c <HAL_GPIO_Init>
}
 800185e:	b009      	add	sp, #36	; 0x24
 8001860:	f85d fb04 	ldr.w	pc, [sp], #4
 8001864:	f3af 8000 	nop.w
 8001868:	0000000c 	.word	0x0000000c
 800186c:	00000002 	.word	0x00000002
 8001870:	40004400 	.word	0x40004400
 8001874:	40020000 	.word	0x40020000

08001878 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler>
 800187a:	bf00      	nop

0800187c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <HardFault_Handler>
 800187e:	bf00      	nop

08001880 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler>
 8001882:	bf00      	nop

08001884 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <BusFault_Handler>
 8001886:	bf00      	nop

08001888 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler>
 800188a:	bf00      	nop

0800188c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <DebugMon_Handler>:
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <PendSV_Handler>:
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <SysTick_Handler+0x3c>)
 800189a:	7813      	ldrb	r3, [r2, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	7013      	strb	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 80018a2:	7813      	ldrb	r3, [r2, #0]
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d801      	bhi.n	80018ac <SysTick_Handler+0x14>
	    FatFsCnt = 0;
	    SDTimer_Handler();
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a8:	f003 b95c 	b.w	8004b64 <HAL_IncTick>
  if(Timer1 > 0)
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <SysTick_Handler+0x40>)
	    FatFsCnt = 0;
 80018ae:	2100      	movs	r1, #0
 80018b0:	7011      	strb	r1, [r2, #0]
  if(Timer1 > 0)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	b11a      	cbz	r2, 80018be <SysTick_Handler+0x26>
    Timer1--;
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	3a01      	subs	r2, #1
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
  if(Timer2 > 0)
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <SysTick_Handler+0x44>)
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d0f0      	beq.n	80018a8 <SysTick_Handler+0x10>
    Timer2--;
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
  HAL_IncTick();
 80018ce:	f003 b949 	b.w	8004b64 <HAL_IncTick>
 80018d2:	bf00      	nop
 80018d4:	20016d09 	.word	0x20016d09
 80018d8:	20016d0a 	.word	0x20016d0a
 80018dc:	20016d0b 	.word	0x20016d0b

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_acquisizioni++]);
 80018e2:	4c09      	ldr	r4, [pc, #36]	; (8001908 <TIM3_IRQHandler+0x28>)
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <TIM3_IRQHandler+0x2c>)
 80018e6:	f005 f8f1 	bl	8006acc <HAL_TIM_IRQHandler>
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_acquisizioni++]);
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	4a08      	ldr	r2, [pc, #32]	; (8001910 <TIM3_IRQHandler+0x30>)
 80018ee:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80018f2:	3301      	adds	r3, #1
 80018f4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	2102      	movs	r1, #2
//  sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z );
//  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

  /* USER CODE END TIM3_IRQn 1 */
}
 80018fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[contatore_acquisizioni++]);
 8001900:	2000      	movs	r0, #0
 8001902:	f003 b86d 	b.w	80049e0 <IKS01A3_MOTION_SENSOR_GetAxes>
 8001906:	bf00      	nop
 8001908:	20000370 	.word	0x20000370
 800190c:	20002438 	.word	0x20002438
 8001910:	200024c4 	.word	0x200024c4

08001914 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void)
{
  int32_t ret = BSP_ERROR_NONE;

  if (I2C1InitCounter > 0)
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <BSP_I2C1_DeInit+0x40>)
{
 8001916:	b508      	push	{r3, lr}
  if (I2C1InitCounter > 0)
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	b113      	cbz	r3, 8001922 <BSP_I2C1_DeInit+0xe>
  {
    if (--I2C1InitCounter == 0)
 800191c:	3b01      	subs	r3, #1
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	b10b      	cbz	r3, 8001926 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8001922:	2000      	movs	r0, #0
        ret = BSP_ERROR_BUS_FAILURE;
      }
    }
  }
  return ret;
}
 8001924:	bd08      	pop	{r3, pc}
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <BSP_I2C1_DeInit+0x44>)

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <BSP_I2C1_DeInit+0x48>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 800192a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800192c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001936:	f003 faa3 	bl	8004e80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800193a:	4808      	ldr	r0, [pc, #32]	; (800195c <BSP_I2C1_DeInit+0x48>)
 800193c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001940:	f003 fa9e 	bl	8004e80 <HAL_GPIO_DeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001944:	4806      	ldr	r0, [pc, #24]	; (8001960 <BSP_I2C1_DeInit+0x4c>)
 8001946:	f003 fe47 	bl	80055d8 <HAL_I2C_DeInit>
 800194a:	2800      	cmp	r0, #0
 800194c:	d0e9      	beq.n	8001922 <BSP_I2C1_DeInit+0xe>
        ret = BSP_ERROR_BUS_FAILURE;
 800194e:	f06f 0007 	mvn.w	r0, #7
}
 8001952:	bd08      	pop	{r3, pc}
 8001954:	20016d0c 	.word	0x20016d0c
 8001958:	40023800 	.word	0x40023800
 800195c:	40020400 	.word	0x40020400
 8001960:	20016d10 	.word	0x20016d10

08001964 <BSP_I2C1_WriteReg>:
{
 8001964:	b500      	push	{lr}
 8001966:	b085      	sub	sp, #20
 8001968:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800196a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800196e:	e9cd 2300 	strd	r2, r3, [sp]
 8001972:	9002      	str	r0, [sp, #8]
 8001974:	460a      	mov	r2, r1
 8001976:	480a      	ldr	r0, [pc, #40]	; (80019a0 <BSP_I2C1_WriteReg+0x3c>)
 8001978:	2301      	movs	r3, #1
 800197a:	4661      	mov	r1, ip
 800197c:	f003 fe46 	bl	800560c <HAL_I2C_Mem_Write>
 8001980:	b910      	cbnz	r0, 8001988 <BSP_I2C1_WriteReg+0x24>
}
 8001982:	b005      	add	sp, #20
 8001984:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <BSP_I2C1_WriteReg+0x3c>)
 800198a:	f004 f8e5 	bl	8005b58 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800198e:	2804      	cmp	r0, #4
 8001990:	bf0c      	ite	eq
 8001992:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8001996:	f06f 0003 	mvnne.w	r0, #3
}
 800199a:	b005      	add	sp, #20
 800199c:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a0:	20016d10 	.word	0x20016d10

080019a4 <BSP_I2C1_ReadReg>:
{
 80019a4:	b500      	push	{lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80019aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019ae:	e9cd 2300 	strd	r2, r3, [sp]
 80019b2:	9002      	str	r0, [sp, #8]
 80019b4:	460a      	mov	r2, r1
 80019b6:	480a      	ldr	r0, [pc, #40]	; (80019e0 <BSP_I2C1_ReadReg+0x3c>)
 80019b8:	2301      	movs	r3, #1
 80019ba:	4661      	mov	r1, ip
 80019bc:	f003 ff1a 	bl	80057f4 <HAL_I2C_Mem_Read>
 80019c0:	b910      	cbnz	r0, 80019c8 <BSP_I2C1_ReadReg+0x24>
}
 80019c2:	b005      	add	sp, #20
 80019c4:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <BSP_I2C1_ReadReg+0x3c>)
 80019ca:	f004 f8c5 	bl	8005b58 <HAL_I2C_GetError>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019ce:	2804      	cmp	r0, #4
 80019d0:	bf0c      	ite	eq
 80019d2:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80019d6:	f06f 0003 	mvnne.w	r0, #3
}
 80019da:	b005      	add	sp, #20
 80019dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80019e0:	20016d10 	.word	0x20016d10

080019e4 <BSP_GetTick>:
  return HAL_GetTick();
 80019e4:	f003 b8ca 	b.w	8004b7c <HAL_GetTick>

080019e8 <MX_I2C1_Init>:
{
 80019e8:	b510      	push	{r4, lr}
  hi2c->Init.ClockSpeed = 400000;
 80019ea:	490a      	ldr	r1, [pc, #40]	; (8001a14 <MX_I2C1_Init+0x2c>)
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <MX_I2C1_Init+0x30>)
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ee:	2200      	movs	r2, #0
  hi2c->Init.ClockSpeed = 400000;
 80019f0:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c->Init.OwnAddress1 = 0;
 80019f8:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019fc:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a04:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001a06:	f003 fd1d 	bl	8005444 <HAL_I2C_Init>
}
 8001a0a:	3800      	subs	r0, #0
 8001a0c:	bf18      	it	ne
 8001a0e:	2001      	movne	r0, #1
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	bf00      	nop
 8001a14:	00061a80 	.word	0x00061a80
 8001a18:	40005400 	.word	0x40005400

08001a1c <BSP_I2C1_Init>:
{
 8001a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(I2C1InitCounter++ == 0)
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <BSP_I2C1_Init+0xa0>)
  hi2c1.Instance  = I2C1;
 8001a22:	4c27      	ldr	r4, [pc, #156]	; (8001ac0 <BSP_I2C1_Init+0xa4>)
  if(I2C1InitCounter++ == 0)
 8001a24:	6813      	ldr	r3, [r2, #0]
  hi2c1.Instance  = I2C1;
 8001a26:	4827      	ldr	r0, [pc, #156]	; (8001ac4 <BSP_I2C1_Init+0xa8>)
 8001a28:	6020      	str	r0, [r4, #0]
  if(I2C1InitCounter++ == 0)
 8001a2a:	1c59      	adds	r1, r3, #1
{
 8001a2c:	b089      	sub	sp, #36	; 0x24
  if(I2C1InitCounter++ == 0)
 8001a2e:	6011      	str	r1, [r2, #0]
 8001a30:	b11b      	cbz	r3, 8001a3a <BSP_I2C1_Init+0x1e>
          ret = BSP_ERROR_NONE;
 8001a32:	2000      	movs	r0, #0
}
 8001a34:	b009      	add	sp, #36	; 0x24
 8001a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f004 f888 	bl	8005b50 <HAL_I2C_GetState>
 8001a40:	4605      	mov	r5, r0
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d1f5      	bne.n	8001a32 <BSP_I2C1_Init+0x16>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4e20      	ldr	r6, [pc, #128]	; (8001ac8 <BSP_I2C1_Init+0xac>)
 8001a48:	9000      	str	r0, [sp, #0]
 8001a4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a4c:	481f      	ldr	r0, [pc, #124]	; (8001acc <BSP_I2C1_Init+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	6333      	str	r3, [r6, #48]	; 0x30
 8001a54:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a60:	2312      	movs	r3, #18
 8001a62:	f04f 0800 	mov.w	r8, #0
 8001a66:	f04f 0903 	mov.w	r9, #3
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001a6a:	2704      	movs	r7, #4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a6c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001a6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a72:	e9cd 8904 	strd	r8, r9, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001a78:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a7a:	f003 f90f 	bl	8004c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001a7e:	2312      	movs	r3, #18
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a80:	4812      	ldr	r0, [pc, #72]	; (8001acc <BSP_I2C1_Init+0xb0>)
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001a82:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a88:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001a8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a8e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a92:	f003 f903 	bl	8004c9c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a96:	9501      	str	r5, [sp, #4]
 8001a98:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9e:	6433      	str	r3, [r6, #64]	; 0x40
 8001aa0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	9301      	str	r3, [sp, #4]
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001aa8:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aaa:	9b01      	ldr	r3, [sp, #4]
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001aac:	f7ff ff9c 	bl	80019e8 <MX_I2C1_Init>
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d0be      	beq.n	8001a32 <BSP_I2C1_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 8001ab4:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001ab8:	e7bc      	b.n	8001a34 <BSP_I2C1_Init+0x18>
 8001aba:	bf00      	nop
 8001abc:	20016d0c 	.word	0x20016d0c
 8001ac0:	20016d10 	.word	0x20016d10
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020400 	.word	0x40020400

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad2:	4c0c      	ldr	r4, [pc, #48]	; (8001b04 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <_sbrk+0x38>)
 8001ad6:	490d      	ldr	r1, [pc, #52]	; (8001b0c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001ad8:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ada:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001adc:	b12a      	cbz	r2, 8001aea <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4410      	add	r0, r2
 8001ae0:	4288      	cmp	r0, r1
 8001ae2:	d807      	bhi.n	8001af4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ae4:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <_sbrk+0x40>)
 8001aec:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4410      	add	r0, r2
 8001af0:	4288      	cmp	r0, r1
 8001af2:	d9f7      	bls.n	8001ae4 <_sbrk+0x14>
    errno = ENOMEM;
 8001af4:	f007 fea8 	bl	8009848 <__errno>
 8001af8:	230c      	movs	r3, #12
    return (void *)-1;
 8001afa:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001afe:	6003      	str	r3, [r0, #0]
}
 8001b00:	4610      	mov	r0, r2
 8001b02:	bd10      	pop	{r4, pc}
 8001b04:	20016d64 	.word	0x20016d64
 8001b08:	20018000 	.word	0x20018000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	200170a8 	.word	0x200170a8

08001b14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <SystemInit+0x10>)
 8001b16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480d      	ldr	r0, [pc, #52]	; (8001b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2e:	490e      	ldr	r1, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b30:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b44:	4c0b      	ldr	r4, [pc, #44]	; (8001b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b52:	f7ff ffdf 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b56:	f007 fe7d 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7ff fbd1 	bl	8001300 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8001b6c:	0800a718 	.word	0x0800a718
  ldr r2, =_sbss
 8001b70:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8001b74:	200170a8 	.word	0x200170a8

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001b7c:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001b7e:	2401      	movs	r4, #1
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 8001b80:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
 8001b82:	2300      	movs	r3, #0
  Capabilities->AccMaxOdr    = 1600.0f;
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <LIS2DW12_GetCapabilities+0x20>)
  Capabilities->Acc          = 1;
 8001b86:	600c      	str	r4, [r1, #0]
  Capabilities->AccMaxFS     = 16;
 8001b88:	2410      	movs	r4, #16
 8001b8a:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return LIS2DW12_OK;
}
 8001b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 8001b92:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001b94:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001b96:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001b98:	618b      	str	r3, [r1, #24]
}
 8001b9a:	4770      	bx	lr
 8001b9c:	44c80000 	.word	0x44c80000

08001ba0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ba0:	b410      	push	{r4}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ba2:	6944      	ldr	r4, [r0, #20]
 8001ba4:	7b00      	ldrb	r0, [r0, #12]
 8001ba6:	46a4      	mov	ip, r4
}
 8001ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001bac:	4760      	bx	ip
 8001bae:	bf00      	nop

08001bb0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001bb0:	b410      	push	{r4}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001bb2:	6904      	ldr	r4, [r0, #16]
 8001bb4:	7b00      	ldrb	r0, [r0, #12]
 8001bb6:	46a4      	mov	ip, r4
}
 8001bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001bbc:	4760      	bx	ip
 8001bbe:	bf00      	nop

08001bc0 <LIS2DW12_Init>:
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001bc2:	f100 0520 	add.w	r5, r0, #32
{
 8001bc6:	4604      	mov	r4, r0
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f000 fedc 	bl	8002988 <lis2dw12_auto_increment_set>
 8001bd0:	b9f8      	cbnz	r0, 8001c12 <LIS2DW12_Init+0x52>
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f000 fe5d 	bl	8002894 <lis2dw12_block_data_update_set>
 8001bda:	4601      	mov	r1, r0
 8001bdc:	b9c8      	cbnz	r0, 8001c12 <LIS2DW12_Init+0x52>
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001bde:	4628      	mov	r0, r5
 8001be0:	f000 feec 	bl	80029bc <lis2dw12_fifo_mode_set>
 8001be4:	b9a8      	cbnz	r0, 8001c12 <LIS2DW12_Init+0x52>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001be6:	2104      	movs	r1, #4
 8001be8:	4628      	mov	r0, r5
 8001bea:	f000 fd2d 	bl	8002648 <lis2dw12_power_mode_set>
 8001bee:	4601      	mov	r1, r0
 8001bf0:	b978      	cbnz	r0, 8001c12 <LIS2DW12_Init+0x52>
  pObj->acc_odr = 100.0f;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <LIS2DW12_Init+0x58>)
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001bf4:	8720      	strh	r0, [r4, #56]	; 0x38
  pObj->acc_odr = 100.0f;
 8001bf6:	6363      	str	r3, [r4, #52]	; 0x34
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f000 fdbf 	bl	800277c <lis2dw12_data_rate_set>
 8001bfe:	4601      	mov	r1, r0
 8001c00:	b938      	cbnz	r0, 8001c12 <LIS2DW12_Init+0x52>
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001c02:	4628      	mov	r0, r5
 8001c04:	f000 fe60 	bl	80028c8 <lis2dw12_full_scale_set>
 8001c08:	b918      	cbnz	r0, 8001c12 <LIS2DW12_Init+0x52>
  pObj->is_initialized = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8001c10:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2DW12_ERROR;
 8001c12:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	42c80000 	.word	0x42c80000

08001c1c <LIS2DW12_ACC_SetFullScale>:
           : (FullScale <= 4) ? LIS2DW12_4g
 8001c1c:	2902      	cmp	r1, #2
{
 8001c1e:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LIS2DW12_4g
 8001c20:	dd06      	ble.n	8001c30 <LIS2DW12_ACC_SetFullScale+0x14>
 8001c22:	2904      	cmp	r1, #4
 8001c24:	dd0d      	ble.n	8001c42 <LIS2DW12_ACC_SetFullScale+0x26>
 8001c26:	2909      	cmp	r1, #9
 8001c28:	bfb4      	ite	lt
 8001c2a:	2102      	movlt	r1, #2
 8001c2c:	2103      	movge	r1, #3
 8001c2e:	e000      	b.n	8001c32 <LIS2DW12_ACC_SetFullScale+0x16>
 8001c30:	2100      	movs	r1, #0
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001c32:	3020      	adds	r0, #32
 8001c34:	f000 fe48 	bl	80028c8 <lis2dw12_full_scale_set>
 8001c38:	3800      	subs	r0, #0
 8001c3a:	bf18      	it	ne
 8001c3c:	2001      	movne	r0, #1
}
 8001c3e:	4240      	negs	r0, r0
 8001c40:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LIS2DW12_4g
 8001c42:	2101      	movs	r1, #1
 8001c44:	e7f5      	b.n	8001c32 <LIS2DW12_ACC_SetFullScale+0x16>
 8001c46:	bf00      	nop

08001c48 <LIS2DW12_ReadID>:
{
 8001c48:	b508      	push	{r3, lr}
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001c4a:	3020      	adds	r0, #32
 8001c4c:	f000 fe92 	bl	8002974 <lis2dw12_device_id_get>
 8001c50:	3800      	subs	r0, #0
 8001c52:	bf18      	it	ne
 8001c54:	2001      	movne	r0, #1
}
 8001c56:	4240      	negs	r0, r0
 8001c58:	bd08      	pop	{r3, pc}
 8001c5a:	bf00      	nop

08001c5c <LIS2DW12_ACC_GetFullScale>:
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	460c      	mov	r4, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8001c62:	3020      	adds	r0, #32
 8001c64:	f10d 0107 	add.w	r1, sp, #7
 8001c68:	f000 fe48 	bl	80028fc <lis2dw12_full_scale_get>
 8001c6c:	b9b8      	cbnz	r0, 8001c9e <LIS2DW12_ACC_GetFullScale+0x42>
  switch (fs_low_level)
 8001c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d816      	bhi.n	8001ca4 <LIS2DW12_ACC_GetFullScale+0x48>
 8001c76:	e8df f003 	tbb	[pc, r3]
 8001c7a:	0a06      	.short	0x0a06
 8001c7c:	020e      	.short	0x020e
      *FullScale = 16;
 8001c7e:	2310      	movs	r3, #16
 8001c80:	6023      	str	r3, [r4, #0]
}
 8001c82:	b002      	add	sp, #8
 8001c84:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	6023      	str	r3, [r4, #0]
}
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	6023      	str	r3, [r4, #0]
}
 8001c92:	b002      	add	sp, #8
 8001c94:	bd10      	pop	{r4, pc}
      *FullScale =  8;
 8001c96:	2308      	movs	r3, #8
 8001c98:	6023      	str	r3, [r4, #0]
}
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8001c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca2:	e7ee      	b.n	8001c82 <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = -1;
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	6020      	str	r0, [r4, #0]
      break;
 8001caa:	e7ea      	b.n	8001c82 <LIS2DW12_ACC_GetFullScale+0x26>

08001cac <LIS2DW12_ACC_GetSensitivity>:
{
 8001cac:	b530      	push	{r4, r5, lr}
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001cae:	f100 0420 	add.w	r4, r0, #32
{
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	460d      	mov	r5, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f10d 0106 	add.w	r1, sp, #6
 8001cbc:	f000 fe1e 	bl	80028fc <lis2dw12_full_scale_get>
 8001cc0:	bb18      	cbnz	r0, 8001d0a <LIS2DW12_ACC_GetSensitivity+0x5e>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001cc2:	f10d 0107 	add.w	r1, sp, #7
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f000 fcf0 	bl	80026ac <lis2dw12_power_mode_get>
 8001ccc:	b9e8      	cbnz	r0, 8001d0a <LIS2DW12_ACC_GetSensitivity+0x5e>
  switch (mode)
 8001cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cd2:	2b1b      	cmp	r3, #27
 8001cd4:	d817      	bhi.n	8001d06 <LIS2DW12_ACC_GetSensitivity+0x5a>
 8001cd6:	e8df f003 	tbb	[pc, r3]
 8001cda:	0e1c      	.short	0x0e1c
 8001cdc:	160e0e0e 	.word	0x160e0e0e
 8001ce0:	0e1c1616 	.word	0x0e1c1616
 8001ce4:	16160e0e 	.word	0x16160e0e
 8001ce8:	0e1c1616 	.word	0x0e1c1616
 8001cec:	160e0e0e 	.word	0x160e0e0e
 8001cf0:	0e1c1616 	.word	0x0e1c1616
 8001cf4:	0e0e      	.short	0x0e0e
      switch (full_scale)
 8001cf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d803      	bhi.n	8001d06 <LIS2DW12_ACC_GetSensitivity+0x5a>
 8001cfe:	e8df f003 	tbb	[pc, r3]
 8001d02:	181b      	.short	0x181b
 8001d04:	1014      	.short	0x1014
          *Sensitivity = -1.0f;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <LIS2DW12_ACC_GetSensitivity+0xa0>)
 8001d08:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001d0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d0e:	b003      	add	sp, #12
 8001d10:	bd30      	pop	{r4, r5, pc}
      switch (full_scale)
 8001d12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d8f5      	bhi.n	8001d06 <LIS2DW12_ACC_GetSensitivity+0x5a>
 8001d1a:	e8df f003 	tbb	[pc, r3]
 8001d1e:	0206      	.short	0x0206
 8001d20:	1013      	.short	0x1013
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <LIS2DW12_ACC_GetSensitivity+0xa4>)
 8001d24:	602b      	str	r3, [r5, #0]
}
 8001d26:	b003      	add	sp, #12
 8001d28:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <LIS2DW12_ACC_GetSensitivity+0xa8>)
 8001d2c:	602b      	str	r3, [r5, #0]
}
 8001d2e:	b003      	add	sp, #12
 8001d30:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <LIS2DW12_ACC_GetSensitivity+0xac>)
 8001d34:	602b      	str	r3, [r5, #0]
          break;
 8001d36:	e7ea      	b.n	8001d0e <LIS2DW12_ACC_GetSensitivity+0x62>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <LIS2DW12_ACC_GetSensitivity+0xb0>)
 8001d3a:	602b      	str	r3, [r5, #0]
          break;
 8001d3c:	e7e7      	b.n	8001d0e <LIS2DW12_ACC_GetSensitivity+0x62>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <LIS2DW12_ACC_GetSensitivity+0xb4>)
 8001d40:	602b      	str	r3, [r5, #0]
          break;
 8001d42:	e7e4      	b.n	8001d0e <LIS2DW12_ACC_GetSensitivity+0x62>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <LIS2DW12_ACC_GetSensitivity+0xb8>)
 8001d46:	602b      	str	r3, [r5, #0]
          break;
 8001d48:	e7e1      	b.n	8001d0e <LIS2DW12_ACC_GetSensitivity+0x62>
 8001d4a:	bf00      	nop
 8001d4c:	bf800000 	.word	0xbf800000
 8001d50:	3ff9db23 	.word	0x3ff9db23
 8001d54:	3f79db23 	.word	0x3f79db23
 8001d58:	3ef9db23 	.word	0x3ef9db23
 8001d5c:	3e79db23 	.word	0x3e79db23
 8001d60:	40f9db23 	.word	0x40f9db23
 8001d64:	4079db23 	.word	0x4079db23

08001d68 <LIS2DW12_ACC_GetOutputDataRate>:
{
 8001d68:	b530      	push	{r4, r5, lr}
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001d6a:	f100 0420 	add.w	r4, r0, #32
{
 8001d6e:	b083      	sub	sp, #12
 8001d70:	460d      	mov	r5, r1
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001d72:	4620      	mov	r0, r4
 8001d74:	f10d 0106 	add.w	r1, sp, #6
 8001d78:	f000 fd2e 	bl	80027d8 <lis2dw12_data_rate_get>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d141      	bne.n	8001e04 <LIS2DW12_ACC_GetOutputDataRate+0x9c>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001d80:	f10d 0107 	add.w	r1, sp, #7
 8001d84:	4620      	mov	r0, r4
 8001d86:	f000 fc91 	bl	80026ac <lis2dw12_power_mode_get>
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d13a      	bne.n	8001e04 <LIS2DW12_ACC_GetOutputDataRate+0x9c>
  switch (odr_low_level)
 8001d8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d92:	2b32      	cmp	r3, #50	; 0x32
 8001d94:	d834      	bhi.n	8001e00 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8001d96:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d9a:	0039      	.short	0x0039
 8001d9c:	004000cd 	.word	0x004000cd
 8001da0:	00440087 	.word	0x00440087
 8001da4:	003c008a 	.word	0x003c008a
 8001da8:	010d008d 	.word	0x010d008d
 8001dac:	00330047 	.word	0x00330047
 8001db0:	00330033 	.word	0x00330033
 8001db4:	00330033 	.word	0x00330033
 8001db8:	00330033 	.word	0x00330033
 8001dbc:	00390033 	.word	0x00390033
 8001dc0:	00330033 	.word	0x00330033
 8001dc4:	00330033 	.word	0x00330033
 8001dc8:	00330033 	.word	0x00330033
 8001dcc:	00330033 	.word	0x00330033
 8001dd0:	00330033 	.word	0x00330033
 8001dd4:	00330033 	.word	0x00330033
 8001dd8:	00330033 	.word	0x00330033
 8001ddc:	00330033 	.word	0x00330033
 8001de0:	00330033 	.word	0x00330033
 8001de4:	00330033 	.word	0x00330033
 8001de8:	00330033 	.word	0x00330033
 8001dec:	00330033 	.word	0x00330033
 8001df0:	00330033 	.word	0x00330033
 8001df4:	00330033 	.word	0x00330033
 8001df8:	00330033 	.word	0x00330033
 8001dfc:	00390033 	.word	0x00390033
          *Odr = -1.0f;
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8001e02:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001e08:	b003      	add	sp, #12
 8001e0a:	bd30      	pop	{r4, r5, pc}
      *Odr = 0.0f;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	602b      	str	r3, [r5, #0]
      break;
 8001e10:	e7fa      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      *Odr = 200.0f;
 8001e12:	4b8f      	ldr	r3, [pc, #572]	; (8002050 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8001e14:	602b      	str	r3, [r5, #0]
}
 8001e16:	b003      	add	sp, #12
 8001e18:	bd30      	pop	{r4, r5, pc}
          *Odr = 12.5f;
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8001e1c:	602b      	str	r3, [r5, #0]
}
 8001e1e:	b003      	add	sp, #12
 8001e20:	bd30      	pop	{r4, r5, pc}
      *Odr = 50.0f;
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8001e24:	602b      	str	r3, [r5, #0]
      break;
 8001e26:	e7ef      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      switch (mode)
 8001e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e2c:	2b1b      	cmp	r3, #27
 8001e2e:	d8e7      	bhi.n	8001e00 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <LIS2DW12_ACC_GetOutputDataRate+0xd0>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e13 	.word	0x08001e13
 8001e3c:	08001e13 	.word	0x08001e13
 8001e40:	08001e13 	.word	0x08001e13
 8001e44:	08001e13 	.word	0x08001e13
 8001e48:	08002041 	.word	0x08002041
 8001e4c:	08001e01 	.word	0x08001e01
 8001e50:	08001e01 	.word	0x08001e01
 8001e54:	08001e01 	.word	0x08001e01
 8001e58:	08001e13 	.word	0x08001e13
 8001e5c:	08001e13 	.word	0x08001e13
 8001e60:	08001e13 	.word	0x08001e13
 8001e64:	08001e13 	.word	0x08001e13
 8001e68:	08001e01 	.word	0x08001e01
 8001e6c:	08001e01 	.word	0x08001e01
 8001e70:	08001e01 	.word	0x08001e01
 8001e74:	08001e01 	.word	0x08001e01
 8001e78:	08001e13 	.word	0x08001e13
 8001e7c:	08001e13 	.word	0x08001e13
 8001e80:	08001e13 	.word	0x08001e13
 8001e84:	08001e13 	.word	0x08001e13
 8001e88:	08002041 	.word	0x08002041
 8001e8c:	08001e01 	.word	0x08001e01
 8001e90:	08001e01 	.word	0x08001e01
 8001e94:	08001e01 	.word	0x08001e01
 8001e98:	08001e13 	.word	0x08001e13
 8001e9c:	08001e13 	.word	0x08001e13
 8001ea0:	08001e13 	.word	0x08001e13
 8001ea4:	08001e13 	.word	0x08001e13
      *Odr = 25.0f;
 8001ea8:	4b6c      	ldr	r3, [pc, #432]	; (800205c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8001eaa:	602b      	str	r3, [r5, #0]
      break;
 8001eac:	e7ac      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      *Odr = 100.0f;
 8001eae:	4b6c      	ldr	r3, [pc, #432]	; (8002060 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8001eb0:	602b      	str	r3, [r5, #0]
      break;
 8001eb2:	e7a9      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      switch (mode)
 8001eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001eb8:	2b1b      	cmp	r3, #27
 8001eba:	d8a1      	bhi.n	8001e00 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <LIS2DW12_ACC_GetOutputDataRate+0x15c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001e13 	.word	0x08001e13
 8001ec8:	08001e13 	.word	0x08001e13
 8001ecc:	08001e13 	.word	0x08001e13
 8001ed0:	08001e13 	.word	0x08001e13
 8001ed4:	0800203b 	.word	0x0800203b
 8001ed8:	08001e01 	.word	0x08001e01
 8001edc:	08001e01 	.word	0x08001e01
 8001ee0:	08001e01 	.word	0x08001e01
 8001ee4:	08001e13 	.word	0x08001e13
 8001ee8:	08001e13 	.word	0x08001e13
 8001eec:	08001e13 	.word	0x08001e13
 8001ef0:	08001e13 	.word	0x08001e13
 8001ef4:	08001e01 	.word	0x08001e01
 8001ef8:	08001e01 	.word	0x08001e01
 8001efc:	08001e01 	.word	0x08001e01
 8001f00:	08001e01 	.word	0x08001e01
 8001f04:	08001e13 	.word	0x08001e13
 8001f08:	08001e13 	.word	0x08001e13
 8001f0c:	08001e13 	.word	0x08001e13
 8001f10:	08001e13 	.word	0x08001e13
 8001f14:	0800203b 	.word	0x0800203b
 8001f18:	08001e01 	.word	0x08001e01
 8001f1c:	08001e01 	.word	0x08001e01
 8001f20:	08001e01 	.word	0x08001e01
 8001f24:	08001e13 	.word	0x08001e13
 8001f28:	08001e13 	.word	0x08001e13
 8001f2c:	08001e13 	.word	0x08001e13
 8001f30:	08001e13 	.word	0x08001e13
      switch (mode)
 8001f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f38:	2b1b      	cmp	r3, #27
 8001f3a:	f63f af61 	bhi.w	8001e00 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <LIS2DW12_ACC_GetOutputDataRate+0x1dc>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08002035 	.word	0x08002035
 8001f48:	08002035 	.word	0x08002035
 8001f4c:	08002035 	.word	0x08002035
 8001f50:	08002035 	.word	0x08002035
 8001f54:	08001e1b 	.word	0x08001e1b
 8001f58:	08001e01 	.word	0x08001e01
 8001f5c:	08001e01 	.word	0x08001e01
 8001f60:	08001e01 	.word	0x08001e01
 8001f64:	08002035 	.word	0x08002035
 8001f68:	08002035 	.word	0x08002035
 8001f6c:	08002035 	.word	0x08002035
 8001f70:	08002035 	.word	0x08002035
 8001f74:	08001e01 	.word	0x08001e01
 8001f78:	08001e01 	.word	0x08001e01
 8001f7c:	08001e01 	.word	0x08001e01
 8001f80:	08001e01 	.word	0x08001e01
 8001f84:	08002035 	.word	0x08002035
 8001f88:	08002035 	.word	0x08002035
 8001f8c:	08002035 	.word	0x08002035
 8001f90:	08002035 	.word	0x08002035
 8001f94:	08001e1b 	.word	0x08001e1b
 8001f98:	08001e01 	.word	0x08001e01
 8001f9c:	08001e01 	.word	0x08001e01
 8001fa0:	08001e01 	.word	0x08001e01
 8001fa4:	08002035 	.word	0x08002035
 8001fa8:	08002035 	.word	0x08002035
 8001fac:	08002035 	.word	0x08002035
 8001fb0:	08002035 	.word	0x08002035
      switch (mode)
 8001fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fb8:	2b1b      	cmp	r3, #27
 8001fba:	f63f af21 	bhi.w	8001e00 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <LIS2DW12_ACC_GetOutputDataRate+0x25c>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001e13 	.word	0x08001e13
 8001fc8:	08001e13 	.word	0x08001e13
 8001fcc:	08001e13 	.word	0x08001e13
 8001fd0:	08001e13 	.word	0x08001e13
 8001fd4:	08002047 	.word	0x08002047
 8001fd8:	08001e01 	.word	0x08001e01
 8001fdc:	08001e01 	.word	0x08001e01
 8001fe0:	08001e01 	.word	0x08001e01
 8001fe4:	08001e13 	.word	0x08001e13
 8001fe8:	08001e13 	.word	0x08001e13
 8001fec:	08001e13 	.word	0x08001e13
 8001ff0:	08001e13 	.word	0x08001e13
 8001ff4:	08001e01 	.word	0x08001e01
 8001ff8:	08001e01 	.word	0x08001e01
 8001ffc:	08001e01 	.word	0x08001e01
 8002000:	08001e01 	.word	0x08001e01
 8002004:	08001e13 	.word	0x08001e13
 8002008:	08001e13 	.word	0x08001e13
 800200c:	08001e13 	.word	0x08001e13
 8002010:	08001e13 	.word	0x08001e13
 8002014:	08002047 	.word	0x08002047
 8002018:	08001e01 	.word	0x08001e01
 800201c:	08001e01 	.word	0x08001e01
 8002020:	08001e01 	.word	0x08001e01
 8002024:	08001e13 	.word	0x08001e13
 8002028:	08001e13 	.word	0x08001e13
 800202c:	08001e13 	.word	0x08001e13
 8002030:	08001e13 	.word	0x08001e13
          *Odr = 1.6f;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <LIS2DW12_ACC_GetOutputDataRate+0x2fc>)
 8002036:	602b      	str	r3, [r5, #0]
          break;
 8002038:	e6e6      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
          *Odr = 400.0f;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <LIS2DW12_ACC_GetOutputDataRate+0x300>)
 800203c:	602b      	str	r3, [r5, #0]
          break;
 800203e:	e6e3      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
          *Odr = 1600.0f;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <LIS2DW12_ACC_GetOutputDataRate+0x304>)
 8002042:	602b      	str	r3, [r5, #0]
          break;
 8002044:	e6e0      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
          *Odr = 800.0f;
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <LIS2DW12_ACC_GetOutputDataRate+0x308>)
 8002048:	602b      	str	r3, [r5, #0]
          break;
 800204a:	e6dd      	b.n	8001e08 <LIS2DW12_ACC_GetOutputDataRate+0xa0>
 800204c:	bf800000 	.word	0xbf800000
 8002050:	43480000 	.word	0x43480000
 8002054:	41480000 	.word	0x41480000
 8002058:	42480000 	.word	0x42480000
 800205c:	41c80000 	.word	0x41c80000
 8002060:	42c80000 	.word	0x42c80000
 8002064:	3fcccccd 	.word	0x3fcccccd
 8002068:	43c80000 	.word	0x43c80000
 800206c:	44c80000 	.word	0x44c80000
 8002070:	44480000 	.word	0x44480000

08002074 <LIS2DW12_ACC_GetAxesRaw>:
{
 8002074:	b530      	push	{r4, r5, lr}
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002076:	f100 0420 	add.w	r4, r0, #32
{
 800207a:	b085      	sub	sp, #20
 800207c:	460d      	mov	r5, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800207e:	4620      	mov	r0, r4
 8002080:	f10d 0107 	add.w	r1, sp, #7
 8002084:	f000 fb12 	bl	80026ac <lis2dw12_power_mode_get>
 8002088:	bb78      	cbnz	r0, 80020ea <LIS2DW12_ACC_GetAxesRaw+0x76>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800208a:	a902      	add	r1, sp, #8
 800208c:	4620      	mov	r0, r4
 800208e:	f000 fc51 	bl	8002934 <lis2dw12_acceleration_raw_get>
 8002092:	bb50      	cbnz	r0, 80020ea <LIS2DW12_ACC_GetAxesRaw+0x76>
  switch (mode)
 8002094:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002098:	2b1b      	cmp	r3, #27
 800209a:	d826      	bhi.n	80020ea <LIS2DW12_ACC_GetAxesRaw+0x76>
 800209c:	e8df f003 	tbb	[pc, r3]
 80020a0:	0e0e0e29 	.word	0x0e0e0e29
 80020a4:	2525250e 	.word	0x2525250e
 80020a8:	0e0e0e29 	.word	0x0e0e0e29
 80020ac:	25252525 	.word	0x25252525
 80020b0:	0e0e0e29 	.word	0x0e0e0e29
 80020b4:	2525250e 	.word	0x2525250e
 80020b8:	0e0e0e29 	.word	0x0e0e0e29
      Value->x = (data_raw.i16bit[0] / 4);
 80020bc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 4);
 80020c0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 4);
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bfb8      	it	lt
 80020c8:	3303      	addlt	r3, #3
 80020ca:	109b      	asrs	r3, r3, #2
 80020cc:	802b      	strh	r3, [r5, #0]
      Value->z = (data_raw.i16bit[2] / 4);
 80020ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 4);
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	bfb8      	it	lt
 80020d6:	3203      	addlt	r2, #3
      Value->z = (data_raw.i16bit[2] / 4);
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bfb8      	it	lt
 80020dc:	3303      	addlt	r3, #3
      Value->y = (data_raw.i16bit[1] / 4);
 80020de:	1092      	asrs	r2, r2, #2
      Value->z = (data_raw.i16bit[2] / 4);
 80020e0:	109b      	asrs	r3, r3, #2
      Value->y = (data_raw.i16bit[1] / 4);
 80020e2:	806a      	strh	r2, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80020e4:	80ab      	strh	r3, [r5, #4]
}
 80020e6:	b005      	add	sp, #20
 80020e8:	bd30      	pop	{r4, r5, pc}
  switch (mode)
 80020ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020ee:	b005      	add	sp, #20
 80020f0:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 80020f2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 16);
 80020f6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 16);
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfb8      	it	lt
 80020fe:	330f      	addlt	r3, #15
 8002100:	111b      	asrs	r3, r3, #4
 8002102:	802b      	strh	r3, [r5, #0]
      Value->z = (data_raw.i16bit[2] / 16);
 8002104:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 16);
 8002108:	2a00      	cmp	r2, #0
 800210a:	bfb8      	it	lt
 800210c:	320f      	addlt	r2, #15
      Value->z = (data_raw.i16bit[2] / 16);
 800210e:	2b00      	cmp	r3, #0
 8002110:	bfb8      	it	lt
 8002112:	330f      	addlt	r3, #15
      Value->y = (data_raw.i16bit[1] / 16);
 8002114:	1112      	asrs	r2, r2, #4
      Value->z = (data_raw.i16bit[2] / 16);
 8002116:	111b      	asrs	r3, r3, #4
      Value->y = (data_raw.i16bit[1] / 16);
 8002118:	806a      	strh	r2, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800211a:	80ab      	strh	r3, [r5, #4]
}
 800211c:	b005      	add	sp, #20
 800211e:	bd30      	pop	{r4, r5, pc}

08002120 <LIS2DW12_DeInit>:
{
 8002120:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 8002122:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8002126:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8002128:	b933      	cbnz	r3, 8002138 <LIS2DW12_DeInit+0x18>
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800212a:	2000      	movs	r0, #0
  pObj->acc_odr = 0.0f;
 800212c:	2300      	movs	r3, #0
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800212e:	8720      	strh	r0, [r4, #56]	; 0x38
  pObj->is_initialized = 0;
 8002130:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  pObj->acc_odr = 0.0f;
 8002134:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002136:	bd10      	pop	{r4, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002138:	2100      	movs	r1, #0
 800213a:	3020      	adds	r0, #32
 800213c:	f000 fb1e 	bl	800277c <lis2dw12_data_rate_set>
 8002140:	b910      	cbnz	r0, 8002148 <LIS2DW12_DeInit+0x28>
  pObj->acc_is_enabled = 0;
 8002142:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  return LIS2DW12_OK;
 8002146:	e7f0      	b.n	800212a <LIS2DW12_DeInit+0xa>
    return LIS2DW12_ERROR;
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
}
 800214c:	bd10      	pop	{r4, pc}
 800214e:	bf00      	nop

08002150 <LIS2DW12_ACC_Disable>:
{
 8002150:	b510      	push	{r4, lr}
 8002152:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8002154:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
 8002158:	b900      	cbnz	r0, 800215c <LIS2DW12_ACC_Disable+0xc>
}
 800215a:	bd10      	pop	{r4, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	f104 0020 	add.w	r0, r4, #32
 8002162:	f000 fb0b 	bl	800277c <lis2dw12_data_rate_set>
 8002166:	b910      	cbnz	r0, 800216e <LIS2DW12_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 8002168:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 800216c:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 800216e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002172:	bd10      	pop	{r4, pc}

08002174 <LIS2DW12_ACC_GetAxes>:
{
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	ed2d 8b04 	vpush	{d8-d9}
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800217a:	f100 0620 	add.w	r6, r0, #32
{
 800217e:	b084      	sub	sp, #16
 8002180:	4605      	mov	r5, r0
  float sensitivity = 0.0f;
 8002182:	2300      	movs	r3, #0
{
 8002184:	460c      	mov	r4, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002186:	4630      	mov	r0, r6
 8002188:	f10d 0103 	add.w	r1, sp, #3
  float sensitivity = 0.0f;
 800218c:	9301      	str	r3, [sp, #4]
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800218e:	f000 fa8d 	bl	80026ac <lis2dw12_power_mode_get>
 8002192:	2800      	cmp	r0, #0
 8002194:	d154      	bne.n	8002240 <LIS2DW12_ACC_GetAxes+0xcc>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002196:	a902      	add	r1, sp, #8
 8002198:	4630      	mov	r0, r6
 800219a:	f000 fbcb 	bl	8002934 <lis2dw12_acceleration_raw_get>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d14e      	bne.n	8002240 <LIS2DW12_ACC_GetAxes+0xcc>
  switch (mode)
 80021a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80021a6:	2b1b      	cmp	r3, #27
 80021a8:	d84a      	bhi.n	8002240 <LIS2DW12_ACC_GetAxes+0xcc>
 80021aa:	e8df f003 	tbb	[pc, r3]
 80021ae:	0e4f      	.short	0x0e4f
 80021b0:	490e0e0e 	.word	0x490e0e0e
 80021b4:	0e4f4949 	.word	0x0e4f4949
 80021b8:	49490e0e 	.word	0x49490e0e
 80021bc:	0e4f4949 	.word	0x0e4f4949
 80021c0:	490e0e0e 	.word	0x490e0e0e
 80021c4:	0e4f4949 	.word	0x0e4f4949
 80021c8:	0e0e      	.short	0x0e0e
      Value->x = (data_raw.i16bit[0] / 4);
 80021ca:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 4);
 80021ce:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 4);
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bfb8      	it	lt
 80021d6:	3303      	addlt	r3, #3
 80021d8:	109b      	asrs	r3, r3, #2
 80021da:	ee09 3a10 	vmov	s18, r3
      Value->z = (data_raw.i16bit[2] / 4);
 80021de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 4);
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	bfb8      	it	lt
 80021e6:	3203      	addlt	r2, #3
      Value->z = (data_raw.i16bit[2] / 4);
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bfb8      	it	lt
 80021ec:	3303      	addlt	r3, #3
      Value->y = (data_raw.i16bit[1] / 4);
 80021ee:	1092      	asrs	r2, r2, #2
      Value->z = (data_raw.i16bit[2] / 4);
 80021f0:	109b      	asrs	r3, r3, #2
      Value->y = (data_raw.i16bit[1] / 4);
 80021f2:	ee08 2a90 	vmov	s17, r2
      Value->z = (data_raw.i16bit[2] / 4);
 80021f6:	ee08 3a10 	vmov	s16, r3
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80021fa:	a901      	add	r1, sp, #4
 80021fc:	4628      	mov	r0, r5
 80021fe:	f7ff fd55 	bl	8001cac <LIS2DW12_ACC_GetSensitivity>
 8002202:	b9e8      	cbnz	r0, 8002240 <LIS2DW12_ACC_GetAxes+0xcc>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002204:	ed9d 6a01 	vldr	s12, [sp, #4]
 8002208:	eef8 6ac9 	vcvt.f32.s32	s13, s18
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800220c:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002210:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002214:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002218:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800221c:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002220:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002224:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800222c:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002230:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002234:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002238:	b004      	add	sp, #16
 800223a:	ecbd 8b04 	vpop	{d8-d9}
 800223e:	bd70      	pop	{r4, r5, r6, pc}
    return LIS2DW12_ERROR;
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002244:	b004      	add	sp, #16
 8002246:	ecbd 8b04 	vpop	{d8-d9}
 800224a:	bd70      	pop	{r4, r5, r6, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 800224c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 16);
 8002250:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 16);
 8002254:	2b00      	cmp	r3, #0
 8002256:	bfb8      	it	lt
 8002258:	330f      	addlt	r3, #15
 800225a:	111b      	asrs	r3, r3, #4
 800225c:	ee09 3a10 	vmov	s18, r3
      Value->z = (data_raw.i16bit[2] / 16);
 8002260:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 16);
 8002264:	2a00      	cmp	r2, #0
 8002266:	bfb8      	it	lt
 8002268:	320f      	addlt	r2, #15
      Value->z = (data_raw.i16bit[2] / 16);
 800226a:	2b00      	cmp	r3, #0
 800226c:	bfb8      	it	lt
 800226e:	330f      	addlt	r3, #15
      Value->y = (data_raw.i16bit[1] / 16);
 8002270:	1112      	asrs	r2, r2, #4
      Value->z = (data_raw.i16bit[2] / 16);
 8002272:	111b      	asrs	r3, r3, #4
      Value->y = (data_raw.i16bit[1] / 16);
 8002274:	ee08 2a90 	vmov	s17, r2
      Value->z = (data_raw.i16bit[2] / 16);
 8002278:	ee08 3a10 	vmov	s16, r3
      break;
 800227c:	e7bd      	b.n	80021fa <LIS2DW12_ACC_GetAxes+0x86>
 800227e:	bf00      	nop

08002280 <LIS2DW12_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002280:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002284:	2b01      	cmp	r3, #1
 8002286:	d012      	beq.n	80022ae <LIS2DW12_ACC_Enable+0x2e>
{
 8002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228c:	ed2d 8b02 	vpush	{d8}
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002290:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8002294:	ed90 8a0d 	vldr	s16, [r0, #52]	; 0x34
 8002298:	f890 7039 	ldrb.w	r7, [r0, #57]	; 0x39
  switch (Mode)
 800229c:	1e6b      	subs	r3, r5, #1
 800229e:	4604      	mov	r4, r0
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	f200 80ad 	bhi.w	8002400 <LIS2DW12_ACC_Enable+0x180>
 80022a6:	e8df f003 	tbb	[pc, r3]
 80022aa:	7d4e      	.short	0x7d4e
 80022ac:	048c      	.short	0x048c
    return LIS2DW12_OK;
 80022ae:	2000      	movs	r0, #0
}
 80022b0:	4770      	bx	lr
      switch (Noise)
 80022b2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002420 <LIS2DW12_ACC_Enable+0x1a0>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80022b6:	2f01      	cmp	r7, #1
 80022b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80022bc:	bf14      	ite	ne
 80022be:	f04f 0800 	movne.w	r8, #0
 80022c2:	f04f 0810 	moveq.w	r8, #16
      if (Odr > 200.0f)
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	bf88      	it	hi
 80022cc:	eeb0 8a67 	vmovhi.f32	s16, s15
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80022d0:	eddf 7a54 	vldr	s15, [pc, #336]	; 8002424 <LIS2DW12_ACC_Enable+0x1a4>
 80022d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd49      	ble.n	8002372 <LIS2DW12_ACC_Enable+0xf2>
 80022de:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80022e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	dd7a      	ble.n	80023e2 <LIS2DW12_ACC_Enable+0x162>
 80022ec:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80022f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80022f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f8:	dd75      	ble.n	80023e6 <LIS2DW12_ACC_Enable+0x166>
 80022fa:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8002428 <LIS2DW12_ACC_Enable+0x1a8>
 80022fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	dd70      	ble.n	80023ea <LIS2DW12_ACC_Enable+0x16a>
 8002308:	eddf 7a48 	vldr	s15, [pc, #288]	; 800242c <LIS2DW12_ACC_Enable+0x1ac>
 800230c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002314:	dd6b      	ble.n	80023ee <LIS2DW12_ACC_Enable+0x16e>
 8002316:	eddf 7a42 	vldr	s15, [pc, #264]	; 8002420 <LIS2DW12_ACC_Enable+0x1a0>
 800231a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	dd69      	ble.n	80023f8 <LIS2DW12_ACC_Enable+0x178>
 8002324:	eddf 7a42 	vldr	s15, [pc, #264]	; 8002430 <LIS2DW12_ACC_Enable+0x1b0>
 8002328:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	dd64      	ble.n	80023fc <LIS2DW12_ACC_Enable+0x17c>
 8002332:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002434 <LIS2DW12_ACC_Enable+0x1b4>
 8002336:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	bf94      	ite	ls
 8002340:	2108      	movls	r1, #8
 8002342:	2109      	movhi	r1, #9
 8002344:	e016      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
      switch (Noise)
 8002346:	eddf 7a36 	vldr	s15, [pc, #216]	; 8002420 <LIS2DW12_ACC_Enable+0x1a0>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800234a:	2f01      	cmp	r7, #1
 800234c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002350:	bf14      	ite	ne
 8002352:	f04f 0803 	movne.w	r8, #3
 8002356:	f04f 0813 	moveq.w	r8, #19
      if (Odr > 200.0f)
 800235a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235e:	bf88      	it	hi
 8002360:	eeb0 8a67 	vmovhi.f32	s16, s15
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002364:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8002424 <LIS2DW12_ACC_Enable+0x1a4>
 8002368:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dcb5      	bgt.n	80022de <LIS2DW12_ACC_Enable+0x5e>
 8002372:	2101      	movs	r1, #1
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002374:	f104 0620 	add.w	r6, r4, #32
 8002378:	4630      	mov	r0, r6
 800237a:	f000 f9ff 	bl	800277c <lis2dw12_data_rate_set>
 800237e:	bbc0      	cbnz	r0, 80023f2 <LIS2DW12_ACC_Enable+0x172>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002380:	4641      	mov	r1, r8
 8002382:	4630      	mov	r0, r6
 8002384:	f000 f960 	bl	8002648 <lis2dw12_power_mode_set>
 8002388:	bb98      	cbnz	r0, 80023f2 <LIS2DW12_ACC_Enable+0x172>
  pObj->acc_is_enabled = 1;
 800238a:	2301      	movs	r3, #1
  pObj->acc_odr = Odr;
 800238c:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002390:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002394:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
  pObj->acc_is_enabled = 1;
 8002398:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800239c:	ecbd 8b02 	vpop	{d8}
 80023a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (Noise)
 80023a4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002420 <LIS2DW12_ACC_Enable+0x1a0>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80023a8:	2f01      	cmp	r7, #1
 80023aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80023ae:	bf14      	ite	ne
 80023b0:	46a8      	movne	r8, r5
 80023b2:	f04f 0812 	moveq.w	r8, #18
      if (Odr > 200.0f)
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	bf88      	it	hi
 80023bc:	eeb0 8a67 	vmovhi.f32	s16, s15
 80023c0:	e786      	b.n	80022d0 <LIS2DW12_ACC_Enable+0x50>
      switch (Noise)
 80023c2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002420 <LIS2DW12_ACC_Enable+0x1a0>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80023c6:	2f01      	cmp	r7, #1
 80023c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80023cc:	bf14      	ite	ne
 80023ce:	f04f 0801 	movne.w	r8, #1
 80023d2:	f04f 0811 	moveq.w	r8, #17
      if (Odr > 200.0f)
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	bf88      	it	hi
 80023dc:	eeb0 8a67 	vmovhi.f32	s16, s15
 80023e0:	e776      	b.n	80022d0 <LIS2DW12_ACC_Enable+0x50>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80023e2:	2102      	movs	r1, #2
 80023e4:	e7c6      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
 80023e6:	2103      	movs	r1, #3
 80023e8:	e7c4      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
 80023ea:	2104      	movs	r1, #4
 80023ec:	e7c2      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
 80023ee:	2105      	movs	r1, #5
 80023f0:	e7c0      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
    return LIS2DW12_ERROR;
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	e7d1      	b.n	800239c <LIS2DW12_ACC_Enable+0x11c>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80023f8:	2106      	movs	r1, #6
 80023fa:	e7bb      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
 80023fc:	2107      	movs	r1, #7
 80023fe:	e7b9      	b.n	8002374 <LIS2DW12_ACC_Enable+0xf4>
      switch (Noise)
 8002400:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002404:	2f01      	cmp	r7, #1
 8002406:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800240a:	bf14      	ite	ne
 800240c:	f04f 0804 	movne.w	r8, #4
 8002410:	f04f 0814 	moveq.w	r8, #20
      if (Odr < 12.5f)
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	bfb8      	it	lt
 800241a:	eeb0 8a67 	vmovlt.f32	s16, s15
 800241e:	e757      	b.n	80022d0 <LIS2DW12_ACC_Enable+0x50>
 8002420:	43480000 	.word	0x43480000
 8002424:	3fcccccd 	.word	0x3fcccccd
 8002428:	42480000 	.word	0x42480000
 800242c:	42c80000 	.word	0x42c80000
 8002430:	43c80000 	.word	0x43c80000
 8002434:	44480000 	.word	0x44480000

08002438 <LIS2DW12_ACC_SetOutputDataRate>:
{
 8002438:	b538      	push	{r3, r4, r5, lr}
 800243a:	ed2d 8b02 	vpush	{d8}
  if (pObj->acc_is_enabled == 1U)
 800243e:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8002442:	2901      	cmp	r1, #1
{
 8002444:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 8002446:	d044      	beq.n	80024d2 <LIS2DW12_ACC_SetOutputDataRate+0x9a>
                  : (Odr <=   12.5f) ?   12.5f
 8002448:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002598 <LIS2DW12_ACC_SetOutputDataRate+0x160>
 800244c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  pObj->acc_operating_mode = Mode;
 8002450:	2300      	movs	r3, #0
                  : (Odr <=   12.5f) ?   12.5f
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  pObj->acc_operating_mode = Mode;
 8002456:	8703      	strh	r3, [r0, #56]	; 0x38
                  : (Odr <=   12.5f) ?   12.5f
 8002458:	dc05      	bgt.n	8002466 <LIS2DW12_ACC_SetOutputDataRate+0x2e>
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800245a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800245e:	2000      	movs	r0, #0
}
 8002460:	ecbd 8b02 	vpop	{d8}
 8002464:	bd38      	pop	{r3, r4, r5, pc}
                  : (Odr <=   25.0f) ?   25.0f
 8002466:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800246a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	ddf2      	ble.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
                  : (Odr <=   50.0f) ?   50.0f
 8002474:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002478:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	ddeb      	ble.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
                  : (Odr <=  100.0f) ?  100.0f
 8002482:	eddf 7a46 	vldr	s15, [pc, #280]	; 800259c <LIS2DW12_ACC_SetOutputDataRate+0x164>
 8002486:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	dde4      	ble.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
                  : (Odr <=  200.0f) ?  200.0f
 8002490:	eddf 7a43 	vldr	s15, [pc, #268]	; 80025a0 <LIS2DW12_ACC_SetOutputDataRate+0x168>
 8002494:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	dddd      	ble.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
                  : (Odr <=  400.0f) ?  400.0f
 800249e:	eddf 7a41 	vldr	s15, [pc, #260]	; 80025a4 <LIS2DW12_ACC_SetOutputDataRate+0x16c>
 80024a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	ddd6      	ble.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
                  : (Odr <=  800.0f) ?  800.0f
 80024ac:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80025a8 <LIS2DW12_ACC_SetOutputDataRate+0x170>
 80024b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	ddcf      	ble.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
                  :                    1600.0f;
 80024ba:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80025ac <LIS2DW12_ACC_SetOutputDataRate+0x174>
 80024be:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80025b0 <LIS2DW12_ACC_SetOutputDataRate+0x178>
 80024c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	bf88      	it	hi
 80024cc:	eef0 7a47 	vmovhi.f32	s15, s14
 80024d0:	e7c3      	b.n	800245a <LIS2DW12_ACC_SetOutputDataRate+0x22>
      if (Odr < 12.5f)
 80024d2:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80024d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80024de:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002598 <LIS2DW12_ACC_SetOutputDataRate+0x160>
 80024e2:	bfb4      	ite	lt
 80024e4:	eeb0 8a67 	vmovlt.f32	s16, s15
 80024e8:	eeb0 8a40 	vmovge.f32	s16, s0
 80024ec:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	dd30      	ble.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
 80024f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	dd3c      	ble.n	800257a <LIS2DW12_ACC_SetOutputDataRate+0x142>
 8002500:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002504:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	dd37      	ble.n	800257e <LIS2DW12_ACC_SetOutputDataRate+0x146>
 800250e:	eddf 7a23 	vldr	s15, [pc, #140]	; 800259c <LIS2DW12_ACC_SetOutputDataRate+0x164>
 8002512:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	dd35      	ble.n	8002588 <LIS2DW12_ACC_SetOutputDataRate+0x150>
 800251c:	eddf 7a20 	vldr	s15, [pc, #128]	; 80025a0 <LIS2DW12_ACC_SetOutputDataRate+0x168>
 8002520:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd30      	ble.n	800258c <LIS2DW12_ACC_SetOutputDataRate+0x154>
 800252a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80025a4 <LIS2DW12_ACC_SetOutputDataRate+0x16c>
 800252e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	dd2b      	ble.n	8002590 <LIS2DW12_ACC_SetOutputDataRate+0x158>
 8002538:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80025a8 <LIS2DW12_ACC_SetOutputDataRate+0x170>
 800253c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	dd26      	ble.n	8002594 <LIS2DW12_ACC_SetOutputDataRate+0x15c>
 8002546:	eddf 7a19 	vldr	s15, [pc, #100]	; 80025ac <LIS2DW12_ACC_SetOutputDataRate+0x174>
 800254a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	bf94      	ite	ls
 8002554:	2108      	movls	r1, #8
 8002556:	2109      	movhi	r1, #9
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002558:	f104 0520 	add.w	r5, r4, #32
 800255c:	4628      	mov	r0, r5
 800255e:	f000 f90d 	bl	800277c <lis2dw12_data_rate_set>
 8002562:	b970      	cbnz	r0, 8002582 <LIS2DW12_ACC_SetOutputDataRate+0x14a>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002564:	2104      	movs	r1, #4
 8002566:	4628      	mov	r0, r5
 8002568:	f000 f86e 	bl	8002648 <lis2dw12_power_mode_set>
 800256c:	b948      	cbnz	r0, 8002582 <LIS2DW12_ACC_SetOutputDataRate+0x14a>
  pObj->acc_operating_mode = Mode;
 800256e:	8720      	strh	r0, [r4, #56]	; 0x38
  pObj->acc_odr = Odr;
 8002570:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
}
 8002574:	ecbd 8b02 	vpop	{d8}
 8002578:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800257a:	2102      	movs	r1, #2
 800257c:	e7ec      	b.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
 800257e:	2103      	movs	r1, #3
 8002580:	e7ea      	b.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
    return LIS2DW12_ERROR;
 8002582:	f04f 30ff 	mov.w	r0, #4294967295
 8002586:	e76b      	b.n	8002460 <LIS2DW12_ACC_SetOutputDataRate+0x28>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002588:	2104      	movs	r1, #4
 800258a:	e7e5      	b.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
 800258c:	2105      	movs	r1, #5
 800258e:	e7e3      	b.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
 8002590:	2106      	movs	r1, #6
 8002592:	e7e1      	b.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
 8002594:	2107      	movs	r1, #7
 8002596:	e7df      	b.n	8002558 <LIS2DW12_ACC_SetOutputDataRate+0x120>
 8002598:	3fcccccd 	.word	0x3fcccccd
 800259c:	42480000 	.word	0x42480000
 80025a0:	42c80000 	.word	0x42c80000
 80025a4:	43480000 	.word	0x43480000
 80025a8:	43c80000 	.word	0x43c80000
 80025ac:	44480000 	.word	0x44480000
 80025b0:	44c80000 	.word	0x44c80000

080025b4 <LIS2DW12_RegisterBusIO>:
  if (pObj == NULL)
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d038      	beq.n	800262a <LIS2DW12_RegisterBusIO+0x76>
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 80025bc:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80025c0:	688a      	ldr	r2, [r1, #8]
 80025c2:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80025c4:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 80025c8:	7b0a      	ldrb	r2, [r1, #12]
 80025ca:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80025cc:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 80025d0:	e9c4 0204 	strd	r0, r2, [r4, #16]
    pObj->Ctx.mdelay    = pIO->Delay;
 80025d4:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80025d8:	4915      	ldr	r1, [pc, #84]	; (8002630 <LIS2DW12_RegisterBusIO+0x7c>)
 80025da:	6261      	str	r1, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80025dc:	4915      	ldr	r1, [pc, #84]	; (8002634 <LIS2DW12_RegisterBusIO+0x80>)
    pObj->IO.GetTick   = pIO->GetTick;
 80025de:	61a0      	str	r0, [r4, #24]
    pObj->Ctx.handle   = pObj;
 80025e0:	e9c4 240a 	strd	r2, r4, [r4, #40]	; 0x28
{
 80025e4:	b082      	sub	sp, #8
    pObj->Ctx.write_reg = WriteRegWrap;
 80025e6:	6221      	str	r1, [r4, #32]
    if (pObj->IO.Init == NULL)
 80025e8:	b1e3      	cbz	r3, 8002624 <LIS2DW12_RegisterBusIO+0x70>
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80025ea:	4798      	blx	r3
 80025ec:	b9d0      	cbnz	r0, 8002624 <LIS2DW12_RegisterBusIO+0x70>
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80025ee:	68a3      	ldr	r3, [r4, #8]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d001      	beq.n	80025f8 <LIS2DW12_RegisterBusIO+0x44>
}
 80025f4:	b002      	add	sp, #8
 80025f6:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80025f8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <LIS2DW12_RegisterBusIO+0x40>
          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002600:	f04f 0c05 	mov.w	ip, #5
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002604:	2301      	movs	r3, #1
 8002606:	f10d 0207 	add.w	r2, sp, #7
 800260a:	2121      	movs	r1, #33	; 0x21
 800260c:	f104 0020 	add.w	r0, r4, #32
 8002610:	f88d c007 	strb.w	ip, [sp, #7]
 8002614:	f000 f810 	bl	8002638 <lis2dw12_write_reg>
            ret = LIS2DW12_ERROR;
 8002618:	2800      	cmp	r0, #0
 800261a:	bf18      	it	ne
 800261c:	f04f 30ff 	movne.w	r0, #4294967295
}
 8002620:	b002      	add	sp, #8
 8002622:	bd10      	pop	{r4, pc}
    ret = LIS2DW12_ERROR;
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	e7e4      	b.n	80025f4 <LIS2DW12_RegisterBusIO+0x40>
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800262e:	4770      	bx	lr
 8002630:	08001ba1 	.word	0x08001ba1
 8002634:	08001bb1 	.word	0x08001bb1

08002638 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002638:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800263a:	6804      	ldr	r4, [r0, #0]
 800263c:	68c0      	ldr	r0, [r0, #12]
 800263e:	46a4      	mov	ip, r4

  return ret;
}
 8002640:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002644:	4760      	bx	ip
 8002646:	bf00      	nop

08002648 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	b082      	sub	sp, #8
 800264e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002650:	68c0      	ldr	r0, [r0, #12]
 8002652:	6866      	ldr	r6, [r4, #4]
 8002654:	2301      	movs	r3, #1
 8002656:	466a      	mov	r2, sp
 8002658:	2120      	movs	r1, #32
 800265a:	47b0      	blx	r6
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0)
 800265c:	bb18      	cbnz	r0, 80026a6 <lis2dw12_power_mode_set+0x5e>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800265e:	f89d 2000 	ldrb.w	r2, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002662:	68e0      	ldr	r0, [r4, #12]
 8002664:	6826      	ldr	r6, [r4, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002666:	f022 020f 	bic.w	r2, r2, #15
 800266a:	f005 030f 	and.w	r3, r5, #15
 800266e:	4313      	orrs	r3, r2
 8002670:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002674:	466a      	mov	r2, sp
 8002676:	2301      	movs	r3, #1
 8002678:	2120      	movs	r1, #32
 800267a:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0)
 800267c:	b998      	cbnz	r0, 80026a6 <lis2dw12_power_mode_set+0x5e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800267e:	68e0      	ldr	r0, [r4, #12]
 8002680:	6866      	ldr	r6, [r4, #4]
 8002682:	2301      	movs	r3, #1
 8002684:	aa01      	add	r2, sp, #4
 8002686:	2125      	movs	r1, #37	; 0x25
 8002688:	47b0      	blx	r6
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  if (ret == 0)
 800268a:	b960      	cbnz	r0, 80026a6 <lis2dw12_power_mode_set+0x5e>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800268c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002690:	68e0      	ldr	r0, [r4, #12]
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002692:	092d      	lsrs	r5, r5, #4
 8002694:	f365 0382 	bfi	r3, r5, #2, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002698:	aa01      	add	r2, sp, #4
 800269a:	6825      	ldr	r5, [r4, #0]
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800269c:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80026a0:	2125      	movs	r1, #37	; 0x25
 80026a2:	2301      	movs	r3, #1
 80026a4:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  return ret;
}
 80026a6:	b002      	add	sp, #8
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
 80026aa:	bf00      	nop

080026ac <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4604      	mov	r4, r0
 80026b0:	b082      	sub	sp, #8
 80026b2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80026b4:	68c0      	ldr	r0, [r0, #12]
 80026b6:	6866      	ldr	r6, [r4, #4]
 80026b8:	2301      	movs	r3, #1
 80026ba:	466a      	mov	r2, sp
 80026bc:	2120      	movs	r1, #32
 80026be:	47b0      	blx	r6
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0)
 80026c0:	bb30      	cbnz	r0, 8002710 <lis2dw12_power_mode_get+0x64>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80026c2:	2301      	movs	r3, #1
 80026c4:	aa01      	add	r2, sp, #4
 80026c6:	2125      	movs	r1, #37	; 0x25
 80026c8:	6866      	ldr	r6, [r4, #4]
 80026ca:	68e0      	ldr	r0, [r4, #12]
 80026cc:	47b0      	blx	r6
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80026ce:	f89d 2000 	ldrb.w	r2, [sp]
 80026d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80026d6:	f002 030c 	and.w	r3, r2, #12
 80026da:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80026de:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode))
 80026e2:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80026e6:	4413      	add	r3, r2
 80026e8:	2b1b      	cmp	r3, #27
 80026ea:	d80f      	bhi.n	800270c <lis2dw12_power_mode_get+0x60>
 80026ec:	e8df f003 	tbb	[pc, r3]
 80026f0:	3c3f4212 	.word	0x3c3f4212
 80026f4:	0e0e0e0e 	.word	0x0e0e0e0e
 80026f8:	2d303336 	.word	0x2d303336
 80026fc:	0e0e0e0e 	.word	0x0e0e0e0e
 8002700:	2124272a 	.word	0x2124272a
 8002704:	0e0e0e1e 	.word	0x0e0e0e1e
 8002708:	3915181b 	.word	0x3915181b
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
        break;

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800270c:	2304      	movs	r3, #4
 800270e:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 8002710:	b002      	add	sp, #8
 8002712:	bd70      	pop	{r4, r5, r6, pc}
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002714:	2300      	movs	r3, #0
 8002716:	702b      	strb	r3, [r5, #0]
        break;
 8002718:	e7fa      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800271a:	231a      	movs	r3, #26
 800271c:	702b      	strb	r3, [r5, #0]
        break;
 800271e:	e7f7      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002720:	2319      	movs	r3, #25
 8002722:	702b      	strb	r3, [r5, #0]
        break;
 8002724:	e7f4      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002726:	2318      	movs	r3, #24
 8002728:	702b      	strb	r3, [r5, #0]
        break;
 800272a:	e7f1      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800272c:	2314      	movs	r3, #20
 800272e:	702b      	strb	r3, [r5, #0]
        break;
 8002730:	e7ee      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002732:	2313      	movs	r3, #19
 8002734:	702b      	strb	r3, [r5, #0]
        break;
 8002736:	e7eb      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002738:	2312      	movs	r3, #18
 800273a:	702b      	strb	r3, [r5, #0]
        break;
 800273c:	e7e8      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800273e:	2311      	movs	r3, #17
 8002740:	702b      	strb	r3, [r5, #0]
        break;
 8002742:	e7e5      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002744:	2310      	movs	r3, #16
 8002746:	702b      	strb	r3, [r5, #0]
        break;
 8002748:	e7e2      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 800274a:	230b      	movs	r3, #11
 800274c:	702b      	strb	r3, [r5, #0]
        break;
 800274e:	e7df      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002750:	230a      	movs	r3, #10
 8002752:	702b      	strb	r3, [r5, #0]
        break;
 8002754:	e7dc      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002756:	2309      	movs	r3, #9
 8002758:	702b      	strb	r3, [r5, #0]
        break;
 800275a:	e7d9      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800275c:	2308      	movs	r3, #8
 800275e:	702b      	strb	r3, [r5, #0]
        break;
 8002760:	e7d6      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002762:	231b      	movs	r3, #27
 8002764:	702b      	strb	r3, [r5, #0]
        break;
 8002766:	e7d3      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002768:	2303      	movs	r3, #3
 800276a:	702b      	strb	r3, [r5, #0]
        break;
 800276c:	e7d0      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800276e:	2302      	movs	r3, #2
 8002770:	702b      	strb	r3, [r5, #0]
        break;
 8002772:	e7cd      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002774:	2301      	movs	r3, #1
 8002776:	702b      	strb	r3, [r5, #0]
        break;
 8002778:	e7ca      	b.n	8002710 <lis2dw12_power_mode_get+0x64>
 800277a:	bf00      	nop

0800277c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4604      	mov	r4, r0
 8002780:	b082      	sub	sp, #8
 8002782:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002784:	68c0      	ldr	r0, [r0, #12]
 8002786:	6866      	ldr	r6, [r4, #4]
 8002788:	2301      	movs	r3, #1
 800278a:	466a      	mov	r2, sp
 800278c:	2120      	movs	r1, #32
 800278e:	47b0      	blx	r6
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0)
 8002790:	bb00      	cbnz	r0, 80027d4 <lis2dw12_data_rate_set+0x58>
  {
    ctrl1.odr = (uint8_t) val;
 8002792:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002796:	6826      	ldr	r6, [r4, #0]
 8002798:	68e0      	ldr	r0, [r4, #12]
    ctrl1.odr = (uint8_t) val;
 800279a:	f365 1307 	bfi	r3, r5, #4, #4
 800279e:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027a2:	466a      	mov	r2, sp
 80027a4:	2301      	movs	r3, #1
 80027a6:	2120      	movs	r1, #32
 80027a8:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0)
 80027aa:	b998      	cbnz	r0, 80027d4 <lis2dw12_data_rate_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027ac:	68e0      	ldr	r0, [r4, #12]
 80027ae:	6866      	ldr	r6, [r4, #4]
 80027b0:	2301      	movs	r3, #1
 80027b2:	aa01      	add	r2, sp, #4
 80027b4:	2122      	movs	r1, #34	; 0x22
 80027b6:	47b0      	blx	r6
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  if (ret == 0)
 80027b8:	b960      	cbnz	r0, 80027d4 <lis2dw12_data_rate_set+0x58>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80027ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027be:	68e0      	ldr	r0, [r4, #12]
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80027c0:	092d      	lsrs	r5, r5, #4
 80027c2:	f365 0301 	bfi	r3, r5, #0, #2
 80027c6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027ca:	6825      	ldr	r5, [r4, #0]
 80027cc:	2301      	movs	r3, #1
 80027ce:	aa01      	add	r2, sp, #4
 80027d0:	2122      	movs	r1, #34	; 0x22
 80027d2:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  return ret;
}
 80027d4:	b002      	add	sp, #8
 80027d6:	bd70      	pop	{r4, r5, r6, pc}

080027d8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4604      	mov	r4, r0
 80027dc:	b082      	sub	sp, #8
 80027de:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027e0:	68c0      	ldr	r0, [r0, #12]
 80027e2:	6866      	ldr	r6, [r4, #4]
 80027e4:	2301      	movs	r3, #1
 80027e6:	466a      	mov	r2, sp
 80027e8:	2120      	movs	r1, #32
 80027ea:	47b0      	blx	r6
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0)
 80027ec:	bb70      	cbnz	r0, 800284c <lis2dw12_data_rate_get+0x74>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027ee:	2301      	movs	r3, #1
 80027f0:	aa01      	add	r2, sp, #4
 80027f2:	6866      	ldr	r6, [r4, #4]
 80027f4:	68e0      	ldr	r0, [r4, #12]
 80027f6:	2122      	movs	r1, #34	; 0x22
 80027f8:	47b0      	blx	r6
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80027fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80027fe:	f89d 3000 	ldrb.w	r3, [sp]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800280c:	2b32      	cmp	r3, #50	; 0x32
 800280e:	d81b      	bhi.n	8002848 <lis2dw12_data_rate_get+0x70>
 8002810:	e8df f003 	tbb	[pc, r3]
 8002814:	36393c1a 	.word	0x36393c1a
 8002818:	2a2d3033 	.word	0x2a2d3033
 800281c:	1a1a2427 	.word	0x1a1a2427
 8002820:	1a1a1a1a 	.word	0x1a1a1a1a
 8002824:	1a211a1a 	.word	0x1a211a1a
 8002828:	1a1a1a1a 	.word	0x1a1a1a1a
 800282c:	1a1a1a1a 	.word	0x1a1a1a1a
 8002830:	1a1a1a1a 	.word	0x1a1a1a1a
 8002834:	1a1a1a1a 	.word	0x1a1a1a1a
 8002838:	1a1a1a1a 	.word	0x1a1a1a1a
 800283c:	1a1a1a1a 	.word	0x1a1a1a1a
 8002840:	1a1a1a1a 	.word	0x1a1a1a1a
 8002844:	1a1a      	.short	0x1a1a
 8002846:	1e          	.byte	0x1e
 8002847:	00          	.byte	0x00
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
        break;

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002848:	2300      	movs	r3, #0
 800284a:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 800284c:	b002      	add	sp, #8
 800284e:	bd70      	pop	{r4, r5, r6, pc}
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002850:	2332      	movs	r3, #50	; 0x32
 8002852:	702b      	strb	r3, [r5, #0]
        break;
 8002854:	e7fa      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002856:	2312      	movs	r3, #18
 8002858:	702b      	strb	r3, [r5, #0]
        break;
 800285a:	e7f7      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800285c:	2309      	movs	r3, #9
 800285e:	702b      	strb	r3, [r5, #0]
        break;
 8002860:	e7f4      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_800Hz;
 8002862:	2308      	movs	r3, #8
 8002864:	702b      	strb	r3, [r5, #0]
        break;
 8002866:	e7f1      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_400Hz;
 8002868:	2307      	movs	r3, #7
 800286a:	702b      	strb	r3, [r5, #0]
        break;
 800286c:	e7ee      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_200Hz;
 800286e:	2306      	movs	r3, #6
 8002870:	702b      	strb	r3, [r5, #0]
        break;
 8002872:	e7eb      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_100Hz;
 8002874:	2305      	movs	r3, #5
 8002876:	702b      	strb	r3, [r5, #0]
        break;
 8002878:	e7e8      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_50Hz;
 800287a:	2304      	movs	r3, #4
 800287c:	702b      	strb	r3, [r5, #0]
        break;
 800287e:	e7e5      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_25Hz;
 8002880:	2303      	movs	r3, #3
 8002882:	702b      	strb	r3, [r5, #0]
        break;
 8002884:	e7e2      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002886:	2302      	movs	r3, #2
 8002888:	702b      	strb	r3, [r5, #0]
        break;
 800288a:	e7df      	b.n	800284c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 800288c:	2301      	movs	r3, #1
 800288e:	702b      	strb	r3, [r5, #0]
        break;
 8002890:	e7dc      	b.n	800284c <lis2dw12_data_rate_get+0x74>
 8002892:	bf00      	nop

08002894 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4604      	mov	r4, r0
 8002898:	b082      	sub	sp, #8
 800289a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800289c:	68c0      	ldr	r0, [r0, #12]
 800289e:	6866      	ldr	r6, [r4, #4]
 80028a0:	2301      	movs	r3, #1
 80028a2:	aa01      	add	r2, sp, #4
 80028a4:	2121      	movs	r1, #33	; 0x21
 80028a6:	47b0      	blx	r6
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);

  if (ret == 0)
 80028a8:	b958      	cbnz	r0, 80028c2 <lis2dw12_block_data_update_set+0x2e>
  {
    reg.bdu = val;
 80028aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028ae:	6826      	ldr	r6, [r4, #0]
 80028b0:	68e0      	ldr	r0, [r4, #12]
    reg.bdu = val;
 80028b2:	f365 03c3 	bfi	r3, r5, #3, #1
 80028b6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028ba:	aa01      	add	r2, sp, #4
 80028bc:	2301      	movs	r3, #1
 80028be:	2121      	movs	r1, #33	; 0x21
 80028c0:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80028c2:	b002      	add	sp, #8
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	bf00      	nop

080028c8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4604      	mov	r4, r0
 80028cc:	b082      	sub	sp, #8
 80028ce:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028d0:	68c0      	ldr	r0, [r0, #12]
 80028d2:	6866      	ldr	r6, [r4, #4]
 80028d4:	2301      	movs	r3, #1
 80028d6:	aa01      	add	r2, sp, #4
 80028d8:	2125      	movs	r1, #37	; 0x25
 80028da:	47b0      	blx	r6
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);

  if (ret == 0)
 80028dc:	b958      	cbnz	r0, 80028f6 <lis2dw12_full_scale_set+0x2e>
  {
    reg.fs = (uint8_t) val;
 80028de:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028e2:	6826      	ldr	r6, [r4, #0]
 80028e4:	68e0      	ldr	r0, [r4, #12]
    reg.fs = (uint8_t) val;
 80028e6:	f365 1305 	bfi	r3, r5, #4, #2
 80028ea:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028ee:	aa01      	add	r2, sp, #4
 80028f0:	2301      	movs	r3, #1
 80028f2:	2125      	movs	r1, #37	; 0x25
 80028f4:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80028f6:	b002      	add	sp, #8
 80028f8:	bd70      	pop	{r4, r5, r6, pc}
 80028fa:	bf00      	nop

080028fc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80028fc:	b530      	push	{r4, r5, lr}
 80028fe:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002900:	6845      	ldr	r5, [r0, #4]
 8002902:	68c0      	ldr	r0, [r0, #12]
 8002904:	2301      	movs	r3, #1
 8002906:	aa01      	add	r2, sp, #4
{
 8002908:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800290a:	2125      	movs	r1, #37	; 0x25
 800290c:	47a8      	blx	r5
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);

  switch (reg.fs)
 800290e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002912:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8002916:	2a02      	cmp	r2, #2
 8002918:	4613      	mov	r3, r2
 800291a:	d007      	beq.n	800292c <lis2dw12_full_scale_get+0x30>
 800291c:	2a03      	cmp	r2, #3
 800291e:	d005      	beq.n	800292c <lis2dw12_full_scale_get+0x30>
 8002920:	2a01      	cmp	r2, #1
 8002922:	d003      	beq.n	800292c <lis2dw12_full_scale_get+0x30>
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002924:	2300      	movs	r3, #0
 8002926:	7023      	strb	r3, [r4, #0]
      *val = LIS2DW12_2g;
      break;
  }

  return ret;
}
 8002928:	b003      	add	sp, #12
 800292a:	bd30      	pop	{r4, r5, pc}
      *val = LIS2DW12_16g;
 800292c:	7023      	strb	r3, [r4, #0]
}
 800292e:	b003      	add	sp, #12
 8002930:	bd30      	pop	{r4, r5, pc}
 8002932:	bf00      	nop

08002934 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002934:	b530      	push	{r4, r5, lr}
 8002936:	b083      	sub	sp, #12
 8002938:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800293a:	6845      	ldr	r5, [r0, #4]
 800293c:	68c0      	ldr	r0, [r0, #12]
 800293e:	466a      	mov	r2, sp
 8002940:	2306      	movs	r3, #6
 8002942:	2128      	movs	r1, #40	; 0x28
 8002944:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002946:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800294a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800294e:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002952:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002956:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800295a:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800295c:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002960:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002964:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002968:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800296c:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800296e:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8002970:	b003      	add	sp, #12
 8002972:	bd30      	pop	{r4, r5, pc}

08002974 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002974:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002976:	6844      	ldr	r4, [r0, #4]
 8002978:	68c0      	ldr	r0, [r0, #12]
{
 800297a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800297c:	46a4      	mov	ip, r4
 800297e:	2301      	movs	r3, #1
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);

  return ret;
}
 8002980:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002984:	210f      	movs	r1, #15
 8002986:	4760      	bx	ip

08002988 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4604      	mov	r4, r0
 800298c:	b082      	sub	sp, #8
 800298e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002990:	68c0      	ldr	r0, [r0, #12]
 8002992:	6866      	ldr	r6, [r4, #4]
 8002994:	2301      	movs	r3, #1
 8002996:	aa01      	add	r2, sp, #4
 8002998:	2121      	movs	r1, #33	; 0x21
 800299a:	47b0      	blx	r6
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);

  if (ret == 0)
 800299c:	b958      	cbnz	r0, 80029b6 <lis2dw12_auto_increment_set+0x2e>
  {
    reg.if_add_inc = val;
 800299e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029a2:	6826      	ldr	r6, [r4, #0]
 80029a4:	68e0      	ldr	r0, [r4, #12]
    reg.if_add_inc = val;
 80029a6:	f365 0382 	bfi	r3, r5, #2, #1
 80029aa:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029ae:	aa01      	add	r2, sp, #4
 80029b0:	2301      	movs	r3, #1
 80029b2:	2121      	movs	r1, #33	; 0x21
 80029b4:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80029b6:	b002      	add	sp, #8
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
 80029ba:	bf00      	nop

080029bc <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	4604      	mov	r4, r0
 80029c0:	b082      	sub	sp, #8
 80029c2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029c4:	68c0      	ldr	r0, [r0, #12]
 80029c6:	6866      	ldr	r6, [r4, #4]
 80029c8:	2301      	movs	r3, #1
 80029ca:	aa01      	add	r2, sp, #4
 80029cc:	212e      	movs	r1, #46	; 0x2e
 80029ce:	47b0      	blx	r6
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);

  if (ret == 0)
 80029d0:	b958      	cbnz	r0, 80029ea <lis2dw12_fifo_mode_set+0x2e>
  {
    reg.fmode = (uint8_t) val;
 80029d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029d6:	6826      	ldr	r6, [r4, #0]
 80029d8:	68e0      	ldr	r0, [r4, #12]
    reg.fmode = (uint8_t) val;
 80029da:	f365 1347 	bfi	r3, r5, #5, #3
 80029de:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029e2:	aa01      	add	r2, sp, #4
 80029e4:	2301      	movs	r3, #1
 80029e6:	212e      	movs	r1, #46	; 0x2e
 80029e8:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80029ea:	b002      	add	sp, #8
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	bf00      	nop

080029f0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80029f0:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80029f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
  Capabilities->GyroMaxOdr   = 0.0f;
 80029f6:	2300      	movs	r3, #0
  Capabilities->GyroMaxFS    = 0;
 80029f8:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 0.0f;
  Capabilities->MagMaxOdr    = 100.0f;
 80029fa:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <LIS2MDL_GetCapabilities+0x24>)
  Capabilities->Acc          = 0;
 80029fc:	600c      	str	r4, [r1, #0]
  Capabilities->MagMaxFS     = 50;
 80029fe:	2432      	movs	r4, #50	; 0x32
 8002a00:	60cc      	str	r4, [r1, #12]
  Capabilities->AccMaxFS     = 0;
 8002a02:	e9c1 0001 	strd	r0, r0, [r1, #4]
  return LIS2MDL_OK;
}
 8002a06:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->GyroMaxOdr   = 0.0f;
 8002a0a:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002a0c:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002a0e:	618a      	str	r2, [r1, #24]
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	42c80000 	.word	0x42c80000

08002a18 <LIS2MDL_MAG_GetSensitivity>:
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002a18:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002a1c:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8002a1e:	2000      	movs	r0, #0
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop

08002a24 <LIS2MDL_MAG_GetFullScale>:
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 8002a24:	2332      	movs	r3, #50	; 0x32
 8002a26:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4770      	bx	lr

08002a2c <LIS2MDL_MAG_SetFullScale>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	4770      	bx	lr

08002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	b087      	sub	sp, #28
 8002a34:	4616      	mov	r6, r2
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
  uint8_t shub_reg_access_dis = 0x00U;
 8002a36:	2200      	movs	r2, #0
 8002a38:	f88d 200a 	strb.w	r2, [sp, #10]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002a3c:	223d      	movs	r2, #61	; 0x3d
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002a3e:	f100 0420 	add.w	r4, r0, #32
{
 8002a42:	461d      	mov	r5, r3
  uint8_t len = (uint8_t)Length;
 8002a44:	f88d 300d 	strb.w	r3, [sp, #13]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002a48:	f88d 200b 	strb.w	r2, [sp, #11]
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002a4c:	2301      	movs	r3, #1
  uint8_t write_once_i2c_en = 0x44U;
 8002a4e:	2244      	movs	r2, #68	; 0x44
  uint8_t shub_reg_access_en = 0x40U;
 8002a50:	2740      	movs	r7, #64	; 0x40
{
 8002a52:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t write_once_i2c_en = 0x44U;
 8002a56:	f88d 200c 	strb.w	r2, [sp, #12]
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f10d 0209 	add.w	r2, sp, #9
 8002a60:	4620      	mov	r0, r4
  uint8_t shub_reg_access_en = 0x40U;
 8002a62:	f88d 7009 	strb.w	r7, [sp, #9]
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002a66:	f000 fb6b 	bl	8003140 <lis2mdl_write_reg>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d150      	bne.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f10d 020b 	add.w	r2, sp, #11
 8002a74:	2115      	movs	r1, #21
 8002a76:	4620      	mov	r0, r4
 8002a78:	f000 fb62 	bl	8003140 <lis2mdl_write_reg>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d147      	bne.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002a80:	2301      	movs	r3, #1
 8002a82:	f10d 0207 	add.w	r2, sp, #7
 8002a86:	2116      	movs	r1, #22
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f000 fb59 	bl	8003140 <lis2mdl_write_reg>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d13e      	bne.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002a92:	2301      	movs	r3, #1
 8002a94:	f10d 020d 	add.w	r2, sp, #13
 8002a98:	2117      	movs	r1, #23
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 fb50 	bl	8003140 <lis2mdl_write_reg>
 8002aa0:	bbb0      	cbnz	r0, 8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	aa03      	add	r2, sp, #12
 8002aa6:	2114      	movs	r1, #20
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f000 fb49 	bl	8003140 <lis2mdl_write_reg>
 8002aae:	bb78      	cbnz	r0, 8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f10d 020a 	add.w	r2, sp, #10
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f000 fb41 	bl	8003140 <lis2mdl_write_reg>
 8002abe:	bb38      	cbnz	r0, 8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f10d 020e 	add.w	r2, sp, #14
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f000 fb31 	bl	8003130 <lis2mdl_read_reg>
 8002ace:	b9f8      	cbnz	r0, 8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002ad0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002ad4:	b373      	cbz	r3, 8002b34 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x104>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002ad6:	f10d 020e 	add.w	r2, sp, #14
 8002ada:	2301      	movs	r3, #1
 8002adc:	2110      	movs	r1, #16
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f000 fb2e 	bl	8003140 <lis2mdl_write_reg>
 8002ae4:	b9a0      	cbnz	r0, 8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	aa04      	add	r2, sp, #16
 8002aea:	2129      	movs	r1, #41	; 0x29
 8002aec:	4620      	mov	r0, r4
 8002aee:	f000 fb1f 	bl	8003130 <lis2mdl_read_reg>
 8002af2:	b120      	cbz	r0, 8002afe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xce>
 8002af4:	e00c      	b.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 8002af6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8002afa:	07ca      	lsls	r2, r1, #31
 8002afc:	d410      	bmi.n	8002b20 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xf0>
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002afe:	2301      	movs	r3, #1
 8002b00:	f10d 020f 	add.w	r2, sp, #15
 8002b04:	211e      	movs	r1, #30
 8002b06:	4620      	mov	r0, r4
 8002b08:	f000 fb12 	bl	8003130 <lis2mdl_read_reg>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d0f2      	beq.n	8002af6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc6>
    return LIS2MDL_ERROR;
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return LIS2MDL_ERROR;
  }

  return LIS2MDL_OK;
}
 8002b14:	b007      	add	sp, #28
 8002b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002b18:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8002b1c:	07cb      	lsls	r3, r1, #31
 8002b1e:	d40c      	bmi.n	8002b3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x10a>
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002b20:	2301      	movs	r3, #1
 8002b22:	f10d 020f 	add.w	r2, sp, #15
 8002b26:	2139      	movs	r1, #57	; 0x39
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 fb01 	bl	8003130 <lis2mdl_read_reg>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0f2      	beq.n	8002b18 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe8>
 8002b32:	e7ed      	b.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002b34:	f88d 700e 	strb.w	r7, [sp, #14]
 8002b38:	e7cd      	b.n	8002ad6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa6>
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f10d 0209 	add.w	r2, sp, #9
 8002b40:	4619      	mov	r1, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 fafc 	bl	8003140 <lis2mdl_write_reg>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d1e1      	bne.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	4632      	mov	r2, r6
 8002b50:	2102      	movs	r1, #2
 8002b52:	4620      	mov	r0, r4
 8002b54:	f000 faec 	bl	8003130 <lis2mdl_read_reg>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d1d9      	bne.n	8002b10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe0>
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f10d 020a 	add.w	r2, sp, #10
 8002b62:	4619      	mov	r1, r3
 8002b64:	4620      	mov	r0, r4
 8002b66:	f000 faeb 	bl	8003140 <lis2mdl_write_reg>
 8002b6a:	3800      	subs	r0, #0
 8002b6c:	bf18      	it	ne
 8002b6e:	2001      	movne	r0, #1
 8002b70:	4240      	negs	r0, r0
}
 8002b72:	b007      	add	sp, #28
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b76:	bf00      	nop

08002b78 <LIS2MDL_MAG_GetOutputDataRate>:
{
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002b7e:	3020      	adds	r0, #32
 8002b80:	f10d 0107 	add.w	r1, sp, #7
 8002b84:	f000 fb18 	bl	80031b8 <lis2mdl_data_rate_get>
 8002b88:	b9b8      	cbnz	r0, 8002bba <LIS2MDL_MAG_GetOutputDataRate+0x42>
  switch (odr_low_level)
 8002b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d813      	bhi.n	8002bba <LIS2MDL_MAG_GetOutputDataRate+0x42>
 8002b92:	e8df f003 	tbb	[pc, r3]
 8002b96:	0a06      	.short	0x0a06
 8002b98:	020e      	.short	0x020e
      *Odr = 100.0f;
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 8002b9c:	6023      	str	r3, [r4, #0]
}
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd10      	pop	{r4, pc}
      *Odr = 10.0f;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <LIS2MDL_MAG_GetOutputDataRate+0x4c>)
 8002ba4:	6023      	str	r3, [r4, #0]
}
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <LIS2MDL_MAG_GetOutputDataRate+0x50>)
 8002bac:	6023      	str	r3, [r4, #0]
}
 8002bae:	b002      	add	sp, #8
 8002bb0:	bd10      	pop	{r4, pc}
      *Odr = 50.0f;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <LIS2MDL_MAG_GetOutputDataRate+0x54>)
 8002bb4:	6023      	str	r3, [r4, #0]
}
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8002bba:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbe:	e7ee      	b.n	8002b9e <LIS2MDL_MAG_GetOutputDataRate+0x26>
 8002bc0:	42c80000 	.word	0x42c80000
 8002bc4:	41200000 	.word	0x41200000
 8002bc8:	41a00000 	.word	0x41a00000
 8002bcc:	42480000 	.word	0x42480000

08002bd0 <LIS2MDL_MAG_GetAxesRaw>:
{
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	460c      	mov	r4, r1
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002bd6:	3020      	adds	r0, #32
 8002bd8:	4669      	mov	r1, sp
 8002bda:	f000 fb23 	bl	8003224 <lis2mdl_magnetic_raw_get>
 8002bde:	b930      	cbnz	r0, 8002bee <LIS2MDL_MAG_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8002be0:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8002be2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8002be6:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8002be8:	80a3      	strh	r3, [r4, #4]
}
 8002bea:	b002      	add	sp, #8
 8002bec:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	e7fa      	b.n	8002bea <LIS2MDL_MAG_GetAxesRaw+0x1a>

08002bf4 <LIS2MDL_MAG_GetAxes>:
{
 8002bf4:	b510      	push	{r4, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002bf6:	6882      	ldr	r2, [r0, #8]
 8002bf8:	2a03      	cmp	r2, #3
{
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	460c      	mov	r4, r1
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002bfe:	d02e      	beq.n	8002c5e <LIS2MDL_MAG_GetAxes+0x6a>
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002c00:	a902      	add	r1, sp, #8
 8002c02:	3020      	adds	r0, #32
 8002c04:	f000 fb0e 	bl	8003224 <lis2mdl_magnetic_raw_get>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d14a      	bne.n	8002ca2 <LIS2MDL_MAG_GetAxes+0xae>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c0c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002c10:	ee06 3a90 	vmov	s13, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c14:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002c18:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c1c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002c20:	ee07 3a90 	vmov	s15, r3
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c30:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8002c34:	ee66 6a86 	vmul.f32	s13, s13, s12
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c38:	ee27 7a06 	vmul.f32	s14, s14, s12
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c3c:	ee67 7a86 	vmul.f32	s15, s15, s12
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c40:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c44:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c4c:	edc4 6a00 	vstr	s13, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c50:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c54:	edc4 7a02 	vstr	s15, [r4, #8]
  return LIS2MDL_OK;
 8002c58:	2000      	movs	r0, #0
}
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002c5e:	2306      	movs	r3, #6
 8002c60:	466a      	mov	r2, sp
 8002c62:	2168      	movs	r1, #104	; 0x68
 8002c64:	f7ff fee4 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002c68:	b9d8      	cbnz	r0, 8002ca2 <LIS2MDL_MAG_GetAxes+0xae>
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c6a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002c6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c72:	f89d 1000 	ldrb.w	r1, [sp]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002c76:	f89d 2002 	ldrb.w	r2, [sp, #2]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c7a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002c7e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002c82:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002c86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c8a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c8e:	b209      	sxth	r1, r1
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002c90:	b212      	sxth	r2, r2
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002c92:	b21b      	sxth	r3, r3
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c94:	ee06 1a90 	vmov	s13, r1
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002c98:	ee07 2a10 	vmov	s14, r2
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	e7c0      	b.n	8002c24 <LIS2MDL_MAG_GetAxes+0x30>
      return LIS2MDL_ERROR;
 8002ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca6:	e7d8      	b.n	8002c5a <LIS2MDL_MAG_GetAxes+0x66>

08002ca8 <ReadMagRegWrap>:
{
 8002ca8:	b410      	push	{r4}
  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002caa:	6884      	ldr	r4, [r0, #8]
 8002cac:	b14c      	cbz	r4, 8002cc2 <ReadMagRegWrap+0x1a>
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002cae:	2c03      	cmp	r4, #3
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002cb0:	6944      	ldr	r4, [r0, #20]
 8002cb2:	7b00      	ldrb	r0, [r0, #12]
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cb4:	46a4      	mov	ip, r4
 8002cb6:	bf18      	it	ne
 8002cb8:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
}
 8002cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cc0:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cc2:	6944      	ldr	r4, [r0, #20]
 8002cc4:	7b00      	ldrb	r0, [r0, #12]
 8002cc6:	46a4      	mov	ip, r4
 8002cc8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8002ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cd0:	4760      	bx	ip
 8002cd2:	bf00      	nop

08002cd4 <WriteMagRegWrap>:
{
 8002cd4:	b410      	push	{r4}
  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002cd6:	6884      	ldr	r4, [r0, #8]
 8002cd8:	b14c      	cbz	r4, 8002cee <WriteMagRegWrap+0x1a>
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002cda:	2c03      	cmp	r4, #3
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002cdc:	6904      	ldr	r4, [r0, #16]
 8002cde:	7b00      	ldrb	r0, [r0, #12]
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002ce0:	46a4      	mov	ip, r4
 8002ce2:	bf18      	it	ne
 8002ce4:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
}
 8002ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cec:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cee:	6904      	ldr	r4, [r0, #16]
 8002cf0:	7b00      	ldrb	r0, [r0, #12]
 8002cf2:	46a4      	mov	ip, r4
 8002cf4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8002cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cfc:	4760      	bx	ip
 8002cfe:	bf00      	nop

08002d00 <LIS2MDL_ReadID>:
{
 8002d00:	b510      	push	{r4, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d02:	6884      	ldr	r4, [r0, #8]
 8002d04:	2c03      	cmp	r4, #3
 8002d06:	d007      	beq.n	8002d18 <LIS2MDL_ReadID+0x18>
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002d08:	3020      	adds	r0, #32
 8002d0a:	f000 faab 	bl	8003264 <lis2mdl_device_id_get>
 8002d0e:	3800      	subs	r0, #0
 8002d10:	bf18      	it	ne
 8002d12:	2001      	movne	r0, #1
 8002d14:	4240      	negs	r0, r0
}
 8002d16:	bd10      	pop	{r4, pc}
 8002d18:	460a      	mov	r2, r1
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	214f      	movs	r1, #79	; 0x4f
 8002d1e:	f7ff fe87 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002d22:	3800      	subs	r0, #0
 8002d24:	bf18      	it	ne
 8002d26:	2001      	movne	r0, #1
 8002d28:	4240      	negs	r0, r0
}
 8002d2a:	bd10      	pop	{r4, pc}

08002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>:
  * @param  Reg the LIS2MDL reg address to be loaded into LSM6DSOX SH regs
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	b086      	sub	sp, #24
                                                      uint16_t Length)
{
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
  uint8_t shub_reg_access_dis = 0x00U;
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8002d30:	233c      	movs	r3, #60	; 0x3c
  uint8_t datawrite_slv0 = 0x0EU;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002d32:	f100 0420 	add.w	r4, r0, #32
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
 8002d36:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t shub_reg_access_dis = 0x00U;
 8002d3a:	2000      	movs	r0, #0
  uint8_t write_once_i2c_en = 0x44U;
 8002d3c:	2144      	movs	r1, #68	; 0x44
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8002d3e:	f88d 300b 	strb.w	r3, [sp, #11]
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002d42:	2301      	movs	r3, #1
  uint8_t shub_reg_access_en = 0x40U;
 8002d44:	2540      	movs	r5, #64	; 0x40
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
 8002d46:	4616      	mov	r6, r2
  uint8_t shub_reg_access_dis = 0x00U;
 8002d48:	f88d 000a 	strb.w	r0, [sp, #10]
  uint8_t write_once_i2c_en = 0x44U;
 8002d4c:	f88d 100d 	strb.w	r1, [sp, #13]
  uint8_t shub_odr_104 = 0x00U;
 8002d50:	f88d 000c 	strb.w	r0, [sp, #12]
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002d54:	f10d 0209 	add.w	r2, sp, #9
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
  uint8_t shub_reg_access_en = 0x40U;
 8002d5c:	f88d 5009 	strb.w	r5, [sp, #9]
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002d60:	f000 f9ee 	bl	8003140 <lis2mdl_write_reg>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d158      	bne.n	8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f10d 020b 	add.w	r2, sp, #11
 8002d6e:	2115      	movs	r1, #21
 8002d70:	4620      	mov	r0, r4
 8002d72:	f000 f9e5 	bl	8003140 <lis2mdl_write_reg>
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d14f      	bne.n	8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f10d 0207 	add.w	r2, sp, #7
 8002d80:	2116      	movs	r1, #22
 8002d82:	4620      	mov	r0, r4
 8002d84:	f000 f9dc 	bl	8003140 <lis2mdl_write_reg>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d146      	bne.n	8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	aa03      	add	r2, sp, #12
 8002d90:	2117      	movs	r1, #23
 8002d92:	4620      	mov	r0, r4
 8002d94:	f000 f9d4 	bl	8003140 <lis2mdl_write_reg>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d13e      	bne.n	8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4632      	mov	r2, r6
 8002da0:	210e      	movs	r1, #14
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 f9cc 	bl	8003140 <lis2mdl_write_reg>
 8002da8:	bbb8      	cbnz	r0, 8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002daa:	2301      	movs	r3, #1
 8002dac:	f10d 020d 	add.w	r2, sp, #13
 8002db0:	2114      	movs	r1, #20
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 f9c4 	bl	8003140 <lis2mdl_write_reg>
 8002db8:	bb78      	cbnz	r0, 8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f10d 020a 	add.w	r2, sp, #10
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f000 f9bc 	bl	8003140 <lis2mdl_write_reg>
 8002dc8:	bb38      	cbnz	r0, 8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f10d 020e 	add.w	r2, sp, #14
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 f9ac 	bl	8003130 <lis2mdl_read_reg>
 8002dd8:	b9f8      	cbnz	r0, 8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002dda:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002dde:	b373      	cbz	r3, 8002e3e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0x112>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002de0:	2301      	movs	r3, #1
 8002de2:	f10d 020e 	add.w	r2, sp, #14
 8002de6:	2110      	movs	r1, #16
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 f9a9 	bl	8003140 <lis2mdl_write_reg>
 8002dee:	b9a0      	cbnz	r0, 8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002df0:	2306      	movs	r3, #6
 8002df2:	aa04      	add	r2, sp, #16
 8002df4:	2129      	movs	r1, #41	; 0x29
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 f99a 	bl	8003130 <lis2mdl_read_reg>
 8002dfc:	b120      	cbz	r0, 8002e08 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xdc>
 8002dfe:	e00c      	b.n	8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 8002e00:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002e04:	07db      	lsls	r3, r3, #31
 8002e06:	d410      	bmi.n	8002e2a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xfe>
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f10d 020f 	add.w	r2, sp, #15
 8002e0e:	211e      	movs	r1, #30
 8002e10:	4620      	mov	r0, r4
 8002e12:	f000 f98d 	bl	8003130 <lis2mdl_read_reg>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d0f2      	beq.n	8002e00 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xd4>
    return LIS2MDL_ERROR;
 8002e1a:	f04f 30ff 	mov.w	r0, #4294967295
      return LIS2MDL_ERROR;
    }
  } while ((data & wr_once_done) != wr_once_done);

  return LIS2MDL_OK;
}
 8002e1e:	b006      	add	sp, #24
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
  } while ((data & wr_once_done) != wr_once_done);
 8002e22:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	dbf9      	blt.n	8002e1e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xf2>
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f10d 020f 	add.w	r2, sp, #15
 8002e30:	2139      	movs	r1, #57	; 0x39
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 f97c 	bl	8003130 <lis2mdl_read_reg>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d0f2      	beq.n	8002e22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xf6>
 8002e3c:	e7ed      	b.n	8002e1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xee>
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002e3e:	f88d 500e 	strb.w	r5, [sp, #14]
 8002e42:	e7cd      	b.n	8002de0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0+0xb4>

08002e44 <LIS2MDL_MAG_SetOutputDataRate>:
{
 8002e44:	b530      	push	{r4, r5, lr}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002e46:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002e4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002e52:	b083      	sub	sp, #12
 8002e54:	4604      	mov	r4, r0
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002e56:	dd2a      	ble.n	8002eae <LIS2MDL_MAG_SetOutputDataRate+0x6a>
 8002e58:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002e5c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	dd32      	ble.n	8002ecc <LIS2MDL_MAG_SetOutputDataRate+0x88>
 8002e66:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002ee0 <LIS2MDL_MAG_SetOutputDataRate+0x9c>
 8002e6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d82e      	bhi.n	8002ed2 <LIS2MDL_MAG_SetOutputDataRate+0x8e>
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e74:	68a3      	ldr	r3, [r4, #8]
 8002e76:	2502      	movs	r5, #2
 8002e78:	2b03      	cmp	r3, #3
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002e7a:	4629      	mov	r1, r5
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e7c:	d11c      	bne.n	8002eb8 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002e7e:	2301      	movs	r3, #1
 8002e80:	aa01      	add	r2, sp, #4
 8002e82:	2160      	movs	r1, #96	; 0x60
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff fdd3 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002e8a:	bb28      	cbnz	r0, 8002ed8 <LIS2MDL_MAG_SetOutputDataRate+0x94>
    reg_a.odr = new_odr;
 8002e8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002e90:	aa01      	add	r2, sp, #4
    reg_a.odr = new_odr;
 8002e92:	f365 0383 	bfi	r3, r5, #2, #2
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002e96:	2160      	movs	r1, #96	; 0x60
 8002e98:	4620      	mov	r0, r4
    reg_a.odr = new_odr;
 8002e9a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002e9e:	f7ff ff45 	bl	8002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>
 8002ea2:	3800      	subs	r0, #0
 8002ea4:	bf18      	it	ne
 8002ea6:	2001      	movne	r0, #1
 8002ea8:	4240      	negs	r0, r0
}
 8002eaa:	b003      	add	sp, #12
 8002eac:	bd30      	pop	{r4, r5, pc}
 8002eae:	2500      	movs	r5, #0
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002eb0:	4629      	mov	r1, r5
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002eb2:	68a3      	ldr	r3, [r4, #8]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d0e2      	beq.n	8002e7e <LIS2MDL_MAG_SetOutputDataRate+0x3a>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002eb8:	f104 0020 	add.w	r0, r4, #32
 8002ebc:	f000 f962 	bl	8003184 <lis2mdl_data_rate_set>
 8002ec0:	3800      	subs	r0, #0
 8002ec2:	bf18      	it	ne
 8002ec4:	2001      	movne	r0, #1
 8002ec6:	4240      	negs	r0, r0
}
 8002ec8:	b003      	add	sp, #12
 8002eca:	bd30      	pop	{r4, r5, pc}
 8002ecc:	2501      	movs	r5, #1
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002ece:	4629      	mov	r1, r5
 8002ed0:	e7ef      	b.n	8002eb2 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
 8002ed2:	2503      	movs	r5, #3
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	e7ec      	b.n	8002eb2 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
      return LIS2MDL_ERROR;
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	e7f4      	b.n	8002ec8 <LIS2MDL_MAG_SetOutputDataRate+0x84>
 8002ede:	bf00      	nop
 8002ee0:	42480000 	.word	0x42480000

08002ee4 <LIS2MDL_DeInit>:
{
 8002ee4:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 0U)
 8002ee6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8002eea:	b082      	sub	sp, #8
 8002eec:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8002eee:	b153      	cbz	r3, 8002f06 <LIS2MDL_DeInit+0x22>
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002ef0:	6883      	ldr	r3, [r0, #8]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d00c      	beq.n	8002f10 <LIS2MDL_DeInit+0x2c>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	3020      	adds	r0, #32
 8002efa:	f000 f929 	bl	8003150 <lis2mdl_operating_mode_set>
 8002efe:	b9d8      	cbnz	r0, 8002f38 <LIS2MDL_DeInit+0x54>
  pObj->mag_is_enabled = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  pObj->is_initialized = 0;
 8002f06:	2000      	movs	r0, #0
 8002f08:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f10:	2301      	movs	r3, #1
 8002f12:	aa01      	add	r2, sp, #4
 8002f14:	2160      	movs	r1, #96	; 0x60
 8002f16:	f7ff fd8b 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002f1a:	b968      	cbnz	r0, 8002f38 <LIS2MDL_DeInit+0x54>
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002f1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f362 0301 	bfi	r3, r2, #0, #2
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f26:	2160      	movs	r1, #96	; 0x60
 8002f28:	aa01      	add	r2, sp, #4
 8002f2a:	4620      	mov	r0, r4
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002f2c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f30:	f7ff fefc 	bl	8002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0e3      	beq.n	8002f00 <LIS2MDL_DeInit+0x1c>
    return LIS2MDL_ERROR;
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	e7e6      	b.n	8002f0c <LIS2MDL_DeInit+0x28>
 8002f3e:	bf00      	nop

08002f40 <LIS2MDL_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002f40:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d026      	beq.n	8002f96 <LIS2MDL_MAG_Enable+0x56>
{
 8002f48:	b510      	push	{r4, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002f4a:	6883      	ldr	r3, [r0, #8]
 8002f4c:	2b03      	cmp	r3, #3
{
 8002f4e:	b082      	sub	sp, #8
 8002f50:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002f52:	d00a      	beq.n	8002f6a <LIS2MDL_MAG_Enable+0x2a>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8002f54:	2100      	movs	r1, #0
 8002f56:	3020      	adds	r0, #32
 8002f58:	f000 f8fa 	bl	8003150 <lis2mdl_operating_mode_set>
 8002f5c:	b9c0      	cbnz	r0, 8002f90 <LIS2MDL_MAG_Enable+0x50>
  pObj->mag_is_enabled = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return LIS2MDL_OK;
 8002f64:	2000      	movs	r0, #0
}
 8002f66:	b002      	add	sp, #8
 8002f68:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	aa01      	add	r2, sp, #4
 8002f6e:	2160      	movs	r1, #96	; 0x60
 8002f70:	f7ff fd5e 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002f74:	b960      	cbnz	r0, 8002f90 <LIS2MDL_MAG_Enable+0x50>
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002f76:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f7a:	aa01      	add	r2, sp, #4
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002f7c:	f360 0301 	bfi	r3, r0, #0, #2
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f80:	2160      	movs	r1, #96	; 0x60
 8002f82:	4620      	mov	r0, r4
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002f84:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002f88:	f7ff fed0 	bl	8002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d0e6      	beq.n	8002f5e <LIS2MDL_MAG_Enable+0x1e>
      return LIS2MDL_ERROR;
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	e7e7      	b.n	8002f66 <LIS2MDL_MAG_Enable+0x26>
    return LIS2MDL_OK;
 8002f96:	2000      	movs	r0, #0
}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <LIS2MDL_Init>:
{
 8002f9c:	b530      	push	{r4, r5, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002f9e:	6883      	ldr	r3, [r0, #8]
 8002fa0:	2b03      	cmp	r3, #3
{
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002fa6:	d01c      	beq.n	8002fe2 <LIS2MDL_Init+0x46>
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8002fa8:	f100 0520 	add.w	r5, r0, #32
 8002fac:	2101      	movs	r1, #1
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 f91e 	bl	80031f0 <lis2mdl_block_data_update_set>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d13e      	bne.n	8003036 <LIS2MDL_Init+0x9a>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f000 f8c8 	bl	8003150 <lis2mdl_operating_mode_set>
 8002fc0:	bbc8      	cbnz	r0, 8003036 <LIS2MDL_Init+0x9a>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 f8dd 	bl	8003184 <lis2mdl_data_rate_set>
 8002fca:	4601      	mov	r1, r0
 8002fcc:	bb98      	cbnz	r0, 8003036 <LIS2MDL_Init+0x9a>
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f952 	bl	8003278 <lis2mdl_self_test_set>
 8002fd4:	bb78      	cbnz	r0, 8003036 <LIS2MDL_Init+0x9a>
  pObj->is_initialized = 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return LIS2MDL_OK;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	b003      	add	sp, #12
 8002fe0:	bd30      	pop	{r4, r5, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	aa01      	add	r2, sp, #4
 8002fe6:	2162      	movs	r1, #98	; 0x62
 8002fe8:	f7ff fd22 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002fec:	bb18      	cbnz	r0, 8003036 <LIS2MDL_Init+0x9a>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002fee:	2301      	movs	r3, #1
 8002ff0:	466a      	mov	r2, sp
 8002ff2:	2160      	movs	r1, #96	; 0x60
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7ff fd1b 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002ffa:	b9e0      	cbnz	r0, 8003036 <LIS2MDL_Init+0x9a>
    reg_c.self_test = PROPERTY_DISABLE;
 8002ffc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003000:	f89d 3000 	ldrb.w	r3, [sp]
    reg_c.self_test = PROPERTY_DISABLE;
 8003004:	f021 0112 	bic.w	r1, r1, #18
 8003008:	f041 0110 	orr.w	r1, r1, #16
    reg_a.md = LIS2MDL_POWER_DOWN;
 800300c:	f023 030f 	bic.w	r3, r3, #15
 8003010:	f043 030e 	orr.w	r3, r3, #14
    reg_c.self_test = PROPERTY_DISABLE;
 8003014:	f88d 1004 	strb.w	r1, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003018:	aa01      	add	r2, sp, #4
 800301a:	2162      	movs	r1, #98	; 0x62
 800301c:	4620      	mov	r0, r4
    reg_a.md = LIS2MDL_POWER_DOWN;
 800301e:	f88d 3000 	strb.w	r3, [sp]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003022:	f7ff fe83 	bl	8002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>
 8003026:	b930      	cbnz	r0, 8003036 <LIS2MDL_Init+0x9a>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003028:	466a      	mov	r2, sp
 800302a:	2160      	movs	r1, #96	; 0x60
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff fe7d 	bl	8002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>
 8003032:	2800      	cmp	r0, #0
 8003034:	d0cf      	beq.n	8002fd6 <LIS2MDL_Init+0x3a>
      return LIS2MDL_ERROR;
 8003036:	f04f 30ff 	mov.w	r0, #4294967295
 800303a:	e7d0      	b.n	8002fde <LIS2MDL_Init+0x42>

0800303c <LIS2MDL_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 800303c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003040:	b33b      	cbz	r3, 8003092 <LIS2MDL_MAG_Disable+0x56>
{
 8003042:	b510      	push	{r4, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003044:	6883      	ldr	r3, [r0, #8]
 8003046:	2b03      	cmp	r3, #3
{
 8003048:	b082      	sub	sp, #8
 800304a:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800304c:	d00a      	beq.n	8003064 <LIS2MDL_MAG_Disable+0x28>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800304e:	2102      	movs	r1, #2
 8003050:	3020      	adds	r0, #32
 8003052:	f000 f87d 	bl	8003150 <lis2mdl_operating_mode_set>
 8003056:	b9c8      	cbnz	r0, 800308c <LIS2MDL_MAG_Disable+0x50>
  pObj->mag_is_enabled = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return LIS2MDL_OK;
 800305e:	4618      	mov	r0, r3
}
 8003060:	b002      	add	sp, #8
 8003062:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003064:	2301      	movs	r3, #1
 8003066:	aa01      	add	r2, sp, #4
 8003068:	2160      	movs	r1, #96	; 0x60
 800306a:	f7ff fce1 	bl	8002a30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800306e:	b968      	cbnz	r0, 800308c <LIS2MDL_MAG_Disable+0x50>
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003070:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f362 0301 	bfi	r3, r2, #0, #2
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800307a:	2160      	movs	r1, #96	; 0x60
 800307c:	aa01      	add	r2, sp, #4
 800307e:	4620      	mov	r0, r4
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003080:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003084:	f7ff fe52 	bl	8002d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData.constprop.0>
 8003088:	2800      	cmp	r0, #0
 800308a:	d0e5      	beq.n	8003058 <LIS2MDL_MAG_Disable+0x1c>
      return LIS2MDL_ERROR;
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	e7e6      	b.n	8003060 <LIS2MDL_MAG_Disable+0x24>
    return LIS2MDL_OK;
 8003092:	4618      	mov	r0, r3
}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <LIS2MDL_RegisterBusIO>:
  if (pObj == NULL)
 8003098:	2800      	cmp	r0, #0
 800309a:	d041      	beq.n	8003120 <LIS2MDL_RegisterBusIO+0x88>
{
 800309c:	b510      	push	{r4, lr}
 800309e:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 80030a0:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80030a4:	688a      	ldr	r2, [r1, #8]
 80030a6:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80030a8:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 80030ac:	7b0a      	ldrb	r2, [r1, #12]
 80030ae:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80030b0:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 80030b4:	e9c4 0204 	strd	r0, r2, [r4, #16]
    pObj->Ctx.mdelay    = pIO->Delay;
 80030b8:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80030bc:	491a      	ldr	r1, [pc, #104]	; (8003128 <LIS2MDL_RegisterBusIO+0x90>)
 80030be:	6261      	str	r1, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80030c0:	491a      	ldr	r1, [pc, #104]	; (800312c <LIS2MDL_RegisterBusIO+0x94>)
    pObj->IO.GetTick   = pIO->GetTick;
 80030c2:	61a0      	str	r0, [r4, #24]
    pObj->Ctx.handle    = pObj;
 80030c4:	e9c4 240a 	strd	r2, r4, [r4, #40]	; 0x28
{
 80030c8:	b082      	sub	sp, #8
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80030ca:	6221      	str	r1, [r4, #32]
    if (pObj->IO.Init == NULL)
 80030cc:	b32b      	cbz	r3, 800311a <LIS2MDL_RegisterBusIO+0x82>
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80030ce:	4798      	blx	r3
 80030d0:	bb18      	cbnz	r0, 800311a <LIS2MDL_RegisterBusIO+0x82>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80030d2:	68a3      	ldr	r3, [r4, #8]
 80030d4:	b17b      	cbz	r3, 80030f6 <LIS2MDL_RegisterBusIO+0x5e>
        if (pObj->is_initialized == 0U)
 80030d6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80030da:	b962      	cbnz	r2, 80030f6 <LIS2MDL_RegisterBusIO+0x5e>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d00c      	beq.n	80030fa <LIS2MDL_RegisterBusIO+0x62>
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d008      	beq.n	80030f6 <LIS2MDL_RegisterBusIO+0x5e>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80030e4:	2101      	movs	r1, #1
 80030e6:	f104 0020 	add.w	r0, r4, #32
 80030ea:	f000 f8df 	bl	80032ac <lis2mdl_i2c_interface_set>
 80030ee:	3800      	subs	r0, #0
 80030f0:	bf18      	it	ne
 80030f2:	2001      	movne	r0, #1
 80030f4:	4240      	negs	r0, r0
}
 80030f6:	b002      	add	sp, #8
 80030f8:	bd10      	pop	{r4, pc}
            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80030fa:	f04f 0c34 	mov.w	ip, #52	; 0x34
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80030fe:	f10d 0207 	add.w	r2, sp, #7
 8003102:	2162      	movs	r1, #98	; 0x62
 8003104:	f104 0020 	add.w	r0, r4, #32
 8003108:	f88d c007 	strb.w	ip, [sp, #7]
 800310c:	f000 f818 	bl	8003140 <lis2mdl_write_reg>
              return LIS2MDL_ERROR;
 8003110:	2800      	cmp	r0, #0
 8003112:	bf18      	it	ne
 8003114:	f04f 30ff 	movne.w	r0, #4294967295
 8003118:	e7ed      	b.n	80030f6 <LIS2MDL_RegisterBusIO+0x5e>
    ret = LIS2MDL_ERROR;
 800311a:	f04f 30ff 	mov.w	r0, #4294967295
 800311e:	e7ea      	b.n	80030f6 <LIS2MDL_RegisterBusIO+0x5e>
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	08002ca9 	.word	0x08002ca9
 800312c:	08002cd5 	.word	0x08002cd5

08003130 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003130:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003132:	6844      	ldr	r4, [r0, #4]
 8003134:	68c0      	ldr	r0, [r0, #12]
 8003136:	46a4      	mov	ip, r4

  return ret;
}
 8003138:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800313c:	4760      	bx	ip
 800313e:	bf00      	nop

08003140 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003140:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003142:	6804      	ldr	r4, [r0, #0]
 8003144:	68c0      	ldr	r0, [r0, #12]
 8003146:	46a4      	mov	ip, r4

  return ret;
}
 8003148:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800314c:	4760      	bx	ip
 800314e:	bf00      	nop

08003150 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	4604      	mov	r4, r0
 8003154:	b082      	sub	sp, #8
 8003156:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003158:	68c0      	ldr	r0, [r0, #12]
 800315a:	6866      	ldr	r6, [r4, #4]
 800315c:	2301      	movs	r3, #1
 800315e:	aa01      	add	r2, sp, #4
 8003160:	2160      	movs	r1, #96	; 0x60
 8003162:	47b0      	blx	r6
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);

  if (ret == 0)
 8003164:	b958      	cbnz	r0, 800317e <lis2mdl_operating_mode_set+0x2e>
  {
    reg.md = (uint8_t)val;
 8003166:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800316a:	6826      	ldr	r6, [r4, #0]
 800316c:	68e0      	ldr	r0, [r4, #12]
    reg.md = (uint8_t)val;
 800316e:	f365 0301 	bfi	r3, r5, #0, #2
 8003172:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003176:	aa01      	add	r2, sp, #4
 8003178:	2301      	movs	r3, #1
 800317a:	2160      	movs	r1, #96	; 0x60
 800317c:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800317e:	b002      	add	sp, #8
 8003180:	bd70      	pop	{r4, r5, r6, pc}
 8003182:	bf00      	nop

08003184 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4604      	mov	r4, r0
 8003188:	b082      	sub	sp, #8
 800318a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800318c:	68c0      	ldr	r0, [r0, #12]
 800318e:	6866      	ldr	r6, [r4, #4]
 8003190:	2301      	movs	r3, #1
 8003192:	aa01      	add	r2, sp, #4
 8003194:	2160      	movs	r1, #96	; 0x60
 8003196:	47b0      	blx	r6
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);

  if (ret == 0)
 8003198:	b958      	cbnz	r0, 80031b2 <lis2mdl_data_rate_set+0x2e>
  {
    reg.odr = (uint8_t)val;
 800319a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800319e:	6826      	ldr	r6, [r4, #0]
 80031a0:	68e0      	ldr	r0, [r4, #12]
    reg.odr = (uint8_t)val;
 80031a2:	f365 0383 	bfi	r3, r5, #2, #2
 80031a6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031aa:	aa01      	add	r2, sp, #4
 80031ac:	2301      	movs	r3, #1
 80031ae:	2160      	movs	r1, #96	; 0x60
 80031b0:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80031b2:	b002      	add	sp, #8
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	bf00      	nop

080031b8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80031b8:	b530      	push	{r4, r5, lr}
 80031ba:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031bc:	6845      	ldr	r5, [r0, #4]
 80031be:	68c0      	ldr	r0, [r0, #12]
 80031c0:	2301      	movs	r3, #1
 80031c2:	aa01      	add	r2, sp, #4
{
 80031c4:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031c6:	2160      	movs	r1, #96	; 0x60
 80031c8:	47a8      	blx	r5
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);

  switch (reg.odr)
 80031ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031ce:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80031d2:	2a02      	cmp	r2, #2
 80031d4:	4613      	mov	r3, r2
 80031d6:	d007      	beq.n	80031e8 <lis2mdl_data_rate_get+0x30>
 80031d8:	2a03      	cmp	r2, #3
 80031da:	d005      	beq.n	80031e8 <lis2mdl_data_rate_get+0x30>
 80031dc:	2a01      	cmp	r2, #1
 80031de:	d003      	beq.n	80031e8 <lis2mdl_data_rate_get+0x30>
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80031e0:	2300      	movs	r3, #0
 80031e2:	7023      	strb	r3, [r4, #0]
      *val = LIS2MDL_ODR_10Hz;
      break;
  }

  return ret;
}
 80031e4:	b003      	add	sp, #12
 80031e6:	bd30      	pop	{r4, r5, pc}
      *val = LIS2MDL_ODR_100Hz;
 80031e8:	7023      	strb	r3, [r4, #0]
}
 80031ea:	b003      	add	sp, #12
 80031ec:	bd30      	pop	{r4, r5, pc}
 80031ee:	bf00      	nop

080031f0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	4604      	mov	r4, r0
 80031f4:	b082      	sub	sp, #8
 80031f6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031f8:	68c0      	ldr	r0, [r0, #12]
 80031fa:	6866      	ldr	r6, [r4, #4]
 80031fc:	2301      	movs	r3, #1
 80031fe:	aa01      	add	r2, sp, #4
 8003200:	2162      	movs	r1, #98	; 0x62
 8003202:	47b0      	blx	r6
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);

  if (ret == 0)
 8003204:	b958      	cbnz	r0, 800321e <lis2mdl_block_data_update_set+0x2e>
  {
    reg.bdu = val;
 8003206:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800320a:	6826      	ldr	r6, [r4, #0]
 800320c:	68e0      	ldr	r0, [r4, #12]
    reg.bdu = val;
 800320e:	f365 1304 	bfi	r3, r5, #4, #1
 8003212:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003216:	aa01      	add	r2, sp, #4
 8003218:	2301      	movs	r3, #1
 800321a:	2162      	movs	r1, #98	; 0x62
 800321c:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800321e:	b002      	add	sp, #8
 8003220:	bd70      	pop	{r4, r5, r6, pc}
 8003222:	bf00      	nop

08003224 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003224:	b530      	push	{r4, r5, lr}
 8003226:	b083      	sub	sp, #12
 8003228:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800322a:	6845      	ldr	r5, [r0, #4]
 800322c:	68c0      	ldr	r0, [r0, #12]
 800322e:	466a      	mov	r2, sp
 8003230:	2306      	movs	r3, #6
 8003232:	2168      	movs	r1, #104	; 0x68
 8003234:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003236:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800323a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800323e:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003242:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003246:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800324a:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800324c:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003250:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003254:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003258:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800325c:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800325e:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003260:	b003      	add	sp, #12
 8003262:	bd30      	pop	{r4, r5, pc}

08003264 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003264:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003266:	6844      	ldr	r4, [r0, #4]
 8003268:	68c0      	ldr	r0, [r0, #12]
{
 800326a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800326c:	46a4      	mov	ip, r4
 800326e:	2301      	movs	r3, #1
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);

  return ret;
}
 8003270:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003274:	214f      	movs	r1, #79	; 0x4f
 8003276:	4760      	bx	ip

08003278 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	4604      	mov	r4, r0
 800327c:	b082      	sub	sp, #8
 800327e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003280:	68c0      	ldr	r0, [r0, #12]
 8003282:	6866      	ldr	r6, [r4, #4]
 8003284:	2301      	movs	r3, #1
 8003286:	aa01      	add	r2, sp, #4
 8003288:	2162      	movs	r1, #98	; 0x62
 800328a:	47b0      	blx	r6
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);

  if (ret == 0)
 800328c:	b958      	cbnz	r0, 80032a6 <lis2mdl_self_test_set+0x2e>
  {
    reg.self_test = val;
 800328e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003292:	6826      	ldr	r6, [r4, #0]
 8003294:	68e0      	ldr	r0, [r4, #12]
    reg.self_test = val;
 8003296:	f365 0341 	bfi	r3, r5, #1, #1
 800329a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800329e:	aa01      	add	r2, sp, #4
 80032a0:	2301      	movs	r3, #1
 80032a2:	2162      	movs	r1, #98	; 0x62
 80032a4:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80032a6:	b002      	add	sp, #8
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
 80032aa:	bf00      	nop

080032ac <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4604      	mov	r4, r0
 80032b0:	b082      	sub	sp, #8
 80032b2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032b4:	68c0      	ldr	r0, [r0, #12]
 80032b6:	6866      	ldr	r6, [r4, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	aa01      	add	r2, sp, #4
 80032bc:	2162      	movs	r1, #98	; 0x62
 80032be:	47b0      	blx	r6
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);

  if (ret == 0)
 80032c0:	b958      	cbnz	r0, 80032da <lis2mdl_i2c_interface_set+0x2e>
  {
    reg.i2c_dis = (uint8_t)val;
 80032c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032c6:	6826      	ldr	r6, [r4, #0]
 80032c8:	68e0      	ldr	r0, [r4, #12]
    reg.i2c_dis = (uint8_t)val;
 80032ca:	f365 1345 	bfi	r3, r5, #5, #1
 80032ce:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032d2:	aa01      	add	r2, sp, #4
 80032d4:	2301      	movs	r3, #1
 80032d6:	2162      	movs	r1, #98	; 0x62
 80032d8:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80032da:	b002      	add	sp, #8
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	bf00      	nop

080032e0 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80032e0:	b410      	push	{r4}

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 80032e2:	f240 1c01 	movw	ip, #257	; 0x101
 80032e6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6660.0f;
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <LSM6DSO_GetCapabilities+0x28>)
 80032ec:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxFS     = 0;
 80032ee:	2000      	movs	r0, #0
  Capabilities->GyroMaxFS    = 2000;
 80032f0:	e9c1 c400 	strd	ip, r4, [r1]
  Capabilities->AccMaxFS     = 16;
 80032f4:	2410      	movs	r4, #16
  Capabilities->AccMaxOdr    = 6660.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 80032f6:	2200      	movs	r2, #0
  Capabilities->MagMaxFS     = 0;
 80032f8:	e9c1 4002 	strd	r4, r0, [r1, #8]
  Capabilities->AccMaxOdr    = 6660.0f;
 80032fc:	614b      	str	r3, [r1, #20]
  return LSM6DSO_OK;
}
 80032fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxOdr    = 0.0f;
 8003302:	618a      	str	r2, [r1, #24]
}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	45d02000 	.word	0x45d02000

0800330c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800330c:	b410      	push	{r4}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800330e:	6944      	ldr	r4, [r0, #20]
 8003310:	7b00      	ldrb	r0, [r0, #12]
 8003312:	46a4      	mov	ip, r4
}
 8003314:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003318:	4760      	bx	ip
 800331a:	bf00      	nop

0800331c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800331c:	b410      	push	{r4}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800331e:	6904      	ldr	r4, [r0, #16]
 8003320:	7b00      	ldrb	r0, [r0, #12]
 8003322:	46a4      	mov	ip, r4
}
 8003324:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003328:	4760      	bx	ip
 800332a:	bf00      	nop

0800332c <LSM6DSO_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM6DSO_4g
 800332c:	2902      	cmp	r1, #2
{
 800332e:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 8003330:	dd06      	ble.n	8003340 <LSM6DSO_ACC_SetFullScale+0x14>
 8003332:	2904      	cmp	r1, #4
 8003334:	dd0d      	ble.n	8003352 <LSM6DSO_ACC_SetFullScale+0x26>
 8003336:	2909      	cmp	r1, #9
 8003338:	bfb4      	ite	lt
 800333a:	2103      	movlt	r1, #3
 800333c:	2101      	movge	r1, #1
 800333e:	e000      	b.n	8003342 <LSM6DSO_ACC_SetFullScale+0x16>
 8003340:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003342:	3020      	adds	r0, #32
 8003344:	f000 fda2 	bl	8003e8c <lsm6dso_xl_full_scale_set>
 8003348:	3800      	subs	r0, #0
 800334a:	bf18      	it	ne
 800334c:	2001      	movne	r0, #1
}
 800334e:	4240      	negs	r0, r0
 8003350:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 8003352:	2102      	movs	r1, #2
 8003354:	e7f5      	b.n	8003342 <LSM6DSO_ACC_SetFullScale+0x16>
 8003356:	bf00      	nop

08003358 <LSM6DSO_Init>:
{
 8003358:	b570      	push	{r4, r5, r6, lr}
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800335a:	f100 0420 	add.w	r4, r0, #32
{
 800335e:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	4620      	mov	r0, r4
 8003364:	f000 fef6 	bl	8004154 <lsm6dso_i3c_disable_set>
 8003368:	bb58      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800336a:	2101      	movs	r1, #1
 800336c:	4620      	mov	r0, r4
 800336e:	f000 fed7 	bl	8004120 <lsm6dso_auto_increment_set>
 8003372:	bb30      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003374:	2101      	movs	r1, #1
 8003376:	4620      	mov	r0, r4
 8003378:	f000 fe70 	bl	800405c <lsm6dso_block_data_update_set>
 800337c:	4601      	mov	r1, r0
 800337e:	bb00      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003380:	4620      	mov	r0, r4
 8003382:	f000 ff19 	bl	80041b8 <lsm6dso_fifo_mode_set>
 8003386:	4601      	mov	r1, r0
 8003388:	b9d8      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 800338a:	2604      	movs	r6, #4
 800338c:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003390:	4620      	mov	r0, r4
 8003392:	f000 ff73 	bl	800427c <lsm6dso_xl_data_rate_set>
 8003396:	4601      	mov	r1, r0
 8003398:	b998      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fd76 	bl	8003e8c <lsm6dso_xl_full_scale_set>
 80033a0:	4601      	mov	r1, r0
 80033a2:	b970      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80033a4:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80033a8:	4620      	mov	r0, r4
 80033aa:	f001 f807 	bl	80043bc <lsm6dso_gy_data_rate_set>
 80033ae:	b940      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80033b0:	2106      	movs	r1, #6
 80033b2:	4620      	mov	r0, r4
 80033b4:	f000 fdd8 	bl	8003f68 <lsm6dso_gy_full_scale_set>
 80033b8:	b918      	cbnz	r0, 80033c2 <LSM6DSO_Init+0x6a>
  pObj->is_initialized = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSO_ERROR;
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80033c6:	bd70      	pop	{r4, r5, r6, pc}

080033c8 <LSM6DSO_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80033c8:	297d      	cmp	r1, #125	; 0x7d
{
 80033ca:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80033cc:	dd0a      	ble.n	80033e4 <LSM6DSO_GYRO_SetFullScale+0x1c>
 80033ce:	29fa      	cmp	r1, #250	; 0xfa
 80033d0:	dd11      	ble.n	80033f6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80033d2:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 80033d6:	dd10      	ble.n	80033fa <LSM6DSO_GYRO_SetFullScale+0x32>
 80033d8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80033dc:	bfd4      	ite	le
 80033de:	2104      	movle	r1, #4
 80033e0:	2106      	movgt	r1, #6
 80033e2:	e000      	b.n	80033e6 <LSM6DSO_GYRO_SetFullScale+0x1e>
 80033e4:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80033e6:	3020      	adds	r0, #32
 80033e8:	f000 fdbe 	bl	8003f68 <lsm6dso_gy_full_scale_set>
 80033ec:	3800      	subs	r0, #0
 80033ee:	bf18      	it	ne
 80033f0:	2001      	movne	r0, #1
}
 80033f2:	4240      	negs	r0, r0
 80033f4:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80033f6:	2100      	movs	r1, #0
 80033f8:	e7f5      	b.n	80033e6 <LSM6DSO_GYRO_SetFullScale+0x1e>
 80033fa:	2102      	movs	r1, #2
 80033fc:	e7f3      	b.n	80033e6 <LSM6DSO_GYRO_SetFullScale+0x1e>
 80033fe:	bf00      	nop

08003400 <LSM6DSO_ReadID>:
{
 8003400:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003402:	3020      	adds	r0, #32
 8003404:	f000 fe84 	bl	8004110 <lsm6dso_device_id_get>
 8003408:	3800      	subs	r0, #0
 800340a:	bf18      	it	ne
 800340c:	2001      	movne	r0, #1
}
 800340e:	4240      	negs	r0, r0
 8003410:	bd08      	pop	{r3, pc}
 8003412:	bf00      	nop

08003414 <LSM6DSO_ACC_GetOutputDataRate>:
{
 8003414:	b510      	push	{r4, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800341a:	3020      	adds	r0, #32
 800341c:	f10d 0107 	add.w	r1, sp, #7
 8003420:	f000 fd68 	bl	8003ef4 <lsm6dso_xl_data_rate_get>
 8003424:	2800      	cmp	r0, #0
 8003426:	d130      	bne.n	800348a <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 8003428:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800342c:	2b0b      	cmp	r3, #11
 800342e:	d82c      	bhi.n	800348a <LSM6DSO_ACC_GetOutputDataRate+0x76>
 8003430:	e8df f003 	tbb	[pc, r3]
 8003434:	13100d0a 	.word	0x13100d0a
 8003438:	1f1c1916 	.word	0x1f1c1916
 800343c:	06282522 	.word	0x06282522
      *Odr = 1.6f;
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <LSM6DSO_ACC_GetOutputDataRate+0x7c>)
 8003442:	6023      	str	r3, [r4, #0]
}
 8003444:	b002      	add	sp, #8
 8003446:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8003448:	2300      	movs	r3, #0
 800344a:	6023      	str	r3, [r4, #0]
      break;
 800344c:	e7fa      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <LSM6DSO_ACC_GetOutputDataRate+0x80>)
 8003450:	6023      	str	r3, [r4, #0]
      break;
 8003452:	e7f7      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 8003456:	6023      	str	r3, [r4, #0]
      break;
 8003458:	e7f4      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 800345c:	6023      	str	r3, [r4, #0]
      break;
 800345e:	e7f1      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 8003462:	6023      	str	r3, [r4, #0]
      break;
 8003464:	e7ee      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 8003468:	6023      	str	r3, [r4, #0]
      break;
 800346a:	e7eb      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 800346e:	6023      	str	r3, [r4, #0]
      break;
 8003470:	e7e8      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 8003474:	6023      	str	r3, [r4, #0]
      break;
 8003476:	e7e5      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 800347a:	6023      	str	r3, [r4, #0]
      break;
 800347c:	e7e2      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 8003480:	6023      	str	r3, [r4, #0]
      break;
 8003482:	e7df      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 8003486:	6023      	str	r3, [r4, #0]
      break;
 8003488:	e7dc      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 800348a:	f04f 30ff 	mov.w	r0, #4294967295
 800348e:	e7d9      	b.n	8003444 <LSM6DSO_ACC_GetOutputDataRate+0x30>
 8003490:	3fcccccd 	.word	0x3fcccccd
 8003494:	41480000 	.word	0x41480000
 8003498:	41d00000 	.word	0x41d00000
 800349c:	42500000 	.word	0x42500000
 80034a0:	42d00000 	.word	0x42d00000
 80034a4:	43500000 	.word	0x43500000
 80034a8:	43d08000 	.word	0x43d08000
 80034ac:	44504000 	.word	0x44504000
 80034b0:	44d06000 	.word	0x44d06000
 80034b4:	45505000 	.word	0x45505000
 80034b8:	45d05800 	.word	0x45d05800

080034bc <LSM6DSO_ACC_GetSensitivity>:
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80034c2:	3020      	adds	r0, #32
 80034c4:	f10d 0107 	add.w	r1, sp, #7
 80034c8:	f000 fcfa 	bl	8003ec0 <lsm6dso_xl_full_scale_get>
 80034cc:	b9b8      	cbnz	r0, 80034fe <LSM6DSO_ACC_GetSensitivity+0x42>
  switch (full_scale)
 80034ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d813      	bhi.n	80034fe <LSM6DSO_ACC_GetSensitivity+0x42>
 80034d6:	e8df f003 	tbb	[pc, r3]
 80034da:	0a06      	.short	0x0a06
 80034dc:	020e      	.short	0x020e
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <LSM6DSO_ACC_GetSensitivity+0x48>)
 80034e0:	6023      	str	r3, [r4, #0]
}
 80034e2:	b002      	add	sp, #8
 80034e4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <LSM6DSO_ACC_GetSensitivity+0x4c>)
 80034e8:	6023      	str	r3, [r4, #0]
}
 80034ea:	b002      	add	sp, #8
 80034ec:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <LSM6DSO_ACC_GetSensitivity+0x50>)
 80034f0:	6023      	str	r3, [r4, #0]
}
 80034f2:	b002      	add	sp, #8
 80034f4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <LSM6DSO_ACC_GetSensitivity+0x54>)
 80034f8:	6023      	str	r3, [r4, #0]
}
 80034fa:	b002      	add	sp, #8
 80034fc:	bd10      	pop	{r4, pc}
  switch (full_scale)
 80034fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003502:	e7ee      	b.n	80034e2 <LSM6DSO_ACC_GetSensitivity+0x26>
 8003504:	3e79db23 	.word	0x3e79db23
 8003508:	3d79db23 	.word	0x3d79db23
 800350c:	3ef9db23 	.word	0x3ef9db23
 8003510:	3df9db23 	.word	0x3df9db23

08003514 <LSM6DSO_ACC_GetFullScale>:
{
 8003514:	b510      	push	{r4, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800351a:	3020      	adds	r0, #32
 800351c:	f10d 0107 	add.w	r1, sp, #7
 8003520:	f000 fcce 	bl	8003ec0 <lsm6dso_xl_full_scale_get>
 8003524:	b9b8      	cbnz	r0, 8003556 <LSM6DSO_ACC_GetFullScale+0x42>
  switch (fs_low_level)
 8003526:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d813      	bhi.n	8003556 <LSM6DSO_ACC_GetFullScale+0x42>
 800352e:	e8df f003 	tbb	[pc, r3]
 8003532:	0a06      	.short	0x0a06
 8003534:	020e      	.short	0x020e
      *FullScale =  8;
 8003536:	2308      	movs	r3, #8
 8003538:	6023      	str	r3, [r4, #0]
}
 800353a:	b002      	add	sp, #8
 800353c:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 800353e:	2302      	movs	r3, #2
 8003540:	6023      	str	r3, [r4, #0]
}
 8003542:	b002      	add	sp, #8
 8003544:	bd10      	pop	{r4, pc}
      *FullScale = 16;
 8003546:	2310      	movs	r3, #16
 8003548:	6023      	str	r3, [r4, #0]
}
 800354a:	b002      	add	sp, #8
 800354c:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 800354e:	2304      	movs	r3, #4
 8003550:	6023      	str	r3, [r4, #0]
}
 8003552:	b002      	add	sp, #8
 8003554:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 8003556:	f04f 30ff 	mov.w	r0, #4294967295
 800355a:	e7ee      	b.n	800353a <LSM6DSO_ACC_GetFullScale+0x26>

0800355c <LSM6DSO_ACC_GetAxesRaw>:
{
 800355c:	b510      	push	{r4, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003562:	3020      	adds	r0, #32
 8003564:	4669      	mov	r1, sp
 8003566:	f000 fdb3 	bl	80040d0 <lsm6dso_acceleration_raw_get>
 800356a:	b930      	cbnz	r0, 800357a <LSM6DSO_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 800356c:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 800356e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8003572:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003574:	80a3      	strh	r3, [r4, #4]
}
 8003576:	b002      	add	sp, #8
 8003578:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	e7fa      	b.n	8003576 <LSM6DSO_ACC_GetAxesRaw+0x1a>

08003580 <LSM6DSO_GYRO_GetOutputDataRate>:
{
 8003580:	b510      	push	{r4, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003586:	3020      	adds	r0, #32
 8003588:	f10d 0107 	add.w	r1, sp, #7
 800358c:	f000 fd2e 	bl	8003fec <lsm6dso_gy_data_rate_get>
 8003590:	2800      	cmp	r0, #0
 8003592:	d12d      	bne.n	80035f0 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8003594:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003598:	2b0a      	cmp	r3, #10
 800359a:	d829      	bhi.n	80035f0 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
 800359c:	e8df f003 	tbb	[pc, r3]
 80035a0:	13100d0a 	.word	0x13100d0a
 80035a4:	1f1c1916 	.word	0x1f1c1916
 80035a8:	2522      	.short	0x2522
 80035aa:	06          	.byte	0x06
 80035ab:	00          	.byte	0x00
      *Odr = 6667.0f;
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <LSM6DSO_GYRO_GetOutputDataRate+0x78>)
 80035ae:	6023      	str	r3, [r4, #0]
}
 80035b0:	b002      	add	sp, #8
 80035b2:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 80035b4:	2300      	movs	r3, #0
 80035b6:	6023      	str	r3, [r4, #0]
      break;
 80035b8:	e7fa      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 80035bc:	6023      	str	r3, [r4, #0]
      break;
 80035be:	e7f7      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 80035c2:	6023      	str	r3, [r4, #0]
      break;
 80035c4:	e7f4      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 80035c8:	6023      	str	r3, [r4, #0]
      break;
 80035ca:	e7f1      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 80035ce:	6023      	str	r3, [r4, #0]
      break;
 80035d0:	e7ee      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 80035d4:	6023      	str	r3, [r4, #0]
      break;
 80035d6:	e7eb      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 80035da:	6023      	str	r3, [r4, #0]
      break;
 80035dc:	e7e8      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 80035e0:	6023      	str	r3, [r4, #0]
      break;
 80035e2:	e7e5      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 80035e6:	6023      	str	r3, [r4, #0]
      break;
 80035e8:	e7e2      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 80035ec:	6023      	str	r3, [r4, #0]
      break;
 80035ee:	e7df      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	e7dc      	b.n	80035b0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 80035f6:	bf00      	nop
 80035f8:	45d05800 	.word	0x45d05800
 80035fc:	41480000 	.word	0x41480000
 8003600:	41d00000 	.word	0x41d00000
 8003604:	42500000 	.word	0x42500000
 8003608:	42d00000 	.word	0x42d00000
 800360c:	43500000 	.word	0x43500000
 8003610:	43d08000 	.word	0x43d08000
 8003614:	44504000 	.word	0x44504000
 8003618:	44d06000 	.word	0x44d06000
 800361c:	45505000 	.word	0x45505000

08003620 <LSM6DSO_GYRO_GetSensitivity>:
{
 8003620:	b510      	push	{r4, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003626:	3020      	adds	r0, #32
 8003628:	f10d 0107 	add.w	r1, sp, #7
 800362c:	f000 fcb6 	bl	8003f9c <lsm6dso_gy_full_scale_get>
 8003630:	b948      	cbnz	r0, 8003646 <LSM6DSO_GYRO_GetSensitivity+0x26>
  switch (full_scale)
 8003632:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003636:	2b06      	cmp	r3, #6
 8003638:	d805      	bhi.n	8003646 <LSM6DSO_GYRO_GetSensitivity+0x26>
 800363a:	e8df f003 	tbb	[pc, r3]
 800363e:	0c08      	.short	0x0c08
 8003640:	04140410 	.word	0x04140410
 8003644:	18          	.byte	0x18
 8003645:	00          	.byte	0x00
 8003646:	f04f 30ff 	mov.w	r0, #4294967295
}
 800364a:	b002      	add	sp, #8
 800364c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <LSM6DSO_GYRO_GetSensitivity+0x58>)
 8003650:	6023      	str	r3, [r4, #0]
}
 8003652:	b002      	add	sp, #8
 8003654:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 8003658:	6023      	str	r3, [r4, #0]
}
 800365a:	b002      	add	sp, #8
 800365c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <LSM6DSO_GYRO_GetSensitivity+0x60>)
 8003660:	6023      	str	r3, [r4, #0]
}
 8003662:	b002      	add	sp, #8
 8003664:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <LSM6DSO_GYRO_GetSensitivity+0x64>)
 8003668:	6023      	str	r3, [r4, #0]
}
 800366a:	b002      	add	sp, #8
 800366c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <LSM6DSO_GYRO_GetSensitivity+0x68>)
 8003670:	6023      	str	r3, [r4, #0]
}
 8003672:	b002      	add	sp, #8
 8003674:	bd10      	pop	{r4, pc}
 8003676:	bf00      	nop
 8003678:	410c0000 	.word	0x410c0000
 800367c:	408c0000 	.word	0x408c0000
 8003680:	418c0000 	.word	0x418c0000
 8003684:	420c0000 	.word	0x420c0000
 8003688:	428c0000 	.word	0x428c0000

0800368c <LSM6DSO_GYRO_GetFullScale>:
{
 800368c:	b510      	push	{r4, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003692:	3020      	adds	r0, #32
 8003694:	f10d 0107 	add.w	r1, sp, #7
 8003698:	f000 fc80 	bl	8003f9c <lsm6dso_gy_full_scale_get>
 800369c:	b948      	cbnz	r0, 80036b2 <LSM6DSO_GYRO_GetFullScale+0x26>
  switch (fs_low_level)
 800369e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d805      	bhi.n	80036b2 <LSM6DSO_GYRO_GetFullScale+0x26>
 80036a6:	e8df f003 	tbb	[pc, r3]
 80036aa:	0c08      	.short	0x0c08
 80036ac:	04150410 	.word	0x04150410
 80036b0:	1a          	.byte	0x1a
 80036b1:	00          	.byte	0x00
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80036b6:	b002      	add	sp, #8
 80036b8:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 80036ba:	23fa      	movs	r3, #250	; 0xfa
 80036bc:	6023      	str	r3, [r4, #0]
}
 80036be:	b002      	add	sp, #8
 80036c0:	bd10      	pop	{r4, pc}
      *FullScale =  125;
 80036c2:	237d      	movs	r3, #125	; 0x7d
 80036c4:	6023      	str	r3, [r4, #0]
}
 80036c6:	b002      	add	sp, #8
 80036c8:	bd10      	pop	{r4, pc}
      *FullScale =  500;
 80036ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036ce:	6023      	str	r3, [r4, #0]
}
 80036d0:	b002      	add	sp, #8
 80036d2:	bd10      	pop	{r4, pc}
      *FullScale = 1000;
 80036d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d8:	6023      	str	r3, [r4, #0]
}
 80036da:	b002      	add	sp, #8
 80036dc:	bd10      	pop	{r4, pc}
      *FullScale = 2000;
 80036de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80036e2:	6023      	str	r3, [r4, #0]
}
 80036e4:	b002      	add	sp, #8
 80036e6:	bd10      	pop	{r4, pc}

080036e8 <LSM6DSO_GYRO_GetAxesRaw>:
{
 80036e8:	b510      	push	{r4, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80036ee:	3020      	adds	r0, #32
 80036f0:	4669      	mov	r1, sp
 80036f2:	f000 fccd 	bl	8004090 <lsm6dso_angular_rate_raw_get>
 80036f6:	b930      	cbnz	r0, 8003706 <LSM6DSO_GYRO_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 80036f8:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 80036fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 80036fe:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003700:	80a3      	strh	r3, [r4, #4]
}
 8003702:	b002      	add	sp, #8
 8003704:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8003706:	f04f 30ff 	mov.w	r0, #4294967295
 800370a:	e7fa      	b.n	8003702 <LSM6DSO_GYRO_GetAxesRaw+0x1a>

0800370c <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 800370c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003710:	2b01      	cmp	r3, #1
 8003712:	d00b      	beq.n	800372c <LSM6DSO_ACC_Enable+0x20>
{
 8003714:	b510      	push	{r4, lr}
 8003716:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003718:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 800371c:	3020      	adds	r0, #32
 800371e:	f000 fdad 	bl	800427c <lsm6dso_xl_data_rate_set>
 8003722:	b928      	cbnz	r0, 8003730 <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8003724:	2301      	movs	r3, #1
 8003726:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800372a:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 800372c:	2000      	movs	r0, #0
}
 800372e:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003734:	bd10      	pop	{r4, pc}
 8003736:	bf00      	nop

08003738 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8003738:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800373c:	2b01      	cmp	r3, #1
 800373e:	d00b      	beq.n	8003758 <LSM6DSO_GYRO_Enable+0x20>
{
 8003740:	b510      	push	{r4, lr}
 8003742:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003744:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8003748:	3020      	adds	r0, #32
 800374a:	f000 fe37 	bl	80043bc <lsm6dso_gy_data_rate_set>
 800374e:	b928      	cbnz	r0, 800375c <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8003756:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8003758:	2000      	movs	r0, #0
}
 800375a:	4770      	bx	lr
    return LSM6DSO_ERROR;
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop

08003764 <LSM6DSO_ACC_Disable>:
{
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8003768:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
 800376c:	b900      	cbnz	r0, 8003770 <LSM6DSO_ACC_Disable+0xc>
}
 800376e:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003770:	f104 0520 	add.w	r5, r4, #32
 8003774:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8003778:	4628      	mov	r0, r5
 800377a:	f000 fbbb 	bl	8003ef4 <lsm6dso_xl_data_rate_get>
 800377e:	4601      	mov	r1, r0
 8003780:	b930      	cbnz	r0, 8003790 <LSM6DSO_ACC_Disable+0x2c>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003782:	4628      	mov	r0, r5
 8003784:	f000 fd7a 	bl	800427c <lsm6dso_xl_data_rate_set>
 8003788:	b910      	cbnz	r0, 8003790 <LSM6DSO_ACC_Disable+0x2c>
  pObj->acc_is_enabled = 0;
 800378a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 800378e:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003794:	bd38      	pop	{r3, r4, r5, pc}
 8003796:	bf00      	nop

08003798 <LSM6DSO_GYRO_Disable>:
{
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 800379c:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 80037a0:	b900      	cbnz	r0, 80037a4 <LSM6DSO_GYRO_Disable+0xc>
}
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80037a4:	f104 0520 	add.w	r5, r4, #32
 80037a8:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 fc1d 	bl	8003fec <lsm6dso_gy_data_rate_get>
 80037b2:	4601      	mov	r1, r0
 80037b4:	b930      	cbnz	r0, 80037c4 <LSM6DSO_GYRO_Disable+0x2c>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 fe00 	bl	80043bc <lsm6dso_gy_data_rate_set>
 80037bc:	b910      	cbnz	r0, 80037c4 <LSM6DSO_GYRO_Disable+0x2c>
  pObj->gyro_is_enabled = 0;
 80037be:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
 80037ca:	bf00      	nop

080037cc <LSM6DSO_DeInit>:
{
 80037cc:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 80037ce:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80037d2:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 80037d4:	b943      	cbnz	r3, 80037e8 <LSM6DSO_DeInit+0x1c>
  if (pObj->gyro_is_enabled == 0U)
 80037d6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80037da:	b9c3      	cbnz	r3, 800380e <LSM6DSO_DeInit+0x42>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80037dc:	2000      	movs	r0, #0
 80037de:	f8a4 0033 	strh.w	r0, [r4, #51]	; 0x33
  pObj->is_initialized = 0;
 80037e2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80037e8:	f100 0520 	add.w	r5, r0, #32
 80037ec:	f100 0133 	add.w	r1, r0, #51	; 0x33
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 fb7f 	bl	8003ef4 <lsm6dso_xl_data_rate_get>
 80037f6:	4601      	mov	r1, r0
 80037f8:	b9c8      	cbnz	r0, 800382e <LSM6DSO_DeInit+0x62>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 fd3e 	bl	800427c <lsm6dso_xl_data_rate_set>
 8003800:	b9a8      	cbnz	r0, 800382e <LSM6DSO_DeInit+0x62>
  if (pObj->gyro_is_enabled == 0U)
 8003802:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  pObj->acc_is_enabled = 0;
 8003806:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  if (pObj->gyro_is_enabled == 0U)
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0e6      	beq.n	80037dc <LSM6DSO_DeInit+0x10>
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800380e:	f104 0520 	add.w	r5, r4, #32
 8003812:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003816:	4628      	mov	r0, r5
 8003818:	f000 fbe8 	bl	8003fec <lsm6dso_gy_data_rate_get>
 800381c:	4601      	mov	r1, r0
 800381e:	b930      	cbnz	r0, 800382e <LSM6DSO_DeInit+0x62>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003820:	4628      	mov	r0, r5
 8003822:	f000 fdcb 	bl	80043bc <lsm6dso_gy_data_rate_set>
 8003826:	b910      	cbnz	r0, 800382e <LSM6DSO_DeInit+0x62>
  pObj->gyro_is_enabled = 0;
 8003828:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return LSM6DSO_OK;
 800382c:	e7d6      	b.n	80037dc <LSM6DSO_DeInit+0x10>
    return LSM6DSO_ERROR;
 800382e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003832:	bd38      	pop	{r3, r4, r5, pc}

08003834 <LSM6DSO_ACC_GetAxes>:
{
 8003834:	b530      	push	{r4, r5, lr}
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003836:	f100 0520 	add.w	r5, r0, #32
{
 800383a:	b085      	sub	sp, #20
 800383c:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800383e:	4628      	mov	r0, r5
 8003840:	a902      	add	r1, sp, #8
 8003842:	f000 fc45 	bl	80040d0 <lsm6dso_acceleration_raw_get>
 8003846:	2800      	cmp	r0, #0
 8003848:	d13e      	bne.n	80038c8 <LSM6DSO_ACC_GetAxes+0x94>
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800384a:	f10d 0107 	add.w	r1, sp, #7
 800384e:	4628      	mov	r0, r5
 8003850:	f000 fb36 	bl	8003ec0 <lsm6dso_xl_full_scale_get>
 8003854:	bbc0      	cbnz	r0, 80038c8 <LSM6DSO_ACC_GetAxes+0x94>
  switch (full_scale)
 8003856:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d834      	bhi.n	80038c8 <LSM6DSO_ACC_GetAxes+0x94>
 800385e:	e8df f003 	tbb	[pc, r3]
 8003862:	2d2a      	.short	0x2d2a
 8003864:	0230      	.short	0x0230
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003866:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80038d0 <LSM6DSO_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800386a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800386e:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003872:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003876:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800387a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800387e:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003882:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800388a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800388e:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003892:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003896:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800389a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800389e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80038a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80038a6:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80038aa:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80038ae:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80038b2:	b005      	add	sp, #20
 80038b4:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80038b6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80038d4 <LSM6DSO_ACC_GetAxes+0xa0>
 80038ba:	e7d6      	b.n	800386a <LSM6DSO_ACC_GetAxes+0x36>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80038bc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80038d8 <LSM6DSO_ACC_GetAxes+0xa4>
 80038c0:	e7d3      	b.n	800386a <LSM6DSO_ACC_GetAxes+0x36>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80038c2:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80038dc <LSM6DSO_ACC_GetAxes+0xa8>
 80038c6:	e7d0      	b.n	800386a <LSM6DSO_ACC_GetAxes+0x36>
    return LSM6DSO_ERROR;
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	e7f1      	b.n	80038b2 <LSM6DSO_ACC_GetAxes+0x7e>
 80038ce:	bf00      	nop
 80038d0:	3e79db23 	.word	0x3e79db23
 80038d4:	3d79db23 	.word	0x3d79db23
 80038d8:	3ef9db23 	.word	0x3ef9db23
 80038dc:	3df9db23 	.word	0x3df9db23

080038e0 <LSM6DSO_GYRO_GetAxes>:
{
 80038e0:	b530      	push	{r4, r5, lr}
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80038e2:	f100 0520 	add.w	r5, r0, #32
{
 80038e6:	b085      	sub	sp, #20
 80038e8:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80038ea:	4628      	mov	r0, r5
 80038ec:	a902      	add	r1, sp, #8
 80038ee:	f000 fbcf 	bl	8004090 <lsm6dso_angular_rate_raw_get>
 80038f2:	b978      	cbnz	r0, 8003914 <LSM6DSO_GYRO_GetAxes+0x34>
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80038f4:	f10d 0107 	add.w	r1, sp, #7
 80038f8:	4628      	mov	r0, r5
 80038fa:	f000 fb4f 	bl	8003f9c <lsm6dso_gy_full_scale_get>
 80038fe:	b948      	cbnz	r0, 8003914 <LSM6DSO_GYRO_GetAxes+0x34>
  switch (full_scale)
 8003900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d805      	bhi.n	8003914 <LSM6DSO_GYRO_GetAxes+0x34>
 8003908:	e8df f003 	tbb	[pc, r3]
 800390c:	04333008 	.word	0x04333008
 8003910:	0436      	.short	0x0436
 8003912:	39          	.byte	0x39
 8003913:	00          	.byte	0x00
    return LSM6DSO_ERROR;
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003918:	b005      	add	sp, #20
 800391a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 800391c:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8003984 <LSM6DSO_GYRO_GetAxes+0xa4>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003920:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003924:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003928:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800392c:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003930:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003934:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003938:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800393c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003944:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003948:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800394c:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003950:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003954:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800395c:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003960:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003964:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003968:	b005      	add	sp, #20
 800396a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800396c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8003988 <LSM6DSO_GYRO_GetAxes+0xa8>
 8003970:	e7d6      	b.n	8003920 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003972:	ed9f 6a06 	vldr	s12, [pc, #24]	; 800398c <LSM6DSO_GYRO_GetAxes+0xac>
 8003976:	e7d3      	b.n	8003920 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003978:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8003990 <LSM6DSO_GYRO_GetAxes+0xb0>
 800397c:	e7d0      	b.n	8003920 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800397e:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8003994 <LSM6DSO_GYRO_GetAxes+0xb4>
 8003982:	e7cd      	b.n	8003920 <LSM6DSO_GYRO_GetAxes+0x40>
 8003984:	410c0000 	.word	0x410c0000
 8003988:	408c0000 	.word	0x408c0000
 800398c:	418c0000 	.word	0x418c0000
 8003990:	420c0000 	.word	0x420c0000
 8003994:	428c0000 	.word	0x428c0000

08003998 <LSM6DSO_GYRO_SetOutputDataRate>:
{
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	ed2d 8b02 	vpush	{d8}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800399e:	f100 0620 	add.w	r6, r0, #32
{
 80039a2:	b082      	sub	sp, #8
 80039a4:	4605      	mov	r5, r0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80039a6:	2301      	movs	r3, #1
 80039a8:	aa01      	add	r2, sp, #4
 80039aa:	2116      	movs	r1, #22
 80039ac:	4630      	mov	r0, r6
{
 80039ae:	eeb0 8a40 	vmov.f32	s16, s0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80039b2:	f000 fa5b 	bl	8003e6c <lsm6dso_read_reg>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f040 80b1 	bne.w	8003b1e <LSM6DSO_GYRO_SetOutputDataRate+0x186>
      if (val1.g_hm_mode != 0U)
 80039bc:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	4604      	mov	r4, r0
 80039c4:	f2c0 809c 	blt.w	8003b00 <LSM6DSO_GYRO_SetOutputDataRate+0x168>
  if (pObj->gyro_is_enabled == 1U)
 80039c8:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80039cc:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 80039d0:	2901      	cmp	r1, #1
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80039d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (pObj->gyro_is_enabled == 1U)
 80039d6:	d04a      	beq.n	8003a6e <LSM6DSO_GYRO_SetOutputDataRate+0xd6>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80039d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039dc:	dc07      	bgt.n	80039ee <LSM6DSO_GYRO_SetOutputDataRate+0x56>
 80039de:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80039e0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80039e4:	4620      	mov	r0, r4
 80039e6:	b002      	add	sp, #8
 80039e8:	ecbd 8b02 	vpop	{d8}
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80039ee:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80039f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80039f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fa:	f340 8093 	ble.w	8003b24 <LSM6DSO_GYRO_SetOutputDataRate+0x18c>
 80039fe:	eddf 7a57 	vldr	s15, [pc, #348]	; 8003b5c <LSM6DSO_GYRO_SetOutputDataRate+0x1c4>
 8003a02:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	f340 808f 	ble.w	8003b2c <LSM6DSO_GYRO_SetOutputDataRate+0x194>
 8003a0e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003b60 <LSM6DSO_GYRO_SetOutputDataRate+0x1c8>
 8003a12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1a:	f340 808b 	ble.w	8003b34 <LSM6DSO_GYRO_SetOutputDataRate+0x19c>
 8003a1e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8003b64 <LSM6DSO_GYRO_SetOutputDataRate+0x1cc>
 8003a22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	f340 8087 	ble.w	8003b3c <LSM6DSO_GYRO_SetOutputDataRate+0x1a4>
 8003a2e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8003b68 <LSM6DSO_GYRO_SetOutputDataRate+0x1d0>
 8003a32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3a:	f340 8083 	ble.w	8003b44 <LSM6DSO_GYRO_SetOutputDataRate+0x1ac>
 8003a3e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8003b6c <LSM6DSO_GYRO_SetOutputDataRate+0x1d4>
 8003a42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4a:	dd7f      	ble.n	8003b4c <LSM6DSO_GYRO_SetOutputDataRate+0x1b4>
 8003a4c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8003b70 <LSM6DSO_GYRO_SetOutputDataRate+0x1d8>
 8003a50:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	dd7c      	ble.n	8003b54 <LSM6DSO_GYRO_SetOutputDataRate+0x1bc>
 8003a5a:	eddf 7a46 	vldr	s15, [pc, #280]	; 8003b74 <LSM6DSO_GYRO_SetOutputDataRate+0x1dc>
 8003a5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	bf94      	ite	ls
 8003a68:	2309      	movls	r3, #9
 8003a6a:	230a      	movhi	r3, #10
 8003a6c:	e7b8      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a72:	dd39      	ble.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
 8003a74:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003a78:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	dd52      	ble.n	8003b28 <LSM6DSO_GYRO_SetOutputDataRate+0x190>
 8003a82:	eddf 7a36 	vldr	s15, [pc, #216]	; 8003b5c <LSM6DSO_GYRO_SetOutputDataRate+0x1c4>
 8003a86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	dd4f      	ble.n	8003b30 <LSM6DSO_GYRO_SetOutputDataRate+0x198>
 8003a90:	eddf 7a33 	vldr	s15, [pc, #204]	; 8003b60 <LSM6DSO_GYRO_SetOutputDataRate+0x1c8>
 8003a94:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	dd4c      	ble.n	8003b38 <LSM6DSO_GYRO_SetOutputDataRate+0x1a0>
 8003a9e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003b64 <LSM6DSO_GYRO_SetOutputDataRate+0x1cc>
 8003aa2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	dd49      	ble.n	8003b40 <LSM6DSO_GYRO_SetOutputDataRate+0x1a8>
 8003aac:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003b68 <LSM6DSO_GYRO_SetOutputDataRate+0x1d0>
 8003ab0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab8:	dd46      	ble.n	8003b48 <LSM6DSO_GYRO_SetOutputDataRate+0x1b0>
 8003aba:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8003b6c <LSM6DSO_GYRO_SetOutputDataRate+0x1d4>
 8003abe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	dd43      	ble.n	8003b50 <LSM6DSO_GYRO_SetOutputDataRate+0x1b8>
 8003ac8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003b70 <LSM6DSO_GYRO_SetOutputDataRate+0x1d8>
 8003acc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd40      	ble.n	8003b58 <LSM6DSO_GYRO_SetOutputDataRate+0x1c0>
 8003ad6:	eddf 7a27 	vldr	s15, [pc, #156]	; 8003b74 <LSM6DSO_GYRO_SetOutputDataRate+0x1dc>
 8003ada:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae2:	bf94      	ite	ls
 8003ae4:	2109      	movls	r1, #9
 8003ae6:	210a      	movhi	r1, #10
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 fc67 	bl	80043bc <lsm6dso_gy_data_rate_set>
 8003aee:	3800      	subs	r0, #0
 8003af0:	bf18      	it	ne
 8003af2:	2001      	movne	r0, #1
 8003af4:	4244      	negs	r4, r0
}
 8003af6:	4620      	mov	r0, r4
 8003af8:	b002      	add	sp, #8
 8003afa:	ecbd 8b02 	vpop	{d8}
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
        val1.g_hm_mode = 0U;
 8003b00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b04:	f360 13c7 	bfi	r3, r0, #7, #1
 8003b08:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b0c:	aa01      	add	r2, sp, #4
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2116      	movs	r1, #22
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 f9b2 	bl	8003e7c <lsm6dso_write_reg>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	f43f af55 	beq.w	80039c8 <LSM6DSO_GYRO_SetOutputDataRate+0x30>
        return LSM6DSO_ERROR;
 8003b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b22:	e75f      	b.n	80039e4 <LSM6DSO_GYRO_SetOutputDataRate+0x4c>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b24:	2302      	movs	r3, #2
 8003b26:	e75b      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b28:	2102      	movs	r1, #2
 8003b2a:	e7dd      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e757      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b30:	2103      	movs	r1, #3
 8003b32:	e7d9      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b34:	2304      	movs	r3, #4
 8003b36:	e753      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b38:	2104      	movs	r1, #4
 8003b3a:	e7d5      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b3c:	2305      	movs	r3, #5
 8003b3e:	e74f      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b40:	2105      	movs	r1, #5
 8003b42:	e7d1      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b44:	2306      	movs	r3, #6
 8003b46:	e74b      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b48:	2106      	movs	r1, #6
 8003b4a:	e7cd      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b4c:	2307      	movs	r3, #7
 8003b4e:	e747      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b50:	2107      	movs	r1, #7
 8003b52:	e7c9      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b54:	2308      	movs	r3, #8
 8003b56:	e743      	b.n	80039e0 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003b58:	2108      	movs	r1, #8
 8003b5a:	e7c5      	b.n	8003ae8 <LSM6DSO_GYRO_SetOutputDataRate+0x150>
 8003b5c:	42500000 	.word	0x42500000
 8003b60:	42d00000 	.word	0x42d00000
 8003b64:	43500000 	.word	0x43500000
 8003b68:	43d08000 	.word	0x43d08000
 8003b6c:	44504000 	.word	0x44504000
 8003b70:	44d06000 	.word	0x44d06000
 8003b74:	45505000 	.word	0x45505000

08003b78 <LSM6DSO_ACC_SetOutputDataRate>:
{
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	ed2d 8b02 	vpush	{d8}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b7e:	f100 0620 	add.w	r6, r0, #32
{
 8003b82:	b082      	sub	sp, #8
 8003b84:	4605      	mov	r5, r0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b86:	2301      	movs	r3, #1
 8003b88:	466a      	mov	r2, sp
 8003b8a:	2114      	movs	r1, #20
 8003b8c:	4630      	mov	r0, r6
{
 8003b8e:	eeb0 8a40 	vmov.f32	s16, s0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b92:	f000 f96b 	bl	8003e6c <lsm6dso_read_reg>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f040 80df 	bne.w	8003d5a <LSM6DSO_ACC_SetOutputDataRate+0x1e2>
      if (val1.xl_ulp_en != 0U)
 8003b9c:	f99d 3000 	ldrsb.w	r3, [sp]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da13      	bge.n	8003bcc <LSM6DSO_ACC_SetOutputDataRate+0x54>
        if (pObj->acc_is_enabled == 1U)
 8003ba4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	f000 80d9 	beq.w	8003d60 <LSM6DSO_ACC_SetOutputDataRate+0x1e8>
        val1.xl_ulp_en = 0;
 8003bae:	f89d 1000 	ldrb.w	r1, [sp]
 8003bb2:	f36f 11c7 	bfc	r1, #7, #1
 8003bb6:	f88d 1000 	strb.w	r1, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003bba:	2301      	movs	r3, #1
 8003bbc:	466a      	mov	r2, sp
 8003bbe:	2114      	movs	r1, #20
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f000 f95b 	bl	8003e7c <lsm6dso_write_reg>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	f040 80c7 	bne.w	8003d5a <LSM6DSO_ACC_SetOutputDataRate+0x1e2>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003bcc:	2301      	movs	r3, #1
 8003bce:	aa01      	add	r2, sp, #4
 8003bd0:	2115      	movs	r1, #21
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f000 f94a 	bl	8003e6c <lsm6dso_read_reg>
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	f040 80bd 	bne.w	8003d5a <LSM6DSO_ACC_SetOutputDataRate+0x1e2>
      if (val2.xl_hm_mode != 0U)
 8003be0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003be4:	06da      	lsls	r2, r3, #27
 8003be6:	f100 80ab 	bmi.w	8003d40 <LSM6DSO_ACC_SetOutputDataRate+0x1c8>
      if (newOdr < 12.5f)
 8003bea:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003bee:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (pObj->acc_is_enabled == 1U)
 8003bf2:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	bfb8      	it	lt
 8003bfc:	eeb0 8a67 	vmovlt.f32	s16, s15
 8003c00:	2901      	cmp	r1, #1
 8003c02:	d056      	beq.n	8003cb2 <LSM6DSO_ACC_SetOutputDataRate+0x13a>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003c04:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003dc8 <LSM6DSO_ACC_SetOutputDataRate+0x250>
 8003c08:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	dc07      	bgt.n	8003c22 <LSM6DSO_ACC_SetOutputDataRate+0xaa>
 8003c12:	230b      	movs	r3, #11
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8003c14:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
 8003c18:	4620      	mov	r0, r4
 8003c1a:	b002      	add	sp, #8
 8003c1c:	ecbd 8b02 	vpop	{d8}
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003c22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2a:	f340 80ae 	ble.w	8003d8a <LSM6DSO_ACC_SetOutputDataRate+0x212>
 8003c2e:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003c32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	f340 80a8 	ble.w	8003d8e <LSM6DSO_ACC_SetOutputDataRate+0x216>
 8003c3e:	eddf 7a63 	vldr	s15, [pc, #396]	; 8003dcc <LSM6DSO_ACC_SetOutputDataRate+0x254>
 8003c42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	f340 80a4 	ble.w	8003d96 <LSM6DSO_ACC_SetOutputDataRate+0x21e>
 8003c4e:	eddf 7a60 	vldr	s15, [pc, #384]	; 8003dd0 <LSM6DSO_ACC_SetOutputDataRate+0x258>
 8003c52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	f340 80a0 	ble.w	8003d9e <LSM6DSO_ACC_SetOutputDataRate+0x226>
 8003c5e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003dd4 <LSM6DSO_ACC_SetOutputDataRate+0x25c>
 8003c62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	f340 809c 	ble.w	8003da6 <LSM6DSO_ACC_SetOutputDataRate+0x22e>
 8003c6e:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003dd8 <LSM6DSO_ACC_SetOutputDataRate+0x260>
 8003c72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	f340 8098 	ble.w	8003dae <LSM6DSO_ACC_SetOutputDataRate+0x236>
 8003c7e:	eddf 7a57 	vldr	s15, [pc, #348]	; 8003ddc <LSM6DSO_ACC_SetOutputDataRate+0x264>
 8003c82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8a:	f340 8094 	ble.w	8003db6 <LSM6DSO_ACC_SetOutputDataRate+0x23e>
 8003c8e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003de0 <LSM6DSO_ACC_SetOutputDataRate+0x268>
 8003c92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	f340 8090 	ble.w	8003dbe <LSM6DSO_ACC_SetOutputDataRate+0x246>
 8003c9e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8003de4 <LSM6DSO_ACC_SetOutputDataRate+0x26c>
 8003ca2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003caa:	bf94      	ite	ls
 8003cac:	2309      	movls	r3, #9
 8003cae:	230a      	movhi	r3, #10
 8003cb0:	e7b0      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003cb2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003dc8 <LSM6DSO_ACC_SetOutputDataRate+0x250>
 8003cb6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8003cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbe:	dd57      	ble.n	8003d70 <LSM6DSO_ACC_SetOutputDataRate+0x1f8>
 8003cc0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc8:	dd53      	ble.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
 8003cca:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003cce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd6:	dd5c      	ble.n	8003d92 <LSM6DSO_ACC_SetOutputDataRate+0x21a>
 8003cd8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8003dcc <LSM6DSO_ACC_SetOutputDataRate+0x254>
 8003cdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce4:	dd59      	ble.n	8003d9a <LSM6DSO_ACC_SetOutputDataRate+0x222>
 8003ce6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8003dd0 <LSM6DSO_ACC_SetOutputDataRate+0x258>
 8003cea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf2:	dd56      	ble.n	8003da2 <LSM6DSO_ACC_SetOutputDataRate+0x22a>
 8003cf4:	eddf 7a37 	vldr	s15, [pc, #220]	; 8003dd4 <LSM6DSO_ACC_SetOutputDataRate+0x25c>
 8003cf8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d00:	dd53      	ble.n	8003daa <LSM6DSO_ACC_SetOutputDataRate+0x232>
 8003d02:	eddf 7a35 	vldr	s15, [pc, #212]	; 8003dd8 <LSM6DSO_ACC_SetOutputDataRate+0x260>
 8003d06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	dd50      	ble.n	8003db2 <LSM6DSO_ACC_SetOutputDataRate+0x23a>
 8003d10:	eddf 7a32 	vldr	s15, [pc, #200]	; 8003ddc <LSM6DSO_ACC_SetOutputDataRate+0x264>
 8003d14:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	dd4d      	ble.n	8003dba <LSM6DSO_ACC_SetOutputDataRate+0x242>
 8003d1e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8003de0 <LSM6DSO_ACC_SetOutputDataRate+0x268>
 8003d22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	dd4a      	ble.n	8003dc2 <LSM6DSO_ACC_SetOutputDataRate+0x24a>
 8003d2c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8003de4 <LSM6DSO_ACC_SetOutputDataRate+0x26c>
 8003d30:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	bf94      	ite	ls
 8003d3a:	2109      	movls	r1, #9
 8003d3c:	210a      	movhi	r1, #10
 8003d3e:	e018      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
        val2.xl_hm_mode = 0U;
 8003d40:	f360 1304 	bfi	r3, r0, #4, #1
 8003d44:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d48:	aa01      	add	r2, sp, #4
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	2115      	movs	r1, #21
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 f894 	bl	8003e7c <lsm6dso_write_reg>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	f43f af48 	beq.w	8003bea <LSM6DSO_ACC_SetOutputDataRate+0x72>
        return LSM6DSO_ERROR;
 8003d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d5e:	e75b      	b.n	8003c18 <LSM6DSO_ACC_SetOutputDataRate+0xa0>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003d60:	4601      	mov	r1, r0
 8003d62:	4630      	mov	r0, r6
 8003d64:	f000 fa8a 	bl	800427c <lsm6dso_xl_data_rate_set>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f43f af20 	beq.w	8003bae <LSM6DSO_ACC_SetOutputDataRate+0x36>
 8003d6e:	e7f4      	b.n	8003d5a <LSM6DSO_ACC_SetOutputDataRate+0x1e2>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003d70:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8003d72:	4630      	mov	r0, r6
 8003d74:	f000 fa82 	bl	800427c <lsm6dso_xl_data_rate_set>
 8003d78:	3800      	subs	r0, #0
 8003d7a:	bf18      	it	ne
 8003d7c:	2001      	movne	r0, #1
 8003d7e:	4244      	negs	r4, r0
}
 8003d80:	4620      	mov	r0, r4
 8003d82:	b002      	add	sp, #8
 8003d84:	ecbd 8b02 	vpop	{d8}
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e742      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e740      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003d92:	2102      	movs	r1, #2
 8003d94:	e7ed      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003d96:	2303      	movs	r3, #3
 8003d98:	e73c      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	e7e9      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e738      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003da2:	2104      	movs	r1, #4
 8003da4:	e7e5      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003da6:	2305      	movs	r3, #5
 8003da8:	e734      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003daa:	2105      	movs	r1, #5
 8003dac:	e7e1      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003dae:	2306      	movs	r3, #6
 8003db0:	e730      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003db2:	2106      	movs	r1, #6
 8003db4:	e7dd      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003db6:	2307      	movs	r3, #7
 8003db8:	e72c      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003dba:	2107      	movs	r1, #7
 8003dbc:	e7d9      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	e728      	b.n	8003c14 <LSM6DSO_ACC_SetOutputDataRate+0x9c>
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003dc2:	2108      	movs	r1, #8
 8003dc4:	e7d5      	b.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate+0x1fa>
 8003dc6:	bf00      	nop
 8003dc8:	3fcccccd 	.word	0x3fcccccd
 8003dcc:	42500000 	.word	0x42500000
 8003dd0:	42d00000 	.word	0x42d00000
 8003dd4:	43500000 	.word	0x43500000
 8003dd8:	43d08000 	.word	0x43d08000
 8003ddc:	44504000 	.word	0x44504000
 8003de0:	44d06000 	.word	0x44d06000
 8003de4:	45505000 	.word	0x45505000

08003de8 <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d038      	beq.n	8003e5e <LSM6DSO_RegisterBusIO+0x76>
{
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8003df0:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8003df4:	688a      	ldr	r2, [r1, #8]
 8003df6:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8003df8:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8003dfc:	7b0a      	ldrb	r2, [r1, #12]
 8003dfe:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e00:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 8003e04:	e9c4 0204 	strd	r0, r2, [r4, #16]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003e08:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003e0c:	4915      	ldr	r1, [pc, #84]	; (8003e64 <LSM6DSO_RegisterBusIO+0x7c>)
 8003e0e:	6261      	str	r1, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003e10:	4915      	ldr	r1, [pc, #84]	; (8003e68 <LSM6DSO_RegisterBusIO+0x80>)
    pObj->IO.GetTick   = pIO->GetTick;
 8003e12:	61a0      	str	r0, [r4, #24]
    pObj->Ctx.handle   = pObj;
 8003e14:	e9c4 240a 	strd	r2, r4, [r4, #40]	; 0x28
{
 8003e18:	b082      	sub	sp, #8
    pObj->Ctx.write_reg = WriteRegWrap;
 8003e1a:	6221      	str	r1, [r4, #32]
    if (pObj->IO.Init == NULL)
 8003e1c:	b1e3      	cbz	r3, 8003e58 <LSM6DSO_RegisterBusIO+0x70>
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003e1e:	4798      	blx	r3
 8003e20:	b9d0      	cbnz	r0, 8003e58 <LSM6DSO_RegisterBusIO+0x70>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d001      	beq.n	8003e2c <LSM6DSO_RegisterBusIO+0x44>
}
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003e2c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f9      	bne.n	8003e28 <LSM6DSO_RegisterBusIO+0x40>
          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003e34:	f04f 0c0c 	mov.w	ip, #12
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f10d 0207 	add.w	r2, sp, #7
 8003e3e:	2112      	movs	r1, #18
 8003e40:	f104 0020 	add.w	r0, r4, #32
 8003e44:	f88d c007 	strb.w	ip, [sp, #7]
 8003e48:	f000 f818 	bl	8003e7c <lsm6dso_write_reg>
            ret = LSM6DSO_ERROR;
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	bf18      	it	ne
 8003e50:	f04f 30ff 	movne.w	r0, #4294967295
}
 8003e54:	b002      	add	sp, #8
 8003e56:	bd10      	pop	{r4, pc}
    ret = LSM6DSO_ERROR;
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	e7e4      	b.n	8003e28 <LSM6DSO_RegisterBusIO+0x40>
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e62:	4770      	bx	lr
 8003e64:	0800330d 	.word	0x0800330d
 8003e68:	0800331d 	.word	0x0800331d

08003e6c <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003e6c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e6e:	6844      	ldr	r4, [r0, #4]
 8003e70:	68c0      	ldr	r0, [r0, #12]
 8003e72:	46a4      	mov	ip, r4

  return ret;
}
 8003e74:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e78:	4760      	bx	ip
 8003e7a:	bf00      	nop

08003e7c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003e7c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e7e:	6804      	ldr	r4, [r0, #0]
 8003e80:	68c0      	ldr	r0, [r0, #12]
 8003e82:	46a4      	mov	ip, r4

  return ret;
}
 8003e84:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e88:	4760      	bx	ip
 8003e8a:	bf00      	nop

08003e8c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8003e8c:	b530      	push	{r4, r5, lr}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	460d      	mov	r5, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003e92:	2301      	movs	r3, #1
 8003e94:	aa01      	add	r2, sp, #4
 8003e96:	2110      	movs	r1, #16
{
 8003e98:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003e9a:	f7ff ffe7 	bl	8003e6c <lsm6dso_read_reg>

  if (ret == 0)
 8003e9e:	b108      	cbz	r0, 8003ea4 <lsm6dso_xl_full_scale_set+0x18>
    reg.fs_xl = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003ea0:	b003      	add	sp, #12
 8003ea2:	bd30      	pop	{r4, r5, pc}
    reg.fs_xl = (uint8_t) val;
 8003ea4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003ea8:	f365 0183 	bfi	r1, r5, #2, #2
 8003eac:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	aa01      	add	r2, sp, #4
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	2110      	movs	r1, #16
 8003eb8:	f7ff ffe0 	bl	8003e7c <lsm6dso_write_reg>
}
 8003ebc:	b003      	add	sp, #12
 8003ebe:	bd30      	pop	{r4, r5, pc}

08003ec0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	b082      	sub	sp, #8
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	aa01      	add	r2, sp, #4
{
 8003ec8:	460c      	mov	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003eca:	2110      	movs	r1, #16
 8003ecc:	f7ff ffce 	bl	8003e6c <lsm6dso_read_reg>

  switch (reg.fs_xl)
 8003ed0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ed4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8003ed8:	2a02      	cmp	r2, #2
 8003eda:	4613      	mov	r3, r2
 8003edc:	d007      	beq.n	8003eee <lsm6dso_xl_full_scale_get+0x2e>
 8003ede:	2a03      	cmp	r2, #3
 8003ee0:	d005      	beq.n	8003eee <lsm6dso_xl_full_scale_get+0x2e>
 8003ee2:	2a01      	cmp	r2, #1
 8003ee4:	d003      	beq.n	8003eee <lsm6dso_xl_full_scale_get+0x2e>
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_2g;
      break;
  }

  return ret;
}
 8003eea:	b002      	add	sp, #8
 8003eec:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_8g;
 8003eee:	7023      	strb	r3, [r4, #0]
}
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	b082      	sub	sp, #8
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003ef8:	2301      	movs	r3, #1
{
 8003efa:	460c      	mov	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8003efc:	aa01      	add	r2, sp, #4
 8003efe:	2110      	movs	r1, #16
 8003f00:	f7ff ffb4 	bl	8003e6c <lsm6dso_read_reg>

  switch (reg.odr_xl)
 8003f04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	2b0b      	cmp	r3, #11
 8003f0c:	d80b      	bhi.n	8003f26 <lsm6dso_xl_data_rate_get+0x32>
 8003f0e:	e8df f003 	tbb	[pc, r3]
 8003f12:	100a      	.short	0x100a
 8003f14:	1c191613 	.word	0x1c191613
 8003f18:	2825221f 	.word	0x2825221f
 8003f1c:	0d06      	.short	0x0d06
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
      break;

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8003f1e:	230a      	movs	r3, #10
 8003f20:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8003f22:	b002      	add	sp, #8
 8003f24:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_XL_ODR_OFF;
 8003f26:	2300      	movs	r3, #0
 8003f28:	7023      	strb	r3, [r4, #0]
  return ret;
 8003f2a:	e7fa      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1Hz6;
 8003f2c:	230b      	movs	r3, #11
 8003f2e:	7023      	strb	r3, [r4, #0]
      break;
 8003f30:	e7f7      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_12Hz5;
 8003f32:	2301      	movs	r3, #1
 8003f34:	7023      	strb	r3, [r4, #0]
      break;
 8003f36:	e7f4      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_26Hz;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	7023      	strb	r3, [r4, #0]
      break;
 8003f3c:	e7f1      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_52Hz;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	7023      	strb	r3, [r4, #0]
      break;
 8003f42:	e7ee      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_104Hz;
 8003f44:	2304      	movs	r3, #4
 8003f46:	7023      	strb	r3, [r4, #0]
      break;
 8003f48:	e7eb      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_208Hz;
 8003f4a:	2305      	movs	r3, #5
 8003f4c:	7023      	strb	r3, [r4, #0]
      break;
 8003f4e:	e7e8      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_417Hz;
 8003f50:	2306      	movs	r3, #6
 8003f52:	7023      	strb	r3, [r4, #0]
      break;
 8003f54:	e7e5      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_833Hz;
 8003f56:	2307      	movs	r3, #7
 8003f58:	7023      	strb	r3, [r4, #0]
      break;
 8003f5a:	e7e2      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1667Hz;
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	7023      	strb	r3, [r4, #0]
      break;
 8003f60:	e7df      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_3333Hz;
 8003f62:	2309      	movs	r3, #9
 8003f64:	7023      	strb	r3, [r4, #0]
      break;
 8003f66:	e7dc      	b.n	8003f22 <lsm6dso_xl_data_rate_get+0x2e>

08003f68 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	460d      	mov	r5, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003f6e:	2301      	movs	r3, #1
 8003f70:	aa01      	add	r2, sp, #4
 8003f72:	2111      	movs	r1, #17
{
 8003f74:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003f76:	f7ff ff79 	bl	8003e6c <lsm6dso_read_reg>

  if (ret == 0)
 8003f7a:	b108      	cbz	r0, 8003f80 <lsm6dso_gy_full_scale_set+0x18>
    reg.fs_g = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8003f7c:	b003      	add	sp, #12
 8003f7e:	bd30      	pop	{r4, r5, pc}
    reg.fs_g = (uint8_t) val;
 8003f80:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003f84:	f365 0143 	bfi	r1, r5, #1, #3
 8003f88:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	aa01      	add	r2, sp, #4
 8003f90:	4620      	mov	r0, r4
 8003f92:	2111      	movs	r1, #17
 8003f94:	f7ff ff72 	bl	8003e7c <lsm6dso_write_reg>
}
 8003f98:	b003      	add	sp, #12
 8003f9a:	bd30      	pop	{r4, r5, pc}

08003f9c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	b082      	sub	sp, #8
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003fa0:	2301      	movs	r3, #1
{
 8003fa2:	460c      	mov	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003fa4:	aa01      	add	r2, sp, #4
 8003fa6:	2111      	movs	r1, #17
 8003fa8:	f7ff ff60 	bl	8003e6c <lsm6dso_read_reg>

  switch (reg.fs_g)
 8003fac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003fb0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d804      	bhi.n	8003fc4 <lsm6dso_gy_full_scale_get+0x28>
 8003fba:	e8df f003 	tbb	[pc, r3]
 8003fbe:	0f0b      	.short	0x0f0b
 8003fc0:	07031303 	.word	0x07031303
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_250dps;
      break;
  }

  return ret;
}
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_2000dps;
 8003fcc:	2306      	movs	r3, #6
 8003fce:	7023      	strb	r3, [r4, #0]
}
 8003fd0:	b002      	add	sp, #8
 8003fd2:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_125dps;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	7023      	strb	r3, [r4, #0]
}
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_500dps;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	7023      	strb	r3, [r4, #0]
}
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_1000dps;
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	7023      	strb	r3, [r4, #0]
}
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd10      	pop	{r4, pc}

08003fec <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8003fec:	b510      	push	{r4, lr}
 8003fee:	b082      	sub	sp, #8
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003ff0:	2301      	movs	r3, #1
{
 8003ff2:	460c      	mov	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8003ff4:	aa01      	add	r2, sp, #4
 8003ff6:	2111      	movs	r1, #17
 8003ff8:	f7ff ff38 	bl	8003e6c <lsm6dso_read_reg>

  switch (reg.odr_g)
 8003ffc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	2b0a      	cmp	r3, #10
 8004004:	d80b      	bhi.n	800401e <lsm6dso_gy_data_rate_get+0x32>
 8004006:	e8df f003 	tbb	[pc, r3]
 800400a:	100a      	.short	0x100a
 800400c:	1c191613 	.word	0x1c191613
 8004010:	0625221f 	.word	0x0625221f
 8004014:	0d          	.byte	0x0d
 8004015:	00          	.byte	0x00
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
      break;

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004016:	2309      	movs	r3, #9
 8004018:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_GY_ODR_OFF;
      break;
  }

  return ret;
}
 800401a:	b002      	add	sp, #8
 800401c:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_GY_ODR_OFF;
 800401e:	2300      	movs	r3, #0
 8004020:	7023      	strb	r3, [r4, #0]
  return ret;
 8004022:	e7fa      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_6667Hz;
 8004024:	230a      	movs	r3, #10
 8004026:	7023      	strb	r3, [r4, #0]
      break;
 8004028:	e7f7      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_12Hz5;
 800402a:	2301      	movs	r3, #1
 800402c:	7023      	strb	r3, [r4, #0]
      break;
 800402e:	e7f4      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_26Hz;
 8004030:	2302      	movs	r3, #2
 8004032:	7023      	strb	r3, [r4, #0]
      break;
 8004034:	e7f1      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_52Hz;
 8004036:	2303      	movs	r3, #3
 8004038:	7023      	strb	r3, [r4, #0]
      break;
 800403a:	e7ee      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_104Hz;
 800403c:	2304      	movs	r3, #4
 800403e:	7023      	strb	r3, [r4, #0]
      break;
 8004040:	e7eb      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_208Hz;
 8004042:	2305      	movs	r3, #5
 8004044:	7023      	strb	r3, [r4, #0]
      break;
 8004046:	e7e8      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_417Hz;
 8004048:	2306      	movs	r3, #6
 800404a:	7023      	strb	r3, [r4, #0]
      break;
 800404c:	e7e5      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_833Hz;
 800404e:	2307      	movs	r3, #7
 8004050:	7023      	strb	r3, [r4, #0]
      break;
 8004052:	e7e2      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_1667Hz;
 8004054:	2308      	movs	r3, #8
 8004056:	7023      	strb	r3, [r4, #0]
      break;
 8004058:	e7df      	b.n	800401a <lsm6dso_gy_data_rate_get+0x2e>
 800405a:	bf00      	nop

0800405c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800405c:	b530      	push	{r4, r5, lr}
 800405e:	b083      	sub	sp, #12
 8004060:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004062:	2301      	movs	r3, #1
 8004064:	aa01      	add	r2, sp, #4
 8004066:	2112      	movs	r1, #18
{
 8004068:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800406a:	f7ff feff 	bl	8003e6c <lsm6dso_read_reg>

  if (ret == 0)
 800406e:	b108      	cbz	r0, 8004074 <lsm6dso_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004070:	b003      	add	sp, #12
 8004072:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8004074:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004078:	f365 1186 	bfi	r1, r5, #6, #1
 800407c:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004080:	2301      	movs	r3, #1
 8004082:	aa01      	add	r2, sp, #4
 8004084:	4620      	mov	r0, r4
 8004086:	2112      	movs	r1, #18
 8004088:	f7ff fef8 	bl	8003e7c <lsm6dso_write_reg>
}
 800408c:	b003      	add	sp, #12
 800408e:	bd30      	pop	{r4, r5, pc}

08004090 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004090:	b510      	push	{r4, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8004096:	466a      	mov	r2, sp
 8004098:	2306      	movs	r3, #6
 800409a:	2122      	movs	r1, #34	; 0x22
 800409c:	f7ff fee6 	bl	8003e6c <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80040a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80040a4:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040a8:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040ac:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80040b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040b4:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040b6:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040be:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040c2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040c6:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040c8:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80040ca:	b002      	add	sp, #8
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	bf00      	nop

080040d0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80040d0:	b510      	push	{r4, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80040d6:	466a      	mov	r2, sp
 80040d8:	2306      	movs	r3, #6
 80040da:	2128      	movs	r1, #40	; 0x28
 80040dc:	f7ff fec6 	bl	8003e6c <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80040e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80040e4:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040e8:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040ec:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80040f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040f4:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040fe:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004102:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004106:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004108:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 800410a:	b002      	add	sp, #8
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop

08004110 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004110:	b508      	push	{r3, lr}
 8004112:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004114:	2301      	movs	r3, #1
 8004116:	210f      	movs	r1, #15
 8004118:	f7ff fea8 	bl	8003e6c <lsm6dso_read_reg>

  return ret;
}
 800411c:	bd08      	pop	{r3, pc}
 800411e:	bf00      	nop

08004120 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004120:	b530      	push	{r4, r5, lr}
 8004122:	b083      	sub	sp, #12
 8004124:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004126:	2301      	movs	r3, #1
 8004128:	aa01      	add	r2, sp, #4
 800412a:	2112      	movs	r1, #18
{
 800412c:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800412e:	f7ff fe9d 	bl	8003e6c <lsm6dso_read_reg>

  if (ret == 0)
 8004132:	b108      	cbz	r0, 8004138 <lsm6dso_auto_increment_set+0x18>
    reg.if_inc = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004134:	b003      	add	sp, #12
 8004136:	bd30      	pop	{r4, r5, pc}
    reg.if_inc = val;
 8004138:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800413c:	f365 0182 	bfi	r1, r5, #2, #1
 8004140:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004144:	2301      	movs	r3, #1
 8004146:	aa01      	add	r2, sp, #4
 8004148:	4620      	mov	r0, r4
 800414a:	2112      	movs	r1, #18
 800414c:	f7ff fe96 	bl	8003e7c <lsm6dso_write_reg>
}
 8004150:	b003      	add	sp, #12
 8004152:	bd30      	pop	{r4, r5, pc}

08004154 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004154:	b530      	push	{r4, r5, lr}
 8004156:	b083      	sub	sp, #12
 8004158:	460c      	mov	r4, r1
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800415a:	2301      	movs	r3, #1
 800415c:	aa01      	add	r2, sp, #4
 800415e:	2118      	movs	r1, #24
{
 8004160:	4605      	mov	r5, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004162:	f7ff fe83 	bl	8003e6c <lsm6dso_read_reg>

  if (ret == 0)
 8004166:	b108      	cbz	r0, 800416c <lsm6dso_i3c_disable_set+0x18>
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 8004168:	b003      	add	sp, #12
 800416a:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800416c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004170:	09e3      	lsrs	r3, r4, #7
 8004172:	f363 0141 	bfi	r1, r3, #1, #1
 8004176:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800417a:	2301      	movs	r3, #1
 800417c:	aa01      	add	r2, sp, #4
 800417e:	2118      	movs	r1, #24
 8004180:	4628      	mov	r0, r5
 8004182:	f7ff fe7b 	bl	8003e7c <lsm6dso_write_reg>
  if (ret == 0)
 8004186:	2800      	cmp	r0, #0
 8004188:	d1ee      	bne.n	8004168 <lsm6dso_i3c_disable_set+0x14>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800418a:	2301      	movs	r3, #1
 800418c:	466a      	mov	r2, sp
 800418e:	2162      	movs	r1, #98	; 0x62
 8004190:	4628      	mov	r0, r5
 8004192:	f7ff fe6b 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 8004196:	2800      	cmp	r0, #0
 8004198:	d1e6      	bne.n	8004168 <lsm6dso_i3c_disable_set+0x14>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800419a:	f89d 1000 	ldrb.w	r1, [sp]
 800419e:	f364 01c4 	bfi	r1, r4, #3, #2
 80041a2:	f88d 1000 	strb.w	r1, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80041a6:	2301      	movs	r3, #1
 80041a8:	466a      	mov	r2, sp
 80041aa:	4628      	mov	r0, r5
 80041ac:	2162      	movs	r1, #98	; 0x62
 80041ae:	f7ff fe65 	bl	8003e7c <lsm6dso_write_reg>
}
 80041b2:	b003      	add	sp, #12
 80041b4:	bd30      	pop	{r4, r5, pc}
 80041b6:	bf00      	nop

080041b8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80041b8:	b530      	push	{r4, r5, lr}
 80041ba:	b083      	sub	sp, #12
 80041bc:	460d      	mov	r5, r1
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80041be:	2301      	movs	r3, #1
 80041c0:	aa01      	add	r2, sp, #4
 80041c2:	210a      	movs	r1, #10
{
 80041c4:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80041c6:	f7ff fe51 	bl	8003e6c <lsm6dso_read_reg>

  if (ret == 0)
 80041ca:	b108      	cbz	r0, 80041d0 <lsm6dso_fifo_mode_set+0x18>
    reg.fifo_mode = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80041cc:	b003      	add	sp, #12
 80041ce:	bd30      	pop	{r4, r5, pc}
    reg.fifo_mode = (uint8_t)val;
 80041d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80041d4:	f365 0102 	bfi	r1, r5, #0, #3
 80041d8:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80041dc:	2301      	movs	r3, #1
 80041de:	aa01      	add	r2, sp, #4
 80041e0:	4620      	mov	r0, r4
 80041e2:	210a      	movs	r1, #10
 80041e4:	f7ff fe4a 	bl	8003e7c <lsm6dso_write_reg>
}
 80041e8:	b003      	add	sp, #12
 80041ea:	bd30      	pop	{r4, r5, pc}

080041ec <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80041ec:	b530      	push	{r4, r5, lr}
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80041ee:	2301      	movs	r3, #1
{
 80041f0:	b083      	sub	sp, #12
 80041f2:	460d      	mov	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80041f4:	aa01      	add	r2, sp, #4
 80041f6:	4619      	mov	r1, r3
{
 80041f8:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80041fa:	f7ff fe37 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 80041fe:	b108      	cbz	r0, 8004204 <lsm6dso_fsm_data_rate_get+0x18>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8004200:	b003      	add	sp, #12
 8004202:	bd30      	pop	{r4, r5, pc}
    reg.reg_access = (uint8_t)val;
 8004204:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004208:	2302      	movs	r3, #2
 800420a:	f363 1287 	bfi	r2, r3, #6, #2
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800420e:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8004210:	f88d 2004 	strb.w	r2, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004214:	4619      	mov	r1, r3
 8004216:	aa01      	add	r2, sp, #4
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff fe2f 	bl	8003e7c <lsm6dso_write_reg>
  if (ret == 0)
 800421e:	2800      	cmp	r0, #0
 8004220:	d1ee      	bne.n	8004200 <lsm6dso_fsm_data_rate_get+0x14>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8004222:	2301      	movs	r3, #1
 8004224:	466a      	mov	r2, sp
 8004226:	215f      	movs	r1, #95	; 0x5f
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff fe1f 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 800422e:	2800      	cmp	r0, #0
 8004230:	d1e6      	bne.n	8004200 <lsm6dso_fsm_data_rate_get+0x14>
    switch (reg.fsm_odr)
 8004232:	f89d 3000 	ldrb.w	r3, [sp]
 8004236:	f3c3 02c1 	ubfx	r2, r3, #3, #2
 800423a:	2a02      	cmp	r2, #2
 800423c:	4613      	mov	r3, r2
 800423e:	d01a      	beq.n	8004276 <lsm6dso_fsm_data_rate_get+0x8a>
 8004240:	2a03      	cmp	r2, #3
 8004242:	d018      	beq.n	8004276 <lsm6dso_fsm_data_rate_get+0x8a>
 8004244:	2a01      	cmp	r2, #1
 8004246:	d016      	beq.n	8004276 <lsm6dso_fsm_data_rate_get+0x8a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8004248:	7028      	strb	r0, [r5, #0]
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800424a:	2301      	movs	r3, #1
 800424c:	aa01      	add	r2, sp, #4
 800424e:	4619      	mov	r1, r3
 8004250:	4620      	mov	r0, r4
 8004252:	f7ff fe0b 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 8004256:	2800      	cmp	r0, #0
 8004258:	d1d2      	bne.n	8004200 <lsm6dso_fsm_data_rate_get+0x14>
    reg.reg_access = (uint8_t)val;
 800425a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800425e:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8004260:	f360 1187 	bfi	r1, r0, #6, #2
 8004264:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004268:	aa01      	add	r2, sp, #4
 800426a:	4620      	mov	r0, r4
 800426c:	4619      	mov	r1, r3
 800426e:	f7ff fe05 	bl	8003e7c <lsm6dso_write_reg>
}
 8004272:	b003      	add	sp, #12
 8004274:	bd30      	pop	{r4, r5, pc}
        *val = LSM6DSO_ODR_FSM_104Hz;
 8004276:	702b      	strb	r3, [r5, #0]
        break;
 8004278:	e7e7      	b.n	800424a <lsm6dso_fsm_data_rate_get+0x5e>
 800427a:	bf00      	nop

0800427c <lsm6dso_xl_data_rate_set>:
{
 800427c:	b570      	push	{r4, r5, r6, lr}
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800427e:	2301      	movs	r3, #1
{
 8004280:	b084      	sub	sp, #16
 8004282:	460d      	mov	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004284:	aa03      	add	r2, sp, #12
 8004286:	4619      	mov	r1, r3
{
 8004288:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800428a:	f7ff fdef 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 800428e:	b108      	cbz	r0, 8004294 <lsm6dso_xl_data_rate_set+0x18>
}
 8004290:	b004      	add	sp, #16
 8004292:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
 8004294:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004298:	2602      	movs	r6, #2
 800429a:	f366 1387 	bfi	r3, r6, #6, #2
 800429e:	f88d 300c 	strb.w	r3, [sp, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80042a2:	2301      	movs	r3, #1
 80042a4:	aa03      	add	r2, sp, #12
 80042a6:	4619      	mov	r1, r3
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff fde7 	bl	8003e7c <lsm6dso_write_reg>
  if (ret == 0)
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d1ee      	bne.n	8004290 <lsm6dso_xl_data_rate_set+0x14>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80042b2:	4633      	mov	r3, r6
 80042b4:	aa03      	add	r2, sp, #12
 80042b6:	2146      	movs	r1, #70	; 0x46
 80042b8:	4620      	mov	r0, r4
 80042ba:	f7ff fdd7 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 80042be:	2800      	cmp	r0, #0
 80042c0:	d1e6      	bne.n	8004290 <lsm6dso_xl_data_rate_set+0x14>
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80042c2:	2301      	movs	r3, #1
 80042c4:	aa02      	add	r2, sp, #8
 80042c6:	4619      	mov	r1, r3
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff fdcf 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d1de      	bne.n	8004290 <lsm6dso_xl_data_rate_set+0x14>
    reg.reg_access = (uint8_t)val;
 80042d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80042d6:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80042d8:	f360 1287 	bfi	r2, r0, #6, #2
 80042dc:	f88d 2008 	strb.w	r2, [sp, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80042e0:	4619      	mov	r1, r3
 80042e2:	aa02      	add	r2, sp, #8
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff fdc9 	bl	8003e7c <lsm6dso_write_reg>
  if (ret == 0)
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1d0      	bne.n	8004290 <lsm6dso_xl_data_rate_set+0x14>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042ee:	f89d 100c 	ldrb.w	r1, [sp, #12]
         fsm_enable.fsm_enable_a.fsm2_en  |
 80042f2:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042f6:	f3c1 0300 	ubfx	r3, r1, #0, #1
 80042fa:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm3_en  |
 80042fc:	f3c1 0280 	ubfx	r2, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004300:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004302:	f3c1 02c0 	ubfx	r2, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004306:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004308:	f3c1 1200 	ubfx	r2, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 800430c:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm6_en  |
 800430e:	f3c1 1240 	ubfx	r2, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004312:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004314:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004318:	f89d 200d 	ldrb.w	r2, [sp, #13]
         fsm_enable.fsm_enable_a.fsm6_en  |
 800431c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 800431e:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004322:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004326:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8004328:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 800432c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 800432e:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8004332:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8004334:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8004338:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 800433a:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 800433e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8004340:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8004344:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8004346:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 800434a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 800434c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004350:	07db      	lsls	r3, r3, #31
 8004352:	d415      	bmi.n	8004380 <lsm6dso_xl_data_rate_set+0x104>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004354:	2301      	movs	r3, #1
 8004356:	aa01      	add	r2, sp, #4
 8004358:	2110      	movs	r1, #16
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff fd86 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 8004360:	2800      	cmp	r0, #0
 8004362:	d195      	bne.n	8004290 <lsm6dso_xl_data_rate_set+0x14>
    reg.odr_xl = (uint8_t) odr_xl;
 8004364:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004368:	f365 1107 	bfi	r1, r5, #4, #4
 800436c:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004370:	2301      	movs	r3, #1
 8004372:	aa01      	add	r2, sp, #4
 8004374:	4620      	mov	r0, r4
 8004376:	2110      	movs	r1, #16
 8004378:	f7ff fd80 	bl	8003e7c <lsm6dso_write_reg>
}
 800437c:	b004      	add	sp, #16
 800437e:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004380:	a902      	add	r1, sp, #8
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff ff32 	bl	80041ec <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8004388:	2800      	cmp	r0, #0
 800438a:	d181      	bne.n	8004290 <lsm6dso_xl_data_rate_set+0x14>
        switch (fsm_odr)
 800438c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d8df      	bhi.n	8004354 <lsm6dso_xl_data_rate_set+0xd8>
 8004394:	e8df f003 	tbb	[pc, r3]
 8004398:	02060a0e 	.word	0x02060a0e
            if (val == LSM6DSO_XL_ODR_OFF)
 800439c:	2d04      	cmp	r5, #4
 800439e:	bf38      	it	cc
 80043a0:	2504      	movcc	r5, #4
 80043a2:	e7d7      	b.n	8004354 <lsm6dso_xl_data_rate_set+0xd8>
            if (val == LSM6DSO_XL_ODR_OFF)
 80043a4:	2d03      	cmp	r5, #3
 80043a6:	bf38      	it	cc
 80043a8:	2503      	movcc	r5, #3
 80043aa:	e7d3      	b.n	8004354 <lsm6dso_xl_data_rate_set+0xd8>
            if (val == LSM6DSO_XL_ODR_OFF)
 80043ac:	2d02      	cmp	r5, #2
 80043ae:	bf38      	it	cc
 80043b0:	2502      	movcc	r5, #2
 80043b2:	e7cf      	b.n	8004354 <lsm6dso_xl_data_rate_set+0xd8>
            if (val == LSM6DSO_XL_ODR_OFF)
 80043b4:	2d01      	cmp	r5, #1
 80043b6:	bf38      	it	cc
 80043b8:	2501      	movcc	r5, #1
  if (ret == 0)
 80043ba:	e7cb      	b.n	8004354 <lsm6dso_xl_data_rate_set+0xd8>

080043bc <lsm6dso_gy_data_rate_set>:
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80043be:	2301      	movs	r3, #1
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	460d      	mov	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80043c4:	aa03      	add	r2, sp, #12
 80043c6:	4619      	mov	r1, r3
{
 80043c8:	4604      	mov	r4, r0
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80043ca:	f7ff fd4f 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 80043ce:	b108      	cbz	r0, 80043d4 <lsm6dso_gy_data_rate_set+0x18>
}
 80043d0:	b004      	add	sp, #16
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
 80043d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80043d8:	2602      	movs	r6, #2
 80043da:	f366 1387 	bfi	r3, r6, #6, #2
 80043de:	f88d 300c 	strb.w	r3, [sp, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80043e2:	2301      	movs	r3, #1
 80043e4:	aa03      	add	r2, sp, #12
 80043e6:	4619      	mov	r1, r3
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7ff fd47 	bl	8003e7c <lsm6dso_write_reg>
  if (ret == 0)
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d1ee      	bne.n	80043d0 <lsm6dso_gy_data_rate_set+0x14>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80043f2:	4633      	mov	r3, r6
 80043f4:	aa03      	add	r2, sp, #12
 80043f6:	2146      	movs	r1, #70	; 0x46
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fd37 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 80043fe:	2800      	cmp	r0, #0
 8004400:	d1e6      	bne.n	80043d0 <lsm6dso_gy_data_rate_set+0x14>
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004402:	2301      	movs	r3, #1
 8004404:	aa02      	add	r2, sp, #8
 8004406:	4619      	mov	r1, r3
 8004408:	4620      	mov	r0, r4
 800440a:	f7ff fd2f 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 800440e:	2800      	cmp	r0, #0
 8004410:	d1de      	bne.n	80043d0 <lsm6dso_gy_data_rate_set+0x14>
    reg.reg_access = (uint8_t)val;
 8004412:	f89d 2008 	ldrb.w	r2, [sp, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004416:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8004418:	f360 1287 	bfi	r2, r0, #6, #2
 800441c:	f88d 2008 	strb.w	r2, [sp, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004420:	4619      	mov	r1, r3
 8004422:	aa02      	add	r2, sp, #8
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff fd29 	bl	8003e7c <lsm6dso_write_reg>
  if (ret == 0)
 800442a:	2800      	cmp	r0, #0
 800442c:	d1d0      	bne.n	80043d0 <lsm6dso_gy_data_rate_set+0x14>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800442e:	f89d 100c 	ldrb.w	r1, [sp, #12]
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004432:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004436:	f3c1 0300 	ubfx	r3, r1, #0, #1
 800443a:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm3_en  |
 800443c:	f3c1 0280 	ubfx	r2, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004440:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004442:	f3c1 02c0 	ubfx	r2, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004446:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004448:	f3c1 1200 	ubfx	r2, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 800444c:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm6_en  |
 800444e:	f3c1 1240 	ubfx	r2, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004452:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004454:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004458:	f89d 200d 	ldrb.w	r2, [sp, #13]
         fsm_enable.fsm_enable_a.fsm6_en  |
 800445c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 800445e:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004462:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004466:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8004468:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 800446c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 800446e:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8004472:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8004474:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8004478:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 800447a:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 800447e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8004480:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8004484:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8004486:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 800448a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 800448c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004490:	07db      	lsls	r3, r3, #31
 8004492:	d415      	bmi.n	80044c0 <lsm6dso_gy_data_rate_set+0x104>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004494:	2301      	movs	r3, #1
 8004496:	aa01      	add	r2, sp, #4
 8004498:	2111      	movs	r1, #17
 800449a:	4620      	mov	r0, r4
 800449c:	f7ff fce6 	bl	8003e6c <lsm6dso_read_reg>
  if (ret == 0)
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d195      	bne.n	80043d0 <lsm6dso_gy_data_rate_set+0x14>
    reg.odr_g = (uint8_t) odr_gy;
 80044a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80044a8:	f365 1107 	bfi	r1, r5, #4, #4
 80044ac:	f88d 1004 	strb.w	r1, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80044b0:	2301      	movs	r3, #1
 80044b2:	aa01      	add	r2, sp, #4
 80044b4:	4620      	mov	r0, r4
 80044b6:	2111      	movs	r1, #17
 80044b8:	f7ff fce0 	bl	8003e7c <lsm6dso_write_reg>
}
 80044bc:	b004      	add	sp, #16
 80044be:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80044c0:	a902      	add	r1, sp, #8
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff fe92 	bl	80041ec <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d181      	bne.n	80043d0 <lsm6dso_gy_data_rate_set+0x14>
        switch (fsm_odr)
 80044cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d8df      	bhi.n	8004494 <lsm6dso_gy_data_rate_set+0xd8>
 80044d4:	e8df f003 	tbb	[pc, r3]
 80044d8:	02060a0e 	.word	0x02060a0e
            if (val == LSM6DSO_GY_ODR_OFF)
 80044dc:	2d04      	cmp	r5, #4
 80044de:	bf38      	it	cc
 80044e0:	2504      	movcc	r5, #4
 80044e2:	e7d7      	b.n	8004494 <lsm6dso_gy_data_rate_set+0xd8>
            if (val == LSM6DSO_GY_ODR_OFF)
 80044e4:	2d03      	cmp	r5, #3
 80044e6:	bf38      	it	cc
 80044e8:	2503      	movcc	r5, #3
 80044ea:	e7d3      	b.n	8004494 <lsm6dso_gy_data_rate_set+0xd8>
            if (val == LSM6DSO_GY_ODR_OFF)
 80044ec:	2d02      	cmp	r5, #2
 80044ee:	bf38      	it	cc
 80044f0:	2502      	movcc	r5, #2
 80044f2:	e7cf      	b.n	8004494 <lsm6dso_gy_data_rate_set+0xd8>
            if (val == LSM6DSO_GY_ODR_OFF)
 80044f4:	2d01      	cmp	r5, #1
 80044f6:	bf38      	it	cc
 80044f8:	2501      	movcc	r5, #1
  if (ret == 0)
 80044fa:	e7cb      	b.n	8004494 <lsm6dso_gy_data_rate_set+0xd8>

080044fc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004500:	2801      	cmp	r0, #1
{
 8004502:	b091      	sub	sp, #68	; 0x44
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
  switch (Instance)
 8004508:	d009      	beq.n	800451e <IKS01A3_MOTION_SENSOR_Init+0x22>
 800450a:	2802      	cmp	r0, #2
 800450c:	f000 8118 	beq.w	8004740 <IKS01A3_MOTION_SENSOR_Init+0x244>
 8004510:	2800      	cmp	r0, #0
 8004512:	d077      	beq.n	8004604 <IKS01A3_MOTION_SENSOR_Init+0x108>
 8004514:	f06f 0001 	mvn.w	r0, #1
    }
    function = function << 1;
  }

  return ret;
}
 8004518:	b011      	add	sp, #68	; 0x44
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
  io_ctx.Init        = IKS01A3_I2C_Init;
 800451e:	4b7a      	ldr	r3, [pc, #488]	; (8004708 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 8004520:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004522:	4b7a      	ldr	r3, [pc, #488]	; (800470c <IKS01A3_MOTION_SENSOR_Init+0x210>)
 8004524:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004526:	4b7a      	ldr	r3, [pc, #488]	; (8004710 <IKS01A3_MOTION_SENSOR_Init+0x214>)
 8004528:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800452a:	4b7a      	ldr	r3, [pc, #488]	; (8004714 <IKS01A3_MOTION_SENSOR_Init+0x218>)
  io_ctx.GetTick     = IKS01A3_GetTick;
  io_ctx.Delay       = IKS01A3_Delay;

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800452c:	4e7a      	ldr	r6, [pc, #488]	; (8004718 <IKS01A3_MOTION_SENSOR_Init+0x21c>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800452e:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004530:	4b7a      	ldr	r3, [pc, #488]	; (800471c <IKS01A3_MOTION_SENSOR_Init+0x220>)
 8004532:	930e      	str	r3, [sp, #56]	; 0x38
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8004534:	f10d 0820 	add.w	r8, sp, #32
  io_ctx.Delay       = IKS01A3_Delay;
 8004538:	4b79      	ldr	r3, [pc, #484]	; (8004720 <IKS01A3_MOTION_SENSOR_Init+0x224>)
 800453a:	930f      	str	r3, [sp, #60]	; 0x3c
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800453c:	2200      	movs	r2, #0
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800453e:	2333      	movs	r3, #51	; 0x33
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8004540:	4641      	mov	r1, r8
 8004542:	4630      	mov	r0, r6
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8004544:	920a      	str	r2, [sp, #40]	; 0x28
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8004546:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800454a:	f7fe f833 	bl	80025b4 <LIS2DW12_RegisterBusIO>
 800454e:	2800      	cmp	r0, #0
 8004550:	f040 8177 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8004554:	f10d 0103 	add.w	r1, sp, #3
 8004558:	4630      	mov	r0, r6
 800455a:	f7fd fb75 	bl	8001c48 <LIS2DW12_ReadID>
 800455e:	2800      	cmp	r0, #0
 8004560:	f040 816f 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2DW12_ID)
 8004564:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004568:	2b44      	cmp	r3, #68	; 0x44
 800456a:	f040 816a 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800456e:	a901      	add	r1, sp, #4
 8004570:	4630      	mov	r0, r6
 8004572:	f7fd fb03 	bl	8001b7c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004576:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800457a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800457e:	f89d 1005 	ldrb.w	r1, [sp, #5]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8004582:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800473c <IKS01A3_MOTION_SENSOR_Init+0x240>
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8004586:	4f67      	ldr	r7, [pc, #412]	; (8004724 <IKS01A3_MOTION_SENSOR_Init+0x228>)
    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8004588:	f8ca 6004 	str.w	r6, [sl, #4]
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800458c:	0053      	lsls	r3, r2, #1
 800458e:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8004592:	430b      	orrs	r3, r1
 8004594:	4964      	ldr	r1, [pc, #400]	; (8004728 <IKS01A3_MOTION_SENSOR_Init+0x22c>)

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004596:	f015 0b02 	ands.w	fp, r5, #2
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800459a:	604b      	str	r3, [r1, #4]
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800459c:	4b63      	ldr	r3, [pc, #396]	; (800472c <IKS01A3_MOTION_SENSOR_Init+0x230>)
 800459e:	607b      	str	r3, [r7, #4]
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80045a0:	f040 8160 	bne.w	8004864 <IKS01A3_MOTION_SENSOR_Init+0x368>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80045a4:	f015 0605 	ands.w	r6, r5, #5
 80045a8:	f040 814b 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8da 0004 	ldr.w	r0, [sl, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4641      	mov	r1, r8
 80045b6:	4798      	blx	r3
 80045b8:	2800      	cmp	r0, #0
 80045ba:	f040 817d 	bne.w	80048b8 <IKS01A3_MOTION_SENSOR_Init+0x3bc>
      if (cap.Acc == 1U)
 80045be:	f89d 3020 	ldrb.w	r3, [sp, #32]
      if (cap.Gyro == 1U)
 80045c2:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
      if (cap.Acc == 1U)
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	bf01      	itttt	eq
 80045ca:	2602      	moveq	r6, #2
 80045cc:	2306      	moveq	r3, #6
 80045ce:	2203      	moveq	r2, #3
 80045d0:	2107      	moveq	r1, #7
 80045d2:	bf1e      	ittt	ne
 80045d4:	2304      	movne	r3, #4
 80045d6:	2201      	movne	r2, #1
 80045d8:	2105      	movne	r1, #5
      if (cap.Gyro == 1U)
 80045da:	2801      	cmp	r0, #1
 80045dc:	bf08      	it	eq
 80045de:	4616      	moveq	r6, r2
      if (cap.Magneto == 1U)
 80045e0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
      if (cap.Gyro == 1U)
 80045e4:	bf08      	it	eq
 80045e6:	460b      	moveq	r3, r1
        component_functions |= MOTION_MAGNETO;
 80045e8:	2a01      	cmp	r2, #1
 80045ea:	bf08      	it	eq
 80045ec:	461e      	moveq	r6, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80045ee:	f1bb 0f00 	cmp.w	fp, #0
 80045f2:	f040 810b 	bne.w	800480c <IKS01A3_MOTION_SENSOR_Init+0x310>
 80045f6:	076b      	lsls	r3, r5, #29
 80045f8:	f100 8141 	bmi.w	800487e <IKS01A3_MOTION_SENSOR_Init+0x382>
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80045fc:	2000      	movs	r0, #0
}
 80045fe:	b011      	add	sp, #68	; 0x44
 8004600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004604:	4b40      	ldr	r3, [pc, #256]	; (8004708 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 8004606:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004608:	4b40      	ldr	r3, [pc, #256]	; (800470c <IKS01A3_MOTION_SENSOR_Init+0x210>)
 800460a:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800460c:	4b40      	ldr	r3, [pc, #256]	; (8004710 <IKS01A3_MOTION_SENSOR_Init+0x214>)
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800460e:	4e48      	ldr	r6, [pc, #288]	; (8004730 <IKS01A3_MOTION_SENSOR_Init+0x234>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004610:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004612:	4b40      	ldr	r3, [pc, #256]	; (8004714 <IKS01A3_MOTION_SENSOR_Init+0x218>)
 8004614:	930c      	str	r3, [sp, #48]	; 0x30
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8004616:	f10d 0820 	add.w	r8, sp, #32
  io_ctx.GetTick     = IKS01A3_GetTick;
 800461a:	4b40      	ldr	r3, [pc, #256]	; (800471c <IKS01A3_MOTION_SENSOR_Init+0x220>)
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800461c:	900a      	str	r0, [sp, #40]	; 0x28
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800461e:	22d7      	movs	r2, #215	; 0xd7
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004620:	930e      	str	r3, [sp, #56]	; 0x38
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8004622:	4641      	mov	r1, r8
  io_ctx.Delay       = IKS01A3_Delay;
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <IKS01A3_MOTION_SENSOR_Init+0x224>)
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8004626:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800462a:	4630      	mov	r0, r6
  io_ctx.Delay       = IKS01A3_Delay;
 800462c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800462e:	f7ff fbdb 	bl	8003de8 <LSM6DSO_RegisterBusIO>
 8004632:	2800      	cmp	r0, #0
 8004634:	f040 8105 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8004638:	f10d 0103 	add.w	r1, sp, #3
 800463c:	4630      	mov	r0, r6
 800463e:	f7fe fedf 	bl	8003400 <LSM6DSO_ReadID>
 8004642:	2800      	cmp	r0, #0
 8004644:	f040 80fd 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  else if (id != LSM6DSO_ID)
 8004648:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800464c:	2b6c      	cmp	r3, #108	; 0x6c
 800464e:	f040 80f8 	bne.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8004652:	a901      	add	r1, sp, #4
 8004654:	4630      	mov	r0, r6
 8004656:	f7fe fe43 	bl	80032e0 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800465a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800465e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004662:	f89d 2005 	ldrb.w	r2, [sp, #5]
    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8004666:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800473c <IKS01A3_MOTION_SENSOR_Init+0x240>
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800466a:	4f2e      	ldr	r7, [pc, #184]	; (8004724 <IKS01A3_MOTION_SENSOR_Init+0x228>)
    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800466c:	f8ca 6000 	str.w	r6, [sl]
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004676:	492c      	ldr	r1, [pc, #176]	; (8004728 <IKS01A3_MOTION_SENSOR_Init+0x22c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800467c:	f015 0901 	ands.w	r9, r5, #1
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8004680:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <IKS01A3_MOTION_SENSOR_Init+0x238>)
 8004682:	603b      	str	r3, [r7, #0]
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004684:	f040 80e2 	bne.w	800484c <IKS01A3_MOTION_SENSOR_Init+0x350>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004688:	f015 0b02 	ands.w	fp, r5, #2
 800468c:	d004      	beq.n	8004698 <IKS01A3_MOTION_SENSOR_Init+0x19c>
 800468e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	f000 8104 	beq.w	80048a0 <IKS01A3_MOTION_SENSOR_Init+0x3a4>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004698:	0768      	lsls	r0, r5, #29
 800469a:	f100 80d2 	bmi.w	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f8da 0000 	ldr.w	r0, [sl]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4641      	mov	r1, r8
 80046a8:	4798      	blx	r3
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f040 8104 	bne.w	80048b8 <IKS01A3_MOTION_SENSOR_Init+0x3bc>
      if (cap.Acc == 1U)
 80046b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf18      	it	ne
 80046b8:	4606      	movne	r6, r0
      if (cap.Gyro == 1U)
 80046ba:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
      if (cap.Acc == 1U)
 80046be:	bf01      	itttt	eq
 80046c0:	2602      	moveq	r6, #2
 80046c2:	2306      	moveq	r3, #6
 80046c4:	2203      	moveq	r2, #3
 80046c6:	2107      	moveq	r1, #7
 80046c8:	bf1e      	ittt	ne
 80046ca:	2304      	movne	r3, #4
 80046cc:	2201      	movne	r2, #1
 80046ce:	2105      	movne	r1, #5
      if (cap.Gyro == 1U)
 80046d0:	2801      	cmp	r0, #1
 80046d2:	bf08      	it	eq
 80046d4:	4616      	moveq	r6, r2
      if (cap.Magneto == 1U)
 80046d6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
      if (cap.Gyro == 1U)
 80046da:	bf08      	it	eq
 80046dc:	460b      	moveq	r3, r1
        component_functions |= MOTION_MAGNETO;
 80046de:	2a01      	cmp	r2, #1
 80046e0:	bf08      	it	eq
 80046e2:	461e      	moveq	r6, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80046e4:	f1b9 0f00 	cmp.w	r9, #0
 80046e8:	d081      	beq.n	80045ee <IKS01A3_MOTION_SENSOR_Init+0xf2>
 80046ea:	07f1      	lsls	r1, r6, #31
 80046ec:	f57f af7f 	bpl.w	80045ee <IKS01A3_MOTION_SENSOR_Init+0xf2>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <IKS01A3_MOTION_SENSOR_Init+0x23c>)
 80046f2:	f8da 0000 	ldr.w	r0, [sl]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4798      	blx	r3
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f43f af76 	beq.w	80045ee <IKS01A3_MOTION_SENSOR_Init+0xf2>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004702:	f06f 0004 	mvn.w	r0, #4
 8004706:	e707      	b.n	8004518 <IKS01A3_MOTION_SENSOR_Init+0x1c>
 8004708:	08001a1d 	.word	0x08001a1d
 800470c:	08001915 	.word	0x08001915
 8004710:	080019a5 	.word	0x080019a5
 8004714:	08001965 	.word	0x08001965
 8004718:	20016db0 	.word	0x20016db0
 800471c:	080019e5 	.word	0x080019e5
 8004720:	08004b89 	.word	0x08004b89
 8004724:	20016d80 	.word	0x20016d80
 8004728:	20016d74 	.word	0x20016d74
 800472c:	2000002c 	.word	0x2000002c
 8004730:	20016e20 	.word	0x20016e20
 8004734:	20000094 	.word	0x20000094
 8004738:	20016d8c 	.word	0x20016d8c
 800473c:	20016d68 	.word	0x20016d68
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
  io_ctx.Address     = LIS2MDL_I2C_ADD;
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004740:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <IKS01A3_MOTION_SENSOR_Init+0x3c4>)
 8004742:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004744:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <IKS01A3_MOTION_SENSOR_Init+0x3c8>)
 8004746:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004748:	4b5f      	ldr	r3, [pc, #380]	; (80048c8 <IKS01A3_MOTION_SENSOR_Init+0x3cc>)
 800474a:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800474c:	4b5f      	ldr	r3, [pc, #380]	; (80048cc <IKS01A3_MOTION_SENSOR_Init+0x3d0>)
  io_ctx.GetTick     = IKS01A3_GetTick;
  io_ctx.Delay       = IKS01A3_Delay;

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800474e:	4e60      	ldr	r6, [pc, #384]	; (80048d0 <IKS01A3_MOTION_SENSOR_Init+0x3d4>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004750:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004752:	4b60      	ldr	r3, [pc, #384]	; (80048d4 <IKS01A3_MOTION_SENSOR_Init+0x3d8>)
 8004754:	930e      	str	r3, [sp, #56]	; 0x38
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8004756:	f10d 0820 	add.w	r8, sp, #32
  io_ctx.Delay       = IKS01A3_Delay;
 800475a:	4b5f      	ldr	r3, [pc, #380]	; (80048d8 <IKS01A3_MOTION_SENSOR_Init+0x3dc>)
 800475c:	930f      	str	r3, [sp, #60]	; 0x3c
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800475e:	2200      	movs	r2, #0
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8004760:	233d      	movs	r3, #61	; 0x3d
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8004762:	4641      	mov	r1, r8
 8004764:	4630      	mov	r0, r6
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8004766:	920a      	str	r2, [sp, #40]	; 0x28
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8004768:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800476c:	f7fe fc94 	bl	8003098 <LIS2MDL_RegisterBusIO>
 8004770:	2800      	cmp	r0, #0
 8004772:	d166      	bne.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8004774:	f10d 0103 	add.w	r1, sp, #3
 8004778:	4630      	mov	r0, r6
 800477a:	f7fe fac1 	bl	8002d00 <LIS2MDL_ReadID>
 800477e:	2800      	cmp	r0, #0
 8004780:	d15f      	bne.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 8004782:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d15b      	bne.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800478a:	a901      	add	r1, sp, #4
 800478c:	4630      	mov	r0, r6
 800478e:	f7fe f92f 	bl	80029f0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004792:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004796:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800479a:	f89d 1005 	ldrb.w	r1, [sp, #5]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800479e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80048fc <IKS01A3_MOTION_SENSOR_Init+0x400>
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80047a2:	4f4e      	ldr	r7, [pc, #312]	; (80048dc <IKS01A3_MOTION_SENSOR_Init+0x3e0>)
    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80047a4:	f8ca 6008 	str.w	r6, [sl, #8]
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80047a8:	0093      	lsls	r3, r2, #2
 80047aa:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80047ae:	430b      	orrs	r3, r1
 80047b0:	494b      	ldr	r1, [pc, #300]	; (80048e0 <IKS01A3_MOTION_SENSOR_Init+0x3e4>)
 80047b2:	608b      	str	r3, [r1, #8]
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80047b4:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <IKS01A3_MOTION_SENSOR_Init+0x3e8>)
 80047b6:	60bb      	str	r3, [r7, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80047b8:	0769      	lsls	r1, r5, #29
 80047ba:	d438      	bmi.n	800482e <IKS01A3_MOTION_SENSOR_Init+0x332>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80047bc:	f015 0603 	ands.w	r6, r5, #3
 80047c0:	d13f      	bne.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f8da 0008 	ldr.w	r0, [sl, #8]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4641      	mov	r1, r8
 80047cc:	4798      	blx	r3
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d172      	bne.n	80048b8 <IKS01A3_MOTION_SENSOR_Init+0x3bc>
      if (cap.Acc == 1U)
 80047d2:	f89d 3020 	ldrb.w	r3, [sp, #32]
      if (cap.Gyro == 1U)
 80047d6:	f89d 7021 	ldrb.w	r7, [sp, #33]	; 0x21
      if (cap.Magneto == 1U)
 80047da:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
        component_functions |= MOTION_ACCELERO;
 80047de:	2b01      	cmp	r3, #1
 80047e0:	bf01      	itttt	eq
 80047e2:	2602      	moveq	r6, #2
 80047e4:	2306      	moveq	r3, #6
 80047e6:	2007      	moveq	r0, #7
 80047e8:	2103      	moveq	r1, #3
 80047ea:	bf1e      	ittt	ne
 80047ec:	2005      	movne	r0, #5
 80047ee:	2304      	movne	r3, #4
 80047f0:	2101      	movne	r1, #1
      if (cap.Gyro == 1U)
 80047f2:	2f01      	cmp	r7, #1
 80047f4:	bf04      	itt	eq
 80047f6:	4603      	moveq	r3, r0
 80047f8:	460e      	moveq	r6, r1
      if (cap.Magneto == 1U)
 80047fa:	f005 0b02 	and.w	fp, r5, #2
 80047fe:	2a01      	cmp	r2, #1
        component_functions |= MOTION_MAGNETO;
 8004800:	bf08      	it	eq
 8004802:	461e      	moveq	r6, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004804:	f1bb 0f00 	cmp.w	fp, #0
 8004808:	f43f aef5 	beq.w	80045f6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800480c:	07b2      	lsls	r2, r6, #30
 800480e:	f57f aef2 	bpl.w	80045f6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004812:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <IKS01A3_MOTION_SENSOR_Init+0x3ec>)
 8004814:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8004818:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800481c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4798      	blx	r3
 8004826:	2800      	cmp	r0, #0
 8004828:	f43f aee5 	beq.w	80045f6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800482c:	e769      	b.n	8004702 <IKS01A3_MOTION_SENSOR_Init+0x206>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800482e:	2a01      	cmp	r2, #1
 8004830:	d1c4      	bne.n	80047bc <IKS01A3_MOTION_SENSOR_Init+0x2c0>
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004832:	4a2d      	ldr	r2, [pc, #180]	; (80048e8 <IKS01A3_MOTION_SENSOR_Init+0x3ec>)
 8004834:	492d      	ldr	r1, [pc, #180]	; (80048ec <IKS01A3_MOTION_SENSOR_Init+0x3f0>)
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8004836:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004838:	6211      	str	r1, [r2, #32]
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800483a:	4630      	mov	r0, r6
 800483c:	4798      	blx	r3
 800483e:	2800      	cmp	r0, #0
 8004840:	d0bc      	beq.n	80047bc <IKS01A3_MOTION_SENSOR_Init+0x2c0>
        return BSP_ERROR_NO_INIT;
 8004842:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004846:	b011      	add	sp, #68	; 0x44
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800484c:	2a01      	cmp	r2, #1
 800484e:	f47f af1b 	bne.w	8004688 <IKS01A3_MOTION_SENSOR_Init+0x18c>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8004852:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <IKS01A3_MOTION_SENSOR_Init+0x3ec>)
 8004854:	4926      	ldr	r1, [pc, #152]	; (80048f0 <IKS01A3_MOTION_SENSOR_Init+0x3f4>)
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8004856:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8004858:	6011      	str	r1, [r2, #0]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800485a:	4630      	mov	r0, r6
 800485c:	4798      	blx	r3
 800485e:	2800      	cmp	r0, #0
 8004860:	d1ef      	bne.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
 8004862:	e711      	b.n	8004688 <IKS01A3_MOTION_SENSOR_Init+0x18c>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004864:	2a01      	cmp	r2, #1
 8004866:	f47f ae9d 	bne.w	80045a4 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800486a:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <IKS01A3_MOTION_SENSOR_Init+0x3ec>)
 800486c:	4921      	ldr	r1, [pc, #132]	; (80048f4 <IKS01A3_MOTION_SENSOR_Init+0x3f8>)
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800486e:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004870:	6111      	str	r1, [r2, #16]
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8004872:	4630      	mov	r0, r6
 8004874:	4798      	blx	r3
 8004876:	2800      	cmp	r0, #0
 8004878:	f43f ae94 	beq.w	80045a4 <IKS01A3_MOTION_SENSOR_Init+0xa8>
 800487c:	e7e1      	b.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800487e:	0770      	lsls	r0, r6, #29
 8004880:	f57f aebc 	bpl.w	80045fc <IKS01A3_MOTION_SENSOR_Init+0x100>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004884:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <IKS01A3_MOTION_SENSOR_Init+0x3ec>)
 8004886:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 800488a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800488e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4798      	blx	r3
 8004898:	2800      	cmp	r0, #0
 800489a:	f43f aeaf 	beq.w	80045fc <IKS01A3_MOTION_SENSOR_Init+0x100>
 800489e:	e730      	b.n	8004702 <IKS01A3_MOTION_SENSOR_Init+0x206>
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80048a2:	4a11      	ldr	r2, [pc, #68]	; (80048e8 <IKS01A3_MOTION_SENSOR_Init+0x3ec>)
 80048a4:	4914      	ldr	r1, [pc, #80]	; (80048f8 <IKS01A3_MOTION_SENSOR_Init+0x3fc>)
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8da 0000 	ldr.w	r0, [sl]
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80048ac:	6051      	str	r1, [r2, #4]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80048ae:	4798      	blx	r3
 80048b0:	2800      	cmp	r0, #0
 80048b2:	f43f aef1 	beq.w	8004698 <IKS01A3_MOTION_SENSOR_Init+0x19c>
 80048b6:	e7c4      	b.n	8004842 <IKS01A3_MOTION_SENSOR_Init+0x346>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80048b8:	f06f 0006 	mvn.w	r0, #6
 80048bc:	e62c      	b.n	8004518 <IKS01A3_MOTION_SENSOR_Init+0x1c>
 80048be:	bf00      	nop
 80048c0:	08001a1d 	.word	0x08001a1d
 80048c4:	08001915 	.word	0x08001915
 80048c8:	080019a5 	.word	0x080019a5
 80048cc:	08001965 	.word	0x08001965
 80048d0:	20016dec 	.word	0x20016dec
 80048d4:	080019e5 	.word	0x080019e5
 80048d8:	08004b89 	.word	0x08004b89
 80048dc:	20016d80 	.word	0x20016d80
 80048e0:	20016d74 	.word	0x20016d74
 80048e4:	2000003c 	.word	0x2000003c
 80048e8:	20016d8c 	.word	0x20016d8c
 80048ec:	2000004c 	.word	0x2000004c
 80048f0:	200000a4 	.word	0x200000a4
 80048f4:	20000008 	.word	0x20000008
 80048f8:	20000070 	.word	0x20000070
 80048fc:	20016d68 	.word	0x20016d68

08004900 <IKS01A3_MOTION_SENSOR_DeInit>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004900:	2802      	cmp	r0, #2
 8004902:	d80d      	bhi.n	8004920 <IKS01A3_MOTION_SENSOR_DeInit+0x20>
{
 8004904:	b508      	push	{r3, lr}
  else if (MotionDrv[Instance]->DeInit(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <IKS01A3_MOTION_SENSOR_DeInit+0x28>)
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <IKS01A3_MOTION_SENSOR_DeInit+0x2c>)
 800490a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800490e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4798      	blx	r3
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004916:	2800      	cmp	r0, #0
 8004918:	bf18      	it	ne
 800491a:	f06f 0004 	mvnne.w	r0, #4
}
 800491e:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004920:	f06f 0001 	mvn.w	r0, #1
}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20016d80 	.word	0x20016d80
 800492c:	20016d68 	.word	0x20016d68

08004930 <IKS01A3_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004930:	2802      	cmp	r0, #2
 8004932:	d81e      	bhi.n	8004972 <IKS01A3_MOTION_SENSOR_Enable+0x42>
{
 8004934:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <IKS01A3_MOTION_SENSOR_Enable+0x48>)
 8004938:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800493c:	ea01 0203 	and.w	r2, r1, r3
 8004940:	ea31 0303 	bics.w	r3, r1, r3
 8004944:	d112      	bne.n	800496c <IKS01A3_MOTION_SENSOR_Enable+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004946:	490d      	ldr	r1, [pc, #52]	; (800497c <IKS01A3_MOTION_SENSOR_Enable+0x4c>)
 8004948:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800494c:	490c      	ldr	r1, [pc, #48]	; (8004980 <IKS01A3_MOTION_SENSOR_Enable+0x50>)
 800494e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004952:	4413      	add	r3, r2
 8004954:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <IKS01A3_MOTION_SENSOR_Enable+0x54>)
 8004956:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800495a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004962:	2800      	cmp	r0, #0
 8004964:	bf18      	it	ne
 8004966:	f06f 0004 	mvnne.w	r0, #4
}
 800496a:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800496c:	f06f 0001 	mvn.w	r0, #1
}
 8004970:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004972:	f06f 0001 	mvn.w	r0, #1
}
 8004976:	4770      	bx	lr
 8004978:	20016d74 	.word	0x20016d74
 800497c:	0800a26c 	.word	0x0800a26c
 8004980:	20016d8c 	.word	0x20016d8c
 8004984:	20016d68 	.word	0x20016d68

08004988 <IKS01A3_MOTION_SENSOR_Disable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004988:	2802      	cmp	r0, #2
 800498a:	d81e      	bhi.n	80049ca <IKS01A3_MOTION_SENSOR_Disable+0x42>
{
 800498c:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <IKS01A3_MOTION_SENSOR_Disable+0x48>)
 8004990:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004994:	ea01 0203 	and.w	r2, r1, r3
 8004998:	ea31 0303 	bics.w	r3, r1, r3
 800499c:	d112      	bne.n	80049c4 <IKS01A3_MOTION_SENSOR_Disable+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800499e:	490d      	ldr	r1, [pc, #52]	; (80049d4 <IKS01A3_MOTION_SENSOR_Disable+0x4c>)
 80049a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80049a4:	490c      	ldr	r1, [pc, #48]	; (80049d8 <IKS01A3_MOTION_SENSOR_Disable+0x50>)
 80049a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80049aa:	4413      	add	r3, r2
 80049ac:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <IKS01A3_MOTION_SENSOR_Disable+0x54>)
 80049ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049b2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80049ba:	2800      	cmp	r0, #0
 80049bc:	bf18      	it	ne
 80049be:	f06f 0004 	mvnne.w	r0, #4
}
 80049c2:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80049c4:	f06f 0001 	mvn.w	r0, #1
}
 80049c8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80049ca:	f06f 0001 	mvn.w	r0, #1
}
 80049ce:	4770      	bx	lr
 80049d0:	20016d74 	.word	0x20016d74
 80049d4:	0800a26c 	.word	0x0800a26c
 80049d8:	20016d8c 	.word	0x20016d8c
 80049dc:	20016d68 	.word	0x20016d68

080049e0 <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80049e0:	2802      	cmp	r0, #2
{
 80049e2:	4603      	mov	r3, r0
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80049e4:	d81d      	bhi.n	8004a22 <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80049ea:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <IKS01A3_MOTION_SENSOR_GetAxes+0x48>)
 80049ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049f0:	ea00 0c02 	and.w	ip, r0, r2
 80049f4:	ea30 0202 	bics.w	r2, r0, r2
 80049f8:	d113      	bne.n	8004a22 <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80049fa:	480c      	ldr	r0, [pc, #48]	; (8004a2c <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 80049fc:	4a0c      	ldr	r2, [pc, #48]	; (8004a30 <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
{
 80049fe:	b510      	push	{r4, lr}
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004a00:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 8004a04:	480b      	ldr	r0, [pc, #44]	; (8004a34 <IKS01A3_MOTION_SENSOR_GetAxes+0x54>)
 8004a06:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004a0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a0e:	4423      	add	r3, r4
 8004a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	bf18      	it	ne
 8004a1c:	f06f 0004 	mvnne.w	r0, #4
}
 8004a20:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004a22:	f06f 0001 	mvn.w	r0, #1
}
 8004a26:	4770      	bx	lr
 8004a28:	20016d74 	.word	0x20016d74
 8004a2c:	0800a26c 	.word	0x0800a26c
 8004a30:	20016d8c 	.word	0x20016d8c
 8004a34:	20016d68 	.word	0x20016d68

08004a38 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004a38:	2802      	cmp	r0, #2
{
 8004a3a:	4603      	mov	r3, r0
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004a3c:	d81d      	bhi.n	8004a7a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x42>
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004a42:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x48>)
 8004a44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a48:	ea00 0c02 	and.w	ip, r0, r2
 8004a4c:	ea30 0202 	bics.w	r2, r0, r2
 8004a50:	d113      	bne.n	8004a7a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004a52:	480c      	ldr	r0, [pc, #48]	; (8004a84 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x50>)
{
 8004a56:	b510      	push	{r4, lr}
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004a58:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 8004a5c:	480b      	ldr	r0, [pc, #44]	; (8004a8c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x54>)
 8004a5e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a66:	4423      	add	r3, r4
 8004a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a70:	2800      	cmp	r0, #0
 8004a72:	bf18      	it	ne
 8004a74:	f06f 0004 	mvnne.w	r0, #4
}
 8004a78:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004a7a:	f06f 0001 	mvn.w	r0, #1
}
 8004a7e:	4770      	bx	lr
 8004a80:	20016d74 	.word	0x20016d74
 8004a84:	0800a26c 	.word	0x0800a26c
 8004a88:	20016d8c 	.word	0x20016d8c
 8004a8c:	20016d68 	.word	0x20016d68

08004a90 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8004a90:	2802      	cmp	r0, #2
 8004a92:	d81e      	bhi.n	8004ad2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x42>
{
 8004a94:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x48>)
 8004a98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004a9c:	ea01 0203 	and.w	r2, r1, r3
 8004aa0:	ea31 0303 	bics.w	r3, r1, r3
 8004aa4:	d112      	bne.n	8004acc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004aa6:	490d      	ldr	r1, [pc, #52]	; (8004adc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8004aa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004aac:	490c      	ldr	r1, [pc, #48]	; (8004ae0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x50>)
 8004aae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	; (8004ae4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x54>)
 8004ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aba:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	bf18      	it	ne
 8004ac6:	f06f 0004 	mvnne.w	r0, #4
}
 8004aca:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004acc:	f06f 0001 	mvn.w	r0, #1
}
 8004ad0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004ad2:	f06f 0001 	mvn.w	r0, #1
}
 8004ad6:	4770      	bx	lr
 8004ad8:	20016d74 	.word	0x20016d74
 8004adc:	0800a26c 	.word	0x0800a26c
 8004ae0:	20016d8c 	.word	0x20016d8c
 8004ae4:	20016d68 	.word	0x20016d68

08004ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ae8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <HAL_InitTick+0x3c>)
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_InitTick+0x40>)
 8004aee:	7812      	ldrb	r2, [r2, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
{
 8004af2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004af8:	fbb0 f0f2 	udiv	r0, r0, r2
 8004afc:	fbb3 f0f0 	udiv	r0, r3, r0
 8004b00:	f000 f8b2 	bl	8004c68 <HAL_SYSTICK_Config>
 8004b04:	b908      	cbnz	r0, 8004b0a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b06:	2d0f      	cmp	r5, #15
 8004b08:	d901      	bls.n	8004b0e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004b0a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b10:	4602      	mov	r2, r0
 8004b12:	4629      	mov	r1, r5
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	f000 f85a 	bl	8004bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_InitTick+0x44>)
 8004b1e:	4620      	mov	r0, r4
 8004b20:	601d      	str	r5, [r3, #0]
}
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	200000c8 	.word	0x200000c8
 8004b28:	20000004 	.word	0x20000004
 8004b2c:	200000cc 	.word	0x200000cc

08004b30 <HAL_Init>:
{
 8004b30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_Init+0x30>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	f000 f82d 	bl	8004bac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7ff ffc8 	bl	8004ae8 <HAL_InitTick>
  HAL_MspInit();
 8004b58:	f7fc fdc2 	bl	80016e0 <HAL_MspInit>
}
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	bd08      	pop	{r3, pc}
 8004b60:	40023c00 	.word	0x40023c00

08004b64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b64:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <HAL_IncTick+0x10>)
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_IncTick+0x14>)
 8004b68:	6811      	ldr	r1, [r2, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	440b      	add	r3, r1
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20016e58 	.word	0x20016e58
 8004b78:	200000c8 	.word	0x200000c8

08004b7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004b7c:	4b01      	ldr	r3, [pc, #4]	; (8004b84 <HAL_GetTick+0x8>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20016e58 	.word	0x20016e58

08004b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b8c:	f7ff fff6 	bl	8004b7c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b90:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004b92:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004b94:	d002      	beq.n	8004b9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <HAL_Delay+0x20>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b9c:	f7ff ffee 	bl	8004b7c <HAL_GetTick>
 8004ba0:	1b43      	subs	r3, r0, r5
 8004ba2:	42a3      	cmp	r3, r4
 8004ba4:	d3fa      	bcc.n	8004b9c <HAL_Delay+0x14>
  {
  }
}
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	200000c8 	.word	0x200000c8

08004bac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bac:	4907      	ldr	r1, [pc, #28]	; (8004bcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004bae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bbc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bbe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004bc6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <HAL_NVIC_SetPriority+0x74>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bd8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bda:	f1c3 0e07 	rsb	lr, r3, #7
 8004bde:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be6:	bf28      	it	cs
 8004be8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bec:	f1bc 0f06 	cmp.w	ip, #6
 8004bf0:	d91b      	bls.n	8004c2a <HAL_NVIC_SetPriority+0x5a>
 8004bf2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf4:	f04f 3cff 	mov.w	ip, #4294967295
 8004bf8:	fa0c fc03 	lsl.w	ip, ip, r3
 8004bfc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c00:	f04f 3cff 	mov.w	ip, #4294967295
 8004c04:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004c08:	ea21 010c 	bic.w	r1, r1, ip
 8004c0c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004c0e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004c14:	db0c      	blt.n	8004c30 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c16:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c1a:	0109      	lsls	r1, r1, #4
 8004c1c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c20:	b2c9      	uxtb	r1, r1
 8004c22:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c26:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c2a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	e7e7      	b.n	8004c00 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_NVIC_SetPriority+0x78>)
 8004c32:	f000 000f 	and.w	r0, r0, #15
 8004c36:	0109      	lsls	r1, r1, #4
 8004c38:	4403      	add	r3, r0
 8004c3a:	b2c9      	uxtb	r1, r1
 8004c3c:	7619      	strb	r1, [r3, #24]
 8004c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c42:	bf00      	nop
 8004c44:	e000ed00 	.word	0xe000ed00
 8004c48:	e000ecfc 	.word	0xe000ecfc

08004c4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	db08      	blt.n	8004c62 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c50:	0941      	lsrs	r1, r0, #5
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <HAL_NVIC_EnableIRQ+0x18>)
 8004c54:	f000 001f 	and.w	r0, r0, #31
 8004c58:	2301      	movs	r3, #1
 8004c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c5e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004c62:	4770      	bx	lr
 8004c64:	e000e100 	.word	0xe000e100

08004c68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	3801      	subs	r0, #1
 8004c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c6e:	d210      	bcs.n	8004c92 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c70:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c76:	4c08      	ldr	r4, [pc, #32]	; (8004c98 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004c7e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c82:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c84:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c86:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	6119      	str	r1, [r3, #16]
 8004c90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c92:	2001      	movs	r0, #1
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ca4:	4e70      	ldr	r6, [pc, #448]	; (8004e68 <HAL_GPIO_Init+0x1cc>)
{
 8004ca6:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca8:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8004caa:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cae:	4689      	mov	r9, r1
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	f102 0202 	add.w	r2, r2, #2
 8004cba:	d078      	beq.n	8004dae <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8004cbc:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cc0:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8004cc4:	43a1      	bics	r1, r4
 8004cc6:	d1f4      	bne.n	8004cb2 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cc8:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8004ccc:	f00c 0103 	and.w	r1, ip, #3
 8004cd0:	1e4d      	subs	r5, r1, #1
 8004cd2:	2d01      	cmp	r5, #1
 8004cd4:	d96e      	bls.n	8004db4 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd6:	2903      	cmp	r1, #3
 8004cd8:	f040 80ae 	bne.w	8004e38 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cdc:	4091      	lsls	r1, r2
 8004cde:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8004ce0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ce2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce4:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ce6:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004cea:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cec:	d0e1      	beq.n	8004cb2 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cee:	4d5f      	ldr	r5, [pc, #380]	; (8004e6c <HAL_GPIO_Init+0x1d0>)
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	9103      	str	r1, [sp, #12]
 8004cf4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004cf6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004cfa:	6469      	str	r1, [r5, #68]	; 0x44
 8004cfc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004cfe:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004d02:	9103      	str	r1, [sp, #12]
 8004d04:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d06:	f023 0103 	bic.w	r1, r3, #3
 8004d0a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004d0e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d12:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d16:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d1a:	00bf      	lsls	r7, r7, #2
 8004d1c:	250f      	movs	r5, #15
 8004d1e:	40bd      	lsls	r5, r7
 8004d20:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d24:	4d52      	ldr	r5, [pc, #328]	; (8004e70 <HAL_GPIO_Init+0x1d4>)
 8004d26:	42a8      	cmp	r0, r5
 8004d28:	d017      	beq.n	8004d5a <HAL_GPIO_Init+0xbe>
 8004d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d2e:	42a8      	cmp	r0, r5
 8004d30:	f000 8086 	beq.w	8004e40 <HAL_GPIO_Init+0x1a4>
 8004d34:	4d4f      	ldr	r5, [pc, #316]	; (8004e74 <HAL_GPIO_Init+0x1d8>)
 8004d36:	42a8      	cmp	r0, r5
 8004d38:	f000 8087 	beq.w	8004e4a <HAL_GPIO_Init+0x1ae>
 8004d3c:	4d4e      	ldr	r5, [pc, #312]	; (8004e78 <HAL_GPIO_Init+0x1dc>)
 8004d3e:	42a8      	cmp	r0, r5
 8004d40:	f000 808a 	beq.w	8004e58 <HAL_GPIO_Init+0x1bc>
 8004d44:	4d4d      	ldr	r5, [pc, #308]	; (8004e7c <HAL_GPIO_Init+0x1e0>)
 8004d46:	42a8      	cmp	r0, r5
 8004d48:	bf0c      	ite	eq
 8004d4a:	f04f 0e04 	moveq.w	lr, #4
 8004d4e:	f04f 0e07 	movne.w	lr, #7
 8004d52:	fa0e f707 	lsl.w	r7, lr, r7
 8004d56:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d5a:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004d5e:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004d60:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d64:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004d68:	bf0c      	ite	eq
 8004d6a:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004d6c:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8004d70:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8004d72:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d74:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004d78:	bf0c      	ite	eq
 8004d7a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004d7c:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8004d80:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8004d82:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d84:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004d88:	bf0c      	ite	eq
 8004d8a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004d8c:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8004d90:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d92:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d94:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d98:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004d9c:	bf0c      	ite	eq
 8004d9e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004da0:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da4:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8004da6:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da8:	f102 0202 	add.w	r2, r2, #2
 8004dac:	d186      	bne.n	8004cbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004dae:	b005      	add	sp, #20
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004db4:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8004db8:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dba:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dbe:	2503      	movs	r5, #3
 8004dc0:	fa05 fe02 	lsl.w	lr, r5, r2
 8004dc4:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dc8:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8004dcc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004dce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dd0:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd4:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dd8:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004ddc:	409f      	lsls	r7, r3
 8004dde:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004de2:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004de4:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004de6:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dea:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004dee:	4097      	lsls	r7, r2
 8004df0:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df4:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8004df6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df8:	fa01 f102 	lsl.w	r1, r1, r2
 8004dfc:	f47f af70 	bne.w	8004ce0 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8004e00:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004e04:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e08:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004e0c:	f8de 7020 	ldr.w	r7, [lr, #32]
 8004e10:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e12:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e16:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e1a:	fa07 f708 	lsl.w	r7, r7, r8
 8004e1e:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e20:	270f      	movs	r7, #15
 8004e22:	fa07 f808 	lsl.w	r8, r7, r8
 8004e26:	9f00      	ldr	r7, [sp, #0]
 8004e28:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e2c:	9f01      	ldr	r7, [sp, #4]
 8004e2e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004e32:	f8ce 7020 	str.w	r7, [lr, #32]
 8004e36:	e753      	b.n	8004ce0 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e38:	2503      	movs	r5, #3
 8004e3a:	4095      	lsls	r5, r2
 8004e3c:	43ed      	mvns	r5, r5
 8004e3e:	e7d1      	b.n	8004de4 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e40:	fa0a f707 	lsl.w	r7, sl, r7
 8004e44:	ea48 0807 	orr.w	r8, r8, r7
 8004e48:	e787      	b.n	8004d5a <HAL_GPIO_Init+0xbe>
 8004e4a:	f04f 0e02 	mov.w	lr, #2
 8004e4e:	fa0e f707 	lsl.w	r7, lr, r7
 8004e52:	ea48 0807 	orr.w	r8, r8, r7
 8004e56:	e780      	b.n	8004d5a <HAL_GPIO_Init+0xbe>
 8004e58:	f04f 0e03 	mov.w	lr, #3
 8004e5c:	fa0e f707 	lsl.w	r7, lr, r7
 8004e60:	ea48 0807 	orr.w	r8, r8, r7
 8004e64:	e779      	b.n	8004d5a <HAL_GPIO_Init+0xbe>
 8004e66:	bf00      	nop
 8004e68:	40013c00 	.word	0x40013c00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40020000 	.word	0x40020000
 8004e74:	40020800 	.word	0x40020800
 8004e78:	40020c00 	.word	0x40020c00
 8004e7c:	40021000 	.word	0x40021000

08004e80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e84:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004e86:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8004f94 <HAL_GPIO_DeInit+0x114>
    ioposition = 0x01U << position;
 8004e8a:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e8c:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e90:	f04f 0a03 	mov.w	sl, #3
 8004e94:	e002      	b.n	8004e9c <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e96:	3301      	adds	r3, #1
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d064      	beq.n	8004f66 <HAL_GPIO_DeInit+0xe6>
    ioposition = 0x01U << position;
 8004e9c:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8004ea0:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004ea4:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 8004ea8:	d1f5      	bne.n	8004e96 <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004eaa:	f023 0503 	bic.w	r5, r3, #3
 8004eae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004eb2:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004eb6:	f003 0403 	and.w	r4, r3, #3
 8004eba:	00a4      	lsls	r4, r4, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004ebc:	f8d5 e008 	ldr.w	lr, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004ec0:	fa09 f804 	lsl.w	r8, r9, r4
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004ec4:	4558      	cmp	r0, fp
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004ec6:	4627      	mov	r7, r4
 8004ec8:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004ecc:	d04d      	beq.n	8004f6a <HAL_GPIO_DeInit+0xea>
 8004ece:	4c2c      	ldr	r4, [pc, #176]	; (8004f80 <HAL_GPIO_DeInit+0x100>)
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d04c      	beq.n	8004f6e <HAL_GPIO_DeInit+0xee>
 8004ed4:	4c2b      	ldr	r4, [pc, #172]	; (8004f84 <HAL_GPIO_DeInit+0x104>)
 8004ed6:	42a0      	cmp	r0, r4
 8004ed8:	d04c      	beq.n	8004f74 <HAL_GPIO_DeInit+0xf4>
 8004eda:	4c2b      	ldr	r4, [pc, #172]	; (8004f88 <HAL_GPIO_DeInit+0x108>)
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d04c      	beq.n	8004f7a <HAL_GPIO_DeInit+0xfa>
 8004ee0:	4c2a      	ldr	r4, [pc, #168]	; (8004f8c <HAL_GPIO_DeInit+0x10c>)
 8004ee2:	42a0      	cmp	r0, r4
 8004ee4:	bf14      	ite	ne
 8004ee6:	2407      	movne	r4, #7
 8004ee8:	2404      	moveq	r4, #4
 8004eea:	40bc      	lsls	r4, r7
 8004eec:	45a6      	cmp	lr, r4
 8004eee:	d115      	bne.n	8004f1c <HAL_GPIO_DeInit+0x9c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ef0:	4c27      	ldr	r4, [pc, #156]	; (8004f90 <HAL_GPIO_DeInit+0x110>)
 8004ef2:	4f27      	ldr	r7, [pc, #156]	; (8004f90 <HAL_GPIO_DeInit+0x110>)
 8004ef4:	6824      	ldr	r4, [r4, #0]
 8004ef6:	ea24 040c 	bic.w	r4, r4, ip
 8004efa:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004efc:	687c      	ldr	r4, [r7, #4]
 8004efe:	ea24 040c 	bic.w	r4, r4, ip
 8004f02:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f04:	68fc      	ldr	r4, [r7, #12]
 8004f06:	ea24 040c 	bic.w	r4, r4, ip
 8004f0a:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f0c:	68bc      	ldr	r4, [r7, #8]
 8004f0e:	ea24 040c 	bic.w	r4, r4, ip
 8004f12:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f14:	68ac      	ldr	r4, [r5, #8]
 8004f16:	ea24 0408 	bic.w	r4, r4, r8
 8004f1a:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1c:	6805      	ldr	r5, [r0, #0]
 8004f1e:	005c      	lsls	r4, r3, #1
 8004f20:	fa0a f404 	lsl.w	r4, sl, r4

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f24:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f28:	ea25 0504 	bic.w	r5, r5, r4
 8004f2c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004f30:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f32:	f003 0507 	and.w	r5, r3, #7
 8004f36:	f8dc e020 	ldr.w	lr, [ip, #32]
 8004f3a:	00ad      	lsls	r5, r5, #2
 8004f3c:	fa09 f505 	lsl.w	r5, r9, r5
 8004f40:	ea2e 0505 	bic.w	r5, lr, r5
 8004f44:	f8cc 5020 	str.w	r5, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f48:	68c5      	ldr	r5, [r0, #12]
 8004f4a:	ea25 0504 	bic.w	r5, r5, r4
 8004f4e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f50:	6845      	ldr	r5, [r0, #4]
 8004f52:	ea25 0202 	bic.w	r2, r5, r2
 8004f56:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f58:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5a:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f5c:	ea22 0404 	bic.w	r4, r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f60:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f62:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f64:	d19a      	bne.n	8004e9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	2400      	movs	r4, #0
 8004f6c:	e7be      	b.n	8004eec <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f6e:	fa06 f407 	lsl.w	r4, r6, r7
 8004f72:	e7bb      	b.n	8004eec <HAL_GPIO_DeInit+0x6c>
 8004f74:	2402      	movs	r4, #2
 8004f76:	40bc      	lsls	r4, r7
 8004f78:	e7b8      	b.n	8004eec <HAL_GPIO_DeInit+0x6c>
 8004f7a:	fa0a f407 	lsl.w	r4, sl, r7
 8004f7e:	e7b5      	b.n	8004eec <HAL_GPIO_DeInit+0x6c>
 8004f80:	40020400 	.word	0x40020400
 8004f84:	40020800 	.word	0x40020800
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40013c00 	.word	0x40013c00
 8004f94:	40020000 	.word	0x40020000

08004f98 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f98:	6903      	ldr	r3, [r0, #16]
 8004f9a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004f9c:	bf14      	ite	ne
 8004f9e:	2001      	movne	r0, #1
 8004fa0:	2000      	moveq	r0, #0
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fa4:	b902      	cbnz	r2, 8004fa8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fa6:	0409      	lsls	r1, r1, #16
 8004fa8:	6181      	str	r1, [r0, #24]
  }
}
 8004faa:	4770      	bx	lr

08004fac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb0:	6804      	ldr	r4, [r0, #0]
{
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb6:	6823      	ldr	r3, [r4, #0]
{
 8004fb8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8004fbc:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	468a      	mov	sl, r1
 8004fc8:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004fcc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004fd0:	d135      	bne.n	800503e <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd2:	6965      	ldr	r5, [r4, #20]
 8004fd4:	07e8      	lsls	r0, r5, #31
 8004fd6:	d5fc      	bpl.n	8004fd2 <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd8:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8004fdc:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004fde:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004fe2:	d003      	beq.n	8004fec <I2C_RequestMemoryWrite+0x40>
 8004fe4:	e04e      	b.n	8005084 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe6:	6961      	ldr	r1, [r4, #20]
 8004fe8:	054d      	lsls	r5, r1, #21
 8004fea:	d45c      	bmi.n	80050a6 <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fec:	6961      	ldr	r1, [r4, #20]
 8004fee:	078b      	lsls	r3, r1, #30
 8004ff0:	d5f9      	bpl.n	8004fe6 <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	6963      	ldr	r3, [r4, #20]
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	69a3      	ldr	r3, [r4, #24]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005000:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005004:	f040 8087 	bne.w	8005116 <I2C_RequestMemoryWrite+0x16a>
 8005008:	6963      	ldr	r3, [r4, #20]
 800500a:	061a      	lsls	r2, r3, #24
 800500c:	d463      	bmi.n	80050d6 <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500e:	6963      	ldr	r3, [r4, #20]
 8005010:	055b      	lsls	r3, r3, #21
 8005012:	d5f9      	bpl.n	8005008 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005016:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800501c:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005020:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005028:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	f043 0304 	orr.w	r3, r3, #4
 8005032:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005034:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8005036:	2b04      	cmp	r3, #4
 8005038:	d066      	beq.n	8005108 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 800503a:	2001      	movs	r0, #1
 800503c:	e01f      	b.n	800507e <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800503e:	6963      	ldr	r3, [r4, #20]
 8005040:	07d9      	lsls	r1, r3, #31
 8005042:	d4c9      	bmi.n	8004fd8 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7ff fd9a 	bl	8004b7c <HAL_GetTick>
 8005048:	eba0 000b 	sub.w	r0, r0, fp
 800504c:	4581      	cmp	r9, r0
 800504e:	d304      	bcc.n	800505a <I2C_RequestMemoryWrite+0xae>
 8005050:	f1b9 0f00 	cmp.w	r9, #0
 8005054:	d001      	beq.n	800505a <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005056:	6834      	ldr	r4, [r6, #0]
 8005058:	e7b8      	b.n	8004fcc <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800505a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800505c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800505e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005060:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005064:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506a:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 800506c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	f042 0220 	orr.w	r2, r2, #32
 8005074:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	05dc      	lsls	r4, r3, #23
 800507a:	d435      	bmi.n	80050e8 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 800507c:	2003      	movs	r0, #3
}
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005084:	6963      	ldr	r3, [r4, #20]
 8005086:	0798      	lsls	r0, r3, #30
 8005088:	d4b3      	bmi.n	8004ff2 <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508a:	6963      	ldr	r3, [r4, #20]
 800508c:	055a      	lsls	r2, r3, #21
 800508e:	d40a      	bmi.n	80050a6 <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005090:	f7ff fd74 	bl	8004b7c <HAL_GetTick>
 8005094:	eba0 000b 	sub.w	r0, r0, fp
 8005098:	4581      	cmp	r9, r0
 800509a:	d34e      	bcc.n	800513a <I2C_RequestMemoryWrite+0x18e>
 800509c:	f1b9 0f00 	cmp.w	r9, #0
 80050a0:	d04b      	beq.n	800513a <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a2:	6834      	ldr	r4, [r6, #0]
 80050a4:	e79b      	b.n	8004fde <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ac:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ae:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b4:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b6:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b8:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ba:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050be:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050c2:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80050c4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050c8:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 80050cc:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ce:	6433      	str	r3, [r6, #64]	; 0x40
}
 80050d0:	b003      	add	sp, #12
 80050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050d6:	f1b8 0f01 	cmp.w	r8, #1
 80050da:	d109      	bne.n	80050f0 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050dc:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 80050de:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e0:	6127      	str	r7, [r4, #16]
}
 80050e2:	b003      	add	sp, #12
 80050e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ec:	6433      	str	r3, [r6, #64]	; 0x40
 80050ee:	e7c5      	b.n	800507c <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050f0:	0a3b      	lsrs	r3, r7, #8
 80050f2:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80050f8:	d12e      	bne.n	8005158 <I2C_RequestMemoryWrite+0x1ac>
 80050fa:	6963      	ldr	r3, [r4, #20]
 80050fc:	0619      	lsls	r1, r3, #24
 80050fe:	d4ed      	bmi.n	80050dc <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005100:	6963      	ldr	r3, [r4, #20]
 8005102:	055a      	lsls	r2, r3, #21
 8005104:	d5f9      	bpl.n	80050fa <I2C_RequestMemoryWrite+0x14e>
 8005106:	e785      	b.n	8005014 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	6832      	ldr	r2, [r6, #0]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8005110:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e7b3      	b.n	800507e <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	061d      	lsls	r5, r3, #24
 800511a:	d4dc      	bmi.n	80050d6 <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800511c:	6963      	ldr	r3, [r4, #20]
 800511e:	0559      	lsls	r1, r3, #21
 8005120:	f53f af78 	bmi.w	8005014 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005124:	f7ff fd2a 	bl	8004b7c <HAL_GetTick>
 8005128:	eba0 000b 	sub.w	r0, r0, fp
 800512c:	4581      	cmp	r9, r0
 800512e:	d325      	bcc.n	800517c <I2C_RequestMemoryWrite+0x1d0>
 8005130:	f1b9 0f00 	cmp.w	r9, #0
 8005134:	d022      	beq.n	800517c <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005136:	6834      	ldr	r4, [r6, #0]
 8005138:	e762      	b.n	8005000 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800513a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800513c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800513e:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005140:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005144:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005148:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800514a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8005154:	2001      	movs	r0, #1
 8005156:	e792      	b.n	800507e <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005158:	6963      	ldr	r3, [r4, #20]
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	d4be      	bmi.n	80050dc <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800515e:	6963      	ldr	r3, [r4, #20]
 8005160:	0558      	lsls	r0, r3, #21
 8005162:	f53f af57 	bmi.w	8005014 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7ff fd09 	bl	8004b7c <HAL_GetTick>
 800516a:	eba0 000b 	sub.w	r0, r0, fp
 800516e:	4581      	cmp	r9, r0
 8005170:	d304      	bcc.n	800517c <I2C_RequestMemoryWrite+0x1d0>
 8005172:	f1b9 0f00 	cmp.w	r9, #0
 8005176:	d001      	beq.n	800517c <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005178:	6834      	ldr	r4, [r6, #0]
 800517a:	e7bb      	b.n	80050f4 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800517c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800517e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005180:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005182:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005186:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800518c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005190:	f043 0320 	orr.w	r3, r3, #32
 8005194:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005196:	e74d      	b.n	8005034 <I2C_RequestMemoryWrite+0x88>

08005198 <I2C_RequestMemoryRead>:
{
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	6804      	ldr	r4, [r0, #0]
{
 800519e:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a6:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a8:	6823      	ldr	r3, [r4, #0]
{
 80051aa:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80051b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051b4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b8:	6023      	str	r3, [r4, #0]
{
 80051ba:	4606      	mov	r6, r0
 80051bc:	468b      	mov	fp, r1
 80051be:	4617      	mov	r7, r2
 80051c0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051c4:	d139      	bne.n	800523a <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c6:	6965      	ldr	r5, [r4, #20]
 80051c8:	07eb      	lsls	r3, r5, #31
 80051ca:	d5fc      	bpl.n	80051c6 <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051cc:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80051d0:	6123      	str	r3, [r4, #16]
 80051d2:	fa5f fb8b 	uxtb.w	fp, fp
 80051d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051da:	d003      	beq.n	80051e4 <I2C_RequestMemoryRead+0x4c>
 80051dc:	e068      	b.n	80052b0 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051de:	6961      	ldr	r1, [r4, #20]
 80051e0:	054a      	lsls	r2, r1, #21
 80051e2:	d450      	bmi.n	8005286 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e4:	6961      	ldr	r1, [r4, #20]
 80051e6:	0789      	lsls	r1, r1, #30
 80051e8:	d5f9      	bpl.n	80051de <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ea:	2300      	movs	r3, #0
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	6963      	ldr	r3, [r4, #20]
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	69a3      	ldr	r3, [r4, #24]
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051fc:	f040 80b8 	bne.w	8005370 <I2C_RequestMemoryRead+0x1d8>
 8005200:	6963      	ldr	r3, [r4, #20]
 8005202:	0618      	lsls	r0, r3, #24
 8005204:	d467      	bmi.n	80052d6 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005206:	6963      	ldr	r3, [r4, #20]
 8005208:	0559      	lsls	r1, r3, #21
 800520a:	d5f9      	bpl.n	8005200 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800520c:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800520e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005210:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005214:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005216:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005218:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005220:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005222:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d06c      	beq.n	800530c <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 8005232:	2001      	movs	r0, #1
}
 8005234:	b003      	add	sp, #12
 8005236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800523a:	6963      	ldr	r3, [r4, #20]
 800523c:	07dd      	lsls	r5, r3, #31
 800523e:	d4c5      	bmi.n	80051cc <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7ff fc9c 	bl	8004b7c <HAL_GetTick>
 8005244:	eba0 0009 	sub.w	r0, r0, r9
 8005248:	4582      	cmp	sl, r0
 800524a:	d304      	bcc.n	8005256 <I2C_RequestMemoryRead+0xbe>
 800524c:	f1ba 0f00 	cmp.w	sl, #0
 8005250:	d001      	beq.n	8005256 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005252:	6834      	ldr	r4, [r6, #0]
 8005254:	e7b4      	b.n	80051c0 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005256:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005258:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800525a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800525c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005260:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005264:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005266:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8005268:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800526c:	f042 0220 	orr.w	r2, r2, #32
 8005270:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005272:	680b      	ldr	r3, [r1, #0]
 8005274:	05dc      	lsls	r4, r3, #23
 8005276:	d502      	bpl.n	800527e <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527c:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 800527e:	2003      	movs	r0, #3
}
 8005280:	b003      	add	sp, #12
 8005282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800528c:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800528e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005292:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005296:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800529a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a2:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80052a4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	6433      	str	r3, [r6, #64]	; 0x40
 80052ae:	e7c0      	b.n	8005232 <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b0:	6963      	ldr	r3, [r4, #20]
 80052b2:	079b      	lsls	r3, r3, #30
 80052b4:	d499      	bmi.n	80051ea <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b6:	6963      	ldr	r3, [r4, #20]
 80052b8:	0558      	lsls	r0, r3, #21
 80052ba:	d4e4      	bmi.n	8005286 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052bc:	f7ff fc5e 	bl	8004b7c <HAL_GetTick>
 80052c0:	eba0 0009 	sub.w	r0, r0, r9
 80052c4:	4582      	cmp	sl, r0
 80052c6:	f0c0 808b 	bcc.w	80053e0 <I2C_RequestMemoryRead+0x248>
 80052ca:	f1ba 0f00 	cmp.w	sl, #0
 80052ce:	f000 8087 	beq.w	80053e0 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d2:	6834      	ldr	r4, [r6, #0]
 80052d4:	e77f      	b.n	80051d6 <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052d6:	f1b8 0f01 	cmp.w	r8, #1
 80052da:	d10b      	bne.n	80052f4 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052dc:	b2ff      	uxtb	r7, r7
 80052de:	6127      	str	r7, [r4, #16]
 80052e0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80052e4:	d16a      	bne.n	80053bc <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e6:	6963      	ldr	r3, [r4, #20]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	d416      	bmi.n	800531a <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ec:	6963      	ldr	r3, [r4, #20]
 80052ee:	055f      	lsls	r7, r3, #21
 80052f0:	d5f9      	bpl.n	80052e6 <I2C_RequestMemoryRead+0x14e>
 80052f2:	e78b      	b.n	800520c <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052f4:	0a3b      	lsrs	r3, r7, #8
 80052f6:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80052fc:	d17f      	bne.n	80053fe <I2C_RequestMemoryRead+0x266>
 80052fe:	6963      	ldr	r3, [r4, #20]
 8005300:	061d      	lsls	r5, r3, #24
 8005302:	d4eb      	bmi.n	80052dc <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005304:	6963      	ldr	r3, [r4, #20]
 8005306:	0558      	lsls	r0, r3, #21
 8005308:	d5f9      	bpl.n	80052fe <I2C_RequestMemoryRead+0x166>
 800530a:	e77f      	b.n	800520c <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 8005314:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e78c      	b.n	8005234 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8005322:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005326:	d113      	bne.n	8005350 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005328:	6963      	ldr	r3, [r4, #20]
 800532a:	07d8      	lsls	r0, r3, #31
 800532c:	d5fc      	bpl.n	8005328 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800532e:	f04b 0301 	orr.w	r3, fp, #1
 8005332:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005334:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005338:	d003      	beq.n	8005342 <I2C_RequestMemoryRead+0x1aa>
 800533a:	e02b      	b.n	8005394 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533c:	6963      	ldr	r3, [r4, #20]
 800533e:	055b      	lsls	r3, r3, #21
 8005340:	d4a1      	bmi.n	8005286 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005342:	6963      	ldr	r3, [r4, #20]
 8005344:	43db      	mvns	r3, r3
 8005346:	f013 0302 	ands.w	r3, r3, #2
 800534a:	d1f7      	bne.n	800533c <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 800534c:	4618      	mov	r0, r3
 800534e:	e771      	b.n	8005234 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005350:	6963      	ldr	r3, [r4, #20]
 8005352:	07d9      	lsls	r1, r3, #31
 8005354:	d4eb      	bmi.n	800532e <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7ff fc11 	bl	8004b7c <HAL_GetTick>
 800535a:	eba0 0009 	sub.w	r0, r0, r9
 800535e:	4582      	cmp	sl, r0
 8005360:	f4ff af79 	bcc.w	8005256 <I2C_RequestMemoryRead+0xbe>
 8005364:	f1ba 0f00 	cmp.w	sl, #0
 8005368:	f43f af75 	beq.w	8005256 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800536c:	6834      	ldr	r4, [r6, #0]
 800536e:	e7d8      	b.n	8005322 <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005370:	6963      	ldr	r3, [r4, #20]
 8005372:	061a      	lsls	r2, r3, #24
 8005374:	d4af      	bmi.n	80052d6 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005376:	6963      	ldr	r3, [r4, #20]
 8005378:	055d      	lsls	r5, r3, #21
 800537a:	f53f af47 	bmi.w	800520c <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7ff fbfd 	bl	8004b7c <HAL_GetTick>
 8005382:	eba0 0009 	sub.w	r0, r0, r9
 8005386:	4582      	cmp	sl, r0
 8005388:	d34c      	bcc.n	8005424 <I2C_RequestMemoryRead+0x28c>
 800538a:	f1ba 0f00 	cmp.w	sl, #0
 800538e:	d049      	beq.n	8005424 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005390:	6834      	ldr	r4, [r6, #0]
 8005392:	e731      	b.n	80051f8 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005394:	6963      	ldr	r3, [r4, #20]
 8005396:	43db      	mvns	r3, r3
 8005398:	f013 0302 	ands.w	r3, r3, #2
 800539c:	d0d6      	beq.n	800534c <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800539e:	6963      	ldr	r3, [r4, #20]
 80053a0:	055a      	lsls	r2, r3, #21
 80053a2:	f53f af70 	bmi.w	8005286 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7ff fbe9 	bl	8004b7c <HAL_GetTick>
 80053aa:	eba0 0009 	sub.w	r0, r0, r9
 80053ae:	4582      	cmp	sl, r0
 80053b0:	d316      	bcc.n	80053e0 <I2C_RequestMemoryRead+0x248>
 80053b2:	f1ba 0f00 	cmp.w	sl, #0
 80053b6:	d013      	beq.n	80053e0 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b8:	6834      	ldr	r4, [r6, #0]
 80053ba:	e7bb      	b.n	8005334 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053bc:	6963      	ldr	r3, [r4, #20]
 80053be:	061d      	lsls	r5, r3, #24
 80053c0:	d4ab      	bmi.n	800531a <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c2:	6963      	ldr	r3, [r4, #20]
 80053c4:	055a      	lsls	r2, r3, #21
 80053c6:	f53f af21 	bmi.w	800520c <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7ff fbd7 	bl	8004b7c <HAL_GetTick>
 80053ce:	eba0 0009 	sub.w	r0, r0, r9
 80053d2:	4582      	cmp	sl, r0
 80053d4:	d326      	bcc.n	8005424 <I2C_RequestMemoryRead+0x28c>
 80053d6:	f1ba 0f00 	cmp.w	sl, #0
 80053da:	d023      	beq.n	8005424 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053dc:	6834      	ldr	r4, [r6, #0]
 80053de:	e77f      	b.n	80052e0 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e4:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ea:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ee:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80053f0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80053fa:	2001      	movs	r0, #1
 80053fc:	e71a      	b.n	8005234 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053fe:	6963      	ldr	r3, [r4, #20]
 8005400:	0619      	lsls	r1, r3, #24
 8005402:	f53f af6b 	bmi.w	80052dc <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005406:	6963      	ldr	r3, [r4, #20]
 8005408:	055b      	lsls	r3, r3, #21
 800540a:	f53f aeff 	bmi.w	800520c <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7ff fbb5 	bl	8004b7c <HAL_GetTick>
 8005412:	eba0 0009 	sub.w	r0, r0, r9
 8005416:	4582      	cmp	sl, r0
 8005418:	d304      	bcc.n	8005424 <I2C_RequestMemoryRead+0x28c>
 800541a:	f1ba 0f00 	cmp.w	sl, #0
 800541e:	d001      	beq.n	8005424 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005420:	6834      	ldr	r4, [r6, #0]
 8005422:	e769      	b.n	80052f8 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005424:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005426:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005428:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800542a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800542e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005432:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005434:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	f043 0320 	orr.w	r3, r3, #32
 800543c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800543e:	e6f5      	b.n	800522c <I2C_RequestMemoryRead+0x94>

08005440 <HAL_I2C_MspInit>:
}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop

08005444 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005444:	2800      	cmp	r0, #0
 8005446:	f000 80b9 	beq.w	80055bc <HAL_I2C_Init+0x178>
{
 800544a:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005450:	4604      	mov	r4, r0
 8005452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8098 	beq.w	800558c <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 800545c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800545e:	2224      	movs	r2, #36	; 0x24
 8005460:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800547a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800547c:	f000 fe24 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005480:	6863      	ldr	r3, [r4, #4]
 8005482:	494f      	ldr	r1, [pc, #316]	; (80055c0 <HAL_I2C_Init+0x17c>)
 8005484:	428b      	cmp	r3, r1
 8005486:	d84f      	bhi.n	8005528 <HAL_I2C_Init+0xe4>
 8005488:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_I2C_Init+0x180>)
 800548a:	4290      	cmp	r0, r2
 800548c:	d97c      	bls.n	8005588 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800548e:	4d4e      	ldr	r5, [pc, #312]	; (80055c8 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005490:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8005492:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005496:	1e43      	subs	r3, r0, #1
 8005498:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	6850      	ldr	r0, [r2, #4]
 80054a0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80054a4:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80054a8:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80054aa:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054ac:	f101 0c01 	add.w	ip, r1, #1
 80054b0:	6a11      	ldr	r1, [r2, #32]
 80054b2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80054b6:	ea41 010c 	orr.w	r1, r1, ip
 80054ba:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054bc:	69d1      	ldr	r1, [r2, #28]
 80054be:	f640 7efc 	movw	lr, #4092	; 0xffc
 80054c2:	3301      	adds	r3, #1
 80054c4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80054c8:	ea13 0f0e 	tst.w	r3, lr
 80054cc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80054d0:	d161      	bne.n	8005596 <HAL_I2C_Init+0x152>
 80054d2:	2304      	movs	r3, #4
 80054d4:	430b      	orrs	r3, r1
 80054d6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054d8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	4303      	orrs	r3, r0
 80054e0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054e8:	6891      	ldr	r1, [r2, #8]
 80054ea:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80054ee:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80054f2:	4303      	orrs	r3, r0
 80054f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054fc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005500:	68d1      	ldr	r1, [r2, #12]
 8005502:	4303      	orrs	r3, r0
 8005504:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005508:	430b      	orrs	r3, r1
 800550a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800550c:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800550e:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8005510:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8005514:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8005516:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005518:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800551a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800551e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005520:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8005524:	4618      	mov	r0, r3
}
 8005526:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005528:	4a28      	ldr	r2, [pc, #160]	; (80055cc <HAL_I2C_Init+0x188>)
 800552a:	4290      	cmp	r0, r2
 800552c:	d92c      	bls.n	8005588 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800552e:	4d26      	ldr	r5, [pc, #152]	; (80055c8 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005530:	4e27      	ldr	r6, [pc, #156]	; (80055d0 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8005532:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	6855      	ldr	r5, [r2, #4]
 800553a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800553e:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8005542:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005544:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005548:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800554c:	fb05 f101 	mul.w	r1, r5, r1
 8005550:	fba6 5101 	umull	r5, r1, r6, r1
 8005554:	6a15      	ldr	r5, [r2, #32]
 8005556:	0989      	lsrs	r1, r1, #6
 8005558:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800555c:	3101      	adds	r1, #1
 800555e:	4329      	orrs	r1, r5
 8005560:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005562:	69d1      	ldr	r1, [r2, #28]
 8005564:	68a5      	ldr	r5, [r4, #8]
 8005566:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800556a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800556e:	b9ad      	cbnz	r5, 800559c <HAL_I2C_Init+0x158>
 8005570:	3801      	subs	r0, #1
 8005572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	b1d3      	cbz	r3, 80055b8 <HAL_I2C_Init+0x174>
 8005582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005586:	e7a5      	b.n	80054d4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8005588:	2001      	movs	r0, #1
}
 800558a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800558c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005590:	f7ff ff56 	bl	8005440 <HAL_I2C_MspInit>
 8005594:	e762      	b.n	800545c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559a:	e79b      	b.n	80054d4 <HAL_I2C_Init+0x90>
 800559c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055a0:	3801      	subs	r0, #1
 80055a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055aa:	3301      	adds	r3, #1
 80055ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b0:	b113      	cbz	r3, 80055b8 <HAL_I2C_Init+0x174>
 80055b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b6:	e78d      	b.n	80054d4 <HAL_I2C_Init+0x90>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e78b      	b.n	80054d4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80055bc:	2001      	movs	r0, #1
}
 80055be:	4770      	bx	lr
 80055c0:	000186a0 	.word	0x000186a0
 80055c4:	001e847f 	.word	0x001e847f
 80055c8:	431bde83 	.word	0x431bde83
 80055cc:	003d08ff 	.word	0x003d08ff
 80055d0:	10624dd3 	.word	0x10624dd3

080055d4 <HAL_I2C_MspDeInit>:
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80055d8:	b1b0      	cbz	r0, 8005608 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 80055da:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055dc:	2324      	movs	r3, #36	; 0x24
{
 80055de:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80055e4:	6813      	ldr	r3, [r2, #0]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	4604      	mov	r4, r0
 80055ec:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80055ee:	f7ff fff1 	bl	80055d4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80055f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80055fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055fe:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005600:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8005604:	4618      	mov	r0, r3
}
 8005606:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005608:	2001      	movs	r0, #1
}
 800560a:	4770      	bx	lr

0800560c <HAL_I2C_Mem_Write>:
{
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	4604      	mov	r4, r0
 8005612:	b083      	sub	sp, #12
 8005614:	4699      	mov	r9, r3
 8005616:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800561a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800561c:	460f      	mov	r7, r1
 800561e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7ff faac 	bl	8004b7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005624:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005628:	2b20      	cmp	r3, #32
 800562a:	d004      	beq.n	8005636 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 800562c:	2702      	movs	r7, #2
}
 800562e:	4638      	mov	r0, r7
 8005630:	b003      	add	sp, #12
 8005632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005636:	4605      	mov	r5, r0
 8005638:	e005      	b.n	8005646 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563a:	f7ff fa9f 	bl	8004b7c <HAL_GetTick>
 800563e:	1b40      	subs	r0, r0, r5
 8005640:	2819      	cmp	r0, #25
 8005642:	f200 80aa 	bhi.w	800579a <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	6983      	ldr	r3, [r0, #24]
 800564a:	ea6f 0c03 	mvn.w	ip, r3
 800564e:	f01c 0b02 	ands.w	fp, ip, #2
 8005652:	d0f2      	beq.n	800563a <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8005654:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d0e7      	beq.n	800562c <HAL_I2C_Mem_Write+0x20>
 800565c:	2301      	movs	r3, #1
 800565e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005662:	6803      	ldr	r3, [r0, #0]
 8005664:	07db      	lsls	r3, r3, #31
 8005666:	d571      	bpl.n	800574c <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005668:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800566a:	6807      	ldr	r7, [r0, #0]
 800566c:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8005670:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8005672:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005674:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005676:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005678:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800567c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005680:	2040      	movs	r0, #64	; 0x40
 8005682:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005686:	2000      	movs	r0, #0
 8005688:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800568a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800568e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8005690:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005692:	4857      	ldr	r0, [pc, #348]	; (80057f0 <HAL_I2C_Mem_Write+0x1e4>)
 8005694:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005696:	464b      	mov	r3, r9
 8005698:	4642      	mov	r2, r8
 800569a:	4620      	mov	r0, r4
 800569c:	f7ff fc86 	bl	8004fac <I2C_RequestMemoryWrite>
 80056a0:	4607      	mov	r7, r0
 80056a2:	b9f8      	cbnz	r0, 80056e4 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 80056a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80a0 	beq.w	80057ec <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	1c72      	adds	r2, r6, #1
 80056b0:	d158      	bne.n	8005764 <HAL_I2C_Mem_Write+0x158>
 80056b2:	695a      	ldr	r2, [r3, #20]
 80056b4:	0610      	lsls	r0, r2, #24
 80056b6:	d41a      	bmi.n	80056ee <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	0551      	lsls	r1, r2, #21
 80056bc:	d5f9      	bpl.n	80056b2 <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c6:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80056c8:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056ca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80056d4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d8:	f043 0304 	orr.w	r3, r3, #4
 80056dc:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d038      	beq.n	8005756 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 80056e4:	2701      	movs	r7, #1
}
 80056e6:	4638      	mov	r0, r7
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ee:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80056f2:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056f6:	4661      	mov	r1, ip
      hi2c->XferSize--;
 80056f8:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005700:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8005702:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005704:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005706:	3a01      	subs	r2, #1
 8005708:	b292      	uxth	r2, r2
 800570a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800570c:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800570e:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8005710:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005712:	0740      	lsls	r0, r0, #29
 8005714:	d517      	bpl.n	8005746 <HAL_I2C_Mem_Write+0x13a>
 8005716:	b942      	cbnz	r2, 800572a <HAL_I2C_Mem_Write+0x11e>
 8005718:	1c72      	adds	r2, r6, #1
 800571a:	d159      	bne.n	80057d0 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	0750      	lsls	r0, r2, #29
 8005720:	d449      	bmi.n	80057b6 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	0551      	lsls	r1, r2, #21
 8005726:	d5f9      	bpl.n	800571c <HAL_I2C_Mem_Write+0x110>
 8005728:	e7c9      	b.n	80056be <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800572a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800572e:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8005730:	f10c 0102 	add.w	r1, ip, #2
 8005734:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005736:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005738:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 800573c:	3901      	subs	r1, #1
        hi2c->XferSize--;
 800573e:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8005740:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8005742:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005744:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005746:	2a00      	cmp	r2, #0
 8005748:	d1b1      	bne.n	80056ae <HAL_I2C_Mem_Write+0xa2>
 800574a:	e7e5      	b.n	8005718 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 800574c:	6803      	ldr	r3, [r0, #0]
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6003      	str	r3, [r0, #0]
 8005754:	e788      	b.n	8005668 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	6813      	ldr	r3, [r2, #0]
 800575a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800575e:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e764      	b.n	800562e <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	0612      	lsls	r2, r2, #24
 8005768:	d4c1      	bmi.n	80056ee <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576a:	695a      	ldr	r2, [r3, #20]
 800576c:	0551      	lsls	r1, r2, #21
 800576e:	d4a6      	bmi.n	80056be <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005770:	f7ff fa04 	bl	8004b7c <HAL_GetTick>
 8005774:	1b40      	subs	r0, r0, r5
 8005776:	4286      	cmp	r6, r0
 8005778:	d301      	bcc.n	800577e <HAL_I2C_Mem_Write+0x172>
 800577a:	2e00      	cmp	r6, #0
 800577c:	d196      	bne.n	80056ac <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800577e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005780:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005782:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005784:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005788:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800578c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800578e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	f043 0320 	orr.w	r3, r3, #32
 8005796:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005798:	e7a1      	b.n	80056de <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 800579a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800579c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057a4:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80057aa:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057ae:	f043 0320 	orr.w	r3, r3, #32
 80057b2:	6423      	str	r3, [r4, #64]	; 0x40
 80057b4:	e73a      	b.n	800562c <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80057be:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80057c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80057c6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ca:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80057ce:	e72e      	b.n	800562e <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	0752      	lsls	r2, r2, #29
 80057d4:	d4ef      	bmi.n	80057b6 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d6:	695a      	ldr	r2, [r3, #20]
 80057d8:	0551      	lsls	r1, r2, #21
 80057da:	f53f af70 	bmi.w	80056be <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7ff f9cd 	bl	8004b7c <HAL_GetTick>
 80057e2:	1b40      	subs	r0, r0, r5
 80057e4:	4286      	cmp	r6, r0
 80057e6:	d3ca      	bcc.n	800577e <HAL_I2C_Mem_Write+0x172>
 80057e8:	2e00      	cmp	r6, #0
 80057ea:	d0c8      	beq.n	800577e <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	e793      	b.n	8005718 <HAL_I2C_Mem_Write+0x10c>
 80057f0:	ffff0000 	.word	0xffff0000

080057f4 <HAL_I2C_Mem_Read>:
{
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	b087      	sub	sp, #28
 80057fc:	4699      	mov	r9, r3
 80057fe:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8005802:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005804:	460f      	mov	r7, r1
 8005806:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005808:	f7ff f9b8 	bl	8004b7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800580c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005810:	2b20      	cmp	r3, #32
 8005812:	d004      	beq.n	800581e <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8005814:	2702      	movs	r7, #2
}
 8005816:	4638      	mov	r0, r7
 8005818:	b007      	add	sp, #28
 800581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581e:	4606      	mov	r6, r0
 8005820:	e005      	b.n	800582e <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7ff f9ab 	bl	8004b7c <HAL_GetTick>
 8005826:	1b80      	subs	r0, r0, r6
 8005828:	2819      	cmp	r0, #25
 800582a:	f200 80d2 	bhi.w	80059d2 <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582e:	f8d4 c000 	ldr.w	ip, [r4]
 8005832:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8005836:	43c0      	mvns	r0, r0
 8005838:	f010 0b02 	ands.w	fp, r0, #2
 800583c:	d0f1      	beq.n	8005822 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 800583e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d0e6      	beq.n	8005814 <HAL_I2C_Mem_Read+0x20>
 8005846:	2301      	movs	r3, #1
 8005848:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800584c:	f8dc 3000 	ldr.w	r3, [ip]
 8005850:	07d9      	lsls	r1, r3, #31
 8005852:	d537      	bpl.n	80058c4 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005854:	f8dc 0000 	ldr.w	r0, [ip]
 8005858:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800585c:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8005860:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005862:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005864:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005866:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800586a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800586e:	2040      	movs	r0, #64	; 0x40
 8005870:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005874:	2000      	movs	r0, #0
 8005876:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005878:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800587c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800587e:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005880:	4893      	ldr	r0, [pc, #588]	; (8005ad0 <HAL_I2C_Mem_Read+0x2dc>)
 8005882:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005884:	4639      	mov	r1, r7
 8005886:	464b      	mov	r3, r9
 8005888:	4642      	mov	r2, r8
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff fc84 	bl	8005198 <I2C_RequestMemoryRead>
 8005890:	4607      	mov	r7, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	f040 80ab 	bne.w	80059ee <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8005898:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800589a:	b9d2      	cbnz	r2, 80058d2 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	9002      	str	r0, [sp, #8]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	9202      	str	r2, [sp, #8]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	9202      	str	r2, [sp, #8]
 80058a8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b0:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	2220      	movs	r2, #32
 80058b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80058ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80058c2:	e7a8      	b.n	8005816 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 80058c4:	f8dc 3000 	ldr.w	r3, [ip]
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	f8cc 3000 	str.w	r3, [ip]
 80058d0:	e7c0      	b.n	8005854 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 80058d2:	2a01      	cmp	r2, #1
 80058d4:	f000 812c 	beq.w	8005b30 <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 80058d8:	2a02      	cmp	r2, #2
 80058da:	f000 80bd 	beq.w	8005a58 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	9005      	str	r0, [sp, #20]
 80058e2:	6959      	ldr	r1, [r3, #20]
 80058e4:	9105      	str	r1, [sp, #20]
 80058e6:	6999      	ldr	r1, [r3, #24]
 80058e8:	9105      	str	r1, [sp, #20]
 80058ea:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80058ec:	2a03      	cmp	r2, #3
 80058ee:	d849      	bhi.n	8005984 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 80058f0:	2a01      	cmp	r2, #1
 80058f2:	f000 80eb 	beq.w	8005acc <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 80058f6:	2a02      	cmp	r2, #2
 80058f8:	f000 8089 	beq.w	8005a0e <HAL_I2C_Mem_Read+0x21a>
 80058fc:	1c69      	adds	r1, r5, #1
 80058fe:	f040 80bb 	bne.w	8005a78 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	0752      	lsls	r2, r2, #29
 8005906:	d5fc      	bpl.n	8005902 <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005908:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005910:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005916:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005918:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800591a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800591c:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800591e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005920:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8005922:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8005924:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005926:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005928:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800592a:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	f040 80af 	bne.w	8005a90 <HAL_I2C_Mem_Read+0x29c>
 8005932:	6953      	ldr	r3, [r2, #20]
 8005934:	075b      	lsls	r3, r3, #29
 8005936:	d5fc      	bpl.n	8005932 <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005938:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005940:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005942:	6913      	ldr	r3, [r2, #16]
 8005944:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005946:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005948:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800594a:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594c:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 800594e:	3b01      	subs	r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005954:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8005956:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8005958:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 800595c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800595e:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005962:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8005964:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005968:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800596a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800596c:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800596e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005970:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8005972:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8005974:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005976:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005978:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800597a:	2a00      	cmp	r2, #0
 800597c:	d099      	beq.n	80058b2 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 800597e:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005980:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8005982:	d9b5      	bls.n	80058f0 <HAL_I2C_Mem_Read+0xfc>
 8005984:	b95d      	cbnz	r5, 800599e <HAL_I2C_Mem_Read+0x1aa>
 8005986:	e0c5      	b.n	8005b14 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	06d0      	lsls	r0, r2, #27
 800598c:	f100 80b2 	bmi.w	8005af4 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7ff f8f4 	bl	8004b7c <HAL_GetTick>
 8005994:	1b80      	subs	r0, r0, r6
 8005996:	4285      	cmp	r5, r0
 8005998:	f0c0 8086 	bcc.w	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	0652      	lsls	r2, r2, #25
 80059a2:	d5f1      	bpl.n	8005988 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 80059aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059ac:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 80059ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80059b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059b8:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 80059ba:	3a01      	subs	r2, #1
 80059bc:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80059be:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059c2:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 80059c4:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80059c6:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059ca:	d5d6      	bpl.n	800597a <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059cc:	6903      	ldr	r3, [r0, #16]
 80059ce:	704b      	strb	r3, [r1, #1]
 80059d0:	e036      	b.n	8005a40 <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 80059d2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059d4:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059dc:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80059e2:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059e6:	f043 0320 	orr.w	r3, r3, #32
 80059ea:	6423      	str	r3, [r4, #64]	; 0x40
 80059ec:	e712      	b.n	8005814 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 80059ee:	2701      	movs	r7, #1
}
 80059f0:	4638      	mov	r0, r7
 80059f2:	b007      	add	sp, #28
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	0750      	lsls	r0, r2, #29
 80059fc:	d40c      	bmi.n	8005a18 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fe:	f7ff f8bd 	bl	8004b7c <HAL_GetTick>
 8005a02:	1b80      	subs	r0, r0, r6
 8005a04:	4285      	cmp	r5, r0
 8005a06:	d34f      	bcc.n	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	d04d      	beq.n	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	1c69      	adds	r1, r5, #1
 8005a10:	d1f2      	bne.n	80059f8 <HAL_I2C_Mem_Read+0x204>
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	0752      	lsls	r2, r2, #29
 8005a16:	d5fc      	bpl.n	8005a12 <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a24:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8005a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005a28:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005a30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a32:	3b01      	subs	r3, #1
 8005a34:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a36:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8005a38:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8005a3c:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005a42:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005a44:	3301      	adds	r3, #1
 8005a46:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005a48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005a4a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8005a4c:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8005a4e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8005a50:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8005a52:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005a54:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005a56:	e790      	b.n	800597a <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	6819      	ldr	r1, [r3, #0]
 8005a5c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a60:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005a68:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	9004      	str	r0, [sp, #16]
 8005a6c:	6959      	ldr	r1, [r3, #20]
 8005a6e:	9104      	str	r1, [sp, #16]
 8005a70:	6999      	ldr	r1, [r3, #24]
 8005a72:	9104      	str	r1, [sp, #16]
 8005a74:	9904      	ldr	r1, [sp, #16]
 8005a76:	e739      	b.n	80058ec <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	0750      	lsls	r0, r2, #29
 8005a7c:	f53f af44 	bmi.w	8005908 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7ff f87c 	bl	8004b7c <HAL_GetTick>
 8005a84:	1b80      	subs	r0, r0, r6
 8005a86:	4285      	cmp	r5, r0
 8005a88:	d30e      	bcc.n	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
 8005a8a:	b16d      	cbz	r5, 8005aa8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	e735      	b.n	80058fc <HAL_I2C_Mem_Read+0x108>
 8005a90:	6953      	ldr	r3, [r2, #20]
 8005a92:	0758      	lsls	r0, r3, #29
 8005a94:	f53f af50 	bmi.w	8005938 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7ff f870 	bl	8004b7c <HAL_GetTick>
 8005a9c:	1b80      	subs	r0, r0, r6
 8005a9e:	4285      	cmp	r5, r0
 8005aa0:	d302      	bcc.n	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	f47f af41 	bne.w	800592a <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aa8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aaa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aac:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ab2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005ab8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005abc:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	f043 0320 	orr.w	r3, r3, #32
}
 8005ac2:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ac4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005ac6:	b007      	add	sp, #28
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005acc:	b95d      	cbnz	r5, 8005ae6 <HAL_I2C_Mem_Read+0x2f2>
 8005ace:	e02b      	b.n	8005b28 <HAL_I2C_Mem_Read+0x334>
 8005ad0:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	06d2      	lsls	r2, r2, #27
 8005ad8:	d40c      	bmi.n	8005af4 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7ff f84f 	bl	8004b7c <HAL_GetTick>
 8005ade:	1b80      	subs	r0, r0, r6
 8005ae0:	4285      	cmp	r5, r0
 8005ae2:	d3e1      	bcc.n	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	0651      	lsls	r1, r2, #25
 8005aea:	d5f3      	bpl.n	8005ad4 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005af2:	e7a5      	b.n	8005a40 <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af6:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afa:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005afc:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005afe:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b00:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b0a:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005b0c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005b10:	2701      	movs	r7, #1
 8005b12:	e680      	b.n	8005816 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	0652      	lsls	r2, r2, #25
 8005b18:	f53f af44 	bmi.w	80059a4 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	06d1      	lsls	r1, r2, #27
 8005b20:	d4e8      	bmi.n	8005af4 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7ff f82b 	bl	8004b7c <HAL_GetTick>
 8005b26:	e7bf      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	0650      	lsls	r0, r2, #25
 8005b2c:	d5f6      	bpl.n	8005b1c <HAL_I2C_Mem_Read+0x328>
 8005b2e:	e7dd      	b.n	8005aec <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b38:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3a:	9003      	str	r0, [sp, #12]
 8005b3c:	6959      	ldr	r1, [r3, #20]
 8005b3e:	9103      	str	r1, [sp, #12]
 8005b40:	6999      	ldr	r1, [r3, #24]
 8005b42:	9103      	str	r1, [sp, #12]
 8005b44:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	6819      	ldr	r1, [r3, #0]
 8005b48:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	e6cd      	b.n	80058ec <HAL_I2C_Mem_Read+0xf8>

08005b50 <HAL_I2C_GetState>:
  return hi2c->State;
 8005b50:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005b58:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005b5a:	4770      	bx	lr

08005b5c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f000 81a2 	beq.w	8005ea6 <HAL_RCC_OscConfig+0x34a>
{
 8005b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	07dd      	lsls	r5, r3, #31
{
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6e:	d52f      	bpl.n	8005bd0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b70:	499e      	ldr	r1, [pc, #632]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005b72:	688a      	ldr	r2, [r1, #8]
 8005b74:	f002 020c 	and.w	r2, r2, #12
 8005b78:	2a04      	cmp	r2, #4
 8005b7a:	f000 80ed 	beq.w	8005d58 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b7e:	688a      	ldr	r2, [r1, #8]
 8005b80:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b84:	2a08      	cmp	r2, #8
 8005b86:	f000 80e3 	beq.w	8005d50 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b8a:	6863      	ldr	r3, [r4, #4]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	f000 80ec 	beq.w	8005d6c <HAL_RCC_OscConfig+0x210>
 8005b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b98:	f000 8175 	beq.w	8005e86 <HAL_RCC_OscConfig+0x32a>
 8005b9c:	4d93      	ldr	r5, [pc, #588]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005b9e:	682a      	ldr	r2, [r5, #0]
 8005ba0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	682a      	ldr	r2, [r5, #0]
 8005ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bac:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 80e1 	bne.w	8005d76 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fe ffe2 	bl	8004b7c <HAL_GetTick>
 8005bb8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bba:	e005      	b.n	8005bc8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fe ffde 	bl	8004b7c <HAL_GetTick>
 8005bc0:	1b80      	subs	r0, r0, r6
 8005bc2:	2864      	cmp	r0, #100	; 0x64
 8005bc4:	f200 8101 	bhi.w	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	039b      	lsls	r3, r3, #14
 8005bcc:	d4f6      	bmi.n	8005bbc <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	079f      	lsls	r7, r3, #30
 8005bd2:	d528      	bpl.n	8005c26 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bd4:	4a85      	ldr	r2, [pc, #532]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005bd6:	6891      	ldr	r1, [r2, #8]
 8005bd8:	f011 0f0c 	tst.w	r1, #12
 8005bdc:	f000 8090 	beq.w	8005d00 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005be0:	6891      	ldr	r1, [r2, #8]
 8005be2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005be6:	2908      	cmp	r1, #8
 8005be8:	f000 8086 	beq.w	8005cf8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bec:	68e3      	ldr	r3, [r4, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 810e 	beq.w	8005e10 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bf4:	4b7e      	ldr	r3, [pc, #504]	; (8005df0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf6:	4e7d      	ldr	r6, [pc, #500]	; (8005dec <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005bfc:	f7fe ffbe 	bl	8004b7c <HAL_GetTick>
 8005c00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c02:	e005      	b.n	8005c10 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c04:	f7fe ffba 	bl	8004b7c <HAL_GetTick>
 8005c08:	1b40      	subs	r0, r0, r5
 8005c0a:	2802      	cmp	r0, #2
 8005c0c:	f200 80dd 	bhi.w	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	0798      	lsls	r0, r3, #30
 8005c14:	d5f6      	bpl.n	8005c04 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c16:	6833      	ldr	r3, [r6, #0]
 8005c18:	6922      	ldr	r2, [r4, #16]
 8005c1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005c22:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	071a      	lsls	r2, r3, #28
 8005c28:	d451      	bmi.n	8005cce <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2a:	0758      	lsls	r0, r3, #29
 8005c2c:	d52f      	bpl.n	8005c8e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2e:	4a6f      	ldr	r2, [pc, #444]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005c30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c32:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8005c36:	d07f      	beq.n	8005d38 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8005c38:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3a:	4e6e      	ldr	r6, [pc, #440]	; (8005df4 <HAL_RCC_OscConfig+0x298>)
 8005c3c:	6833      	ldr	r3, [r6, #0]
 8005c3e:	05d9      	lsls	r1, r3, #23
 8005c40:	f140 80b3 	bpl.w	8005daa <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c44:	68a3      	ldr	r3, [r4, #8]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	f000 80c3 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x276>
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	f000 812c 	beq.w	8005eaa <HAL_RCC_OscConfig+0x34e>
 8005c52:	4e66      	ldr	r6, [pc, #408]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005c54:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	6732      	str	r2, [r6, #112]	; 0x70
 8005c5c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005c5e:	f022 0204 	bic.w	r2, r2, #4
 8005c62:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 80b9 	bne.w	8005ddc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6a:	f7fe ff87 	bl	8004b7c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c6e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005c72:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c74:	e005      	b.n	8005c82 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fe ff81 	bl	8004b7c <HAL_GetTick>
 8005c7a:	1bc0      	subs	r0, r0, r7
 8005c7c:	4540      	cmp	r0, r8
 8005c7e:	f200 80a4 	bhi.w	8005dca <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c82:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005c84:	0798      	lsls	r0, r3, #30
 8005c86:	d4f6      	bmi.n	8005c76 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	f040 8106 	bne.w	8005e9a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c8e:	69a0      	ldr	r0, [r4, #24]
 8005c90:	b1c8      	cbz	r0, 8005cc6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c92:	4d56      	ldr	r5, [pc, #344]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005c94:	68ab      	ldr	r3, [r5, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	f000 80c9 	beq.w	8005e32 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca0:	4b53      	ldr	r3, [pc, #332]	; (8005df0 <HAL_RCC_OscConfig+0x294>)
 8005ca2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca8:	f000 8109 	beq.w	8005ebe <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cac:	f7fe ff66 	bl	8004b7c <HAL_GetTick>
 8005cb0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fe ff62 	bl	8004b7c <HAL_GetTick>
 8005cb8:	1b00      	subs	r0, r0, r4
 8005cba:	2802      	cmp	r0, #2
 8005cbc:	f200 8085 	bhi.w	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	019b      	lsls	r3, r3, #6
 8005cc4:	d4f6      	bmi.n	8005cb4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005cc6:	2000      	movs	r0, #0
}
 8005cc8:	b002      	add	sp, #8
 8005cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cce:	6963      	ldr	r3, [r4, #20]
 8005cd0:	b30b      	cbz	r3, 8005d16 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8005cd2:	4b47      	ldr	r3, [pc, #284]	; (8005df0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd4:	4e45      	ldr	r6, [pc, #276]	; (8005dec <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005cdc:	f7fe ff4e 	bl	8004b7c <HAL_GetTick>
 8005ce0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce2:	e004      	b.n	8005cee <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce4:	f7fe ff4a 	bl	8004b7c <HAL_GetTick>
 8005ce8:	1b40      	subs	r0, r0, r5
 8005cea:	2802      	cmp	r0, #2
 8005cec:	d86d      	bhi.n	8005dca <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cee:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005cf0:	079b      	lsls	r3, r3, #30
 8005cf2:	d5f7      	bpl.n	8005ce4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	e798      	b.n	8005c2a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf8:	6852      	ldr	r2, [r2, #4]
 8005cfa:	0256      	lsls	r6, r2, #9
 8005cfc:	f53f af76 	bmi.w	8005bec <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d00:	4a3a      	ldr	r2, [pc, #232]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	0795      	lsls	r5, r2, #30
 8005d06:	d544      	bpl.n	8005d92 <HAL_RCC_OscConfig+0x236>
 8005d08:	68e2      	ldr	r2, [r4, #12]
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	d041      	beq.n	8005d92 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8005d0e:	2001      	movs	r0, #1
}
 8005d10:	b002      	add	sp, #8
 8005d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005d16:	4a36      	ldr	r2, [pc, #216]	; (8005df0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d18:	4e34      	ldr	r6, [pc, #208]	; (8005dec <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8005d1a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005d1e:	f7fe ff2d 	bl	8004b7c <HAL_GetTick>
 8005d22:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d24:	e004      	b.n	8005d30 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fe ff29 	bl	8004b7c <HAL_GetTick>
 8005d2a:	1b40      	subs	r0, r0, r5
 8005d2c:	2802      	cmp	r0, #2
 8005d2e:	d84c      	bhi.n	8005dca <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d30:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005d32:	079f      	lsls	r7, r3, #30
 8005d34:	d4f7      	bmi.n	8005d26 <HAL_RCC_OscConfig+0x1ca>
 8005d36:	e7dd      	b.n	8005cf4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d40:	6413      	str	r3, [r2, #64]	; 0x40
 8005d42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005d4c:	2501      	movs	r5, #1
 8005d4e:	e774      	b.n	8005c3a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d50:	684a      	ldr	r2, [r1, #4]
 8005d52:	0250      	lsls	r0, r2, #9
 8005d54:	f57f af19 	bpl.w	8005b8a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	4a24      	ldr	r2, [pc, #144]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	0391      	lsls	r1, r2, #14
 8005d5e:	f57f af37 	bpl.w	8005bd0 <HAL_RCC_OscConfig+0x74>
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	f47f af33 	bne.w	8005bd0 <HAL_RCC_OscConfig+0x74>
 8005d6a:	e7d0      	b.n	8005d0e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005d6e:	6813      	ldr	r3, [r2, #0]
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d76:	f7fe ff01 	bl	8004b7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4e1c      	ldr	r6, [pc, #112]	; (8005dec <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8005d7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7e:	e004      	b.n	8005d8a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fe fefc 	bl	8004b7c <HAL_GetTick>
 8005d84:	1b40      	subs	r0, r0, r5
 8005d86:	2864      	cmp	r0, #100	; 0x64
 8005d88:	d81f      	bhi.n	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8a:	6833      	ldr	r3, [r6, #0]
 8005d8c:	039a      	lsls	r2, r3, #14
 8005d8e:	d5f7      	bpl.n	8005d80 <HAL_RCC_OscConfig+0x224>
 8005d90:	e71d      	b.n	8005bce <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d92:	4916      	ldr	r1, [pc, #88]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005d94:	6920      	ldr	r0, [r4, #16]
 8005d96:	680a      	ldr	r2, [r1, #0]
 8005d98:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005d9c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005da0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da2:	071a      	lsls	r2, r3, #28
 8005da4:	f57f af41 	bpl.w	8005c2a <HAL_RCC_OscConfig+0xce>
 8005da8:	e791      	b.n	8005cce <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005daa:	6833      	ldr	r3, [r6, #0]
 8005dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005db2:	f7fe fee3 	bl	8004b7c <HAL_GetTick>
 8005db6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	05da      	lsls	r2, r3, #23
 8005dbc:	f53f af42 	bmi.w	8005c44 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc0:	f7fe fedc 	bl	8004b7c <HAL_GetTick>
 8005dc4:	1bc0      	subs	r0, r0, r7
 8005dc6:	2802      	cmp	r0, #2
 8005dc8:	d9f6      	bls.n	8005db8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8005dca:	2003      	movs	r0, #3
}
 8005dcc:	b002      	add	sp, #8
 8005dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd2:	4a06      	ldr	r2, [pc, #24]	; (8005dec <HAL_RCC_OscConfig+0x290>)
 8005dd4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005ddc:	f7fe fece 	bl	8004b7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	4f02      	ldr	r7, [pc, #8]	; (8005dec <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8005de2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de8:	e00b      	b.n	8005e02 <HAL_RCC_OscConfig+0x2a6>
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	42470000 	.word	0x42470000
 8005df4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fe fec0 	bl	8004b7c <HAL_GetTick>
 8005dfc:	1b80      	subs	r0, r0, r6
 8005dfe:	4540      	cmp	r0, r8
 8005e00:	d8e3      	bhi.n	8005dca <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e04:	079b      	lsls	r3, r3, #30
 8005e06:	d5f7      	bpl.n	8005df8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	f43f af40 	beq.w	8005c8e <HAL_RCC_OscConfig+0x132>
 8005e0e:	e044      	b.n	8005e9a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8005e10:	4a42      	ldr	r2, [pc, #264]	; (8005f1c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e12:	4e43      	ldr	r6, [pc, #268]	; (8005f20 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8005e14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e16:	f7fe feb1 	bl	8004b7c <HAL_GetTick>
 8005e1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1c:	e004      	b.n	8005e28 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e1e:	f7fe fead 	bl	8004b7c <HAL_GetTick>
 8005e22:	1b40      	subs	r0, r0, r5
 8005e24:	2802      	cmp	r0, #2
 8005e26:	d8d0      	bhi.n	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e28:	6833      	ldr	r3, [r6, #0]
 8005e2a:	0799      	lsls	r1, r3, #30
 8005e2c:	d4f7      	bmi.n	8005e1e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	e6f9      	b.n	8005c26 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e32:	2801      	cmp	r0, #1
 8005e34:	f43f af48 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8005e38:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e3a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e40:	4291      	cmp	r1, r2
 8005e42:	f47f af64 	bne.w	8005d0e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e48:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e4c:	4291      	cmp	r1, r2
 8005e4e:	f47f af5e 	bne.w	8005d0e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e54:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005e58:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e5a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005e5e:	f47f af56 	bne.w	8005d0e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e64:	0852      	lsrs	r2, r2, #1
 8005e66:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005e6a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005e70:	f47f af4d 	bne.w	8005d0e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e76:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e7a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8005e7e:	bf14      	ite	ne
 8005e80:	2001      	movne	r0, #1
 8005e82:	2000      	moveq	r0, #0
 8005e84:	e720      	b.n	8005cc8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <HAL_RCC_OscConfig+0x3c4>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e96:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e98:	e76d      	b.n	8005d76 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e9a:	4a21      	ldr	r2, [pc, #132]	; (8005f20 <HAL_RCC_OscConfig+0x3c4>)
 8005e9c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea4:	e6f3      	b.n	8005c8e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8005ea6:	2001      	movs	r0, #1
}
 8005ea8:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <HAL_RCC_OscConfig+0x3c4>)
 8005eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eae:	f042 0204 	orr.w	r2, r2, #4
 8005eb2:	671a      	str	r2, [r3, #112]	; 0x70
 8005eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ebc:	e78e      	b.n	8005ddc <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8005ebe:	f7fe fe5d 	bl	8004b7c <HAL_GetTick>
 8005ec2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec4:	e005      	b.n	8005ed2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec6:	f7fe fe59 	bl	8004b7c <HAL_GetTick>
 8005eca:	1b80      	subs	r0, r0, r6
 8005ecc:	2802      	cmp	r0, #2
 8005ece:	f63f af7c 	bhi.w	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	682b      	ldr	r3, [r5, #0]
 8005ed4:	0199      	lsls	r1, r3, #6
 8005ed6:	d4f6      	bmi.n	8005ec6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ed8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005edc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005ee4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8005ee8:	0852      	lsrs	r2, r2, #1
 8005eea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005eee:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005ef0:	490a      	ldr	r1, [pc, #40]	; (8005f1c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005ef6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ef8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005efa:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005efc:	f7fe fe3e 	bl	8004b7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f00:	4d07      	ldr	r5, [pc, #28]	; (8005f20 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8005f02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f04:	e005      	b.n	8005f12 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f06:	f7fe fe39 	bl	8004b7c <HAL_GetTick>
 8005f0a:	1b00      	subs	r0, r0, r4
 8005f0c:	2802      	cmp	r0, #2
 8005f0e:	f63f af5c 	bhi.w	8005dca <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	019a      	lsls	r2, r3, #6
 8005f16:	d5f6      	bpl.n	8005f06 <HAL_RCC_OscConfig+0x3aa>
 8005f18:	e6d5      	b.n	8005cc6 <HAL_RCC_OscConfig+0x16a>
 8005f1a:	bf00      	nop
 8005f1c:	42470000 	.word	0x42470000
 8005f20:	40023800 	.word	0x40023800

08005f24 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f24:	4916      	ldr	r1, [pc, #88]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8005f26:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f28:	688b      	ldr	r3, [r1, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d01b      	beq.n	8005f6a <HAL_RCC_GetSysClockFreq+0x46>
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d117      	bne.n	8005f66 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f36:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f38:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f40:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f44:	d113      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	480f      	ldr	r0, [pc, #60]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x60>)
 8005f48:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005f4c:	fba1 0100 	umull	r0, r1, r1, r0
 8005f50:	f7fa f996 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x5c>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005f60:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005f64:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8005f66:	4807      	ldr	r0, [pc, #28]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8005f68:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f6a:	4807      	ldr	r0, [pc, #28]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005f6c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6e:	4806      	ldr	r0, [pc, #24]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x64>)
 8005f70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005f74:	2300      	movs	r3, #0
 8005f76:	fba1 0100 	umull	r0, r1, r1, r0
 8005f7a:	f7fa f981 	bl	8000280 <__aeabi_uldivmod>
 8005f7e:	e7e9      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x30>
 8005f80:	40023800 	.word	0x40023800
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	007a1200 	.word	0x007a1200

08005f8c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f000 8087 	beq.w	80060a0 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f92:	4a48      	ldr	r2, [pc, #288]	; (80060b4 <HAL_RCC_ClockConfig+0x128>)
 8005f94:	6813      	ldr	r3, [r2, #0]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	428b      	cmp	r3, r1
{
 8005f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa4:	d209      	bcs.n	8005fba <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	b2cb      	uxtb	r3, r1
 8005fa8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	d002      	beq.n	8005fba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005fb4:	2001      	movs	r0, #1
}
 8005fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	0798      	lsls	r0, r3, #30
 8005fbe:	d514      	bpl.n	8005fea <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc0:	0759      	lsls	r1, r3, #29
 8005fc2:	d504      	bpl.n	8005fce <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc4:	493c      	ldr	r1, [pc, #240]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8005fc6:	688a      	ldr	r2, [r1, #8]
 8005fc8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005fcc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fce:	071a      	lsls	r2, r3, #28
 8005fd0:	d504      	bpl.n	8005fdc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd2:	4939      	ldr	r1, [pc, #228]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005fda:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fdc:	4936      	ldr	r1, [pc, #216]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8005fde:	68a0      	ldr	r0, [r4, #8]
 8005fe0:	688a      	ldr	r2, [r1, #8]
 8005fe2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005fe6:	4302      	orrs	r2, r0
 8005fe8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fea:	07df      	lsls	r7, r3, #31
 8005fec:	d521      	bpl.n	8006032 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fee:	6862      	ldr	r2, [r4, #4]
 8005ff0:	2a01      	cmp	r2, #1
 8005ff2:	d057      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff4:	1e93      	subs	r3, r2, #2
 8005ff6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ffc:	d94d      	bls.n	800609a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffe:	0799      	lsls	r1, r3, #30
 8006000:	d5d8      	bpl.n	8005fb4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006002:	4e2d      	ldr	r6, [pc, #180]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8006004:	68b3      	ldr	r3, [r6, #8]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	4313      	orrs	r3, r2
 800600c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800600e:	f7fe fdb5 	bl	8004b7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006012:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006016:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006018:	e004      	b.n	8006024 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800601a:	f7fe fdaf 	bl	8004b7c <HAL_GetTick>
 800601e:	1bc0      	subs	r0, r0, r7
 8006020:	4540      	cmp	r0, r8
 8006022:	d844      	bhi.n	80060ae <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006024:	68b3      	ldr	r3, [r6, #8]
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	f003 030c 	and.w	r3, r3, #12
 800602c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006030:	d1f3      	bne.n	800601a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006032:	4a20      	ldr	r2, [pc, #128]	; (80060b4 <HAL_RCC_ClockConfig+0x128>)
 8006034:	6813      	ldr	r3, [r2, #0]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	42ab      	cmp	r3, r5
 800603c:	d906      	bls.n	800604c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	b2eb      	uxtb	r3, r5
 8006040:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	42ab      	cmp	r3, r5
 800604a:	d1b3      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	075a      	lsls	r2, r3, #29
 8006050:	d506      	bpl.n	8006060 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006052:	4919      	ldr	r1, [pc, #100]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8006054:	68e0      	ldr	r0, [r4, #12]
 8006056:	688a      	ldr	r2, [r1, #8]
 8006058:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800605c:	4302      	orrs	r2, r0
 800605e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006060:	071b      	lsls	r3, r3, #28
 8006062:	d507      	bpl.n	8006074 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006064:	4a14      	ldr	r2, [pc, #80]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 8006066:	6921      	ldr	r1, [r4, #16]
 8006068:	6893      	ldr	r3, [r2, #8]
 800606a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800606e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006072:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006074:	f7ff ff56 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8006078:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 800607a:	4c10      	ldr	r4, [pc, #64]	; (80060bc <HAL_RCC_ClockConfig+0x130>)
 800607c:	6892      	ldr	r2, [r2, #8]
 800607e:	4910      	ldr	r1, [pc, #64]	; (80060c0 <HAL_RCC_ClockConfig+0x134>)
 8006080:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006084:	4603      	mov	r3, r0
 8006086:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8006088:	480e      	ldr	r0, [pc, #56]	; (80060c4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800608a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800608c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800608e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8006090:	f7fe fd2a 	bl	8004ae8 <HAL_InitTick>
  return HAL_OK;
 8006094:	2000      	movs	r0, #0
}
 8006096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609a:	0198      	lsls	r0, r3, #6
 800609c:	d4b1      	bmi.n	8006002 <HAL_RCC_ClockConfig+0x76>
 800609e:	e789      	b.n	8005fb4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80060a0:	2001      	movs	r0, #1
}
 80060a2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <HAL_RCC_ClockConfig+0x12c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	039e      	lsls	r6, r3, #14
 80060aa:	d4aa      	bmi.n	8006002 <HAL_RCC_ClockConfig+0x76>
 80060ac:	e782      	b.n	8005fb4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80060ae:	2003      	movs	r0, #3
 80060b0:	e781      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x2a>
 80060b2:	bf00      	nop
 80060b4:	40023c00 	.word	0x40023c00
 80060b8:	40023800 	.word	0x40023800
 80060bc:	0800a254 	.word	0x0800a254
 80060c0:	20000004 	.word	0x20000004
 80060c4:	200000cc 	.word	0x200000cc

080060c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80060ca:	4905      	ldr	r1, [pc, #20]	; (80060e0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	4a05      	ldr	r2, [pc, #20]	; (80060e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80060d0:	6808      	ldr	r0, [r1, #0]
 80060d2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80060d6:	5cd3      	ldrb	r3, [r2, r3]
}
 80060d8:	40d8      	lsrs	r0, r3
 80060da:	4770      	bx	lr
 80060dc:	40023800 	.word	0x40023800
 80060e0:	20000004 	.word	0x20000004
 80060e4:	0800a264 	.word	0x0800a264

080060e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80060ea:	4905      	ldr	r1, [pc, #20]	; (8006100 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	4a05      	ldr	r2, [pc, #20]	; (8006104 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80060f8:	40d8      	lsrs	r0, r3
 80060fa:	4770      	bx	lr
 80060fc:	40023800 	.word	0x40023800
 8006100:	20000004 	.word	0x20000004
 8006104:	0800a264 	.word	0x0800a264

08006108 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	461d      	mov	r5, r3
 8006110:	4616      	mov	r6, r2
 8006112:	460c      	mov	r4, r1
 8006114:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006116:	f7fe fd31 	bl	8004b7c <HAL_GetTick>
 800611a:	4435      	add	r5, r6
 800611c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800611e:	f7fe fd2d 	bl	8004b7c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800612a:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 800612e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006130:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006132:	1c73      	adds	r3, r6, #1
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	d107      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 8006138:	688b      	ldr	r3, [r1, #8]
 800613a:	ea34 0303 	bics.w	r3, r4, r3
 800613e:	d0fb      	beq.n	8006138 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8006140:	2000      	movs	r0, #0
}
 8006142:	b002      	add	sp, #8
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006148:	688b      	ldr	r3, [r1, #8]
 800614a:	ea34 0303 	bics.w	r3, r4, r3
 800614e:	d1f7      	bne.n	8006140 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006150:	f7fe fd14 	bl	8004b7c <HAL_GetTick>
 8006154:	eba0 0008 	sub.w	r0, r0, r8
 8006158:	42a8      	cmp	r0, r5
 800615a:	d208      	bcs.n	800616e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 800615c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800615e:	2b00      	cmp	r3, #0
      count--;
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006166:	bf08      	it	eq
 8006168:	2500      	moveq	r5, #0
      count--;
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	e7e1      	b.n	8006132 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006172:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006174:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800617c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617e:	d014      	beq.n	80061aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006182:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006186:	d007      	beq.n	8006198 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8006188:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800618a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800618c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006190:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006194:	2003      	movs	r0, #3
 8006196:	e7d4      	b.n	8006142 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e7ee      	b.n	8006188 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80061b0:	d002      	beq.n	80061b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80061b6:	d1e3      	bne.n	8006180 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e7de      	b.n	8006180 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 80061c2:	bf00      	nop
 80061c4:	20000004 	.word	0x20000004

080061c8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d05c      	beq.n	8006286 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 80061ce:	b570      	push	{r4, r5, r6, lr}
 80061d0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061d2:	2900      	cmp	r1, #0
 80061d4:	d047      	beq.n	8006266 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061d6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80061dc:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80061e4:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	d042      	beq.n	8006272 <HAL_SPI_Init+0xaa>
 80061ec:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 80061ee:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061f0:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 80061f2:	2302      	movs	r3, #2
 80061f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fe:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8006206:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800620a:	4313      	orrs	r3, r2
 800620c:	68e2      	ldr	r2, [r4, #12]
 800620e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006212:	4313      	orrs	r3, r2
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	f002 0202 	and.w	r2, r2, #2
 800621a:	4313      	orrs	r3, r2
 800621c:	6962      	ldr	r2, [r4, #20]
 800621e:	f002 0201 	and.w	r2, r2, #1
 8006222:	431a      	orrs	r2, r3
 8006224:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006226:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800622a:	f003 0638 	and.w	r6, r3, #56	; 0x38
 800622e:	69a1      	ldr	r1, [r4, #24]
 8006230:	6a23      	ldr	r3, [r4, #32]
 8006232:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 8006236:	f401 7300 	and.w	r3, r1, #512	; 0x200
 800623a:	4313      	orrs	r3, r2
 800623c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800623e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006240:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006244:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006248:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800624c:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800624e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006250:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006252:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006254:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800625a:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800625c:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800625e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006260:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8006264:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006266:	6843      	ldr	r3, [r0, #4]
 8006268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626c:	d0b6      	beq.n	80061dc <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800626e:	61c1      	str	r1, [r0, #28]
 8006270:	e7b4      	b.n	80061dc <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8006272:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006276:	4620      	mov	r0, r4
 8006278:	f7fb fa50 	bl	800171c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800627c:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006280:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8006284:	e7b3      	b.n	80061ee <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8006286:	2001      	movs	r0, #1
}
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop

0800628c <HAL_SPI_Transmit>:
{
 800628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006290:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006292:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8006296:	2801      	cmp	r0, #1
{
 8006298:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800629a:	f000 8087 	beq.w	80063ac <HAL_SPI_Transmit+0x120>
 800629e:	461d      	mov	r5, r3
 80062a0:	2301      	movs	r3, #1
 80062a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80062a6:	4688      	mov	r8, r1
 80062a8:	4617      	mov	r7, r2
 80062aa:	f7fe fc67 	bl	8004b7c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80062ae:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80062b2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80062b4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80062b6:	b2d8      	uxtb	r0, r3
 80062b8:	d009      	beq.n	80062ce <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80062ba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80062bc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80062be:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80062c0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062c4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80062c8:	b002      	add	sp, #8
 80062ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80062ce:	f1b8 0f00 	cmp.w	r8, #0
 80062d2:	d0f3      	beq.n	80062bc <HAL_SPI_Transmit+0x30>
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	d0f1      	beq.n	80062bc <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80062da:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062dc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e0:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062e2:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062e8:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 80062ec:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 80062f2:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062f4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062f6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062f8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fc:	f000 8083 	beq.w	8006406 <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006300:	6803      	ldr	r3, [r0, #0]
 8006302:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 8006304:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006306:	d403      	bmi.n	8006310 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8006308:	6803      	ldr	r3, [r0, #0]
 800630a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800630e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006310:	68e3      	ldr	r3, [r4, #12]
 8006312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006316:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006318:	d04c      	beq.n	80063b4 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8095 	beq.w	800644a <HAL_SPI_Transmit+0x1be>
 8006320:	2f01      	cmp	r7, #1
 8006322:	f000 8092 	beq.w	800644a <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 8006326:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	b1bb      	cbz	r3, 800635c <HAL_SPI_Transmit+0xd0>
 800632c:	2d00      	cmp	r5, #0
 800632e:	f000 80cb 	beq.w	80064c8 <HAL_SPI_Transmit+0x23c>
 8006332:	1c6f      	adds	r7, r5, #1
 8006334:	d17e      	bne.n	8006434 <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	0790      	lsls	r0, r2, #30
 800633c:	f140 8090 	bpl.w	8006460 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006340:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006346:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006348:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800634a:	3901      	subs	r1, #1
 800634c:	b289      	uxth	r1, r1
 800634e:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006350:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006352:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8006354:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006356:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8006358:	2900      	cmp	r1, #0
 800635a:	d1ec      	bne.n	8006336 <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800635c:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800635e:	4b72      	ldr	r3, [pc, #456]	; (8006528 <HAL_SPI_Transmit+0x29c>)
 8006360:	4972      	ldr	r1, [pc, #456]	; (800652c <HAL_SPI_Transmit+0x2a0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	fba1 1303 	umull	r1, r3, r1, r3
 8006368:	0d5b      	lsrs	r3, r3, #21
 800636a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800636e:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006372:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006376:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006378:	d107      	bne.n	800638a <HAL_SPI_Transmit+0xfe>
 800637a:	e0c6      	b.n	800650a <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800637c:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800637e:	6822      	ldr	r2, [r4, #0]
      count--;
 8006380:	3b01      	subs	r3, #1
 8006382:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006384:	6893      	ldr	r3, [r2, #8]
 8006386:	061b      	lsls	r3, r3, #24
 8006388:	d502      	bpl.n	8006390 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 800638a:	9b01      	ldr	r3, [sp, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f5      	bne.n	800637c <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006390:	68a3      	ldr	r3, [r4, #8]
 8006392:	b933      	cbnz	r3, 80063a2 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68d3      	ldr	r3, [r2, #12]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	6893      	ldr	r3, [r2, #8]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80063a4:	3800      	subs	r0, #0
 80063a6:	bf18      	it	ne
 80063a8:	2001      	movne	r0, #1
error:
 80063aa:	e787      	b.n	80062bc <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80063ac:	2002      	movs	r0, #2
}
 80063ae:	b002      	add	sp, #8
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063b4:	461a      	mov	r2, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d174      	bne.n	80064a4 <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ba:	4641      	mov	r1, r8
 80063bc:	f831 7b02 	ldrh.w	r7, [r1], #2
 80063c0:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c2:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80063c4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80063c6:	3901      	subs	r1, #1
 80063c8:	b289      	uxth	r1, r1
 80063ca:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80063cc:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80063ce:	b289      	uxth	r1, r1
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d0c4      	beq.n	800635e <HAL_SPI_Transmit+0xd2>
 80063d4:	2d00      	cmp	r5, #0
 80063d6:	f000 808b 	beq.w	80064f0 <HAL_SPI_Transmit+0x264>
 80063da:	1c69      	adds	r1, r5, #1
 80063dc:	d158      	bne.n	8006490 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063de:	6883      	ldr	r3, [r0, #8]
 80063e0:	079a      	lsls	r2, r3, #30
 80063e2:	f140 8089 	bpl.w	80064f8 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063e8:	f832 3b02 	ldrh.w	r3, [r2], #2
 80063ec:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80063ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f0:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80063f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ee      	bne.n	80063de <HAL_SPI_Transmit+0x152>
 8006400:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006402:	461a      	mov	r2, r3
 8006404:	e7ab      	b.n	800635e <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8006406:	6803      	ldr	r3, [r0, #0]
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800640e:	6803      	ldr	r3, [r0, #0]
 8006410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	e773      	b.n	8006300 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006418:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800641e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006420:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006422:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006424:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8006426:	b29b      	uxth	r3, r3
 8006428:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800642a:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800642c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d093      	beq.n	800635c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	0791      	lsls	r1, r2, #30
 800643a:	d4ed      	bmi.n	8006418 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800643c:	f7fe fb9e 	bl	8004b7c <HAL_GetTick>
 8006440:	1b80      	subs	r0, r0, r6
 8006442:	4285      	cmp	r5, r0
 8006444:	d8f2      	bhi.n	800642c <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 8006446:	2003      	movs	r0, #3
 8006448:	e738      	b.n	80062bc <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800644a:	f898 3000 	ldrb.w	r3, [r8]
 800644e:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8006450:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006452:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006454:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006456:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8006458:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800645a:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800645c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800645e:	e762      	b.n	8006326 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006460:	f7fe fb8c 	bl	8004b7c <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8006464:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	f47f af64 	bne.w	8006336 <HAL_SPI_Transmit+0xaa>
 800646e:	e775      	b.n	800635c <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006470:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006472:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006476:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 800647a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800647c:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800647e:	3b01      	subs	r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006484:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0b9      	beq.n	8006400 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800648c:	f8d4 c000 	ldr.w	ip, [r4]
 8006490:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006494:	079b      	lsls	r3, r3, #30
 8006496:	d4eb      	bmi.n	8006470 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006498:	f7fe fb70 	bl	8004b7c <HAL_GetTick>
 800649c:	1b80      	subs	r0, r0, r6
 800649e:	4285      	cmp	r5, r0
 80064a0:	d9d1      	bls.n	8006446 <HAL_SPI_Transmit+0x1ba>
 80064a2:	e7ef      	b.n	8006484 <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a4:	2f01      	cmp	r7, #1
 80064a6:	d191      	bne.n	80063cc <HAL_SPI_Transmit+0x140>
 80064a8:	e787      	b.n	80063ba <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80064b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80064ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064bc:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 80064be:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c0:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f43f af4a 	beq.w	800635c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	0792      	lsls	r2, r2, #30
 80064ce:	d4ec      	bmi.n	80064aa <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d0:	f7fe fb54 	bl	8004b7c <HAL_GetTick>
 80064d4:	e7b7      	b.n	8006446 <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80064d8:	f831 2b02 	ldrh.w	r2, [r1], #2
 80064dc:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 80064de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e0:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80064e2:	3a01      	subs	r2, #1
 80064e4:	b292      	uxth	r2, r2
 80064e6:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80064e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80064ea:	b292      	uxth	r2, r2
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	d088      	beq.n	8006402 <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f0:	6882      	ldr	r2, [r0, #8]
 80064f2:	0797      	lsls	r7, r2, #30
 80064f4:	d5ec      	bpl.n	80064d0 <HAL_SPI_Transmit+0x244>
 80064f6:	e7ee      	b.n	80064d6 <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f8:	f7fe fb40 	bl	8004b7c <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80064fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	f43f af7d 	beq.w	8006400 <HAL_SPI_Transmit+0x174>
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	e769      	b.n	80063de <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800650a:	4633      	mov	r3, r6
 800650c:	462a      	mov	r2, r5
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	4620      	mov	r0, r4
 8006512:	f7ff fdf9 	bl	8006108 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f af3a 	beq.w	8006390 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800651e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006520:	4313      	orrs	r3, r2
 8006522:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006524:	6562      	str	r2, [r4, #84]	; 0x54
 8006526:	e733      	b.n	8006390 <HAL_SPI_Transmit+0x104>
 8006528:	20000004 	.word	0x20000004
 800652c:	165e9f81 	.word	0x165e9f81

08006530 <HAL_SPI_TransmitReceive>:
{
 8006530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006534:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006536:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 800653a:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800653c:	2801      	cmp	r0, #1
{
 800653e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006540:	f000 8083 	beq.w	800664a <HAL_SPI_TransmitReceive+0x11a>
 8006544:	461f      	mov	r7, r3
 8006546:	2301      	movs	r3, #1
 8006548:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800654c:	4689      	mov	r9, r1
 800654e:	4690      	mov	r8, r2
 8006550:	f7fe fb14 	bl	8004b7c <HAL_GetTick>
 8006554:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8006556:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800655a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800655c:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800655e:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006560:	d011      	beq.n	8006586 <HAL_SPI_TransmitReceive+0x56>
 8006562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006566:	d009      	beq.n	800657c <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8006568:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800656a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800656c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800656e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006572:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006576:	b003      	add	sp, #12
 8006578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800657c:	68a2      	ldr	r2, [r4, #8]
 800657e:	2a00      	cmp	r2, #0
 8006580:	d1f2      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x38>
 8006582:	2904      	cmp	r1, #4
 8006584:	d1f0      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006586:	f1b9 0f00 	cmp.w	r9, #0
 800658a:	d062      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x122>
 800658c:	f1b8 0f00 	cmp.w	r8, #0
 8006590:	d05f      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x122>
 8006592:	2f00      	cmp	r7, #0
 8006594:	d05d      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006596:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800659a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800659e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065a0:	bf1c      	itt	ne
 80065a2:	2205      	movne	r2, #5
 80065a4:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a8:	2200      	movs	r2, #0
 80065aa:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80065ac:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b0:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 80065b2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80065b4:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b6:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 80065b8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ba:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065bc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065c0:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065c2:	d403      	bmi.n	80065cc <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 80065c4:	6811      	ldr	r1, [r2, #0]
 80065c6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80065ca:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065cc:	68e1      	ldr	r1, [r4, #12]
 80065ce:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80065d2:	d04e      	beq.n	8006672 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d03e      	beq.n	8006656 <HAL_SPI_TransmitReceive+0x126>
 80065d8:	2f01      	cmp	r7, #1
 80065da:	d03c      	beq.n	8006656 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 80065dc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	b91b      	cbnz	r3, 80065ec <HAL_SPI_TransmitReceive+0xbc>
 80065e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d07f      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	6893      	ldr	r3, [r2, #8]
 80065f0:	0799      	lsls	r1, r3, #30
 80065f2:	d50f      	bpl.n	8006614 <HAL_SPI_TransmitReceive+0xe4>
 80065f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	b163      	cbz	r3, 8006614 <HAL_SPI_TransmitReceive+0xe4>
 80065fa:	b15f      	cbz	r7, 8006614 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8006602:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8006604:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006606:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8006608:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800660a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800660c:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800660e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8006610:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006612:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006614:	6893      	ldr	r3, [r2, #8]
 8006616:	f013 0301 	ands.w	r3, r3, #1
 800661a:	d00d      	beq.n	8006638 <HAL_SPI_TransmitReceive+0x108>
 800661c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800661e:	b289      	uxth	r1, r1
 8006620:	b151      	cbz	r1, 8006638 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8006622:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006624:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006626:	68d2      	ldr	r2, [r2, #12]
 8006628:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800662a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800662c:	3301      	adds	r3, #1
 800662e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006632:	3b01      	subs	r3, #1
 8006634:	b29b      	uxth	r3, r3
 8006636:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006638:	f7fe faa0 	bl	8004b7c <HAL_GetTick>
 800663c:	1b80      	subs	r0, r0, r6
 800663e:	42a8      	cmp	r0, r5
 8006640:	d314      	bcc.n	800666c <HAL_SPI_TransmitReceive+0x13c>
 8006642:	1c6a      	adds	r2, r5, #1
 8006644:	d0cb      	beq.n	80065de <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8006646:	2003      	movs	r0, #3
 8006648:	e78f      	b.n	800656a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800664a:	2002      	movs	r0, #2
}
 800664c:	b003      	add	sp, #12
 800664e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8006652:	2001      	movs	r0, #1
 8006654:	e789      	b.n	800656a <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006656:	f899 3000 	ldrb.w	r3, [r9]
 800665a:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 800665c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800665e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006660:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006662:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8006664:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006666:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006668:	86e3      	strh	r3, [r4, #54]	; 0x36
 800666a:	e7b7      	b.n	80065dc <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800666c:	2d00      	cmp	r5, #0
 800666e:	d1b6      	bne.n	80065de <HAL_SPI_TransmitReceive+0xae>
 8006670:	e7e9      	b.n	8006646 <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006672:	2b00      	cmp	r3, #0
 8006674:	d16c      	bne.n	8006750 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006676:	4649      	mov	r1, r9
 8006678:	f831 3b02 	ldrh.w	r3, [r1], #2
 800667c:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800667e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006680:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006682:	3b01      	subs	r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006688:	1c6a      	adds	r2, r5, #1
{
 800668a:	f04f 0701 	mov.w	r7, #1
 800668e:	d025      	beq.n	80066dc <HAL_SPI_TransmitReceive+0x1ac>
 8006690:	e061      	b.n	8006756 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	6893      	ldr	r3, [r2, #8]
 8006696:	079b      	lsls	r3, r3, #30
 8006698:	d50d      	bpl.n	80066b6 <HAL_SPI_TransmitReceive+0x186>
 800669a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	b153      	cbz	r3, 80066b6 <HAL_SPI_TransmitReceive+0x186>
 80066a0:	b14f      	cbz	r7, 80066b6 <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80066a4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80066a8:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80066aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ac:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80066b2:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80066b4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b6:	6893      	ldr	r3, [r2, #8]
 80066b8:	f013 0301 	ands.w	r3, r3, #1
 80066bc:	d00c      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x1a8>
 80066be:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80066c0:	b289      	uxth	r1, r1
 80066c2:	b149      	cbz	r1, 80066d8 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066c4:	68d1      	ldr	r1, [r2, #12]
 80066c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80066c8:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80066cc:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80066ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066d0:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066d8:	f7fe fa50 	bl	8004b7c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1d6      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x162>
 80066e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1d2      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066ec:	4b33      	ldr	r3, [pc, #204]	; (80067bc <HAL_SPI_TransmitReceive+0x28c>)
 80066ee:	4a34      	ldr	r2, [pc, #208]	; (80067c0 <HAL_SPI_TransmitReceive+0x290>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	0d5b      	lsrs	r3, r3, #21
 80066f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006700:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006702:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006704:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006708:	d114      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800670a:	4633      	mov	r3, r6
 800670c:	462a      	mov	r2, r5
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	4620      	mov	r0, r4
 8006712:	f7ff fcf9 	bl	8006108 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006716:	b180      	cbz	r0, 800673a <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006718:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800671a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671c:	4313      	orrs	r3, r2
 800671e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006720:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006722:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8006724:	e721      	b.n	800656a <HAL_SPI_TransmitReceive+0x3a>
      count--;
 8006726:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006728:	6822      	ldr	r2, [r4, #0]
      count--;
 800672a:	3b01      	subs	r3, #1
 800672c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800672e:	6893      	ldr	r3, [r2, #8]
 8006730:	061b      	lsls	r3, r3, #24
 8006732:	d502      	bpl.n	800673a <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f5      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800673a:	68a0      	ldr	r0, [r4, #8]
 800673c:	2800      	cmp	r0, #0
 800673e:	d13a      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	9000      	str	r0, [sp, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	9200      	str	r2, [sp, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	9b00      	ldr	r3, [sp, #0]
 800674e:	e70c      	b.n	800656a <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006750:	2f01      	cmp	r7, #1
 8006752:	d199      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x158>
 8006754:	e78f      	b.n	8006676 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006756:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006758:	b29b      	uxth	r3, r3
 800675a:	b91b      	cbnz	r3, 8006764 <HAL_SPI_TransmitReceive+0x234>
 800675c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0c3      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	6893      	ldr	r3, [r2, #8]
 8006768:	0798      	lsls	r0, r3, #30
 800676a:	d50d      	bpl.n	8006788 <HAL_SPI_TransmitReceive+0x258>
 800676c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800676e:	b29b      	uxth	r3, r3
 8006770:	b153      	cbz	r3, 8006788 <HAL_SPI_TransmitReceive+0x258>
 8006772:	b14f      	cbz	r7, 8006788 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006774:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006776:	f833 1b02 	ldrh.w	r1, [r3], #2
 800677a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800677c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800677e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006780:	3b01      	subs	r3, #1
 8006782:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8006784:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8006786:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006788:	6893      	ldr	r3, [r2, #8]
 800678a:	f013 0301 	ands.w	r3, r3, #1
 800678e:	d00c      	beq.n	80067aa <HAL_SPI_TransmitReceive+0x27a>
 8006790:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006792:	b289      	uxth	r1, r1
 8006794:	b149      	cbz	r1, 80067aa <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006796:	68d1      	ldr	r1, [r2, #12]
 8006798:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800679a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800679e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80067a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067a2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067aa:	f7fe f9e7 	bl	8004b7c <HAL_GetTick>
 80067ae:	1b80      	subs	r0, r0, r6
 80067b0:	42a8      	cmp	r0, r5
 80067b2:	d3d0      	bcc.n	8006756 <HAL_SPI_TransmitReceive+0x226>
 80067b4:	e747      	b.n	8006646 <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067b6:	2000      	movs	r0, #0
 80067b8:	e6d7      	b.n	800656a <HAL_SPI_TransmitReceive+0x3a>
 80067ba:	bf00      	nop
 80067bc:	20000004 	.word	0x20000004
 80067c0:	165e9f81 	.word	0x165e9f81

080067c4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d076      	beq.n	80068b6 <HAL_TIM_Base_Init+0xf2>
{
 80067c8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067ce:	4604      	mov	r4, r0
 80067d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d055      	beq.n	8006884 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067da:	4938      	ldr	r1, [pc, #224]	; (80068bc <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	2302      	movs	r3, #2
 80067de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80067e4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e6:	d052      	beq.n	800688e <HAL_TIM_Base_Init+0xca>
 80067e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80067ec:	d021      	beq.n	8006832 <HAL_TIM_Base_Init+0x6e>
 80067ee:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80067f2:	428a      	cmp	r2, r1
 80067f4:	d01d      	beq.n	8006832 <HAL_TIM_Base_Init+0x6e>
 80067f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067fa:	428a      	cmp	r2, r1
 80067fc:	d019      	beq.n	8006832 <HAL_TIM_Base_Init+0x6e>
 80067fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006802:	428a      	cmp	r2, r1
 8006804:	d015      	beq.n	8006832 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006806:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800680a:	428a      	cmp	r2, r1
 800680c:	d015      	beq.n	800683a <HAL_TIM_Base_Init+0x76>
 800680e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006812:	428a      	cmp	r2, r1
 8006814:	d011      	beq.n	800683a <HAL_TIM_Base_Init+0x76>
 8006816:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800681a:	428a      	cmp	r2, r1
 800681c:	d00d      	beq.n	800683a <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800681e:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006820:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006826:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006828:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800682a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800682c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800682e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006830:	e010      	b.n	8006854 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8006832:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006838:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800683e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006842:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006848:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800684a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800684c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800684e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006852:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006854:	2301      	movs	r3, #1
 8006856:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006858:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006860:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006864:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006868:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006874:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006878:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800687c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006880:	2000      	movs	r0, #0
}
 8006882:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006884:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006888:	f7fa ff98 	bl	80017bc <HAL_TIM_Base_MspInit>
 800688c:	e7a4      	b.n	80067d8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800688e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006890:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006896:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800689e:	69a1      	ldr	r1, [r4, #24]
 80068a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80068a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a8:	68e3      	ldr	r3, [r4, #12]
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	6963      	ldr	r3, [r4, #20]
 80068b2:	6313      	str	r3, [r2, #48]	; 0x30
 80068b4:	e7ce      	b.n	8006854 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80068b6:	2001      	movs	r0, #1
}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000

080068c0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80068c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d127      	bne.n	8006918 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ca:	4915      	ldr	r1, [pc, #84]	; (8006920 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	2202      	movs	r2, #2
 80068ce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068dc:	d011      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x42>
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e2:	d00e      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x42>
 80068e4:	4a0f      	ldr	r2, [pc, #60]	; (8006924 <HAL_TIM_Base_Start_IT+0x64>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x42>
 80068ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x42>
 80068f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x42>
 80068fa:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80068fe:	4293      	cmp	r3, r2
 8006900:	d104      	bne.n	800690c <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	2a06      	cmp	r2, #6
 800690a:	d007      	beq.n	800691c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8006912:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	4770      	bx	lr
    return HAL_ERROR;
 8006918:	2001      	movs	r0, #1
 800691a:	4770      	bx	lr
  return HAL_OK;
 800691c:	2000      	movs	r0, #0
}
 800691e:	4770      	bx	lr
 8006920:	40010000 	.word	0x40010000
 8006924:	40000400 	.word	0x40000400

08006928 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006928:	6803      	ldr	r3, [r0, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	f241 1111 	movw	r1, #4369	; 0x1111
 8006938:	420a      	tst	r2, r1
 800693a:	d108      	bne.n	800694e <HAL_TIM_Base_Stop_IT+0x26>
 800693c:	6a19      	ldr	r1, [r3, #32]
 800693e:	f240 4244 	movw	r2, #1092	; 0x444
 8006942:	4211      	tst	r1, r2
 8006944:	d103      	bne.n	800694e <HAL_TIM_Base_Stop_IT+0x26>
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800694e:	2301      	movs	r3, #1
 8006950:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006954:	2000      	movs	r0, #0
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006958:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d075      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0xf4>
 8006960:	4602      	mov	r2, r0
{
 8006962:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006966:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800696c:	2001      	movs	r0, #1
 800696e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006972:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006978:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800697c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800697e:	680b      	ldr	r3, [r1, #0]
 8006980:	2b60      	cmp	r3, #96	; 0x60
 8006982:	d065      	beq.n	8006a50 <HAL_TIM_ConfigClockSource+0xf8>
 8006984:	d824      	bhi.n	80069d0 <HAL_TIM_ConfigClockSource+0x78>
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d07c      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x12c>
 800698a:	d94b      	bls.n	8006a24 <HAL_TIM_ConfigClockSource+0xcc>
 800698c:	2b50      	cmp	r3, #80	; 0x50
 800698e:	d117      	bne.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006990:	6848      	ldr	r0, [r1, #4]
 8006992:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006994:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006996:	6a23      	ldr	r3, [r4, #32]
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80069a8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ae:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80069b0:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b2:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069b8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80069bc:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069be:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80069c2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80069c8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80069cc:	bc30      	pop	{r4, r5}
 80069ce:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d4:	d038      	beq.n	8006a48 <HAL_TIM_ConfigClockSource+0xf0>
 80069d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069da:	d110      	bne.n	80069fe <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069dc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80069e0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069e2:	432b      	orrs	r3, r5
 80069e4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80069ee:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069f2:	68a3      	ldr	r3, [r4, #8]
 80069f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80069f8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069fa:	60a3      	str	r3, [r4, #8]
      break;
 80069fc:	e7e0      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80069fe:	2b70      	cmp	r3, #112	; 0x70
 8006a00:	d1de      	bne.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a02:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006a06:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a08:	432b      	orrs	r3, r5
 8006a0a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a10:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006a14:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006a16:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006a18:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8006a20:	60a3      	str	r3, [r4, #8]
      break;
 8006a22:	e7cd      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d002      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0xd6>
 8006a28:	d90a      	bls.n	8006a40 <HAL_TIM_ConfigClockSource+0xe8>
 8006a2a:	2b30      	cmp	r3, #48	; 0x30
 8006a2c:	d1c8      	bne.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8006a2e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a30:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a34:	430b      	orrs	r3, r1
 8006a36:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8006a3a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006a3c:	60a3      	str	r3, [r4, #8]
}
 8006a3e:	e7bf      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006a40:	f033 0110 	bics.w	r1, r3, #16
 8006a44:	d1bc      	bne.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
 8006a46:	e7f2      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e7b9      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8006a4c:	2002      	movs	r0, #2
}
 8006a4e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a50:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a52:	68cb      	ldr	r3, [r1, #12]
 8006a54:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a56:	f020 0010 	bic.w	r0, r0, #16
 8006a5a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5c:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a5e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a62:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006a66:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006a68:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006a72:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006a74:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a7a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006a7e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006a80:	60a3      	str	r3, [r4, #8]
}
 8006a82:	e79d      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a84:	6848      	ldr	r0, [r1, #4]
 8006a86:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006a88:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8a:	6a23      	ldr	r3, [r4, #32]
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a92:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a94:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006a9c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a9e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006aa2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006aa6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aac:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006ab2:	60a3      	str	r3, [r4, #8]
}
 8006ab4:	e784      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x68>
 8006ab6:	bf00      	nop

08006ab8 <HAL_TIM_PeriodElapsedCallback>:
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop

08006abc <HAL_TIM_OC_DelayElapsedCallback>:
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop

08006ac0 <HAL_TIM_IC_CaptureCallback>:
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop

08006ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <HAL_TIM_TriggerCallback>:
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop

08006acc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006acc:	6803      	ldr	r3, [r0, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	0791      	lsls	r1, r2, #30
{
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ad6:	d502      	bpl.n	8006ade <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	0792      	lsls	r2, r2, #30
 8006adc:	d45f      	bmi.n	8006b9e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	0750      	lsls	r0, r2, #29
 8006ae2:	d502      	bpl.n	8006aea <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	0751      	lsls	r1, r2, #29
 8006ae8:	d446      	bmi.n	8006b78 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	0712      	lsls	r2, r2, #28
 8006aee:	d502      	bpl.n	8006af6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	0710      	lsls	r0, r2, #28
 8006af4:	d42e      	bmi.n	8006b54 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	06d2      	lsls	r2, r2, #27
 8006afa:	d502      	bpl.n	8006b02 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	06d0      	lsls	r0, r2, #27
 8006b00:	d418      	bmi.n	8006b34 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	07d1      	lsls	r1, r2, #31
 8006b06:	d502      	bpl.n	8006b0e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	07d2      	lsls	r2, r2, #31
 8006b0c:	d45d      	bmi.n	8006bca <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	0610      	lsls	r0, r2, #24
 8006b12:	d502      	bpl.n	8006b1a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	0611      	lsls	r1, r2, #24
 8006b18:	d45f      	bmi.n	8006bda <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	0652      	lsls	r2, r2, #25
 8006b1e:	d502      	bpl.n	8006b26 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	0650      	lsls	r0, r2, #25
 8006b24:	d461      	bmi.n	8006bea <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	0691      	lsls	r1, r2, #26
 8006b2a:	d502      	bpl.n	8006b32 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	0692      	lsls	r2, r2, #26
 8006b30:	d443      	bmi.n	8006bba <HAL_TIM_IRQHandler+0xee>
}
 8006b32:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b34:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b38:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b3a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b3c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006b44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b46:	d064      	beq.n	8006c12 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b48:	f7ff ffba 	bl	8006ac0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b4e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b50:	7722      	strb	r2, [r4, #28]
 8006b52:	e7d6      	b.n	8006b02 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b54:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b58:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b5a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006b62:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b64:	d152      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	f7ff ffa9 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff ffaa 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b70:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b72:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b74:	7722      	strb	r2, [r4, #28]
 8006b76:	e7be      	b.n	8006af6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b78:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b7c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006b88:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8a:	d13c      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8c:	f7ff ff96 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7ff ff97 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b98:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	7722      	strb	r2, [r4, #28]
 8006b9c:	e7a5      	b.n	8006aea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b9e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ba2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ba6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	079b      	lsls	r3, r3, #30
 8006bac:	d025      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006bae:	f7ff ff87 	bl	8006ac0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bb4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	7722      	strb	r2, [r4, #28]
 8006bb8:	e791      	b.n	8006ade <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006bbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bc0:	611a      	str	r2, [r3, #16]
}
 8006bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006bc6:	f000 b863 	b.w	8006c90 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bca:	f06f 0201 	mvn.w	r2, #1
 8006bce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7ff ff71 	bl	8006ab8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	e799      	b.n	8006b0e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 f857 	bl	8006c94 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	e797      	b.n	8006b1a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff ff69 	bl	8006ac8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	e795      	b.n	8006b26 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfa:	f7ff ff5f 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff ff60 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c04:	e7d5      	b.n	8006bb2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c06:	f7ff ff5b 	bl	8006ac0 <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e7c4      	b.n	8006b96 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0c:	f7ff ff58 	bl	8006ac0 <HAL_TIM_IC_CaptureCallback>
 8006c10:	e7ae      	b.n	8006b70 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c12:	f7ff ff53 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff ff54 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c1c:	e796      	b.n	8006b4c <HAL_TIM_IRQHandler+0x80>
 8006c1e:	bf00      	nop

08006c20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d02f      	beq.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c28:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2a:	2202      	movs	r2, #2
{
 8006c2c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006c32:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c34:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006c36:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c3c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	4a12      	ldr	r2, [pc, #72]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d012      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d00f      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c4c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00b      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c64:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c6c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c6e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c72:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c74:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006c76:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006c7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006c82:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006c84:	4618      	mov	r0, r3
}
 8006c86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006c88:	2002      	movs	r0, #2
}
 8006c8a:	4770      	bx	lr
 8006c8c:	40010000 	.word	0x40010000

08006c90 <HAL_TIMEx_CommutCallback>:
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <HAL_TIMEx_BreakCallback>:
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop

08006c98 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f000 808f 	beq.w	8006dbc <HAL_UART_Init+0x124>
{
 8006c9e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8081 	beq.w	8006db2 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb0:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb2:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8006cb4:	2224      	movs	r2, #36	; 0x24
 8006cb6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cc4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006cca:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ccc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cce:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd0:	4302      	orrs	r2, r0
 8006cd2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006cd4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd6:	4302      	orrs	r2, r0
 8006cd8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006cda:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8006cde:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ce2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ce8:	695a      	ldr	r2, [r3, #20]
 8006cea:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cec:	4934      	ldr	r1, [pc, #208]	; (8006dc0 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006cf2:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cf4:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cf6:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cf8:	d035      	beq.n	8006d66 <HAL_UART_Init+0xce>
 8006cfa:	4a32      	ldr	r2, [pc, #200]	; (8006dc4 <HAL_UART_Init+0x12c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d032      	beq.n	8006d66 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d00:	f7ff f9e2 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d04:	69e3      	ldr	r3, [r4, #28]
 8006d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0a:	d032      	beq.n	8006d72 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	2119      	movs	r1, #25
 8006d10:	009a      	lsls	r2, r3, #2
 8006d12:	fba0 0101 	umull	r0, r1, r0, r1
 8006d16:	0f9b      	lsrs	r3, r3, #30
 8006d18:	f7f9 fab2 	bl	8000280 <__aeabi_uldivmod>
 8006d1c:	492a      	ldr	r1, [pc, #168]	; (8006dc8 <HAL_UART_Init+0x130>)
 8006d1e:	fba1 3200 	umull	r3, r2, r1, r0
 8006d22:	0952      	lsrs	r2, r2, #5
 8006d24:	2564      	movs	r5, #100	; 0x64
 8006d26:	fb05 0012 	mls	r0, r5, r2, r0
 8006d2a:	0100      	lsls	r0, r0, #4
 8006d2c:	3032      	adds	r0, #50	; 0x32
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	fba1 1000 	umull	r1, r0, r1, r0
 8006d34:	0112      	lsls	r2, r2, #4
 8006d36:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8006d3a:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d4a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006d4c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d50:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006d52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d56:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d58:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d5a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d5e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8006d62:	4628      	mov	r0, r5
}
 8006d64:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d66:	f7ff f9bf 	bl	80060e8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d6a:	69e3      	ldr	r3, [r4, #28]
 8006d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d70:	d1cc      	bne.n	8006d0c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d72:	6862      	ldr	r2, [r4, #4]
 8006d74:	2119      	movs	r1, #25
 8006d76:	1892      	adds	r2, r2, r2
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	415b      	adcs	r3, r3
 8006d7e:	fba0 0101 	umull	r0, r1, r0, r1
 8006d82:	f7f9 fa7d 	bl	8000280 <__aeabi_uldivmod>
 8006d86:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <HAL_UART_Init+0x130>)
 8006d88:	fba3 2100 	umull	r2, r1, r3, r0
 8006d8c:	094d      	lsrs	r5, r1, #5
 8006d8e:	2264      	movs	r2, #100	; 0x64
 8006d90:	fb02 0215 	mls	r2, r2, r5, r0
 8006d94:	00d2      	lsls	r2, r2, #3
 8006d96:	3232      	adds	r2, #50	; 0x32
 8006d98:	fba3 3202 	umull	r3, r2, r3, r2
 8006d9c:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8006da0:	0912      	lsrs	r2, r2, #4
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8006da8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006dac:	440a      	add	r2, r1
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	e7c4      	b.n	8006d3c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8006db2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006db6:	f7fa fd23 	bl	8001800 <HAL_UART_MspInit>
 8006dba:	e779      	b.n	8006cb0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8006dbc:	2001      	movs	r0, #1
}
 8006dbe:	4770      	bx	lr
 8006dc0:	40011000 	.word	0x40011000
 8006dc4:	40011400 	.word	0x40011400
 8006dc8:	51eb851f 	.word	0x51eb851f

08006dcc <HAL_UART_Transmit>:
{
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8006dd6:	2820      	cmp	r0, #32
 8006dd8:	d177      	bne.n	8006eca <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8006dda:	4689      	mov	r9, r1
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	d040      	beq.n	8006e62 <HAL_UART_Transmit+0x96>
 8006de0:	4614      	mov	r4, r2
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	d03d      	beq.n	8006e62 <HAL_UART_Transmit+0x96>
 8006de6:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8006de8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d06c      	beq.n	8006eca <HAL_UART_Transmit+0xfe>
 8006df0:	2301      	movs	r3, #1
 8006df2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df6:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dfa:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e00:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8006e04:	f7fd feba 	bl	8004b7c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e08:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8006e0a:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006e10:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8006e12:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e14:	d05c      	beq.n	8006ed0 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8006e16:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8006e18:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8006e1a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8006e1c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d07e      	beq.n	8006f22 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e24:	682c      	ldr	r4, [r5, #0]
 8006e26:	1c72      	adds	r2, r6, #1
 8006e28:	d11e      	bne.n	8006e68 <HAL_UART_Transmit+0x9c>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	0613      	lsls	r3, r2, #24
 8006e2e:	d5fc      	bpl.n	8006e2a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8006e30:	f1b9 0f00 	cmp.w	r9, #0
 8006e34:	d044      	beq.n	8006ec0 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e36:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006e3a:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8006e3c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e44:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1ec      	bne.n	8006e26 <HAL_UART_Transmit+0x5a>
 8006e4c:	1c71      	adds	r1, r6, #1
 8006e4e:	d145      	bne.n	8006edc <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	065a      	lsls	r2, r3, #25
 8006e54:	d5fc      	bpl.n	8006e50 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8006e56:	2320      	movs	r3, #32
 8006e58:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8006e5c:	2000      	movs	r0, #0
}
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006e62:	2001      	movs	r0, #1
}
 8006e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	0618      	lsls	r0, r3, #24
 8006e6c:	d4e0      	bmi.n	8006e30 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e6e:	b12e      	cbz	r6, 8006e7c <HAL_UART_Transmit+0xb0>
 8006e70:	f7fd fe84 	bl	8004b7c <HAL_GetTick>
 8006e74:	1bc0      	subs	r0, r0, r7
 8006e76:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e78:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e7a:	d2d4      	bcs.n	8006e26 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	f104 030c 	add.w	r3, r4, #12
 8006e80:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	f104 010c 	add.w	r1, r4, #12
 8006e8c:	e841 3200 	strex	r2, r3, [r1]
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	d1f3      	bne.n	8006e7c <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	f104 0314 	add.w	r3, r4, #20
 8006e98:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	f104 0114 	add.w	r1, r4, #20
 8006ea4:	e841 3200 	strex	r2, r3, [r1]
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	d1f3      	bne.n	8006e94 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8006eac:	2320      	movs	r3, #32
 8006eae:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8006eb2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8006eba:	2003      	movs	r0, #3
}
 8006ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ec0:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	e7b7      	b.n	8006e3a <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8006eca:	2002      	movs	r0, #2
}
 8006ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed0:	692b      	ldr	r3, [r5, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d19f      	bne.n	8006e16 <HAL_UART_Transmit+0x4a>
 8006ed6:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8006ed8:	4699      	mov	r9, r3
 8006eda:	e79c      	b.n	8006e16 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	065b      	lsls	r3, r3, #25
 8006ee0:	d4b9      	bmi.n	8006e56 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ee2:	b12e      	cbz	r6, 8006ef0 <HAL_UART_Transmit+0x124>
 8006ee4:	f7fd fe4a 	bl	8004b7c <HAL_GetTick>
 8006ee8:	1bc0      	subs	r0, r0, r7
 8006eea:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eec:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006eee:	d2ad      	bcs.n	8006e4c <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	f104 030c 	add.w	r3, r4, #12
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	f104 010c 	add.w	r1, r4, #12
 8006f00:	e841 3200 	strex	r2, r3, [r1]
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	d1f3      	bne.n	8006ef0 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	f104 0314 	add.w	r3, r4, #20
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	f104 0114 	add.w	r1, r4, #20
 8006f18:	e841 3200 	strex	r2, r3, [r1]
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	d1f3      	bne.n	8006f08 <HAL_UART_Transmit+0x13c>
 8006f20:	e7c4      	b.n	8006eac <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f22:	682c      	ldr	r4, [r5, #0]
 8006f24:	e792      	b.n	8006e4c <HAL_UART_Transmit+0x80>
 8006f26:	bf00      	nop

08006f28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f28:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006f2a:	4903      	ldr	r1, [pc, #12]	; (8006f38 <MX_FATFS_Init+0x10>)
 8006f2c:	4803      	ldr	r0, [pc, #12]	; (8006f3c <MX_FATFS_Init+0x14>)
 8006f2e:	f002 fbfb 	bl	8009728 <FATFS_LinkDriver>
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <MX_FATFS_Init+0x18>)
 8006f34:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f36:	bd08      	pop	{r3, pc}
 8006f38:	20016e5c 	.word	0x20016e5c
 8006f3c:	200000d0 	.word	0x200000d0
 8006f40:	20016e60 	.word	0x20016e60

08006f44 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8006f44:	2000      	movs	r0, #0
 8006f46:	4770      	bx	lr

08006f48 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8006f48:	f7f9 bd6a 	b.w	8000a20 <SD_disk_initialize>

08006f4c <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006f4c:	f7f9 be78 	b.w	8000c40 <SD_disk_status>

08006f50 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006f50:	f7f9 be80 	b.w	8000c54 <SD_disk_read>

08006f54 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006f54:	f7f9 bfcc 	b.w	8000ef0 <SD_disk_write>

08006f58 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006f58:	f7fa b850 	b.w	8000ffc <SD_disk_ioctl>

08006f5c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <disk_status+0x10>)
 8006f5e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8006f62:	4403      	add	r3, r0
 8006f64:	6852      	ldr	r2, [r2, #4]
 8006f66:	7a18      	ldrb	r0, [r3, #8]
 8006f68:	6853      	ldr	r3, [r2, #4]
 8006f6a:	4718      	bx	r3
 8006f6c:	2001708c 	.word	0x2001708c

08006f70 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <disk_initialize+0x1c>)
 8006f72:	5c1a      	ldrb	r2, [r3, r0]
 8006f74:	b942      	cbnz	r2, 8006f88 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006f76:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006f7e:	6852      	ldr	r2, [r2, #4]
 8006f80:	4418      	add	r0, r3
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	7a00      	ldrb	r0, [r0, #8]
 8006f86:	4718      	bx	r3
  }
  return stat;
}
 8006f88:	2000      	movs	r0, #0
 8006f8a:	4770      	bx	lr
 8006f8c:	2001708c 	.word	0x2001708c

08006f90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f90:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f92:	4c05      	ldr	r4, [pc, #20]	; (8006fa8 <disk_read+0x18>)
 8006f94:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006f98:	4404      	add	r4, r0
 8006f9a:	686d      	ldr	r5, [r5, #4]
 8006f9c:	7a20      	ldrb	r0, [r4, #8]
 8006f9e:	68ac      	ldr	r4, [r5, #8]
 8006fa0:	46a4      	mov	ip, r4
  return res;
}
 8006fa2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006fa4:	4760      	bx	ip
 8006fa6:	bf00      	nop
 8006fa8:	2001708c 	.word	0x2001708c

08006fac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006fac:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006fae:	4c05      	ldr	r4, [pc, #20]	; (8006fc4 <disk_write+0x18>)
 8006fb0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006fb4:	4404      	add	r4, r0
 8006fb6:	686d      	ldr	r5, [r5, #4]
 8006fb8:	7a20      	ldrb	r0, [r4, #8]
 8006fba:	68ec      	ldr	r4, [r5, #12]
 8006fbc:	46a4      	mov	ip, r4
  return res;
}
 8006fbe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006fc0:	4760      	bx	ip
 8006fc2:	bf00      	nop
 8006fc4:	2001708c 	.word	0x2001708c

08006fc8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <disk_ioctl+0x14>)
 8006fca:	eb03 0c00 	add.w	ip, r3, r0
 8006fce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006fd2:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	4718      	bx	r3
 8006fdc:	2001708c 	.word	0x2001708c

08006fe0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8006fe0:	4b2a      	ldr	r3, [pc, #168]	; (800708c <inc_lock+0xac>)
{
 8006fe2:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	6805      	ldr	r5, [r0, #0]
 8006fe8:	4295      	cmp	r5, r2
 8006fea:	d01d      	beq.n	8007028 <inc_lock+0x48>
 8006fec:	691c      	ldr	r4, [r3, #16]
 8006fee:	42ac      	cmp	r4, r5
 8006ff0:	d007      	beq.n	8007002 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d02e      	beq.n	8007054 <inc_lock+0x74>
 8006ff6:	2c00      	cmp	r4, #0
 8006ff8:	d044      	beq.n	8007084 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ffa:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8007000:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8007002:	695e      	ldr	r6, [r3, #20]
 8007004:	6887      	ldr	r7, [r0, #8]
 8007006:	42be      	cmp	r6, r7
 8007008:	d1f3      	bne.n	8006ff2 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800700a:	699e      	ldr	r6, [r3, #24]
 800700c:	6947      	ldr	r7, [r0, #20]
 800700e:	42be      	cmp	r6, r7
 8007010:	d1ef      	bne.n	8006ff2 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007012:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007014:	b999      	cbnz	r1, 800703e <inc_lock+0x5e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007016:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 800701a:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800701e:	8989      	ldrh	r1, [r1, #12]
	return i + 1;
 8007020:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007022:	1c4a      	adds	r2, r1, #1
 8007024:	b292      	uxth	r2, r2
 8007026:	e028      	b.n	800707a <inc_lock+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 8007028:	6884      	ldr	r4, [r0, #8]
 800702a:	685e      	ldr	r6, [r3, #4]
 800702c:	42a6      	cmp	r6, r4
 800702e:	d1dd      	bne.n	8006fec <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 8007030:	689c      	ldr	r4, [r3, #8]
 8007032:	6946      	ldr	r6, [r0, #20]
 8007034:	42a6      	cmp	r6, r4
 8007036:	d1d9      	bne.n	8006fec <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007038:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800703a:	2900      	cmp	r1, #0
 800703c:	d0eb      	beq.n	8007016 <inc_lock+0x36>
 800703e:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8007042:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8007046:	8989      	ldrh	r1, [r1, #12]
 8007048:	2900      	cmp	r1, #0
 800704a:	d1d6      	bne.n	8006ffa <inc_lock+0x1a>
	return i + 1;
 800704c:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800704e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007052:	e012      	b.n	800707a <inc_lock+0x9a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007054:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007056:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 8007058:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800705c:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 8007060:	6942      	ldr	r2, [r0, #20]
 8007062:	6880      	ldr	r0, [r0, #8]
		Files[i].fs = dp->obj.fs;
 8007064:	f843 500c 	str.w	r5, [r3, ip]
		Files[i].clu = dp->obj.sclust;
 8007068:	e9c1 0201 	strd	r0, r2, [r1, #4]
		Files[i].ctr = 0;
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007072:	bf14      	ite	ne
 8007074:	f44f 7280 	movne.w	r2, #256	; 0x100
 8007078:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800707a:	4463      	add	r3, ip
}
 800707c:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800707e:	819a      	strh	r2, [r3, #12]
}
 8007080:	bcf0      	pop	{r4, r5, r6, r7}
 8007082:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007084:	2402      	movs	r4, #2
 8007086:	2201      	movs	r2, #1
 8007088:	e7e5      	b.n	8007056 <inc_lock+0x76>
 800708a:	bf00      	nop
 800708c:	20016e68 	.word	0x20016e68

08007090 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007090:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007092:	f04f 36ff 	mov.w	r6, #4294967295
 8007096:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007098:	42b1      	cmp	r1, r6
{
 800709a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800709c:	70c3      	strb	r3, [r0, #3]
 800709e:	6346      	str	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070a0:	d00c      	beq.n	80070bc <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070a2:	460d      	mov	r5, r1
 80070a4:	460a      	mov	r2, r1
 80070a6:	7840      	ldrb	r0, [r0, #1]
 80070a8:	2301      	movs	r3, #1
 80070aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80070ae:	f7ff ff6f 	bl	8006f90 <disk_read>
 80070b2:	b110      	cbz	r0, 80070ba <check_fs+0x2a>
			fs->winsect = sector;
 80070b4:	6366      	str	r6, [r4, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80070b6:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 80070b8:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 80070ba:	6365      	str	r5, [r4, #52]	; 0x34
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80070bc:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
 80070c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d11a      	bne.n	80070fe <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80070c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80070cc:	2be9      	cmp	r3, #233	; 0xe9
 80070ce:	d007      	beq.n	80070e0 <check_fs+0x50>
 80070d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070d2:	4a0d      	ldr	r2, [pc, #52]	; (8007108 <check_fs+0x78>)
 80070d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80070d8:	4293      	cmp	r3, r2
 80070da:	d001      	beq.n	80070e0 <check_fs+0x50>
	return 2;
 80070dc:	2002      	movs	r0, #2
}
 80070de:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 80070e0:	f8d4 306e 	ldr.w	r3, [r4, #110]	; 0x6e
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80070e4:	4a09      	ldr	r2, [pc, #36]	; (800710c <check_fs+0x7c>)
 80070e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 80070ee:	f8d4 008a 	ldr.w	r0, [r4, #138]	; 0x8a
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80070f2:	4b07      	ldr	r3, [pc, #28]	; (8007110 <check_fs+0x80>)
 80070f4:	4298      	cmp	r0, r3
 80070f6:	bf14      	ite	ne
 80070f8:	2002      	movne	r0, #2
 80070fa:	2000      	moveq	r0, #0
}
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80070fe:	2003      	movs	r0, #3
}
 8007100:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007102:	2000      	movs	r0, #0
}
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	bf00      	nop
 8007108:	009000eb 	.word	0x009000eb
 800710c:	00544146 	.word	0x00544146
 8007110:	33544146 	.word	0x33544146

08007114 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007116:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8007118:	b083      	sub	sp, #12
 800711a:	4604      	mov	r4, r0
 800711c:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800711e:	b973      	cbnz	r3, 800713e <move_window.part.0+0x2a>
 8007120:	f100 0138 	add.w	r1, r0, #56	; 0x38
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007124:	462a      	mov	r2, r5
 8007126:	7860      	ldrb	r0, [r4, #1]
 8007128:	2301      	movs	r3, #1
 800712a:	f7ff ff31 	bl	8006f90 <disk_read>
				res = FR_DISK_ERR;
 800712e:	2800      	cmp	r0, #0
 8007130:	bf1c      	itt	ne
 8007132:	2001      	movne	r0, #1
 8007134:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8007138:	6365      	str	r5, [r4, #52]	; 0x34
}
 800713a:	b003      	add	sp, #12
 800713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800713e:	6b46      	ldr	r6, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007140:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8007144:	2301      	movs	r3, #1
 8007146:	7840      	ldrb	r0, [r0, #1]
 8007148:	9101      	str	r1, [sp, #4]
 800714a:	4632      	mov	r2, r6
 800714c:	f7ff ff2e 	bl	8006fac <disk_write>
 8007150:	b9b8      	cbnz	r0, 8007182 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007152:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007154:	6a23      	ldr	r3, [r4, #32]
 8007156:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8007158:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800715a:	1ab2      	subs	r2, r6, r2
 800715c:	429a      	cmp	r2, r3
 800715e:	d2e1      	bcs.n	8007124 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007160:	78a7      	ldrb	r7, [r4, #2]
 8007162:	2f01      	cmp	r7, #1
 8007164:	d801      	bhi.n	800716a <move_window.part.0+0x56>
 8007166:	e7dd      	b.n	8007124 <move_window.part.0+0x10>
					wsect += fs->fsize;
 8007168:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 800716a:	7860      	ldrb	r0, [r4, #1]
 800716c:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 800716e:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007170:	4632      	mov	r2, r6
 8007172:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007174:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007176:	f7ff ff19 	bl	8006fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800717a:	2f01      	cmp	r7, #1
 800717c:	9901      	ldr	r1, [sp, #4]
 800717e:	d1f3      	bne.n	8007168 <move_window.part.0+0x54>
 8007180:	e7d0      	b.n	8007124 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8007182:	2001      	movs	r0, #1
}
 8007184:	b003      	add	sp, #12
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007188 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path) {	/* If the pointer is not a null */
 800718c:	6805      	ldr	r5, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8007192:	b175      	cbz	r5, 80071b2 <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007194:	782c      	ldrb	r4, [r5, #0]
 8007196:	2c1f      	cmp	r4, #31
 8007198:	d914      	bls.n	80071c4 <find_volume+0x3c>
 800719a:	4623      	mov	r3, r4
 800719c:	46ac      	mov	ip, r5
 800719e:	e003      	b.n	80071a8 <find_volume+0x20>
 80071a0:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80071a4:	2b1f      	cmp	r3, #31
 80071a6:	d90d      	bls.n	80071c4 <find_volume+0x3c>
 80071a8:	2b3a      	cmp	r3, #58	; 0x3a
 80071aa:	d1f9      	bne.n	80071a0 <find_volume+0x18>
			i = *tp++ - '0';
 80071ac:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80071ae:	45ac      	cmp	ip, r5
 80071b0:	d003      	beq.n	80071ba <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 80071b2:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80071b4:	4620      	mov	r0, r4
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80071ba:	2c30      	cmp	r4, #48	; 0x30
 80071bc:	d1f9      	bne.n	80071b2 <find_volume+0x2a>
					*path = ++tt;
 80071be:	f10c 0301 	add.w	r3, ip, #1
 80071c2:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071c4:	4bb6      	ldr	r3, [pc, #728]	; (80074a0 <find_volume+0x318>)
 80071c6:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071c8:	2d00      	cmp	r5, #0
 80071ca:	f000 80fa 	beq.w	80073c2 <find_volume+0x23a>
	*rfs = fs;							/* Return pointer to the file system object */
 80071ce:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80071d0:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80071d2:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80071d6:	b17b      	cbz	r3, 80071f8 <find_volume+0x70>
		stat = disk_status(fs->drv);
 80071d8:	7868      	ldrb	r0, [r5, #1]
 80071da:	f7ff febf 	bl	8006f5c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80071de:	07c1      	lsls	r1, r0, #31
 80071e0:	d40a      	bmi.n	80071f8 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	f000 80e6 	beq.w	80073b4 <find_volume+0x22c>
 80071e8:	f010 0404 	ands.w	r4, r0, #4
 80071ec:	f000 80e2 	beq.w	80073b4 <find_volume+0x22c>
				return FR_WRITE_PROTECTED;
 80071f0:	240a      	movs	r4, #10
}
 80071f2:	4620      	mov	r0, r4
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80071f8:	2000      	movs	r0, #0
 80071fa:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80071fc:	f7ff feb8 	bl	8006f70 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007200:	07c2      	lsls	r2, r0, #31
 8007202:	f100 80da 	bmi.w	80073ba <find_volume+0x232>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007206:	b10c      	cbz	r4, 800720c <find_volume+0x84>
 8007208:	0743      	lsls	r3, r0, #29
 800720a:	d4f1      	bmi.n	80071f0 <find_volume+0x68>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800720c:	7868      	ldrb	r0, [r5, #1]
 800720e:	f105 020c 	add.w	r2, r5, #12
 8007212:	2102      	movs	r1, #2
 8007214:	f7ff fed8 	bl	8006fc8 <disk_ioctl>
 8007218:	4604      	mov	r4, r0
 800721a:	2800      	cmp	r0, #0
 800721c:	f040 80c9 	bne.w	80073b2 <find_volume+0x22a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007220:	89ab      	ldrh	r3, [r5, #12]
 8007222:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8007226:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800722a:	f200 80c2 	bhi.w	80073b2 <find_volume+0x22a>
 800722e:	1e5a      	subs	r2, r3, #1
 8007230:	421a      	tst	r2, r3
 8007232:	f040 80be 	bne.w	80073b2 <find_volume+0x22a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007236:	4601      	mov	r1, r0
 8007238:	4628      	mov	r0, r5
 800723a:	f7ff ff29 	bl	8007090 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800723e:	2802      	cmp	r0, #2
 8007240:	f000 8090 	beq.w	8007364 <find_volume+0x1dc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007244:	2804      	cmp	r0, #4
 8007246:	f000 80b4 	beq.w	80073b2 <find_volume+0x22a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800724a:	2801      	cmp	r0, #1
	bsect = 0;
 800724c:	bf98      	it	ls
 800724e:	4626      	movls	r6, r4
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007250:	f200 80b9 	bhi.w	80073c6 <find_volume+0x23e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007254:	89a8      	ldrh	r0, [r5, #12]
 8007256:	f8b5 3043 	ldrh.w	r3, [r5, #67]	; 0x43
 800725a:	4283      	cmp	r3, r0
 800725c:	f040 80b3 	bne.w	80073c6 <find_volume+0x23e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007260:	f8b5 c04e 	ldrh.w	ip, [r5, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007264:	f1bc 0f00 	cmp.w	ip, #0
 8007268:	d101      	bne.n	800726e <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 800726a:	f8d5 c05c 	ldr.w	ip, [r5, #92]	; 0x5c
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800726e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
		fs->fsize = fasize;
 8007272:	f8c5 c020 	str.w	ip, [r5, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800727a:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800727c:	f200 80a3 	bhi.w	80073c6 <find_volume+0x23e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007280:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8007284:	fa1f f288 	uxth.w	r2, r8
 8007288:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800728a:	2a00      	cmp	r2, #0
 800728c:	f000 809b 	beq.w	80073c6 <find_volume+0x23e>
 8007290:	f108 32ff 	add.w	r2, r8, #4294967295
 8007294:	ea12 0f08 	tst.w	r2, r8
 8007298:	f040 8095 	bne.w	80073c6 <find_volume+0x23e>
	rv = ptr[1];
 800729c:	f8b5 e049 	ldrh.w	lr, [r5, #73]	; 0x49
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80072a0:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80072a4:	0942      	lsrs	r2, r0, #5
 80072a6:	fbbe faf2 	udiv	sl, lr, r2
 80072aa:	fb02 e21a 	mls	r2, r2, sl, lr
 80072ae:	b292      	uxth	r2, r2
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	f040 8088 	bne.w	80073c6 <find_volume+0x23e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80072b6:	f8b5 904b 	ldrh.w	r9, [r5, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80072ba:	f1b9 0f00 	cmp.w	r9, #0
 80072be:	d101      	bne.n	80072c4 <find_volume+0x13c>
	rv = rv << 8 | ptr[0];
 80072c0:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
	rv = ptr[1];
 80072c4:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d07c      	beq.n	80073c6 <find_volume+0x23e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80072cc:	fb0c f703 	mul.w	r7, ip, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80072d0:	eb0a 0201 	add.w	r2, sl, r1
 80072d4:	443a      	add	r2, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80072d6:	4591      	cmp	r9, r2
 80072d8:	d375      	bcc.n	80073c6 <find_volume+0x23e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80072da:	eba9 0902 	sub.w	r9, r9, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80072de:	45c1      	cmp	r9, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80072e0:	fbb9 f3f8 	udiv	r3, r9, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80072e4:	d36f      	bcc.n	80073c6 <find_volume+0x23e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072e6:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 80072ea:	4543      	cmp	r3, r8
 80072ec:	f200 8089 	bhi.w	8007402 <find_volume+0x27a>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072f0:	f640 78f5 	movw	r8, #4085	; 0xff5
 80072f4:	4543      	cmp	r3, r8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072f6:	4431      	add	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072f8:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80072fc:	4432      	add	r2, r6
		fs->volbase = bsect;							/* Volume start sector */
 80072fe:	626e      	str	r6, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007300:	632a      	str	r2, [r5, #48]	; 0x30
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007302:	61eb      	str	r3, [r5, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007304:	62a9      	str	r1, [r5, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007306:	f200 809d 	bhi.w	8007444 <find_volume+0x2bc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800730a:	f1be 0f00 	cmp.w	lr, #0
 800730e:	d05a      	beq.n	80073c6 <find_volume+0x23e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007310:	4439      	add	r1, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007312:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007316:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800731a:	62e9      	str	r1, [r5, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800731c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007320:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007322:	1e42      	subs	r2, r0, #1
 8007324:	4413      	add	r3, r2
 8007326:	fbb3 f0f0 	udiv	r0, r3, r0
 800732a:	4584      	cmp	ip, r0
 800732c:	d34b      	bcc.n	80073c6 <find_volume+0x23e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	e9c5 3305 	strd	r3, r3, [r5, #20]
		fs->fsi_flag = 0x80;
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800733a:	4a5a      	ldr	r2, [pc, #360]	; (80074a4 <find_volume+0x31c>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800733c:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800733e:	8813      	ldrh	r3, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007340:	4959      	ldr	r1, [pc, #356]	; (80074a8 <find_volume+0x320>)
 8007342:	6129      	str	r1, [r5, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8007344:	3301      	adds	r3, #1
 8007346:	b29b      	uxth	r3, r3
 8007348:	8013      	strh	r3, [r2, #0]
 800734a:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800734c:	4b57      	ldr	r3, [pc, #348]	; (80074ac <find_volume+0x324>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	42aa      	cmp	r2, r5
 8007352:	bf04      	itt	eq
 8007354:	2200      	moveq	r2, #0
 8007356:	601a      	streq	r2, [r3, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	4295      	cmp	r5, r2
 800735c:	d12a      	bne.n	80073b4 <find_volume+0x22c>
 800735e:	2200      	movs	r2, #0
 8007360:	611a      	str	r2, [r3, #16]
 8007362:	e027      	b.n	80073b4 <find_volume+0x22c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007364:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
 8007368:	2b00      	cmp	r3, #0
 800736a:	d048      	beq.n	80073fe <find_volume+0x276>
	rv = rv << 8 | ptr[0];
 800736c:	f8d5 91fe 	ldr.w	r9, [r5, #510]	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007370:	f895 320a 	ldrb.w	r3, [r5, #522]	; 0x20a
 8007374:	2b00      	cmp	r3, #0
 8007376:	d040      	beq.n	80073fa <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8007378:	f8d5 820e 	ldr.w	r8, [r5, #526]	; 0x20e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800737c:	f895 721a 	ldrb.w	r7, [r5, #538]	; 0x21a
 8007380:	b10f      	cbz	r7, 8007386 <find_volume+0x1fe>
	rv = rv << 8 | ptr[0];
 8007382:	f8d5 721e 	ldr.w	r7, [r5, #542]	; 0x21e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007386:	f895 622a 	ldrb.w	r6, [r5, #554]	; 0x22a
 800738a:	b10e      	cbz	r6, 8007390 <find_volume+0x208>
	rv = rv << 8 | ptr[0];
 800738c:	f8d5 622e 	ldr.w	r6, [r5, #558]	; 0x22e
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007390:	f1b9 0f00 	cmp.w	r9, #0
 8007394:	d121      	bne.n	80073da <find_volume+0x252>
 8007396:	f1b8 0f00 	cmp.w	r8, #0
 800739a:	d116      	bne.n	80073ca <find_volume+0x242>
 800739c:	bb2f      	cbnz	r7, 80073ea <find_volume+0x262>
 800739e:	b196      	cbz	r6, 80073c6 <find_volume+0x23e>
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff fe74 	bl	8007090 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073a8:	2801      	cmp	r0, #1
 80073aa:	f67f af53 	bls.w	8007254 <find_volume+0xcc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073ae:	2804      	cmp	r0, #4
 80073b0:	d109      	bne.n	80073c6 <find_volume+0x23e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80073b2:	2401      	movs	r4, #1
}
 80073b4:	4620      	mov	r0, r4
 80073b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80073ba:	2403      	movs	r4, #3
}
 80073bc:	4620      	mov	r0, r4
 80073be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073c2:	240c      	movs	r4, #12
 80073c4:	e7f6      	b.n	80073b4 <find_volume+0x22c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073c6:	240d      	movs	r4, #13
 80073c8:	e7f4      	b.n	80073b4 <find_volume+0x22c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80073ca:	4641      	mov	r1, r8
 80073cc:	4628      	mov	r0, r5
 80073ce:	f7ff fe5f 	bl	8007090 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073d2:	2801      	cmp	r0, #1
 80073d4:	d8e2      	bhi.n	800739c <find_volume+0x214>
 80073d6:	4646      	mov	r6, r8
 80073d8:	e73c      	b.n	8007254 <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80073da:	4649      	mov	r1, r9
 80073dc:	4628      	mov	r0, r5
 80073de:	f7ff fe57 	bl	8007090 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073e2:	2801      	cmp	r0, #1
 80073e4:	d8d7      	bhi.n	8007396 <find_volume+0x20e>
 80073e6:	464e      	mov	r6, r9
 80073e8:	e734      	b.n	8007254 <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80073ea:	4639      	mov	r1, r7
 80073ec:	4628      	mov	r0, r5
 80073ee:	f7ff fe4f 	bl	8007090 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073f2:	2801      	cmp	r0, #1
 80073f4:	d8d3      	bhi.n	800739e <find_volume+0x216>
 80073f6:	463e      	mov	r6, r7
 80073f8:	e72c      	b.n	8007254 <find_volume+0xcc>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80073fa:	4698      	mov	r8, r3
 80073fc:	e7be      	b.n	800737c <find_volume+0x1f4>
 80073fe:	46a1      	mov	r9, r4
 8007400:	e7b6      	b.n	8007370 <find_volume+0x1e8>
		fs->database = bsect + sysect;					/* Data start sector */
 8007402:	4432      	add	r2, r6
 8007404:	632a      	str	r2, [r5, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8007406:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
		fs->volbase = bsect;							/* Volume start sector */
 800740a:	626e      	str	r6, [r5, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800740c:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800740e:	4431      	add	r1, r6
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007410:	ea52 020e 	orrs.w	r2, r2, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007414:	62a9      	str	r1, [r5, #40]	; 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007416:	61eb      	str	r3, [r5, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007418:	d1d5      	bne.n	80073c6 <find_volume+0x23e>
	rv = rv << 8 | ptr[0];
 800741a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800741c:	62ea      	str	r2, [r5, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800741e:	1e42      	subs	r2, r0, #1
 8007420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007424:	fbb3 f0f0 	udiv	r0, r3, r0
 8007428:	4584      	cmp	ip, r0
 800742a:	d3cc      	bcc.n	80073c6 <find_volume+0x23e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	e9c5 3305 	strd	r3, r3, [r5, #20]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007434:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
		fs->fsi_flag = 0x80;
 8007438:	2280      	movs	r2, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800743a:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 800743c:	712a      	strb	r2, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800743e:	d009      	beq.n	8007454 <find_volume+0x2cc>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007440:	2103      	movs	r1, #3
 8007442:	e77a      	b.n	800733a <find_volume+0x1b2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007444:	f1be 0f00 	cmp.w	lr, #0
 8007448:	d0bd      	beq.n	80073c6 <find_volume+0x23e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800744a:	4439      	add	r1, r7
 800744c:	62e9      	str	r1, [r5, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	2102      	movs	r1, #2
 8007452:	e766      	b.n	8007322 <find_volume+0x19a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007454:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			&& move_window(fs, bsect + 1) == FR_OK)
 8007456:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007458:	4299      	cmp	r1, r3
 800745a:	d004      	beq.n	8007466 <find_volume+0x2de>
 800745c:	4628      	mov	r0, r5
 800745e:	f7ff fe59 	bl	8007114 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007462:	2800      	cmp	r0, #0
 8007464:	d1ec      	bne.n	8007440 <find_volume+0x2b8>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007466:	f8b5 2236 	ldrh.w	r2, [r5, #566]	; 0x236
 800746a:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800746e:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007470:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8007472:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007474:	d1e4      	bne.n	8007440 <find_volume+0x2b8>
	rv = rv << 8 | ptr[0];
 8007476:	6baa      	ldr	r2, [r5, #56]	; 0x38
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007478:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <find_volume+0x328>)
 800747a:	429a      	cmp	r2, r3
 800747c:	d1e0      	bne.n	8007440 <find_volume+0x2b8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800747e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8007482:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007486:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800748a:	3320      	adds	r3, #32
 800748c:	429a      	cmp	r2, r3
 800748e:	d1d7      	bne.n	8007440 <find_volume+0x2b8>
	rv = rv << 8 | ptr[0];
 8007490:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007494:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8007498:	e9c5 2305 	strd	r2, r3, [r5, #20]
 800749c:	e7d0      	b.n	8007440 <find_volume+0x2b8>
 800749e:	bf00      	nop
 80074a0:	20016e64 	.word	0x20016e64
 80074a4:	20016e88 	.word	0x20016e88
 80074a8:	20016e8c 	.word	0x20016e8c
 80074ac:	20016e68 	.word	0x20016e68
 80074b0:	41615252 	.word	0x41615252

080074b4 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80074b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 80074b8:	7803      	ldrb	r3, [r0, #0]
 80074ba:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80074bc:	4604      	mov	r4, r0
 80074be:	460d      	mov	r5, r1
 80074c0:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 80074c2:	d006      	beq.n	80074d2 <put_fat.part.0+0x1e>
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d05f      	beq.n	8007588 <put_fat.part.0+0xd4>
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d021      	beq.n	8007510 <put_fat.part.0+0x5c>
 80074cc:	2002      	movs	r0, #2
}
 80074ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074d2:	8987      	ldrh	r7, [r0, #12]
 80074d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074d8:	0879      	lsrs	r1, r7, #1
 80074da:	fbb5 f1f1 	udiv	r1, r5, r1
 80074de:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074e0:	4299      	cmp	r1, r3
 80074e2:	d004      	beq.n	80074ee <put_fat.part.0+0x3a>
 80074e4:	f7ff fe16 	bl	8007114 <move_window.part.0>
			if (res != FR_OK) break;
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d1f0      	bne.n	80074ce <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80074ec:	89a7      	ldrh	r7, [r4, #12]
 80074ee:	006d      	lsls	r5, r5, #1
 80074f0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80074f4:	fbb5 f2f7 	udiv	r2, r5, r7
 80074f8:	fb07 5512 	mls	r5, r7, r2, r5
 80074fc:	1959      	adds	r1, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80074fe:	555e      	strb	r6, [r3, r5]
 8007500:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 8007504:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8007506:	704e      	strb	r6, [r1, #1]
			fs->wflag = 1;
 8007508:	70e3      	strb	r3, [r4, #3]
			break;
 800750a:	2000      	movs	r0, #0
}
 800750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007510:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007514:	6a81      	ldr	r1, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007516:	6b42      	ldr	r2, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007518:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800751c:	fbb7 f3fc 	udiv	r3, r7, ip
 8007520:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007522:	4291      	cmp	r1, r2
 8007524:	d007      	beq.n	8007536 <put_fat.part.0+0x82>
 8007526:	f7ff fdf5 	bl	8007114 <move_window.part.0>
			if (res != FR_OK) break;
 800752a:	2800      	cmp	r0, #0
 800752c:	d1cf      	bne.n	80074ce <put_fat.part.0+0x1a>
			p = fs->win + bc++ % SS(fs);
 800752e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8007532:	fbb7 f3fc 	udiv	r3, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007536:	07ea      	lsls	r2, r5, #31
			p = fs->win + bc++ % SS(fs);
 8007538:	fb0c 7313 	mls	r3, ip, r3, r7
 800753c:	f104 0838 	add.w	r8, r4, #56	; 0x38
 8007540:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007544:	d548      	bpl.n	80075d8 <put_fat.part.0+0x124>
 8007546:	f818 2003 	ldrb.w	r2, [r8, r3]
 800754a:	f002 020f 	and.w	r2, r2, #15
 800754e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8007552:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007556:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007558:	6b62      	ldr	r2, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800755a:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 800755c:	2301      	movs	r3, #1
 800755e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007560:	fbb7 f3f0 	udiv	r3, r7, r0
 8007564:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007566:	4291      	cmp	r1, r2
 8007568:	d05b      	beq.n	8007622 <put_fat.part.0+0x16e>
 800756a:	4620      	mov	r0, r4
 800756c:	f7ff fdd2 	bl	8007114 <move_window.part.0>
			if (res != FR_OK) break;
 8007570:	2800      	cmp	r0, #0
 8007572:	d1ac      	bne.n	80074ce <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8007574:	89a2      	ldrh	r2, [r4, #12]
 8007576:	fbb7 f3f2 	udiv	r3, r7, r2
 800757a:	fb02 7713 	mls	r7, r2, r3, r7
 800757e:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007582:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8007586:	e046      	b.n	8007616 <put_fat.part.0+0x162>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007588:	8987      	ldrh	r7, [r0, #12]
 800758a:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800758c:	6b43      	ldr	r3, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800758e:	08b9      	lsrs	r1, r7, #2
 8007590:	fbb5 f1f1 	udiv	r1, r5, r1
 8007594:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007596:	4299      	cmp	r1, r3
 8007598:	d004      	beq.n	80075a4 <put_fat.part.0+0xf0>
 800759a:	f7ff fdbb 	bl	8007114 <move_window.part.0>
			if (res != FR_OK) break;
 800759e:	2800      	cmp	r0, #0
 80075a0:	d195      	bne.n	80074ce <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075a2:	89a7      	ldrh	r7, [r4, #12]
 80075a4:	00ad      	lsls	r5, r5, #2
 80075a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80075aa:	fbb5 f3f7 	udiv	r3, r5, r7
 80075ae:	fb07 5513 	mls	r5, r7, r3, r5
 80075b2:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 80075b6:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075bc:	1941      	adds	r1, r0, r5
 80075be:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80075c0:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80075c2:	5546      	strb	r6, [r0, r5]
 80075c4:	0a32      	lsrs	r2, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80075c6:	708b      	strb	r3, [r1, #2]
 80075c8:	0e36      	lsrs	r6, r6, #24
			fs->wflag = 1;
 80075ca:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80075cc:	704a      	strb	r2, [r1, #1]
	*ptr++ = (BYTE)val;
 80075ce:	70ce      	strb	r6, [r1, #3]
			fs->wflag = 1;
 80075d0:	70e3      	strb	r3, [r4, #3]
			break;
 80075d2:	2000      	movs	r0, #0
}
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80075d8:	f808 6003 	strb.w	r6, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075de:	6b60      	ldr	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 80075e0:	2301      	movs	r3, #1
 80075e2:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	fbb7 f2f3 	udiv	r2, r7, r3
 80075ea:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075ec:	4288      	cmp	r0, r1
 80075ee:	d008      	beq.n	8007602 <put_fat.part.0+0x14e>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7ff fd8f 	bl	8007114 <move_window.part.0>
			if (res != FR_OK) break;
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f47f af69 	bne.w	80074ce <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80075fc:	89a2      	ldrh	r2, [r4, #12]
 80075fe:	fbb7 f3f2 	udiv	r3, r7, r2
 8007602:	fb02 7713 	mls	r7, r2, r3, r7
 8007606:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800760a:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800760e:	7819      	ldrb	r1, [r3, #0]
 8007610:	f021 060f 	bic.w	r6, r1, #15
 8007614:	4316      	orrs	r6, r2
			fs->wflag = 1;
 8007616:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007618:	701e      	strb	r6, [r3, #0]
			fs->wflag = 1;
 800761a:	70e2      	strb	r2, [r4, #3]
			break;
 800761c:	2000      	movs	r0, #0
}
 800761e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = fs->win + bc % SS(fs);
 8007622:	fb00 7313 	mls	r3, r0, r3, r7
 8007626:	4443      	add	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007628:	e7ab      	b.n	8007582 <put_fat.part.0+0xce>
 800762a:	bf00      	nop

0800762c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800762c:	2901      	cmp	r1, #1
 800762e:	d90e      	bls.n	800764e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007632:	69c3      	ldr	r3, [r0, #28]
 8007634:	4299      	cmp	r1, r3
 8007636:	460c      	mov	r4, r1
 8007638:	4605      	mov	r5, r0
 800763a:	d206      	bcs.n	800764a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800763c:	7803      	ldrb	r3, [r0, #0]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d056      	beq.n	80076f0 <get_fat.isra.0+0xc4>
 8007642:	2b03      	cmp	r3, #3
 8007644:	d03d      	beq.n	80076c2 <get_fat.isra.0+0x96>
 8007646:	2b01      	cmp	r3, #1
 8007648:	d003      	beq.n	8007652 <get_fat.isra.0+0x26>
 800764a:	2001      	movs	r0, #1
}
 800764c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800764e:	2001      	movs	r0, #1
}
 8007650:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007652:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007654:	f8d0 e034 	ldr.w	lr, [r0, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007658:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 800765c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007660:	fbb7 f3fc 	udiv	r3, r7, ip
 8007664:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007666:	4571      	cmp	r1, lr
 8007668:	d00a      	beq.n	8007680 <get_fat.isra.0+0x54>
 800766a:	f7ff fd53 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800766e:	2800      	cmp	r0, #0
 8007670:	d153      	bne.n	800771a <get_fat.isra.0+0xee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007672:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007674:	f8d5 e034 	ldr.w	lr, [r5, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 8007678:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800767c:	fbb7 f3fc 	udiv	r3, r7, ip
 8007680:	fb0c 7313 	mls	r3, ip, r3, r7
 8007684:	442b      	add	r3, r5
 8007686:	3701      	adds	r7, #1
 8007688:	f893 6038 	ldrb.w	r6, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800768c:	fbb7 f3fc 	udiv	r3, r7, ip
 8007690:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007692:	4571      	cmp	r1, lr
 8007694:	d008      	beq.n	80076a8 <get_fat.isra.0+0x7c>
 8007696:	4628      	mov	r0, r5
 8007698:	f7ff fd3c 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800769c:	2800      	cmp	r0, #0
 800769e:	d13c      	bne.n	800771a <get_fat.isra.0+0xee>
			wc |= fs->win[bc % SS(fs)] << 8;
 80076a0:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 80076a4:	fbb7 f3fc 	udiv	r3, r7, ip
 80076a8:	fb0c 7713 	mls	r7, ip, r3, r7
 80076ac:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80076ae:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80076b0:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 80076b4:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80076b8:	bf4c      	ite	mi
 80076ba:	0900      	lsrmi	r0, r0, #4
 80076bc:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 80076c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80076c4:	8983      	ldrh	r3, [r0, #12]
 80076c6:	0899      	lsrs	r1, r3, #2
 80076c8:	fbb4 f1f1 	udiv	r1, r4, r1
 80076cc:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80076ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80076d0:	4291      	cmp	r1, r2
 80076d2:	d003      	beq.n	80076dc <get_fat.isra.0+0xb0>
 80076d4:	f7ff fd1e 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076d8:	b9f8      	cbnz	r0, 800771a <get_fat.isra.0+0xee>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	00a4      	lsls	r4, r4, #2
 80076de:	fbb4 f2f3 	udiv	r2, r4, r3
 80076e2:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 80076e6:	442c      	add	r4, r5
 80076e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80076ea:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80076f2:	8983      	ldrh	r3, [r0, #12]
 80076f4:	0859      	lsrs	r1, r3, #1
 80076f6:	fbb4 f1f1 	udiv	r1, r4, r1
 80076fa:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80076fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80076fe:	4291      	cmp	r1, r2
 8007700:	d003      	beq.n	800770a <get_fat.isra.0+0xde>
 8007702:	f7ff fd07 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007706:	b940      	cbnz	r0, 800771a <get_fat.isra.0+0xee>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007708:	89ab      	ldrh	r3, [r5, #12]
 800770a:	0064      	lsls	r4, r4, #1
 800770c:	fbb4 f2f3 	udiv	r2, r4, r3
 8007710:	fb03 4412 	mls	r4, r3, r2, r4
 8007714:	4425      	add	r5, r4
 8007716:	8f28      	ldrh	r0, [r5, #56]	; 0x38
}
 8007718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007720 <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007720:	69c2      	ldr	r2, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8007722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007724:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007726:	2a00      	cmp	r2, #0
 8007728:	d033      	beq.n	8007792 <dir_next.constprop.0+0x72>
 800772a:	3520      	adds	r5, #32
 800772c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8007730:	d22f      	bcs.n	8007792 <dir_next.constprop.0+0x72>
	FATFS *fs = dp->obj.fs;
 8007732:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007734:	89b3      	ldrh	r3, [r6, #12]
 8007736:	4604      	mov	r4, r0
 8007738:	fbb5 f0f3 	udiv	r0, r5, r3
 800773c:	fb03 5310 	mls	r3, r3, r0, r5
 8007740:	bb0b      	cbnz	r3, 8007786 <dir_next.constprop.0+0x66>
		if (!dp->clust) {		/* Static table */
 8007742:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8007744:	3201      	adds	r2, #1
 8007746:	61e2      	str	r2, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8007748:	b329      	cbz	r1, 8007796 <dir_next.constprop.0+0x76>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800774a:	8972      	ldrh	r2, [r6, #10]
 800774c:	3a01      	subs	r2, #1
 800774e:	ea12 0700 	ands.w	r7, r2, r0
 8007752:	d118      	bne.n	8007786 <dir_next.constprop.0+0x66>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007754:	4630      	mov	r0, r6
 8007756:	f7ff ff69 	bl	800762c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800775a:	2801      	cmp	r0, #1
 800775c:	d923      	bls.n	80077a6 <dir_next.constprop.0+0x86>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d023      	beq.n	80077aa <dir_next.constprop.0+0x8a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007762:	69f3      	ldr	r3, [r6, #28]
 8007764:	4298      	cmp	r0, r3
 8007766:	d21a      	bcs.n	800779e <dir_next.constprop.0+0x7e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007768:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800776a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800776c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800776e:	4298      	cmp	r0, r3
 8007770:	d203      	bcs.n	800777a <dir_next.constprop.0+0x5a>
	return clst * fs->csize + fs->database;
 8007772:	8977      	ldrh	r7, [r6, #10]
 8007774:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8007776:	fb00 2707 	mla	r7, r0, r7, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800777a:	89b2      	ldrh	r2, [r6, #12]
				dp->sect = clust2sect(fs, clst);
 800777c:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800777e:	fbb5 f3f2 	udiv	r3, r5, r2
 8007782:	fb02 5313 	mls	r3, r2, r3, r5
 8007786:	3638      	adds	r6, #56	; 0x38
 8007788:	441e      	add	r6, r3
	dp->dptr = ofs;						/* Current entry */
 800778a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800778c:	6226      	str	r6, [r4, #32]
	return FR_OK;
 800778e:	2000      	movs	r0, #0
}
 8007790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007792:	2004      	movs	r0, #4
}
 8007794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007796:	8932      	ldrh	r2, [r6, #8]
 8007798:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800779c:	d8f3      	bhi.n	8007786 <dir_next.constprop.0+0x66>
				dp->sect = 0; return FR_NO_FILE;
 800779e:	2300      	movs	r3, #0
 80077a0:	61e3      	str	r3, [r4, #28]
 80077a2:	2004      	movs	r0, #4
}
 80077a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80077a6:	2002      	movs	r0, #2
}
 80077a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80077aa:	2001      	movs	r0, #1
}
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ae:	bf00      	nop

080077b0 <sync_fs>:
{
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80077b2:	78c3      	ldrb	r3, [r0, #3]
{
 80077b4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80077b6:	b95b      	cbnz	r3, 80077d0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077b8:	7823      	ldrb	r3, [r4, #0]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d029      	beq.n	8007812 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80077be:	2200      	movs	r2, #0
 80077c0:	7860      	ldrb	r0, [r4, #1]
 80077c2:	4611      	mov	r1, r2
 80077c4:	f7ff fc00 	bl	8006fc8 <disk_ioctl>
			res = FR_DISK_ERR;
 80077c8:	3800      	subs	r0, #0
 80077ca:	bf18      	it	ne
 80077cc:	2001      	movne	r0, #1
}
 80077ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80077d0:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80077d2:	f100 0738 	add.w	r7, r0, #56	; 0x38
 80077d6:	2301      	movs	r3, #1
 80077d8:	7840      	ldrb	r0, [r0, #1]
 80077da:	462a      	mov	r2, r5
 80077dc:	4639      	mov	r1, r7
 80077de:	f7ff fbe5 	bl	8006fac <disk_write>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d14f      	bne.n	8007886 <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80077e8:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 80077ea:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077ec:	1aaa      	subs	r2, r5, r2
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d2e2      	bcs.n	80077b8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077f2:	78a6      	ldrb	r6, [r4, #2]
 80077f4:	2e01      	cmp	r6, #1
 80077f6:	d801      	bhi.n	80077fc <sync_fs+0x4c>
 80077f8:	e7de      	b.n	80077b8 <sync_fs+0x8>
					wsect += fs->fsize;
 80077fa:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077fc:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80077fe:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007800:	462a      	mov	r2, r5
 8007802:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007804:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007806:	4639      	mov	r1, r7
 8007808:	f7ff fbd0 	bl	8006fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800780c:	2e01      	cmp	r6, #1
 800780e:	d1f4      	bne.n	80077fa <sync_fs+0x4a>
 8007810:	e7d2      	b.n	80077b8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007812:	7926      	ldrb	r6, [r4, #4]
 8007814:	2e01      	cmp	r6, #1
 8007816:	d1d2      	bne.n	80077be <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8007818:	f104 0738 	add.w	r7, r4, #56	; 0x38
		*d++ = (BYTE)val;
 800781c:	89a2      	ldrh	r2, [r4, #12]
 800781e:	2100      	movs	r1, #0
 8007820:	4638      	mov	r0, r7
 8007822:	f002 f83b 	bl	800989c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8007826:	4b19      	ldr	r3, [pc, #100]	; (800788c <sync_fs+0xdc>)
 8007828:	63a3      	str	r3, [r4, #56]	; 0x38
 800782a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800782e:	69a2      	ldr	r2, [r4, #24]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007830:	6965      	ldr	r5, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8007832:	f884 2220 	strb.w	r2, [r4, #544]	; 0x220
 8007836:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800783a:	3320      	adds	r3, #32
 800783c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
 8007840:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007842:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
 8007846:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007848:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 800784a:	f884 2223 	strb.w	r2, [r4, #547]	; 0x223
			fs->winsect = fs->volbase + 1;
 800784e:	6a62      	ldr	r2, [r4, #36]	; 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8007850:	f884 5224 	strb.w	r5, [r4, #548]	; 0x224
 8007854:	0a28      	lsrs	r0, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007856:	f64a 2155 	movw	r1, #43605	; 0xaa55
			fs->winsect = fs->volbase + 1;
 800785a:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800785c:	f884 0225 	strb.w	r0, [r4, #549]	; 0x225
 8007860:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007862:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007864:	f8a4 1236 	strh.w	r1, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val; val >>= 8;
 8007868:	f884 3222 	strb.w	r3, [r4, #546]	; 0x222
 800786c:	f884 0226 	strb.w	r0, [r4, #550]	; 0x226
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007870:	4633      	mov	r3, r6
 8007872:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8007874:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007876:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 8007878:	f884 5227 	strb.w	r5, [r4, #551]	; 0x227
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800787c:	f7ff fb96 	bl	8006fac <disk_write>
			fs->fsi_flag = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	7123      	strb	r3, [r4, #4]
 8007884:	e79b      	b.n	80077be <sync_fs+0xe>
			res = FR_DISK_ERR;
 8007886:	2001      	movs	r0, #1
}
 8007888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788a:	bf00      	nop
 800788c:	41615252 	.word	0x41615252

08007890 <create_chain>:
{
 8007890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8007894:	f8d0 8000 	ldr.w	r8, [r0]
{
 8007898:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800789a:	4689      	mov	r9, r1
 800789c:	2900      	cmp	r1, #0
 800789e:	f040 80a5 	bne.w	80079ec <create_chain+0x15c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80078a2:	f8d8 6014 	ldr.w	r6, [r8, #20]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078a6:	f8d8 301c 	ldr.w	r3, [r8, #28]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078aa:	b9be      	cbnz	r6, 80078dc <create_chain+0x4c>
 80078ac:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 80078ae:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80078b0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078b2:	429c      	cmp	r4, r3
 80078b4:	d316      	bcc.n	80078e4 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80078b6:	2e01      	cmp	r6, #1
 80078b8:	f000 80a8 	beq.w	8007a0c <create_chain+0x17c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80078bc:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 80078be:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078c0:	69eb      	ldr	r3, [r5, #28]
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	d906      	bls.n	80078d4 <create_chain+0x44>
		switch (fs->fs_type) {
 80078c6:	782b      	ldrb	r3, [r5, #0]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d078      	beq.n	80079be <create_chain+0x12e>
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d05d      	beq.n	800798c <create_chain+0xfc>
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d00b      	beq.n	80078ec <create_chain+0x5c>
 80078d4:	2401      	movs	r4, #1
}
 80078d6:	4620      	mov	r0, r4
 80078d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078dc:	42b3      	cmp	r3, r6
 80078de:	bf98      	it	ls
 80078e0:	2601      	movls	r6, #1
 80078e2:	e7e4      	b.n	80078ae <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078e4:	2c01      	cmp	r4, #1
 80078e6:	683d      	ldr	r5, [r7, #0]
 80078e8:	d9f4      	bls.n	80078d4 <create_chain+0x44>
 80078ea:	e7e9      	b.n	80078c0 <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078ec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80078ee:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078f2:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 80078f4:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078f8:	fbbb f3f2 	udiv	r3, fp, r2
 80078fc:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80078fe:	4561      	cmp	r1, ip
 8007900:	d00a      	beq.n	8007918 <create_chain+0x88>
 8007902:	4628      	mov	r0, r5
 8007904:	f7ff fc06 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007908:	2800      	cmp	r0, #0
 800790a:	d13a      	bne.n	8007982 <create_chain+0xf2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800790c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800790e:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 8007912:	89aa      	ldrh	r2, [r5, #12]
 8007914:	fbbb f3f2 	udiv	r3, fp, r2
 8007918:	fb02 b313 	mls	r3, r2, r3, fp
 800791c:	442b      	add	r3, r5
 800791e:	f10b 0b01 	add.w	fp, fp, #1
 8007922:	f893 a038 	ldrb.w	sl, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007926:	fbbb f3f2 	udiv	r3, fp, r2
 800792a:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800792c:	4561      	cmp	r1, ip
 800792e:	d006      	beq.n	800793e <create_chain+0xae>
 8007930:	4628      	mov	r0, r5
 8007932:	f7ff fbef 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007936:	bb20      	cbnz	r0, 8007982 <create_chain+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007938:	89aa      	ldrh	r2, [r5, #12]
 800793a:	fbbb f3f2 	udiv	r3, fp, r2
 800793e:	fb02 b213 	mls	r2, r2, r3, fp
 8007942:	4415      	add	r5, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007944:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8007946:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800794a:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800794e:	bf4c      	ite	mi
 8007950:	091b      	lsrmi	r3, r3, #4
 8007952:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 8007956:	b133      	cbz	r3, 8007966 <create_chain+0xd6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007958:	2b01      	cmp	r3, #1
 800795a:	d0bb      	beq.n	80078d4 <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 800795c:	42a6      	cmp	r6, r4
 800795e:	d055      	beq.n	8007a0c <create_chain+0x17c>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007960:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007964:	e7a4      	b.n	80078b0 <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007966:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800796a:	42a3      	cmp	r3, r4
 800796c:	d9b2      	bls.n	80078d4 <create_chain+0x44>
 800796e:	f04f 32ff 	mov.w	r2, #4294967295
 8007972:	4621      	mov	r1, r4
 8007974:	4640      	mov	r0, r8
 8007976:	f7ff fd9d 	bl	80074b4 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800797a:	2800      	cmp	r0, #0
 800797c:	d04a      	beq.n	8007a14 <create_chain+0x184>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800797e:	2801      	cmp	r0, #1
 8007980:	d1a8      	bne.n	80078d4 <create_chain+0x44>
 8007982:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007986:	4620      	mov	r0, r4
 8007988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800798c:	89a8      	ldrh	r0, [r5, #12]
 800798e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007990:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007992:	0881      	lsrs	r1, r0, #2
 8007994:	fbb4 f1f1 	udiv	r1, r4, r1
 8007998:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800799a:	4299      	cmp	r1, r3
 800799c:	d005      	beq.n	80079aa <create_chain+0x11a>
 800799e:	4628      	mov	r0, r5
 80079a0:	f7ff fbb8 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d1ec      	bne.n	8007982 <create_chain+0xf2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80079a8:	89a8      	ldrh	r0, [r5, #12]
 80079aa:	00a3      	lsls	r3, r4, #2
 80079ac:	fbb3 f2f0 	udiv	r2, r3, r0
 80079b0:	fb00 3312 	mls	r3, r0, r2, r3
	rv = rv << 8 | ptr[0];
 80079b4:	441d      	add	r5, r3
 80079b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80079b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 80079bc:	e7cb      	b.n	8007956 <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079be:	89a8      	ldrh	r0, [r5, #12]
 80079c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80079c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079c4:	0841      	lsrs	r1, r0, #1
 80079c6:	fbb4 f1f1 	udiv	r1, r4, r1
 80079ca:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d005      	beq.n	80079dc <create_chain+0x14c>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f7ff fb9f 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1d3      	bne.n	8007982 <create_chain+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80079da:	89a8      	ldrh	r0, [r5, #12]
 80079dc:	0063      	lsls	r3, r4, #1
 80079de:	fbb3 f2f0 	udiv	r2, r3, r0
 80079e2:	fb00 3312 	mls	r3, r0, r2, r3
 80079e6:	441d      	add	r5, r3
 80079e8:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
			break;
 80079ea:	e7b4      	b.n	8007956 <create_chain+0xc6>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079ec:	4640      	mov	r0, r8
 80079ee:	f7ff fe1d 	bl	800762c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80079f2:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079f4:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80079f6:	f67f af6d 	bls.w	80078d4 <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079fa:	1c41      	adds	r1, r0, #1
 80079fc:	d0c1      	beq.n	8007982 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079fe:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007a02:	4283      	cmp	r3, r0
 8007a04:	f63f af67 	bhi.w	80078d6 <create_chain+0x46>
 8007a08:	464e      	mov	r6, r9
 8007a0a:	e750      	b.n	80078ae <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 8007a0c:	2400      	movs	r4, #0
}
 8007a0e:	4620      	mov	r0, r4
 8007a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	d00f      	beq.n	8007a3a <create_chain+0x1aa>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a1a:	f1b9 0f01 	cmp.w	r9, #1
 8007a1e:	f43f af59 	beq.w	80078d4 <create_chain+0x44>
 8007a22:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007a26:	4599      	cmp	r9, r3
 8007a28:	f4bf af54 	bcs.w	80078d4 <create_chain+0x44>
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	f7ff fd3f 	bl	80074b4 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d1a1      	bne.n	800797e <create_chain+0xee>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a3a:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
 8007a3e:	3b02      	subs	r3, #2
 8007a40:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 8007a42:	f8c8 4014 	str.w	r4, [r8, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a46:	d802      	bhi.n	8007a4e <create_chain+0x1be>
 8007a48:	3a01      	subs	r2, #1
 8007a4a:	f8c8 2018 	str.w	r2, [r8, #24]
		fs->fsi_flag |= 1;
 8007a4e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	f888 3004 	strb.w	r3, [r8, #4]
 8007a5a:	e73c      	b.n	80078d6 <create_chain+0x46>

08007a5c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007a60:	f080 8088 	bcs.w	8007b74 <dir_sdi+0x118>
 8007a64:	06ca      	lsls	r2, r1, #27
{
 8007a66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a6c:	d161      	bne.n	8007b32 <dir_sdi+0xd6>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a6e:	6885      	ldr	r5, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8007a70:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8007a74:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a76:	4607      	mov	r7, r0
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	d05d      	beq.n	8007b38 <dir_sdi+0xdc>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a7c:	f8b8 900a 	ldrh.w	r9, [r8, #10]
 8007a80:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007a84:	fb03 f909 	mul.w	r9, r3, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a88:	454c      	cmp	r4, r9
 8007a8a:	f0c0 80ac 	bcc.w	8007be6 <dir_sdi+0x18a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007a8e:	2d01      	cmp	r5, #1
 8007a90:	d04f      	beq.n	8007b32 <dir_sdi+0xd6>
 8007a92:	4646      	mov	r6, r8
 8007a94:	e04a      	b.n	8007b2c <dir_sdi+0xd0>
		switch (fs->fs_type) {
 8007a96:	7833      	ldrb	r3, [r6, #0]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	f000 808b 	beq.w	8007bb4 <dir_sdi+0x158>
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d070      	beq.n	8007b84 <dir_sdi+0x128>
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d145      	bne.n	8007b32 <dir_sdi+0xd6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007aa8:	f8d6 c034 	ldr.w	ip, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aac:	89b2      	ldrh	r2, [r6, #12]
			bc = (UINT)clst; bc += bc / 2;
 8007aae:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ab2:	fbba f3f2 	udiv	r3, sl, r2
 8007ab6:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ab8:	4561      	cmp	r1, ip
 8007aba:	d00b      	beq.n	8007ad4 <dir_sdi+0x78>
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff fb29 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f040 808c 	bne.w	8007be0 <dir_sdi+0x184>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ac8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007aca:	f8d6 c034 	ldr.w	ip, [r6, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 8007ace:	89b2      	ldrh	r2, [r6, #12]
 8007ad0:	fbba f3f2 	udiv	r3, sl, r2
 8007ad4:	fb02 a313 	mls	r3, r2, r3, sl
 8007ad8:	4433      	add	r3, r6
 8007ada:	f10a 0a01 	add.w	sl, sl, #1
 8007ade:	f893 b038 	ldrb.w	fp, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ae2:	fbba f3f2 	udiv	r3, sl, r2
 8007ae6:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ae8:	4561      	cmp	r1, ip
 8007aea:	d007      	beq.n	8007afc <dir_sdi+0xa0>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff fb11 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d174      	bne.n	8007be0 <dir_sdi+0x184>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007af6:	89b2      	ldrh	r2, [r6, #12]
 8007af8:	fbba f3f2 	udiv	r3, sl, r2
 8007afc:	fb02 aa13 	mls	sl, r2, r3, sl
 8007b00:	4456      	add	r6, sl
 8007b02:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8007b06:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b0a:	07eb      	lsls	r3, r5, #31
 8007b0c:	bf4c      	ite	mi
 8007b0e:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 8007b12:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b16:	2d01      	cmp	r5, #1
 8007b18:	d90b      	bls.n	8007b32 <dir_sdi+0xd6>
 8007b1a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007b1e:	42ab      	cmp	r3, r5
 8007b20:	d907      	bls.n	8007b32 <dir_sdi+0xd6>
			ofs -= csz;
 8007b22:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b26:	45a1      	cmp	r9, r4
 8007b28:	d85f      	bhi.n	8007bea <dir_sdi+0x18e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b2a:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b2c:	69f3      	ldr	r3, [r6, #28]
 8007b2e:	42ab      	cmp	r3, r5
 8007b30:	d8b1      	bhi.n	8007a96 <dir_sdi+0x3a>
		switch (fs->fs_type) {
 8007b32:	2002      	movs	r0, #2
}
 8007b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b38:	f898 3000 	ldrb.w	r3, [r8]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d81b      	bhi.n	8007b78 <dir_sdi+0x11c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b40:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007b44:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8007b48:	d9f3      	bls.n	8007b32 <dir_sdi+0xd6>
		dp->sect = fs->dirbase;
 8007b4a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8007b4e:	61fa      	str	r2, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 8007b50:	61bd      	str	r5, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	d0ed      	beq.n	8007b32 <dir_sdi+0xd6>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b56:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8007b5a:	fbb4 f3f1 	udiv	r3, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b5e:	f108 0838 	add.w	r8, r8, #56	; 0x38
 8007b62:	fb01 4413 	mls	r4, r1, r3, r4
 8007b66:	4444      	add	r4, r8
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b68:	4413      	add	r3, r2
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b6a:	e9c7 3407 	strd	r3, r4, [r7, #28]
	return FR_OK;
 8007b6e:	2000      	movs	r0, #0
}
 8007b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8007b74:	2002      	movs	r0, #2
}
 8007b76:	4770      	bx	lr
		clst = fs->dirbase;
 8007b78:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0df      	beq.n	8007b40 <dir_sdi+0xe4>
 8007b80:	461d      	mov	r5, r3
 8007b82:	e77b      	b.n	8007a7c <dir_sdi+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b84:	89b0      	ldrh	r0, [r6, #12]
 8007b86:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b88:	6b73      	ldr	r3, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b8a:	0881      	lsrs	r1, r0, #2
 8007b8c:	fbb5 f1f1 	udiv	r1, r5, r1
 8007b90:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b92:	4299      	cmp	r1, r3
 8007b94:	d004      	beq.n	8007ba0 <dir_sdi+0x144>
 8007b96:	4630      	mov	r0, r6
 8007b98:	f7ff fabc 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b9c:	bb00      	cbnz	r0, 8007be0 <dir_sdi+0x184>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007b9e:	89b0      	ldrh	r0, [r6, #12]
 8007ba0:	00ad      	lsls	r5, r5, #2
 8007ba2:	fbb5 f3f0 	udiv	r3, r5, r0
 8007ba6:	fb00 5513 	mls	r5, r0, r3, r5
	rv = rv << 8 | ptr[0];
 8007baa:	442e      	add	r6, r5
 8007bac:	6bb5      	ldr	r5, [r6, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007bae:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8007bb2:	e7b0      	b.n	8007b16 <dir_sdi+0xba>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bb4:	89b0      	ldrh	r0, [r6, #12]
 8007bb6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bb8:	6b73      	ldr	r3, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bba:	0841      	lsrs	r1, r0, #1
 8007bbc:	fbb5 f1f1 	udiv	r1, r5, r1
 8007bc0:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	d004      	beq.n	8007bd0 <dir_sdi+0x174>
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff faa4 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bcc:	b940      	cbnz	r0, 8007be0 <dir_sdi+0x184>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bce:	89b0      	ldrh	r0, [r6, #12]
 8007bd0:	006d      	lsls	r5, r5, #1
 8007bd2:	fbb5 f3f0 	udiv	r3, r5, r0
 8007bd6:	fb00 5513 	mls	r5, r0, r3, r5
 8007bda:	442e      	add	r6, r5
 8007bdc:	8f35      	ldrh	r5, [r6, #56]	; 0x38
			break;
 8007bde:	e79a      	b.n	8007b16 <dir_sdi+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007be0:	2001      	movs	r0, #1
}
 8007be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007be6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007bea:	3b02      	subs	r3, #2
	clst -= 2;
 8007bec:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d207      	bcs.n	8007c02 <dir_sdi+0x1a6>
	return clst * fs->csize + fs->database;
 8007bf2:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8007bf6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8007bfa:	fb02 3201 	mla	r2, r2, r1, r3
		dp->sect = clust2sect(fs, clst);
 8007bfe:	61fa      	str	r2, [r7, #28]
 8007c00:	e7a6      	b.n	8007b50 <dir_sdi+0xf4>
 8007c02:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 8007c04:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007c08:	e793      	b.n	8007b32 <dir_sdi+0xd6>
 8007c0a:	bf00      	nop

08007c0c <dir_find>:
{
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c10:	2100      	movs	r1, #0
{
 8007c12:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8007c14:	6806      	ldr	r6, [r0, #0]
{
 8007c16:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c18:	f7ff ff20 	bl	8007a5c <dir_sdi>
	if (res != FR_OK) return res;
 8007c1c:	4681      	mov	r9, r0
 8007c1e:	b9e0      	cbnz	r0, 8007c5a <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c20:	f04f 33ff 	mov.w	r3, #4294967295
 8007c24:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = move_window(fs, dp->sect);
 8007c28:	69e7      	ldr	r7, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c2c:	46c1      	mov	r9, r8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007c2e:	f64f 7bff 	movw	fp, #65535	; 0xffff
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c32:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8007c34:	42bd      	cmp	r5, r7
 8007c36:	d015      	beq.n	8007c64 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c38:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007c3a:	f106 0138 	add.w	r1, r6, #56	; 0x38
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 809f 	bne.w	8007d82 <dir_find+0x176>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c44:	7870      	ldrb	r0, [r6, #1]
 8007c46:	2301      	movs	r3, #1
 8007c48:	463a      	mov	r2, r7
 8007c4a:	f7ff f9a1 	bl	8006f90 <disk_read>
 8007c4e:	b140      	cbz	r0, 8007c62 <dir_find+0x56>
			fs->winsect = sector;
 8007c50:	f04f 33ff 	mov.w	r3, #4294967295
 8007c54:	6373      	str	r3, [r6, #52]	; 0x34
				res = FR_DISK_ERR;
 8007c56:	f04f 0901 	mov.w	r9, #1
}
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	b005      	add	sp, #20
 8007c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8007c62:	6377      	str	r7, [r6, #52]	; 0x34
		c = dp->dir[DIR_Name];
 8007c64:	6a25      	ldr	r5, [r4, #32]
 8007c66:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	d041      	beq.n	8007cf0 <dir_find+0xe4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007c6c:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007c6e:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007c70:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8007c74:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007c76:	d004      	beq.n	8007c82 <dir_find+0x76>
 8007c78:	0712      	lsls	r2, r2, #28
 8007c7a:	d53f      	bpl.n	8007cfc <dir_find+0xf0>
 8007c7c:	2b0f      	cmp	r3, #15
 8007c7e:	f000 80aa 	beq.w	8007dd6 <dir_find+0x1ca>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	6323      	str	r3, [r4, #48]	; 0x30
 8007c88:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c8c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c8e:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c90:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c92:	b36f      	cbz	r7, 8007cf0 <dir_find+0xe4>
 8007c94:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8007c98:	d22a      	bcs.n	8007cf0 <dir_find+0xe4>
	FATFS *fs = dp->obj.fs;
 8007c9a:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c9c:	899a      	ldrh	r2, [r3, #12]
 8007c9e:	fbb5 f0f2 	udiv	r0, r5, r2
 8007ca2:	fb02 5210 	mls	r2, r2, r0, r5
 8007ca6:	b93a      	cbnz	r2, 8007cb8 <dir_find+0xac>
		if (!dp->clust) {		/* Static table */
 8007ca8:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8007caa:	3701      	adds	r7, #1
 8007cac:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8007cae:	b941      	cbnz	r1, 8007cc2 <dir_find+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007cb0:	8919      	ldrh	r1, [r3, #8]
 8007cb2:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8007cb6:	d919      	bls.n	8007cec <dir_find+0xe0>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007cb8:	3338      	adds	r3, #56	; 0x38
 8007cba:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 8007cbc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007cbe:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8007cc0:	e7b7      	b.n	8007c32 <dir_find+0x26>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007cc2:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8007cc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cca:	ea1c 0a00 	ands.w	sl, ip, r0
 8007cce:	d1f3      	bne.n	8007cb8 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	f7ff fcaa 	bl	800762c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007cd8:	2801      	cmp	r0, #1
 8007cda:	f240 8127 	bls.w	8007f2c <dir_find+0x320>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d0b9      	beq.n	8007c56 <dir_find+0x4a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ce2:	9b00      	ldr	r3, [sp, #0]
 8007ce4:	69da      	ldr	r2, [r3, #28]
 8007ce6:	4290      	cmp	r0, r2
 8007ce8:	f0c0 810e 	bcc.w	8007f08 <dir_find+0x2fc>
				dp->sect = 0; return FR_NO_FILE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61e3      	str	r3, [r4, #28]
 8007cf0:	f04f 0904 	mov.w	r9, #4
}
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	b005      	add	sp, #20
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007cfc:	2b0f      	cmp	r3, #15
 8007cfe:	d06a      	beq.n	8007dd6 <dir_find+0x1ca>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	f000 80b6 	beq.w	8007e74 <dir_find+0x268>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007d08:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 8007d0c:	f019 0901 	ands.w	r9, r9, #1
 8007d10:	d1b7      	bne.n	8007c82 <dir_find+0x76>
	} while (--cnt && r == 0);
 8007d12:	782a      	ldrb	r2, [r5, #0]
 8007d14:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d1b2      	bne.n	8007c82 <dir_find+0x76>
 8007d1c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8007d20:	786b      	ldrb	r3, [r5, #1]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d1ad      	bne.n	8007c82 <dir_find+0x76>
 8007d26:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007d2a:	78ab      	ldrb	r3, [r5, #2]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d1a8      	bne.n	8007c82 <dir_find+0x76>
 8007d30:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8007d34:	78eb      	ldrb	r3, [r5, #3]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d1a3      	bne.n	8007c82 <dir_find+0x76>
 8007d3a:	792a      	ldrb	r2, [r5, #4]
 8007d3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d19e      	bne.n	8007c82 <dir_find+0x76>
 8007d44:	796a      	ldrb	r2, [r5, #5]
 8007d46:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d199      	bne.n	8007c82 <dir_find+0x76>
 8007d4e:	79aa      	ldrb	r2, [r5, #6]
 8007d50:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d194      	bne.n	8007c82 <dir_find+0x76>
 8007d58:	79ea      	ldrb	r2, [r5, #7]
 8007d5a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d18f      	bne.n	8007c82 <dir_find+0x76>
 8007d62:	7a2a      	ldrb	r2, [r5, #8]
 8007d64:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d18a      	bne.n	8007c82 <dir_find+0x76>
 8007d6c:	7a6a      	ldrb	r2, [r5, #9]
 8007d6e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d185      	bne.n	8007c82 <dir_find+0x76>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007d76:	7aaa      	ldrb	r2, [r5, #10]
 8007d78:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d180      	bne.n	8007c82 <dir_find+0x76>
 8007d80:	e76b      	b.n	8007c5a <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d82:	7870      	ldrb	r0, [r6, #1]
 8007d84:	9100      	str	r1, [sp, #0]
 8007d86:	2301      	movs	r3, #1
 8007d88:	462a      	mov	r2, r5
 8007d8a:	f7ff f90f 	bl	8006fac <disk_write>
 8007d8e:	9900      	ldr	r1, [sp, #0]
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f47f af60 	bne.w	8007c56 <dir_find+0x4a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			fs->wflag = 0;
 8007d98:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d9a:	1aea      	subs	r2, r5, r3
 8007d9c:	6a33      	ldr	r3, [r6, #32]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	f4bf af50 	bcs.w	8007c44 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007da4:	f896 a002 	ldrb.w	sl, [r6, #2]
 8007da8:	f1ba 0f01 	cmp.w	sl, #1
 8007dac:	f67f af4a 	bls.w	8007c44 <dir_find+0x38>
 8007db0:	9400      	str	r4, [sp, #0]
 8007db2:	460c      	mov	r4, r1
 8007db4:	e000      	b.n	8007db8 <dir_find+0x1ac>
					wsect += fs->fsize;
 8007db6:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007db8:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007dba:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4621      	mov	r1, r4
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8007dc6:	f7ff f8f1 	bl	8006fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dca:	f1ba 0f01 	cmp.w	sl, #1
 8007dce:	d1f2      	bne.n	8007db6 <dir_find+0x1aa>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	9c00      	ldr	r4, [sp, #0]
 8007dd4:	e736      	b.n	8007c44 <dir_find+0x38>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007dd6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8007dda:	065b      	lsls	r3, r3, #25
 8007ddc:	f53f af56 	bmi.w	8007c8c <dir_find+0x80>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007de0:	0678      	lsls	r0, r7, #25
 8007de2:	d542      	bpl.n	8007e6a <dir_find+0x25e>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007de4:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 8007de6:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007dea:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007dec:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007df0:	7b6b      	ldrb	r3, [r5, #13]
 8007df2:	4543      	cmp	r3, r8
 8007df4:	d13b      	bne.n	8007e6e <dir_find+0x262>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007df6:	8b6b      	ldrh	r3, [r5, #26]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d138      	bne.n	8007e6e <dir_find+0x262>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007dfc:	f895 9000 	ldrb.w	r9, [r5]
 8007e00:	f8df a154 	ldr.w	sl, [pc, #340]	; 8007f58 <dir_find+0x34c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e04:	9702      	str	r7, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007e06:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 8007e0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e0e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8007e12:	eb09 0983 	add.w	r9, r9, r3, lsl #2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007e16:	6933      	ldr	r3, [r6, #16]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e18:	9401      	str	r4, [sp, #4]
 8007e1a:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007e1c:	9303      	str	r3, [sp, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e1e:	f10a 010d 	add.w	r1, sl, #13
 8007e22:	9600      	str	r6, [sp, #0]
 8007e24:	462f      	mov	r7, r5
 8007e26:	4610      	mov	r0, r2
 8007e28:	461c      	mov	r4, r3
 8007e2a:	e012      	b.n	8007e52 <dir_find+0x246>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007e2c:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 8007e30:	4628      	mov	r0, r5
 8007e32:	d815      	bhi.n	8007e60 <dir_find+0x254>
 8007e34:	f001 fcba 	bl	80097ac <ff_wtoupper>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	f834 0019 	ldrh.w	r0, [r4, r9, lsl #1]
 8007e3e:	f001 fcb5 	bl	80097ac <ff_wtoupper>
 8007e42:	4286      	cmp	r6, r0
 8007e44:	f109 0901 	add.w	r9, r9, #1
 8007e48:	d10a      	bne.n	8007e60 <dir_find+0x254>
 8007e4a:	4942      	ldr	r1, [pc, #264]	; (8007f54 <dir_find+0x348>)
 8007e4c:	4628      	mov	r0, r5
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e4e:	4551      	cmp	r1, sl
 8007e50:	d06f      	beq.n	8007f32 <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007e52:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8007e56:	5afd      	ldrh	r5, [r7, r3]
		if (wc) {
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d1e7      	bne.n	8007e2c <dir_find+0x220>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007e5c:	455d      	cmp	r5, fp
 8007e5e:	d0f6      	beq.n	8007e4e <dir_find+0x242>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007e60:	e9dd 6400 	ldrd	r6, r4, [sp]
 8007e64:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007e68:	e710      	b.n	8007c8c <dir_find+0x80>
 8007e6a:	45b9      	cmp	r9, r7
 8007e6c:	d0c0      	beq.n	8007df0 <dir_find+0x1e4>
 8007e6e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007e72:	e70b      	b.n	8007c8c <dir_find+0x80>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007e74:	782a      	ldrb	r2, [r5, #0]
 8007e76:	7869      	ldrb	r1, [r5, #1]
 8007e78:	01d3      	lsls	r3, r2, #7
 8007e7a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8007e7e:	185a      	adds	r2, r3, r1
 8007e80:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007e84:	78a9      	ldrb	r1, [r5, #2]
 8007e86:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007e8a:	fa51 f383 	uxtab	r3, r1, r3
 8007e8e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007e92:	78e9      	ldrb	r1, [r5, #3]
 8007e94:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007e98:	fa51 f382 	uxtab	r3, r1, r2
 8007e9c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007ea0:	7929      	ldrb	r1, [r5, #4]
 8007ea2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007ea6:	fa51 f282 	uxtab	r2, r1, r2
 8007eaa:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007eae:	7969      	ldrb	r1, [r5, #5]
 8007eb0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007eb4:	fa51 f283 	uxtab	r2, r1, r3
 8007eb8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007ebc:	79a9      	ldrb	r1, [r5, #6]
 8007ebe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007ec2:	fa51 f383 	uxtab	r3, r1, r3
 8007ec6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007eca:	79e9      	ldrb	r1, [r5, #7]
 8007ecc:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007ed0:	fa51 f382 	uxtab	r3, r1, r2
 8007ed4:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007ed8:	7a29      	ldrb	r1, [r5, #8]
 8007eda:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007ede:	fa51 f282 	uxtab	r2, r1, r2
 8007ee2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007ee6:	7a69      	ldrb	r1, [r5, #9]
 8007ee8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007eec:	fa51 f283 	uxtab	r2, r1, r3
 8007ef0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007ef4:	7aa9      	ldrb	r1, [r5, #10]
 8007ef6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007efa:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	4598      	cmp	r8, r3
 8007f02:	f47f af01 	bne.w	8007d08 <dir_find+0xfc>
 8007f06:	e6a8      	b.n	8007c5a <dir_find+0x4e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f08:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f0a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8007f0c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f0e:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 8007f10:	bf3e      	ittt	cc
 8007f12:	895a      	ldrhcc	r2, [r3, #10]
 8007f14:	6b1f      	ldrcc	r7, [r3, #48]	; 0x30
 8007f16:	fb00 7702 	mlacc	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f1a:	899a      	ldrh	r2, [r3, #12]
 8007f1c:	fbb5 f1f2 	udiv	r1, r5, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f20:	bf28      	it	cs
 8007f22:	4657      	movcs	r7, sl
				dp->sect = clust2sect(fs, clst);
 8007f24:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f26:	fb02 5211 	mls	r2, r2, r1, r5
 8007f2a:	e6c5      	b.n	8007cb8 <dir_find+0xac>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f2c:	f04f 0902 	mov.w	r9, #2
 8007f30:	e693      	b.n	8007c5a <dir_find+0x4e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007f32:	463d      	mov	r5, r7
 8007f34:	9e00      	ldr	r6, [sp, #0]
 8007f36:	782b      	ldrb	r3, [r5, #0]
 8007f38:	9f02      	ldr	r7, [sp, #8]
 8007f3a:	9c01      	ldr	r4, [sp, #4]
 8007f3c:	0659      	lsls	r1, r3, #25
 8007f3e:	d505      	bpl.n	8007f4c <dir_find+0x340>
 8007f40:	b120      	cbz	r0, 8007f4c <dir_find+0x340>
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d190      	bne.n	8007e6e <dir_find+0x262>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007f4c:	3f01      	subs	r7, #1
 8007f4e:	fa5f f987 	uxtb.w	r9, r7
 8007f52:	e69b      	b.n	8007c8c <dir_find+0x80>
 8007f54:	0800a321 	.word	0x0800a321
 8007f58:	0800a314 	.word	0x0800a314

08007f5c <follow_path>:
{
 8007f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8007f60:	6803      	ldr	r3, [r0, #0]
{
 8007f62:	b083      	sub	sp, #12
 8007f64:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8007f66:	461a      	mov	r2, r3
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f68:	460e      	mov	r6, r1
 8007f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f6e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f70:	d0fa      	beq.n	8007f68 <follow_path+0xc>
 8007f72:	2b5c      	cmp	r3, #92	; 0x5c
 8007f74:	d0f8      	beq.n	8007f68 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007f76:	2100      	movs	r1, #0
 8007f78:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f7a:	7833      	ldrb	r3, [r6, #0]
 8007f7c:	2b1f      	cmp	r3, #31
 8007f7e:	f240 8128 	bls.w	80081d2 <follow_path+0x276>
	FATFS *fs = obj->fs;
 8007f82:	4690      	mov	r8, r2
		if (w < ' ') break;				/* Break if end of the path name */
 8007f84:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007f86:	f8d2 9010 	ldr.w	r9, [r2, #16]
		w = p[si++];					/* Get a character */
 8007f8a:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8007f8c:	d941      	bls.n	8008012 <follow_path+0xb6>
 8007f8e:	f1a9 0502 	sub.w	r5, r9, #2
 8007f92:	46b3      	mov	fp, r6
 8007f94:	46aa      	mov	sl, r5
		w = p[si++];					/* Get a character */
 8007f96:	2401      	movs	r4, #1
 8007f98:	e009      	b.n	8007fae <follow_path+0x52>
		lfn[di++] = w;					/* Store the Unicode character */
 8007f9a:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8007f9e:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8007fa2:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8007fa4:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8007fa8:	f240 80f0 	bls.w	800818c <follow_path+0x230>
		w = p[si++];					/* Get a character */
 8007fac:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007fae:	282f      	cmp	r0, #47	; 0x2f
 8007fb0:	f104 33ff 	add.w	r3, r4, #4294967295
 8007fb4:	d017      	beq.n	8007fe6 <follow_path+0x8a>
 8007fb6:	285c      	cmp	r0, #92	; 0x5c
 8007fb8:	d015      	beq.n	8007fe6 <follow_path+0x8a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007fba:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8007fbe:	d00e      	beq.n	8007fde <follow_path+0x82>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	f001 fbd5 	bl	8009770 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007fc6:	b150      	cbz	r0, 8007fde <follow_path+0x82>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007fc8:	287f      	cmp	r0, #127	; 0x7f
 8007fca:	d8e6      	bhi.n	8007f9a <follow_path+0x3e>
 8007fcc:	4a95      	ldr	r2, [pc, #596]	; (8008224 <follow_path+0x2c8>)
	while (*str && *str != chr) str++;
 8007fce:	2322      	movs	r3, #34	; 0x22
 8007fd0:	e003      	b.n	8007fda <follow_path+0x7e>
 8007fd2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0df      	beq.n	8007f9a <follow_path+0x3e>
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	d1f9      	bne.n	8007fd2 <follow_path+0x76>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007fde:	2006      	movs	r0, #6
}
 8007fe0:	b003      	add	sp, #12
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	4434      	add	r4, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007fe8:	7822      	ldrb	r2, [r4, #0]
 8007fea:	2a2f      	cmp	r2, #47	; 0x2f
 8007fec:	4626      	mov	r6, r4
 8007fee:	f104 0401 	add.w	r4, r4, #1
 8007ff2:	d0f9      	beq.n	8007fe8 <follow_path+0x8c>
 8007ff4:	2a5c      	cmp	r2, #92	; 0x5c
 8007ff6:	d0f7      	beq.n	8007fe8 <follow_path+0x8c>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007ff8:	b15b      	cbz	r3, 8008012 <follow_path+0xb6>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007ffa:	f04f 0a00 	mov.w	sl, #0
 8007ffe:	eb09 0143 	add.w	r1, r9, r3, lsl #1
		w = lfn[di - 1];
 8008002:	f831 2d02 	ldrh.w	r2, [r1, #-2]!
		if (w != ' ' && w != '.') break;
 8008006:	2a20      	cmp	r2, #32
 8008008:	d001      	beq.n	800800e <follow_path+0xb2>
 800800a:	2a2e      	cmp	r2, #46	; 0x2e
 800800c:	d105      	bne.n	800801a <follow_path+0xbe>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800800e:	3b01      	subs	r3, #1
 8008010:	d1f7      	bne.n	8008002 <follow_path+0xa6>
	lfn[di] = 0;						/* LFN is created */
 8008012:	2300      	movs	r3, #0
 8008014:	f8a9 3000 	strh.w	r3, [r9]
 8008018:	e7e1      	b.n	8007fde <follow_path+0x82>
		*d++ = (BYTE)val;
 800801a:	2220      	movs	r2, #32
 800801c:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8008020:	2400      	movs	r4, #0
 8008022:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
		*d++ = (BYTE)val;
 8008026:	6279      	str	r1, [r7, #36]	; 0x24
 8008028:	62b9      	str	r1, [r7, #40]	; 0x28
 800802a:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 800802e:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8008032:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
	} while (--cnt);
 8008036:	e000      	b.n	800803a <follow_path+0xde>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008038:	3401      	adds	r4, #1
 800803a:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 800803e:	2820      	cmp	r0, #32
 8008040:	d0fa      	beq.n	8008038 <follow_path+0xdc>
 8008042:	282e      	cmp	r0, #46	; 0x2e
 8008044:	d0f8      	beq.n	8008038 <follow_path+0xdc>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008046:	b10c      	cbz	r4, 800804c <follow_path+0xf0>
 8008048:	f04a 0a03 	orr.w	sl, sl, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800804c:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 8008050:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8008054:	292e      	cmp	r1, #46	; 0x2e
 8008056:	d001      	beq.n	800805c <follow_path+0x100>
 8008058:	3b01      	subs	r3, #1
 800805a:	d1f9      	bne.n	8008050 <follow_path+0xf4>
		w = lfn[si++];					/* Get an LFN character */
 800805c:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800805e:	2800      	cmp	r0, #0
 8008060:	d043      	beq.n	80080ea <follow_path+0x18e>
 8008062:	2500      	movs	r5, #0
 8008064:	f04f 0b08 	mov.w	fp, #8
 8008068:	462a      	mov	r2, r5
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800806a:	2820      	cmp	r0, #32
 800806c:	d062      	beq.n	8008134 <follow_path+0x1d8>
 800806e:	282e      	cmp	r0, #46	; 0x2e
 8008070:	d064      	beq.n	800813c <follow_path+0x1e0>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008072:	4593      	cmp	fp, r2
 8008074:	d96e      	bls.n	8008154 <follow_path+0x1f8>
 8008076:	42a3      	cmp	r3, r4
 8008078:	d062      	beq.n	8008140 <follow_path+0x1e4>
		if (w >= 0x80) {				/* Non ASCII character */
 800807a:	287f      	cmp	r0, #127	; 0x7f
 800807c:	f200 8094 	bhi.w	80081a8 <follow_path+0x24c>
	while (*str && *str != chr) str++;
 8008080:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800822c <follow_path+0x2d0>
 8008084:	212b      	movs	r1, #43	; 0x2b
 8008086:	e004      	b.n	8008092 <follow_path+0x136>
 8008088:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800808c:	2900      	cmp	r1, #0
 800808e:	f000 80a9 	beq.w	80081e4 <follow_path+0x288>
 8008092:	4281      	cmp	r1, r0
 8008094:	d1f8      	bne.n	8008088 <follow_path+0x12c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008096:	f04a 0a03 	orr.w	sl, sl, #3
 800809a:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800809c:	4621      	mov	r1, r4
 800809e:	18bc      	adds	r4, r7, r2
 80080a0:	3201      	adds	r2, #1
 80080a2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80080a6:	f839 0011 	ldrh.w	r0, [r9, r1, lsl #1]
 80080aa:	1c4c      	adds	r4, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d1dc      	bne.n	800806a <follow_path+0x10e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080b4:	2be5      	cmp	r3, #229	; 0xe5
 80080b6:	bf04      	itt	eq
 80080b8:	2305      	moveq	r3, #5
 80080ba:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80080be:	f1bb 0f08 	cmp.w	fp, #8
 80080c2:	d068      	beq.n	8008196 <follow_path+0x23a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80080c4:	f005 030c 	and.w	r3, r5, #12
 80080c8:	2b0c      	cmp	r3, #12
 80080ca:	d04c      	beq.n	8008166 <follow_path+0x20a>
 80080cc:	f005 0503 	and.w	r5, r5, #3
 80080d0:	2d03      	cmp	r5, #3
 80080d2:	d048      	beq.n	8008166 <follow_path+0x20a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80080d4:	f01a 0f02 	tst.w	sl, #2
 80080d8:	d107      	bne.n	80080ea <follow_path+0x18e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80080da:	2d01      	cmp	r5, #1
 80080dc:	bf08      	it	eq
 80080de:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	bf08      	it	eq
 80080e6:	f04a 0a08 	orreq.w	sl, sl, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80080ea:	f887 a02f 	strb.w	sl, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80080ee:	4638      	mov	r0, r7
 80080f0:	f7ff fd8c 	bl	8007c0c <dir_find>
			ns = dp->fn[NSFLAG];
 80080f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d13f      	bne.n	800817c <follow_path+0x220>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080fc:	075a      	lsls	r2, r3, #29
 80080fe:	f53f af6f 	bmi.w	8007fe0 <follow_path+0x84>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008102:	79bb      	ldrb	r3, [r7, #6]
 8008104:	06db      	lsls	r3, r3, #27
 8008106:	d57e      	bpl.n	8008206 <follow_path+0x2aa>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008108:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	fbb2 f0f1 	udiv	r0, r2, r1
 8008112:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8008116:	fb01 2210 	mls	r2, r1, r0, r2
	if (fs->fs_type == FS_FAT32) {
 800811a:	f898 1000 	ldrb.w	r1, [r8]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800811e:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 8008120:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008122:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008124:	bf04      	itt	eq
 8008126:	8a9b      	ldrheq	r3, [r3, #20]
 8008128:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800812c:	60ba      	str	r2, [r7, #8]
		w = p[si++];					/* Get a character */
 800812e:	7833      	ldrb	r3, [r6, #0]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008130:	683a      	ldr	r2, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008132:	e727      	b.n	8007f84 <follow_path+0x28>
			cf |= NS_LOSS | NS_LFN; continue;
 8008134:	f04a 0a03 	orr.w	sl, sl, #3
 8008138:	4621      	mov	r1, r4
 800813a:	e7b4      	b.n	80080a6 <follow_path+0x14a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800813c:	42a3      	cmp	r3, r4
 800813e:	d1f9      	bne.n	8008134 <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
 8008140:	f1bb 0f0b 	cmp.w	fp, #11
 8008144:	d063      	beq.n	800820e <follow_path+0x2b2>
			b <<= 2; continue;
 8008146:	00ad      	lsls	r5, r5, #2
 8008148:	b2ed      	uxtb	r5, r5
 800814a:	4619      	mov	r1, r3
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800814c:	f04f 0b0b 	mov.w	fp, #11
 8008150:	2208      	movs	r2, #8
			b <<= 2; continue;
 8008152:	e7a8      	b.n	80080a6 <follow_path+0x14a>
			if (ni == 11) {				/* Long extension */
 8008154:	f1bb 0f0b 	cmp.w	fp, #11
 8008158:	d059      	beq.n	800820e <follow_path+0x2b2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800815a:	42a3      	cmp	r3, r4
 800815c:	d0f3      	beq.n	8008146 <follow_path+0x1ea>
 800815e:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 8008162:	d3a5      	bcc.n	80080b0 <follow_path+0x154>
 8008164:	e7ef      	b.n	8008146 <follow_path+0x1ea>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008166:	f04a 0a02 	orr.w	sl, sl, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800816a:	f887 a02f 	strb.w	sl, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800816e:	4638      	mov	r0, r7
 8008170:	f7ff fd4c 	bl	8007c0c <dir_find>
			ns = dp->fn[NSFLAG];
 8008174:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8008178:	2800      	cmp	r0, #0
 800817a:	d0bf      	beq.n	80080fc <follow_path+0x1a0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800817c:	2804      	cmp	r0, #4
 800817e:	f47f af2f 	bne.w	8007fe0 <follow_path+0x84>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008182:	f013 0f04 	tst.w	r3, #4
 8008186:	bf08      	it	eq
 8008188:	2005      	moveq	r0, #5
 800818a:	e729      	b.n	8007fe0 <follow_path+0x84>
	*path = &p[si];						/* Return pointer to the next segment */
 800818c:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800818e:	f04f 0a04 	mov.w	sl, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8008192:	4623      	mov	r3, r4
 8008194:	e733      	b.n	8007ffe <follow_path+0xa2>
	if (ni == 8) b <<= 2;
 8008196:	00ab      	lsls	r3, r5, #2
 8008198:	f003 030c 	and.w	r3, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800819c:	2b0c      	cmp	r3, #12
 800819e:	d0e2      	beq.n	8008166 <follow_path+0x20a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80081a0:	f01a 0f02 	tst.w	sl, #2
 80081a4:	d09d      	beq.n	80080e2 <follow_path+0x186>
 80081a6:	e7a0      	b.n	80080ea <follow_path+0x18e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80081a8:	2100      	movs	r1, #0
 80081aa:	e9cd 2300 	strd	r2, r3, [sp]
 80081ae:	f001 fadf 	bl	8009770 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80081b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081b6:	b148      	cbz	r0, 80081cc <follow_path+0x270>
 80081b8:	491b      	ldr	r1, [pc, #108]	; (8008228 <follow_path+0x2cc>)
 80081ba:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 80081bc:	f04a 0a02 	orr.w	sl, sl, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80081c0:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f43f af66 	beq.w	8008096 <follow_path+0x13a>
 80081ca:	e759      	b.n	8008080 <follow_path+0x124>
			cf |= NS_LFN;				/* Force create LFN entry */
 80081cc:	f04a 0a02 	orr.w	sl, sl, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80081d0:	e761      	b.n	8008096 <follow_path+0x13a>
		dp->fn[NSFLAG] = NS_NONAME;
 80081d2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80081d4:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 80081d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80081da:	b003      	add	sp, #12
 80081dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80081e0:	f7ff bc3c 	b.w	8007a5c <dir_sdi>
				if (IsUpper(w)) {		/* ASCII large capital */
 80081e4:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80081e8:	2919      	cmp	r1, #25
 80081ea:	d803      	bhi.n	80081f4 <follow_path+0x298>
					b |= 2;
 80081ec:	f045 0502 	orr.w	r5, r5, #2
		dp->fn[i++] = (BYTE)w;
 80081f0:	b2c0      	uxtb	r0, r0
 80081f2:	e753      	b.n	800809c <follow_path+0x140>
					if (IsLower(w)) {	/* ASCII small capital */
 80081f4:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80081f8:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80081fa:	bf9c      	itt	ls
 80081fc:	3820      	subls	r0, #32
 80081fe:	f045 0501 	orrls.w	r5, r5, #1
		dp->fn[i++] = (BYTE)w;
 8008202:	b2c0      	uxtb	r0, r0
 8008204:	e74a      	b.n	800809c <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008206:	2005      	movs	r0, #5
}
 8008208:	b003      	add	sp, #12
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800820e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008212:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 8008214:	f04a 0a03 	orr.w	sl, sl, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008218:	f47f af54 	bne.w	80080c4 <follow_path+0x168>
 800821c:	2305      	movs	r3, #5
 800821e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8008222:	e74f      	b.n	80080c4 <follow_path+0x168>
 8008224:	0800a280 	.word	0x0800a280
 8008228:	0800a294 	.word	0x0800a294
 800822c:	0800a28c 	.word	0x0800a28c

08008230 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008230:	2901      	cmp	r1, #1
{
 8008232:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8008236:	6806      	ldr	r6, [r0, #0]
{
 8008238:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800823a:	d910      	bls.n	800825e <remove_chain+0x2e>
 800823c:	69f3      	ldr	r3, [r6, #28]
 800823e:	428b      	cmp	r3, r1
 8008240:	d90d      	bls.n	800825e <remove_chain+0x2e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008242:	4605      	mov	r5, r0
 8008244:	4611      	mov	r1, r2
 8008246:	b96a      	cbnz	r2, 8008264 <remove_chain+0x34>
 8008248:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800824a:	429c      	cmp	r4, r3
 800824c:	d207      	bcs.n	800825e <remove_chain+0x2e>
		switch (fs->fs_type) {
 800824e:	783b      	ldrb	r3, [r7, #0]
 8008250:	2b02      	cmp	r3, #2
 8008252:	f000 8089 	beq.w	8008368 <remove_chain+0x138>
 8008256:	2b03      	cmp	r3, #3
 8008258:	d06a      	beq.n	8008330 <remove_chain+0x100>
 800825a:	2b01      	cmp	r3, #1
 800825c:	d010      	beq.n	8008280 <remove_chain+0x50>
 800825e:	2002      	movs	r0, #2
}
 8008260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008264:	2a01      	cmp	r2, #1
 8008266:	d0fa      	beq.n	800825e <remove_chain+0x2e>
 8008268:	4293      	cmp	r3, r2
 800826a:	d9f8      	bls.n	800825e <remove_chain+0x2e>
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	4630      	mov	r0, r6
 8008272:	f7ff f91f 	bl	80074b4 <put_fat.part.0>
		if (res != FR_OK) return res;
 8008276:	2800      	cmp	r0, #0
 8008278:	d1f2      	bne.n	8008260 <remove_chain+0x30>
 800827a:	682f      	ldr	r7, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	e7e4      	b.n	800824a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008282:	f8d7 c034 	ldr.w	ip, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008286:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 8008288:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800828c:	fbb8 f3f2 	udiv	r3, r8, r2
 8008290:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008292:	4561      	cmp	r1, ip
 8008294:	d00a      	beq.n	80082ac <remove_chain+0x7c>
 8008296:	4638      	mov	r0, r7
 8008298:	f7fe ff3c 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800829c:	2800      	cmp	r0, #0
 800829e:	d17d      	bne.n	800839c <remove_chain+0x16c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80082a2:	f8d7 c034 	ldr.w	ip, [r7, #52]	; 0x34
			wc = fs->win[bc++ % SS(fs)];
 80082a6:	89ba      	ldrh	r2, [r7, #12]
 80082a8:	fbb8 f3f2 	udiv	r3, r8, r2
 80082ac:	fb02 8313 	mls	r3, r2, r3, r8
 80082b0:	443b      	add	r3, r7
 80082b2:	f108 0801 	add.w	r8, r8, #1
 80082b6:	f893 9038 	ldrb.w	r9, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082ba:	fbb8 f3f2 	udiv	r3, r8, r2
 80082be:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80082c0:	4561      	cmp	r1, ip
 80082c2:	d007      	beq.n	80082d4 <remove_chain+0xa4>
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7fe ff25 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d166      	bne.n	800839c <remove_chain+0x16c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80082ce:	89ba      	ldrh	r2, [r7, #12]
 80082d0:	fbb8 f3f2 	udiv	r3, r8, r2
 80082d4:	fb02 8813 	mls	r8, r2, r3, r8
 80082d8:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082da:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80082dc:	f897 8038 	ldrb.w	r8, [r7, #56]	; 0x38
 80082e0:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082e4:	bf4c      	ite	mi
 80082e6:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 80082ea:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 80082ee:	f1b8 0f00 	cmp.w	r8, #0
 80082f2:	d055      	beq.n	80083a0 <remove_chain+0x170>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80082f4:	f1b8 0f01 	cmp.w	r8, #1
 80082f8:	d0b1      	beq.n	800825e <remove_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80082fa:	69f3      	ldr	r3, [r6, #28]
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d9ae      	bls.n	800825e <remove_chain+0x2e>
 8008300:	2200      	movs	r2, #0
 8008302:	4621      	mov	r1, r4
 8008304:	4630      	mov	r0, r6
 8008306:	f7ff f8d5 	bl	80074b4 <put_fat.part.0>
			if (res != FR_OK) return res;
 800830a:	2800      	cmp	r0, #0
 800830c:	d1a8      	bne.n	8008260 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800830e:	e9d6 3206 	ldrd	r3, r2, [r6, #24]
 8008312:	1e91      	subs	r1, r2, #2
 8008314:	428b      	cmp	r3, r1
 8008316:	d205      	bcs.n	8008324 <remove_chain+0xf4>
			fs->free_clst++;
 8008318:	3301      	adds	r3, #1
 800831a:	61b3      	str	r3, [r6, #24]
			fs->fsi_flag |= 1;
 800831c:	7933      	ldrb	r3, [r6, #4]
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008324:	4542      	cmp	r2, r8
 8008326:	d93b      	bls.n	80083a0 <remove_chain+0x170>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	4644      	mov	r4, r8
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	e78c      	b.n	800824a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008330:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8008334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008338:	ea4f 019c 	mov.w	r1, ip, lsr #2
 800833c:	fbb4 f1f1 	udiv	r1, r4, r1
 8008340:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008342:	4291      	cmp	r1, r2
 8008344:	d005      	beq.n	8008352 <remove_chain+0x122>
 8008346:	4638      	mov	r0, r7
 8008348:	f7fe fee4 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800834c:	bb30      	cbnz	r0, 800839c <remove_chain+0x16c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800834e:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8008352:	00a3      	lsls	r3, r4, #2
 8008354:	fbb3 f2fc 	udiv	r2, r3, ip
 8008358:	fb0c 3312 	mls	r3, ip, r2, r3
	rv = rv << 8 | ptr[0];
 800835c:	441f      	add	r7, r3
 800835e:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008362:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8008366:	e7c2      	b.n	80082ee <remove_chain+0xbe>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008368:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 800836c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800836e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008370:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008374:	fbb4 f1f1 	udiv	r1, r4, r1
 8008378:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800837a:	4291      	cmp	r1, r2
 800837c:	d005      	beq.n	800838a <remove_chain+0x15a>
 800837e:	4638      	mov	r0, r7
 8008380:	f7fe fec8 	bl	8007114 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008384:	b950      	cbnz	r0, 800839c <remove_chain+0x16c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008386:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 800838a:	0063      	lsls	r3, r4, #1
 800838c:	fbb3 f2fc 	udiv	r2, r3, ip
 8008390:	fb0c 3312 	mls	r3, ip, r2, r3
 8008394:	441f      	add	r7, r3
 8008396:	f8b7 8038 	ldrh.w	r8, [r7, #56]	; 0x38
			break;
 800839a:	e7a8      	b.n	80082ee <remove_chain+0xbe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800839c:	2001      	movs	r0, #1
 800839e:	e75f      	b.n	8008260 <remove_chain+0x30>
	return FR_OK;
 80083a0:	2000      	movs	r0, #0
 80083a2:	e75d      	b.n	8008260 <remove_chain+0x30>

080083a4 <dir_register>:
{
 80083a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80083a8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 80083ac:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80083ae:	f013 08a0 	ands.w	r8, r3, #160	; 0xa0
 80083b2:	930a      	str	r3, [sp, #40]	; 0x28
 80083b4:	f040 8348 	bne.w	8008a48 <dir_register+0x6a4>
	FATFS *fs = dp->obj.fs;
 80083b8:	6803      	ldr	r3, [r0, #0]
 80083ba:	9301      	str	r3, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80083bc:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80083c0:	f8bc 3000 	ldrh.w	r3, [ip]
 80083c4:	4604      	mov	r4, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 83fd 	beq.w	8008bc6 <dir_register+0x822>
 80083cc:	4663      	mov	r3, ip
 80083ce:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	2a00      	cmp	r2, #0
 80083d8:	d1f9      	bne.n	80083ce <dir_register+0x2a>
	mem_cpy(sn, dp->fn, 12);
 80083da:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 80083de:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80083e2:	ab12      	add	r3, sp, #72	; 0x48
 80083e4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	07da      	lsls	r2, r3, #31
 80083ec:	f100 8089 	bmi.w	8008502 <dir_register+0x15e>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80083f0:	f013 0302 	ands.w	r3, r3, #2
 80083f4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80083f8:	f000 8282 	beq.w	8008900 <dir_register+0x55c>
 80083fc:	4a6e      	ldr	r2, [pc, #440]	; (80085b8 <dir_register+0x214>)
 80083fe:	f108 030c 	add.w	r3, r8, #12
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	089b      	lsrs	r3, r3, #2
 8008408:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 800840a:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800840c:	3301      	adds	r3, #1
	res = dir_sdi(dp, 0);
 800840e:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008410:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8008412:	f7ff fb23 	bl	8007a5c <dir_sdi>
	if (res == FR_OK) {
 8008416:	4683      	mov	fp, r0
 8008418:	2800      	cmp	r0, #0
 800841a:	f040 827c 	bne.w	8008916 <dir_register+0x572>
			res = move_window(fs, dp->sect);
 800841e:	69e1      	ldr	r1, [r4, #28]
						fs->wflag = 1;
 8008420:	9005      	str	r0, [sp, #20]
		n = 0;
 8008422:	4680      	mov	r8, r0
 8008424:	e023      	b.n	800846e <dir_register+0xca>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008426:	b383      	cbz	r3, 800848a <dir_register+0xe6>
				n = 0;					/* Not a blank entry. Restart to search */
 8008428:	f04f 0800 	mov.w	r8, #0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800842c:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800842e:	69e1      	ldr	r1, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008430:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008432:	2900      	cmp	r1, #0
 8008434:	f000 8272 	beq.w	800891c <dir_register+0x578>
 8008438:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 800843c:	f080 826e 	bcs.w	800891c <dir_register+0x578>
	FATFS *fs = dp->obj.fs;
 8008440:	6825      	ldr	r5, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008442:	89ab      	ldrh	r3, [r5, #12]
 8008444:	fbb6 f0f3 	udiv	r0, r6, r3
 8008448:	fb03 6310 	mls	r3, r3, r0, r6
 800844c:	b953      	cbnz	r3, 8008464 <dir_register+0xc0>
		if (!dp->clust) {		/* Static table */
 800844e:	69a2      	ldr	r2, [r4, #24]
		dp->sect++;				/* Next sector */
 8008450:	3101      	adds	r1, #1
 8008452:	61e1      	str	r1, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8008454:	2a00      	cmp	r2, #0
 8008456:	f040 82bf 	bne.w	80089d8 <dir_register+0x634>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800845a:	8928      	ldrh	r0, [r5, #8]
 800845c:	ebb0 1f56 	cmp.w	r0, r6, lsr #5
 8008460:	f240 83ad 	bls.w	8008bbe <dir_register+0x81a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008464:	f105 0738 	add.w	r7, r5, #56	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008468:	441f      	add	r7, r3
	dp->dptr = ofs;						/* Current entry */
 800846a:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800846c:	6227      	str	r7, [r4, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800846e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8008472:	428b      	cmp	r3, r1
 8008474:	d005      	beq.n	8008482 <dir_register+0xde>
 8008476:	4648      	mov	r0, r9
 8008478:	f7fe fe4c 	bl	8007114 <move_window.part.0>
			if (res != FR_OK) break;
 800847c:	2800      	cmp	r0, #0
 800847e:	f040 83a0 	bne.w	8008bc2 <dir_register+0x81e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008482:	6a23      	ldr	r3, [r4, #32]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2be5      	cmp	r3, #229	; 0xe5
 8008488:	d1cd      	bne.n	8008426 <dir_register+0x82>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	f108 0801 	add.w	r8, r8, #1
 8008490:	4543      	cmp	r3, r8
 8008492:	d1cb      	bne.n	800842c <dir_register+0x88>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	f8dd b014 	ldr.w	fp, [sp, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f040 82df 	bne.w	8008a5e <dir_register+0x6ba>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084a0:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
 80084a2:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a6:	4299      	cmp	r1, r3
 80084a8:	d005      	beq.n	80084b6 <dir_register+0x112>
 80084aa:	9801      	ldr	r0, [sp, #4]
 80084ac:	f7fe fe32 	bl	8007114 <move_window.part.0>
		if (res == FR_OK) {
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f040 82cf 	bne.w	8008a54 <dir_register+0x6b0>
		*d++ = (BYTE)val;
 80084b6:	2220      	movs	r2, #32
 80084b8:	6a20      	ldr	r0, [r4, #32]
 80084ba:	2100      	movs	r1, #0
 80084bc:	f001 f9ee 	bl	800989c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80084c0:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084c2:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80084c6:	1a9a      	subs	r2, r3, r2
 80084c8:	2a02      	cmp	r2, #2
 80084ca:	f240 8496 	bls.w	8008dfa <dir_register+0xa56>
			*d++ = *s++;
 80084ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80084d4:	605a      	str	r2, [r3, #4]
 80084d6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80084da:	721a      	strb	r2, [r3, #8]
 80084dc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80084e0:	725a      	strb	r2, [r3, #9]
 80084e2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80084e6:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80084e8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80084ec:	6a21      	ldr	r1, [r4, #32]
 80084ee:	f003 0318 	and.w	r3, r3, #24
 80084f2:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	2201      	movs	r2, #1
}
 80084f8:	4658      	mov	r0, fp
			fs->wflag = 1;
 80084fa:	70da      	strb	r2, [r3, #3]
}
 80084fc:	b013      	add	sp, #76	; 0x4c
 80084fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008502:	2340      	movs	r3, #64	; 0x40
 8008504:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
 8008508:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8008518:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	9208      	str	r2, [sp, #32]
 8008526:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800852a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	9207      	str	r2, [sp, #28]
 8008532:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8008536:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800853a:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
 800853e:	f89d 9046 	ldrb.w	r9, [sp, #70]	; 0x46
				if (sr & 0x10000) sr ^= 0x11021;
 8008542:	4d1e      	ldr	r5, [pc, #120]	; (80085bc <dir_register+0x218>)
			*d++ = *s++;
 8008544:	9109      	str	r1, [sp, #36]	; 0x24
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008546:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
		for (n = 1; n < 100; n++) {
 800854a:	2701      	movs	r7, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800854c:	f04f 0a20 	mov.w	sl, #32
 8008550:	4661      	mov	r1, ip
 8008552:	4698      	mov	r8, r3
 8008554:	4693      	mov	fp, r2
			*d++ = *s++;
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	f884 b02c 	strb.w	fp, [r4, #44]	; 0x2c
 8008562:	2200      	movs	r2, #0
 8008564:	f363 0207 	bfi	r2, r3, #0, #8
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 800856e:	f363 220f 	bfi	r2, r3, #8, #8
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	f363 4217 	bfi	r2, r3, #16, #8
 8008578:	9b05      	ldr	r3, [sp, #20]
 800857a:	f363 621f 	bfi	r2, r3, #24, #8
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	6262      	str	r2, [r4, #36]	; 0x24
 8008582:	2200      	movs	r2, #0
 8008584:	f363 0207 	bfi	r2, r3, #0, #8
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	f368 220f 	bfi	r2, r8, #8, #8
 800858e:	f363 4217 	bfi	r2, r3, #16, #8
 8008592:	9b07      	ldr	r3, [sp, #28]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008594:	2f05      	cmp	r7, #5
			*d++ = *s++;
 8008596:	f363 621f 	bfi	r2, r3, #24, #8
 800859a:	62a2      	str	r2, [r4, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800859c:	f240 812b 	bls.w	80087f6 <dir_register+0x452>
		while (*lfn) {	/* Create a CRC */
 80085a0:	880a      	ldrh	r2, [r1, #0]
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	f000 8127 	beq.w	80087f6 <dir_register+0x452>
				sr = (sr << 1) + (wc & 1);
 80085a8:	f002 0e01 	and.w	lr, r2, #1
 80085ac:	468c      	mov	ip, r1
 80085ae:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
				wc >>= 1;
 80085b2:	0850      	lsrs	r0, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80085b4:	e00e      	b.n	80085d4 <dir_register+0x230>
 80085b6:	bf00      	nop
 80085b8:	4ec4ec4f 	.word	0x4ec4ec4f
 80085bc:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 80085c0:	f002 0e01 	and.w	lr, r2, #1
 80085c4:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80085c8:	040b      	lsls	r3, r1, #16
				wc >>= 1;
 80085ca:	ea4f 0052 	mov.w	r0, r2, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 80085ce:	bf48      	it	mi
 80085d0:	ea8e 0e05 	eormi.w	lr, lr, r5
				sr = (sr << 1) + (wc & 1);
 80085d4:	f000 0101 	and.w	r1, r0, #1
 80085d8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
 80085dc:	0893      	lsrs	r3, r2, #2
				if (sr & 0x10000) sr ^= 0x11021;
 80085de:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 80085e2:	bf18      	it	ne
 80085e4:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 80085ee:	08d0      	lsrs	r0, r2, #3
				if (sr & 0x10000) sr ^= 0x11021;
 80085f0:	0409      	lsls	r1, r1, #16
 80085f2:	bf48      	it	mi
 80085f4:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80085f6:	f000 0001 	and.w	r0, r0, #1
 80085fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 80085fe:	0911      	lsrs	r1, r2, #4
				if (sr & 0x10000) sr ^= 0x11021;
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	bf48      	it	mi
 8008604:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8008606:	f001 0101 	and.w	r1, r1, #1
 800860a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 800860e:	0953      	lsrs	r3, r2, #5
				if (sr & 0x10000) sr ^= 0x11021;
 8008610:	0400      	lsls	r0, r0, #16
 8008612:	bf48      	it	mi
 8008614:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800861e:	0990      	lsrs	r0, r2, #6
				if (sr & 0x10000) sr ^= 0x11021;
 8008620:	0409      	lsls	r1, r1, #16
 8008622:	bf48      	it	mi
 8008624:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8008626:	f000 0001 	and.w	r0, r0, #1
 800862a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 800862e:	09d1      	lsrs	r1, r2, #7
				if (sr & 0x10000) sr ^= 0x11021;
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	bf48      	it	mi
 8008634:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8008636:	f001 0101 	and.w	r1, r1, #1
 800863a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 800863e:	0a13      	lsrs	r3, r2, #8
				if (sr & 0x10000) sr ^= 0x11021;
 8008640:	0400      	lsls	r0, r0, #16
 8008642:	bf48      	it	mi
 8008644:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800864e:	0a50      	lsrs	r0, r2, #9
				if (sr & 0x10000) sr ^= 0x11021;
 8008650:	0409      	lsls	r1, r1, #16
 8008652:	bf48      	it	mi
 8008654:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8008656:	f000 0001 	and.w	r0, r0, #1
 800865a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 800865e:	0a91      	lsrs	r1, r2, #10
				if (sr & 0x10000) sr ^= 0x11021;
 8008660:	041b      	lsls	r3, r3, #16
 8008662:	bf48      	it	mi
 8008664:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8008666:	f001 0101 	and.w	r1, r1, #1
 800866a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 800866e:	0ad3      	lsrs	r3, r2, #11
				if (sr & 0x10000) sr ^= 0x11021;
 8008670:	0400      	lsls	r0, r0, #16
 8008672:	bf48      	it	mi
 8008674:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800867e:	0b10      	lsrs	r0, r2, #12
				if (sr & 0x10000) sr ^= 0x11021;
 8008680:	0409      	lsls	r1, r1, #16
 8008682:	bf48      	it	mi
 8008684:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8008686:	f000 0001 	and.w	r0, r0, #1
 800868a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 800868e:	0b51      	lsrs	r1, r2, #13
				if (sr & 0x10000) sr ^= 0x11021;
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	bf48      	it	mi
 8008694:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8008696:	f001 0101 	and.w	r1, r1, #1
 800869a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 800869e:	0b93      	lsrs	r3, r2, #14
				if (sr & 0x10000) sr ^= 0x11021;
 80086a0:	0400      	lsls	r0, r0, #16
 80086a2:	bf48      	it	mi
 80086a4:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80086ae:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80086b0:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 80086b4:	bf48      	it	mi
 80086b6:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80086b8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
		while (*lfn) {	/* Create a CRC */
 80086bc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	bf48      	it	mi
 80086c4:	4069      	eormi	r1, r5
		while (*lfn) {	/* Create a CRC */
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	f47f af7a 	bne.w	80085c0 <dir_register+0x21c>
		c = (BYTE)((seq % 16) + '0');
 80086cc:	f001 000f 	and.w	r0, r1, #15
 80086d0:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 80086d4:	2a39      	cmp	r2, #57	; 0x39
 80086d6:	bf88      	it	hi
 80086d8:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80086dc:	290f      	cmp	r1, #15
		ns[i--] = c;
 80086de:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		seq /= 16;
 80086e2:	ea4f 1011 	mov.w	r0, r1, lsr #4
	} while (seq);
 80086e6:	f240 8156 	bls.w	8008996 <dir_register+0x5f2>
		c = (BYTE)((seq % 16) + '0');
 80086ea:	f000 0c0f 	and.w	ip, r0, #15
 80086ee:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 80086f2:	2a39      	cmp	r2, #57	; 0x39
 80086f4:	bf88      	it	hi
 80086f6:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 80086fa:	280f      	cmp	r0, #15
		ns[i--] = c;
 80086fc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		seq /= 16;
 8008700:	ea4f 2c11 	mov.w	ip, r1, lsr #8
	} while (seq);
 8008704:	f240 814d 	bls.w	80089a2 <dir_register+0x5fe>
		c = (BYTE)((seq % 16) + '0');
 8008708:	f00c 000f 	and.w	r0, ip, #15
 800870c:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8008710:	2a39      	cmp	r2, #57	; 0x39
 8008712:	bf88      	it	hi
 8008714:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8008718:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 800871c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		seq /= 16;
 8008720:	ea4f 3011 	mov.w	r0, r1, lsr #12
	} while (seq);
 8008724:	f240 814c 	bls.w	80089c0 <dir_register+0x61c>
		c = (BYTE)((seq % 16) + '0');
 8008728:	f000 0c0f 	and.w	ip, r0, #15
 800872c:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 8008730:	2a39      	cmp	r2, #57	; 0x39
 8008732:	bf88      	it	hi
 8008734:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 8008738:	280f      	cmp	r0, #15
		ns[i--] = c;
 800873a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		seq /= 16;
 800873e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	} while (seq);
 8008742:	f240 8143 	bls.w	80089cc <dir_register+0x628>
		c = (BYTE)((seq % 16) + '0');
 8008746:	f00c 000f 	and.w	r0, ip, #15
 800874a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800874e:	2a39      	cmp	r2, #57	; 0x39
 8008750:	bf88      	it	hi
 8008752:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8008756:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 800875a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
		seq /= 16;
 800875e:	ea4f 5011 	mov.w	r0, r1, lsr #20
	} while (seq);
 8008762:	f240 8165 	bls.w	8008a30 <dir_register+0x68c>
		c = (BYTE)((seq % 16) + '0');
 8008766:	f000 0c0f 	and.w	ip, r0, #15
 800876a:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 800876e:	2a39      	cmp	r2, #57	; 0x39
 8008770:	bf88      	it	hi
 8008772:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 8008776:	280f      	cmp	r0, #15
		ns[i--] = c;
 8008778:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
		seq /= 16;
 800877c:	ea4f 6111 	mov.w	r1, r1, lsr #24
	} while (seq);
 8008780:	f240 815c 	bls.w	8008a3c <dir_register+0x698>
		c = (BYTE)((seq % 16) + '0');
 8008784:	f001 000f 	and.w	r0, r1, #15
 8008788:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800878c:	2a39      	cmp	r2, #57	; 0x39
 800878e:	bf88      	it	hi
 8008790:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8008794:	290f      	cmp	r1, #15
		ns[i--] = c;
 8008796:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 800879a:	f240 8108 	bls.w	80089ae <dir_register+0x60a>
		ns[i--] = c;
 800879e:	f04f 3cff 	mov.w	ip, #4294967295
 80087a2:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80087a6:	2200      	movs	r2, #0
 80087a8:	e002      	b.n	80087b0 <dir_register+0x40c>
 80087aa:	3201      	adds	r2, #1
 80087ac:	4562      	cmp	r2, ip
 80087ae:	d003      	beq.n	80087b8 <dir_register+0x414>
 80087b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d1f8      	bne.n	80087aa <dir_register+0x406>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80087b8:	f1bc 0f07 	cmp.w	ip, #7
 80087bc:	d91d      	bls.n	80087fa <dir_register+0x456>
 80087be:	1c50      	adds	r0, r2, #1
	} while (j < 8);
 80087c0:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80087c2:	f806 a002 	strb.w	sl, [r6, r2]
	} while (j < 8);
 80087c6:	d80a      	bhi.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80087c8:	1c42      	adds	r2, r0, #1
 80087ca:	2a08      	cmp	r2, #8
 80087cc:	f04f 0120 	mov.w	r1, #32
 80087d0:	f1c0 0208 	rsb	r2, r0, #8
 80087d4:	bf88      	it	hi
 80087d6:	2201      	movhi	r2, #1
 80087d8:	4430      	add	r0, r6
 80087da:	f001 f85f 	bl	800989c <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff fa14 	bl	8007c0c <dir_find>
			if (res != FR_OK) break;
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d17d      	bne.n	80088e4 <dir_register+0x540>
		for (n = 1; n < 100; n++) {
 80087e8:	3701      	adds	r7, #1
 80087ea:	2f64      	cmp	r7, #100	; 0x64
 80087ec:	f000 8096 	beq.w	800891c <dir_register+0x578>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	6919      	ldr	r1, [r3, #16]
 80087f4:	e6af      	b.n	8008556 <dir_register+0x1b2>
 80087f6:	4639      	mov	r1, r7
 80087f8:	e768      	b.n	80086cc <dir_register+0x328>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80087fa:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 80087fe:	eb0d 0103 	add.w	r1, sp, r3
 8008802:	f10c 0c01 	add.w	ip, ip, #1
 8008806:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800880a:	54b1      	strb	r1, [r6, r2]
 800880c:	3201      	adds	r2, #1
	} while (j < 8);
 800880e:	2a07      	cmp	r2, #7
 8008810:	d8e5      	bhi.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008812:	f1bc 0f08 	cmp.w	ip, #8
 8008816:	f000 8087 	beq.w	8008928 <dir_register+0x584>
 800881a:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 800881e:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8008822:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008824:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8008828:	54b1      	strb	r1, [r6, r2]
 800882a:	f102 0001 	add.w	r0, r2, #1
 800882e:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8008832:	d0d4      	beq.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008834:	2908      	cmp	r1, #8
 8008836:	d07f      	beq.n	8008938 <dir_register+0x594>
 8008838:	f10c 0349 	add.w	r3, ip, #73	; 0x49
 800883c:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8008840:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008842:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8008846:	5431      	strb	r1, [r6, r0]
 8008848:	f10c 0102 	add.w	r1, ip, #2
 800884c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8008850:	d0c5      	beq.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008852:	2908      	cmp	r1, #8
 8008854:	d078      	beq.n	8008948 <dir_register+0x5a4>
 8008856:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
 800885a:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 800885e:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008860:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8008864:	5431      	strb	r1, [r6, r0]
 8008866:	f10c 0103 	add.w	r1, ip, #3
 800886a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800886e:	d0b6      	beq.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008870:	2908      	cmp	r1, #8
 8008872:	d071      	beq.n	8008958 <dir_register+0x5b4>
 8008874:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
 8008878:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 800887c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800887e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8008882:	5431      	strb	r1, [r6, r0]
 8008884:	f10c 0104 	add.w	r1, ip, #4
 8008888:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800888c:	d0a7      	beq.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800888e:	2908      	cmp	r1, #8
 8008890:	d06a      	beq.n	8008968 <dir_register+0x5c4>
 8008892:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
 8008896:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 800889a:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800889c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80088a0:	5431      	strb	r1, [r6, r0]
 80088a2:	f10c 0105 	add.w	r1, ip, #5
 80088a6:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80088aa:	d098      	beq.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80088ac:	2908      	cmp	r1, #8
 80088ae:	d063      	beq.n	8008978 <dir_register+0x5d4>
 80088b0:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
 80088b4:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 80088b8:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80088ba:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80088be:	5431      	strb	r1, [r6, r0]
 80088c0:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 80088c4:	d08b      	beq.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80088c6:	f1bc 0f01 	cmp.w	ip, #1
 80088ca:	d15d      	bne.n	8008988 <dir_register+0x5e4>
 80088cc:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80088d0:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 80088d2:	2906      	cmp	r1, #6
 80088d4:	d183      	bne.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80088d6:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff f996 	bl	8007c0c <dir_find>
			if (res != FR_OK) break;
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d081      	beq.n	80087e8 <dir_register+0x444>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80088e4:	2804      	cmp	r0, #4
 80088e6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80088ea:	4683      	mov	fp, r0
 80088ec:	d118      	bne.n	8008920 <dir_register+0x57c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088f4:	f013 0302 	ands.w	r3, r3, #2
	FATFS *fs = dp->obj.fs;
 80088f8:	f8d4 9000 	ldr.w	r9, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088fc:	f47f ad7e 	bne.w	80083fc <dir_register+0x58>
 8008900:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 8008902:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008904:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8008906:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008908:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 800890a:	f7ff f8a7 	bl	8007a5c <dir_sdi>
	if (res == FR_OK) {
 800890e:	4683      	mov	fp, r0
 8008910:	2800      	cmp	r0, #0
 8008912:	f43f ad84 	beq.w	800841e <dir_register+0x7a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008916:	f1bb 0f04 	cmp.w	fp, #4
 800891a:	d101      	bne.n	8008920 <dir_register+0x57c>
 800891c:	f04f 0b07 	mov.w	fp, #7
}
 8008920:	4658      	mov	r0, fp
 8008922:	b013      	add	sp, #76	; 0x4c
 8008924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 8008928:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800892a:	f806 a002 	strb.w	sl, [r6, r2]
 800892e:	f102 0001 	add.w	r0, r2, #1
	} while (j < 8);
 8008932:	f47f af49 	bne.w	80087c8 <dir_register+0x424>
 8008936:	e752      	b.n	80087de <dir_register+0x43a>
 8008938:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800893a:	f806 a000 	strb.w	sl, [r6, r0]
 800893e:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8008942:	f47f af41 	bne.w	80087c8 <dir_register+0x424>
 8008946:	e74a      	b.n	80087de <dir_register+0x43a>
 8008948:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800894a:	f806 a000 	strb.w	sl, [r6, r0]
 800894e:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8008952:	f47f af39 	bne.w	80087c8 <dir_register+0x424>
 8008956:	e742      	b.n	80087de <dir_register+0x43a>
 8008958:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800895a:	f806 a000 	strb.w	sl, [r6, r0]
 800895e:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8008962:	f47f af31 	bne.w	80087c8 <dir_register+0x424>
 8008966:	e73a      	b.n	80087de <dir_register+0x43a>
 8008968:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800896a:	f806 a000 	strb.w	sl, [r6, r0]
 800896e:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8008972:	f47f af29 	bne.w	80087c8 <dir_register+0x424>
 8008976:	e732      	b.n	80087de <dir_register+0x43a>
 8008978:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800897a:	f806 a000 	strb.w	sl, [r6, r0]
 800897e:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8008982:	f47f af21 	bne.w	80087c8 <dir_register+0x424>
 8008986:	e72a      	b.n	80087de <dir_register+0x43a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008988:	f806 a001 	strb.w	sl, [r6, r1]
	} while (j < 8);
 800898c:	2a00      	cmp	r2, #0
 800898e:	f47f af26 	bne.w	80087de <dir_register+0x43a>
 8008992:	2007      	movs	r0, #7
 8008994:	e718      	b.n	80087c8 <dir_register+0x424>
	ns[i] = '~';
 8008996:	227e      	movs	r2, #126	; 0x7e
 8008998:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		ns[i--] = c;
 800899c:	f04f 0c06 	mov.w	ip, #6
 80089a0:	e6ff      	b.n	80087a2 <dir_register+0x3fe>
	ns[i] = '~';
 80089a2:	227e      	movs	r2, #126	; 0x7e
 80089a4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		ns[i--] = c;
 80089a8:	f04f 0c05 	mov.w	ip, #5
 80089ac:	e6f9      	b.n	80087a2 <dir_register+0x3fe>
	ns[i] = '~';
 80089ae:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80089b0:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 80089b4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80089b8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80089bc:	4662      	mov	r2, ip
 80089be:	e72c      	b.n	800881a <dir_register+0x476>
	ns[i] = '~';
 80089c0:	227e      	movs	r2, #126	; 0x7e
 80089c2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		ns[i--] = c;
 80089c6:	f04f 0c04 	mov.w	ip, #4
 80089ca:	e6ea      	b.n	80087a2 <dir_register+0x3fe>
	ns[i] = '~';
 80089cc:	227e      	movs	r2, #126	; 0x7e
 80089ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
		ns[i--] = c;
 80089d2:	f04f 0c03 	mov.w	ip, #3
 80089d6:	e6e4      	b.n	80087a2 <dir_register+0x3fe>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80089d8:	896f      	ldrh	r7, [r5, #10]
 80089da:	3f01      	subs	r7, #1
 80089dc:	4207      	tst	r7, r0
 80089de:	f47f ad41 	bne.w	8008464 <dir_register+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089e2:	4611      	mov	r1, r2
 80089e4:	4628      	mov	r0, r5
 80089e6:	f7fe fe21 	bl	800762c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80089ea:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089ec:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80089ee:	f240 821e 	bls.w	8008e2e <dir_register+0xa8a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80089f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089f6:	f000 80dc 	beq.w	8008bb2 <dir_register+0x80e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80089fa:	69eb      	ldr	r3, [r5, #28]
 80089fc:	4298      	cmp	r0, r3
 80089fe:	f080 80e4 	bcs.w	8008bca <dir_register+0x826>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008a02:	3b02      	subs	r3, #2
	clst -= 2;
 8008a04:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a08:	f105 0738 	add.w	r7, r5, #56	; 0x38
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008a0c:	455b      	cmp	r3, fp
	return clst * fs->csize + fs->database;
 8008a0e:	bf84      	itt	hi
 8008a10:	896b      	ldrhhi	r3, [r5, #10]
 8008a12:	6b29      	ldrhi	r1, [r5, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a14:	f8c4 a018 	str.w	sl, [r4, #24]
	return clst * fs->csize + fs->database;
 8008a18:	bf88      	it	hi
 8008a1a:	fb0b 1103 	mlahi	r1, fp, r3, r1
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	fbb6 f2f3 	udiv	r2, r6, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008a24:	bf98      	it	ls
 8008a26:	2100      	movls	r1, #0
				dp->sect = clust2sect(fs, clst);
 8008a28:	61e1      	str	r1, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008a2a:	fb03 6312 	mls	r3, r3, r2, r6
 8008a2e:	e51b      	b.n	8008468 <dir_register+0xc4>
	ns[i] = '~';
 8008a30:	227e      	movs	r2, #126	; 0x7e
 8008a32:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
		ns[i--] = c;
 8008a36:	f04f 0c02 	mov.w	ip, #2
 8008a3a:	e6b2      	b.n	80087a2 <dir_register+0x3fe>
	ns[i] = '~';
 8008a3c:	227e      	movs	r2, #126	; 0x7e
 8008a3e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
		ns[i--] = c;
 8008a42:	f04f 0c01 	mov.w	ip, #1
 8008a46:	e6ac      	b.n	80087a2 <dir_register+0x3fe>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008a48:	f04f 0b06 	mov.w	fp, #6
}
 8008a4c:	4658      	mov	r0, fp
 8008a4e:	b013      	add	sp, #76	; 0x4c
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	4683      	mov	fp, r0
 8008a56:	4658      	mov	r0, fp
 8008a58:	b013      	add	sp, #76	; 0x4c
 8008a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008a5e:	6961      	ldr	r1, [r4, #20]
 8008a60:	4620      	mov	r0, r4
 8008a62:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 8008a66:	f7fe fff9 	bl	8007a5c <dir_sdi>
		if (res == FR_OK) {
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f040 8104 	bne.w	8008c7a <dir_register+0x8d6>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008a72:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008a76:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	*ptr++ = (BYTE)val; val >>= 8;
 8008a7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008a7e:	01d3      	lsls	r3, r2, #7
 8008a80:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8008a84:	185a      	adds	r2, r3, r1
 8008a86:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008a8a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 8008a8e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008a92:	fa51 f283 	uxtab	r2, r1, r3
 8008a96:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008a9a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8008a9e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008aa2:	fa51 f283 	uxtab	r2, r1, r3
 8008aa6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008aaa:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8008aae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008ab2:	fa51 f283 	uxtab	r2, r1, r3
 8008ab6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008aba:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8008abe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008ac2:	fa51 f283 	uxtab	r2, r1, r3
 8008ac6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008aca:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8008ace:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008ad2:	fa51 f283 	uxtab	r2, r1, r3
 8008ad6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008ada:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8008ade:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008ae2:	fa51 f283 	uxtab	r2, r1, r3
 8008ae6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008aea:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8008aee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008af2:	fa51 f283 	uxtab	r2, r1, r3
 8008af6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8008afa:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8008afe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008b02:	fa51 f383 	uxtab	r3, r1, r3
 8008b06:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8008b0a:	f3c3 0646 	ubfx	r6, r3, #1, #7
 8008b0e:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
 8008b12:	fa52 f686 	uxtab	r6, r2, r6
 8008b16:	b2f6      	uxtb	r6, r6
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008b18:	f04f 090f 	mov.w	r9, #15
	*ptr++ = (BYTE)val; val >>= 8;
 8008b1c:	f64f 75ff 	movw	r5, #65535	; 0xffff
				res = move_window(fs, dp->sect);
 8008b20:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b22:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8008b26:	4299      	cmp	r1, r3
 8008b28:	d004      	beq.n	8008b34 <dir_register+0x790>
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	f7fe faf2 	bl	8007114 <move_window.part.0>
				if (res != FR_OK) break;
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d18f      	bne.n	8008a54 <dir_register+0x6b0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008b34:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8008b38:	6a23      	ldr	r3, [r4, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008b3a:	1e42      	subs	r2, r0, #1
 8008b3c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8008b40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008b44:	f8d8 1010 	ldr.w	r1, [r8, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008b48:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008b4a:	f883 900b 	strb.w	r9, [r3, #11]
	dir[LDIR_Type] = 0;
 8008b4e:	731f      	strb	r7, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b50:	769f      	strb	r7, [r3, #26]
	*ptr++ = (BYTE)val;
 8008b52:	76df      	strb	r7, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008b54:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b58:	f883 c001 	strb.w	ip, [r3, #1]
 8008b5c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008b60:	f883 e002 	strb.w	lr, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008b64:	ea4f 0e42 	mov.w	lr, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008b68:	f1bc 0f00 	cmp.w	ip, #0
 8008b6c:	f040 8087 	bne.w	8008c7e <dir_register+0x8da>
	*ptr++ = (BYTE)val; val >>= 8;
 8008b70:	f8a3 5003 	strh.w	r5, [r3, #3]
 8008b74:	f8a3 5005 	strh.w	r5, [r3, #5]
 8008b78:	f8a3 5007 	strh.w	r5, [r3, #7]
 8008b7c:	f8a3 5009 	strh.w	r5, [r3, #9]
 8008b80:	81dd      	strh	r5, [r3, #14]
 8008b82:	821d      	strh	r5, [r3, #16]
 8008b84:	825d      	strh	r5, [r3, #18]
 8008b86:	829d      	strh	r5, [r3, #20]
 8008b88:	82dd      	strh	r5, [r3, #22]
 8008b8a:	831d      	strh	r5, [r3, #24]
 8008b8c:	839d      	strh	r5, [r3, #28]
 8008b8e:	83dd      	strh	r5, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008b90:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008b94:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f888 3003 	strb.w	r3, [r8, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7fe fdbf 	bl	8007720 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f47f af56 	bne.w	8008a54 <dir_register+0x6b0>
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	d1b7      	bne.n	8008b20 <dir_register+0x77c>
 8008bb0:	e476      	b.n	80084a0 <dir_register+0xfc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008bb2:	f04f 0b01 	mov.w	fp, #1
}
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	b013      	add	sp, #76	; 0x4c
 8008bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 8008bbe:	61e2      	str	r2, [r4, #28]
 8008bc0:	e6ac      	b.n	800891c <dir_register+0x578>
 8008bc2:	4683      	mov	fp, r0
 8008bc4:	e6a7      	b.n	8008916 <dir_register+0x572>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008bc6:	4698      	mov	r8, r3
 8008bc8:	e407      	b.n	80083da <dir_register+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008bca:	69a1      	ldr	r1, [r4, #24]
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7fe fe5f 	bl	8007890 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008bd2:	4682      	mov	sl, r0
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	f43f aea1 	beq.w	800891c <dir_register+0x578>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008bda:	2801      	cmp	r0, #1
 8008bdc:	f000 8127 	beq.w	8008e2e <dir_register+0xa8a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008be0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008be4:	d0e5      	beq.n	8008bb2 <dir_register+0x80e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008be6:	78eb      	ldrb	r3, [r5, #3]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f040 812a 	bne.w	8008e42 <dir_register+0xa9e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bee:	f105 0738 	add.w	r7, r5, #56	; 0x38
		*d++ = (BYTE)val;
 8008bf2:	89aa      	ldrh	r2, [r5, #12]
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f000 fe50 	bl	800989c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bfc:	69eb      	ldr	r3, [r5, #28]
	return clst * fs->csize + fs->database;
 8008bfe:	8969      	ldrh	r1, [r5, #10]
	clst -= 2;
 8008c00:	f1aa 0b02 	sub.w	fp, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c04:	3b02      	subs	r3, #2
 8008c06:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
 8008c08:	bf36      	itet	cc
 8008c0a:	6b2a      	ldrcc	r2, [r5, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c0c:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
 8008c0e:	fb0b 2201 	mlacc	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c12:	636a      	str	r2, [r5, #52]	; 0x34
 8008c14:	2900      	cmp	r1, #0
 8008c16:	f000 8112 	beq.w	8008e3e <dir_register+0xa9a>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9606      	str	r6, [sp, #24]
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	4616      	mov	r6, r2
 8008c22:	9407      	str	r4, [sp, #28]
						fs->wflag = 1;
 8008c24:	f04f 0301 	mov.w	r3, #1
 8008c28:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008c2a:	7868      	ldrb	r0, [r5, #1]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4632      	mov	r2, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7fe f9bb 	bl	8006fac <disk_write>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d1bb      	bne.n	8008bb2 <dir_register+0x80e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008c3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
			fs->wflag = 0;
 8008c3c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008c3e:	1af0      	subs	r0, r6, r3
 8008c40:	6a2b      	ldr	r3, [r5, #32]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	d20e      	bcs.n	8008c64 <dir_register+0x8c0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c46:	78ac      	ldrb	r4, [r5, #2]
 8008c48:	2c01      	cmp	r4, #1
 8008c4a:	d801      	bhi.n	8008c50 <dir_register+0x8ac>
 8008c4c:	e00a      	b.n	8008c64 <dir_register+0x8c0>
					wsect += fs->fsize;
 8008c4e:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c50:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8008c52:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c54:	4632      	mov	r2, r6
 8008c56:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c58:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7fe f9a6 	bl	8006fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c60:	2c01      	cmp	r4, #1
 8008c62:	d1f4      	bne.n	8008c4e <dir_register+0x8aa>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c64:	9a04      	ldr	r2, [sp, #16]
 8008c66:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008c68:	896c      	ldrh	r4, [r5, #10]
 8008c6a:	1c50      	adds	r0, r2, #1
 8008c6c:	1c5e      	adds	r6, r3, #1
 8008c6e:	42a0      	cmp	r0, r4
 8008c70:	636e      	str	r6, [r5, #52]	; 0x34
 8008c72:	f080 80df 	bcs.w	8008e34 <dir_register+0xa90>
 8008c76:	9004      	str	r0, [sp, #16]
 8008c78:	e7d4      	b.n	8008c24 <dir_register+0x880>
 8008c7a:	4683      	mov	fp, r0
 8008c7c:	e650      	b.n	8008920 <dir_register+0x57c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008c7e:	45ac      	cmp	ip, r5
 8008c80:	f43f af76 	beq.w	8008b70 <dir_register+0x7cc>
 8008c84:	3201      	adds	r2, #1
 8008c86:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008c8a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c8e:	70da      	strb	r2, [r3, #3]
 8008c90:	ea4f 2a12 	mov.w	sl, r2, lsr #8
	*ptr++ = (BYTE)val;
 8008c94:	f883 a004 	strb.w	sl, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	f43f af6b 	beq.w	8008b74 <dir_register+0x7d0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008c9e:	42aa      	cmp	r2, r5
 8008ca0:	f43f af68 	beq.w	8008b74 <dir_register+0x7d0>
 8008ca4:	eb01 020c 	add.w	r2, r1, ip
 8008ca8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cac:	f883 c005 	strb.w	ip, [r3, #5]
 8008cb0:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008cb4:	f883 a006 	strb.w	sl, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008cb8:	f1bc 0f00 	cmp.w	ip, #0
 8008cbc:	f43f af5c 	beq.w	8008b78 <dir_register+0x7d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008cc0:	45ac      	cmp	ip, r5
 8008cc2:	f43f af59 	beq.w	8008b78 <dir_register+0x7d4>
 8008cc6:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cca:	f883 c007 	strb.w	ip, [r3, #7]
 8008cce:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008cd2:	f883 a008 	strb.w	sl, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008cd6:	f1bc 0f00 	cmp.w	ip, #0
 8008cda:	f43f af4f 	beq.w	8008b7c <dir_register+0x7d8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008cde:	45ac      	cmp	ip, r5
 8008ce0:	f43f af4c 	beq.w	8008b7c <dir_register+0x7d8>
 8008ce4:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ce8:	f883 c009 	strb.w	ip, [r3, #9]
 8008cec:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008cf0:	f883 a00a 	strb.w	sl, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008cf4:	f1bc 0f00 	cmp.w	ip, #0
 8008cf8:	f43f af42 	beq.w	8008b80 <dir_register+0x7dc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008cfc:	45ac      	cmp	ip, r5
 8008cfe:	f43f af3f 	beq.w	8008b80 <dir_register+0x7dc>
 8008d02:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d06:	f883 c00e 	strb.w	ip, [r3, #14]
 8008d0a:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008d0e:	f883 a00f 	strb.w	sl, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d12:	f1bc 0f00 	cmp.w	ip, #0
 8008d16:	f43f af34 	beq.w	8008b82 <dir_register+0x7de>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d1a:	45ac      	cmp	ip, r5
 8008d1c:	f43f af31 	beq.w	8008b82 <dir_register+0x7de>
 8008d20:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d24:	f883 c010 	strb.w	ip, [r3, #16]
 8008d28:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008d2c:	f883 a011 	strb.w	sl, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d30:	f1bc 0f00 	cmp.w	ip, #0
 8008d34:	f43f af26 	beq.w	8008b84 <dir_register+0x7e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d38:	45ac      	cmp	ip, r5
 8008d3a:	f43f af23 	beq.w	8008b84 <dir_register+0x7e0>
 8008d3e:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d42:	f883 c012 	strb.w	ip, [r3, #18]
 8008d46:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008d4a:	f883 a013 	strb.w	sl, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d4e:	f1bc 0f00 	cmp.w	ip, #0
 8008d52:	f43f af18 	beq.w	8008b86 <dir_register+0x7e2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d56:	45ac      	cmp	ip, r5
 8008d58:	f43f af15 	beq.w	8008b86 <dir_register+0x7e2>
 8008d5c:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d60:	f883 c014 	strb.w	ip, [r3, #20]
 8008d64:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008d68:	f883 a015 	strb.w	sl, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d6c:	f1bc 0f00 	cmp.w	ip, #0
 8008d70:	f43f af0a 	beq.w	8008b88 <dir_register+0x7e4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d74:	45ac      	cmp	ip, r5
 8008d76:	f43f af07 	beq.w	8008b88 <dir_register+0x7e4>
 8008d7a:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d7e:	f883 c016 	strb.w	ip, [r3, #22]
 8008d82:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008d86:	f883 a017 	strb.w	sl, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d8a:	f1bc 0f00 	cmp.w	ip, #0
 8008d8e:	f43f aefc 	beq.w	8008b8a <dir_register+0x7e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d92:	45ac      	cmp	ip, r5
 8008d94:	f43f aef9 	beq.w	8008b8a <dir_register+0x7e6>
 8008d98:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d9c:	f883 c018 	strb.w	ip, [r3, #24]
 8008da0:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008da4:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008da8:	f1bc 0f00 	cmp.w	ip, #0
 8008dac:	f43f aeee 	beq.w	8008b8c <dir_register+0x7e8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008db0:	45ac      	cmp	ip, r5
 8008db2:	f43f aeeb 	beq.w	8008b8c <dir_register+0x7e8>
 8008db6:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dba:	f883 c01c 	strb.w	ip, [r3, #28]
 8008dbe:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	*ptr++ = (BYTE)val;
 8008dc2:	f883 a01d 	strb.w	sl, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008dc6:	f1bc 0f00 	cmp.w	ip, #0
 8008dca:	f43f aee0 	beq.w	8008b8e <dir_register+0x7ea>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008dce:	45ac      	cmp	ip, r5
 8008dd0:	f43f aedd 	beq.w	8008b8e <dir_register+0x7ea>
 8008dd4:	8ad2      	ldrh	r2, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dd6:	779a      	strb	r2, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008dd8:	f102 3cff 	add.w	ip, r2, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8008ddc:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008dde:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008de0:	fa1f fc8c 	uxth.w	ip, ip
 8008de4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8008de8:	4594      	cmp	ip, r2
 8008dea:	f63f aed1 	bhi.w	8008b90 <dir_register+0x7ec>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008dee:	4471      	add	r1, lr
 8008df0:	8b4a      	ldrh	r2, [r1, #26]
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	f47f aece 	bne.w	8008b94 <dir_register+0x7f0>
 8008df8:	e6ca      	b.n	8008b90 <dir_register+0x7ec>
			*d++ = *s++;
 8008dfa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8008e04:	705a      	strb	r2, [r3, #1]
 8008e06:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8008e0a:	709a      	strb	r2, [r3, #2]
 8008e0c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8008e10:	70da      	strb	r2, [r3, #3]
 8008e12:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008e16:	711a      	strb	r2, [r3, #4]
 8008e18:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8008e1c:	715a      	strb	r2, [r3, #5]
 8008e1e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008e22:	719a      	strb	r2, [r3, #6]
 8008e24:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8008e28:	71da      	strb	r2, [r3, #7]
 8008e2a:	f7ff bb54 	b.w	80084d6 <dir_register+0x132>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e2e:	f04f 0b02 	mov.w	fp, #2
 8008e32:	e575      	b.n	8008920 <dir_register+0x57c>
					fs->winsect -= n;							/* Restore window offset */
 8008e34:	1a9a      	subs	r2, r3, r2
 8008e36:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e3a:	69eb      	ldr	r3, [r5, #28]
 8008e3c:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8008e3e:	636a      	str	r2, [r5, #52]	; 0x34
 8008e40:	e5e4      	b.n	8008a0c <dir_register+0x668>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008e42:	f105 0738 	add.w	r7, r5, #56	; 0x38
		wsect = fs->winsect;	/* Current sector number */
 8008e46:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008e48:	7868      	ldrb	r0, [r5, #1]
 8008e4a:	9204      	str	r2, [sp, #16]
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	4639      	mov	r1, r7
 8008e50:	f7fe f8ac 	bl	8006fac <disk_write>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	f47f aeac 	bne.w	8008bb2 <dir_register+0x80e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008e5c:	9a04      	ldr	r2, [sp, #16]
			fs->wflag = 0;
 8008e5e:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e60:	1ad1      	subs	r1, r2, r3
 8008e62:	6a2b      	ldr	r3, [r5, #32]
 8008e64:	4299      	cmp	r1, r3
 8008e66:	f4bf aec4 	bcs.w	8008bf2 <dir_register+0x84e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e6a:	f895 b002 	ldrb.w	fp, [r5, #2]
 8008e6e:	f1bb 0f01 	cmp.w	fp, #1
 8008e72:	f67f aebe 	bls.w	8008bf2 <dir_register+0x84e>
 8008e76:	4639      	mov	r1, r7
 8008e78:	4627      	mov	r7, r4
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	e000      	b.n	8008e80 <dir_register+0xadc>
					wsect += fs->fsize;
 8008e7e:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e80:	7868      	ldrb	r0, [r5, #1]
 8008e82:	9104      	str	r1, [sp, #16]
					wsect += fs->fsize;
 8008e84:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e86:	4622      	mov	r2, r4
 8008e88:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e8a:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e8e:	f7fe f88d 	bl	8006fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e92:	f1bb 0f01 	cmp.w	fp, #1
 8008e96:	9904      	ldr	r1, [sp, #16]
 8008e98:	d1f1      	bne.n	8008e7e <dir_register+0xada>
 8008e9a:	463c      	mov	r4, r7
 8008e9c:	460f      	mov	r7, r1
 8008e9e:	e6a8      	b.n	8008bf2 <dir_register+0x84e>

08008ea0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8008ea8:	b181      	cbz	r1, 8008ecc <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008eaa:	f891 c000 	ldrb.w	ip, [r1]
 8008eae:	f1bc 0f1f 	cmp.w	ip, #31
 8008eb2:	d911      	bls.n	8008ed8 <f_mount+0x38>
 8008eb4:	4663      	mov	r3, ip
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	e003      	b.n	8008ec2 <f_mount+0x22>
 8008eba:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008ebe:	2b1f      	cmp	r3, #31
 8008ec0:	d90a      	bls.n	8008ed8 <f_mount+0x38>
 8008ec2:	2b3a      	cmp	r3, #58	; 0x3a
 8008ec4:	d1f9      	bne.n	8008eba <f_mount+0x1a>
			i = *tp++ - '0';
 8008ec6:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ec8:	4288      	cmp	r0, r1
 8008eca:	d002      	beq.n	8008ed2 <f_mount+0x32>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ecc:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8008ece:	b002      	add	sp, #8
 8008ed0:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ed2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008ed6:	d1f9      	bne.n	8008ecc <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ed8:	4910      	ldr	r1, [pc, #64]	; (8008f1c <f_mount+0x7c>)
 8008eda:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8008edc:	b163      	cbz	r3, 8008ef8 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ede:	4810      	ldr	r0, [pc, #64]	; (8008f20 <f_mount+0x80>)
 8008ee0:	6804      	ldr	r4, [r0, #0]
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	bf04      	itt	eq
 8008ee6:	2400      	moveq	r4, #0
 8008ee8:	6004      	streq	r4, [r0, #0]
 8008eea:	6904      	ldr	r4, [r0, #16]
 8008eec:	429c      	cmp	r4, r3
 8008eee:	bf04      	itt	eq
 8008ef0:	2400      	moveq	r4, #0
 8008ef2:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8008ef8:	9b01      	ldr	r3, [sp, #4]
 8008efa:	b15b      	cbz	r3, 8008f14 <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 8008efc:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008efe:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8008f00:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8008f02:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f04:	d1e3      	bne.n	8008ece <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f06:	4602      	mov	r2, r0
 8008f08:	a901      	add	r1, sp, #4
 8008f0a:	4668      	mov	r0, sp
 8008f0c:	f7fe f93c 	bl	8007188 <find_volume>
}
 8008f10:	b002      	add	sp, #8
 8008f12:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f14:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8008f16:	600b      	str	r3, [r1, #0]
}
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd10      	pop	{r4, pc}
 8008f1c:	20016e64 	.word	0x20016e64
 8008f20:	20016e68 	.word	0x20016e68

08008f24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	b090      	sub	sp, #64	; 0x40
 8008f2a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f000 809c 	beq.w	800906a <f_open+0x146>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f32:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008f36:	4616      	mov	r6, r2
 8008f38:	4604      	mov	r4, r0
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	a902      	add	r1, sp, #8
 8008f3e:	a801      	add	r0, sp, #4
 8008f40:	f7fe f922 	bl	8007188 <find_volume>
	if (res == FR_OK) {
 8008f44:	4605      	mov	r5, r0
 8008f46:	b128      	cbz	r0, 8008f54 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008f48:	2300      	movs	r3, #0
 8008f4a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	b010      	add	sp, #64	; 0x40
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8008f54:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f56:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8008f58:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f5a:	a803      	add	r0, sp, #12
 8008f5c:	f7fe fffe 	bl	8007f5c <follow_path>
		if (res == FR_OK) {
 8008f60:	bb00      	cbnz	r0, 8008fa4 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f62:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f2c0 8086 	blt.w	8009078 <f_open+0x154>
		if (Files[i].fs) {	/* Existing entry */
 8008f6c:	4baa      	ldr	r3, [pc, #680]	; (8009218 <f_open+0x2f4>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f6e:	9803      	ldr	r0, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 8008f70:	f8d3 8000 	ldr.w	r8, [r3]
				Files[i].clu == dp->obj.sclust &&
 8008f74:	f8dd c014 	ldr.w	ip, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 8008f78:	f8dd e020 	ldr.w	lr, [sp, #32]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f7c:	f027 0201 	bic.w	r2, r7, #1
 8008f80:	4611      	mov	r1, r2
		if (Files[i].fs) {	/* Existing entry */
 8008f82:	f1b8 0f00 	cmp.w	r8, #0
 8008f86:	f000 80fb 	beq.w	8009180 <f_open+0x25c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f8a:	4580      	cmp	r8, r0
 8008f8c:	d076      	beq.n	800907c <f_open+0x158>
		if (Files[i].fs) {	/* Existing entry */
 8008f8e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8008f92:	f1b8 0f00 	cmp.w	r8, #0
 8008f96:	f000 8088 	beq.w	80090aa <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f9a:	4580      	cmp	r8, r0
 8008f9c:	f000 8129 	beq.w	80091f2 <f_open+0x2ce>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fa0:	2512      	movs	r5, #18
 8008fa2:	e7d1      	b.n	8008f48 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fa4:	f016 0f1c 	tst.w	r6, #28
 8008fa8:	d064      	beq.n	8009074 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008faa:	2804      	cmp	r0, #4
 8008fac:	d162      	bne.n	8009074 <f_open+0x150>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fae:	4b9a      	ldr	r3, [pc, #616]	; (8009218 <f_open+0x2f4>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	b112      	cbz	r2, 8008fba <f_open+0x96>
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f2      	bne.n	8008fa0 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008fba:	a803      	add	r0, sp, #12
 8008fbc:	f7ff f9f2 	bl	80083a4 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008fc0:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d155      	bne.n	8009074 <f_open+0x150>
				dw = GET_FATTIME();
 8008fc8:	f7fd ffbc 	bl	8006f44 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8008fce:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8008fd0:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008fd4:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8008fd8:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008fda:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 8008fdc:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fde:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fe0:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8008fe4:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 8008fe6:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fe8:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fea:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008fee:	9b02      	ldr	r3, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008ff0:	2120      	movs	r1, #32
 8008ff2:	72d1      	strb	r1, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 8008ff4:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8008ff8:	2903      	cmp	r1, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ffa:	bf08      	it	eq
 8008ffc:	8a91      	ldrheq	r1, [r2, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 8008ffe:	8b56      	ldrh	r6, [r2, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009000:	bf08      	it	eq
 8009002:	ea46 4601 	orreq.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009006:	2100      	movs	r1, #0
 8009008:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800900a:	7818      	ldrb	r0, [r3, #0]
 800900c:	2803      	cmp	r0, #3
 800900e:	d100      	bne.n	8009012 <f_open+0xee>
	*ptr++ = (BYTE)val; val >>= 8;
 8009010:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8009012:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8009014:	2200      	movs	r2, #0
 8009016:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8009018:	2101      	movs	r1, #1
 800901a:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800901c:	b19e      	cbz	r6, 8009046 <f_open+0x122>
						res = remove_chain(&dj.obj, cl, 0);
 800901e:	4631      	mov	r1, r6
 8009020:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8009022:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8009026:	f7ff f903 	bl	8008230 <remove_chain>
						if (res == FR_OK) {
 800902a:	bb18      	cbnz	r0, 8009074 <f_open+0x150>
							res = move_window(fs, dw);
 800902c:	9b02      	ldr	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800902e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009030:	4590      	cmp	r8, r2
 8009032:	f000 80eb 	beq.w	800920c <f_open+0x2e8>
 8009036:	4618      	mov	r0, r3
 8009038:	4641      	mov	r1, r8
 800903a:	f7fe f86b 	bl	8007114 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800903e:	9b02      	ldr	r3, [sp, #8]
 8009040:	3e01      	subs	r6, #1
 8009042:	615e      	str	r6, [r3, #20]
		if (res == FR_OK) {
 8009044:	b9b0      	cbnz	r0, 8009074 <f_open+0x150>
				mode |= FA_MODIFIED;
 8009046:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800904a:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800904e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009050:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009052:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 8009054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009056:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009058:	bf18      	it	ne
 800905a:	2101      	movne	r1, #1
 800905c:	a803      	add	r0, sp, #12
 800905e:	f7fd ffbf 	bl	8006fe0 <inc_lock>
 8009062:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009064:	bb68      	cbnz	r0, 80090c2 <f_open+0x19e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009066:	2502      	movs	r5, #2
 8009068:	e76e      	b.n	8008f48 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800906a:	2509      	movs	r5, #9
}
 800906c:	4628      	mov	r0, r5
 800906e:	b010      	add	sp, #64	; 0x40
 8009070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009074:	4605      	mov	r5, r0
 8009076:	e767      	b.n	8008f48 <f_open+0x24>
				res = FR_INVALID_NAME;
 8009078:	2506      	movs	r5, #6
 800907a:	e765      	b.n	8008f48 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800907c:	6858      	ldr	r0, [r3, #4]
 800907e:	4560      	cmp	r0, ip
 8009080:	f000 80bc 	beq.w	80091fc <f_open+0x2d8>
		if (Files[i].fs) {	/* Existing entry */
 8009084:	6918      	ldr	r0, [r3, #16]
 8009086:	b180      	cbz	r0, 80090aa <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009088:	4540      	cmp	r0, r8
 800908a:	d189      	bne.n	8008fa0 <f_open+0x7c>
 800908c:	6958      	ldr	r0, [r3, #20]
 800908e:	4584      	cmp	ip, r0
 8009090:	d186      	bne.n	8008fa0 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8009092:	6998      	ldr	r0, [r3, #24]
 8009094:	4570      	cmp	r0, lr
 8009096:	d183      	bne.n	8008fa0 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009098:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800909a:	2a00      	cmp	r2, #0
 800909c:	d167      	bne.n	800916e <f_open+0x24a>
 800909e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80090a2:	899b      	ldrh	r3, [r3, #12]
 80090a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a8:	d061      	beq.n	800916e <f_open+0x24a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80090aa:	f016 0f1c 	tst.w	r6, #28
 80090ae:	d04c      	beq.n	800914a <f_open+0x226>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80090b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80090b4:	f013 0f11 	tst.w	r3, #17
 80090b8:	d160      	bne.n	800917c <f_open+0x258>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80090ba:	0773      	lsls	r3, r6, #29
 80090bc:	d559      	bpl.n	8009172 <f_open+0x24e>
 80090be:	2508      	movs	r5, #8
 80090c0:	e742      	b.n	8008f48 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80090c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80090c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 80090c8:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 80090cc:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 80090ce:	2a03      	cmp	r2, #3
 80090d0:	d102      	bne.n	80090d8 <f_open+0x1b4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090d2:	8a9a      	ldrh	r2, [r3, #20]
 80090d4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80090d8:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 80090da:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
 80090de:	f8b9 3006 	ldrh.w	r3, [r9, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80090e2:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090e6:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80090e8:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 80090ec:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80090ee:	f8c4 9000 	str.w	r9, [r4]
			fp->obj.id = fs->id;
 80090f2:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090f4:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 80090f6:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80090f8:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80090fa:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 80090fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009100:	4650      	mov	r0, sl
 8009102:	f000 fbcb 	bl	800989c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009106:	06bf      	lsls	r7, r7, #26
 8009108:	f57f af20 	bpl.w	8008f4c <f_open+0x28>
 800910c:	f1b8 0f00 	cmp.w	r8, #0
 8009110:	f43f af1c 	beq.w	8008f4c <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009114:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009118:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800911c:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009120:	fb03 f707 	mul.w	r7, r3, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009124:	4547      	cmp	r7, r8
 8009126:	d306      	bcc.n	8009136 <f_open+0x212>
 8009128:	e03e      	b.n	80091a8 <f_open+0x284>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800912a:	1c70      	adds	r0, r6, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800912c:	eba8 0807 	sub.w	r8, r8, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009130:	d01b      	beq.n	800916a <f_open+0x246>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009132:	4547      	cmp	r7, r8
 8009134:	d234      	bcs.n	80091a0 <f_open+0x27c>
					clst = get_fat(&fp->obj, clst);
 8009136:	4631      	mov	r1, r6
 8009138:	6820      	ldr	r0, [r4, #0]
 800913a:	f7fe fa77 	bl	800762c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800913e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8009140:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8009142:	d8f2      	bhi.n	800912a <f_open+0x206>
 8009144:	2502      	movs	r5, #2
				fp->clust = clst;
 8009146:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009148:	e6fe      	b.n	8008f48 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800914a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800914e:	06d9      	lsls	r1, r3, #27
 8009150:	d424      	bmi.n	800919c <f_open+0x278>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009152:	07b1      	lsls	r1, r6, #30
 8009154:	d501      	bpl.n	800915a <f_open+0x236>
 8009156:	07db      	lsls	r3, r3, #31
 8009158:	d410      	bmi.n	800917c <f_open+0x258>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800915a:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800915e:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009160:	2e00      	cmp	r6, #0
 8009162:	f47f af70 	bne.w	8009046 <f_open+0x122>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009166:	4611      	mov	r1, r2
 8009168:	e771      	b.n	800904e <f_open+0x12a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800916a:	2501      	movs	r5, #1
 800916c:	e7eb      	b.n	8009146 <f_open+0x222>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800916e:	2510      	movs	r5, #16
 8009170:	e6ea      	b.n	8008f48 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009172:	0730      	lsls	r0, r6, #28
 8009174:	f53f af28 	bmi.w	8008fc8 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009178:	9b02      	ldr	r3, [sp, #8]
 800917a:	e768      	b.n	800904e <f_open+0x12a>
						res = FR_DENIED;
 800917c:	2507      	movs	r5, #7
 800917e:	e6e3      	b.n	8008f48 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8009180:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009184:	f1b8 0f00 	cmp.w	r8, #0
 8009188:	d08f      	beq.n	80090aa <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800918a:	4540      	cmp	r0, r8
 800918c:	d18d      	bne.n	80090aa <f_open+0x186>
 800918e:	6958      	ldr	r0, [r3, #20]
 8009190:	4560      	cmp	r0, ip
 8009192:	d18a      	bne.n	80090aa <f_open+0x186>
				Files[i].clu == dp->obj.sclust &&
 8009194:	6998      	ldr	r0, [r3, #24]
 8009196:	4570      	cmp	r0, lr
 8009198:	d187      	bne.n	80090aa <f_open+0x186>
 800919a:	e77d      	b.n	8009098 <f_open+0x174>
					res = FR_NO_FILE;
 800919c:	2504      	movs	r5, #4
 800919e:	e6d3      	b.n	8008f48 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80091a0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80091a4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80091a8:	fbb8 f2f3 	udiv	r2, r8, r3
 80091ac:	fb03 8312 	mls	r3, r3, r2, r8
				fp->clust = clst;
 80091b0:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f43f aeca 	beq.w	8008f4c <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
	clst -= 2;
 80091bc:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091be:	3b02      	subs	r3, #2
 80091c0:	429e      	cmp	r6, r3
 80091c2:	f4bf af50 	bcs.w	8009066 <f_open+0x142>
	return clst * fs->csize + fs->database;
 80091c6:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80091ca:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80091ce:	fb06 3301 	mla	r3, r6, r1, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f43f af47 	beq.w	8009066 <f_open+0x142>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80091d8:	441a      	add	r2, r3
 80091da:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80091dc:	f899 0001 	ldrb.w	r0, [r9, #1]
 80091e0:	4651      	mov	r1, sl
 80091e2:	2301      	movs	r3, #1
 80091e4:	f7fd fed4 	bl	8006f90 <disk_read>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	f43f aeaf 	beq.w	8008f4c <f_open+0x28>
 80091ee:	2501      	movs	r5, #1
 80091f0:	e6aa      	b.n	8008f48 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091f2:	6958      	ldr	r0, [r3, #20]
 80091f4:	4560      	cmp	r0, ip
 80091f6:	f47f aed3 	bne.w	8008fa0 <f_open+0x7c>
 80091fa:	e74a      	b.n	8009092 <f_open+0x16e>
				Files[i].clu == dp->obj.sclust &&
 80091fc:	6898      	ldr	r0, [r3, #8]
 80091fe:	4570      	cmp	r0, lr
 8009200:	d007      	beq.n	8009212 <f_open+0x2ee>
		if (Files[i].fs) {	/* Existing entry */
 8009202:	6918      	ldr	r0, [r3, #16]
 8009204:	2800      	cmp	r0, #0
 8009206:	f47f aec8 	bne.w	8008f9a <f_open+0x76>
 800920a:	e74e      	b.n	80090aa <f_open+0x186>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800920c:	3e01      	subs	r6, #1
 800920e:	615e      	str	r6, [r3, #20]
		if (res == FR_OK) {
 8009210:	e719      	b.n	8009046 <f_open+0x122>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009212:	4628      	mov	r0, r5
 8009214:	e741      	b.n	800909a <f_open+0x176>
 8009216:	bf00      	nop
 8009218:	20016e68 	.word	0x20016e68

0800921c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009222:	2300      	movs	r3, #0
{
 8009224:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 8009226:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009228:	b150      	cbz	r0, 8009240 <f_write+0x24>
 800922a:	6803      	ldr	r3, [r0, #0]
 800922c:	4604      	mov	r4, r0
 800922e:	b13b      	cbz	r3, 8009240 <f_write+0x24>
 8009230:	4616      	mov	r6, r2
 8009232:	781a      	ldrb	r2, [r3, #0]
 8009234:	b122      	cbz	r2, 8009240 <f_write+0x24>
 8009236:	88da      	ldrh	r2, [r3, #6]
 8009238:	460d      	mov	r5, r1
 800923a:	8881      	ldrh	r1, [r0, #4]
 800923c:	4291      	cmp	r1, r2
 800923e:	d005      	beq.n	800924c <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8009240:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8009244:	4640      	mov	r0, r8
 8009246:	b003      	add	sp, #12
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800924c:	7858      	ldrb	r0, [r3, #1]
 800924e:	f7fd fe85 	bl	8006f5c <disk_status>
 8009252:	07c1      	lsls	r1, r0, #31
 8009254:	d4f4      	bmi.n	8009240 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009256:	f894 8015 	ldrb.w	r8, [r4, #21]
 800925a:	f1b8 0f00 	cmp.w	r8, #0
 800925e:	d1f1      	bne.n	8009244 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009260:	7d23      	ldrb	r3, [r4, #20]
 8009262:	079a      	lsls	r2, r3, #30
 8009264:	f140 8138 	bpl.w	80094d8 <f_write+0x2bc>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009268:	69a1      	ldr	r1, [r4, #24]
 800926a:	42f1      	cmn	r1, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800926c:	bf28      	it	cs
 800926e:	43ce      	mvncs	r6, r1
	for ( ;  btw;							/* Repeat until all data written */
 8009270:	2e00      	cmp	r6, #0
 8009272:	f000 80a8 	beq.w	80093c6 <f_write+0x1aa>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009276:	46a3      	mov	fp, r4
 8009278:	f85b 9b30 	ldr.w	r9, [fp], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800927c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009280:	fbb1 f0f3 	udiv	r0, r1, r3
 8009284:	fb03 1210 	mls	r2, r3, r0, r1
 8009288:	2a00      	cmp	r2, #0
 800928a:	f040 80ad 	bne.w	80093e8 <f_write+0x1cc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800928e:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 8009292:	f10a 3aff 	add.w	sl, sl, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8009296:	ea1a 0a00 	ands.w	sl, sl, r0
 800929a:	d110      	bne.n	80092be <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800929c:	2900      	cmp	r1, #0
 800929e:	f040 80e6 	bne.w	800946e <f_write+0x252>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80092a2:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f000 812b 	beq.w	8009500 <f_write+0x2e4>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80092aa:	2801      	cmp	r0, #1
 80092ac:	f000 80d7 	beq.w	800945e <f_write+0x242>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	f000 8109 	beq.w	80094c8 <f_write+0x2ac>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80092b6:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80092b8:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80092ba:	b903      	cbnz	r3, 80092be <f_write+0xa2>
 80092bc:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80092be:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f2c0 80f3 	blt.w	80094ae <f_write+0x292>
	clst -= 2;
 80092c8:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092ca:	f8d9 301c 	ldr.w	r3, [r9, #28]
	clst -= 2;
 80092ce:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092d0:	3b02      	subs	r3, #2
 80092d2:	429a      	cmp	r2, r3
 80092d4:	f080 80c3 	bcs.w	800945e <f_write+0x242>
	return clst * fs->csize + fs->database;
 80092d8:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80092dc:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80092e0:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	f000 80ba 	beq.w	800945e <f_write+0x242>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80092ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80092ee:	42b3      	cmp	r3, r6
			sect += csect;
 80092f0:	4452      	add	r2, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 80092f2:	d86c      	bhi.n	80093ce <f_write+0x1b2>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80092f4:	fbb6 f3f3 	udiv	r3, r6, r3
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092f8:	eb0a 0003 	add.w	r0, sl, r3
 80092fc:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 80092fe:	bf88      	it	hi
 8009300:	eba1 030a 	subhi.w	r3, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009304:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009308:	4629      	mov	r1, r5
 800930a:	e9cd 2300 	strd	r2, r3, [sp]
 800930e:	f7fd fe4d 	bl	8006fac <disk_write>
 8009312:	2800      	cmp	r0, #0
 8009314:	f040 80d8 	bne.w	80094c8 <f_write+0x2ac>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009318:	6a21      	ldr	r1, [r4, #32]
 800931a:	9a00      	ldr	r2, [sp, #0]
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	1a8a      	subs	r2, r1, r2
 8009320:	429a      	cmp	r2, r3
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009322:	f8b9 100c 	ldrh.w	r1, [r9, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009326:	d23b      	bcs.n	80093a0 <f_write+0x184>
	if (cnt) {
 8009328:	b3b1      	cbz	r1, 8009398 <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800932a:	fb01 f202 	mul.w	r2, r1, r2
 800932e:	1c50      	adds	r0, r2, #1
 8009330:	4428      	add	r0, r5
 8009332:	ebab 0c00 	sub.w	ip, fp, r0
 8009336:	f1bc 0f02 	cmp.w	ip, #2
 800933a:	f101 30ff 	add.w	r0, r1, #4294967295
 800933e:	442a      	add	r2, r5
 8009340:	9000      	str	r0, [sp, #0]
 8009342:	f240 80f3 	bls.w	800952c <f_write+0x310>
 8009346:	2807      	cmp	r0, #7
 8009348:	f240 80f0 	bls.w	800952c <f_write+0x310>
 800934c:	ea4f 0a91 	mov.w	sl, r1, lsr #2
 8009350:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
 8009354:	4658      	mov	r0, fp
 8009356:	4694      	mov	ip, r2
			*d++ = *s++;
 8009358:	f85c eb04 	ldr.w	lr, [ip], #4
 800935c:	f840 eb04 	str.w	lr, [r0], #4
		} while (--cnt);
 8009360:	4582      	cmp	sl, r0
 8009362:	d1f9      	bne.n	8009358 <f_write+0x13c>
 8009364:	f021 0003 	bic.w	r0, r1, #3
 8009368:	4281      	cmp	r1, r0
 800936a:	eb0b 0c00 	add.w	ip, fp, r0
 800936e:	eb02 0e00 	add.w	lr, r2, r0
 8009372:	d00f      	beq.n	8009394 <f_write+0x178>
			*d++ = *s++;
 8009374:	5c12      	ldrb	r2, [r2, r0]
 8009376:	f80b 2000 	strb.w	r2, [fp, r0]
		} while (--cnt);
 800937a:	9a00      	ldr	r2, [sp, #0]
 800937c:	1a10      	subs	r0, r2, r0
 800937e:	d009      	beq.n	8009394 <f_write+0x178>
			*d++ = *s++;
 8009380:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8009384:	f88c 2001 	strb.w	r2, [ip, #1]
		} while (--cnt);
 8009388:	2801      	cmp	r0, #1
 800938a:	d003      	beq.n	8009394 <f_write+0x178>
			*d++ = *s++;
 800938c:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8009390:	f88c 2002 	strb.w	r2, [ip, #2]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009394:	f8b9 100c 	ldrh.w	r1, [r9, #12]
					fp->flag &= (BYTE)~FA_DIRTY;
 8009398:	7d22      	ldrb	r2, [r4, #20]
 800939a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800939e:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80093a4:	69a1      	ldr	r1, [r4, #24]
 80093a6:	18e8      	adds	r0, r5, r3
 80093a8:	68e2      	ldr	r2, [r4, #12]
 80093aa:	4419      	add	r1, r3
 80093ac:	428a      	cmp	r2, r1
 80093ae:	bf38      	it	cc
 80093b0:	460a      	movcc	r2, r1
 80093b2:	60e2      	str	r2, [r4, #12]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	61a1      	str	r1, [r4, #24]
 80093b8:	441a      	add	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 80093ba:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80093bc:	4605      	mov	r5, r0
 80093be:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80093c0:	f47f af5c 	bne.w	800927c <f_write+0x60>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80093c4:	7d23      	ldrb	r3, [r4, #20]
 80093c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ca:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80093cc:	e73a      	b.n	8009244 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80093ce:	6a21      	ldr	r1, [r4, #32]
 80093d0:	4291      	cmp	r1, r2
				fp->fptr < fp->obj.objsize &&
 80093d2:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80093d4:	d003      	beq.n	80093de <f_write+0x1c2>
 80093d6:	68e0      	ldr	r0, [r4, #12]
 80093d8:	4281      	cmp	r1, r0
 80093da:	f0c0 8099 	bcc.w	8009510 <f_write+0x2f4>
			fp->sect = sect;
 80093de:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093e0:	fbb1 f2f3 	udiv	r2, r1, r3
 80093e4:	fb03 1212 	mls	r2, r3, r2, r1
 80093e8:	1a9b      	subs	r3, r3, r2
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80093ea:	42b3      	cmp	r3, r6
 80093ec:	bf28      	it	cs
 80093ee:	4633      	movcs	r3, r6
	if (cnt) {
 80093f0:	b92b      	cbnz	r3, 80093fe <f_write+0x1e2>
 80093f2:	4628      	mov	r0, r5
		fp->flag |= FA_DIRTY;
 80093f4:	7d22      	ldrb	r2, [r4, #20]
 80093f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093fa:	7522      	strb	r2, [r4, #20]
 80093fc:	e7d4      	b.n	80093a8 <f_write+0x18c>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80093fe:	eb0b 0102 	add.w	r1, fp, r2
 8009402:	1c6a      	adds	r2, r5, #1
 8009404:	1a8a      	subs	r2, r1, r2
 8009406:	2a02      	cmp	r2, #2
 8009408:	f103 3aff 	add.w	sl, r3, #4294967295
 800940c:	d967      	bls.n	80094de <f_write+0x2c2>
 800940e:	f1ba 0f07 	cmp.w	sl, #7
 8009412:	d964      	bls.n	80094de <f_write+0x2c2>
 8009414:	f023 0e03 	bic.w	lr, r3, #3
 8009418:	448e      	add	lr, r1
 800941a:	460a      	mov	r2, r1
 800941c:	4628      	mov	r0, r5
			*d++ = *s++;
 800941e:	f850 cb04 	ldr.w	ip, [r0], #4
 8009422:	f842 cb04 	str.w	ip, [r2], #4
		} while (--cnt);
 8009426:	4572      	cmp	r2, lr
 8009428:	d1f9      	bne.n	800941e <f_write+0x202>
 800942a:	f023 0203 	bic.w	r2, r3, #3
 800942e:	4293      	cmp	r3, r2
 8009430:	eb01 0c02 	add.w	ip, r1, r2
 8009434:	eb05 0002 	add.w	r0, r5, r2
 8009438:	d00f      	beq.n	800945a <f_write+0x23e>
			*d++ = *s++;
 800943a:	f815 e002 	ldrb.w	lr, [r5, r2]
 800943e:	f801 e002 	strb.w	lr, [r1, r2]
		} while (--cnt);
 8009442:	ebba 0202 	subs.w	r2, sl, r2
 8009446:	d007      	beq.n	8009458 <f_write+0x23c>
			*d++ = *s++;
 8009448:	7841      	ldrb	r1, [r0, #1]
 800944a:	f88c 1001 	strb.w	r1, [ip, #1]
		} while (--cnt);
 800944e:	2a01      	cmp	r2, #1
			*d++ = *s++;
 8009450:	bf1c      	itt	ne
 8009452:	7882      	ldrbne	r2, [r0, #2]
 8009454:	f88c 2002 	strbne.w	r2, [ip, #2]
		} while (--cnt);
 8009458:	18e8      	adds	r0, r5, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800945a:	69a1      	ldr	r1, [r4, #24]
 800945c:	e7ca      	b.n	80093f4 <f_write+0x1d8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800945e:	f04f 0802 	mov.w	r8, #2
}
 8009462:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009464:	f884 8015 	strb.w	r8, [r4, #21]
}
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800946e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009470:	2800      	cmp	r0, #0
 8009472:	d03d      	beq.n	80094f0 <f_write+0x2d4>
	FATFS *fs = fp->obj.fs;
 8009474:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009478:	6842      	ldr	r2, [r0, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800947a:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800947e:	fbb1 f1f3 	udiv	r1, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009482:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009484:	f8bc 300a 	ldrh.w	r3, [ip, #10]
 8009488:	fbb1 f1f3 	udiv	r1, r1, r3
		if (ncl == 0) return 0;	/* End of table? (error) */
 800948c:	2a00      	cmp	r2, #0
 800948e:	d099      	beq.n	80093c4 <f_write+0x1a8>
 8009490:	4603      	mov	r3, r0
 8009492:	e004      	b.n	800949e <f_write+0x282>
		cl -= ncl; tbl++;		/* Next fragment */
 8009494:	1a89      	subs	r1, r1, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009496:	f853 2f08 	ldr.w	r2, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800949a:	2a00      	cmp	r2, #0
 800949c:	d092      	beq.n	80093c4 <f_write+0x1a8>
		if (cl < ncl) break;	/* In this fragment? */
 800949e:	4291      	cmp	r1, r2
 80094a0:	d2f8      	bcs.n	8009494 <f_write+0x278>
	return cl + *tbl;	/* Return the cluster number */
 80094a2:	6858      	ldr	r0, [r3, #4]
 80094a4:	4408      	add	r0, r1
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f47f aeff 	bne.w	80092aa <f_write+0x8e>
 80094ac:	e78a      	b.n	80093c4 <f_write+0x1a8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094ae:	6a22      	ldr	r2, [r4, #32]
 80094b0:	f899 0001 	ldrb.w	r0, [r9, #1]
 80094b4:	2301      	movs	r3, #1
 80094b6:	4659      	mov	r1, fp
 80094b8:	f7fd fd78 	bl	8006fac <disk_write>
 80094bc:	b920      	cbnz	r0, 80094c8 <f_write+0x2ac>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094be:	7d23      	ldrb	r3, [r4, #20]
 80094c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c4:	7523      	strb	r3, [r4, #20]
 80094c6:	e6ff      	b.n	80092c8 <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094c8:	f04f 0801 	mov.w	r8, #1
}
 80094cc:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094ce:	f884 8015 	strb.w	r8, [r4, #21]
}
 80094d2:	b003      	add	sp, #12
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80094d8:	f04f 0807 	mov.w	r8, #7
 80094dc:	e6b2      	b.n	8009244 <f_write+0x28>
 80094de:	1e4a      	subs	r2, r1, #1
 80094e0:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 80094e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80094e6:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80094ea:	42a8      	cmp	r0, r5
 80094ec:	d1f9      	bne.n	80094e2 <f_write+0x2c6>
 80094ee:	e7b4      	b.n	800945a <f_write+0x23e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80094f0:	69e1      	ldr	r1, [r4, #28]
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7fe f9cc 	bl	8007890 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f47f aed6 	bne.w	80092aa <f_write+0x8e>
 80094fe:	e761      	b.n	80093c4 <f_write+0x1a8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009500:	4651      	mov	r1, sl
 8009502:	4620      	mov	r0, r4
 8009504:	f7fe f9c4 	bl	8007890 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009508:	2800      	cmp	r0, #0
 800950a:	f47f aece 	bne.w	80092aa <f_write+0x8e>
 800950e:	e759      	b.n	80093c4 <f_write+0x1a8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009510:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009514:	9200      	str	r2, [sp, #0]
 8009516:	2301      	movs	r3, #1
 8009518:	4659      	mov	r1, fp
 800951a:	f7fd fd39 	bl	8006f90 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800951e:	2800      	cmp	r0, #0
 8009520:	d1d2      	bne.n	80094c8 <f_write+0x2ac>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009522:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009526:	69a1      	ldr	r1, [r4, #24]
 8009528:	9a00      	ldr	r2, [sp, #0]
 800952a:	e758      	b.n	80093de <f_write+0x1c2>
 800952c:	4411      	add	r1, r2
 800952e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
			*d++ = *s++;
 8009532:	f812 cb01 	ldrb.w	ip, [r2], #1
 8009536:	f800 cf01 	strb.w	ip, [r0, #1]!
		} while (--cnt);
 800953a:	4291      	cmp	r1, r2
 800953c:	d1f9      	bne.n	8009532 <f_write+0x316>
 800953e:	e729      	b.n	8009394 <f_write+0x178>

08009540 <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009540:	2800      	cmp	r0, #0
 8009542:	d050      	beq.n	80095e6 <f_sync+0xa6>
 8009544:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800954a:	b12b      	cbz	r3, 8009558 <f_sync+0x18>
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	b11a      	cbz	r2, 8009558 <f_sync+0x18>
 8009550:	8881      	ldrh	r1, [r0, #4]
 8009552:	88da      	ldrh	r2, [r3, #6]
 8009554:	4291      	cmp	r1, r2
 8009556:	d001      	beq.n	800955c <f_sync+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8009558:	2009      	movs	r0, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800955a:	bd70      	pop	{r4, r5, r6, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800955c:	7858      	ldrb	r0, [r3, #1]
 800955e:	f7fd fcfd 	bl	8006f5c <disk_status>
 8009562:	07c2      	lsls	r2, r0, #31
 8009564:	d4f8      	bmi.n	8009558 <f_sync+0x18>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009566:	7d23      	ldrb	r3, [r4, #20]
 8009568:	f013 0040 	ands.w	r0, r3, #64	; 0x40
 800956c:	d0f5      	beq.n	800955a <f_sync+0x1a>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800956e:	061b      	lsls	r3, r3, #24
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009570:	6826      	ldr	r6, [r4, #0]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009572:	d43a      	bmi.n	80095ea <f_sync+0xaa>
			tm = GET_FATTIME();				/* Modified time */
 8009574:	f7fd fce6 	bl	8006f44 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8009578:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800957a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800957c:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 800957e:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009580:	d004      	beq.n	800958c <f_sync+0x4c>
 8009582:	4630      	mov	r0, r6
 8009584:	f7fd fdc6 	bl	8007114 <move_window.part.0>
				if (res == FR_OK) {
 8009588:	2800      	cmp	r0, #0
 800958a:	d1e6      	bne.n	800955a <f_sync+0x1a>
					dir = fp->dir_ptr;
 800958c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800958e:	7ada      	ldrb	r2, [r3, #11]
 8009590:	f042 0220 	orr.w	r2, r2, #32
 8009594:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009596:	68a2      	ldr	r2, [r4, #8]
 8009598:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800959a:	769a      	strb	r2, [r3, #26]
 800959c:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 80095a0:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 80095a2:	7809      	ldrb	r1, [r1, #0]
 80095a4:	2903      	cmp	r1, #3
 80095a6:	d103      	bne.n	80095b0 <f_sync+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80095a8:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80095aa:	751a      	strb	r2, [r3, #20]
 80095ac:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80095ae:	755a      	strb	r2, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80095b0:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80095b2:	771a      	strb	r2, [r3, #28]
 80095b4:	0a11      	lsrs	r1, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80095b6:	7759      	strb	r1, [r3, #29]
 80095b8:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80095ba:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 80095bc:	77da      	strb	r2, [r3, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 80095be:	0a2a      	lsrs	r2, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80095c0:	75da      	strb	r2, [r3, #23]
 80095c2:	0c2a      	lsrs	r2, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80095c4:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80095c6:	761a      	strb	r2, [r3, #24]
 80095c8:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80095ca:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80095cc:	7799      	strb	r1, [r3, #30]
	*ptr++ = (BYTE)val;
 80095ce:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80095d0:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 80095d2:	2301      	movs	r3, #1
 80095d4:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80095d6:	4630      	mov	r0, r6
 80095d8:	f7fe f8ea 	bl	80077b0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80095dc:	7d23      	ldrb	r3, [r4, #20]
 80095de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e2:	7523      	strb	r3, [r4, #20]
}
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80095e6:	2009      	movs	r0, #9
}
 80095e8:	4770      	bx	lr
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80095ea:	6a22      	ldr	r2, [r4, #32]
 80095ec:	7870      	ldrb	r0, [r6, #1]
 80095ee:	2301      	movs	r3, #1
 80095f0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80095f4:	f7fd fcda 	bl	8006fac <disk_write>
 80095f8:	b920      	cbnz	r0, 8009604 <f_sync+0xc4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095fa:	7d23      	ldrb	r3, [r4, #20]
 80095fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009600:	7523      	strb	r3, [r4, #20]
 8009602:	e7b7      	b.n	8009574 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009604:	2001      	movs	r0, #1
}
 8009606:	bd70      	pop	{r4, r5, r6, pc}

08009608 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009608:	b158      	cbz	r0, 8009622 <f_close+0x1a>
 800960a:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009610:	b12b      	cbz	r3, 800961e <f_close+0x16>
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	b11a      	cbz	r2, 800961e <f_close+0x16>
 8009616:	8881      	ldrh	r1, [r0, #4]
 8009618:	88da      	ldrh	r2, [r3, #6]
 800961a:	4291      	cmp	r1, r2
 800961c:	d003      	beq.n	8009626 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 800961e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009620:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8009622:	2009      	movs	r0, #9
}
 8009624:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009626:	7858      	ldrb	r0, [r3, #1]
 8009628:	f7fd fc98 	bl	8006f5c <disk_status>
 800962c:	07c1      	lsls	r1, r0, #31
 800962e:	d4f6      	bmi.n	800961e <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009630:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009632:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009634:	065a      	lsls	r2, r3, #25
 8009636:	d53c      	bpl.n	80096b2 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009638:	061b      	lsls	r3, r3, #24
 800963a:	d45d      	bmi.n	80096f8 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 800963c:	f7fd fc82 	bl	8006f44 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8009640:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009642:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009644:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 8009646:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009648:	d004      	beq.n	8009654 <f_close+0x4c>
 800964a:	4628      	mov	r0, r5
 800964c:	f7fd fd62 	bl	8007114 <move_window.part.0>
				if (res == FR_OK) {
 8009650:	2800      	cmp	r0, #0
 8009652:	d1e5      	bne.n	8009620 <f_close+0x18>
					dir = fp->dir_ptr;
 8009654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009656:	7ad3      	ldrb	r3, [r2, #11]
 8009658:	f043 0320 	orr.w	r3, r3, #32
 800965c:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800965e:	68a3      	ldr	r3, [r4, #8]
 8009660:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009662:	7693      	strb	r3, [r2, #26]
 8009664:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 8009668:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 800966a:	7809      	ldrb	r1, [r1, #0]
 800966c:	2903      	cmp	r1, #3
 800966e:	d103      	bne.n	8009678 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009670:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009672:	7513      	strb	r3, [r2, #20]
 8009674:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8009676:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009678:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800967a:	7713      	strb	r3, [r2, #28]
 800967c:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800967e:	7751      	strb	r1, [r2, #29]
 8009680:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009682:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
 8009684:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8009686:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009688:	75d3      	strb	r3, [r2, #23]
 800968a:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800968c:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800968e:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8009690:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8009692:	8253      	strh	r3, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8009694:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 8009696:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8009698:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 800969a:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 800969c:	4628      	mov	r0, r5
					fs->wflag = 1;
 800969e:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096a0:	f7fe f886 	bl	80077b0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096a4:	7d23      	ldrb	r3, [r4, #20]
 80096a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096aa:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1b7      	bne.n	8009620 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	d0b3      	beq.n	800961e <f_close+0x16>
 80096b6:	782b      	ldrb	r3, [r5, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0b0      	beq.n	800961e <f_close+0x16>
 80096bc:	88a2      	ldrh	r2, [r4, #4]
 80096be:	88eb      	ldrh	r3, [r5, #6]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d1ac      	bne.n	800961e <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80096c4:	7868      	ldrb	r0, [r5, #1]
 80096c6:	f7fd fc49 	bl	8006f5c <disk_status>
 80096ca:	f010 0001 	ands.w	r0, r0, #1
 80096ce:	d1a6      	bne.n	800961e <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d81c      	bhi.n	8009712 <f_close+0x10a>
		n = Files[i].ctr;
 80096d8:	4912      	ldr	r1, [pc, #72]	; (8009724 <f_close+0x11c>)
 80096da:	011d      	lsls	r5, r3, #4
 80096dc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 80096e0:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80096e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80096e6:	d016      	beq.n	8009716 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 80096e8:	b1b2      	cbz	r2, 8009718 <f_close+0x110>
 80096ea:	3a01      	subs	r2, #1
 80096ec:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80096ee:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80096f0:	b192      	cbz	r2, 8009718 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 80096f2:	2300      	movs	r3, #0
 80096f4:	6023      	str	r3, [r4, #0]
}
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80096f8:	6a22      	ldr	r2, [r4, #32]
 80096fa:	7868      	ldrb	r0, [r5, #1]
 80096fc:	2301      	movs	r3, #1
 80096fe:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009702:	f7fd fc53 	bl	8006fac <disk_write>
 8009706:	b950      	cbnz	r0, 800971e <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009708:	7d23      	ldrb	r3, [r4, #20]
 800970a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970e:	7523      	strb	r3, [r4, #20]
 8009710:	e794      	b.n	800963c <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009712:	2002      	movs	r0, #2
}
 8009714:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8009716:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009718:	2300      	movs	r3, #0
 800971a:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 800971c:	e7e9      	b.n	80096f2 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800971e:	2001      	movs	r0, #1
}
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	bf00      	nop
 8009724:	20016e68 	.word	0x20016e68

08009728 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009728:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800972a:	4b10      	ldr	r3, [pc, #64]	; (800976c <FATFS_LinkDriver+0x44>)
 800972c:	7a5c      	ldrb	r4, [r3, #9]
 800972e:	b9cc      	cbnz	r4, 8009764 <FATFS_LinkDriver+0x3c>
 8009730:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8009732:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8009736:	7a5c      	ldrb	r4, [r3, #9]
 8009738:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800973a:	7a5c      	ldrb	r4, [r3, #9]
 800973c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009740:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8009742:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8009744:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8009746:	441c      	add	r4, r3
 8009748:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800974a:	1c54      	adds	r4, r2, #1
 800974c:	b2e4      	uxtb	r4, r4
 800974e:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8009750:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009752:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8009754:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 8009756:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 8009758:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800975a:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800975e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009760:	70c8      	strb	r0, [r1, #3]
}
 8009762:	4770      	bx	lr
  uint8_t ret = 1;
 8009764:	2001      	movs	r0, #1
}
 8009766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	2001708c 	.word	0x2001708c

08009770 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009770:	287f      	cmp	r0, #127	; 0x7f
 8009772:	d913      	bls.n	800979c <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009774:	b979      	cbnz	r1, 8009796 <ff_convert+0x26>
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <ff_convert+0x38>)
 8009778:	e001      	b.n	800977e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800977a:	2980      	cmp	r1, #128	; 0x80
 800977c:	d00d      	beq.n	800979a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800977e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009782:	4282      	cmp	r2, r0
 8009784:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8009788:	f101 0101 	add.w	r1, r1, #1
				if (chr == Tbl[c]) break;
 800978c:	d1f5      	bne.n	800977a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800978e:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8009792:	b280      	uxth	r0, r0
 8009794:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009796:	28ff      	cmp	r0, #255	; 0xff
 8009798:	d901      	bls.n	800979e <ff_convert+0x2e>
 800979a:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800979c:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800979e:	4b02      	ldr	r3, [pc, #8]	; (80097a8 <ff_convert+0x38>)
 80097a0:	3880      	subs	r0, #128	; 0x80
 80097a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80097a6:	4770      	bx	lr
 80097a8:	0800a324 	.word	0x0800a324

080097ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80097ac:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80097ae:	4b24      	ldr	r3, [pc, #144]	; (8009840 <ff_wtoupper+0x94>)
 80097b0:	4a24      	ldr	r2, [pc, #144]	; (8009844 <ff_wtoupper+0x98>)
 80097b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80097b6:	bf28      	it	cs
 80097b8:	4613      	movcs	r3, r2
 80097ba:	3304      	adds	r3, #4
 80097bc:	e00d      	b.n	80097da <ff_wtoupper+0x2e>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 80097be:	4288      	cmp	r0, r1
 80097c0:	d310      	bcc.n	80097e4 <ff_wtoupper+0x38>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80097c2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80097c6:	fa5f fc82 	uxtb.w	ip, r2
		if (chr < bc + nc) {	/* In the block? */
 80097ca:	eb0c 0e01 	add.w	lr, ip, r1
 80097ce:	4570      	cmp	r0, lr
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80097d0:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 80097d4:	db07      	blt.n	80097e6 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80097d6:	3304      	adds	r3, #4
 80097d8:	b172      	cbz	r2, 80097f8 <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 80097da:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 80097de:	461c      	mov	r4, r3
 80097e0:	2900      	cmp	r1, #0
 80097e2:	d1ec      	bne.n	80097be <ff_wtoupper+0x12>
	}

	return chr;
}
 80097e4:	bd10      	pop	{r4, pc}
			switch (cmd) {
 80097e6:	2a08      	cmp	r2, #8
 80097e8:	d8fc      	bhi.n	80097e4 <ff_wtoupper+0x38>
 80097ea:	e8df f002 	tbb	[pc, r2]
 80097ee:	100c      	.short	0x100c
 80097f0:	1f1c1916 	.word	0x1f1c1916
 80097f4:	2522      	.short	0x2522
 80097f6:	08          	.byte	0x08
 80097f7:	00          	.byte	0x00
		if (!cmd) p += nc;
 80097f8:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 80097fc:	e7dd      	b.n	80097ba <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80097fe:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8009802:	b280      	uxth	r0, r0
}
 8009804:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009806:	1a41      	subs	r1, r0, r1
 8009808:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 800980c:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800980e:	1a43      	subs	r3, r0, r1
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	1ac0      	subs	r0, r0, r3
 8009816:	b280      	uxth	r0, r0
}
 8009818:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800981a:	3810      	subs	r0, #16
 800981c:	b280      	uxth	r0, r0
}
 800981e:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009820:	3820      	subs	r0, #32
 8009822:	b280      	uxth	r0, r0
}
 8009824:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009826:	3830      	subs	r0, #48	; 0x30
 8009828:	b280      	uxth	r0, r0
}
 800982a:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800982c:	381a      	subs	r0, #26
 800982e:	b280      	uxth	r0, r0
}
 8009830:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8009832:	3008      	adds	r0, #8
 8009834:	b280      	uxth	r0, r0
}
 8009836:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8009838:	3850      	subs	r0, #80	; 0x50
 800983a:	b280      	uxth	r0, r0
}
 800983c:	bd10      	pop	{r4, pc}
 800983e:	bf00      	nop
 8009840:	0800a424 	.word	0x0800a424
 8009844:	0800a618 	.word	0x0800a618

08009848 <__errno>:
 8009848:	4b01      	ldr	r3, [pc, #4]	; (8009850 <__errno+0x8>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	200000e4 	.word	0x200000e4

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4d0d      	ldr	r5, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1b64      	subs	r4, r4, r5
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2600      	movs	r6, #0
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4d0b      	ldr	r5, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f000 fc8e 	bl	800a188 <_init>
 800986c:	1b64      	subs	r4, r4, r5
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2600      	movs	r6, #0
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800a710 	.word	0x0800a710
 8009890:	0800a710 	.word	0x0800a710
 8009894:	0800a710 	.word	0x0800a710
 8009898:	0800a714 	.word	0x0800a714

0800989c <memset>:
 800989c:	4402      	add	r2, r0
 800989e:	4603      	mov	r3, r0
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d100      	bne.n	80098a6 <memset+0xa>
 80098a4:	4770      	bx	lr
 80098a6:	f803 1b01 	strb.w	r1, [r3], #1
 80098aa:	e7f9      	b.n	80098a0 <memset+0x4>

080098ac <siprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b500      	push	{lr}
 80098b0:	b09c      	sub	sp, #112	; 0x70
 80098b2:	ab1d      	add	r3, sp, #116	; 0x74
 80098b4:	9002      	str	r0, [sp, #8]
 80098b6:	9006      	str	r0, [sp, #24]
 80098b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098bc:	4809      	ldr	r0, [pc, #36]	; (80098e4 <siprintf+0x38>)
 80098be:	9107      	str	r1, [sp, #28]
 80098c0:	9104      	str	r1, [sp, #16]
 80098c2:	4909      	ldr	r1, [pc, #36]	; (80098e8 <siprintf+0x3c>)
 80098c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c8:	9105      	str	r1, [sp, #20]
 80098ca:	6800      	ldr	r0, [r0, #0]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	a902      	add	r1, sp, #8
 80098d0:	f000 f868 	bl	80099a4 <_svfiprintf_r>
 80098d4:	9b02      	ldr	r3, [sp, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	b01c      	add	sp, #112	; 0x70
 80098dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e0:	b003      	add	sp, #12
 80098e2:	4770      	bx	lr
 80098e4:	200000e4 	.word	0x200000e4
 80098e8:	ffff0208 	.word	0xffff0208

080098ec <__ssputs_r>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	688e      	ldr	r6, [r1, #8]
 80098f2:	429e      	cmp	r6, r3
 80098f4:	4682      	mov	sl, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4690      	mov	r8, r2
 80098fa:	461f      	mov	r7, r3
 80098fc:	d838      	bhi.n	8009970 <__ssputs_r+0x84>
 80098fe:	898a      	ldrh	r2, [r1, #12]
 8009900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009904:	d032      	beq.n	800996c <__ssputs_r+0x80>
 8009906:	6825      	ldr	r5, [r4, #0]
 8009908:	6909      	ldr	r1, [r1, #16]
 800990a:	eba5 0901 	sub.w	r9, r5, r1
 800990e:	6965      	ldr	r5, [r4, #20]
 8009910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009918:	3301      	adds	r3, #1
 800991a:	444b      	add	r3, r9
 800991c:	106d      	asrs	r5, r5, #1
 800991e:	429d      	cmp	r5, r3
 8009920:	bf38      	it	cc
 8009922:	461d      	movcc	r5, r3
 8009924:	0553      	lsls	r3, r2, #21
 8009926:	d531      	bpl.n	800998c <__ssputs_r+0xa0>
 8009928:	4629      	mov	r1, r5
 800992a:	f000 fb63 	bl	8009ff4 <_malloc_r>
 800992e:	4606      	mov	r6, r0
 8009930:	b950      	cbnz	r0, 8009948 <__ssputs_r+0x5c>
 8009932:	230c      	movs	r3, #12
 8009934:	f8ca 3000 	str.w	r3, [sl]
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009948:	6921      	ldr	r1, [r4, #16]
 800994a:	464a      	mov	r2, r9
 800994c:	f000 fabe 	bl	8009ecc <memcpy>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	6126      	str	r6, [r4, #16]
 800995e:	6165      	str	r5, [r4, #20]
 8009960:	444e      	add	r6, r9
 8009962:	eba5 0509 	sub.w	r5, r5, r9
 8009966:	6026      	str	r6, [r4, #0]
 8009968:	60a5      	str	r5, [r4, #8]
 800996a:	463e      	mov	r6, r7
 800996c:	42be      	cmp	r6, r7
 800996e:	d900      	bls.n	8009972 <__ssputs_r+0x86>
 8009970:	463e      	mov	r6, r7
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	4632      	mov	r2, r6
 8009976:	4641      	mov	r1, r8
 8009978:	f000 fab6 	bl	8009ee8 <memmove>
 800997c:	68a3      	ldr	r3, [r4, #8]
 800997e:	1b9b      	subs	r3, r3, r6
 8009980:	60a3      	str	r3, [r4, #8]
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	4433      	add	r3, r6
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	2000      	movs	r0, #0
 800998a:	e7db      	b.n	8009944 <__ssputs_r+0x58>
 800998c:	462a      	mov	r2, r5
 800998e:	f000 fba5 	bl	800a0dc <_realloc_r>
 8009992:	4606      	mov	r6, r0
 8009994:	2800      	cmp	r0, #0
 8009996:	d1e1      	bne.n	800995c <__ssputs_r+0x70>
 8009998:	6921      	ldr	r1, [r4, #16]
 800999a:	4650      	mov	r0, sl
 800999c:	f000 fabe 	bl	8009f1c <_free_r>
 80099a0:	e7c7      	b.n	8009932 <__ssputs_r+0x46>
	...

080099a4 <_svfiprintf_r>:
 80099a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	4698      	mov	r8, r3
 80099aa:	898b      	ldrh	r3, [r1, #12]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	b09d      	sub	sp, #116	; 0x74
 80099b0:	4607      	mov	r7, r0
 80099b2:	460d      	mov	r5, r1
 80099b4:	4614      	mov	r4, r2
 80099b6:	d50e      	bpl.n	80099d6 <_svfiprintf_r+0x32>
 80099b8:	690b      	ldr	r3, [r1, #16]
 80099ba:	b963      	cbnz	r3, 80099d6 <_svfiprintf_r+0x32>
 80099bc:	2140      	movs	r1, #64	; 0x40
 80099be:	f000 fb19 	bl	8009ff4 <_malloc_r>
 80099c2:	6028      	str	r0, [r5, #0]
 80099c4:	6128      	str	r0, [r5, #16]
 80099c6:	b920      	cbnz	r0, 80099d2 <_svfiprintf_r+0x2e>
 80099c8:	230c      	movs	r3, #12
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	e0d1      	b.n	8009b76 <_svfiprintf_r+0x1d2>
 80099d2:	2340      	movs	r3, #64	; 0x40
 80099d4:	616b      	str	r3, [r5, #20]
 80099d6:	2300      	movs	r3, #0
 80099d8:	9309      	str	r3, [sp, #36]	; 0x24
 80099da:	2320      	movs	r3, #32
 80099dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099e4:	2330      	movs	r3, #48	; 0x30
 80099e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b90 <_svfiprintf_r+0x1ec>
 80099ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ee:	f04f 0901 	mov.w	r9, #1
 80099f2:	4623      	mov	r3, r4
 80099f4:	469a      	mov	sl, r3
 80099f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099fa:	b10a      	cbz	r2, 8009a00 <_svfiprintf_r+0x5c>
 80099fc:	2a25      	cmp	r2, #37	; 0x25
 80099fe:	d1f9      	bne.n	80099f4 <_svfiprintf_r+0x50>
 8009a00:	ebba 0b04 	subs.w	fp, sl, r4
 8009a04:	d00b      	beq.n	8009a1e <_svfiprintf_r+0x7a>
 8009a06:	465b      	mov	r3, fp
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f7ff ff6d 	bl	80098ec <__ssputs_r>
 8009a12:	3001      	adds	r0, #1
 8009a14:	f000 80aa 	beq.w	8009b6c <_svfiprintf_r+0x1c8>
 8009a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1a:	445a      	add	r2, fp
 8009a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80a2 	beq.w	8009b6c <_svfiprintf_r+0x1c8>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a32:	f10a 0a01 	add.w	sl, sl, #1
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	9307      	str	r3, [sp, #28]
 8009a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a40:	4654      	mov	r4, sl
 8009a42:	2205      	movs	r2, #5
 8009a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a48:	4851      	ldr	r0, [pc, #324]	; (8009b90 <_svfiprintf_r+0x1ec>)
 8009a4a:	f7f6 fbc9 	bl	80001e0 <memchr>
 8009a4e:	9a04      	ldr	r2, [sp, #16]
 8009a50:	b9d8      	cbnz	r0, 8009a8a <_svfiprintf_r+0xe6>
 8009a52:	06d0      	lsls	r0, r2, #27
 8009a54:	bf44      	itt	mi
 8009a56:	2320      	movmi	r3, #32
 8009a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5c:	0711      	lsls	r1, r2, #28
 8009a5e:	bf44      	itt	mi
 8009a60:	232b      	movmi	r3, #43	; 0x2b
 8009a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a66:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6c:	d015      	beq.n	8009a9a <_svfiprintf_r+0xf6>
 8009a6e:	9a07      	ldr	r2, [sp, #28]
 8009a70:	4654      	mov	r4, sl
 8009a72:	2000      	movs	r0, #0
 8009a74:	f04f 0c0a 	mov.w	ip, #10
 8009a78:	4621      	mov	r1, r4
 8009a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a7e:	3b30      	subs	r3, #48	; 0x30
 8009a80:	2b09      	cmp	r3, #9
 8009a82:	d94e      	bls.n	8009b22 <_svfiprintf_r+0x17e>
 8009a84:	b1b0      	cbz	r0, 8009ab4 <_svfiprintf_r+0x110>
 8009a86:	9207      	str	r2, [sp, #28]
 8009a88:	e014      	b.n	8009ab4 <_svfiprintf_r+0x110>
 8009a8a:	eba0 0308 	sub.w	r3, r0, r8
 8009a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a92:	4313      	orrs	r3, r2
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	46a2      	mov	sl, r4
 8009a98:	e7d2      	b.n	8009a40 <_svfiprintf_r+0x9c>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	1d19      	adds	r1, r3, #4
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	9103      	str	r1, [sp, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bfbb      	ittet	lt
 8009aa6:	425b      	neglt	r3, r3
 8009aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8009aac:	9307      	strge	r3, [sp, #28]
 8009aae:	9307      	strlt	r3, [sp, #28]
 8009ab0:	bfb8      	it	lt
 8009ab2:	9204      	strlt	r2, [sp, #16]
 8009ab4:	7823      	ldrb	r3, [r4, #0]
 8009ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ab8:	d10c      	bne.n	8009ad4 <_svfiprintf_r+0x130>
 8009aba:	7863      	ldrb	r3, [r4, #1]
 8009abc:	2b2a      	cmp	r3, #42	; 0x2a
 8009abe:	d135      	bne.n	8009b2c <_svfiprintf_r+0x188>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	1d1a      	adds	r2, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	9203      	str	r2, [sp, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfb8      	it	lt
 8009acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ad0:	3402      	adds	r4, #2
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ba0 <_svfiprintf_r+0x1fc>
 8009ad8:	7821      	ldrb	r1, [r4, #0]
 8009ada:	2203      	movs	r2, #3
 8009adc:	4650      	mov	r0, sl
 8009ade:	f7f6 fb7f 	bl	80001e0 <memchr>
 8009ae2:	b140      	cbz	r0, 8009af6 <_svfiprintf_r+0x152>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	eba0 000a 	sub.w	r0, r0, sl
 8009aea:	fa03 f000 	lsl.w	r0, r3, r0
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	4303      	orrs	r3, r0
 8009af2:	3401      	adds	r4, #1
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afa:	4826      	ldr	r0, [pc, #152]	; (8009b94 <_svfiprintf_r+0x1f0>)
 8009afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b00:	2206      	movs	r2, #6
 8009b02:	f7f6 fb6d 	bl	80001e0 <memchr>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d038      	beq.n	8009b7c <_svfiprintf_r+0x1d8>
 8009b0a:	4b23      	ldr	r3, [pc, #140]	; (8009b98 <_svfiprintf_r+0x1f4>)
 8009b0c:	bb1b      	cbnz	r3, 8009b56 <_svfiprintf_r+0x1b2>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	3307      	adds	r3, #7
 8009b12:	f023 0307 	bic.w	r3, r3, #7
 8009b16:	3308      	adds	r3, #8
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1c:	4433      	add	r3, r6
 8009b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b20:	e767      	b.n	80099f2 <_svfiprintf_r+0x4e>
 8009b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b26:	460c      	mov	r4, r1
 8009b28:	2001      	movs	r0, #1
 8009b2a:	e7a5      	b.n	8009a78 <_svfiprintf_r+0xd4>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	3401      	adds	r4, #1
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	4619      	mov	r1, r3
 8009b34:	f04f 0c0a 	mov.w	ip, #10
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b3e:	3a30      	subs	r2, #48	; 0x30
 8009b40:	2a09      	cmp	r2, #9
 8009b42:	d903      	bls.n	8009b4c <_svfiprintf_r+0x1a8>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0c5      	beq.n	8009ad4 <_svfiprintf_r+0x130>
 8009b48:	9105      	str	r1, [sp, #20]
 8009b4a:	e7c3      	b.n	8009ad4 <_svfiprintf_r+0x130>
 8009b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b50:	4604      	mov	r4, r0
 8009b52:	2301      	movs	r3, #1
 8009b54:	e7f0      	b.n	8009b38 <_svfiprintf_r+0x194>
 8009b56:	ab03      	add	r3, sp, #12
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <_svfiprintf_r+0x1f8>)
 8009b5e:	a904      	add	r1, sp, #16
 8009b60:	4638      	mov	r0, r7
 8009b62:	f3af 8000 	nop.w
 8009b66:	1c42      	adds	r2, r0, #1
 8009b68:	4606      	mov	r6, r0
 8009b6a:	d1d6      	bne.n	8009b1a <_svfiprintf_r+0x176>
 8009b6c:	89ab      	ldrh	r3, [r5, #12]
 8009b6e:	065b      	lsls	r3, r3, #25
 8009b70:	f53f af2c 	bmi.w	80099cc <_svfiprintf_r+0x28>
 8009b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b76:	b01d      	add	sp, #116	; 0x74
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	ab03      	add	r3, sp, #12
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	462a      	mov	r2, r5
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <_svfiprintf_r+0x1f8>)
 8009b84:	a904      	add	r1, sp, #16
 8009b86:	4638      	mov	r0, r7
 8009b88:	f000 f87a 	bl	8009c80 <_printf_i>
 8009b8c:	e7eb      	b.n	8009b66 <_svfiprintf_r+0x1c2>
 8009b8e:	bf00      	nop
 8009b90:	0800a6d4 	.word	0x0800a6d4
 8009b94:	0800a6de 	.word	0x0800a6de
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	080098ed 	.word	0x080098ed
 8009ba0:	0800a6da 	.word	0x0800a6da

08009ba4 <_printf_common>:
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	4616      	mov	r6, r2
 8009baa:	4699      	mov	r9, r3
 8009bac:	688a      	ldr	r2, [r1, #8]
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	bfb8      	it	lt
 8009bb8:	4613      	movlt	r3, r2
 8009bba:	6033      	str	r3, [r6, #0]
 8009bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	b10a      	cbz	r2, 8009bca <_printf_common+0x26>
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	6033      	str	r3, [r6, #0]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	0699      	lsls	r1, r3, #26
 8009bce:	bf42      	ittt	mi
 8009bd0:	6833      	ldrmi	r3, [r6, #0]
 8009bd2:	3302      	addmi	r3, #2
 8009bd4:	6033      	strmi	r3, [r6, #0]
 8009bd6:	6825      	ldr	r5, [r4, #0]
 8009bd8:	f015 0506 	ands.w	r5, r5, #6
 8009bdc:	d106      	bne.n	8009bec <_printf_common+0x48>
 8009bde:	f104 0a19 	add.w	sl, r4, #25
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	6832      	ldr	r2, [r6, #0]
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dc26      	bgt.n	8009c3a <_printf_common+0x96>
 8009bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bf0:	1e13      	subs	r3, r2, #0
 8009bf2:	6822      	ldr	r2, [r4, #0]
 8009bf4:	bf18      	it	ne
 8009bf6:	2301      	movne	r3, #1
 8009bf8:	0692      	lsls	r2, r2, #26
 8009bfa:	d42b      	bmi.n	8009c54 <_printf_common+0xb0>
 8009bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c00:	4649      	mov	r1, r9
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c0      	blx	r8
 8009c06:	3001      	adds	r0, #1
 8009c08:	d01e      	beq.n	8009c48 <_printf_common+0xa4>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	68e5      	ldr	r5, [r4, #12]
 8009c0e:	6832      	ldr	r2, [r6, #0]
 8009c10:	f003 0306 	and.w	r3, r3, #6
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	bf08      	it	eq
 8009c18:	1aad      	subeq	r5, r5, r2
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	6922      	ldr	r2, [r4, #16]
 8009c1e:	bf0c      	ite	eq
 8009c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c24:	2500      	movne	r5, #0
 8009c26:	4293      	cmp	r3, r2
 8009c28:	bfc4      	itt	gt
 8009c2a:	1a9b      	subgt	r3, r3, r2
 8009c2c:	18ed      	addgt	r5, r5, r3
 8009c2e:	2600      	movs	r6, #0
 8009c30:	341a      	adds	r4, #26
 8009c32:	42b5      	cmp	r5, r6
 8009c34:	d11a      	bne.n	8009c6c <_printf_common+0xc8>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e008      	b.n	8009c4c <_printf_common+0xa8>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4649      	mov	r1, r9
 8009c40:	4638      	mov	r0, r7
 8009c42:	47c0      	blx	r8
 8009c44:	3001      	adds	r0, #1
 8009c46:	d103      	bne.n	8009c50 <_printf_common+0xac>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	e7c6      	b.n	8009be2 <_printf_common+0x3e>
 8009c54:	18e1      	adds	r1, r4, r3
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	2030      	movs	r0, #48	; 0x30
 8009c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c5e:	4422      	add	r2, r4
 8009c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c68:	3302      	adds	r3, #2
 8009c6a:	e7c7      	b.n	8009bfc <_printf_common+0x58>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4649      	mov	r1, r9
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c0      	blx	r8
 8009c76:	3001      	adds	r0, #1
 8009c78:	d0e6      	beq.n	8009c48 <_printf_common+0xa4>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7d9      	b.n	8009c32 <_printf_common+0x8e>
	...

08009c80 <_printf_i>:
 8009c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	7e0f      	ldrb	r7, [r1, #24]
 8009c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c88:	2f78      	cmp	r7, #120	; 0x78
 8009c8a:	4691      	mov	r9, r2
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	469a      	mov	sl, r3
 8009c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c96:	d807      	bhi.n	8009ca8 <_printf_i+0x28>
 8009c98:	2f62      	cmp	r7, #98	; 0x62
 8009c9a:	d80a      	bhi.n	8009cb2 <_printf_i+0x32>
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	f000 80d8 	beq.w	8009e52 <_printf_i+0x1d2>
 8009ca2:	2f58      	cmp	r7, #88	; 0x58
 8009ca4:	f000 80a3 	beq.w	8009dee <_printf_i+0x16e>
 8009ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb0:	e03a      	b.n	8009d28 <_printf_i+0xa8>
 8009cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cb6:	2b15      	cmp	r3, #21
 8009cb8:	d8f6      	bhi.n	8009ca8 <_printf_i+0x28>
 8009cba:	a101      	add	r1, pc, #4	; (adr r1, 8009cc0 <_printf_i+0x40>)
 8009cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009ca9 	.word	0x08009ca9
 8009ccc:	08009ca9 	.word	0x08009ca9
 8009cd0:	08009ca9 	.word	0x08009ca9
 8009cd4:	08009ca9 	.word	0x08009ca9
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009ca9 	.word	0x08009ca9
 8009ce0:	08009ca9 	.word	0x08009ca9
 8009ce4:	08009ca9 	.word	0x08009ca9
 8009ce8:	08009ca9 	.word	0x08009ca9
 8009cec:	08009e39 	.word	0x08009e39
 8009cf0:	08009d5d 	.word	0x08009d5d
 8009cf4:	08009e1b 	.word	0x08009e1b
 8009cf8:	08009ca9 	.word	0x08009ca9
 8009cfc:	08009ca9 	.word	0x08009ca9
 8009d00:	08009e5b 	.word	0x08009e5b
 8009d04:	08009ca9 	.word	0x08009ca9
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009ca9 	.word	0x08009ca9
 8009d10:	08009ca9 	.word	0x08009ca9
 8009d14:	08009e23 	.word	0x08009e23
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	602a      	str	r2, [r5, #0]
 8009d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0a3      	b.n	8009e74 <_printf_i+0x1f4>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	6829      	ldr	r1, [r5, #0]
 8009d30:	0606      	lsls	r6, r0, #24
 8009d32:	f101 0304 	add.w	r3, r1, #4
 8009d36:	d50a      	bpl.n	8009d4e <_printf_i+0xce>
 8009d38:	680e      	ldr	r6, [r1, #0]
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	da03      	bge.n	8009d48 <_printf_i+0xc8>
 8009d40:	232d      	movs	r3, #45	; 0x2d
 8009d42:	4276      	negs	r6, r6
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d48:	485e      	ldr	r0, [pc, #376]	; (8009ec4 <_printf_i+0x244>)
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	e019      	b.n	8009d82 <_printf_i+0x102>
 8009d4e:	680e      	ldr	r6, [r1, #0]
 8009d50:	602b      	str	r3, [r5, #0]
 8009d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d56:	bf18      	it	ne
 8009d58:	b236      	sxthne	r6, r6
 8009d5a:	e7ef      	b.n	8009d3c <_printf_i+0xbc>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	1d19      	adds	r1, r3, #4
 8009d62:	6029      	str	r1, [r5, #0]
 8009d64:	0601      	lsls	r1, r0, #24
 8009d66:	d501      	bpl.n	8009d6c <_printf_i+0xec>
 8009d68:	681e      	ldr	r6, [r3, #0]
 8009d6a:	e002      	b.n	8009d72 <_printf_i+0xf2>
 8009d6c:	0646      	lsls	r6, r0, #25
 8009d6e:	d5fb      	bpl.n	8009d68 <_printf_i+0xe8>
 8009d70:	881e      	ldrh	r6, [r3, #0]
 8009d72:	4854      	ldr	r0, [pc, #336]	; (8009ec4 <_printf_i+0x244>)
 8009d74:	2f6f      	cmp	r7, #111	; 0x6f
 8009d76:	bf0c      	ite	eq
 8009d78:	2308      	moveq	r3, #8
 8009d7a:	230a      	movne	r3, #10
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d82:	6865      	ldr	r5, [r4, #4]
 8009d84:	60a5      	str	r5, [r4, #8]
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	bfa2      	ittt	ge
 8009d8a:	6821      	ldrge	r1, [r4, #0]
 8009d8c:	f021 0104 	bicge.w	r1, r1, #4
 8009d90:	6021      	strge	r1, [r4, #0]
 8009d92:	b90e      	cbnz	r6, 8009d98 <_printf_i+0x118>
 8009d94:	2d00      	cmp	r5, #0
 8009d96:	d04d      	beq.n	8009e34 <_printf_i+0x1b4>
 8009d98:	4615      	mov	r5, r2
 8009d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8009da2:	5dc7      	ldrb	r7, [r0, r7]
 8009da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009da8:	4637      	mov	r7, r6
 8009daa:	42bb      	cmp	r3, r7
 8009dac:	460e      	mov	r6, r1
 8009dae:	d9f4      	bls.n	8009d9a <_printf_i+0x11a>
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d10b      	bne.n	8009dcc <_printf_i+0x14c>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	07de      	lsls	r6, r3, #31
 8009db8:	d508      	bpl.n	8009dcc <_printf_i+0x14c>
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	6861      	ldr	r1, [r4, #4]
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	bfde      	ittt	le
 8009dc2:	2330      	movle	r3, #48	; 0x30
 8009dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dcc:	1b52      	subs	r2, r2, r5
 8009dce:	6122      	str	r2, [r4, #16]
 8009dd0:	f8cd a000 	str.w	sl, [sp]
 8009dd4:	464b      	mov	r3, r9
 8009dd6:	aa03      	add	r2, sp, #12
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4640      	mov	r0, r8
 8009ddc:	f7ff fee2 	bl	8009ba4 <_printf_common>
 8009de0:	3001      	adds	r0, #1
 8009de2:	d14c      	bne.n	8009e7e <_printf_i+0x1fe>
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	b004      	add	sp, #16
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dee:	4835      	ldr	r0, [pc, #212]	; (8009ec4 <_printf_i+0x244>)
 8009df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009df4:	6829      	ldr	r1, [r5, #0]
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dfc:	6029      	str	r1, [r5, #0]
 8009dfe:	061d      	lsls	r5, r3, #24
 8009e00:	d514      	bpl.n	8009e2c <_printf_i+0x1ac>
 8009e02:	07df      	lsls	r7, r3, #31
 8009e04:	bf44      	itt	mi
 8009e06:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0a:	6023      	strmi	r3, [r4, #0]
 8009e0c:	b91e      	cbnz	r6, 8009e16 <_printf_i+0x196>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	f023 0320 	bic.w	r3, r3, #32
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	2310      	movs	r3, #16
 8009e18:	e7b0      	b.n	8009d7c <_printf_i+0xfc>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	f043 0320 	orr.w	r3, r3, #32
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	2378      	movs	r3, #120	; 0x78
 8009e24:	4828      	ldr	r0, [pc, #160]	; (8009ec8 <_printf_i+0x248>)
 8009e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e2a:	e7e3      	b.n	8009df4 <_printf_i+0x174>
 8009e2c:	0659      	lsls	r1, r3, #25
 8009e2e:	bf48      	it	mi
 8009e30:	b2b6      	uxthmi	r6, r6
 8009e32:	e7e6      	b.n	8009e02 <_printf_i+0x182>
 8009e34:	4615      	mov	r5, r2
 8009e36:	e7bb      	b.n	8009db0 <_printf_i+0x130>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	6826      	ldr	r6, [r4, #0]
 8009e3c:	6961      	ldr	r1, [r4, #20]
 8009e3e:	1d18      	adds	r0, r3, #4
 8009e40:	6028      	str	r0, [r5, #0]
 8009e42:	0635      	lsls	r5, r6, #24
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	d501      	bpl.n	8009e4c <_printf_i+0x1cc>
 8009e48:	6019      	str	r1, [r3, #0]
 8009e4a:	e002      	b.n	8009e52 <_printf_i+0x1d2>
 8009e4c:	0670      	lsls	r0, r6, #25
 8009e4e:	d5fb      	bpl.n	8009e48 <_printf_i+0x1c8>
 8009e50:	8019      	strh	r1, [r3, #0]
 8009e52:	2300      	movs	r3, #0
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	4615      	mov	r5, r2
 8009e58:	e7ba      	b.n	8009dd0 <_printf_i+0x150>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	1d1a      	adds	r2, r3, #4
 8009e5e:	602a      	str	r2, [r5, #0]
 8009e60:	681d      	ldr	r5, [r3, #0]
 8009e62:	6862      	ldr	r2, [r4, #4]
 8009e64:	2100      	movs	r1, #0
 8009e66:	4628      	mov	r0, r5
 8009e68:	f7f6 f9ba 	bl	80001e0 <memchr>
 8009e6c:	b108      	cbz	r0, 8009e72 <_printf_i+0x1f2>
 8009e6e:	1b40      	subs	r0, r0, r5
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	6863      	ldr	r3, [r4, #4]
 8009e74:	6123      	str	r3, [r4, #16]
 8009e76:	2300      	movs	r3, #0
 8009e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7c:	e7a8      	b.n	8009dd0 <_printf_i+0x150>
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	462a      	mov	r2, r5
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d0ab      	beq.n	8009de4 <_printf_i+0x164>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	079b      	lsls	r3, r3, #30
 8009e90:	d413      	bmi.n	8009eba <_printf_i+0x23a>
 8009e92:	68e0      	ldr	r0, [r4, #12]
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	4298      	cmp	r0, r3
 8009e98:	bfb8      	it	lt
 8009e9a:	4618      	movlt	r0, r3
 8009e9c:	e7a4      	b.n	8009de8 <_printf_i+0x168>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	47d0      	blx	sl
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d09b      	beq.n	8009de4 <_printf_i+0x164>
 8009eac:	3501      	adds	r5, #1
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	9903      	ldr	r1, [sp, #12]
 8009eb2:	1a5b      	subs	r3, r3, r1
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dcf2      	bgt.n	8009e9e <_printf_i+0x21e>
 8009eb8:	e7eb      	b.n	8009e92 <_printf_i+0x212>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	f104 0619 	add.w	r6, r4, #25
 8009ec0:	e7f5      	b.n	8009eae <_printf_i+0x22e>
 8009ec2:	bf00      	nop
 8009ec4:	0800a6e5 	.word	0x0800a6e5
 8009ec8:	0800a6f6 	.word	0x0800a6f6

08009ecc <memcpy>:
 8009ecc:	440a      	add	r2, r1
 8009ece:	4291      	cmp	r1, r2
 8009ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ed4:	d100      	bne.n	8009ed8 <memcpy+0xc>
 8009ed6:	4770      	bx	lr
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	d1f9      	bne.n	8009eda <memcpy+0xe>
 8009ee6:	bd10      	pop	{r4, pc}

08009ee8 <memmove>:
 8009ee8:	4288      	cmp	r0, r1
 8009eea:	b510      	push	{r4, lr}
 8009eec:	eb01 0402 	add.w	r4, r1, r2
 8009ef0:	d902      	bls.n	8009ef8 <memmove+0x10>
 8009ef2:	4284      	cmp	r4, r0
 8009ef4:	4623      	mov	r3, r4
 8009ef6:	d807      	bhi.n	8009f08 <memmove+0x20>
 8009ef8:	1e43      	subs	r3, r0, #1
 8009efa:	42a1      	cmp	r1, r4
 8009efc:	d008      	beq.n	8009f10 <memmove+0x28>
 8009efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f06:	e7f8      	b.n	8009efa <memmove+0x12>
 8009f08:	4402      	add	r2, r0
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	428a      	cmp	r2, r1
 8009f0e:	d100      	bne.n	8009f12 <memmove+0x2a>
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f1a:	e7f7      	b.n	8009f0c <memmove+0x24>

08009f1c <_free_r>:
 8009f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d044      	beq.n	8009fac <_free_r+0x90>
 8009f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f26:	9001      	str	r0, [sp, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f2e:	bfb8      	it	lt
 8009f30:	18e4      	addlt	r4, r4, r3
 8009f32:	f000 f913 	bl	800a15c <__malloc_lock>
 8009f36:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <_free_r+0x94>)
 8009f38:	9801      	ldr	r0, [sp, #4]
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	b933      	cbnz	r3, 8009f4c <_free_r+0x30>
 8009f3e:	6063      	str	r3, [r4, #4]
 8009f40:	6014      	str	r4, [r2, #0]
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f48:	f000 b90e 	b.w	800a168 <__malloc_unlock>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d908      	bls.n	8009f62 <_free_r+0x46>
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf01      	itttt	eq
 8009f58:	6819      	ldreq	r1, [r3, #0]
 8009f5a:	685b      	ldreq	r3, [r3, #4]
 8009f5c:	1949      	addeq	r1, r1, r5
 8009f5e:	6021      	streq	r1, [r4, #0]
 8009f60:	e7ed      	b.n	8009f3e <_free_r+0x22>
 8009f62:	461a      	mov	r2, r3
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	b10b      	cbz	r3, 8009f6c <_free_r+0x50>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d9fa      	bls.n	8009f62 <_free_r+0x46>
 8009f6c:	6811      	ldr	r1, [r2, #0]
 8009f6e:	1855      	adds	r5, r2, r1
 8009f70:	42a5      	cmp	r5, r4
 8009f72:	d10b      	bne.n	8009f8c <_free_r+0x70>
 8009f74:	6824      	ldr	r4, [r4, #0]
 8009f76:	4421      	add	r1, r4
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	d1e0      	bne.n	8009f42 <_free_r+0x26>
 8009f80:	681c      	ldr	r4, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	6053      	str	r3, [r2, #4]
 8009f86:	4421      	add	r1, r4
 8009f88:	6011      	str	r1, [r2, #0]
 8009f8a:	e7da      	b.n	8009f42 <_free_r+0x26>
 8009f8c:	d902      	bls.n	8009f94 <_free_r+0x78>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	e7d6      	b.n	8009f42 <_free_r+0x26>
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf04      	itt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	6063      	str	r3, [r4, #4]
 8009fa2:	bf04      	itt	eq
 8009fa4:	1949      	addeq	r1, r1, r5
 8009fa6:	6021      	streq	r1, [r4, #0]
 8009fa8:	6054      	str	r4, [r2, #4]
 8009faa:	e7ca      	b.n	8009f42 <_free_r+0x26>
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
 8009fb0:	20017098 	.word	0x20017098

08009fb4 <sbrk_aligned>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	4e0e      	ldr	r6, [pc, #56]	; (8009ff0 <sbrk_aligned+0x3c>)
 8009fb8:	460c      	mov	r4, r1
 8009fba:	6831      	ldr	r1, [r6, #0]
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b911      	cbnz	r1, 8009fc6 <sbrk_aligned+0x12>
 8009fc0:	f000 f8bc 	bl	800a13c <_sbrk_r>
 8009fc4:	6030      	str	r0, [r6, #0]
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 f8b7 	bl	800a13c <_sbrk_r>
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	d00a      	beq.n	8009fe8 <sbrk_aligned+0x34>
 8009fd2:	1cc4      	adds	r4, r0, #3
 8009fd4:	f024 0403 	bic.w	r4, r4, #3
 8009fd8:	42a0      	cmp	r0, r4
 8009fda:	d007      	beq.n	8009fec <sbrk_aligned+0x38>
 8009fdc:	1a21      	subs	r1, r4, r0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 f8ac 	bl	800a13c <_sbrk_r>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d101      	bne.n	8009fec <sbrk_aligned+0x38>
 8009fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fec:	4620      	mov	r0, r4
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	2001709c 	.word	0x2001709c

08009ff4 <_malloc_r>:
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff8:	1ccd      	adds	r5, r1, #3
 8009ffa:	f025 0503 	bic.w	r5, r5, #3
 8009ffe:	3508      	adds	r5, #8
 800a000:	2d0c      	cmp	r5, #12
 800a002:	bf38      	it	cc
 800a004:	250c      	movcc	r5, #12
 800a006:	2d00      	cmp	r5, #0
 800a008:	4607      	mov	r7, r0
 800a00a:	db01      	blt.n	800a010 <_malloc_r+0x1c>
 800a00c:	42a9      	cmp	r1, r5
 800a00e:	d905      	bls.n	800a01c <_malloc_r+0x28>
 800a010:	230c      	movs	r3, #12
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	2600      	movs	r6, #0
 800a016:	4630      	mov	r0, r6
 800a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01c:	4e2e      	ldr	r6, [pc, #184]	; (800a0d8 <_malloc_r+0xe4>)
 800a01e:	f000 f89d 	bl	800a15c <__malloc_lock>
 800a022:	6833      	ldr	r3, [r6, #0]
 800a024:	461c      	mov	r4, r3
 800a026:	bb34      	cbnz	r4, 800a076 <_malloc_r+0x82>
 800a028:	4629      	mov	r1, r5
 800a02a:	4638      	mov	r0, r7
 800a02c:	f7ff ffc2 	bl	8009fb4 <sbrk_aligned>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	4604      	mov	r4, r0
 800a034:	d14d      	bne.n	800a0d2 <_malloc_r+0xde>
 800a036:	6834      	ldr	r4, [r6, #0]
 800a038:	4626      	mov	r6, r4
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d140      	bne.n	800a0c0 <_malloc_r+0xcc>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4631      	mov	r1, r6
 800a042:	4638      	mov	r0, r7
 800a044:	eb04 0803 	add.w	r8, r4, r3
 800a048:	f000 f878 	bl	800a13c <_sbrk_r>
 800a04c:	4580      	cmp	r8, r0
 800a04e:	d13a      	bne.n	800a0c6 <_malloc_r+0xd2>
 800a050:	6821      	ldr	r1, [r4, #0]
 800a052:	3503      	adds	r5, #3
 800a054:	1a6d      	subs	r5, r5, r1
 800a056:	f025 0503 	bic.w	r5, r5, #3
 800a05a:	3508      	adds	r5, #8
 800a05c:	2d0c      	cmp	r5, #12
 800a05e:	bf38      	it	cc
 800a060:	250c      	movcc	r5, #12
 800a062:	4629      	mov	r1, r5
 800a064:	4638      	mov	r0, r7
 800a066:	f7ff ffa5 	bl	8009fb4 <sbrk_aligned>
 800a06a:	3001      	adds	r0, #1
 800a06c:	d02b      	beq.n	800a0c6 <_malloc_r+0xd2>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	442b      	add	r3, r5
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	e00e      	b.n	800a094 <_malloc_r+0xa0>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	1b52      	subs	r2, r2, r5
 800a07a:	d41e      	bmi.n	800a0ba <_malloc_r+0xc6>
 800a07c:	2a0b      	cmp	r2, #11
 800a07e:	d916      	bls.n	800a0ae <_malloc_r+0xba>
 800a080:	1961      	adds	r1, r4, r5
 800a082:	42a3      	cmp	r3, r4
 800a084:	6025      	str	r5, [r4, #0]
 800a086:	bf18      	it	ne
 800a088:	6059      	strne	r1, [r3, #4]
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	bf08      	it	eq
 800a08e:	6031      	streq	r1, [r6, #0]
 800a090:	5162      	str	r2, [r4, r5]
 800a092:	604b      	str	r3, [r1, #4]
 800a094:	4638      	mov	r0, r7
 800a096:	f104 060b 	add.w	r6, r4, #11
 800a09a:	f000 f865 	bl	800a168 <__malloc_unlock>
 800a09e:	f026 0607 	bic.w	r6, r6, #7
 800a0a2:	1d23      	adds	r3, r4, #4
 800a0a4:	1af2      	subs	r2, r6, r3
 800a0a6:	d0b6      	beq.n	800a016 <_malloc_r+0x22>
 800a0a8:	1b9b      	subs	r3, r3, r6
 800a0aa:	50a3      	str	r3, [r4, r2]
 800a0ac:	e7b3      	b.n	800a016 <_malloc_r+0x22>
 800a0ae:	6862      	ldr	r2, [r4, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	bf0c      	ite	eq
 800a0b4:	6032      	streq	r2, [r6, #0]
 800a0b6:	605a      	strne	r2, [r3, #4]
 800a0b8:	e7ec      	b.n	800a094 <_malloc_r+0xa0>
 800a0ba:	4623      	mov	r3, r4
 800a0bc:	6864      	ldr	r4, [r4, #4]
 800a0be:	e7b2      	b.n	800a026 <_malloc_r+0x32>
 800a0c0:	4634      	mov	r4, r6
 800a0c2:	6876      	ldr	r6, [r6, #4]
 800a0c4:	e7b9      	b.n	800a03a <_malloc_r+0x46>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	603b      	str	r3, [r7, #0]
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	f000 f84c 	bl	800a168 <__malloc_unlock>
 800a0d0:	e7a1      	b.n	800a016 <_malloc_r+0x22>
 800a0d2:	6025      	str	r5, [r4, #0]
 800a0d4:	e7de      	b.n	800a094 <_malloc_r+0xa0>
 800a0d6:	bf00      	nop
 800a0d8:	20017098 	.word	0x20017098

0800a0dc <_realloc_r>:
 800a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4614      	mov	r4, r2
 800a0e4:	460e      	mov	r6, r1
 800a0e6:	b921      	cbnz	r1, 800a0f2 <_realloc_r+0x16>
 800a0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	f7ff bf81 	b.w	8009ff4 <_malloc_r>
 800a0f2:	b92a      	cbnz	r2, 800a100 <_realloc_r+0x24>
 800a0f4:	f7ff ff12 	bl	8009f1c <_free_r>
 800a0f8:	4625      	mov	r5, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a100:	f000 f838 	bl	800a174 <_malloc_usable_size_r>
 800a104:	4284      	cmp	r4, r0
 800a106:	4607      	mov	r7, r0
 800a108:	d802      	bhi.n	800a110 <_realloc_r+0x34>
 800a10a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a10e:	d812      	bhi.n	800a136 <_realloc_r+0x5a>
 800a110:	4621      	mov	r1, r4
 800a112:	4640      	mov	r0, r8
 800a114:	f7ff ff6e 	bl	8009ff4 <_malloc_r>
 800a118:	4605      	mov	r5, r0
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d0ed      	beq.n	800a0fa <_realloc_r+0x1e>
 800a11e:	42bc      	cmp	r4, r7
 800a120:	4622      	mov	r2, r4
 800a122:	4631      	mov	r1, r6
 800a124:	bf28      	it	cs
 800a126:	463a      	movcs	r2, r7
 800a128:	f7ff fed0 	bl	8009ecc <memcpy>
 800a12c:	4631      	mov	r1, r6
 800a12e:	4640      	mov	r0, r8
 800a130:	f7ff fef4 	bl	8009f1c <_free_r>
 800a134:	e7e1      	b.n	800a0fa <_realloc_r+0x1e>
 800a136:	4635      	mov	r5, r6
 800a138:	e7df      	b.n	800a0fa <_realloc_r+0x1e>
	...

0800a13c <_sbrk_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_sbrk_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f7f7 fcc2 	bl	8001ad0 <_sbrk>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_sbrk_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_sbrk_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	200170a0 	.word	0x200170a0

0800a15c <__malloc_lock>:
 800a15c:	4801      	ldr	r0, [pc, #4]	; (800a164 <__malloc_lock+0x8>)
 800a15e:	f000 b811 	b.w	800a184 <__retarget_lock_acquire_recursive>
 800a162:	bf00      	nop
 800a164:	200170a4 	.word	0x200170a4

0800a168 <__malloc_unlock>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__malloc_unlock+0x8>)
 800a16a:	f000 b80c 	b.w	800a186 <__retarget_lock_release_recursive>
 800a16e:	bf00      	nop
 800a170:	200170a4 	.word	0x200170a4

0800a174 <_malloc_usable_size_r>:
 800a174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a178:	1f18      	subs	r0, r3, #4
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	bfbc      	itt	lt
 800a17e:	580b      	ldrlt	r3, [r1, r0]
 800a180:	18c0      	addlt	r0, r0, r3
 800a182:	4770      	bx	lr

0800a184 <__retarget_lock_acquire_recursive>:
 800a184:	4770      	bx	lr

0800a186 <__retarget_lock_release_recursive>:
 800a186:	4770      	bx	lr

0800a188 <_init>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	bf00      	nop
 800a18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18e:	bc08      	pop	{r3}
 800a190:	469e      	mov	lr, r3
 800a192:	4770      	bx	lr

0800a194 <_fini>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	bf00      	nop
 800a198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19a:	bc08      	pop	{r3}
 800a19c:	469e      	mov	lr, r3
 800a19e:	4770      	bx	lr
