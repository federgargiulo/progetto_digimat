
Digimat_accentratore_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005520  08005520  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  2000009c  080055c4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  080055c4  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f8b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004245  00000000  00000000  00043057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016eff  00000000  00000000  0004729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0005e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001590  00000000  00000000  0005f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf72  00000000  00000000  00060c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000226f6  00000000  00000000  0007cb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ae5e  00000000  00000000  0009f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a0d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004524  00000000  00000000  0013a128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800509c 	.word	0x0800509c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800509c 	.word	0x0800509c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <modem_at_cmd>:
static void User_Init(void);

/* USER CODE BEGIN PFP */


void modem_at_cmd(char* buffer, int n){
 8000594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000598:	b083      	sub	sp, #12

	for(uint8_t i=0; i<n; i++) {
 800059a:	f1b1 0800 	subs.w	r8, r1, #0
 800059e:	dd15      	ble.n	80005cc <modem_at_cmd+0x38>
 80005a0:	4681      	mov	r9, r0
 80005a2:	2400      	movs	r4, #0
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer+i, 1, 100);
 80005a4:	4f1f      	ldr	r7, [pc, #124]	; (8000624 <modem_at_cmd+0x90>)
 80005a6:	2664      	movs	r6, #100	; 0x64
 80005a8:	2501      	movs	r5, #1
 80005aa:	4633      	mov	r3, r6
 80005ac:	462a      	mov	r2, r5
 80005ae:	eb09 0104 	add.w	r1, r9, r4
 80005b2:	4638      	mov	r0, r7
 80005b4:	f002 fe81 	bl	80032ba <HAL_UART_Transmit>
		//printf("tx: %c\n",buffer[i]);
		HAL_UART_Receive(&huart1, &c, 1, 100);
 80005b8:	4633      	mov	r3, r6
 80005ba:	462a      	mov	r2, r5
 80005bc:	491a      	ldr	r1, [pc, #104]	; (8000628 <modem_at_cmd+0x94>)
 80005be:	4638      	mov	r0, r7
 80005c0:	f002 feed 	bl	800339e <HAL_UART_Receive>
	for(uint8_t i=0; i<n; i++) {
 80005c4:	3401      	adds	r4, #1
 80005c6:	b2e4      	uxtb	r4, r4
 80005c8:	4544      	cmp	r4, r8
 80005ca:	dbee      	blt.n	80005aa <modem_at_cmd+0x16>
		//printf("rx: %c\n",c);
	}

	//	memset(response,0,sizeof(response));
	char tredici='\r';
 80005cc:	230d      	movs	r3, #13
 80005ce:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tredici, 1, 100);
 80005d2:	4c14      	ldr	r4, [pc, #80]	; (8000624 <modem_at_cmd+0x90>)
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	2201      	movs	r2, #1
 80005d8:	f10d 0107 	add.w	r1, sp, #7
 80005dc:	4620      	mov	r0, r4
 80005de:	f002 fe6c 	bl	80032ba <HAL_UART_Transmit>
	//	printf("tx: %c\n",tredici);
	HAL_UART_Receive(&huart1, &c, 1, 100);
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	2201      	movs	r2, #1
 80005e6:	4910      	ldr	r1, [pc, #64]	; (8000628 <modem_at_cmd+0x94>)
 80005e8:	4620      	mov	r0, r4
 80005ea:	f002 fed8 	bl	800339e <HAL_UART_Receive>
	//	printf("rx: %c\n",c);
	int i=0;
	memset(risposta_uart,0,sizeof(risposta_uart));
 80005ee:	4c0f      	ldr	r4, [pc, #60]	; (800062c <modem_at_cmd+0x98>)
 80005f0:	2232      	movs	r2, #50	; 0x32
 80005f2:	2100      	movs	r1, #0
 80005f4:	4620      	mov	r0, r4
 80005f6:	f003 fefe 	bl	80043f6 <memset>
	do {
		//		if (lora.readable()) {
		HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 100);
 80005fa:	4d0b      	ldr	r5, [pc, #44]	; (8000628 <modem_at_cmd+0x94>)
 80005fc:	4f09      	ldr	r7, [pc, #36]	; (8000624 <modem_at_cmd+0x90>)
 80005fe:	2664      	movs	r6, #100	; 0x64
 8000600:	4633      	mov	r3, r6
 8000602:	2201      	movs	r2, #1
 8000604:	4629      	mov	r1, r5
 8000606:	4638      	mov	r0, r7
 8000608:	f002 fec9 	bl	800339e <HAL_UART_Receive>
		//printf("rx: %c",c);
		risposta_uart[i]=c;
 800060c:	782b      	ldrb	r3, [r5, #0]
 800060e:	f804 3b01 	strb.w	r3, [r4], #1
		i++;

		//	} while(c!='#' && c!='\r'&& c!=' ' && c!='\n');
	} while(c!=' ');
 8000612:	2b20      	cmp	r3, #32
 8000614:	d1f4      	bne.n	8000600 <modem_at_cmd+0x6c>
	printf("%s",risposta_uart);
 8000616:	4905      	ldr	r1, [pc, #20]	; (800062c <modem_at_cmd+0x98>)
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <modem_at_cmd+0x9c>)
 800061a:	f003 ffd5 	bl	80045c8 <iprintf>
}
 800061e:	b003      	add	sp, #12
 8000620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000624:	20000258 	.word	0x20000258
 8000628:	200000b9 	.word	0x200000b9
 800062c:	200000bc 	.word	0x200000bc
 8000630:	0800510c 	.word	0x0800510c

08000634 <wait4join>:

HAL_StatusTypeDef wait4join(){
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(risposta_uart,0,sizeof(risposta_uart));
 8000636:	2232      	movs	r2, #50	; 0x32
 8000638:	2100      	movs	r1, #0
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <wait4join+0x48>)
 800063c:	f003 fedb 	bl	80043f6 <memset>
		//		if(HAL_UART_Receive(&huart1, (uint8_t *) &response, 1, 100)){
		//			//        if (lora.readable()) {
		//
		//			printf("response: %s\n",response);
		//		}
		timeout_expired=HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 6000);
 8000640:	4d0f      	ldr	r5, [pc, #60]	; (8000680 <wait4join+0x4c>)
 8000642:	4f10      	ldr	r7, [pc, #64]	; (8000684 <wait4join+0x50>)
		if(timeout_expired==HAL_TIMEOUT){
			printf("Join fallito per timeout\n\r");
			return HAL_TIMEOUT;
		}
		risposta_uart[i]=c;
 8000644:	4e10      	ldr	r6, [pc, #64]	; (8000688 <wait4join+0x54>)
		timeout_expired=HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 6000);
 8000646:	f241 7370 	movw	r3, #6000	; 0x1770
 800064a:	2201      	movs	r2, #1
 800064c:	4629      	mov	r1, r5
 800064e:	4638      	mov	r0, r7
 8000650:	f002 fea5 	bl	800339e <HAL_UART_Receive>
 8000654:	4604      	mov	r4, r0
		if(timeout_expired==HAL_TIMEOUT){
 8000656:	2803      	cmp	r0, #3
 8000658:	d00a      	beq.n	8000670 <wait4join+0x3c>
		risposta_uart[i]=c;
 800065a:	f9b6 3000 	ldrsh.w	r3, [r6]
 800065e:	782a      	ldrb	r2, [r5, #0]
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <wait4join+0x48>)
 8000662:	54ca      	strb	r2, [r1, r3]
		i++;
 8000664:	3301      	adds	r3, #1
 8000666:	8033      	strh	r3, [r6, #0]

	}while(c!='d');
 8000668:	2a64      	cmp	r2, #100	; 0x64
 800066a:	d1ec      	bne.n	8000646 <wait4join+0x12>
	return HAL_OK;
 800066c:	2400      	movs	r4, #0
 800066e:	e002      	b.n	8000676 <wait4join+0x42>
			printf("Join fallito per timeout\n\r");
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <wait4join+0x58>)
 8000672:	f003 ffa9 	bl	80045c8 <iprintf>
}
 8000676:	4620      	mov	r0, r4
 8000678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800067a:	bf00      	nop
 800067c:	200000bc 	.word	0x200000bc
 8000680:	200000b9 	.word	0x200000b9
 8000684:	20000258 	.word	0x20000258
 8000688:	200000ba 	.word	0x200000ba
 800068c:	08005110 	.word	0x08005110

08000690 <lora_join>:

void lora_join(){
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Test seriale no pc\r\n");
 8000692:	4836      	ldr	r0, [pc, #216]	; (800076c <lora_join+0xdc>)
 8000694:	f004 f81e 	bl	80046d4 <puts>
	modem_at_cmd(msg1,(int)strlen(msg1));
 8000698:	4b35      	ldr	r3, [pc, #212]	; (8000770 <lora_join+0xe0>)
 800069a:	681c      	ldr	r4, [r3, #0]
 800069c:	4620      	mov	r0, r4
 800069e:	f7ff fd9f 	bl	80001e0 <strlen>
 80006a2:	4601      	mov	r1, r0
 80006a4:	4620      	mov	r0, r4
 80006a6:	f7ff ff75 	bl	8000594 <modem_at_cmd>
	printf("Inviato AT\r\n");
 80006aa:	4832      	ldr	r0, [pc, #200]	; (8000774 <lora_join+0xe4>)
 80006ac:	f004 f812 	bl	80046d4 <puts>
	HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f001 fafc 	bl	8001cb0 <HAL_Delay>
	//  	modem_at_cmd(msg_at_verbose,(int)strlen(msg_at_verbose));
	//	printf("Verbose attivato\r\n");



	HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 faf8 	bl	8001cb0 <HAL_Delay>
	modem_at_cmd(msg6,(int)strlen(msg6));
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <lora_join+0xe8>)
 80006c2:	681c      	ldr	r4, [r3, #0]
 80006c4:	4620      	mov	r0, r4
 80006c6:	f7ff fd8b 	bl	80001e0 <strlen>
 80006ca:	4601      	mov	r1, r0
 80006cc:	4620      	mov	r0, r4
 80006ce:	f7ff ff61 	bl	8000594 <modem_at_cmd>
	printf("Inviato band\r\n");
 80006d2:	482a      	ldr	r0, [pc, #168]	; (800077c <lora_join+0xec>)
 80006d4:	f003 fffe 	bl	80046d4 <puts>


	HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f001 fae8 	bl	8001cb0 <HAL_Delay>
	modem_at_cmd(msg2,(int)strlen(msg2));
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <lora_join+0xf0>)
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	4620      	mov	r0, r4
 80006e6:	f7ff fd7b 	bl	80001e0 <strlen>
 80006ea:	4601      	mov	r1, r0
 80006ec:	4620      	mov	r0, r4
 80006ee:	f7ff ff51 	bl	8000594 <modem_at_cmd>
	printf("Inviato EUI\r\n");
 80006f2:	4824      	ldr	r0, [pc, #144]	; (8000784 <lora_join+0xf4>)
 80006f4:	f003 ffee 	bl	80046d4 <puts>
	HAL_Delay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fc:	f001 fad8 	bl	8001cb0 <HAL_Delay>
	//	HAL_Delay(1000);
	//	modem_at_cmd(msg_at_appeui,(int)strlen(msg_at_appeui));
	//	printf("Inviato band\r\n");


	modem_at_cmd(msg3,(int)strlen(msg3));
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <lora_join+0xf8>)
 8000702:	681c      	ldr	r4, [r3, #0]
 8000704:	4620      	mov	r0, r4
 8000706:	f7ff fd6b 	bl	80001e0 <strlen>
 800070a:	4601      	mov	r1, r0
 800070c:	4620      	mov	r0, r4
 800070e:	f7ff ff41 	bl	8000594 <modem_at_cmd>
	printf("Inviato AK\r\n");
 8000712:	481e      	ldr	r0, [pc, #120]	; (800078c <lora_join+0xfc>)
 8000714:	f003 ffde 	bl	80046d4 <puts>
	HAL_Delay(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071c:	f001 fac8 	bl	8001cb0 <HAL_Delay>
	modem_at_cmd("AT+DC=0",7);
 8000720:	2107      	movs	r1, #7
 8000722:	481b      	ldr	r0, [pc, #108]	; (8000790 <lora_join+0x100>)
 8000724:	f7ff ff36 	bl	8000594 <modem_at_cmd>
	printf("Disabled DUTY Cycle\r\n");
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <lora_join+0x104>)
 800072a:	f003 ffd3 	bl	80046d4 <puts>
	//		  	    printf("Inviato JOIN Delay RX1\r\n");
	//		  	    modem_at_cmd(msg10,(int)strlen(msg10));
	//		  	    printf("Inviato JOIN Delay RX2\r\n");

	do{
		modem_at_cmd(msg4,(int)strlen(msg4));
 800072e:	4f1a      	ldr	r7, [pc, #104]	; (8000798 <lora_join+0x108>)
		printf("Inviato JOIN\r\n");
 8000730:	4e1a      	ldr	r6, [pc, #104]	; (800079c <lora_join+0x10c>)
		HAL_Delay(1000);
 8000732:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		modem_at_cmd(msg4,(int)strlen(msg4));
 8000736:	683c      	ldr	r4, [r7, #0]
 8000738:	4620      	mov	r0, r4
 800073a:	f7ff fd51 	bl	80001e0 <strlen>
 800073e:	4601      	mov	r1, r0
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff ff27 	bl	8000594 <modem_at_cmd>
		printf("Inviato JOIN\r\n");
 8000746:	4630      	mov	r0, r6
 8000748:	f003 ffc4 	bl	80046d4 <puts>
		HAL_Delay(1000);
 800074c:	4628      	mov	r0, r5
 800074e:	f001 faaf 	bl	8001cb0 <HAL_Delay>
	}
	while (HAL_OK!=wait4join());
 8000752:	f7ff ff6f 	bl	8000634 <wait4join>
 8000756:	2800      	cmp	r0, #0
 8000758:	d1ed      	bne.n	8000736 <lora_join+0xa6>

	HAL_Delay(1000);
 800075a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075e:	f001 faa7 	bl	8001cb0 <HAL_Delay>
	printf("Inzialization done\r\n");
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <lora_join+0x110>)
 8000764:	f003 ffb6 	bl	80046d4 <puts>

	////	modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
	//	printf("Inviato msg_ascii\r\n");
	//	HAL_Delay(1000);
}
 8000768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800076a:	bf00      	nop
 800076c:	0800512c 	.word	0x0800512c
 8000770:	20000004 	.word	0x20000004
 8000774:	08005140 	.word	0x08005140
 8000778:	20000014 	.word	0x20000014
 800077c:	0800514c 	.word	0x0800514c
 8000780:	20000008 	.word	0x20000008
 8000784:	0800515c 	.word	0x0800515c
 8000788:	2000000c 	.word	0x2000000c
 800078c:	0800516c 	.word	0x0800516c
 8000790:	08005178 	.word	0x08005178
 8000794:	08005180 	.word	0x08005180
 8000798:	20000010 	.word	0x20000010
 800079c:	08005198 	.word	0x08005198
 80007a0:	080051a8 	.word	0x080051a8

080007a4 <MX_BlueNRG_MS_Init>:
	PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80007a4:	b500      	push	{lr}
 80007a6:	b08f      	sub	sp, #60	; 0x3c
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80007a8:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_BlueNRG_MS_Init+0x198>)
 80007aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007ae:	900c      	str	r0, [sp, #48]	; 0x30
 80007b0:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80007b4:	3308      	adds	r3, #8
 80007b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007ba:	900a      	str	r0, [sp, #40]	; 0x28
 80007bc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007c0:	2101      	movs	r1, #1
 80007c2:	2000      	movs	r0, #0
 80007c4:	f001 f932 	bl	8001a2c <BSP_PB_Init>
	BSP_LED_Init(LED2);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 f8dd 	bl	8001988 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f001 f9a8 	bl	8001b24 <BSP_COM_Init>
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 f97d 	bl	8001ad4 <BSP_PB_GetState>
 80007da:	b2c0      	uxtb	r0, r0
 80007dc:	4b58      	ldr	r3, [pc, #352]	; (8000940 <MX_BlueNRG_MS_Init+0x19c>)
 80007de:	7018      	strb	r0, [r3, #0]
	hci_init(user_notify, NULL);
 80007e0:	2100      	movs	r1, #0
 80007e2:	4858      	ldr	r0, [pc, #352]	; (8000944 <MX_BlueNRG_MS_Init+0x1a0>)
 80007e4:	f003 fa36 	bl	8003c54 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80007e8:	f10d 0116 	add.w	r1, sp, #22
 80007ec:	f10d 0019 	add.w	r0, sp, #25
 80007f0:	f003 f974 	bl	8003adc <getBlueNRGVersion>
	hci_reset();
 80007f4:	f003 f994 	bl	8003b20 <hci_reset>
	HAL_Delay(100);
 80007f8:	2064      	movs	r0, #100	; 0x64
 80007fa:	f001 fa59 	bl	8001cb0 <HAL_Delay>
	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80007fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8000802:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8000806:	4850      	ldr	r0, [pc, #320]	; (8000948 <MX_BlueNRG_MS_Init+0x1a4>)
 8000808:	f003 fede 	bl	80045c8 <iprintf>
	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800080c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000810:	2b30      	cmp	r3, #48	; 0x30
 8000812:	d902      	bls.n	800081a <MX_BlueNRG_MS_Init+0x76>
		bnrg_expansion_board = IDB05A1;
 8000814:	4b4d      	ldr	r3, [pc, #308]	; (800094c <MX_BlueNRG_MS_Init+0x1a8>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
	if (BLE_Role == CLIENT) {
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <MX_BlueNRG_MS_Init+0x1ac>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d13f      	bne.n	80008a2 <MX_BlueNRG_MS_Init+0xfe>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000822:	ab0e      	add	r3, sp, #56	; 0x38
 8000824:	e913 0003 	ldmdb	r3, {r0, r1}
 8000828:	9008      	str	r0, [sp, #32]
 800082a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800082e:	aa08      	add	r2, sp, #32
 8000830:	2106      	movs	r1, #6
 8000832:	2000      	movs	r0, #0
 8000834:	f003 f902 	bl	8003a3c <aci_hal_write_config_data>
	if (ret) {
 8000838:	4601      	mov	r1, r0
 800083a:	2800      	cmp	r0, #0
 800083c:	d138      	bne.n	80008b0 <MX_BlueNRG_MS_Init+0x10c>
	ret = aci_gatt_init();
 800083e:	f002 ff7b 	bl	8003738 <aci_gatt_init>
	if (ret) {
 8000842:	2800      	cmp	r0, #0
 8000844:	d138      	bne.n	80008b8 <MX_BlueNRG_MS_Init+0x114>
	if (BLE_Role == SERVER) {
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <MX_BlueNRG_MS_Init+0x1ac>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d038      	beq.n	80008c0 <MX_BlueNRG_MS_Init+0x11c>
		if (bnrg_expansion_board == IDB05A1) {
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <MX_BlueNRG_MS_Init+0x1a8>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d04e      	beq.n	80008f4 <MX_BlueNRG_MS_Init+0x150>
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000856:	f10d 031a 	add.w	r3, sp, #26
 800085a:	aa07      	add	r2, sp, #28
 800085c:	f10d 011e 	add.w	r1, sp, #30
 8000860:	2003      	movs	r0, #3
 8000862:	f002 fe4e 	bl	8003502 <aci_gap_init_IDB04A1>
	if (ret != BLE_STATUS_SUCCESS) {
 8000866:	2800      	cmp	r0, #0
 8000868:	d151      	bne.n	800090e <MX_BlueNRG_MS_Init+0x16a>
	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800086a:	2001      	movs	r0, #1
 800086c:	9003      	str	r0, [sp, #12]
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MX_BlueNRG_MS_Init+0x1b0>)
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	2100      	movs	r1, #0
 8000874:	9101      	str	r1, [sp, #4]
 8000876:	2310      	movs	r3, #16
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2307      	movs	r3, #7
 800087c:	460a      	mov	r2, r1
 800087e:	f002 fed3 	bl	8003628 <aci_gap_set_auth_requirement>
	if (ret == BLE_STATUS_SUCCESS) {
 8000882:	2800      	cmp	r0, #0
 8000884:	d047      	beq.n	8000916 <MX_BlueNRG_MS_Init+0x172>
	if (BLE_Role == SERVER) {
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_BlueNRG_MS_Init+0x1ac>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d047      	beq.n	800091e <MX_BlueNRG_MS_Init+0x17a>
		printf("CLIENT: BLE Stack Initialized\n");
 800088e:	4832      	ldr	r0, [pc, #200]	; (8000958 <MX_BlueNRG_MS_Init+0x1b4>)
 8000890:	f003 ff20 	bl	80046d4 <puts>
	ret = aci_hal_set_tx_power_level(1,4);
 8000894:	2104      	movs	r1, #4
 8000896:	2001      	movs	r0, #1
 8000898:	f003 f8fe 	bl	8003a98 <aci_hal_set_tx_power_level>
}
 800089c:	b00f      	add	sp, #60	; 0x3c
 800089e:	f85d fb04 	ldr.w	pc, [sp], #4
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80008a2:	ab0a      	add	r3, sp, #40	; 0x28
 80008a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a8:	9008      	str	r0, [sp, #32]
 80008aa:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80008ae:	e7be      	b.n	800082e <MX_BlueNRG_MS_Init+0x8a>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 80008b0:	482a      	ldr	r0, [pc, #168]	; (800095c <MX_BlueNRG_MS_Init+0x1b8>)
 80008b2:	f003 fe89 	bl	80045c8 <iprintf>
 80008b6:	e7c2      	b.n	800083e <MX_BlueNRG_MS_Init+0x9a>
		printf("GATT_Init failed.\n");
 80008b8:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_BlueNRG_MS_Init+0x1bc>)
 80008ba:	f003 ff0b 	bl	80046d4 <puts>
 80008be:	e7c2      	b.n	8000846 <MX_BlueNRG_MS_Init+0xa2>
		if (bnrg_expansion_board == IDB05A1) {
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_BlueNRG_MS_Init+0x1a8>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d008      	beq.n	80008da <MX_BlueNRG_MS_Init+0x136>
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80008c8:	f10d 031a 	add.w	r3, sp, #26
 80008cc:	aa07      	add	r2, sp, #28
 80008ce:	f10d 011e 	add.w	r1, sp, #30
 80008d2:	2001      	movs	r0, #1
 80008d4:	f002 fe15 	bl	8003502 <aci_gap_init_IDB04A1>
 80008d8:	e7c5      	b.n	8000866 <MX_BlueNRG_MS_Init+0xc2>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80008da:	f10d 031a 	add.w	r3, sp, #26
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	ab07      	add	r3, sp, #28
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	f10d 031e 	add.w	r3, sp, #30
 80008e8:	2207      	movs	r2, #7
 80008ea:	2100      	movs	r1, #0
 80008ec:	2001      	movs	r0, #1
 80008ee:	f002 fdcf 	bl	8003490 <aci_gap_init_IDB05A1>
 80008f2:	e7b8      	b.n	8000866 <MX_BlueNRG_MS_Init+0xc2>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80008f4:	f10d 031a 	add.w	r3, sp, #26
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	ab07      	add	r3, sp, #28
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	f10d 031e 	add.w	r3, sp, #30
 8000902:	2207      	movs	r2, #7
 8000904:	2100      	movs	r1, #0
 8000906:	2004      	movs	r0, #4
 8000908:	f002 fdc2 	bl	8003490 <aci_gap_init_IDB05A1>
 800090c:	e7ab      	b.n	8000866 <MX_BlueNRG_MS_Init+0xc2>
		printf("GAP_Init failed.\n");
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_BlueNRG_MS_Init+0x1c0>)
 8000910:	f003 fee0 	bl	80046d4 <puts>
 8000914:	e7a9      	b.n	800086a <MX_BlueNRG_MS_Init+0xc6>
		printf("BLE Stack Initialized.\n");
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <MX_BlueNRG_MS_Init+0x1c4>)
 8000918:	f003 fedc 	bl	80046d4 <puts>
 800091c:	e7b3      	b.n	8000886 <MX_BlueNRG_MS_Init+0xe2>
		printf("SERVER: BLE Stack Initialized\n");
 800091e:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_BlueNRG_MS_Init+0x1c8>)
 8000920:	f003 fed8 	bl	80046d4 <puts>
		ret = Add_Sample_Service();
 8000924:	f000 f8ac 	bl	8000a80 <Add_Sample_Service>
		if (ret == BLE_STATUS_SUCCESS)
 8000928:	b918      	cbnz	r0, 8000932 <MX_BlueNRG_MS_Init+0x18e>
			printf("Service added successfully.\n");
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_BlueNRG_MS_Init+0x1cc>)
 800092c:	f003 fed2 	bl	80046d4 <puts>
 8000930:	e7b0      	b.n	8000894 <MX_BlueNRG_MS_Init+0xf0>
			printf("Error while adding service.\n");
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <MX_BlueNRG_MS_Init+0x1d0>)
 8000934:	f003 fece 	bl	80046d4 <puts>
 8000938:	e7ac      	b.n	8000894 <MX_BlueNRG_MS_Init+0xf0>
 800093a:	bf00      	nop
 800093c:	080050b4 	.word	0x080050b4
 8000940:	20000018 	.word	0x20000018
 8000944:	08000e29 	.word	0x08000e29
 8000948:	080051bc 	.word	0x080051bc
 800094c:	200000b8 	.word	0x200000b8
 8000950:	20000000 	.word	0x20000000
 8000954:	0001e240 	.word	0x0001e240
 8000958:	08005288 	.word	0x08005288
 800095c:	080051d0 	.word	0x080051d0
 8000960:	080051f0 	.word	0x080051f0
 8000964:	08005204 	.word	0x08005204
 8000968:	08005218 	.word	0x08005218
 800096c:	08005230 	.word	0x08005230
 8000970:	08005250 	.word	0x08005250
 8000974:	0800526c 	.word	0x0800526c

08000978 <MX_BlueNRG_MS_Process>:
{
 8000978:	b530      	push	{r4, r5, lr}
 800097a:	b087      	sub	sp, #28



static void User_Process(void)
{
	if (set_connectable)
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <MX_BlueNRG_MS_Process+0xd4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	bb0b      	cbnz	r3, 80009c6 <MX_BlueNRG_MS_Process+0x4e>
		set_connectable = FALSE;
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
				HAL_TIM_Base_Start_IT(&htim3);
	}

	if (BLE_Role == CLIENT)
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <MX_BlueNRG_MS_Process+0xd8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b9bb      	cbnz	r3, 80009b8 <MX_BlueNRG_MS_Process+0x40>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_BlueNRG_MS_Process+0xdc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	b113      	cbz	r3, 8000994 <MX_BlueNRG_MS_Process+0x1c>
 800098e:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <MX_BlueNRG_MS_Process+0xe0>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b343      	cbz	r3, 80009e6 <MX_BlueNRG_MS_Process+0x6e>
			startReadTXCharHandle();
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <MX_BlueNRG_MS_Process+0xdc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	b113      	cbz	r3, 80009a0 <MX_BlueNRG_MS_Process+0x28>
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_BlueNRG_MS_Process+0xe4>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b32b      	cbz	r3, 80009ec <MX_BlueNRG_MS_Process+0x74>
			startReadRXCharHandle();
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_BlueNRG_MS_Process+0xdc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b143      	cbz	r3, 80009b8 <MX_BlueNRG_MS_Process+0x40>
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_BlueNRG_MS_Process+0xe0>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b12b      	cbz	r3, 80009b8 <MX_BlueNRG_MS_Process+0x40>
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_BlueNRG_MS_Process+0xe4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b113      	cbz	r3, 80009b8 <MX_BlueNRG_MS_Process+0x40>
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_BlueNRG_MS_Process+0xe8>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b1e3      	cbz	r3, 80009f2 <MX_BlueNRG_MS_Process+0x7a>
			enableNotification();
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed)
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_BlueNRG_MS_Process+0xec>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b9fb      	cbnz	r3, 80009fe <MX_BlueNRG_MS_Process+0x86>
	hci_user_evt_proc();
 80009be:	f003 fa4f 	bl	8003e60 <hci_user_evt_proc>
}
 80009c2:	b007      	add	sp, #28
 80009c4:	bd30      	pop	{r4, r5, pc}
		lora_join();
 80009c6:	f7ff fe63 	bl	8000690 <lora_join>
		Make_Connection();
 80009ca:	f000 f8af 	bl	8000b2c <Make_Connection>
		set_connectable = FALSE;
 80009ce:	2000      	movs	r0, #0
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_BlueNRG_MS_Process+0xd4>)
 80009d2:	7018      	strb	r0, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80009d4:	f001 f87e 	bl	8001ad4 <BSP_PB_GetState>
 80009d8:	b2c0      	uxtb	r0, r0
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_BlueNRG_MS_Process+0xf0>)
 80009dc:	7018      	strb	r0, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim3);
 80009de:	4823      	ldr	r0, [pc, #140]	; (8000a6c <MX_BlueNRG_MS_Process+0xf4>)
 80009e0:	f002 f8e8 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 80009e4:	e7cd      	b.n	8000982 <MX_BlueNRG_MS_Process+0xa>
			startReadTXCharHandle();
 80009e6:	f000 f8f7 	bl	8000bd8 <startReadTXCharHandle>
 80009ea:	e7d9      	b.n	80009a0 <MX_BlueNRG_MS_Process+0x28>
			startReadRXCharHandle();
 80009ec:	f000 f914 	bl	8000c18 <startReadRXCharHandle>
 80009f0:	e7d6      	b.n	80009a0 <MX_BlueNRG_MS_Process+0x28>
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 80009f2:	2000      	movs	r0, #0
 80009f4:	f001 f806 	bl	8001a04 <BSP_LED_Off>
			enableNotification();
 80009f8:	f000 f978 	bl	8000cec <enableNotification>
 80009fc:	e7dc      	b.n	80009b8 <MX_BlueNRG_MS_Process+0x40>
	{
		/* Debouncing */
		HAL_Delay(50);
 80009fe:	2032      	movs	r0, #50	; 0x32
 8000a00:	f001 f956 	bl	8001cb0 <HAL_Delay>

		/* Wait until the User Button is released */
		while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000a04:	2500      	movs	r5, #0
 8000a06:	4c18      	ldr	r4, [pc, #96]	; (8000a68 <MX_BlueNRG_MS_Process+0xf0>)
 8000a08:	4628      	mov	r0, r5
 8000a0a:	f001 f863 	bl	8001ad4 <BSP_PB_GetState>
 8000a0e:	7823      	ldrb	r3, [r4, #0]
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	095b      	lsrs	r3, r3, #5
 8000a16:	4298      	cmp	r0, r3
 8000a18:	d0f6      	beq.n	8000a08 <MX_BlueNRG_MS_Process+0x90>

		/* Debouncing */
		HAL_Delay(50);
 8000a1a:	2032      	movs	r0, #50	; 0x32
 8000a1c:	f001 f948 	bl	8001cb0 <HAL_Delay>

		if (connected && notification_enabled)
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_BlueNRG_MS_Process+0xdc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	b113      	cbz	r3, 8000a2c <MX_BlueNRG_MS_Process+0xb4>
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_BlueNRG_MS_Process+0xe8>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b91b      	cbnz	r3, 8000a34 <MX_BlueNRG_MS_Process+0xbc>
			 * is called in main().
			 * E.g. it can be enabled for debugging. */
		}

		/* Reset the User Button flag */
		user_button_pressed = 0;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_BlueNRG_MS_Process+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e7c4      	b.n	80009be <MX_BlueNRG_MS_Process+0x46>
			uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000a34:	ac01      	add	r4, sp, #4
 8000a36:	4d0e      	ldr	r5, [pc, #56]	; (8000a70 <MX_BlueNRG_MS_Process+0xf8>)
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	6023      	str	r3, [r4, #0]
			sendData(data, sizeof(data));
 8000a40:	2114      	movs	r1, #20
 8000a42:	a801      	add	r0, sp, #4
 8000a44:	f000 f92a 	bl	8000c9c <sendData>
 8000a48:	e7f0      	b.n	8000a2c <MX_BlueNRG_MS_Process+0xb4>
 8000a4a:	bf00      	nop
 8000a4c:	20000019 	.word	0x20000019
 8000a50:	20000000 	.word	0x20000000
 8000a54:	200000f4 	.word	0x200000f4
 8000a58:	200000fb 	.word	0x200000fb
 8000a5c:	200000fa 	.word	0x200000fa
 8000a60:	200000fc 	.word	0x200000fc
 8000a64:	200000ee 	.word	0x200000ee
 8000a68:	20000018 	.word	0x20000018
 8000a6c:	20000210 	.word	0x20000210
 8000a70:	080052a8 	.word	0x080052a8

08000a74 <BSP_PB_Callback>:
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
	/* Set the User Button flag */
	user_button_pressed = 1;
 8000a74:	4b01      	ldr	r3, [pc, #4]	; (8000a7c <BSP_PB_Callback+0x8>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
}
 8000a7a:	4770      	bx	lr
 8000a7c:	200000ee 	.word	0x200000ee

08000a80 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000a80:	b510      	push	{r4, lr}
 8000a82:	b092      	sub	sp, #72	; 0x48
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
	 */

	const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000a84:	4c25      	ldr	r4, [pc, #148]	; (8000b1c <Add_Sample_Service+0x9c>)
 8000a86:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8000a8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000a92:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8000a96:	f104 0310 	add.w	r3, r4, #16
 8000a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000aa0:	f10d 0e18 	add.w	lr, sp, #24
 8000aa4:	3420      	adds	r4, #32
 8000aa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aaa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

	ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <Add_Sample_Service+0xa0>)
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4661      	mov	r1, ip
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f002 fe5a 	bl	8003772 <aci_gatt_add_serv>
	if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000abe:	bb40      	cbnz	r0, 8000b12 <Add_Sample_Service+0x92>

	ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <Add_Sample_Service+0xa4>)
 8000ac2:	9305      	str	r3, [sp, #20]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9304      	str	r3, [sp, #16]
 8000ac8:	2310      	movs	r3, #16
 8000aca:	9303      	str	r3, [sp, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	9202      	str	r2, [sp, #8]
 8000ad0:	9201      	str	r2, [sp, #4]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	aa0a      	add	r2, sp, #40	; 0x28
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <Add_Sample_Service+0xa0>)
 8000adc:	8800      	ldrh	r0, [r0, #0]
 8000ade:	f002 fe87 	bl	80037f0 <aci_gatt_add_char>
			16, 1, &TXCharHandle);
	if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000ae2:	b9c0      	cbnz	r0, 8000b16 <Add_Sample_Service+0x96>

	ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <Add_Sample_Service+0xa8>)
 8000ae6:	9305      	str	r3, [sp, #20]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	9304      	str	r3, [sp, #16]
 8000aec:	2210      	movs	r2, #16
 8000aee:	9203      	str	r2, [sp, #12]
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2300      	movs	r3, #0
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	230c      	movs	r3, #12
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2314      	movs	r3, #20
 8000afc:	aa06      	add	r2, sp, #24
 8000afe:	2102      	movs	r1, #2
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <Add_Sample_Service+0xa0>)
 8000b02:	8800      	ldrh	r0, [r0, #0]
 8000b04:	f002 fe74 	bl	80037f0 <aci_gatt_add_char>
	PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
	return BLE_STATUS_SUCCESS;

	fail:
	PRINTF("Error while adding Sample Service.\n");
	return BLE_STATUS_ERROR ;
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	bf18      	it	ne
 8000b0c:	2047      	movne	r0, #71	; 0x47
}
 8000b0e:	b012      	add	sp, #72	; 0x48
 8000b10:	bd10      	pop	{r4, pc}
	return BLE_STATUS_ERROR ;
 8000b12:	2047      	movs	r0, #71	; 0x47
 8000b14:	e7fb      	b.n	8000b0e <Add_Sample_Service+0x8e>
 8000b16:	2047      	movs	r0, #71	; 0x47
 8000b18:	e7f9      	b.n	8000b0e <Add_Sample_Service+0x8e>
 8000b1a:	bf00      	nop
 8000b1c:	080050c4 	.word	0x080050c4
 8000b20:	20000100 	.word	0x20000100
 8000b24:	200000f2 	.word	0x200000f2
 8000b28:	200000f0 	.word	0x200000f0

08000b2c <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000b2c:	b500      	push	{lr}
 8000b2e:	b08d      	sub	sp, #52	; 0x34
	tBleStatus ret;

	if(BLE_Role == CLIENT) {
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <Make_Connection+0x98>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	bb2b      	cbnz	r3, 8000b82 <Make_Connection+0x56>

		printf("Client Create Connection\n");
 8000b36:	4824      	ldr	r0, [pc, #144]	; (8000bc8 <Make_Connection+0x9c>)
 8000b38:	f003 fdcc 	bl	80046d4 <puts>
		tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <Make_Connection+0xa0>)
 8000b3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b42:	9008      	str	r0, [sp, #32]
 8000b44:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24

		BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 ff51 	bl	80019f0 <BSP_LED_On>

		/*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
		 */
		ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000b4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b52:	9306      	str	r3, [sp, #24]
 8000b54:	9305      	str	r3, [sp, #20]
 8000b56:	233c      	movs	r3, #60	; 0x3c
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	9203      	str	r2, [sp, #12]
 8000b5e:	2328      	movs	r3, #40	; 0x28
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	ab08      	add	r3, sp, #32
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	f002 fd9c 	bl	80036aa <aci_gap_create_connection>
				SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

		if (ret != 0){
 8000b72:	b318      	cbz	r0, 8000bbc <Make_Connection+0x90>
			printf("Error while starting connection.\n");
 8000b74:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <Make_Connection+0xa4>)
 8000b76:	f003 fdad 	bl	80046d4 <puts>
			HAL_Delay(100);
 8000b7a:	2064      	movs	r0, #100	; 0x64
 8000b7c:	f001 f898 	bl	8001cb0 <HAL_Delay>
 8000b80:	e01c      	b.n	8000bbc <Make_Connection+0x90>
		}

	} else  {

		const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <Make_Connection+0xa8>)
 8000b84:	f10d 0c20 	add.w	ip, sp, #32
 8000b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000b8e:	f88c 3000 	strb.w	r3, [ip]

		/* disable scan response */
		hci_le_set_scan_resp_data(0,NULL);
 8000b92:	2100      	movs	r1, #0
 8000b94:	4608      	mov	r0, r1
 8000b96:	f003 f81a 	bl	8003bce <hci_le_set_scan_resp_data>
		/*
    Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
    Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
    Slave_Conn_Interval_Max
		 */
		ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	9006      	str	r0, [sp, #24]
 8000b9e:	9005      	str	r0, [sp, #20]
 8000ba0:	9004      	str	r0, [sp, #16]
 8000ba2:	9003      	str	r0, [sp, #12]
 8000ba4:	ab08      	add	r3, sp, #32
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	230d      	movs	r3, #13
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	9000      	str	r0, [sp, #0]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb8:	f002 fcd8 	bl	800356c <aci_gap_set_discoverable>
				NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
		PRINTF("%d\n",ret);
	}
}
 8000bbc:	b00d      	add	sp, #52	; 0x34
 8000bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08005390 	.word	0x08005390
 8000bcc:	080050f4 	.word	0x080050f4
 8000bd0:	080053ac 	.word	0x080053ac
 8000bd4:	080053d0 	.word	0x080053d0

08000bd8 <startReadTXCharHandle>:
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
	if (!start_read_tx_char_handle)
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <startReadTXCharHandle+0x34>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b103      	cbz	r3, 8000be0 <startReadTXCharHandle+0x8>
 8000bde:	4770      	bx	lr
{
 8000be0:	b510      	push	{r4, lr}
 8000be2:	b086      	sub	sp, #24
	{
		PRINTF("Start reading TX Char Handle\n");

		const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000be4:	ac02      	add	r4, sp, #8
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <startReadTXCharHandle+0x38>)
 8000be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <startReadTXCharHandle+0x3c>)
 8000bf0:	8818      	ldrh	r0, [r3, #0]
 8000bf2:	9400      	str	r4, [sp, #0]
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fe8a 	bl	8003916 <aci_gatt_disc_charac_by_uuid>
		start_read_tx_char_handle = TRUE;
 8000c02:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <startReadTXCharHandle+0x34>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
	}
}
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd10      	pop	{r4, pc}
 8000c0c:	20000103 	.word	0x20000103
 8000c10:	080050d4 	.word	0x080050d4
 8000c14:	200000f8 	.word	0x200000f8

08000c18 <startReadRXCharHandle>:
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
	if (!start_read_rx_char_handle)
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <startReadRXCharHandle+0x34>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b103      	cbz	r3, 8000c20 <startReadRXCharHandle+0x8>
 8000c1e:	4770      	bx	lr
{
 8000c20:	b510      	push	{r4, lr}
 8000c22:	b086      	sub	sp, #24
	{
		PRINTF("Start reading RX Char Handle\n");

		const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000c24:	ac02      	add	r4, sp, #8
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <startReadRXCharHandle+0x38>)
 8000c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <startReadRXCharHandle+0x3c>)
 8000c30:	8818      	ldrh	r0, [r3, #0]
 8000c32:	9400      	str	r4, [sp, #0]
 8000c34:	2302      	movs	r3, #2
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	b280      	uxth	r0, r0
 8000c3e:	f002 fe6a 	bl	8003916 <aci_gatt_disc_charac_by_uuid>
		start_read_rx_char_handle = TRUE;
 8000c42:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <startReadRXCharHandle+0x34>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
	}
}
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd10      	pop	{r4, pc}
 8000c4c:	20000102 	.word	0x20000102
 8000c50:	080050e4 	.word	0x080050e4
 8000c54:	200000f8 	.word	0x200000f8

08000c58 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	4604      	mov	r4, r0
	BSP_LED_Toggle(LED2);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 fedb 	bl	8001a18 <BSP_LED_Toggle>
//	}


	/* USER CODE BEGIN 1 */

	if(data_buffer[0]=='U') memcpy(nfc_buffer,data_buffer,20);
 8000c62:	7823      	ldrb	r3, [r4, #0]
 8000c64:	2b55      	cmp	r3, #85	; 0x55
 8000c66:	bf0c      	ite	eq
 8000c68:	4b09      	ldreq	r3, [pc, #36]	; (8000c90 <receiveData+0x38>)

	else memcpy(vibration_buffer,data_buffer,20);
 8000c6a:	4b0a      	ldrne	r3, [pc, #40]	; (8000c94 <receiveData+0x3c>)
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000c72:	68a0      	ldr	r0, [r4, #8]
 8000c74:	68e1      	ldr	r1, [r4, #12]
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	f8c3 c004 	str.w	ip, [r3, #4]
 8000c7c:	6098      	str	r0, [r3, #8]
 8000c7e:	60d9      	str	r1, [r3, #12]
 8000c80:	6922      	ldr	r2, [r4, #16]
 8000c82:	611a      	str	r2, [r3, #16]



	/* USER CODE END 1 */
	fflush(stdout);
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <receiveData+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6898      	ldr	r0, [r3, #8]
 8000c8a:	f003 fa77 	bl	800417c <fflush>
}
 8000c8e:	bd10      	pop	{r4, pc}
 8000c90:	200002e0 	.word	0x200002e0
 8000c94:	200003a8 	.word	0x200003a8
 8000c98:	20000038 	.word	0x20000038

08000c9c <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000c9c:	b500      	push	{lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	460a      	mov	r2, r1
	if(BLE_Role == SERVER) {
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <sendData+0x3c>)
 8000ca6:	7809      	ldrb	r1, [r1, #0]
 8000ca8:	2901      	cmp	r1, #1
 8000caa:	d00b      	beq.n	8000cc4 <sendData+0x28>
		aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
	}
	else {
		aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000cac:	490b      	ldr	r1, [pc, #44]	; (8000cdc <sendData+0x40>)
 8000cae:	8808      	ldrh	r0, [r1, #0]
 8000cb0:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <sendData+0x44>)
 8000cb2:	8809      	ldrh	r1, [r1, #0]
 8000cb4:	3101      	adds	r1, #1
 8000cb6:	b289      	uxth	r1, r1
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	f002 fe8f 	bl	80039dc <aci_gatt_write_without_response>
	}
}
 8000cbe:	b003      	add	sp, #12
 8000cc0:	f85d fb04 	ldr.w	pc, [sp], #4
		aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000cc4:	9000      	str	r0, [sp, #0]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4906      	ldr	r1, [pc, #24]	; (8000ce4 <sendData+0x48>)
 8000ccc:	8809      	ldrh	r1, [r1, #0]
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <sendData+0x4c>)
 8000cd0:	8800      	ldrh	r0, [r0, #0]
 8000cd2:	f002 fded 	bl	80038b0 <aci_gatt_update_char_value>
 8000cd6:	e7f2      	b.n	8000cbe <sendData+0x22>
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	200000f8 	.word	0x200000f8
 8000ce0:	200000fe 	.word	0x200000fe
 8000ce4:	200000f2 	.word	0x200000f2
 8000ce8:	20000100 	.word	0x20000100

08000cec <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	b082      	sub	sp, #8
	uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f8ad 3004 	strh.w	r3, [sp, #4]

	uint32_t tickstart = HAL_GetTick();
 8000cf6:	f000 ffd5 	bl	8001ca4 <HAL_GetTick>
 8000cfa:	4604      	mov	r4, r0

	while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000cfc:	4e0c      	ldr	r6, [pc, #48]	; (8000d30 <enableNotification+0x44>)
 8000cfe:	4d0d      	ldr	r5, [pc, #52]	; (8000d34 <enableNotification+0x48>)
 8000d00:	8830      	ldrh	r0, [r6, #0]
 8000d02:	8829      	ldrh	r1, [r5, #0]
 8000d04:	3102      	adds	r1, #2
 8000d06:	ab01      	add	r3, sp, #4
 8000d08:	2202      	movs	r2, #2
 8000d0a:	b289      	uxth	r1, r1
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	f002 fe33 	bl	8003978 <aci_gatt_write_charac_descriptor>
 8000d12:	2846      	cmp	r0, #70	; 0x46
 8000d14:	d106      	bne.n	8000d24 <enableNotification+0x38>
		/* Radio is busy */
		if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000d16:	f000 ffc5 	bl	8001ca4 <HAL_GetTick>
 8000d1a:	1b00      	subs	r0, r0, r4
 8000d1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d9ed      	bls.n	8000d00 <enableNotification+0x14>
	}
	notification_enabled = TRUE;
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <enableNotification+0x4c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000f8 	.word	0x200000f8
 8000d34:	20000104 	.word	0x20000104
 8000d38:	200000fc 	.word	0x200000fc

08000d3c <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000d3c:	b508      	push	{r3, lr}
	if(handle == RXCharHandle + 1){
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <Attribute_Modified_CB+0x30>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4298      	cmp	r0, r3
 8000d46:	d005      	beq.n	8000d54 <Attribute_Modified_CB+0x18>
		receiveData(att_data, data_length);
	} else if (handle == TXCharHandle + 2) {
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <Attribute_Modified_CB+0x34>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d004      	beq.n	8000d5c <Attribute_Modified_CB+0x20>
		if(att_data[0] == 0x01)
			notification_enabled = TRUE;
	}
}
 8000d52:	bd08      	pop	{r3, pc}
		receiveData(att_data, data_length);
 8000d54:	4610      	mov	r0, r2
 8000d56:	f7ff ff7f 	bl	8000c58 <receiveData>
 8000d5a:	e7fa      	b.n	8000d52 <Attribute_Modified_CB+0x16>
		if(att_data[0] == 0x01)
 8000d5c:	7813      	ldrb	r3, [r2, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d1f7      	bne.n	8000d52 <Attribute_Modified_CB+0x16>
			notification_enabled = TRUE;
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <Attribute_Modified_CB+0x38>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
}
 8000d68:	e7f3      	b.n	8000d52 <Attribute_Modified_CB+0x16>
 8000d6a:	bf00      	nop
 8000d6c:	200000f0 	.word	0x200000f0
 8000d70:	200000f2 	.word	0x200000f2
 8000d74:	200000fc 	.word	0x200000fc

08000d78 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	4607      	mov	r7, r0
	connected = TRUE;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <GAP_ConnectionComplete_CB+0x34>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <GAP_ConnectionComplete_CB+0x38>)
 8000d84:	8019      	strh	r1, [r3, #0]

	printf("Connected to device:");
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <GAP_ConnectionComplete_CB+0x3c>)
 8000d88:	f003 fc1e 	bl	80045c8 <iprintf>
	for(int i = 5; i > 0; i--){
 8000d8c:	1dbc      	adds	r4, r7, #6
 8000d8e:	1c7e      	adds	r6, r7, #1
		printf("%02X-", addr[i]);
 8000d90:	4d09      	ldr	r5, [pc, #36]	; (8000db8 <GAP_ConnectionComplete_CB+0x40>)
 8000d92:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8000d96:	4628      	mov	r0, r5
 8000d98:	f003 fc16 	bl	80045c8 <iprintf>
	for(int i = 5; i > 0; i--){
 8000d9c:	42b4      	cmp	r4, r6
 8000d9e:	d1f8      	bne.n	8000d92 <GAP_ConnectionComplete_CB+0x1a>
	}
	printf("%02X\n", addr[0]);
 8000da0:	7839      	ldrb	r1, [r7, #0]
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <GAP_ConnectionComplete_CB+0x44>)
 8000da4:	f003 fc10 	bl	80045c8 <iprintf>
}
 8000da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000f4 	.word	0x200000f4
 8000db0:	200000f8 	.word	0x200000f8
 8000db4:	080053e0 	.word	0x080053e0
 8000db8:	080053f8 	.word	0x080053f8
 8000dbc:	08005400 	.word	0x08005400

08000dc0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000dc0:	b510      	push	{r4, lr}
	connected = FALSE;
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <GAP_DisconnectionComplete_CB+0x2c>)
 8000dc6:	601c      	str	r4, [r3, #0]

	printf("Disconnected\n");
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <GAP_DisconnectionComplete_CB+0x30>)
 8000dca:	f003 fc83 	bl	80046d4 <puts>
	/* Make the device connectable again. */
	set_connectable = TRUE;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <GAP_DisconnectionComplete_CB+0x34>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	notification_enabled = FALSE;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <GAP_DisconnectionComplete_CB+0x38>)
 8000dd6:	701c      	strb	r4, [r3, #0]
	start_read_tx_char_handle = FALSE;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <GAP_DisconnectionComplete_CB+0x3c>)
 8000dda:	701c      	strb	r4, [r3, #0]
	start_read_rx_char_handle = FALSE;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <GAP_DisconnectionComplete_CB+0x40>)
 8000dde:	701c      	strb	r4, [r3, #0]
	end_read_tx_char_handle = FALSE;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <GAP_DisconnectionComplete_CB+0x44>)
 8000de2:	701c      	strb	r4, [r3, #0]
	end_read_rx_char_handle = FALSE;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <GAP_DisconnectionComplete_CB+0x48>)
 8000de6:	701c      	strb	r4, [r3, #0]
}
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	bf00      	nop
 8000dec:	200000f4 	.word	0x200000f4
 8000df0:	08005408 	.word	0x08005408
 8000df4:	20000019 	.word	0x20000019
 8000df8:	200000fc 	.word	0x200000fc
 8000dfc:	20000103 	.word	0x20000103
 8000e00:	20000102 	.word	0x20000102
 8000e04:	200000fb 	.word	0x200000fb
 8000e08:	200000fa 	.word	0x200000fa

08000e0c <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000e0c:	b508      	push	{r3, lr}
	if (attr_handle == tx_handle+1) {
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <GATT_Notification_CB+0x18>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d000      	beq.n	8000e1a <GATT_Notification_CB+0xe>
		receiveData(attr_value, attr_len);
	}
}
 8000e18:	bd08      	pop	{r3, pc}
		receiveData(attr_value, attr_len);
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	f7ff ff1c 	bl	8000c58 <receiveData>
}
 8000e20:	e7fa      	b.n	8000e18 <GATT_Notification_CB+0xc>
 8000e22:	bf00      	nop
 8000e24:	20000104 	.word	0x20000104

08000e28 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000e28:	b508      	push	{r3, lr}
	hci_uart_pckt *hci_pckt = pData;
	/* obtain event packet */
	hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

	if(hci_pckt->type != HCI_EVENT_PKT)
 8000e2a:	7803      	ldrb	r3, [r0, #0]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d106      	bne.n	8000e3e <user_notify+0x16>
		return;

	switch(event_pckt->evt){
 8000e30:	7843      	ldrb	r3, [r0, #1]
 8000e32:	2b3e      	cmp	r3, #62	; 0x3e
 8000e34:	d007      	beq.n	8000e46 <user_notify+0x1e>
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d00e      	beq.n	8000e58 <user_notify+0x30>
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	d000      	beq.n	8000e40 <user_notify+0x18>
			break;
		}
	}
	break;
	}
}
 8000e3e:	bd08      	pop	{r3, pc}
		GAP_DisconnectionComplete_CB();
 8000e40:	f7ff ffbe 	bl	8000dc0 <GAP_DisconnectionComplete_CB>
	break;
 8000e44:	e7fb      	b.n	8000e3e <user_notify+0x16>
		switch(evt->subevent){
 8000e46:	78c3      	ldrb	r3, [r0, #3]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d1f8      	bne.n	8000e3e <user_notify+0x16>
			GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000e4c:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8000e50:	3009      	adds	r0, #9
 8000e52:	f7ff ff91 	bl	8000d78 <GAP_ConnectionComplete_CB>
		break;
 8000e56:	e7f2      	b.n	8000e3e <user_notify+0x16>
		switch(blue_evt->ecode){
 8000e58:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8000e5c:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000e60:	2b11      	cmp	r3, #17
 8000e62:	d8ec      	bhi.n	8000e3e <user_notify+0x16>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <user_notify+0x44>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000eb5 	.word	0x08000eb5
 8000e70:	08000e3f 	.word	0x08000e3f
 8000e74:	08000e3f 	.word	0x08000e3f
 8000e78:	08000e3f 	.word	0x08000e3f
 8000e7c:	08000e3f 	.word	0x08000e3f
 8000e80:	08000e3f 	.word	0x08000e3f
 8000e84:	08000e3f 	.word	0x08000e3f
 8000e88:	08000e3f 	.word	0x08000e3f
 8000e8c:	08000e3f 	.word	0x08000e3f
 8000e90:	08000e3f 	.word	0x08000e3f
 8000e94:	08000e3f 	.word	0x08000e3f
 8000e98:	08000e3f 	.word	0x08000e3f
 8000e9c:	08000e3f 	.word	0x08000e3f
 8000ea0:	08000e3f 	.word	0x08000e3f
 8000ea4:	08000ed1 	.word	0x08000ed1
 8000ea8:	08000f27 	.word	0x08000f27
 8000eac:	08000e3f 	.word	0x08000e3f
 8000eb0:	08000ee3 	.word	0x08000ee3
			if (bnrg_expansion_board == IDB05A1) {
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <user_notify+0x138>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
				Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000eba:	bf0c      	ite	eq
 8000ebc:	f100 020c 	addeq.w	r2, r0, #12
				Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000ec0:	f100 020a 	addne.w	r2, r0, #10
 8000ec4:	7a41      	ldrb	r1, [r0, #9]
 8000ec6:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8000eca:	f7ff ff37 	bl	8000d3c <Attribute_Modified_CB>
 8000ece:	e7b6      	b.n	8000e3e <user_notify+0x16>
			GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000ed0:	79c1      	ldrb	r1, [r0, #7]
 8000ed2:	3902      	subs	r1, #2
 8000ed4:	f100 020a 	add.w	r2, r0, #10
 8000ed8:	b2c9      	uxtb	r1, r1
 8000eda:	8900      	ldrh	r0, [r0, #8]
 8000edc:	f7ff ff96 	bl	8000e0c <GATT_Notification_CB>
		break;
 8000ee0:	e7ad      	b.n	8000e3e <user_notify+0x16>
			if(BLE_Role == CLIENT) {
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <user_notify+0x13c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1a9      	bne.n	8000e3e <user_notify+0x16>
				if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <user_notify+0x140>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b113      	cbz	r3, 8000ef6 <user_notify+0xce>
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <user_notify+0x144>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b17b      	cbz	r3, 8000f16 <user_notify+0xee>
				else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <user_notify+0x148>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d09f      	beq.n	8000e3e <user_notify+0x16>
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <user_notify+0x14c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d19b      	bne.n	8000e3e <user_notify+0x16>
					rx_handle = resp->attr_handle;
 8000f06:	8901      	ldrh	r1, [r0, #8]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <user_notify+0x150>)
 8000f0a:	8019      	strh	r1, [r3, #0]
					printf("RX Char Handle %04X\n", rx_handle);
 8000f0c:	b289      	uxth	r1, r1
 8000f0e:	481b      	ldr	r0, [pc, #108]	; (8000f7c <user_notify+0x154>)
 8000f10:	f003 fb5a 	bl	80045c8 <iprintf>
 8000f14:	e793      	b.n	8000e3e <user_notify+0x16>
					tx_handle = resp->attr_handle;
 8000f16:	8901      	ldrh	r1, [r0, #8]
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <user_notify+0x158>)
 8000f1a:	8019      	strh	r1, [r3, #0]
					printf("TX Char Handle %04X\n", tx_handle);
 8000f1c:	b289      	uxth	r1, r1
 8000f1e:	4819      	ldr	r0, [pc, #100]	; (8000f84 <user_notify+0x15c>)
 8000f20:	f003 fb52 	bl	80045c8 <iprintf>
 8000f24:	e78b      	b.n	8000e3e <user_notify+0x16>
			if(BLE_Role == CLIENT) {
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <user_notify+0x13c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d187      	bne.n	8000e3e <user_notify+0x16>
				if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <user_notify+0x140>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b133      	cbz	r3, 8000f42 <user_notify+0x11a>
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <user_notify+0x144>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b91b      	cbnz	r3, 8000f42 <user_notify+0x11a>
					end_read_tx_char_handle = TRUE;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <user_notify+0x144>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e77d      	b.n	8000e3e <user_notify+0x16>
				else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <user_notify+0x148>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f43f af79 	beq.w	8000e3e <user_notify+0x16>
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <user_notify+0x14c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f af74 	bne.w	8000e3e <user_notify+0x16>
					end_read_rx_char_handle = TRUE;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <user_notify+0x14c>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e76f      	b.n	8000e3e <user_notify+0x16>
 8000f5e:	bf00      	nop
 8000f60:	200000b8 	.word	0x200000b8
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000103 	.word	0x20000103
 8000f6c:	200000fb 	.word	0x200000fb
 8000f70:	20000102 	.word	0x20000102
 8000f74:	200000fa 	.word	0x200000fa
 8000f78:	200000fe 	.word	0x200000fe
 8000f7c:	08005430 	.word	0x08005430
 8000f80:	20000104 	.word	0x20000104
 8000f84:	08005418 	.word	0x08005418

08000f88 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	9400      	str	r4, [sp, #0]
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HCI_TL_SPI_Init+0x60>)
 8000f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	9b00      	ldr	r3, [sp, #0]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000fa4:	2601      	movs	r6, #1
 8000fa6:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fac:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000fb0:	4d0e      	ldr	r5, [pc, #56]	; (8000fec <HCI_TL_SPI_Init+0x64>)
 8000fb2:	a901      	add	r1, sp, #4
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f000 ff19 	bl	8001dec <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000fc6:	a901      	add	r1, sp, #4
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f000 ff0f 	bl	8001dec <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000fd8:	a901      	add	r1, sp, #4
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f000 ff06 	bl	8001dec <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000fe0:	f000 fbe6 	bl	80017b0 <BSP_SPI1_Init>
}
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000ff2:	4c08      	ldr	r4, [pc, #32]	; (8001014 <HCI_TL_SPI_DeInit+0x24>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 ffde 	bl	8001fb8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4620      	mov	r0, r4
 8001000:	f000 ffda 	bl	8001fb8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	4620      	mov	r0, r4
 800100a:	f000 ffd5 	bl	8001fb8 <HAL_GPIO_DeInit>
  return 0;
}
 800100e:	2000      	movs	r0, #0
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop
 8001014:	40020000 	.word	0x40020000

08001018 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001018:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800101a:	4c0d      	ldr	r4, [pc, #52]	; (8001050 <HCI_TL_SPI_Reset+0x38>)
 800101c:	2201      	movs	r2, #1
 800101e:	2102      	movs	r1, #2
 8001020:	4620      	mov	r0, r4
 8001022:	f001 f85f 	bl	80020e4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	4620      	mov	r0, r4
 800102e:	f001 f859 	bl	80020e4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001032:	2005      	movs	r0, #5
 8001034:	f000 fe3c 	bl	8001cb0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	4620      	mov	r0, r4
 8001040:	f001 f850 	bl	80020e4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001044:	2005      	movs	r0, #5
 8001046:	f000 fe33 	bl	8001cb0 <HAL_Delay>
  return 0;
}
 800104a:	2000      	movs	r0, #0
 800104c:	bd10      	pop	{r4, pc}
 800104e:	bf00      	nop
 8001050:	40020000 	.word	0x40020000

08001054 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	4605      	mov	r5, r0
 800105a:	460c      	mov	r4, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 800105c:	23ff      	movs	r3, #255	; 0xff
 800105e:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HCI_TL_SPI_Receive+0x88>)
 8001064:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001068:	9002      	str	r0, [sp, #8]
 800106a:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <HCI_TL_SPI_Receive+0x8c>)
 8001074:	f001 f836 	bl	80020e4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001078:	2205      	movs	r2, #5
 800107a:	4669      	mov	r1, sp
 800107c:	a802      	add	r0, sp, #8
 800107e:	f000 fb5f 	bl	8001740 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001082:	f89d 3000 	ldrb.w	r3, [sp]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 800108a:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2102      	movs	r1, #2
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <HCI_TL_SPI_Receive+0x8c>)
 8001092:	f001 f827 	bl	80020e4 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif

  return len;
}
 8001096:	4620      	mov	r0, r4
 8001098:	b005      	add	sp, #20
 800109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800109c:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80010a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0)
 80010a4:	ea53 2606 	orrs.w	r6, r3, r6, lsl #8
 80010a8:	d014      	beq.n	80010d4 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 80010aa:	42a6      	cmp	r6, r4
 80010ac:	bf28      	it	cs
 80010ae:	4626      	movcs	r6, r4
      for(len = 0; len < byte_count; len++)
 80010b0:	b196      	cbz	r6, 80010d8 <HCI_TL_SPI_Receive+0x84>
 80010b2:	2400      	movs	r4, #0
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80010b4:	2701      	movs	r7, #1
 80010b6:	463a      	mov	r2, r7
 80010b8:	f10d 010e 	add.w	r1, sp, #14
 80010bc:	f10d 000f 	add.w	r0, sp, #15
 80010c0:	f000 fb3e 	bl	8001740 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80010c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80010c8:	552b      	strb	r3, [r5, r4]
      for(len = 0; len < byte_count; len++)
 80010ca:	1c63      	adds	r3, r4, #1
 80010cc:	b2dc      	uxtb	r4, r3
 80010ce:	42a6      	cmp	r6, r4
 80010d0:	d8f1      	bhi.n	80010b6 <HCI_TL_SPI_Receive+0x62>
 80010d2:	e7db      	b.n	800108c <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 80010d4:	2400      	movs	r4, #0
 80010d6:	e7d9      	b.n	800108c <HCI_TL_SPI_Receive+0x38>
      for(len = 0; len < byte_count; len++)
 80010d8:	2400      	movs	r4, #0
 80010da:	e7d7      	b.n	800108c <HCI_TL_SPI_Receive+0x38>
 80010dc:	080050fc 	.word	0x080050fc
 80010e0:	40020000 	.word	0x40020000

080010e4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80010e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e8:	b085      	sub	sp, #20
 80010ea:	4681      	mov	r9, r0
 80010ec:	4688      	mov	r8, r1
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HCI_TL_SPI_Send+0x8c>)
 80010f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f4:	9002      	str	r0, [sp, #8]
 80010f6:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80010fa:	f000 fdd3 	bl	8001ca4 <HAL_GetTick>
 80010fe:	4606      	mov	r6, r0
  do
  {
    result = 0;

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001100:	4d1c      	ldr	r5, [pc, #112]	; (8001174 <HCI_TL_SPI_Send+0x90>)
 8001102:	2700      	movs	r7, #0
 8001104:	2402      	movs	r4, #2
 8001106:	e00c      	b.n	8001122 <HCI_TL_SPI_Send+0x3e>
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
    {
      result = -3;
 8001108:	f06f 0002 	mvn.w	r0, #2
      break;
    }
  } while(result < 0);

  return result;
 800110c:	e02d      	b.n	800116a <HCI_TL_SPI_Send+0x86>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	4621      	mov	r1, r4
 8001112:	4628      	mov	r0, r5
 8001114:	f000 ffe6 	bl	80020e4 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001118:	f000 fdc4 	bl	8001ca4 <HAL_GetTick>
 800111c:	1b83      	subs	r3, r0, r6
 800111e:	2b0f      	cmp	r3, #15
 8001120:	d8f2      	bhi.n	8001108 <HCI_TL_SPI_Send+0x24>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001122:	463a      	mov	r2, r7
 8001124:	4621      	mov	r1, r4
 8001126:	4628      	mov	r0, r5
 8001128:	f000 ffdc 	bl	80020e4 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800112c:	2205      	movs	r2, #5
 800112e:	4669      	mov	r1, sp
 8001130:	a802      	add	r0, sp, #8
 8001132:	f000 fb05 	bl	8001740 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02)
 8001136:	f89d 3000 	ldrb.w	r3, [sp]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d1e7      	bne.n	800110e <HCI_TL_SPI_Send+0x2a>
      if(header_slave[1] >= size)
 800113e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001142:	4543      	cmp	r3, r8
 8001144:	d3e3      	bcc.n	800110e <HCI_TL_SPI_Send+0x2a>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001146:	4642      	mov	r2, r8
 8001148:	490b      	ldr	r1, [pc, #44]	; (8001178 <HCI_TL_SPI_Send+0x94>)
 800114a:	4648      	mov	r0, r9
 800114c:	f000 faf8 	bl	8001740 <BSP_SPI1_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2102      	movs	r1, #2
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <HCI_TL_SPI_Send+0x90>)
 8001156:	f000 ffc5 	bl	80020e4 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800115a:	f000 fda3 	bl	8001ca4 <HAL_GetTick>
 800115e:	1b86      	subs	r6, r0, r6
    result = 0;
 8001160:	2e0f      	cmp	r6, #15
 8001162:	bf8c      	ite	hi
 8001164:	f06f 0002 	mvnhi.w	r0, #2
 8001168:	2000      	movls	r0, #0
}
 800116a:	b005      	add	sp, #20
 800116c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001170:	08005104 	.word	0x08005104
 8001174:	40020000 	.word	0x40020000
 8001178:	20000110 	.word	0x20000110

0800117c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800117c:	b570      	push	{r4, r5, r6, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800117e:	4d07      	ldr	r5, [pc, #28]	; (800119c <hci_tl_lowlevel_isr+0x20>)
 8001180:	2401      	movs	r4, #1
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
  {
    if (hci_notify_asynch_evt(NULL))
 8001182:	2600      	movs	r6, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001184:	4621      	mov	r1, r4
 8001186:	4628      	mov	r0, r5
 8001188:	f000 ffa6 	bl	80020d8 <HAL_GPIO_ReadPin>
  while(IsDataAvailable())
 800118c:	2801      	cmp	r0, #1
 800118e:	d104      	bne.n	800119a <hci_tl_lowlevel_isr+0x1e>
    if (hci_notify_asynch_evt(NULL))
 8001190:	4630      	mov	r0, r6
 8001192:	f002 fe89 	bl	8003ea8 <hci_notify_asynch_evt>
 8001196:	2800      	cmp	r0, #0
 8001198:	d0f4      	beq.n	8001184 <hci_tl_lowlevel_isr+0x8>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	40020000 	.word	0x40020000

080011a0 <hci_tl_lowlevel_init>:
{
 80011a0:	b510      	push	{r4, lr}
 80011a2:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <hci_tl_lowlevel_init+0x4c>)
 80011a6:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <hci_tl_lowlevel_init+0x50>)
 80011aa:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <hci_tl_lowlevel_init+0x54>)
 80011ae:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <hci_tl_lowlevel_init+0x58>)
 80011b2:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <hci_tl_lowlevel_init+0x5c>)
 80011b6:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <hci_tl_lowlevel_init+0x60>)
 80011ba:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 80011bc:	a801      	add	r0, sp, #4
 80011be:	f002 fd73 	bl	8003ca8 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80011c2:	4c10      	ldr	r4, [pc, #64]	; (8001204 <hci_tl_lowlevel_init+0x64>)
 80011c4:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 fdf6 	bl	8001dba <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <hci_tl_lowlevel_init+0x68>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	4620      	mov	r0, r4
 80011d4:	f000 fdea 	bl	8001dac <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	4611      	mov	r1, r2
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 fd8d 	bl	8001cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e2:	2006      	movs	r0, #6
 80011e4:	f000 fdc0 	bl	8001d68 <HAL_NVIC_EnableIRQ>
}
 80011e8:	b008      	add	sp, #32
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	08000f89 	.word	0x08000f89
 80011f0:	08000ff1 	.word	0x08000ff1
 80011f4:	080010e5 	.word	0x080010e5
 80011f8:	08001055 	.word	0x08001055
 80011fc:	08001019 	.word	0x08001019
 8001200:	0800176d 	.word	0x0800176d
 8001204:	20000108 	.word	0x20000108
 8001208:	0800117d 	.word	0x0800117d

0800120c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800120c:	b500      	push	{lr}
 800120e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001210:	2230      	movs	r2, #48	; 0x30
 8001212:	2100      	movs	r1, #0
 8001214:	a808      	add	r0, sp, #32
 8001216:	f003 f8ee 	bl	80043f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121a:	2300      	movs	r3, #0
 800121c:	9303      	str	r3, [sp, #12]
 800121e:	9304      	str	r3, [sp, #16]
 8001220:	9305      	str	r3, [sp, #20]
 8001222:	9306      	str	r3, [sp, #24]
 8001224:	9307      	str	r3, [sp, #28]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <SystemClock_Config+0x9c>)
 800122a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800122c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001230:	6411      	str	r1, [r2, #64]	; 0x40
 8001232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001234:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	491b      	ldr	r1, [pc, #108]	; (80012ac <SystemClock_Config+0xa0>)
 8001240:	680a      	ldr	r2, [r1, #0]
 8001242:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124a:	600a      	str	r2, [r1, #0]
 800124c:	680a      	ldr	r2, [r1, #0]
 800124e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a02      	ldr	r2, [sp, #8]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001256:	2102      	movs	r1, #2
 8001258:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125a:	2201      	movs	r2, #1
 800125c:	920b      	str	r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125e:	2210      	movs	r2, #16
 8001260:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001266:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001268:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800126c:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800126e:	2304      	movs	r3, #4
 8001270:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001272:	2307      	movs	r3, #7
 8001274:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	a808      	add	r0, sp, #32
 8001278:	f000 ff44 	bl	8002104 <HAL_RCC_OscConfig>
 800127c:	b980      	cbnz	r0, 80012a0 <SystemClock_Config+0x94>
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	9303      	str	r3, [sp, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001282:	2102      	movs	r1, #2
 8001284:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128e:	9206      	str	r2, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001292:	a803      	add	r0, sp, #12
 8001294:	f001 f99c 	bl	80025d0 <HAL_RCC_ClockConfig>
 8001298:	b920      	cbnz	r0, 80012a4 <SystemClock_Config+0x98>
	{
		Error_Handler();
	}
}
 800129a:	b015      	add	sp, #84	; 0x54
 800129c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012a2:	e7fe      	b.n	80012a2 <SystemClock_Config+0x96>
 80012a4:	b672      	cpsid	i
 80012a6:	e7fe      	b.n	80012a6 <SystemClock_Config+0x9a>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <main>:
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
	HAL_Init();
 80012b4:	f000 fcd0 	bl	8001c58 <HAL_Init>
	SystemClock_Config();
 80012b8:	f7ff ffa8 	bl	800120c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	2400      	movs	r4, #0
 80012be:	9407      	str	r4, [sp, #28]
 80012c0:	9408      	str	r4, [sp, #32]
 80012c2:	9409      	str	r4, [sp, #36]	; 0x24
 80012c4:	940a      	str	r4, [sp, #40]	; 0x28
 80012c6:	940b      	str	r4, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	9401      	str	r4, [sp, #4]
 80012ca:	4b66      	ldr	r3, [pc, #408]	; (8001464 <main+0x1b4>)
 80012cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ce:	f042 0204 	orr.w	r2, r2, #4
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
 80012d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d6:	f002 0204 	and.w	r2, r2, #4
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	9402      	str	r4, [sp, #8]
 80012e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
 80012e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012ee:	9202      	str	r2, [sp, #8]
 80012f0:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	9403      	str	r4, [sp, #12]
 80012f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
 80012fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fe:	f002 0201 	and.w	r2, r2, #1
 8001302:	9203      	str	r2, [sp, #12]
 8001304:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	9404      	str	r4, [sp, #16]
 8001308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130a:	f042 0202 	orr.w	r2, r2, #2
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	9304      	str	r3, [sp, #16]
 8001318:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800131a:	4e53      	ldr	r6, [pc, #332]	; (8001468 <main+0x1b8>)
 800131c:	4622      	mov	r2, r4
 800131e:	f240 3102 	movw	r1, #770	; 0x302
 8001322:	4630      	mov	r0, r6
 8001324:	f000 fede 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, GPIO_PIN_RESET);
 8001328:	4f50      	ldr	r7, [pc, #320]	; (800146c <main+0x1bc>)
 800132a:	4622      	mov	r2, r4
 800132c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001330:	4638      	mov	r0, r7
 8001332:	f000 fed7 	bl	80020e4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2501      	movs	r5, #1
 8001338:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800133e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4630      	mov	r0, r6
 8001346:	f000 fd51 	bl	8001dec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 800134a:	f240 3302 	movw	r3, #770	; 0x302
 800134e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	4630      	mov	r0, r6
 800135a:	f000 fd47 	bl	8001dec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 800136a:	a907      	add	r1, sp, #28
 800136c:	4638      	mov	r0, r7
 800136e:	f000 fd3d 	bl	8001dec <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001372:	4622      	mov	r2, r4
 8001374:	4621      	mov	r1, r4
 8001376:	2006      	movs	r0, #6
 8001378:	f000 fcc0 	bl	8001cfc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800137c:	2006      	movs	r0, #6
 800137e:	f000 fcf3 	bl	8001d68 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001382:	4622      	mov	r2, r4
 8001384:	4621      	mov	r1, r4
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f000 fcb8 	bl	8001cfc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f000 fceb 	bl	8001d68 <HAL_NVIC_EnableIRQ>
	huart1.Instance = USART1;
 8001392:	4837      	ldr	r0, [pc, #220]	; (8001470 <main+0x1c0>)
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <main+0x1c4>)
 8001396:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8001398:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800139c:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80013a2:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	230c      	movs	r3, #12
 80013a6:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a8:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013aa:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ac:	f001 ff56 	bl	800325c <HAL_UART_Init>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d14c      	bne.n	800144e <main+0x19e>
	huart6.Instance = USART6;
 80013b4:	4830      	ldr	r0, [pc, #192]	; (8001478 <main+0x1c8>)
 80013b6:	4b31      	ldr	r3, [pc, #196]	; (800147c <main+0x1cc>)
 80013b8:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = 9600;
 80013ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013be:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013c0:	2300      	movs	r3, #0
 80013c2:	6083      	str	r3, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80013c4:	60c3      	str	r3, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80013c6:	6103      	str	r3, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80013c8:	220c      	movs	r2, #12
 80013ca:	6142      	str	r2, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013cc:	6183      	str	r3, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ce:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80013d0:	f001 ff44 	bl	800325c <HAL_UART_Init>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d13c      	bne.n	8001452 <main+0x1a2>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d8:	2300      	movs	r3, #0
 80013da:	9307      	str	r3, [sp, #28]
 80013dc:	9308      	str	r3, [sp, #32]
 80013de:	9309      	str	r3, [sp, #36]	; 0x24
 80013e0:	930a      	str	r3, [sp, #40]	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	9306      	str	r3, [sp, #24]
	htim3.Instance = TIM3;
 80013e6:	4826      	ldr	r0, [pc, #152]	; (8001480 <main+0x1d0>)
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <main+0x1d4>)
 80013ea:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 42000-1;
 80013ec:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80013f0:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 20000-1;
 80013f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013f8:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013fe:	f001 fd3b 	bl	8002e78 <HAL_TIM_Base_Init>
 8001402:	bb40      	cbnz	r0, 8001456 <main+0x1a6>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	9307      	str	r3, [sp, #28]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800140a:	a907      	add	r1, sp, #28
 800140c:	481c      	ldr	r0, [pc, #112]	; (8001480 <main+0x1d0>)
 800140e:	f001 fd6c 	bl	8002eea <HAL_TIM_ConfigClockSource>
 8001412:	bb10      	cbnz	r0, 800145a <main+0x1aa>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	9305      	str	r3, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	9306      	str	r3, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141a:	a905      	add	r1, sp, #20
 800141c:	4818      	ldr	r0, [pc, #96]	; (8001480 <main+0x1d0>)
 800141e:	f001 fe19 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	b9e0      	cbnz	r0, 800145e <main+0x1ae>
	MX_BlueNRG_MS_Init();
 8001424:	f7ff f9be 	bl	80007a4 <MX_BlueNRG_MS_Init>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 0);
 8001428:	4c10      	ldr	r4, [pc, #64]	; (800146c <main+0x1bc>)
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	4620      	mov	r0, r4
 8001432:	f000 fe57 	bl	80020e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f000 fc3a 	bl	8001cb0 <HAL_Delay>
	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 1);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	4620      	mov	r0, r4
 8001444:	f000 fe4e 	bl	80020e4 <HAL_GPIO_WritePin>
		MX_BlueNRG_MS_Process();
 8001448:	f7ff fa96 	bl	8000978 <MX_BlueNRG_MS_Process>
	while (1)
 800144c:	e7fc      	b.n	8001448 <main+0x198>
 800144e:	b672      	cpsid	i
	while (1)
 8001450:	e7fe      	b.n	8001450 <main+0x1a0>
 8001452:	b672      	cpsid	i
 8001454:	e7fe      	b.n	8001454 <main+0x1a4>
 8001456:	b672      	cpsid	i
 8001458:	e7fe      	b.n	8001458 <main+0x1a8>
 800145a:	b672      	cpsid	i
 800145c:	e7fe      	b.n	800145c <main+0x1ac>
 800145e:	b672      	cpsid	i
 8001460:	e7fe      	b.n	8001460 <main+0x1b0>
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	20000258 	.word	0x20000258
 8001474:	40011000 	.word	0x40011000
 8001478:	2000029c 	.word	0x2000029c
 800147c:	40011400 	.word	0x40011400
 8001480:	20000210 	.word	0x20000210
 8001484:	40000400 	.word	0x40000400

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b500      	push	{lr}
 800148a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148c:	2100      	movs	r1, #0
 800148e:	9100      	str	r1, [sp, #0]
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_MspInit+0x3c>)
 8001492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
 800149a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800149c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014a0:	9200      	str	r2, [sp, #0]
 80014a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	9101      	str	r1, [sp, #4]
 80014a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014b8:	2007      	movs	r0, #7
 80014ba:	f000 fc0d 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	b003      	add	sp, #12
 80014c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80014c8:	6802      	ldr	r2, [r0, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_Base_MspInit+0x3c>)
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d000      	beq.n	80014d2 <HAL_TIM_Base_MspInit+0xa>
 80014d0:	4770      	bx	lr
{
 80014d2:	b500      	push	{lr}
 80014d4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	2100      	movs	r1, #0
 80014d8:	9101      	str	r1, [sp, #4]
 80014da:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80014de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e0:	f042 0202 	orr.w	r2, r2, #2
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014f0:	460a      	mov	r2, r1
 80014f2:	201d      	movs	r0, #29
 80014f4:	f000 fc02 	bl	8001cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014f8:	201d      	movs	r0, #29
 80014fa:	f000 fc35 	bl	8001d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014fe:	b003      	add	sp, #12
 8001500:	f85d fb04 	ldr.w	pc, [sp], #4
 8001504:	40000400 	.word	0x40000400

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	2300      	movs	r3, #0
 800150e:	9305      	str	r3, [sp, #20]
 8001510:	9306      	str	r3, [sp, #24]
 8001512:	9307      	str	r3, [sp, #28]
 8001514:	9308      	str	r3, [sp, #32]
 8001516:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8001518:	6803      	ldr	r3, [r0, #0]
 800151a:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <HAL_UART_MspInit+0xd8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d004      	beq.n	800152a <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8001520:	4a30      	ldr	r2, [pc, #192]	; (80015e4 <HAL_UART_MspInit+0xdc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d039      	beq.n	800159a <HAL_UART_MspInit+0x92>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001526:	b00b      	add	sp, #44	; 0x2c
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800152a:	2400      	movs	r4, #0
 800152c:	9400      	str	r4, [sp, #0]
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <HAL_UART_MspInit+0xe0>)
 8001530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001532:	f042 0210 	orr.w	r2, r2, #16
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
 8001538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800153a:	f002 0210 	and.w	r2, r2, #16
 800153e:	9200      	str	r2, [sp, #0]
 8001540:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	9401      	str	r4, [sp, #4]
 8001544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
 800154c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154e:	f002 0201 	and.w	r2, r2, #1
 8001552:	9201      	str	r2, [sp, #4]
 8001554:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	9402      	str	r4, [sp, #8]
 8001558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155a:	f042 0202 	orr.w	r2, r2, #2
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2702      	movs	r7, #2
 8001572:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2603      	movs	r6, #3
 8001576:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001578:	2507      	movs	r5, #7
 800157a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	a905      	add	r1, sp, #20
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <HAL_UART_MspInit+0xe4>)
 8001580:	f000 fc34 	bl	8001dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	a905      	add	r1, sp, #20
 8001592:	4817      	ldr	r0, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0xe8>)
 8001594:	f000 fc2a 	bl	8001dec <HAL_GPIO_Init>
 8001598:	e7c5      	b.n	8001526 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800159a:	2100      	movs	r1, #0
 800159c:	9103      	str	r1, [sp, #12]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_UART_MspInit+0xe0>)
 80015a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44
 80015a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015aa:	f002 0220 	and.w	r2, r2, #32
 80015ae:	9203      	str	r2, [sp, #12]
 80015b0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	9104      	str	r1, [sp, #16]
 80015b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b6:	f042 0204 	orr.w	r2, r2, #4
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	9304      	str	r3, [sp, #16]
 80015c4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c6:	23c0      	movs	r3, #192	; 0xc0
 80015c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015d2:	2308      	movs	r3, #8
 80015d4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	a905      	add	r1, sp, #20
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_UART_MspInit+0xec>)
 80015da:	f000 fc07 	bl	8001dec <HAL_GPIO_Init>
}
 80015de:	e7a2      	b.n	8001526 <HAL_UART_MspInit+0x1e>
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800

080015f8 <NMI_Handler>:
{
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler>

080015fa <HardFault_Handler>:
void HardFault_Handler(void)
{
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler>

080015fc <MemManage_Handler>:
void MemManage_Handler(void)
{
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler>

080015fe <BusFault_Handler>:
void BusFault_Handler(void)
{
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler>

08001600 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler>

08001602 <SVC_Handler>:

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001608:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800160a:	f000 fb3f 	bl	8001c8c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bd08      	pop	{r3, pc}

08001610 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8001610:	b508      	push	{r3, lr}
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001612:	4802      	ldr	r0, [pc, #8]	; (800161c <EXTI0_IRQHandler+0xc>)
 8001614:	f000 fbd8 	bl	8001dc8 <HAL_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8001618:	bd08      	pop	{r3, pc}
 800161a:	bf00      	nop
 800161c:	20000108 	.word	0x20000108

08001620 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8001620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001624:	4836      	ldr	r0, [pc, #216]	; (8001700 <TIM3_IRQHandler+0xe0>)
 8001626:	f001 fb06 	bl	8002c36 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */


	HAL_UART_Transmit(&huart2, nfc_buffer, 20, 1000);
 800162a:	4c36      	ldr	r4, [pc, #216]	; (8001704 <TIM3_IRQHandler+0xe4>)
 800162c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001630:	2214      	movs	r2, #20
 8001632:	4935      	ldr	r1, [pc, #212]	; (8001708 <TIM3_IRQHandler+0xe8>)
 8001634:	4620      	mov	r0, r4
 8001636:	f001 fe40 	bl	80032ba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 800163a:	4d34      	ldr	r5, [pc, #208]	; (800170c <TIM3_IRQHandler+0xec>)
 800163c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001640:	2202      	movs	r2, #2
 8001642:	4629      	mov	r1, r5
 8001644:	4620      	mov	r0, r4
 8001646:	f001 fe38 	bl	80032ba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, vibration_buffer, 20, 1000);
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	2214      	movs	r2, #20
 8001650:	492f      	ldr	r1, [pc, #188]	; (8001710 <TIM3_IRQHandler+0xf0>)
 8001652:	4620      	mov	r0, r4
 8001654:	f001 fe31 	bl	80032ba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	2202      	movs	r2, #2
 800165e:	4629      	mov	r1, r5
 8001660:	4620      	mov	r0, r4
 8001662:	f001 fe2a 	bl	80032ba <HAL_UART_Transmit>

//	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 0);
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, 1);
//	HAL_Delay(1);
	HAL_UART_Receive (&huart6, read_buf_gps, 180, 1000);
 8001666:	4c2b      	ldr	r4, [pc, #172]	; (8001714 <TIM3_IRQHandler+0xf4>)
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	22b4      	movs	r2, #180	; 0xb4
 800166e:	4621      	mov	r1, r4
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <TIM3_IRQHandler+0xf8>)
 8001672:	f001 fe94 	bl	800339e <HAL_UART_Receive>
	//HAL_Delay(1);

	for (int i = 0; i < 180; i++) {
 8001676:	2500      	movs	r5, #0
		if (read_buf_gps[i] == 'N') {
			// Trovato il carattere 'N'
			//found = 1;

			HAL_UART_Transmit(&huart2, read_buf_gps + i - 11, 7, 1000);
 8001678:	4f22      	ldr	r7, [pc, #136]	; (8001704 <TIM3_IRQHandler+0xe4>)
 800167a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			HAL_UART_Transmit(&huart2, "N,", 2, 1000);
 800167e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800172c <TIM3_IRQHandler+0x10c>
 8001682:	e006      	b.n	8001692 <TIM3_IRQHandler+0x72>
			//Console_Write("\r\n");
			// break;
		}
		if (read_buf_gps[i] == 'E') {
 8001684:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8001688:	2b45      	cmp	r3, #69	; 0x45
 800168a:	d014      	beq.n	80016b6 <TIM3_IRQHandler+0x96>
	for (int i = 0; i < 180; i++) {
 800168c:	3501      	adds	r5, #1
 800168e:	2db4      	cmp	r5, #180	; 0xb4
 8001690:	d021      	beq.n	80016d6 <TIM3_IRQHandler+0xb6>
		if (read_buf_gps[i] == 'N') {
 8001692:	7823      	ldrb	r3, [r4, #0]
 8001694:	4621      	mov	r1, r4
 8001696:	3401      	adds	r4, #1
 8001698:	2b4e      	cmp	r3, #78	; 0x4e
 800169a:	d1f3      	bne.n	8001684 <TIM3_IRQHandler+0x64>
			HAL_UART_Transmit(&huart2, read_buf_gps + i - 11, 7, 1000);
 800169c:	4633      	mov	r3, r6
 800169e:	2207      	movs	r2, #7
 80016a0:	390b      	subs	r1, #11
 80016a2:	4638      	mov	r0, r7
 80016a4:	f001 fe09 	bl	80032ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "N,", 2, 1000);
 80016a8:	4633      	mov	r3, r6
 80016aa:	2202      	movs	r2, #2
 80016ac:	4641      	mov	r1, r8
 80016ae:	4638      	mov	r0, r7
 80016b0:	f001 fe03 	bl	80032ba <HAL_UART_Transmit>
 80016b4:	e7e6      	b.n	8001684 <TIM3_IRQHandler+0x64>
			// Trovato il carattere 'N'
			//found = 1;

			HAL_UART_Transmit(&huart2, read_buf_gps + i - 11, 7, 1000);
 80016b6:	4c13      	ldr	r4, [pc, #76]	; (8001704 <TIM3_IRQHandler+0xe4>)
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	2207      	movs	r2, #7
 80016be:	4917      	ldr	r1, [pc, #92]	; (800171c <TIM3_IRQHandler+0xfc>)
 80016c0:	4429      	add	r1, r5
 80016c2:	4620      	mov	r0, r4
 80016c4:	f001 fdf9 	bl	80032ba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "E", 1, 1000);
 80016c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016cc:	2201      	movs	r2, #1
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <TIM3_IRQHandler+0x100>)
 80016d0:	4620      	mov	r0, r4
 80016d2:	f001 fdf2 	bl	80032ba <HAL_UART_Transmit>
//		}
//		while (HAL_OK!=wait4join());
//	printf("wait 4 JOIN completato\r\n");

//	printf("Inzialization done\r\n");
	modem_at_cmd(msg_payload,(int)strlen(msg_payload));
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <TIM3_IRQHandler+0x104>)
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	4620      	mov	r0, r4
 80016dc:	f7fe fd80 	bl	80001e0 <strlen>
 80016e0:	4601      	mov	r1, r0
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7fe ff56 	bl	8000594 <modem_at_cmd>
	printf("Messaggio inviato\r\n");
 80016e8:	480f      	ldr	r0, [pc, #60]	; (8001728 <TIM3_IRQHandler+0x108>)
 80016ea:	f002 fff3 	bl	80046d4 <puts>
	memset(vibration_buffer,0,sizeof(vibration_buffer));
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <TIM3_IRQHandler+0xf0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
	/* USER CODE END TIM3_IRQn 1 */
}
 80016fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001700:	20000210 	.word	0x20000210
 8001704:	20000420 	.word	0x20000420
 8001708:	200002e0 	.word	0x200002e0
 800170c:	08005448 	.word	0x08005448
 8001710:	200003a8 	.word	0x200003a8
 8001714:	200002f4 	.word	0x200002f4
 8001718:	2000029c 	.word	0x2000029c
 800171c:	200002e9 	.word	0x200002e9
 8001720:	08005450 	.word	0x08005450
 8001724:	2000001c 	.word	0x2000001c
 8001728:	08005454 	.word	0x08005454
 800172c:	0800544c 	.word	0x0800544c

08001730 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8001730:	b508      	push	{r3, lr}
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001732:	4802      	ldr	r0, [pc, #8]	; (800173c <EXTI15_10_IRQHandler+0xc>)
 8001734:	f000 fb48 	bl	8001dc8 <HAL_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001738:	bd08      	pop	{r3, pc}
 800173a:	bf00      	nop
 800173c:	20000028 	.word	0x20000028

08001740 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001740:	b500      	push	{lr}
 8001742:	b083      	sub	sp, #12
 8001744:	4613      	mov	r3, r2
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	460a      	mov	r2, r1
 800174e:	4601      	mov	r1, r0
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <BSP_SPI1_SendRecv+0x28>)
 8001752:	f001 f911 	bl	8002978 <HAL_SPI_TransmitReceive>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001756:	2800      	cmp	r0, #0
  }
  return ret;
}
 8001758:	bf0c      	ite	eq
 800175a:	2000      	moveq	r0, #0
 800175c:	f06f 0005 	mvnne.w	r0, #5
 8001760:	b003      	add	sp, #12
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
 8001766:	bf00      	nop
 8001768:	200003c0 	.word	0x200003c0

0800176c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800176c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800176e:	f000 fa99 	bl	8001ca4 <HAL_GetTick>
}
 8001772:	bd08      	pop	{r3, pc}

08001774 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001774:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_OK;

  hspi->Instance = SPI1;
 8001776:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <MX_SPI1_Init+0x38>)
 8001778:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800177a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800177e:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001780:	2200      	movs	r2, #0
 8001782:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001784:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001786:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800178a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178e:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001790:	2118      	movs	r1, #24
 8001792:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001798:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800179a:	220a      	movs	r2, #10
 800179c:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800179e:	f001 f88c 	bl	80028ba <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 80017a2:	3800      	subs	r0, #0
 80017a4:	bf18      	it	ne
 80017a6:	2001      	movne	r0, #1
 80017a8:	bd08      	pop	{r3, pc}
 80017aa:	bf00      	nop
 80017ac:	40013000 	.word	0x40013000

080017b0 <BSP_SPI1_Init>:
  hspi1.Instance  = SPI1;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <BSP_SPI1_Init+0xc4>)
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <BSP_SPI1_Init+0xc8>)
 80017b4:	601a      	str	r2, [r3, #0]
  if(SPI1InitCounter++ == 0)
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <BSP_SPI1_Init+0xcc>)
 80017b8:	6813      	ldr	r3, [r2, #0]
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	6011      	str	r1, [r2, #0]
 80017be:	b10b      	cbz	r3, 80017c4 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80017c0:	2000      	movs	r0, #0
}
 80017c2:	4770      	bx	lr
{
 80017c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c8:	b088      	sub	sp, #32
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80017ca:	482a      	ldr	r0, [pc, #168]	; (8001874 <BSP_SPI1_Init+0xc4>)
 80017cc:	f001 f9ee 	bl	8002bac <HAL_SPI_GetState>
 80017d0:	b118      	cbz	r0, 80017da <BSP_SPI1_Init+0x2a>
  int32_t ret = BSP_ERROR_NONE;
 80017d2:	2000      	movs	r0, #0
}
 80017d4:	b008      	add	sp, #32
 80017d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	2400      	movs	r4, #0
 80017dc:	9400      	str	r4, [sp, #0]
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <BSP_SPI1_Init+0xd0>)
 80017e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
 80017e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017ee:	9200      	str	r2, [sp, #0]
 80017f0:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	9401      	str	r4, [sp, #4]
 80017f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
 80017fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fe:	f002 0201 	and.w	r2, r2, #1
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	9402      	str	r4, [sp, #8]
 8001808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180a:	f042 0202 	orr.w	r2, r2, #2
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2702      	movs	r7, #2
 8001820:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2603      	movs	r6, #3
 8001826:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001828:	2505      	movs	r5, #5
 800182a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800182c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001888 <BSP_SPI1_Init+0xd8>
 8001830:	a903      	add	r1, sp, #12
 8001832:	4640      	mov	r0, r8
 8001834:	f000 fada 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001842:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001844:	a903      	add	r1, sp, #12
 8001846:	4640      	mov	r0, r8
 8001848:	f000 fad0 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800184c:	2308      	movs	r3, #8
 800184e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001856:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001858:	a903      	add	r1, sp, #12
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <BSP_SPI1_Init+0xd4>)
 800185c:	f000 fac6 	bl	8001dec <HAL_GPIO_Init>
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <BSP_SPI1_Init+0xc4>)
 8001862:	f7ff ff87 	bl	8001774 <MX_SPI1_Init>
                ret = BSP_ERROR_BUS_FAILURE;
 8001866:	42a0      	cmp	r0, r4
 8001868:	bf0c      	ite	eq
 800186a:	4620      	moveq	r0, r4
 800186c:	f06f 0007 	mvnne.w	r0, #7
 8001870:	e7b0      	b.n	80017d4 <BSP_SPI1_Init+0x24>
 8001872:	bf00      	nop
 8001874:	200003c0 	.word	0x200003c0
 8001878:	40013000 	.word	0x40013000
 800187c:	200003bc 	.word	0x200003bc
 8001880:	40023800 	.word	0x40023800
 8001884:	40020400 	.word	0x40020400
 8001888:	40020000 	.word	0x40020000

0800188c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800188c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	1e16      	subs	r6, r2, #0
 8001890:	dd07      	ble.n	80018a2 <_read+0x16>
 8001892:	460c      	mov	r4, r1
 8001894:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	42a5      	cmp	r5, r4
 80018a0:	d1f9      	bne.n	8001896 <_read+0xa>
  }

  return len;
}
 80018a2:	4630      	mov	r0, r6
 80018a4:	bd70      	pop	{r4, r5, r6, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	1e16      	subs	r6, r2, #0
 80018aa:	dd07      	ble.n	80018bc <_write+0x16>
 80018ac:	460c      	mov	r4, r1
 80018ae:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80018b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018b4:	f000 f992 	bl	8001bdc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	42a5      	cmp	r5, r4
 80018ba:	d1f9      	bne.n	80018b0 <_write+0xa>
  }
  return len;
}
 80018bc:	4630      	mov	r0, r6
 80018be:	bd70      	pop	{r4, r5, r6, pc}

080018c0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	604b      	str	r3, [r1, #4]
  return 0;
}
 80018cc:	2000      	movs	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018d0:	2001      	movs	r0, #1
 80018d2:	4770      	bx	lr

080018d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	4770      	bx	lr

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b508      	push	{r3, lr}
 80018da:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <_sbrk+0x38>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	b152      	cbz	r2, 80018f8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <_sbrk+0x38>)
 80018e4:	6810      	ldr	r0, [r2, #0]
 80018e6:	4403      	add	r3, r0
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <_sbrk+0x3c>)
 80018ea:	490b      	ldr	r1, [pc, #44]	; (8001918 <_sbrk+0x40>)
 80018ec:	1a52      	subs	r2, r2, r1
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d806      	bhi.n	8001900 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <_sbrk+0x38>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80018f6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x38>)
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <_sbrk+0x44>)
 80018fc:	6011      	str	r1, [r2, #0]
 80018fe:	e7f0      	b.n	80018e2 <_sbrk+0xa>
    errno = ENOMEM;
 8001900:	f002 fb74 	bl	8003fec <__errno>
 8001904:	230c      	movs	r3, #12
 8001906:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	e7f3      	b.n	80018f6 <_sbrk+0x1e>
 800190e:	bf00      	nop
 8001910:	20000418 	.word	0x20000418
 8001914:	20018000 	.word	0x20018000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000768 	.word	0x20000768

08001920 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <SystemInit+0x10>)
 8001922:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff ffdf 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f002 fd13 	bl	800438c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff fca3 	bl	80012b0 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800196c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001978:	08005528 	.word	0x08005528
  ldr r2, =_sbss
 800197c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001980:	20000764 	.word	0x20000764

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001988:	b530      	push	{r4, r5, lr}
 800198a:	b089      	sub	sp, #36	; 0x24
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	2400      	movs	r4, #0
 800198e:	9401      	str	r4, [sp, #4]
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <BSP_LED_Init+0x60>)
 8001992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
 800199a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800199c:	f002 0201 	and.w	r2, r2, #1
 80019a0:	9201      	str	r2, [sp, #4]
 80019a2:	9a01      	ldr	r2, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	9403      	str	r4, [sp, #12]
 80019a6:	9404      	str	r4, [sp, #16]
 80019a8:	9405      	str	r4, [sp, #20]
 80019aa:	9406      	str	r4, [sp, #24]
 80019ac:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	9402      	str	r4, [sp, #8]
 80019b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80019c2:	4d0a      	ldr	r5, [pc, #40]	; (80019ec <BSP_LED_Init+0x64>)
 80019c4:	4622      	mov	r2, r4
 80019c6:	2120      	movs	r1, #32
 80019c8:	4628      	mov	r0, r5
 80019ca:	f000 fb8b 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80019ce:	2320      	movs	r3, #32
 80019d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80019da:	a903      	add	r1, sp, #12
 80019dc:	4628      	mov	r0, r5
 80019de:	f000 fa05 	bl	8001dec <HAL_GPIO_Init>
}
 80019e2:	4620      	mov	r0, r4
 80019e4:	b009      	add	sp, #36	; 0x24
 80019e6:	bd30      	pop	{r4, r5, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000

080019f0 <BSP_LED_On>:
{
 80019f0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	2120      	movs	r1, #32
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <BSP_LED_On+0x10>)
 80019f8:	f000 fb74 	bl	80020e4 <HAL_GPIO_WritePin>
}
 80019fc:	2000      	movs	r0, #0
 80019fe:	bd08      	pop	{r3, pc}
 8001a00:	40020000 	.word	0x40020000

08001a04 <BSP_LED_Off>:
{
 8001a04:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2120      	movs	r1, #32
 8001a0a:	4802      	ldr	r0, [pc, #8]	; (8001a14 <BSP_LED_Off+0x10>)
 8001a0c:	f000 fb6a 	bl	80020e4 <HAL_GPIO_WritePin>
}
 8001a10:	2000      	movs	r0, #0
 8001a12:	bd08      	pop	{r3, pc}
 8001a14:	40020000 	.word	0x40020000

08001a18 <BSP_LED_Toggle>:
{
 8001a18:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <BSP_LED_Toggle+0x10>)
 8001a1e:	f000 fb67 	bl	80020f0 <HAL_GPIO_TogglePin>
}
 8001a22:	2000      	movs	r0, #0
 8001a24:	bd08      	pop	{r3, pc}
 8001a26:	bf00      	nop
 8001a28:	40020000 	.word	0x40020000

08001a2c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a2c:	b530      	push	{r4, r5, lr}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	4605      	mov	r5, r0
 8001a32:	460c      	mov	r4, r1
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a34:	2200      	movs	r2, #0
 8001a36:	9201      	str	r2, [sp, #4]
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <BSP_PB_Init+0x94>)
 8001a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3c:	f041 0104 	orr.w	r1, r1, #4
 8001a40:	6319      	str	r1, [r3, #48]	; 0x30
 8001a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a44:	f001 0104 	and.w	r1, r1, #4
 8001a48:	9101      	str	r1, [sp, #4]
 8001a4a:	9901      	ldr	r1, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	9205      	str	r2, [sp, #20]
 8001a4e:	9206      	str	r2, [sp, #24]
 8001a50:	9207      	str	r2, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	9202      	str	r2, [sp, #8]
 8001a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a56:	f042 0204 	orr.w	r2, r2, #4
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a70:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001a72:	a903      	add	r1, sp, #12
 8001a74:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <BSP_PB_Init+0x98>)
 8001a76:	f000 f9b9 	bl	8001dec <HAL_GPIO_Init>
  if (ButtonMode == BUTTON_MODE_EXTI)
 8001a7a:	2c01      	cmp	r4, #1
 8001a7c:	d002      	beq.n	8001a84 <BSP_PB_Init+0x58>
  int32_t ret = BSP_ERROR_NONE;
 8001a7e:	2000      	movs	r0, #0
}
 8001a80:	b009      	add	sp, #36	; 0x24
 8001a82:	bd30      	pop	{r4, r5, pc}
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001a84:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <BSP_PB_Init+0x9c>)
 8001a86:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8001a8a:	4910      	ldr	r1, [pc, #64]	; (8001acc <BSP_PB_Init+0xa0>)
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f000 f994 	bl	8001dba <HAL_EXTI_GetHandle>
 8001a92:	b978      	cbnz	r0, 8001ab4 <BSP_PB_Init+0x88>
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <BSP_PB_Init+0xa4>)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f987 	bl	8001dac <HAL_EXTI_RegisterCallback>
 8001a9e:	b960      	cbnz	r0, 8001aba <BSP_PB_Init+0x8e>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	2028      	movs	r0, #40	; 0x28
 8001aa6:	f000 f929 	bl	8001cfc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001aaa:	2028      	movs	r0, #40	; 0x28
 8001aac:	f000 f95c 	bl	8001d68 <HAL_NVIC_EnableIRQ>
  int32_t ret = BSP_ERROR_NONE;
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	e7e5      	b.n	8001a80 <BSP_PB_Init+0x54>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ab4:	f06f 0003 	mvn.w	r0, #3
 8001ab8:	e7e2      	b.n	8001a80 <BSP_PB_Init+0x54>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001aba:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001abe:	e7df      	b.n	8001a80 <BSP_PB_Init+0x54>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	20000028 	.word	0x20000028
 8001acc:	0600000d 	.word	0x0600000d
 8001ad0:	08001aed 	.word	0x08001aed

08001ad4 <BSP_PB_GetState>:
{
 8001ad4:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ada:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <BSP_PB_GetState+0x14>)
 8001adc:	f000 fafc 	bl	80020d8 <HAL_GPIO_ReadPin>
}
 8001ae0:	fab0 f080 	clz	r0, r0
 8001ae4:	0940      	lsrs	r0, r0, #5
 8001ae6:	bd08      	pop	{r3, pc}
 8001ae8:	40020800 	.word	0x40020800

08001aec <BUTTON_USER_EXTI_Callback>:
{
 8001aec:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7fe ffc0 	bl	8000a74 <BSP_PB_Callback>
}
 8001af4:	bd08      	pop	{r3, pc}
	...

08001af8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001af8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_OK;

  huart->Instance = USART2;
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <MX_USART2_UART_Init+0x28>)
 8001afc:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate = 115200;
 8001afe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b02:	6042      	str	r2, [r0, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001b04:	2200      	movs	r2, #0
 8001b06:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001b08:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001b0a:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001b0c:	210c      	movs	r1, #12
 8001b0e:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b10:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001b12:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001b14:	f001 fba2 	bl	800325c <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8001b18:	3800      	subs	r0, #0
 8001b1a:	bf18      	it	ne
 8001b1c:	2001      	movne	r0, #1
 8001b1e:	bd08      	pop	{r3, pc}
 8001b20:	40004400 	.word	0x40004400

08001b24 <BSP_COM_Init>:
  if(COM > COMn)
 8001b24:	2801      	cmp	r0, #1
 8001b26:	d84d      	bhi.n	8001bc4 <BSP_COM_Init+0xa0>
{
 8001b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b2c:	b088      	sub	sp, #32
 8001b2e:	4604      	mov	r4, r0
     hcom_uart[COM].Instance = COM_USART[COM];
 8001b30:	4f26      	ldr	r7, [pc, #152]	; (8001bcc <BSP_COM_Init+0xa8>)
 8001b32:	0106      	lsls	r6, r0, #4
 8001b34:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8001b38:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <BSP_COM_Init+0xac>)
 8001b3a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001b3e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b42:	2500      	movs	r5, #0
 8001b44:	9501      	str	r5, [sp, #4]
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <BSP_COM_Init+0xb0>)
 8001b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b52:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	9502      	str	r5, [sp, #8]
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	f04f 0a02 	mov.w	sl, #2
 8001b76:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001b7e:	f04f 0907 	mov.w	r9, #7
 8001b82:	f8cd 901c 	str.w	r9, [sp, #28]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001b86:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8001bd8 <BSP_COM_Init+0xb4>
 8001b8a:	a903      	add	r1, sp, #12
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	f000 f92d 	bl	8001dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001b92:	2308      	movs	r3, #8
 8001b94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001b9e:	f8cd 901c 	str.w	r9, [sp, #28]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001ba2:	a903      	add	r1, sp, #12
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	f000 f921 	bl	8001dec <HAL_GPIO_Init>
    USART2_MspInit(&hcom_uart[COM]);
 8001baa:	1930      	adds	r0, r6, r4
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001bac:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8001bb0:	f7ff ffa2 	bl	8001af8 <MX_USART2_UART_Init>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bb4:	42a8      	cmp	r0, r5
 8001bb6:	bf0c      	ite	eq
 8001bb8:	4628      	moveq	r0, r5
 8001bba:	f06f 0003 	mvnne.w	r0, #3
}
 8001bbe:	b008      	add	sp, #32
 8001bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001bc4:	f06f 0001 	mvn.w	r0, #1
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000420 	.word	0x20000420
 8001bd0:	20000024 	.word	0x20000024
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <__io_putchar>:
{
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	9001      	str	r0, [sp, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <__io_putchar+0x28>)
 8001be4:	7818      	ldrb	r0, [r3, #0]
 8001be6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	2201      	movs	r2, #1
 8001bf0:	a901      	add	r1, sp, #4
 8001bf2:	4c05      	ldr	r4, [pc, #20]	; (8001c08 <__io_putchar+0x2c>)
 8001bf4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001bf8:	f001 fb5f 	bl	80032ba <HAL_UART_Transmit>
}
 8001bfc:	9801      	ldr	r0, [sp, #4]
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	bf00      	nop
 8001c04:	2000041c 	.word	0x2000041c
 8001c08:	20000420 	.word	0x20000420

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_InitTick+0x40>)
 8001c12:	7818      	ldrb	r0, [r3, #0]
 8001c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c18:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_InitTick+0x44>)
 8001c1e:	6810      	ldr	r0, [r2, #0]
 8001c20:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c24:	f000 f8ae 	bl	8001d84 <HAL_SYSTICK_Config>
 8001c28:	b968      	cbnz	r0, 8001c46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	2c0f      	cmp	r4, #15
 8001c2c:	d901      	bls.n	8001c32 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e00a      	b.n	8001c48 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c32:	2200      	movs	r2, #0
 8001c34:	4621      	mov	r1, r4
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3a:	f000 f85f 	bl	8001cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_InitTick+0x48>)
 8001c40:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2000      	movs	r0, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001c46:	2001      	movs	r0, #1
}
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000030 	.word	0x20000030
 8001c50:	20000020 	.word	0x20000020
 8001c54:	20000034 	.word	0x20000034

08001c58 <HAL_Init>:
{
 8001c58:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_Init+0x30>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c72:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f82f 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff ffc6 	bl	8001c0c <HAL_InitTick>
  HAL_MspInit();
 8001c80:	f7ff fc02 	bl	8001488 <HAL_MspInit>
}
 8001c84:	2000      	movs	r0, #0
 8001c86:	bd08      	pop	{r3, pc}
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_IncTick+0x10>)
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_IncTick+0x14>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	440b      	add	r3, r1
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000464 	.word	0x20000464
 8001ca0:	20000030 	.word	0x20000030

08001ca4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ca4:	4b01      	ldr	r3, [pc, #4]	; (8001cac <HAL_GetTick+0x8>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000464 	.word	0x20000464

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff fff6 	bl	8001ca4 <HAL_GetTick>
 8001cb8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cba:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001cbe:	d002      	beq.n	8001cc6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_Delay+0x24>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc6:	f7ff ffed 	bl	8001ca4 <HAL_GetTick>
 8001cca:	1b40      	subs	r0, r0, r5
 8001ccc:	42a0      	cmp	r0, r4
 8001cce:	d3fa      	bcc.n	8001cc6 <HAL_Delay+0x16>
  {
  }
}
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000030 	.word	0x20000030

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cda:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	0203      	lsls	r3, r0, #8
 8001cde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ce6:	0412      	lsls	r2, r2, #16
 8001ce8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001cf4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_NVIC_SetPriority+0x64>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d06:	f1c3 0c07 	rsb	ip, r3, #7
 8001d0a:	f1bc 0f04 	cmp.w	ip, #4
 8001d0e:	bf28      	it	cs
 8001d10:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d14:	f103 0e04 	add.w	lr, r3, #4
 8001d18:	f1be 0f06 	cmp.w	lr, #6
 8001d1c:	bf8c      	ite	hi
 8001d1e:	3b03      	subhi	r3, #3
 8001d20:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d22:	f04f 3eff 	mov.w	lr, #4294967295
 8001d26:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d2a:	ea21 010c 	bic.w	r1, r1, ip
 8001d2e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	fa0e f303 	lsl.w	r3, lr, r3
 8001d34:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	db09      	blt.n	8001d52 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	0109      	lsls	r1, r1, #4
 8001d40:	b2c9      	uxtb	r1, r1
 8001d42:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d46:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d4a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d4e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	f000 000f 	and.w	r0, r0, #15
 8001d56:	0109      	lsls	r1, r1, #4
 8001d58:	b2c9      	uxtb	r1, r1
 8001d5a:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <HAL_NVIC_SetPriority+0x68>)
 8001d5c:	5419      	strb	r1, [r3, r0]
 8001d5e:	e7f6      	b.n	8001d4e <HAL_NVIC_SetPriority+0x52>
 8001d60:	e000ed00 	.word	0xe000ed00
 8001d64:	e000ed14 	.word	0xe000ed14

08001d68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	db08      	blt.n	8001d7e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6c:	0942      	lsrs	r2, r0, #5
 8001d6e:	f000 001f 	and.w	r0, r0, #31
 8001d72:	2301      	movs	r3, #1
 8001d74:	fa03 f000 	lsl.w	r0, r3, r0
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <HAL_NVIC_EnableIRQ+0x18>)
 8001d7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	3801      	subs	r0, #1
 8001d86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d8a:	d20b      	bcs.n	8001da4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d90:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <HAL_SYSTICK_Config+0x24>)
 8001d94:	21f0      	movs	r1, #240	; 0xf0
 8001d96:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	2207      	movs	r2, #7
 8001da0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001da4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001dac:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001dae:	4608      	mov	r0, r1
 8001db0:	b909      	cbnz	r1, 8001db6 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001db2:	605a      	str	r2, [r3, #4]
      break;
 8001db4:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8001db8:	4770      	bx	lr

08001dba <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001dba:	b110      	cbz	r0, 8001dc2 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001dbc:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	4770      	bx	lr
    return HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
  }
}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001dc8:	b508      	push	{r3, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001dca:	6803      	ldr	r3, [r0, #0]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_EXTI_IRQHandler+0x20>)
 8001dd6:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 8001dd8:	421a      	tst	r2, r3
 8001dda:	d004      	beq.n	8001de6 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001ddc:	4a02      	ldr	r2, [pc, #8]	; (8001de8 <HAL_EXTI_IRQHandler+0x20>)
 8001dde:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001de0:	6843      	ldr	r3, [r0, #4]
 8001de2:	b103      	cbz	r3, 8001de6 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8001de4:	4798      	blx	r3
    }
  }
}
 8001de6:	bd08      	pop	{r3, pc}
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	b083      	sub	sp, #12
 8001df2:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df4:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df6:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	2503      	movs	r5, #3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfc:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001fb4 <HAL_GPIO_Init+0x1c8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e00:	4c6a      	ldr	r4, [pc, #424]	; (8001fac <HAL_GPIO_Init+0x1c0>)
 8001e02:	e04b      	b.n	8001e9c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001e04:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e06:	fa05 fa02 	lsl.w	sl, r5, r2
 8001e0a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0e:	68cf      	ldr	r7, [r1, #12]
 8001e10:	4097      	lsls	r7, r2
 8001e12:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001e16:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e18:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	684f      	ldr	r7, [r1, #4]
 8001e20:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001e24:	409f      	lsls	r7, r3
 8001e26:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001e2a:	6047      	str	r7, [r0, #4]
 8001e2c:	e044      	b.n	8001eb8 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	f04f 0c00 	mov.w	ip, #0
 8001e32:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001e36:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3a:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8001e3e:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e44:	684e      	ldr	r6, [r1, #4]
 8001e46:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	bf0c      	ite	eq
 8001e4c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001e50:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001e54:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001e56:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e58:	684e      	ldr	r6, [r1, #4]
 8001e5a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	bf0c      	ite	eq
 8001e60:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001e64:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001e68:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001e6a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6c:	684e      	ldr	r6, [r1, #4]
 8001e6e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001e72:	bf0c      	ite	eq
 8001e74:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001e78:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8001e7c:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7e:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	684e      	ldr	r6, [r1, #4]
 8001e82:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001e86:	bf0c      	ite	eq
 8001e88:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001e8c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001e90:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	3301      	adds	r3, #1
 8001e94:	3202      	adds	r2, #2
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	f000 8085 	beq.w	8001fa6 <HAL_GPIO_Init+0x1ba>
    ioposition = 0x01U << position;
 8001e9c:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea0:	680f      	ldr	r7, [r1, #0]
 8001ea2:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8001ea6:	ea3c 0607 	bics.w	r6, ip, r7
 8001eaa:	d1f2      	bne.n	8001e92 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eac:	684f      	ldr	r7, [r1, #4]
 8001eae:	f007 0703 	and.w	r7, r7, #3
 8001eb2:	3f01      	subs	r7, #1
 8001eb4:	2f01      	cmp	r7, #1
 8001eb6:	d9a5      	bls.n	8001e04 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	684f      	ldr	r7, [r1, #4]
 8001eba:	f007 0703 	and.w	r7, r7, #3
 8001ebe:	2f03      	cmp	r7, #3
 8001ec0:	d024      	beq.n	8001f0c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8001ec2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec4:	fa05 fc02 	lsl.w	ip, r5, r2
 8001ec8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	688f      	ldr	r7, [r1, #8]
 8001ece:	4097      	lsls	r7, r2
 8001ed0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001ed4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	684f      	ldr	r7, [r1, #4]
 8001ed8:	f007 0703 	and.w	r7, r7, #3
 8001edc:	2f02      	cmp	r7, #2
 8001ede:	d115      	bne.n	8001f0c <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8001ee0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001ee4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001ee8:	f8dc a020 	ldr.w	sl, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eec:	f003 0707 	and.w	r7, r3, #7
 8001ef0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8001ef4:	270f      	movs	r7, #15
 8001ef6:	fa07 f70b 	lsl.w	r7, r7, fp
 8001efa:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001efe:	690f      	ldr	r7, [r1, #16]
 8001f00:	fa07 f70b 	lsl.w	r7, r7, fp
 8001f04:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001f08:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8001f0c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0e:	fa05 fc02 	lsl.w	ip, r5, r2
 8001f12:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f16:	684f      	ldr	r7, [r1, #4]
 8001f18:	f007 0703 	and.w	r7, r7, #3
 8001f1c:	4097      	lsls	r7, r2
 8001f1e:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8001f22:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f24:	684f      	ldr	r7, [r1, #4]
 8001f26:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001f2a:	d0b2      	beq.n	8001e92 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	2700      	movs	r7, #0
 8001f2e:	9701      	str	r7, [sp, #4]
 8001f30:	4e1f      	ldr	r6, [pc, #124]	; (8001fb0 <HAL_GPIO_Init+0x1c4>)
 8001f32:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8001f34:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001f38:	6477      	str	r7, [r6, #68]	; 0x44
 8001f3a:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8001f3c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001f40:	9701      	str	r7, [sp, #4]
 8001f42:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f44:	f023 0703 	bic.w	r7, r3, #3
 8001f48:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001f4c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001f50:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	f003 0c03 	and.w	ip, r3, #3
 8001f58:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8001f5c:	f04f 0c0f 	mov.w	ip, #15
 8001f60:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001f64:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f68:	4540      	cmp	r0, r8
 8001f6a:	f43f af60 	beq.w	8001e2e <HAL_GPIO_Init+0x42>
 8001f6e:	f5a6 5650 	sub.w	r6, r6, #13312	; 0x3400
 8001f72:	42b0      	cmp	r0, r6
 8001f74:	d010      	beq.n	8001f98 <HAL_GPIO_Init+0x1ac>
 8001f76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	d00e      	beq.n	8001f9c <HAL_GPIO_Init+0x1b0>
 8001f7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f82:	42b0      	cmp	r0, r6
 8001f84:	d00d      	beq.n	8001fa2 <HAL_GPIO_Init+0x1b6>
 8001f86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f8a:	42b0      	cmp	r0, r6
 8001f8c:	bf0c      	ite	eq
 8001f8e:	f04f 0c04 	moveq.w	ip, #4
 8001f92:	f04f 0c07 	movne.w	ip, #7
 8001f96:	e74c      	b.n	8001e32 <HAL_GPIO_Init+0x46>
 8001f98:	46f4      	mov	ip, lr
 8001f9a:	e74a      	b.n	8001e32 <HAL_GPIO_Init+0x46>
 8001f9c:	f04f 0c02 	mov.w	ip, #2
 8001fa0:	e747      	b.n	8001e32 <HAL_GPIO_Init+0x46>
 8001fa2:	46ac      	mov	ip, r5
 8001fa4:	e745      	b.n	8001e32 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001fa6:	b003      	add	sp, #12
 8001fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fac:	40013c00 	.word	0x40013c00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fbc:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2701      	movs	r7, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001fc2:	f04f 0a0f 	mov.w	sl, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001fca:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80020d4 <HAL_GPIO_DeInit+0x11c>
 8001fce:	e029      	b.n	8002024 <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001fd0:	f04f 0900 	mov.w	r9, #0
 8001fd4:	9d01      	ldr	r5, [sp, #4]
 8001fd6:	fa09 f505 	lsl.w	r5, r9, r5
 8001fda:	4565      	cmp	r5, ip
 8001fdc:	d058      	beq.n	8002090 <HAL_GPIO_DeInit+0xd8>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	6805      	ldr	r5, [r0, #0]
 8001fe0:	005c      	lsls	r4, r3, #1
 8001fe2:	fa0b f404 	lsl.w	r4, fp, r4
 8001fe6:	ea25 0504 	bic.w	r5, r5, r4
 8001fea:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fec:	08de      	lsrs	r6, r3, #3
 8001fee:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8001ff2:	f8d6 c020 	ldr.w	ip, [r6, #32]
 8001ff6:	f003 0507 	and.w	r5, r3, #7
 8001ffa:	00ad      	lsls	r5, r5, #2
 8001ffc:	fa0a f505 	lsl.w	r5, sl, r5
 8002000:	ea2c 0505 	bic.w	r5, ip, r5
 8002004:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002006:	68c5      	ldr	r5, [r0, #12]
 8002008:	ea25 0504 	bic.w	r5, r5, r4
 800200c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200e:	6845      	ldr	r5, [r0, #4]
 8002010:	ea25 0202 	bic.w	r2, r5, r2
 8002014:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002016:	6882      	ldr	r2, [r0, #8]
 8002018:	ea22 0404 	bic.w	r4, r2, r4
 800201c:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	3301      	adds	r3, #1
 8002020:	2b10      	cmp	r3, #16
 8002022:	d052      	beq.n	80020ca <HAL_GPIO_DeInit+0x112>
    ioposition = 0x01U << position;
 8002024:	fa07 f203 	lsl.w	r2, r7, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002028:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 800202c:	ea32 0401 	bics.w	r4, r2, r1
 8002030:	d1f5      	bne.n	800201e <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002032:	f023 0403 	bic.w	r4, r3, #3
 8002036:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800203a:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 800203e:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002042:	f003 0503 	and.w	r5, r3, #3
 8002046:	00ad      	lsls	r5, r5, #2
 8002048:	9501      	str	r5, [sp, #4]
 800204a:	fa0a fe05 	lsl.w	lr, sl, r5
 800204e:	ea0e 0c0c 	and.w	ip, lr, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002052:	4d1f      	ldr	r5, [pc, #124]	; (80020d0 <HAL_GPIO_DeInit+0x118>)
 8002054:	42a8      	cmp	r0, r5
 8002056:	d0bb      	beq.n	8001fd0 <HAL_GPIO_DeInit+0x18>
 8002058:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800205c:	42a8      	cmp	r0, r5
 800205e:	d010      	beq.n	8002082 <HAL_GPIO_DeInit+0xca>
 8002060:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002064:	42a8      	cmp	r0, r5
 8002066:	d00e      	beq.n	8002086 <HAL_GPIO_DeInit+0xce>
 8002068:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800206c:	42a8      	cmp	r0, r5
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_DeInit+0xd4>
 8002070:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002074:	42a8      	cmp	r0, r5
 8002076:	bf0c      	ite	eq
 8002078:	f04f 0904 	moveq.w	r9, #4
 800207c:	f04f 0907 	movne.w	r9, #7
 8002080:	e7a8      	b.n	8001fd4 <HAL_GPIO_DeInit+0x1c>
 8002082:	46b9      	mov	r9, r7
 8002084:	e7a6      	b.n	8001fd4 <HAL_GPIO_DeInit+0x1c>
 8002086:	f04f 0902 	mov.w	r9, #2
 800208a:	e7a3      	b.n	8001fd4 <HAL_GPIO_DeInit+0x1c>
 800208c:	46d9      	mov	r9, fp
 800208e:	e7a1      	b.n	8001fd4 <HAL_GPIO_DeInit+0x1c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002090:	f8d8 5000 	ldr.w	r5, [r8]
 8002094:	ea25 0506 	bic.w	r5, r5, r6
 8002098:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800209c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80020a0:	ea25 0506 	bic.w	r5, r5, r6
 80020a4:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020a8:	f8d8 500c 	ldr.w	r5, [r8, #12]
 80020ac:	ea25 0506 	bic.w	r5, r5, r6
 80020b0:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80020b8:	ea25 0606 	bic.w	r6, r5, r6
 80020bc:	f8c8 6008 	str.w	r6, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020c0:	68a5      	ldr	r5, [r4, #8]
 80020c2:	ea25 050e 	bic.w	r5, r5, lr
 80020c6:	60a5      	str	r5, [r4, #8]
 80020c8:	e789      	b.n	8001fde <HAL_GPIO_DeInit+0x26>
    }
  }
}
 80020ca:	b003      	add	sp, #12
 80020cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d8:	6903      	ldr	r3, [r0, #16]
 80020da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80020dc:	bf14      	ite	ne
 80020de:	2001      	movne	r0, #1
 80020e0:	2000      	moveq	r0, #0
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	b10a      	cbz	r2, 80020ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	6181      	str	r1, [r0, #24]
 80020e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	0409      	lsls	r1, r1, #16
 80020ec:	6181      	str	r1, [r0, #24]
  }
}
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f2:	ea01 0203 	and.w	r2, r1, r3
 80020f6:	ea21 0103 	bic.w	r1, r1, r3
 80020fa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80020fe:	6181      	str	r1, [r0, #24]
}
 8002100:	4770      	bx	lr
	...

08002104 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	2800      	cmp	r0, #0
 8002106:	f000 81e1 	beq.w	80024cc <HAL_RCC_OscConfig+0x3c8>
{
 800210a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	6803      	ldr	r3, [r0, #0]
 8002114:	f013 0f01 	tst.w	r3, #1
 8002118:	d03b      	beq.n	8002192 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	4b9f      	ldr	r3, [pc, #636]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d02c      	beq.n	8002180 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	4b9c      	ldr	r3, [pc, #624]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212e:	2b08      	cmp	r3, #8
 8002130:	d021      	beq.n	8002176 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002132:	6863      	ldr	r3, [r4, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d04f      	beq.n	80021da <HAL_RCC_OscConfig+0xd6>
 800213a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800213e:	d052      	beq.n	80021e6 <HAL_RCC_OscConfig+0xe2>
 8002140:	4b95      	ldr	r3, [pc, #596]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002150:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002152:	6863      	ldr	r3, [r4, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d050      	beq.n	80021fa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fda4 	bl	8001ca4 <HAL_GetTick>
 800215c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4e8e      	ldr	r6, [pc, #568]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002160:	6833      	ldr	r3, [r6, #0]
 8002162:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002166:	d114      	bne.n	8002192 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fd9c 	bl	8001ca4 <HAL_GetTick>
 800216c:	1b40      	subs	r0, r0, r5
 800216e:	2864      	cmp	r0, #100	; 0x64
 8002170:	d9f6      	bls.n	8002160 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8002172:	2003      	movs	r0, #3
 8002174:	e1b1      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800217e:	d0d8      	beq.n	8002132 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002188:	d003      	beq.n	8002192 <HAL_RCC_OscConfig+0x8e>
 800218a:	6863      	ldr	r3, [r4, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 819f 	beq.w	80024d0 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	f013 0f02 	tst.w	r3, #2
 8002198:	d054      	beq.n	8002244 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f013 0f0c 	tst.w	r3, #12
 80021a2:	d03e      	beq.n	8002222 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a4:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d033      	beq.n	8002218 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b0:	68e3      	ldr	r3, [r4, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d068      	beq.n	8002288 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b6:	4b79      	ldr	r3, [pc, #484]	; (800239c <HAL_RCC_OscConfig+0x298>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff fd72 	bl	8001ca4 <HAL_GetTick>
 80021c0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4e75      	ldr	r6, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80021c4:	6833      	ldr	r3, [r6, #0]
 80021c6:	f013 0f02 	tst.w	r3, #2
 80021ca:	d154      	bne.n	8002276 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fd6a 	bl	8001ca4 <HAL_GetTick>
 80021d0:	1b40      	subs	r0, r0, r5
 80021d2:	2802      	cmp	r0, #2
 80021d4:	d9f6      	bls.n	80021c4 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80021d6:	2003      	movs	r0, #3
 80021d8:	e17f      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	4a6f      	ldr	r2, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80021dc:	6813      	ldr	r3, [r2, #0]
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e7b5      	b.n	8002152 <HAL_RCC_OscConfig+0x4e>
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e7ab      	b.n	8002152 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80021fa:	f7ff fd53 	bl	8001ca4 <HAL_GetTick>
 80021fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002200:	4e65      	ldr	r6, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002202:	6833      	ldr	r3, [r6, #0]
 8002204:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002208:	d0c3      	beq.n	8002192 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220a:	f7ff fd4b 	bl	8001ca4 <HAL_GetTick>
 800220e:	1b40      	subs	r0, r0, r5
 8002210:	2864      	cmp	r0, #100	; 0x64
 8002212:	d9f6      	bls.n	8002202 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8002214:	2003      	movs	r0, #3
 8002216:	e160      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002218:	4b5f      	ldr	r3, [pc, #380]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002220:	d1c6      	bne.n	80021b0 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f013 0f02 	tst.w	r3, #2
 800222a:	d003      	beq.n	8002234 <HAL_RCC_OscConfig+0x130>
 800222c:	68e3      	ldr	r3, [r4, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 8150 	bne.w	80024d4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	6921      	ldr	r1, [r4, #16]
 800223a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800223e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002242:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	f013 0f08 	tst.w	r3, #8
 800224a:	d042      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224c:	6963      	ldr	r3, [r4, #20]
 800224e:	b36b      	cbz	r3, 80022ac <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002250:	4b52      	ldr	r3, [pc, #328]	; (800239c <HAL_RCC_OscConfig+0x298>)
 8002252:	2201      	movs	r2, #1
 8002254:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fd24 	bl	8001ca4 <HAL_GetTick>
 800225c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4e4e      	ldr	r6, [pc, #312]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002260:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002262:	f013 0f02 	tst.w	r3, #2
 8002266:	d134      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff fd1c 	bl	8001ca4 <HAL_GetTick>
 800226c:	1b40      	subs	r0, r0, r5
 800226e:	2802      	cmp	r0, #2
 8002270:	d9f6      	bls.n	8002260 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8002272:	2003      	movs	r0, #3
 8002274:	e131      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	6921      	ldr	r1, [r4, #16]
 800227c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002280:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e7dd      	b.n	8002244 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002288:	4b44      	ldr	r3, [pc, #272]	; (800239c <HAL_RCC_OscConfig+0x298>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800228e:	f7ff fd09 	bl	8001ca4 <HAL_GetTick>
 8002292:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002294:	4e40      	ldr	r6, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002296:	6833      	ldr	r3, [r6, #0]
 8002298:	f013 0f02 	tst.w	r3, #2
 800229c:	d0d2      	beq.n	8002244 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff fd01 	bl	8001ca4 <HAL_GetTick>
 80022a2:	1b40      	subs	r0, r0, r5
 80022a4:	2802      	cmp	r0, #2
 80022a6:	d9f6      	bls.n	8002296 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80022a8:	2003      	movs	r0, #3
 80022aa:	e116      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x298>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fcf6 	bl	8001ca4 <HAL_GetTick>
 80022b8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	4e37      	ldr	r6, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80022bc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80022be:	f013 0f02 	tst.w	r3, #2
 80022c2:	d006      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fcee 	bl	8001ca4 <HAL_GetTick>
 80022c8:	1b40      	subs	r0, r0, r5
 80022ca:	2802      	cmp	r0, #2
 80022cc:	d9f6      	bls.n	80022bc <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 80022ce:	2003      	movs	r0, #3
 80022d0:	e103      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	f013 0f04 	tst.w	r3, #4
 80022d8:	d076      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022e2:	d133      	bne.n	800234c <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 80022ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022fc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x29c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002306:	d023      	beq.n	8002350 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	68a3      	ldr	r3, [r4, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d034      	beq.n	8002378 <HAL_RCC_OscConfig+0x274>
 800230e:	2b05      	cmp	r3, #5
 8002310:	d038      	beq.n	8002384 <HAL_RCC_OscConfig+0x280>
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	671a      	str	r2, [r3, #112]	; 0x70
 800231c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800231e:	f022 0204 	bic.w	r2, r2, #4
 8002322:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	68a3      	ldr	r3, [r4, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff fcbb 	bl	8001ca4 <HAL_GetTick>
 800232e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4f19      	ldr	r7, [pc, #100]	; (8002398 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002338:	f013 0f02 	tst.w	r3, #2
 800233c:	d143      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff fcb1 	bl	8001ca4 <HAL_GetTick>
 8002342:	1b80      	subs	r0, r0, r6
 8002344:	4540      	cmp	r0, r8
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8002348:	2003      	movs	r0, #3
 800234a:	e0c6      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 800234c:	2500      	movs	r5, #0
 800234e:	e7d6      	b.n	80022fe <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002350:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0x29c>)
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800235a:	f7ff fca3 	bl	8001ca4 <HAL_GetTick>
 800235e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4f0f      	ldr	r7, [pc, #60]	; (80023a0 <HAL_RCC_OscConfig+0x29c>)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002368:	d1ce      	bne.n	8002308 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7ff fc9b 	bl	8001ca4 <HAL_GetTick>
 800236e:	1b80      	subs	r0, r0, r6
 8002370:	2802      	cmp	r0, #2
 8002372:	d9f6      	bls.n	8002362 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8002374:	2003      	movs	r0, #3
 8002376:	e0b0      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 800237a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	e7cf      	b.n	8002324 <HAL_RCC_OscConfig+0x220>
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_RCC_OscConfig+0x294>)
 8002386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002388:	f042 0204 	orr.w	r2, r2, #4
 800238c:	671a      	str	r2, [r3, #112]	; 0x70
 800238e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	671a      	str	r2, [r3, #112]	; 0x70
 8002396:	e7c5      	b.n	8002324 <HAL_RCC_OscConfig+0x220>
 8002398:	40023800 	.word	0x40023800
 800239c:	42470000 	.word	0x42470000
 80023a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fc7e 	bl	8001ca4 <HAL_GetTick>
 80023a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023aa:	4f52      	ldr	r7, [pc, #328]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b2:	f013 0f02 	tst.w	r3, #2
 80023b6:	d006      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff fc74 	bl	8001ca4 <HAL_GetTick>
 80023bc:	1b80      	subs	r0, r0, r6
 80023be:	4540      	cmp	r0, r8
 80023c0:	d9f6      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
 80023c4:	e089      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c6:	b9ed      	cbnz	r5, 8002404 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c8:	69a3      	ldr	r3, [r4, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8084 	beq.w	80024d8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d0:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 80023d2:	6892      	ldr	r2, [r2, #8]
 80023d4:	f002 020c 	and.w	r2, r2, #12
 80023d8:	2a08      	cmp	r2, #8
 80023da:	d051      	beq.n	8002480 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d017      	beq.n	8002410 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <HAL_RCC_OscConfig+0x3f4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fc5d 	bl	8001ca4 <HAL_GetTick>
 80023ea:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ec:	4d41      	ldr	r5, [pc, #260]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023f4:	d042      	beq.n	800247c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f6:	f7ff fc55 	bl	8001ca4 <HAL_GetTick>
 80023fa:	1b00      	subs	r0, r0, r4
 80023fc:	2802      	cmp	r0, #2
 80023fe:	d9f6      	bls.n	80023ee <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
 8002402:	e06a      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 8002406:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	e7db      	b.n	80023c8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x3f4>)
 8002412:	2200      	movs	r2, #0
 8002414:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002416:	f7ff fc45 	bl	8001ca4 <HAL_GetTick>
 800241a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	4e35      	ldr	r6, [pc, #212]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 800241e:	6833      	ldr	r3, [r6, #0]
 8002420:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002424:	d006      	beq.n	8002434 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7ff fc3d 	bl	8001ca4 <HAL_GetTick>
 800242a:	1b40      	subs	r0, r0, r5
 800242c:	2802      	cmp	r0, #2
 800242e:	d9f6      	bls.n	800241e <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
 8002432:	e052      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002434:	69e3      	ldr	r3, [r4, #28]
 8002436:	6a22      	ldr	r2, [r4, #32]
 8002438:	4313      	orrs	r3, r2
 800243a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800243c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002446:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002448:	0852      	lsrs	r2, r2, #1
 800244a:	3a01      	subs	r2, #1
 800244c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002450:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 8002452:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_OscConfig+0x3f4>)
 8002456:	2201      	movs	r2, #1
 8002458:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800245a:	f7ff fc23 	bl	8001ca4 <HAL_GetTick>
 800245e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	4d24      	ldr	r5, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002468:	d106      	bne.n	8002478 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff fc1b 	bl	8001ca4 <HAL_GetTick>
 800246e:	1b00      	subs	r0, r0, r4
 8002470:	2802      	cmp	r0, #2
 8002472:	d9f6      	bls.n	8002462 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002474:	2003      	movs	r0, #3
 8002476:	e030      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002478:	2000      	movs	r0, #0
 800247a:	e02e      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
 800247c:	2000      	movs	r0, #0
 800247e:	e02c      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	2b01      	cmp	r3, #1
 8002482:	d02d      	beq.n	80024e0 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x3f0>)
 8002486:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002488:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248c:	69e2      	ldr	r2, [r4, #28]
 800248e:	4291      	cmp	r1, r2
 8002490:	d128      	bne.n	80024e4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	6a21      	ldr	r1, [r4, #32]
 8002498:	428a      	cmp	r2, r1
 800249a:	d125      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024a2:	401a      	ands	r2, r3
 80024a4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024a8:	d120      	bne.n	80024ec <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024aa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80024ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024b0:	0852      	lsrs	r2, r2, #1
 80024b2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024b8:	d11a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 80024c4:	bf14      	ite	ne
 80024c6:	2001      	movne	r0, #1
 80024c8:	2000      	moveq	r0, #0
 80024ca:	e006      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 80024cc:	2001      	movs	r0, #1
}
 80024ce:	4770      	bx	lr
        return HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
 80024d2:	e002      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 80024d4:	2001      	movs	r0, #1
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
}
 80024da:	b002      	add	sp, #8
 80024dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e7fa      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e7f8      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
 80024e8:	2001      	movs	r0, #1
 80024ea:	e7f6      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
 80024ec:	2001      	movs	r0, #1
 80024ee:	e7f4      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
 80024f0:	2001      	movs	r0, #1
 80024f2:	e7f2      	b.n	80024da <HAL_RCC_OscConfig+0x3d6>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	42470000 	.word	0x42470000

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d057      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0xbe>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d157      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800251c:	d02a      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002526:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800252a:	ebb1 000c 	subs.w	r0, r1, ip
 800252e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002532:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002536:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800253a:	0181      	lsls	r1, r0, #6
 800253c:	1a09      	subs	r1, r1, r0
 800253e:	eb63 030e 	sbc.w	r3, r3, lr
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002548:	00c9      	lsls	r1, r1, #3
 800254a:	eb11 0c0c 	adds.w	ip, r1, ip
 800254e:	f143 0300 	adc.w	r3, r3, #0
 8002552:	0259      	lsls	r1, r3, #9
 8002554:	2300      	movs	r3, #0
 8002556:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800255a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800255e:	f7fd fe97 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800256e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002572:	e025      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800257c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002580:	ebb1 000c 	subs.w	r0, r1, ip
 8002584:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002588:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800258c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002590:	0181      	lsls	r1, r0, #6
 8002592:	1a09      	subs	r1, r1, r0
 8002594:	eb63 030e 	sbc.w	r3, r3, lr
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259e:	00c9      	lsls	r1, r1, #3
 80025a0:	eb11 0c0c 	adds.w	ip, r1, ip
 80025a4:	f143 0300 	adc.w	r3, r3, #0
 80025a8:	0299      	lsls	r1, r3, #10
 80025aa:	2300      	movs	r3, #0
 80025ac:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80025b0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80025b4:	f7fd fe6c 	bl	8000290 <__aeabi_uldivmod>
 80025b8:	e7d3      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ba:	4803      	ldr	r0, [pc, #12]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025c0:	bd08      	pop	{r3, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	00f42400 	.word	0x00f42400

080025d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	f000 809d 	beq.w	8002710 <HAL_RCC_ClockConfig+0x140>
{
 80025d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025da:	460d      	mov	r5, r1
 80025dc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025de:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCC_ClockConfig+0x150>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	428b      	cmp	r3, r1
 80025e8:	d208      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	b2cb      	uxtb	r3, r1
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_RCC_ClockConfig+0x150>)
 80025ee:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	428b      	cmp	r3, r1
 80025f8:	f040 808c 	bne.w	8002714 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	f013 0f02 	tst.w	r3, #2
 8002602:	d017      	beq.n	8002634 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	f013 0f04 	tst.w	r3, #4
 8002608:	d004      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260a:	4a46      	ldr	r2, [pc, #280]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 800260c:	6893      	ldr	r3, [r2, #8]
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	f013 0f08 	tst.w	r3, #8
 800261a:	d004      	beq.n	8002626 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800261c:	4a41      	ldr	r2, [pc, #260]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 800261e:	6893      	ldr	r3, [r2, #8]
 8002620:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002624:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002626:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 8002628:	6893      	ldr	r3, [r2, #8]
 800262a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800262e:	68a1      	ldr	r1, [r4, #8]
 8002630:	430b      	orrs	r3, r1
 8002632:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f013 0f01 	tst.w	r3, #1
 800263a:	d032      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	6862      	ldr	r2, [r4, #4]
 800263e:	2a01      	cmp	r2, #1
 8002640:	d021      	beq.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002642:	1e93      	subs	r3, r2, #2
 8002644:	2b01      	cmp	r3, #1
 8002646:	d925      	bls.n	8002694 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f013 0f02 	tst.w	r3, #2
 8002650:	d062      	beq.n	8002718 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4934      	ldr	r1, [pc, #208]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 8002654:	688b      	ldr	r3, [r1, #8]
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800265e:	f7ff fb21 	bl	8001ca4 <HAL_GetTick>
 8002662:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002664:	4f2f      	ldr	r7, [pc, #188]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002666:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	6862      	ldr	r2, [r4, #4]
 8002672:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002676:	d014      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff fb14 	bl	8001ca4 <HAL_GetTick>
 800267c:	1b80      	subs	r0, r0, r6
 800267e:	4540      	cmp	r0, r8
 8002680:	d9f3      	bls.n	800266a <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002682:	2003      	movs	r0, #3
 8002684:	e042      	b.n	800270c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800268e:	d1e0      	bne.n	8002652 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002690:	2001      	movs	r0, #1
 8002692:	e03b      	b.n	800270c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800269c:	d1d9      	bne.n	8002652 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800269e:	2001      	movs	r0, #1
 80026a0:	e034      	b.n	800270c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_RCC_ClockConfig+0x150>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	42ab      	cmp	r3, r5
 80026ac:	d907      	bls.n	80026be <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	b2ea      	uxtb	r2, r5
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_ClockConfig+0x150>)
 80026b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	42ab      	cmp	r3, r5
 80026bc:	d12e      	bne.n	800271c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	f013 0f04 	tst.w	r3, #4
 80026c4:	d006      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c6:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 80026c8:	6893      	ldr	r3, [r2, #8]
 80026ca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026ce:	68e1      	ldr	r1, [r4, #12]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	f013 0f08 	tst.w	r3, #8
 80026da:	d007      	beq.n	80026ec <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 80026de:	6893      	ldr	r3, [r2, #8]
 80026e0:	6921      	ldr	r1, [r4, #16]
 80026e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ec:	f7ff ff06 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCC_ClockConfig+0x154>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x158>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	40d8      	lsrs	r0, r3
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x15c>)
 8002700:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x160>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f7ff fa81 	bl	8001c0c <HAL_InitTick>
  return HAL_OK;
 800270a:	2000      	movs	r0, #0
}
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002710:	2001      	movs	r0, #1
}
 8002712:	4770      	bx	lr
      return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e7f9      	b.n	800270c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8002718:	2001      	movs	r0, #1
 800271a:	e7f7      	b.n	800270c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
 800271e:	e7f5      	b.n	800270c <HAL_RCC_ClockConfig+0x13c>
 8002720:	40023c00 	.word	0x40023c00
 8002724:	40023800 	.word	0x40023800
 8002728:	08005468 	.word	0x08005468
 800272c:	20000020 	.word	0x20000020
 8002730:	20000034 	.word	0x20000034

08002734 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_GetPCLK1Freq+0x18>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002742:	6810      	ldr	r0, [r2, #0]
}
 8002744:	40d8      	lsrs	r0, r3
 8002746:	4770      	bx	lr
 8002748:	40023800 	.word	0x40023800
 800274c:	08005478 	.word	0x08005478
 8002750:	20000020 	.word	0x20000020

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_RCC_GetPCLK2Freq+0x18>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002762:	6810      	ldr	r0, [r2, #0]
}
 8002764:	40d8      	lsrs	r0, r3
 8002766:	4770      	bx	lr
 8002768:	40023800 	.word	0x40023800
 800276c:	08005478 	.word	0x08005478
 8002770:	20000020 	.word	0x20000020

08002774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	4681      	mov	r9, r0
 800277c:	460f      	mov	r7, r1
 800277e:	4616      	mov	r6, r2
 8002780:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002782:	f7ff fa8f 	bl	8001ca4 <HAL_GetTick>
 8002786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002788:	442b      	add	r3, r5
 800278a:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800278e:	f7ff fa89 	bl	8001ca4 <HAL_GetTick>
 8002792:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800279c:	fb08 f303 	mul.w	r3, r8, r3
 80027a0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	f8d9 3000 	ldr.w	r3, [r9]
 80027a6:	689c      	ldr	r4, [r3, #8]
 80027a8:	ea37 0204 	bics.w	r2, r7, r4
 80027ac:	bf0c      	ite	eq
 80027ae:	f04f 0c01 	moveq.w	ip, #1
 80027b2:	f04f 0c00 	movne.w	ip, #0
 80027b6:	45b4      	cmp	ip, r6
 80027b8:	d044      	beq.n	8002844 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 80027be:	d0f2      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027c0:	f7ff fa70 	bl	8001ca4 <HAL_GetTick>
 80027c4:	eba0 000a 	sub.w	r0, r0, sl
 80027c8:	4540      	cmp	r0, r8
 80027ca:	d207      	bcs.n	80027dc <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027cc:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf08      	it	eq
 80027d2:	4698      	moveq	r8, r3
      }
      count--;
 80027d4:	9b01      	ldr	r3, [sp, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	e7e2      	b.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027dc:	f8d9 2000 	ldr.w	r2, [r9]
 80027e0:	6853      	ldr	r3, [r2, #4]
 80027e2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80027e6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f0:	d00c      	beq.n	800280c <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027f2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d016      	beq.n	800282a <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002802:	2300      	movs	r3, #0
 8002804:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8002808:	2003      	movs	r0, #3
 800280a:	e01c      	b.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002814:	d002      	beq.n	800281c <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	d1ea      	bne.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 800281c:	f8d9 2000 	ldr.w	r2, [r9]
 8002820:	6813      	ldr	r3, [r2, #0]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	e7e3      	b.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800282a:	f8d9 2000 	ldr.w	r2, [r9]
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	f8d9 2000 	ldr.w	r2, [r9]
 800283a:	6813      	ldr	r3, [r2, #0]
 800283c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e7db      	b.n	80027fc <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8002844:	2000      	movs	r0, #0
}
 8002846:	b002      	add	sp, #8
 8002848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800284c:	20000020 	.word	0x20000020

08002850 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b510      	push	{r4, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <SPI_EndRxTxTransaction+0x60>)
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <SPI_EndRxTxTransaction+0x64>)
 800285c:	fba3 3000 	umull	r3, r0, r3, r0
 8002860:	0d40      	lsrs	r0, r0, #21
 8002862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002866:	fb03 f000 	mul.w	r0, r3, r0
 800286a:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002872:	d00b      	beq.n	800288c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	b1bb      	cbz	r3, 80028a8 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8002878:	9b03      	ldr	r3, [sp, #12]
 800287a:	3b01      	subs	r3, #1
 800287c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002886:	d1f5      	bne.n	8002874 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8002888:	2000      	movs	r0, #0
 800288a:	e00e      	b.n	80028aa <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800288c:	9200      	str	r2, [sp, #0]
 800288e:	460b      	mov	r3, r1
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff ff6d 	bl	8002774 <SPI_WaitFlagStateUntilTimeout>
 800289a:	b130      	cbz	r0, 80028aa <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80028a4:	2003      	movs	r0, #3
 80028a6:	e000      	b.n	80028aa <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80028a8:	2000      	movs	r0, #0
}
 80028aa:	b004      	add	sp, #16
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	bf00      	nop
 80028b0:	20000020 	.word	0x20000020
 80028b4:	165e9f81 	.word	0x165e9f81

080028b8 <HAL_SPI_MspInit>:
}
 80028b8:	4770      	bx	lr

080028ba <HAL_SPI_Init>:
  if (hspi == NULL)
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d05a      	beq.n	8002974 <HAL_SPI_Init+0xba>
{
 80028be:	b510      	push	{r4, lr}
 80028c0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028c4:	b933      	cbnz	r3, 80028d4 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028c6:	6843      	ldr	r3, [r0, #4]
 80028c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028cc:	d005      	beq.n	80028da <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61c3      	str	r3, [r0, #28]
 80028d2:	e002      	b.n	80028da <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d8:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80028de:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d040      	beq.n	8002968 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80028e6:	2302      	movs	r3, #2
 80028e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	6813      	ldr	r3, [r2, #0]
 80028f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028f4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028f6:	6822      	ldr	r2, [r4, #0]
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80028fe:	68a1      	ldr	r1, [r4, #8]
 8002900:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8002904:	430b      	orrs	r3, r1
 8002906:	68e1      	ldr	r1, [r4, #12]
 8002908:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800290c:	430b      	orrs	r3, r1
 800290e:	6921      	ldr	r1, [r4, #16]
 8002910:	f001 0102 	and.w	r1, r1, #2
 8002914:	430b      	orrs	r3, r1
 8002916:	6961      	ldr	r1, [r4, #20]
 8002918:	f001 0101 	and.w	r1, r1, #1
 800291c:	430b      	orrs	r3, r1
 800291e:	69a1      	ldr	r1, [r4, #24]
 8002920:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002924:	430b      	orrs	r3, r1
 8002926:	69e1      	ldr	r1, [r4, #28]
 8002928:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800292c:	430b      	orrs	r3, r1
 800292e:	6a21      	ldr	r1, [r4, #32]
 8002930:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002934:	430b      	orrs	r3, r1
 8002936:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002938:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800293c:	430b      	orrs	r3, r1
 800293e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002940:	6821      	ldr	r1, [r4, #0]
 8002942:	8b63      	ldrh	r3, [r4, #26]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800294a:	f002 0210 	and.w	r2, r2, #16
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	69d3      	ldr	r3, [r2, #28]
 8002956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800295a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800295c:	2000      	movs	r0, #0
 800295e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002960:	2301      	movs	r3, #1
 8002962:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002966:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002968:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800296c:	4620      	mov	r0, r4
 800296e:	f7ff ffa3 	bl	80028b8 <HAL_SPI_MspInit>
 8002972:	e7b8      	b.n	80028e6 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
}
 8002976:	4770      	bx	lr

08002978 <HAL_SPI_TransmitReceive>:
{
 8002978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800297c:	b083      	sub	sp, #12
 800297e:	461f      	mov	r7, r3
 8002980:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002982:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002986:	2b01      	cmp	r3, #1
 8002988:	f000 810e 	beq.w	8002ba8 <HAL_SPI_TransmitReceive+0x230>
 800298c:	4604      	mov	r4, r0
 800298e:	4688      	mov	r8, r1
 8002990:	4691      	mov	r9, r2
 8002992:	2301      	movs	r3, #1
 8002994:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002998:	f7ff f984 	bl	8001ca4 <HAL_GetTick>
 800299c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800299e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80029a2:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029a4:	2801      	cmp	r0, #1
 80029a6:	d00b      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x48>
 80029a8:	6863      	ldr	r3, [r4, #4]
 80029aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ae:	f040 80e3 	bne.w	8002b78 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029b2:	68a3      	ldr	r3, [r4, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 80e9 	bne.w	8002b8c <HAL_SPI_TransmitReceive+0x214>
 80029ba:	2804      	cmp	r0, #4
 80029bc:	f040 80e8 	bne.w	8002b90 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029c0:	f1b8 0f00 	cmp.w	r8, #0
 80029c4:	f000 80e6 	beq.w	8002b94 <HAL_SPI_TransmitReceive+0x21c>
 80029c8:	f1b9 0f00 	cmp.w	r9, #0
 80029cc:	f000 80e4 	beq.w	8002b98 <HAL_SPI_TransmitReceive+0x220>
 80029d0:	2f00      	cmp	r7, #0
 80029d2:	f000 80e3 	beq.w	8002b9c <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029d6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029de:	bf1c      	itt	ne
 80029e0:	2305      	movne	r3, #5
 80029e2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029ea:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80029ee:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80029f0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029f2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80029f6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80029f8:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80029fa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029fc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a06:	d103      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a0e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a10:	68e3      	ldr	r3, [r4, #12]
 8002a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a16:	d012      	beq.n	8002a3e <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a18:	6863      	ldr	r3, [r4, #4]
 8002a1a:	b10b      	cbz	r3, 8002a20 <HAL_SPI_TransmitReceive+0xa8>
 8002a1c:	2f01      	cmp	r7, #1
 8002a1e:	d10a      	bne.n	8002a36 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002a2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002a36:	2701      	movs	r7, #1
        txallowed = 0U;
 8002a38:	f04f 0800 	mov.w	r8, #0
 8002a3c:	e067      	b.n	8002b0e <HAL_SPI_TransmitReceive+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a3e:	6863      	ldr	r3, [r4, #4]
 8002a40:	b10b      	cbz	r3, 8002a46 <HAL_SPI_TransmitReceive+0xce>
 8002a42:	2f01      	cmp	r7, #1
 8002a44:	d10a      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a50:	3302      	adds	r3, #2
 8002a52:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002a54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002a5c:	2701      	movs	r7, #1
        txallowed = 0U;
 8002a5e:	f04f 0800 	mov.w	r8, #0
 8002a62:	e01b      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x124>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	6893      	ldr	r3, [r2, #8]
 8002a68:	f013 0301 	ands.w	r3, r3, #1
 8002a6c:	d00d      	beq.n	8002a8a <HAL_SPI_TransmitReceive+0x112>
 8002a6e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002a70:	b289      	uxth	r1, r1
 8002a72:	b151      	cbz	r1, 8002a8a <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a74:	68d1      	ldr	r1, [r2, #12]
 8002a76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a78:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a7c:	3202      	adds	r2, #2
 8002a7e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002a80:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a82:	3a01      	subs	r2, #1
 8002a84:	b292      	uxth	r2, r2
 8002a86:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002a88:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a8a:	f7ff f90b 	bl	8001ca4 <HAL_GetTick>
 8002a8e:	1b80      	subs	r0, r0, r6
 8002a90:	42a8      	cmp	r0, r5
 8002a92:	d303      	bcc.n	8002a9c <HAL_SPI_TransmitReceive+0x124>
 8002a94:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a98:	f040 8082 	bne.w	8002ba0 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	b91b      	cbnz	r3, 8002aaa <HAL_SPI_TransmitReceive+0x132>
 8002aa2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d052      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	f012 0f02 	tst.w	r2, #2
 8002ab2:	d0d7      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0xec>
 8002ab4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d0d3      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0xec>
 8002abc:	2f00      	cmp	r7, #0
 8002abe:	d0d1      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ac8:	3302      	adds	r3, #2
 8002aca:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002acc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002ad4:	4647      	mov	r7, r8
 8002ad6:	e7c5      	b.n	8002a64 <HAL_SPI_TransmitReceive+0xec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	6893      	ldr	r3, [r2, #8]
 8002adc:	f013 0301 	ands.w	r3, r3, #1
 8002ae0:	d00d      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x186>
 8002ae2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002ae4:	b289      	uxth	r1, r1
 8002ae6:	b151      	cbz	r1, 8002afe <HAL_SPI_TransmitReceive+0x186>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ae8:	68d1      	ldr	r1, [r2, #12]
 8002aea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aec:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 8002aee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002af0:	3201      	adds	r2, #1
 8002af2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002af4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002af6:	3a01      	subs	r2, #1
 8002af8:	b292      	uxth	r2, r2
 8002afa:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002afc:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002afe:	f7ff f8d1 	bl	8001ca4 <HAL_GetTick>
 8002b02:	1b83      	subs	r3, r0, r6
 8002b04:	42ab      	cmp	r3, r5
 8002b06:	d31f      	bcc.n	8002b48 <HAL_SPI_TransmitReceive+0x1d0>
 8002b08:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b0c:	d14a      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x22c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b913      	cbnz	r3, 8002b1a <HAL_SPI_TransmitReceive+0x1a2>
 8002b14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	b1d3      	cbz	r3, 8002b50 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	f012 0f02 	tst.w	r2, #2
 8002b22:	d0d9      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x160>
 8002b24:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002b26:	b292      	uxth	r2, r2
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d0d5      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x160>
 8002b2c:	2f01      	cmp	r7, #1
 8002b2e:	d1d3      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b32:	7812      	ldrb	r2, [r2, #0]
 8002b34:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b38:	3301      	adds	r3, #1
 8002b3a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002b44:	4647      	mov	r7, r8
 8002b46:	e7c7      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x160>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	d1e0      	bne.n	8002b0e <HAL_SPI_TransmitReceive+0x196>
        errorcode = HAL_TIMEOUT;
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	e014      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b50:	4632      	mov	r2, r6
 8002b52:	4629      	mov	r1, r5
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff fe7b 	bl	8002850 <SPI_EndRxTxTransaction>
 8002b5a:	b948      	cbnz	r0, 8002b70 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b5c:	68a3      	ldr	r3, [r4, #8]
 8002b5e:	b963      	cbnz	r3, 8002b7a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	9201      	str	r2, [sp, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	9b01      	ldr	r3, [sp, #4]
 8002b6e:	e004      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b70:	2320      	movs	r3, #32
 8002b72:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b74:	2001      	movs	r0, #1
    goto error;
 8002b76:	e000      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8002b78:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b80:	2300      	movs	r3, #0
 8002b82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b86:	b003      	add	sp, #12
 8002b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	e7f4      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
 8002b90:	2002      	movs	r0, #2
 8002b92:	e7f2      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8002b94:	2001      	movs	r0, #1
 8002b96:	e7f0      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
 8002b98:	2001      	movs	r0, #1
 8002b9a:	e7ee      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e7ec      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	e7ea      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	e7e8      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8002ba8:	2002      	movs	r0, #2
 8002baa:	e7ec      	b.n	8002b86 <HAL_SPI_TransmitReceive+0x20e>

08002bac <HAL_SPI_GetState>:
  return hspi->State;
 8002bac:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d12f      	bne.n	8002c1e <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc4:	6802      	ldr	r2, [r0, #0]
 8002bc6:	68d3      	ldr	r3, [r2, #12]
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bce:	6803      	ldr	r3, [r0, #0]
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_TIM_Base_Start_IT+0x74>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d015      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bdc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d011      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00d      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bf4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d005      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c04:	2000      	movs	r0, #0
 8002c06:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	2a06      	cmp	r2, #6
 8002c10:	d007      	beq.n	8002c22 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	4770      	bx	lr
    return HAL_ERROR;
 8002c1e:	2001      	movs	r0, #1
 8002c20:	4770      	bx	lr
  return HAL_OK;
 8002c22:	2000      	movs	r0, #0
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000

08002c2c <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_IRQHandler>:
{
 8002c36:	b510      	push	{r4, lr}
 8002c38:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	f012 0f02 	tst.w	r2, #2
 8002c42:	d011      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	f012 0f02 	tst.w	r2, #2
 8002c4a:	d00d      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c4c:	f06f 0202 	mvn.w	r2, #2
 8002c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c56:	6803      	ldr	r3, [r0, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f013 0f03 	tst.w	r3, #3
 8002c5e:	d070      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c60:	f7ff ffe6 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c64:	2300      	movs	r3, #0
 8002c66:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	f012 0f04 	tst.w	r2, #4
 8002c70:	d012      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	f012 0f04 	tst.w	r2, #4
 8002c78:	d00e      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c7a:	f06f 0204 	mvn.w	r2, #4
 8002c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c80:	2302      	movs	r3, #2
 8002c82:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c8c:	d05f      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f7ff ffce 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	2300      	movs	r3, #0
 8002c96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	f012 0f08 	tst.w	r2, #8
 8002ca0:	d012      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	f012 0f08 	tst.w	r2, #8
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002caa:	f06f 0208 	mvn.w	r2, #8
 8002cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f013 0f03 	tst.w	r3, #3
 8002cbc:	d04e      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff ffb6 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	f012 0f10 	tst.w	r2, #16
 8002cd0:	d012      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	f012 0f10 	tst.w	r2, #16
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cda:	f06f 0210 	mvn.w	r2, #16
 8002cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002cec:	d03d      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff ff9e 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	f012 0f01 	tst.w	r2, #1
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	f012 0f01 	tst.w	r2, #1
 8002d08:	d136      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d12:	d003      	beq.n	8002d1c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d1a:	d134      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d2c:	d132      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	f012 0f20 	tst.w	r2, #32
 8002d36:	d003      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	f012 0f20 	tst.w	r2, #32
 8002d3e:	d130      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x16c>
}
 8002d40:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	f7ff ff74 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff ff73 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d4c:	e78a      	b.n	8002c64 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff ff6d 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff ff6c 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d5a:	e79b      	b.n	8002c94 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ff66 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff ff65 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d68:	e7ac      	b.n	8002cc4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff ff5f 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff ff5e 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d76:	e7bd      	b.n	8002cf4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d78:	f06f 0201 	mvn.w	r2, #1
 8002d7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff ff54 	bl	8002c2c <HAL_TIM_PeriodElapsedCallback>
 8002d84:	e7c1      	b.n	8002d0a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d8a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f000 f99e 	bl	80030ce <HAL_TIMEx_BreakCallback>
 8002d92:	e7c3      	b.n	8002d1c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d98:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7ff ff4a 	bl	8002c34 <HAL_TIM_TriggerCallback>
 8002da0:	e7c5      	b.n	8002d2e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da2:	f06f 0220 	mvn.w	r2, #32
 8002da6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 f98f 	bl	80030cc <HAL_TIMEx_CommutCallback>
}
 8002dae:	e7c7      	b.n	8002d40 <HAL_TIM_IRQHandler+0x10a>

08002db0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db2:	4a30      	ldr	r2, [pc, #192]	; (8002e74 <TIM_Base_SetConfig+0xc4>)
 8002db4:	4290      	cmp	r0, r2
 8002db6:	d042      	beq.n	8002e3e <TIM_Base_SetConfig+0x8e>
 8002db8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002dbc:	d021      	beq.n	8002e02 <TIM_Base_SetConfig+0x52>
 8002dbe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002dc2:	4290      	cmp	r0, r2
 8002dc4:	d031      	beq.n	8002e2a <TIM_Base_SetConfig+0x7a>
 8002dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d04c      	beq.n	8002e68 <TIM_Base_SetConfig+0xb8>
 8002dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dd2:	4290      	cmp	r0, r2
 8002dd4:	d02e      	beq.n	8002e34 <TIM_Base_SetConfig+0x84>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d015      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002dde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002de2:	4290      	cmp	r0, r2
 8002de4:	d011      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dea:	4290      	cmp	r0, r2
 8002dec:	d00d      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df2:	694a      	ldr	r2, [r1, #20]
 8002df4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002df6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df8:	688b      	ldr	r3, [r1, #8]
 8002dfa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfc:	680b      	ldr	r3, [r1, #0]
 8002dfe:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	e010      	b.n	8002e24 <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e06:	684a      	ldr	r2, [r1, #4]
 8002e08:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0e:	68ca      	ldr	r2, [r1, #12]
 8002e10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e16:	694a      	ldr	r2, [r1, #20]
 8002e18:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e1a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1c:	688b      	ldr	r3, [r1, #8]
 8002e1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e20:	680b      	ldr	r3, [r1, #0]
 8002e22:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	2301      	movs	r3, #1
 8002e26:	6143      	str	r3, [r0, #20]
}
 8002e28:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e2e:	684a      	ldr	r2, [r1, #4]
 8002e30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e32:	e7ea      	b.n	8002e0a <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e38:	684a      	ldr	r2, [r1, #4]
 8002e3a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e3c:	e7e5      	b.n	8002e0a <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e42:	684a      	ldr	r2, [r1, #4]
 8002e44:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4a:	68ca      	ldr	r2, [r1, #12]
 8002e4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e52:	694a      	ldr	r2, [r1, #20]
 8002e54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e58:	688b      	ldr	r3, [r1, #8]
 8002e5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	680b      	ldr	r3, [r1, #0]
 8002e5e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	690a      	ldr	r2, [r1, #16]
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <TIM_Base_SetConfig+0xc4>)
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	e7dd      	b.n	8002e24 <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	684a      	ldr	r2, [r1, #4]
 8002e6e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e70:	e7cb      	b.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002e72:	bf00      	nop
 8002e74:	40010000 	.word	0x40010000

08002e78 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002e78:	b340      	cbz	r0, 8002ecc <HAL_TIM_Base_Init+0x54>
{
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e82:	b1f3      	cbz	r3, 8002ec2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	2302      	movs	r3, #2
 8002e86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e90:	f7ff ff8e 	bl	8002db0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002ea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002ebe:	2000      	movs	r0, #0
}
 8002ec0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ec6:	f7fe faff 	bl	80014c8 <HAL_TIM_Base_MspInit>
 8002eca:	e7db      	b.n	8002e84 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002ecc:	2001      	movs	r0, #1
}
 8002ece:	4770      	bx	lr

08002ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002ede:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	6082      	str	r2, [r0, #8]
}
 8002ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002eea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	f000 80ae 	beq.w	8003050 <HAL_TIM_ConfigClockSource+0x166>
{
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f10:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f12:	680b      	ldr	r3, [r1, #0]
 8002f14:	2b60      	cmp	r3, #96	; 0x60
 8002f16:	d060      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xf0>
 8002f18:	d83d      	bhi.n	8002f96 <HAL_TIM_ConfigClockSource+0xac>
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d079      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x128>
 8002f1e:	d91c      	bls.n	8002f5a <HAL_TIM_ConfigClockSource+0x70>
 8002f20:	2b50      	cmp	r3, #80	; 0x50
 8002f22:	d136      	bne.n	8002f92 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	6848      	ldr	r0, [r1, #4]
 8002f28:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f2a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f34:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f3a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002f42:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f46:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f48:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002f4a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f50:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002f54:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2000      	movs	r0, #0
}
 8002f58:	e012      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d002      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x7a>
 8002f5e:	d90b      	bls.n	8002f78 <HAL_TIM_ConfigClockSource+0x8e>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d114      	bne.n	8002f8e <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f64:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002f66:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002f72:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2000      	movs	r0, #0
}
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002f78:	f033 0210 	bics.w	r2, r3, #16
 8002f7c:	d0f2      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x7a>
 8002f7e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f86:	2300      	movs	r3, #0
 8002f88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002f8c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f8e:	2001      	movs	r0, #1
 8002f90:	e7f6      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
 8002f92:	2001      	movs	r0, #1
 8002f94:	e7f4      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9a:	d055      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0x15e>
 8002f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	68cb      	ldr	r3, [r1, #12]
 8002fa4:	684a      	ldr	r2, [r1, #4]
 8002fa6:	6889      	ldr	r1, [r1, #8]
 8002fa8:	6800      	ldr	r0, [r0, #0]
 8002faa:	f7ff ff91 	bl	8002ed0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	6893      	ldr	r3, [r2, #8]
 8002fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2000      	movs	r0, #0
      break;
 8002fba:	e7e1      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d145      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	68cb      	ldr	r3, [r1, #12]
 8002fc2:	684a      	ldr	r2, [r1, #4]
 8002fc4:	6889      	ldr	r1, [r1, #8]
 8002fc6:	6800      	ldr	r0, [r0, #0]
 8002fc8:	f7ff ff82 	bl	8002ed0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fcc:	6822      	ldr	r2, [r4, #0]
 8002fce:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002fd4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2000      	movs	r0, #0
      break;
 8002fd8:	e7d2      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	684d      	ldr	r5, [r1, #4]
 8002fde:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	6a18      	ldr	r0, [r3, #32]
 8002fe2:	f020 0010 	bic.w	r0, r0, #16
 8002fe6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002fea:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fec:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ff8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002ffc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ffe:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003000:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003002:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003008:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800300c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2000      	movs	r0, #0
}
 8003010:	e7b6      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	6848      	ldr	r0, [r1, #4]
 8003016:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003018:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003024:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003028:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003030:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003036:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003038:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003042:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2000      	movs	r0, #0
}
 8003046:	e79b      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2000      	movs	r0, #0
 800304a:	e799      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800304c:	2001      	movs	r0, #1
 800304e:	e797      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003050:	2002      	movs	r0, #2
}
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d033      	beq.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 800305c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800305e:	2301      	movs	r3, #1
 8003060:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800306a:	6804      	ldr	r4, [r0, #0]
 800306c:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800306e:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003074:	680d      	ldr	r5, [r1, #0]
 8003076:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003078:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307a:	6803      	ldr	r3, [r0, #0]
 800307c:	4c12      	ldr	r4, [pc, #72]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800307e:	42a3      	cmp	r3, r4
 8003080:	d012      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d00f      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003088:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800308c:	42a3      	cmp	r3, r4
 800308e:	d00b      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003090:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003094:	42a3      	cmp	r3, r4
 8003096:	d007      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003098:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800309c:	42a3      	cmp	r3, r4
 800309e:	d003      	beq.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030a0:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d104      	bne.n	80030b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ac:	6849      	ldr	r1, [r1, #4]
 80030ae:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b8:	2300      	movs	r3, #0
 80030ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80030be:	4618      	mov	r0, r3
}
 80030c0:	bc30      	pop	{r4, r5}
 80030c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80030c4:	2002      	movs	r0, #2
}
 80030c6:	4770      	bx	lr
 80030c8:	40010000 	.word	0x40010000

080030cc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030cc:	4770      	bx	lr

080030ce <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ce:	4770      	bx	lr

080030d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	6802      	ldr	r2, [r0, #0]
 80030d6:	6913      	ldr	r3, [r2, #16]
 80030d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030dc:	68c1      	ldr	r1, [r0, #12]
 80030de:	430b      	orrs	r3, r1
 80030e0:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80030e2:	6801      	ldr	r1, [r0, #0]
 80030e4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030e6:	6883      	ldr	r3, [r0, #8]
 80030e8:	6900      	ldr	r0, [r0, #16]
 80030ea:	4303      	orrs	r3, r0
 80030ec:	6960      	ldr	r0, [r4, #20]
 80030ee:	4303      	orrs	r3, r0
 80030f0:	69e0      	ldr	r0, [r4, #28]
 80030f2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80030f4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80030f8:	f022 020c 	bic.w	r2, r2, #12
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	6953      	ldr	r3, [r2, #20]
 8003104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003108:	69a1      	ldr	r1, [r4, #24]
 800310a:	430b      	orrs	r3, r1
 800310c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	4a2e      	ldr	r2, [pc, #184]	; (80031cc <UART_SetConfig+0xfc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d006      	beq.n	8003124 <UART_SetConfig+0x54>
 8003116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800311a:	4293      	cmp	r3, r2
 800311c:	d002      	beq.n	8003124 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800311e:	f7ff fb09 	bl	8002734 <HAL_RCC_GetPCLK1Freq>
 8003122:	e001      	b.n	8003128 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003124:	f7ff fb16 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003128:	69e3      	ldr	r3, [r4, #28]
 800312a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312e:	d024      	beq.n	800317a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003130:	2100      	movs	r1, #0
 8003132:	1803      	adds	r3, r0, r0
 8003134:	4149      	adcs	r1, r1
 8003136:	181b      	adds	r3, r3, r0
 8003138:	f141 0100 	adc.w	r1, r1, #0
 800313c:	00c9      	lsls	r1, r1, #3
 800313e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1818      	adds	r0, r3, r0
 8003146:	6863      	ldr	r3, [r4, #4]
 8003148:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800314c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003150:	f141 0100 	adc.w	r1, r1, #0
 8003154:	f7fd f89c 	bl	8000290 <__aeabi_uldivmod>
 8003158:	6821      	ldr	r1, [r4, #0]
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <UART_SetConfig+0x100>)
 800315c:	fba2 4300 	umull	r4, r3, r2, r0
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	2464      	movs	r4, #100	; 0x64
 8003164:	fb04 0013 	mls	r0, r4, r3, r0
 8003168:	0100      	lsls	r0, r0, #4
 800316a:	3032      	adds	r0, #50	; 0x32
 800316c:	fba2 2000 	umull	r2, r0, r2, r0
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8003176:	6088      	str	r0, [r1, #8]
  }
}
 8003178:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800317a:	2300      	movs	r3, #0
 800317c:	1802      	adds	r2, r0, r0
 800317e:	eb43 0103 	adc.w	r1, r3, r3
 8003182:	1812      	adds	r2, r2, r0
 8003184:	f141 0100 	adc.w	r1, r1, #0
 8003188:	00c9      	lsls	r1, r1, #3
 800318a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	1810      	adds	r0, r2, r0
 8003192:	f141 0100 	adc.w	r1, r1, #0
 8003196:	6862      	ldr	r2, [r4, #4]
 8003198:	1892      	adds	r2, r2, r2
 800319a:	415b      	adcs	r3, r3
 800319c:	f7fd f878 	bl	8000290 <__aeabi_uldivmod>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	; (80031d0 <UART_SetConfig+0x100>)
 80031a2:	fba5 3200 	umull	r3, r2, r5, r0
 80031a6:	0951      	lsrs	r1, r2, #5
 80031a8:	2364      	movs	r3, #100	; 0x64
 80031aa:	fb03 0311 	mls	r3, r3, r1, r0
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	3332      	adds	r3, #50	; 0x32
 80031b2:	fba5 2303 	umull	r2, r3, r5, r3
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80031bc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031c6:	4413      	add	r3, r2
 80031c8:	6083      	str	r3, [r0, #8]
 80031ca:	e7d5      	b.n	8003178 <UART_SetConfig+0xa8>
 80031cc:	40011000 	.word	0x40011000
 80031d0:	51eb851f 	.word	0x51eb851f

080031d4 <UART_WaitOnFlagUntilTimeout>:
{
 80031d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d8:	4680      	mov	r8, r0
 80031da:	460e      	mov	r6, r1
 80031dc:	4615      	mov	r5, r2
 80031de:	4699      	mov	r9, r3
 80031e0:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	f8d8 2000 	ldr.w	r2, [r8]
 80031e6:	6814      	ldr	r4, [r2, #0]
 80031e8:	ea36 0304 	bics.w	r3, r6, r4
 80031ec:	bf0c      	ite	eq
 80031ee:	f04f 0c01 	moveq.w	ip, #1
 80031f2:	f04f 0c00 	movne.w	ip, #0
 80031f6:	45ac      	cmp	ip, r5
 80031f8:	d12d      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80031fe:	d0f2      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003200:	b12f      	cbz	r7, 800320e <UART_WaitOnFlagUntilTimeout+0x3a>
 8003202:	f7fe fd4f 	bl	8001ca4 <HAL_GetTick>
 8003206:	eba0 0009 	sub.w	r0, r0, r9
 800320a:	42b8      	cmp	r0, r7
 800320c:	d9e9      	bls.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800320e:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	f102 030c 	add.w	r3, r2, #12
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	320c      	adds	r2, #12
 8003220:	e842 3100 	strex	r1, r3, [r2]
 8003224:	2900      	cmp	r1, #0
 8003226:	d1f2      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	f102 0314 	add.w	r3, r2, #20
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	3214      	adds	r2, #20
 800323a:	e842 3100 	strex	r1, r3, [r2]
 800323e:	2900      	cmp	r1, #0
 8003240:	d1f2      	bne.n	8003228 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 8003242:	2320      	movs	r3, #32
 8003244:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003248:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800324c:	2300      	movs	r3, #0
 800324e:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003252:	2003      	movs	r0, #3
 8003254:	e000      	b.n	8003258 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8003256:	2000      	movs	r0, #0
}
 8003258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800325c <HAL_UART_Init>:
  if (huart == NULL)
 800325c:	b358      	cbz	r0, 80032b6 <HAL_UART_Init+0x5a>
{
 800325e:	b510      	push	{r4, lr}
 8003260:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003266:	b30b      	cbz	r3, 80032ac <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003268:	2324      	movs	r3, #36	; 0x24
 800326a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	68d3      	ldr	r3, [r2, #12]
 8003272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003276:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff ff29 	bl	80030d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	6913      	ldr	r3, [r2, #16]
 8003282:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003286:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	6953      	ldr	r3, [r2, #20]
 800328c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003290:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003292:	6822      	ldr	r2, [r4, #0]
 8003294:	68d3      	ldr	r3, [r2, #12]
 8003296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800329a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	2000      	movs	r0, #0
 800329e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	2320      	movs	r3, #32
 80032a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80032aa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80032ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80032b0:	f7fe f92a 	bl	8001508 <HAL_UART_MspInit>
 80032b4:	e7d8      	b.n	8003268 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80032b6:	2001      	movs	r0, #1
}
 80032b8:	4770      	bx	lr

080032ba <HAL_UART_Transmit>:
{
 80032ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80032c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d15a      	bne.n	8003382 <HAL_UART_Transmit+0xc8>
 80032cc:	4604      	mov	r4, r0
 80032ce:	460d      	mov	r5, r1
 80032d0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80032d2:	2900      	cmp	r1, #0
 80032d4:	d059      	beq.n	800338a <HAL_UART_Transmit+0xd0>
 80032d6:	2a00      	cmp	r2, #0
 80032d8:	d059      	beq.n	800338e <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 80032da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d057      	beq.n	8003392 <HAL_UART_Transmit+0xd8>
 80032e2:	2301      	movs	r3, #1
 80032e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ec:	2321      	movs	r3, #33	; 0x21
 80032ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80032f2:	f7fe fcd7 	bl	8001ca4 <HAL_GetTick>
 80032f6:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80032f8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80032fc:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003300:	68a3      	ldr	r3, [r4, #8]
 8003302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003306:	d00c      	beq.n	8003322 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8003308:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 800330c:	2300      	movs	r3, #0
 800330e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003312:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003314:	b29b      	uxth	r3, r3
 8003316:	b343      	cbz	r3, 800336a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003318:	f04f 0900 	mov.w	r9, #0
 800331c:	f04f 0880 	mov.w	r8, #128	; 0x80
 8003320:	e014      	b.n	800334c <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	b913      	cbnz	r3, 800332c <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8003326:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8003328:	2500      	movs	r5, #0
 800332a:	e7ef      	b.n	800330c <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 800332c:	f04f 0a00 	mov.w	sl, #0
 8003330:	e7ec      	b.n	800330c <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8003338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800333e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003340:	3a01      	subs	r2, #1
 8003342:	b292      	uxth	r2, r2
 8003344:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003346:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003348:	b29b      	uxth	r3, r3
 800334a:	b173      	cbz	r3, 800336a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800334c:	9600      	str	r6, [sp, #0]
 800334e:	463b      	mov	r3, r7
 8003350:	464a      	mov	r2, r9
 8003352:	4641      	mov	r1, r8
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ff3d 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 800335a:	b9e0      	cbnz	r0, 8003396 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 800335c:	2d00      	cmp	r5, #0
 800335e:	d0e8      	beq.n	8003332 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003368:	e7e9      	b.n	800333e <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336a:	9600      	str	r6, [sp, #0]
 800336c:	463b      	mov	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	2140      	movs	r1, #64	; 0x40
 8003372:	4620      	mov	r0, r4
 8003374:	f7ff ff2e 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 8003378:	b978      	cbnz	r0, 800339a <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 800337a:	2320      	movs	r3, #32
 800337c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003380:	e000      	b.n	8003384 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8003382:	2002      	movs	r0, #2
}
 8003384:	b002      	add	sp, #8
 8003386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800338a:	2001      	movs	r0, #1
 800338c:	e7fa      	b.n	8003384 <HAL_UART_Transmit+0xca>
 800338e:	2001      	movs	r0, #1
 8003390:	e7f8      	b.n	8003384 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8003392:	2002      	movs	r0, #2
 8003394:	e7f6      	b.n	8003384 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8003396:	2003      	movs	r0, #3
 8003398:	e7f4      	b.n	8003384 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 800339a:	2003      	movs	r0, #3
 800339c:	e7f2      	b.n	8003384 <HAL_UART_Transmit+0xca>

0800339e <HAL_UART_Receive>:
{
 800339e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80033a6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d163      	bne.n	8003478 <HAL_UART_Receive+0xda>
 80033b0:	4604      	mov	r4, r0
 80033b2:	460d      	mov	r5, r1
 80033b4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80033b6:	2900      	cmp	r1, #0
 80033b8:	d062      	beq.n	8003480 <HAL_UART_Receive+0xe2>
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	d062      	beq.n	8003484 <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 80033be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d060      	beq.n	8003488 <HAL_UART_Receive+0xea>
 80033c6:	2301      	movs	r3, #1
 80033c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033d0:	2222      	movs	r2, #34	; 0x22
 80033d2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80033d8:	f7fe fc64 	bl	8001ca4 <HAL_GetTick>
 80033dc:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80033de:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033e2:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e6:	68a3      	ldr	r3, [r4, #8]
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ec:	d00d      	beq.n	800340a <HAL_UART_Receive+0x6c>
      pdata16bits = NULL;
 80033ee:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80033f2:	2300      	movs	r3, #0
 80033f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80033f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d036      	beq.n	800346e <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003400:	f04f 0900 	mov.w	r9, #0
 8003404:	f04f 0820 	mov.w	r8, #32
 8003408:	e01a      	b.n	8003440 <HAL_UART_Receive+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	b913      	cbnz	r3, 8003414 <HAL_UART_Receive+0x76>
      pdata16bits = (uint16_t *) pData;
 800340e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8003410:	2500      	movs	r5, #0
 8003412:	e7ee      	b.n	80033f2 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8003414:	f04f 0a00 	mov.w	sl, #0
 8003418:	e7eb      	b.n	80033f2 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	f82a 3b02 	strh.w	r3, [sl], #2
        pdata16bits++;
 8003426:	e004      	b.n	8003432 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8003432:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003434:	3a01      	subs	r2, #1
 8003436:	b292      	uxth	r2, r2
 8003438:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800343a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	b1b3      	cbz	r3, 800346e <HAL_UART_Receive+0xd0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003440:	9600      	str	r6, [sp, #0]
 8003442:	463b      	mov	r3, r7
 8003444:	464a      	mov	r2, r9
 8003446:	4641      	mov	r1, r8
 8003448:	4620      	mov	r0, r4
 800344a:	f7ff fec3 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 800344e:	b9e8      	cbnz	r0, 800348c <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 8003450:	2d00      	cmp	r5, #0
 8003452:	d0e2      	beq.n	800341a <HAL_UART_Receive+0x7c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003454:	68a3      	ldr	r3, [r4, #8]
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d0e5      	beq.n	8003428 <HAL_UART_Receive+0x8a>
 800345c:	b913      	cbnz	r3, 8003464 <HAL_UART_Receive+0xc6>
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0e1      	beq.n	8003428 <HAL_UART_Receive+0x8a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346c:	e7df      	b.n	800342e <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 800346e:	2320      	movs	r3, #32
 8003470:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003474:	2000      	movs	r0, #0
 8003476:	e000      	b.n	800347a <HAL_UART_Receive+0xdc>
    return HAL_BUSY;
 8003478:	2002      	movs	r0, #2
}
 800347a:	b002      	add	sp, #8
 800347c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8003480:	2001      	movs	r0, #1
 8003482:	e7fa      	b.n	800347a <HAL_UART_Receive+0xdc>
 8003484:	2001      	movs	r0, #1
 8003486:	e7f8      	b.n	800347a <HAL_UART_Receive+0xdc>
    __HAL_LOCK(huart);
 8003488:	2002      	movs	r0, #2
 800348a:	e7f6      	b.n	800347a <HAL_UART_Receive+0xdc>
        return HAL_TIMEOUT;
 800348c:	2003      	movs	r0, #3
 800348e:	e7f4      	b.n	800347a <HAL_UART_Receive+0xdc>

08003490 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003490:	b510      	push	{r4, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8003496:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 800349a:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 800349e:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80034a2:	2100      	movs	r1, #0
 80034a4:	9101      	str	r1, [sp, #4]
 80034a6:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80034aa:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 80034ac:	233f      	movs	r3, #63	; 0x3f
 80034ae:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 80034b2:	238a      	movs	r3, #138	; 0x8a
 80034b4:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80034b8:	ab03      	add	r3, sp, #12
 80034ba:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80034bc:	2303      	movs	r3, #3
 80034be:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 80034c0:	ab01      	add	r3, sp, #4
 80034c2:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80034c4:	2307      	movs	r3, #7
 80034c6:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 80034c8:	a804      	add	r0, sp, #16
 80034ca:	f000 fbfb 	bl	8003cc4 <hci_send_req>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	db15      	blt.n	80034fe <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80034d2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80034d6:	b980      	cbnz	r0, 80034fa <aci_gap_init_IDB05A1+0x6a>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80034d8:	9b01      	ldr	r3, [sp, #4]
 80034da:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80034de:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80034e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80034e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034ee:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80034f0:	9b02      	ldr	r3, [sp, #8]
 80034f2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80034f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80034f8:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 80034fa:	b00a      	add	sp, #40	; 0x28
 80034fc:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 80034fe:	20ff      	movs	r0, #255	; 0xff
 8003500:	e7fb      	b.n	80034fa <aci_gap_init_IDB05A1+0x6a>

08003502 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003502:	b570      	push	{r4, r5, r6, lr}
 8003504:	b08a      	sub	sp, #40	; 0x28
 8003506:	460e      	mov	r6, r1
 8003508:	4615      	mov	r5, r2
 800350a:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800350c:	f88d 000c 	strb.w	r0, [sp, #12]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003510:	2100      	movs	r1, #0
 8003512:	9101      	str	r1, [sp, #4]
 8003514:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003518:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 800351a:	233f      	movs	r3, #63	; 0x3f
 800351c:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003520:	238a      	movs	r3, #138	; 0x8a
 8003522:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003526:	ab03      	add	r3, sp, #12
 8003528:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800352a:	2301      	movs	r3, #1
 800352c:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 800352e:	ab01      	add	r3, sp, #4
 8003530:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003532:	2307      	movs	r3, #7
 8003534:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003536:	a804      	add	r0, sp, #16
 8003538:	f000 fbc4 	bl	8003cc4 <hci_send_req>
 800353c:	2800      	cmp	r0, #0
 800353e:	db13      	blt.n	8003568 <aci_gap_init_IDB04A1+0x66>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003540:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003544:	b970      	cbnz	r0, 8003564 <aci_gap_init_IDB04A1+0x62>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003546:	9b01      	ldr	r3, [sp, #4]
 8003548:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800354c:	8033      	strh	r3, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800354e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003552:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003556:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800355a:	802b      	strh	r3, [r5, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800355c:	9b02      	ldr	r3, [sp, #8]
 800355e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003562:	8023      	strh	r3, [r4, #0]
  
  return 0;
}
 8003564:	b00a      	add	sp, #40	; 0x28
 8003566:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8003568:	20ff      	movs	r0, #255	; 0xff
 800356a:	e7fb      	b.n	8003564 <aci_gap_init_IDB04A1+0x62>

0800356c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	b092      	sub	sp, #72	; 0x48
 8003570:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8003574:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003578:	eb05 0c04 	add.w	ip, r5, r4
 800357c:	f10c 0c0e 	add.w	ip, ip, #14
 8003580:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8003584:	d84c      	bhi.n	8003620 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8003586:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800358a:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800358e:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8003592:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8003596:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800359a:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800359e:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80035a2:	ae01      	add	r6, sp, #4
 80035a4:	462a      	mov	r2, r5
 80035a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80035a8:	a803      	add	r0, sp, #12
 80035aa:	f000 ff16 	bl	80043da <memcpy>
  indx +=  LocalNameLen;
 80035ae:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 80035b2:	aa12      	add	r2, sp, #72	; 0x48
 80035b4:	fa52 f383 	uxtab	r3, r2, r3
 80035b8:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 80035bc:	3509      	adds	r5, #9
 80035be:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80035c0:	4622      	mov	r2, r4
 80035c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80035c4:	1970      	adds	r0, r6, r5
 80035c6:	f000 ff08 	bl	80043da <memcpy>
  indx +=  ServiceUUIDLen;  
 80035ca:	442c      	add	r4, r5
 80035cc:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80035ce:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80035d2:	446b      	add	r3, sp
 80035d4:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80035d8:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 80035dc:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80035de:	aa12      	add	r2, sp, #72	; 0x48
 80035e0:	fa52 f383 	uxtab	r3, r2, r3
 80035e4:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 80035e8:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035ec:	2100      	movs	r1, #0
 80035ee:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 80035f0:	233f      	movs	r3, #63	; 0x3f
 80035f2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80035f6:	2383      	movs	r3, #131	; 0x83
 80035f8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 80035fc:	960e      	str	r6, [sp, #56]	; 0x38
  indx +=  2;    
 80035fe:	3404      	adds	r4, #4
  rq.clen = indx;
 8003600:	b2e4      	uxtb	r4, r4
 8003602:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 8003604:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8003608:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 800360a:	2301      	movs	r3, #1
 800360c:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800360e:	a80c      	add	r0, sp, #48	; 0x30
 8003610:	f000 fb58 	bl	8003cc4 <hci_send_req>
 8003614:	2800      	cmp	r0, #0
 8003616:	db05      	blt.n	8003624 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003618:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 800361c:	b012      	add	sp, #72	; 0x48
 800361e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003620:	2042      	movs	r0, #66	; 0x42
 8003622:	e7fb      	b.n	800361c <aci_gap_set_discoverable+0xb0>
    return BLE_STATUS_TIMEOUT;
 8003624:	20ff      	movs	r0, #255	; 0xff
 8003626:	e7f9      	b.n	800361c <aci_gap_set_discoverable+0xb0>

08003628 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003628:	b500      	push	{lr}
 800362a:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800362c:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 8003630:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8003634:	b161      	cbz	r1, 8003650 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8003636:	f8d2 c000 	ldr.w	ip, [r2]
 800363a:	6850      	ldr	r0, [r2, #4]
 800363c:	6891      	ldr	r1, [r2, #8]
 800363e:	68d2      	ldr	r2, [r2, #12]
 8003640:	f8cd c006 	str.w	ip, [sp, #6]
 8003644:	f8cd 000a 	str.w	r0, [sp, #10]
 8003648:	f8cd 100e 	str.w	r1, [sp, #14]
 800364c:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8003650:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 8003654:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003658:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 800365c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003660:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 8003664:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003666:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 800366a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800366e:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003672:	2100      	movs	r1, #0
 8003674:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8003676:	233f      	movs	r3, #63	; 0x3f
 8003678:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800367c:	2386      	movs	r3, #134	; 0x86
 800367e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 8003682:	ab01      	add	r3, sp, #4
 8003684:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 8003686:	231a      	movs	r3, #26
 8003688:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 800368a:	f10d 0303 	add.w	r3, sp, #3
 800368e:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 8003690:	2301      	movs	r3, #1
 8003692:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8003694:	a808      	add	r0, sp, #32
 8003696:	f000 fb15 	bl	8003cc4 <hci_send_req>
 800369a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800369c:	bfac      	ite	ge
 800369e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80036a2:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 80036a4:	b00f      	add	sp, #60	; 0x3c
 80036a6:	f85d fb04 	ldr.w	pc, [sp], #4

080036aa <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80036aa:	b500      	push	{lr}
 80036ac:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 80036ae:	f8ad 0008 	strh.w	r0, [sp, #8]
  cp.scanWindow = htobs(scanWindow);
 80036b2:	f8ad 100a 	strh.w	r1, [sp, #10]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 80036b6:	f88d 200c 	strb.w	r2, [sp, #12]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	f8cd 200d 	str.w	r2, [sp, #13]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	f8ad 3011 	strh.w	r3, [sp, #17]
  cp.own_bdaddr_type = own_bdaddr_type;
 80036c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80036ca:	f88d 3013 	strb.w	r3, [sp, #19]
  cp.conn_min_interval = htobs(conn_min_interval);
 80036ce:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80036d2:	f8ad 3014 	strh.w	r3, [sp, #20]
  cp.conn_max_interval = htobs(conn_max_interval);
 80036d6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80036da:	f8ad 3016 	strh.w	r3, [sp, #22]
  cp.conn_latency = htobs(conn_latency);
 80036de:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80036e2:	f8ad 3018 	strh.w	r3, [sp, #24]
  cp.supervision_timeout = htobs(supervision_timeout);
 80036e6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80036ea:	f8ad 301a 	strh.w	r3, [sp, #26]
  cp.min_conn_length = htobs(min_conn_length);
 80036ee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80036f2:	f8ad 301c 	strh.w	r3, [sp, #28]
  cp.max_conn_length = htobs(max_conn_length);
 80036f6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80036fa:	f8ad 301e 	strh.w	r3, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 80036fe:	233f      	movs	r3, #63	; 0x3f
 8003700:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8003704:	239c      	movs	r3, #156	; 0x9c
 8003706:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800370a:	ab02      	add	r3, sp, #8
 800370c:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800370e:	2318      	movs	r3, #24
 8003710:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.event = EVT_CMD_STATUS;
 8003712:	230f      	movs	r3, #15
 8003714:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 8003716:	f10d 0307 	add.w	r3, sp, #7
 800371a:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 800371c:	2301      	movs	r3, #1
 800371e:	930d      	str	r3, [sp, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003720:	2100      	movs	r1, #0
 8003722:	a808      	add	r0, sp, #32
 8003724:	f000 face 	bl	8003cc4 <hci_send_req>
 8003728:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800372a:	bfac      	ite	ge
 800372c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003730:	20ff      	movlt	r0, #255	; 0xff
}
 8003732:	b00f      	add	sp, #60	; 0x3c
 8003734:	f85d fb04 	ldr.w	pc, [sp], #4

08003738 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8003738:	b500      	push	{lr}
 800373a:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800373c:	2100      	movs	r1, #0
 800373e:	9103      	str	r1, [sp, #12]
 8003740:	9104      	str	r1, [sp, #16]
 8003742:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_VENDOR_CMD;
 8003744:	233f      	movs	r3, #63	; 0x3f
 8003746:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 800374a:	f240 1301 	movw	r3, #257	; 0x101
 800374e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003752:	f10d 0307 	add.w	r3, sp, #7
 8003756:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8003758:	2301      	movs	r3, #1
 800375a:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800375c:	a802      	add	r0, sp, #8
 800375e:	f000 fab1 	bl	8003cc4 <hci_send_req>
 8003762:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003764:	bfac      	ite	ge
 8003766:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800376a:	20ff      	movlt	r0, #255	; 0xff
}
 800376c:	b009      	add	sp, #36	; 0x24
 800376e:	f85d fb04 	ldr.w	pc, [sp], #4

08003772 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8003772:	b570      	push	{r4, r5, r6, lr}
 8003774:	b08c      	sub	sp, #48	; 0x30
 8003776:	4616      	mov	r6, r2
 8003778:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 800377a:	f88d 0000 	strb.w	r0, [sp]
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800377e:	2801      	cmp	r0, #1
 8003780:	bf0c      	ite	eq
 8003782:	2402      	moveq	r4, #2
 8003784:	2410      	movne	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003786:	4622      	mov	r2, r4
 8003788:	f10d 0001 	add.w	r0, sp, #1
 800378c:	f000 fe25 	bl	80043da <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8003790:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003794:	446b      	add	r3, sp
 8003796:	f803 6c2f 	strb.w	r6, [r3, #-47]
  indx++;
    
  buffer[indx] = max_attr_records;
 800379a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800379e:	446b      	add	r3, sp
 80037a0:	f803 5c2e 	strb.w	r5, [r3, #-46]
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80037a4:	ab05      	add	r3, sp, #20
 80037a6:	2100      	movs	r1, #0
 80037a8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80037ac:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80037b0:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 80037b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80037bc:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 80037c0:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 80037c4:	3403      	adds	r4, #3
 80037c6:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 80037c8:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80037ca:	2303      	movs	r3, #3
 80037cc:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 80037ce:	a806      	add	r0, sp, #24
 80037d0:	f000 fa78 	bl	8003cc4 <hci_send_req>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	db09      	blt.n	80037ec <aci_gatt_add_serv+0x7a>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80037d8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80037dc:	b920      	cbnz	r0, 80037e8 <aci_gatt_add_serv+0x76>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80037de:	9b05      	ldr	r3, [sp, #20]
 80037e0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80037e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80037e6:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80037e8:	b00c      	add	sp, #48	; 0x30
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80037ec:	20ff      	movs	r0, #255	; 0xff
 80037ee:	e7fb      	b.n	80037e8 <aci_gatt_add_serv+0x76>

080037f0 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80037f0:	b530      	push	{r4, r5, lr}
 80037f2:	b08f      	sub	sp, #60	; 0x3c
 80037f4:	460c      	mov	r4, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80037fa:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 80037fe:	f88d 4002 	strb.w	r4, [sp, #2]
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003802:	2c01      	cmp	r4, #1
 8003804:	bf0c      	ite	eq
 8003806:	2402      	moveq	r4, #2
 8003808:	2410      	movne	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800380a:	4622      	mov	r2, r4
 800380c:	f10d 0003 	add.w	r0, sp, #3
 8003810:	f000 fde3 	bl	80043da <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8003814:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003818:	446b      	add	r3, sp
 800381a:	f803 5c35 	strb.w	r5, [r3, #-53]
  indx++;
    
  buffer[indx] = charProperties;
 800381e:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003822:	446b      	add	r3, sp
 8003824:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8003828:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
    
  buffer[indx] = secPermissions;
 800382c:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003830:	446b      	add	r3, sp
 8003832:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8003836:	f803 2c33 	strb.w	r2, [r3, #-51]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800383a:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800383e:	446b      	add	r3, sp
 8003840:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8003844:	f803 2c32 	strb.w	r2, [r3, #-50]
  indx++;
    
  buffer[indx] = encryKeySize;
 8003848:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800384c:	446b      	add	r3, sp
 800384e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8003852:	f803 2c31 	strb.w	r2, [r3, #-49]
  indx++;
    
  buffer[indx] = isVariable;
 8003856:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800385a:	446b      	add	r3, sp
 800385c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003860:	f803 2c30 	strb.w	r2, [r3, #-48]
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003864:	ab07      	add	r3, sp, #28
 8003866:	2100      	movs	r1, #0
 8003868:	f8ad 101c 	strh.w	r1, [sp, #28]
 800386c:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003870:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8003872:	223f      	movs	r2, #63	; 0x3f
 8003874:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800387c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 8003880:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 8003884:	3409      	adds	r4, #9
 8003886:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 8003888:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800388a:	2303      	movs	r3, #3
 800388c:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800388e:	a808      	add	r0, sp, #32
 8003890:	f000 fa18 	bl	8003cc4 <hci_send_req>
 8003894:	2800      	cmp	r0, #0
 8003896:	db09      	blt.n	80038ac <aci_gatt_add_char+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8003898:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800389c:	b920      	cbnz	r0, 80038a8 <aci_gatt_add_char+0xb8>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800389e:	9b07      	ldr	r3, [sp, #28]
 80038a0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80038a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80038a6:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80038a8:	b00f      	add	sp, #60	; 0x3c
 80038aa:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 80038ac:	20ff      	movs	r0, #255	; 0xff
 80038ae:	e7fb      	b.n	80038a8 <aci_gatt_add_char+0xb8>

080038b0 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80038b0:	2b7a      	cmp	r3, #122	; 0x7a
 80038b2:	d82c      	bhi.n	800390e <aci_gatt_update_char_value+0x5e>
{
 80038b4:	b510      	push	{r4, lr}
 80038b6:	b0a8      	sub	sp, #160	; 0xa0
 80038b8:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80038ba:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80038be:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 80038c2:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 80038c6:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80038ca:	461a      	mov	r2, r3
 80038cc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80038ce:	f10d 000a 	add.w	r0, sp, #10
 80038d2:	f000 fd82 	bl	80043da <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80038d6:	2100      	movs	r1, #0
 80038d8:	9123      	str	r1, [sp, #140]	; 0x8c
  rq.ogf = OGF_VENDOR_CMD;
 80038da:	233f      	movs	r3, #63	; 0x3f
 80038dc:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80038e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80038e4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 80038e8:	ab01      	add	r3, sp, #4
 80038ea:	9324      	str	r3, [sp, #144]	; 0x90
  indx +=  charValueLen;
 80038ec:	3406      	adds	r4, #6
  rq.clen = indx;
 80038ee:	b2e4      	uxtb	r4, r4
 80038f0:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 80038f2:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 80038f6:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 80038f8:	2301      	movs	r3, #1
 80038fa:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 80038fc:	a822      	add	r0, sp, #136	; 0x88
 80038fe:	f000 f9e1 	bl	8003cc4 <hci_send_req>
 8003902:	2800      	cmp	r0, #0
 8003904:	db05      	blt.n	8003912 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003906:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 800390a:	b028      	add	sp, #160	; 0xa0
 800390c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800390e:	2042      	movs	r0, #66	; 0x42
}
 8003910:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8003912:	20ff      	movs	r0, #255	; 0xff
 8003914:	e7f9      	b.n	800390a <aci_gatt_update_char_value+0x5a>

08003916 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8003916:	b510      	push	{r4, lr}
 8003918:	b08c      	sub	sp, #48	; 0x30
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800391a:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  start_handle = htobs(start_handle);
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800391e:	f8ad 1002 	strh.w	r1, [sp, #2]
  indx += 2;
  
  end_handle = htobs(end_handle);
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8003922:	f8ad 2004 	strh.w	r2, [sp, #4]
  indx += 2;
  
  buffer[indx] = charUuidType;
 8003926:	f88d 3006 	strb.w	r3, [sp, #6]
    
  if(charUuidType == 0x01){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800392a:	2b01      	cmp	r3, #1
 800392c:	bf0c      	ite	eq
 800392e:	2402      	moveq	r4, #2
 8003930:	2410      	movne	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003932:	4622      	mov	r2, r4
 8003934:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003936:	f10d 0007 	add.w	r0, sp, #7
 800393a:	f000 fd4e 	bl	80043da <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800393e:	233f      	movs	r3, #63	; 0x3f
 8003940:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8003944:	f44f 738b 	mov.w	r3, #278	; 0x116
 8003948:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.cparam = (void *)buffer;
 800394c:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 8003950:	3407      	adds	r4, #7
 8003952:	9409      	str	r4, [sp, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 8003954:	230f      	movs	r3, #15
 8003956:	9307      	str	r3, [sp, #28]
  rq.rparam = &status;
 8003958:	f10d 0317 	add.w	r3, sp, #23
 800395c:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 8003962:	2100      	movs	r1, #0
 8003964:	a806      	add	r0, sp, #24
 8003966:	f000 f9ad 	bl	8003cc4 <hci_send_req>
 800396a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800396c:	bfac      	ite	ge
 800396e:	f89d 0017 	ldrbge.w	r0, [sp, #23]
    return BLE_STATUS_TIMEOUT;
 8003972:	20ff      	movlt	r0, #255	; 0xff
}
 8003974:	b00c      	add	sp, #48	; 0x30
 8003976:	bd10      	pop	{r4, pc}

08003978 <aci_gatt_write_charac_descriptor>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8003978:	2a7b      	cmp	r2, #123	; 0x7b
 800397a:	d82b      	bhi.n	80039d4 <aci_gatt_write_charac_descriptor+0x5c>
{
 800397c:	b510      	push	{r4, lr}
 800397e:	b0a8      	sub	sp, #160	; 0xa0
 8003980:	468c      	mov	ip, r1
 8003982:	4614      	mov	r4, r2
 8003984:	4619      	mov	r1, r3
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8003986:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800398a:	f8ad c006 	strh.w	ip, [sp, #6]
  indx += 2;

  buffer[indx] = value_len;
 800398e:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8003992:	f10d 0009 	add.w	r0, sp, #9
 8003996:	f000 fd20 	bl	80043da <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800399a:	233f      	movs	r3, #63	; 0x3f
 800399c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 80039a0:	f240 1321 	movw	r3, #289	; 0x121
 80039a4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 80039a8:	ab01      	add	r3, sp, #4
 80039aa:	9324      	str	r3, [sp, #144]	; 0x90
  indx +=  value_len;
 80039ac:	3405      	adds	r4, #5
  rq.clen = indx;
 80039ae:	b2e4      	uxtb	r4, r4
 80039b0:	9425      	str	r4, [sp, #148]	; 0x94
  rq.event = EVT_CMD_STATUS; 
 80039b2:	230f      	movs	r3, #15
 80039b4:	9323      	str	r3, [sp, #140]	; 0x8c
  rq.rparam = &status;
 80039b6:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 80039ba:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 80039bc:	2301      	movs	r3, #1
 80039be:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 80039c0:	2100      	movs	r1, #0
 80039c2:	a822      	add	r0, sp, #136	; 0x88
 80039c4:	f000 f97e 	bl	8003cc4 <hci_send_req>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	db05      	blt.n	80039d8 <aci_gatt_write_charac_descriptor+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 80039cc:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 80039d0:	b028      	add	sp, #160	; 0xa0
 80039d2:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80039d4:	2042      	movs	r0, #66	; 0x42
}
 80039d6:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 80039d8:	20ff      	movs	r0, #255	; 0xff
 80039da:	e7f9      	b.n	80039d0 <aci_gatt_write_charac_descriptor+0x58>

080039dc <aci_gatt_write_without_response>:
{
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 80039dc:	2a14      	cmp	r2, #20
 80039de:	d829      	bhi.n	8003a34 <aci_gatt_write_without_response+0x58>
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	468c      	mov	ip, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	4619      	mov	r1, r3
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 80039ea:	f8ad 0004 	strh.w	r0, [sp, #4]
  cp.attr_handle = htobs(attr_handle);
 80039ee:	f8ad c006 	strh.w	ip, [sp, #6]
  cp.val_len = val_len;
 80039f2:	f88d 2008 	strb.w	r2, [sp, #8]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 80039f6:	f10d 0009 	add.w	r0, sp, #9
 80039fa:	f000 fcee 	bl	80043da <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80039fe:	2100      	movs	r1, #0
 8003a00:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8003a02:	233f      	movs	r3, #63	; 0x3f
 8003a04:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8003a08:	f240 1323 	movw	r3, #291	; 0x123
 8003a0c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 8003a10:	ab01      	add	r3, sp, #4
 8003a12:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8003a14:	3405      	adds	r4, #5
 8003a16:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &status;
 8003a18:	f10d 031f 	add.w	r3, sp, #31
 8003a1c:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8003a22:	a808      	add	r0, sp, #32
 8003a24:	f000 f94e 	bl	8003cc4 <hci_send_req>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	db05      	blt.n	8003a38 <aci_gatt_write_without_response+0x5c>
    return BLE_STATUS_TIMEOUT;

  return status;
 8003a2c:	f89d 001f 	ldrb.w	r0, [sp, #31]
}
 8003a30:	b00e      	add	sp, #56	; 0x38
 8003a32:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003a34:	2042      	movs	r0, #66	; 0x42
}
 8003a36:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8003a38:	20ff      	movs	r0, #255	; 0xff
 8003a3a:	e7f9      	b.n	8003a30 <aci_gatt_write_without_response+0x54>

08003a3c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	b0a8      	sub	sp, #160	; 0xa0
 8003a40:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003a42:	297e      	cmp	r1, #126	; 0x7e
 8003a44:	d824      	bhi.n	8003a90 <aci_hal_write_config_data+0x54>
 8003a46:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 8003a48:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 8003a4c:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003a50:	4622      	mov	r2, r4
 8003a52:	f10d 0006 	add.w	r0, sp, #6
 8003a56:	f000 fcc0 	bl	80043da <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	9123      	str	r1, [sp, #140]	; 0x8c
  rq.ogf = OGF_VENDOR_CMD;
 8003a5e:	233f      	movs	r3, #63	; 0x3f
 8003a60:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003a64:	230c      	movs	r3, #12
 8003a66:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8003a6a:	ab01      	add	r3, sp, #4
 8003a6c:	9324      	str	r3, [sp, #144]	; 0x90
  indx +=  len;
 8003a6e:	3402      	adds	r4, #2
  rq.clen = indx;
 8003a70:	b2e4      	uxtb	r4, r4
 8003a72:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8003a74:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8003a78:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 8003a7e:	a822      	add	r0, sp, #136	; 0x88
 8003a80:	f000 f920 	bl	8003cc4 <hci_send_req>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	db05      	blt.n	8003a94 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;

  return status;
 8003a88:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 8003a8c:	b028      	add	sp, #160	; 0xa0
 8003a8e:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003a90:	2042      	movs	r0, #66	; 0x42
 8003a92:	e7fb      	b.n	8003a8c <aci_hal_write_config_data+0x50>
    return BLE_STATUS_TIMEOUT;
 8003a94:	20ff      	movs	r0, #255	; 0xff
 8003a96:	e7f9      	b.n	8003a8c <aci_hal_write_config_data+0x50>

08003a98 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8003a98:	b500      	push	{lr}
 8003a9a:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8003a9c:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8003aa0:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	9103      	str	r1, [sp, #12]
  rq.ogf = OGF_VENDOR_CMD;
 8003aa8:	233f      	movs	r3, #63	; 0x3f
 8003aaa:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8003aae:	230f      	movs	r3, #15
 8003ab0:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8003ab4:	ab01      	add	r3, sp, #4
 8003ab6:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8003abc:	f10d 0303 	add.w	r3, sp, #3
 8003ac0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8003ac6:	a802      	add	r0, sp, #8
 8003ac8:	f000 f8fc 	bl	8003cc4 <hci_send_req>
 8003acc:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003ace:	bfac      	ite	ge
 8003ad0:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8003ad4:	20ff      	movlt	r0, #255	; 0xff
}
 8003ad6:	b009      	add	sp, #36	; 0x24
 8003ad8:	f85d fb04 	ldr.w	pc, [sp], #4

08003adc <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8003adc:	b530      	push	{r4, r5, lr}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8003ae4:	ab02      	add	r3, sp, #8
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f10d 030a 	add.w	r3, sp, #10
 8003aec:	f10d 020e 	add.w	r2, sp, #14
 8003af0:	a903      	add	r1, sp, #12
 8003af2:	f10d 000f 	add.w	r0, sp, #15
 8003af6:	f000 f82e 	bl	8003b56 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8003afa:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003afe:	d10d      	bne.n	8003b1c <getBlueNRGVersion+0x40>
    *hwVersion = hci_revision >> 8;
 8003b00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8003b04:	0a0b      	lsrs	r3, r1, #8
 8003b06:	702b      	strb	r3, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003b08:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003b0c:	f002 030f 	and.w	r3, r2, #15
 8003b10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003b14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8003b1c:	b005      	add	sp, #20
 8003b1e:	bd30      	pop	{r4, r5, pc}

08003b20 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8003b20:	b500      	push	{lr}
 8003b22:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b24:	2100      	movs	r1, #0
 8003b26:	9103      	str	r1, [sp, #12]
 8003b28:	9104      	str	r1, [sp, #16]
 8003b2a:	9105      	str	r1, [sp, #20]
  rq.ogf = OGF_HOST_CTL;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8003b32:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003b36:	f10d 0307 	add.w	r3, sp, #7
 8003b3a:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003b40:	a802      	add	r0, sp, #8
 8003b42:	f000 f8bf 	bl	8003cc4 <hci_send_req>
 8003b46:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8003b48:	bfac      	ite	ge
 8003b4a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003b4e:	20ff      	movlt	r0, #255	; 0xff
}
 8003b50:	b009      	add	sp, #36	; 0x24
 8003b52:	f85d fb04 	ldr.w	pc, [sp], #4

08003b56 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8003b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	460f      	mov	r7, r1
 8003b60:	4616      	mov	r6, r2
 8003b62:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b64:	ac01      	add	r4, sp, #4
 8003b66:	2100      	movs	r1, #0
 8003b68:	9101      	str	r1, [sp, #4]
 8003b6a:	9102      	str	r1, [sp, #8]
 8003b6c:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b70:	9105      	str	r1, [sp, #20]
 8003b72:	9106      	str	r1, [sp, #24]
 8003b74:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_INFO_PARAM;
 8003b76:	2304      	movs	r3, #4
 8003b78:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 8003b82:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8003b84:	2309      	movs	r3, #9
 8003b86:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003b88:	a804      	add	r0, sp, #16
 8003b8a:	f000 f89b 	bl	8003cc4 <hci_send_req>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	db1b      	blt.n	8003bca <hci_le_read_local_version+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003b92:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003b96:	b9a8      	cbnz	r0, 8003bc4 <hci_le_read_local_version+0x6e>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8003b98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003b9c:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 8003ba0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003ba4:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8003ba6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003baa:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8003bac:	9b02      	ldr	r3, [sp, #8]
 8003bae:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003bb2:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8003bb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003bb8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bc2:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8003bc4:	b00a      	add	sp, #40	; 0x28
 8003bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8003bca:	20ff      	movs	r0, #255	; 0xff
 8003bcc:	e7fa      	b.n	8003bc4 <hci_le_read_local_version+0x6e>

08003bce <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8003bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd0:	b091      	sub	sp, #68	; 0x44
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8003bd6:	af02      	add	r7, sp, #8
 8003bd8:	2620      	movs	r6, #32
 8003bda:	4632      	mov	r2, r6
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4638      	mov	r0, r7
 8003be0:	f000 fc09 	bl	80043f6 <memset>
  scan_resp_cp.length = length;
 8003be4:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8003be8:	4622      	mov	r2, r4
 8003bea:	2c1f      	cmp	r4, #31
 8003bec:	bf28      	it	cs
 8003bee:	221f      	movcs	r2, #31
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f10d 0009 	add.w	r0, sp, #9
 8003bf6:	f000 fbf0 	bl	80043da <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_LE_CTL;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8003c04:	2309      	movs	r3, #9
 8003c06:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 8003c0a:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8003c0c:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 8003c0e:	f10d 0307 	add.w	r3, sp, #7
 8003c12:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 8003c14:	2301      	movs	r3, #1
 8003c16:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003c18:	a80a      	add	r0, sp, #40	; 0x28
 8003c1a:	f000 f853 	bl	8003cc4 <hci_send_req>
 8003c1e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8003c20:	bfac      	ite	ge
 8003c22:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003c26:	20ff      	movlt	r0, #255	; 0xff
}
 8003c28:	b011      	add	sp, #68	; 0x44
 8003c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c2c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003c2c:	b530      	push	{r4, r5, lr}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	4605      	mov	r5, r0
 8003c32:	460c      	mov	r4, r1
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003c34:	e007      	b.n	8003c46 <move_list+0x1a>
  {
    list_remove_tail(src_list, &tmp_node);
 8003c36:	a901      	add	r1, sp, #4
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f000 f9b5 	bl	8003fa8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003c3e:	9901      	ldr	r1, [sp, #4]
 8003c40:	4628      	mov	r0, r5
 8003c42:	f000 f97d 	bl	8003f40 <list_insert_head>
  while (!list_is_empty(src_list))
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f96f 	bl	8003f2a <list_is_empty>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d0f2      	beq.n	8003c36 <move_list+0xa>
  }
}
 8003c50:	b003      	add	sp, #12
 8003c52:	bd30      	pop	{r4, r5, pc}

08003c54 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003c54:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 8003c56:	b108      	cbz	r0, 8003c5c <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003c58:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <hci_init+0x44>)
 8003c5a:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003c5c:	480f      	ldr	r0, [pc, #60]	; (8003c9c <hci_init+0x48>)
 8003c5e:	f000 f961 	bl	8003f24 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003c62:	480f      	ldr	r0, [pc, #60]	; (8003ca0 <hci_init+0x4c>)
 8003c64:	f000 f95e 	bl	8003f24 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003c68:	f7fd fa9a 	bl	80011a0 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <hci_init+0x50>)
 8003c6e:	f504 762f 	add.w	r6, r4, #700	; 0x2bc
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003c72:	4d0a      	ldr	r5, [pc, #40]	; (8003c9c <hci_init+0x48>)
 8003c74:	4621      	mov	r1, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 f96e 	bl	8003f58 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003c7c:	348c      	adds	r4, #140	; 0x8c
 8003c7e:	42b4      	cmp	r4, r6
 8003c80:	d1f8      	bne.n	8003c74 <hci_init+0x20>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <hci_init+0x44>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b10b      	cbz	r3, 8003c8c <hci_init+0x38>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003c8c:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <hci_init+0x44>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	b103      	cbz	r3, 8003c94 <hci_init+0x40>
 8003c92:	4798      	blx	r3
}
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
 8003c96:	bf00      	nop
 8003c98:	20000468 	.word	0x20000468
 8003c9c:	20000744 	.word	0x20000744
 8003ca0:	2000074c 	.word	0x2000074c
 8003ca4:	20000488 	.word	0x20000488

08003ca8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <hci_register_io_bus+0x18>)
 8003caa:	6802      	ldr	r2, [r0, #0]
 8003cac:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8003cae:	68c2      	ldr	r2, [r0, #12]
 8003cb0:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8003cb2:	6902      	ldr	r2, [r0, #16]
 8003cb4:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003cb6:	6982      	ldr	r2, [r0, #24]
 8003cb8:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8003cba:	6882      	ldr	r2, [r0, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000468 	.word	0x20000468

08003cc4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cc8:	b0a5      	sub	sp, #148	; 0x94
 8003cca:	4606      	mov	r6, r0
 8003ccc:	4688      	mov	r8, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003cce:	8847      	ldrh	r7, [r0, #2]
 8003cd0:	f8b0 9000 	ldrh.w	r9, [r0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9323      	str	r3, [sp, #140]	; 0x8c
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003cd8:	a821      	add	r0, sp, #132	; 0x84
 8003cda:	f000 f923 	bl	8003f24 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003cde:	4c5d      	ldr	r4, [pc, #372]	; (8003e54 <hci_send_req+0x190>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003ce0:	4d5d      	ldr	r5, [pc, #372]	; (8003e58 <hci_send_req+0x194>)
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f000 f971 	bl	8003fca <list_get_size>
 8003ce8:	2801      	cmp	r0, #1
 8003cea:	dc08      	bgt.n	8003cfe <hci_send_req+0x3a>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003cec:	a901      	add	r1, sp, #4
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 f949 	bl	8003f86 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003cf4:	9901      	ldr	r1, [sp, #4]
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f000 f92e 	bl	8003f58 <list_insert_tail>
 8003cfc:	e7f1      	b.n	8003ce2 <hci_send_req+0x1e>

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003cfe:	7b34      	ldrb	r4, [r6, #12]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003d00:	8873      	ldrh	r3, [r6, #2]
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	8832      	ldrh	r2, [r6, #0]
 8003d08:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f88d 2004 	strb.w	r2, [sp, #4]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003d12:	f8ad 3005 	strh.w	r3, [sp, #5]
 8003d16:	f88d 4007 	strb.w	r4, [sp, #7]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	68b1      	ldr	r1, [r6, #8]
 8003d1e:	a802      	add	r0, sp, #8
 8003d20:	f000 fb5b 	bl	80043da <memcpy>
  if (hciContext.io.Send)
 8003d24:	4b4d      	ldr	r3, [pc, #308]	; (8003e5c <hci_send_req+0x198>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	b113      	cbz	r3, 8003d30 <hci_send_req+0x6c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003d2a:	1d21      	adds	r1, r4, #4
 8003d2c:	a801      	add	r0, sp, #4
 8003d2e:	4798      	blx	r3
  
  if (async)
 8003d30:	f1b8 0f00 	cmp.w	r8, #0
 8003d34:	f040 808a 	bne.w	8003e4c <hci_send_req+0x188>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003d38:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003d3c:	ea47 2789 	orr.w	r7, r7, r9, lsl #10
 8003d40:	b2bf      	uxth	r7, r7
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003d42:	4d45      	ldr	r5, [pc, #276]	; (8003e58 <hci_send_req+0x194>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003d44:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003e54 <hci_send_req+0x190>
    uint32_t tickstart = HAL_GetTick();
 8003d48:	f7fd ffac 	bl	8001ca4 <HAL_GetTick>
 8003d4c:	4604      	mov	r4, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003d4e:	f7fd ffa9 	bl	8001ca4 <HAL_GetTick>
 8003d52:	1b00      	subs	r0, r0, r4
 8003d54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d58:	d86a      	bhi.n	8003e30 <hci_send_req+0x16c>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 f8e5 	bl	8003f2a <list_is_empty>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d1f4      	bne.n	8003d4e <hci_send_req+0x8a>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003d64:	a923      	add	r1, sp, #140	; 0x8c
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 f90d 	bl	8003f86 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003d6c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    if (hci_hdr->type == HCI_EVENT_PKT)
 8003d6e:	7a0b      	ldrb	r3, [r1, #8]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d119      	bne.n	8003da8 <hci_send_req+0xe4>
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003d74:	f891 2088 	ldrb.w	r2, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8003d78:	7a4b      	ldrb	r3, [r1, #9]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d068      	beq.n	8003e50 <hci_send_req+0x18c>
 8003d7e:	d80d      	bhi.n	8003d9c <hci_send_req+0xd8>
 8003d80:	2b0e      	cmp	r3, #14
 8003d82:	d02c      	beq.n	8003dde <hci_send_req+0x11a>
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d10f      	bne.n	8003da8 <hci_send_req+0xe4>
        if (cs->opcode != opcode)
 8003d88:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8003d8c:	42bb      	cmp	r3, r7
 8003d8e:	d151      	bne.n	8003e34 <hci_send_req+0x170>
        if (r->event != EVT_CMD_STATUS) {
 8003d90:	6873      	ldr	r3, [r6, #4]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	d018      	beq.n	8003dc8 <hci_send_req+0x104>
          if (cs->status) {
 8003d96:	7acb      	ldrb	r3, [r1, #11]
 8003d98:	b133      	cbz	r3, 8003da8 <hci_send_req+0xe4>
 8003d9a:	e04b      	b.n	8003e34 <hci_send_req+0x170>
      switch (event_pckt->evt) 
 8003d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d9e:	d103      	bne.n	8003da8 <hci_send_req+0xe4>
        if (me->subevent != r->event)
 8003da0:	7ac8      	ldrb	r0, [r1, #11]
 8003da2:	6873      	ldr	r3, [r6, #4]
 8003da4:	4298      	cmp	r0, r3
 8003da6:	d031      	beq.n	8003e0c <hci_send_req+0x148>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003da8:	4640      	mov	r0, r8
 8003daa:	f000 f8be 	bl	8003f2a <list_is_empty>
 8003dae:	b120      	cbz	r0, 8003dba <hci_send_req+0xf6>
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f8ba 	bl	8003f2a <list_is_empty>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d133      	bne.n	8003e22 <hci_send_req+0x15e>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003dba:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003dbc:	a821      	add	r0, sp, #132	; 0x84
 8003dbe:	f000 f8cb 	bl	8003f58 <list_insert_tail>
      hciReadPacket=NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8003dc6:	e7bf      	b.n	8003d48 <hci_send_req+0x84>
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003dc8:	3a03      	subs	r2, #3
        r->rlen = MIN(len, r->rlen);
 8003dca:	6973      	ldr	r3, [r6, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	bf28      	it	cs
 8003dd0:	461a      	movcs	r2, r3
 8003dd2:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003dd4:	310b      	adds	r1, #11
 8003dd6:	6930      	ldr	r0, [r6, #16]
 8003dd8:	f000 faff 	bl	80043da <memcpy>
        goto done;
 8003ddc:	e00c      	b.n	8003df8 <hci_send_req+0x134>
        if (cc->opcode != opcode)
 8003dde:	898b      	ldrh	r3, [r1, #12]
 8003de0:	42bb      	cmp	r3, r7
 8003de2:	d127      	bne.n	8003e34 <hci_send_req+0x170>
        len -= EVT_CMD_COMPLETE_SIZE;
 8003de4:	3a06      	subs	r2, #6
        r->rlen = MIN(len, r->rlen);
 8003de6:	6973      	ldr	r3, [r6, #20]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bf28      	it	cs
 8003dec:	461a      	movcs	r2, r3
 8003dee:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003df0:	310e      	adds	r1, #14
 8003df2:	6930      	ldr	r0, [r6, #16]
 8003df4:	f000 faf1 	bl	80043da <memcpy>

  return -1;
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003df8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003dfa:	4816      	ldr	r0, [pc, #88]	; (8003e54 <hci_send_req+0x190>)
 8003dfc:	f000 f8a0 	bl	8003f40 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003e00:	a921      	add	r1, sp, #132	; 0x84
 8003e02:	4815      	ldr	r0, [pc, #84]	; (8003e58 <hci_send_req+0x194>)
 8003e04:	f7ff ff12 	bl	8003c2c <move_list>

  return 0;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e01c      	b.n	8003e46 <hci_send_req+0x182>
        len -= 1;
 8003e0c:	3a04      	subs	r2, #4
        r->rlen = MIN(len, r->rlen);
 8003e0e:	6973      	ldr	r3, [r6, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	bf28      	it	cs
 8003e14:	461a      	movcs	r2, r3
 8003e16:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003e18:	310c      	adds	r1, #12
 8003e1a:	6930      	ldr	r0, [r6, #16]
 8003e1c:	f000 fadd 	bl	80043da <memcpy>
        goto done;
 8003e20:	e7ea      	b.n	8003df8 <hci_send_req+0x134>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e22:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003e24:	4640      	mov	r0, r8
 8003e26:	f000 f897 	bl	8003f58 <list_insert_tail>
      hciReadPacket=NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e2e:	e78b      	b.n	8003d48 <hci_send_req+0x84>
  if (hciReadPacket!=NULL) {
 8003e30:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003e32:	b111      	cbz	r1, 8003e3a <hci_send_req+0x176>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e34:	4807      	ldr	r0, [pc, #28]	; (8003e54 <hci_send_req+0x190>)
 8003e36:	f000 f883 	bl	8003f40 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003e3a:	a921      	add	r1, sp, #132	; 0x84
 8003e3c:	4806      	ldr	r0, [pc, #24]	; (8003e58 <hci_send_req+0x194>)
 8003e3e:	f7ff fef5 	bl	8003c2c <move_list>
  return -1;
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e46:	b025      	add	sp, #148	; 0x94
 8003e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	e7fa      	b.n	8003e46 <hci_send_req+0x182>
  if (hciReadPacket!=NULL) {
 8003e50:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003e52:	e7ef      	b.n	8003e34 <hci_send_req+0x170>
 8003e54:	20000744 	.word	0x20000744
 8003e58:	2000074c 	.word	0x2000074c
 8003e5c:	20000468 	.word	0x20000468

08003e60 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003e68:	4c0c      	ldr	r4, [pc, #48]	; (8003e9c <hci_user_evt_proc+0x3c>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 8003e6a:	4e0d      	ldr	r6, [pc, #52]	; (8003ea0 <hci_user_evt_proc+0x40>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e6c:	4d0d      	ldr	r5, [pc, #52]	; (8003ea4 <hci_user_evt_proc+0x44>)
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003e6e:	e006      	b.n	8003e7e <hci_user_evt_proc+0x1e>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8003e70:	9801      	ldr	r0, [sp, #4]
 8003e72:	3008      	adds	r0, #8
 8003e74:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e76:	9901      	ldr	r1, [sp, #4]
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 f86d 	bl	8003f58 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f000 f853 	bl	8003f2a <list_is_empty>
 8003e84:	b938      	cbnz	r0, 8003e96 <hci_user_evt_proc+0x36>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8003e86:	a901      	add	r1, sp, #4
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f000 f87c 	bl	8003f86 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8003e8e:	69f3      	ldr	r3, [r6, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ed      	bne.n	8003e70 <hci_user_evt_proc+0x10>
 8003e94:	e7ef      	b.n	8003e76 <hci_user_evt_proc+0x16>
  }
}
 8003e96:	b002      	add	sp, #8
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000074c 	.word	0x2000074c
 8003ea0:	20000468 	.word	0x20000468
 8003ea4:	20000744 	.word	0x20000744

08003ea8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003ea8:	b500      	push	{lr}
 8003eaa:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003eb0:	4819      	ldr	r0, [pc, #100]	; (8003f18 <hci_notify_asynch_evt+0x70>)
 8003eb2:	f000 f83a 	bl	8003f2a <list_is_empty>
 8003eb6:	b118      	cbz	r0, 8003ec0 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 8003eb8:	2001      	movs	r0, #1
  }
  return ret;

}
 8003eba:	b003      	add	sp, #12
 8003ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8003ec0:	a901      	add	r1, sp, #4
 8003ec2:	4815      	ldr	r0, [pc, #84]	; (8003f18 <hci_notify_asynch_evt+0x70>)
 8003ec4:	f000 f85f 	bl	8003f86 <list_remove_head>
    if (hciContext.io.Receive)
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <hci_notify_asynch_evt+0x74>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	b1e3      	cbz	r3, 8003f08 <hci_notify_asynch_evt+0x60>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	9801      	ldr	r0, [sp, #4]
 8003ed2:	3008      	adds	r0, #8
 8003ed4:	4798      	blx	r3
      if (data_len > 0)
 8003ed6:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 8003eda:	d00f      	beq.n	8003efc <hci_notify_asynch_evt+0x54>
        hciReadPacket->data_len = data_len;
 8003edc:	9901      	ldr	r1, [sp, #4]
 8003ede:	f881 3088 	strb.w	r3, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003ee2:	7a0b      	ldrb	r3, [r1, #8]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d111      	bne.n	8003f0c <hci_notify_asynch_evt+0x64>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003ee8:	7a8b      	ldrb	r3, [r1, #10]
 8003eea:	b2c0      	uxtb	r0, r0
 8003eec:	3803      	subs	r0, #3
 8003eee:	4283      	cmp	r3, r0
 8003ef0:	d10c      	bne.n	8003f0c <hci_notify_asynch_evt+0x64>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003ef2:	480b      	ldr	r0, [pc, #44]	; (8003f20 <hci_notify_asynch_evt+0x78>)
 8003ef4:	f000 f830 	bl	8003f58 <list_insert_tail>
  int32_t ret = 0;
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e7de      	b.n	8003eba <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003efc:	9901      	ldr	r1, [sp, #4]
 8003efe:	4806      	ldr	r0, [pc, #24]	; (8003f18 <hci_notify_asynch_evt+0x70>)
 8003f00:	f000 f81e 	bl	8003f40 <list_insert_head>
  int32_t ret = 0;
 8003f04:	2000      	movs	r0, #0
 8003f06:	e7d8      	b.n	8003eba <hci_notify_asynch_evt+0x12>
 8003f08:	2000      	movs	r0, #0
  return ret;
 8003f0a:	e7d6      	b.n	8003eba <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <hci_notify_asynch_evt+0x70>)
 8003f0e:	f000 f817 	bl	8003f40 <list_insert_head>
  int32_t ret = 0;
 8003f12:	2000      	movs	r0, #0
 8003f14:	e7d1      	b.n	8003eba <hci_notify_asynch_evt+0x12>
 8003f16:	bf00      	nop
 8003f18:	20000744 	.word	0x20000744
 8003f1c:	20000468 	.word	0x20000468
 8003f20:	2000074c 	.word	0x2000074c

08003f24 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8003f24:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8003f26:	6040      	str	r0, [r0, #4]
}
 8003f28:	4770      	bx	lr

08003f2a <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f2e:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003f30:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8003f32:	4283      	cmp	r3, r0
 8003f34:	bf14      	ite	ne
 8003f36:	2000      	movne	r0, #0
 8003f38:	2001      	moveq	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8003f3e:	4770      	bx	lr

08003f40 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f40:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f44:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003f46:	6802      	ldr	r2, [r0, #0]
 8003f48:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8003f4a:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8003f4c:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8003f4e:	680a      	ldr	r2, [r1, #0]
 8003f50:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003f56:	4770      	bx	lr

08003f58 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f58:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8003f5e:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8003f60:	6842      	ldr	r2, [r0, #4]
 8003f62:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8003f64:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8003f66:	684a      	ldr	r2, [r1, #4]
 8003f68:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003f6e:	4770      	bx	lr

08003f70 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f70:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003f76:	6841      	ldr	r1, [r0, #4]
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 8003f7c:	6841      	ldr	r1, [r0, #4]
 8003f7e:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003f84:	4770      	bx	lr

08003f86 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003f86:	b538      	push	{r3, r4, r5, lr}
 8003f88:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f8e:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003f90:	6800      	ldr	r0, [r0, #0]
 8003f92:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 8003f94:	f7ff ffec 	bl	8003f70 <list_remove_node>
  (*node)->next = NULL;
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa2:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}

08003fa8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb0:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003fb2:	6840      	ldr	r0, [r0, #4]
 8003fb4:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 8003fb6:	f7ff ffdb 	bl	8003f70 <list_remove_node>
  (*node)->next = NULL;
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003fc8:	bd38      	pop	{r3, r4, r5, pc}

08003fca <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8003fca:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd0:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003fd2:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	d007      	beq.n	8003fe8 <list_get_size+0x1e>
  int size = 0;
 8003fd8:	2000      	movs	r0, #0
  {
    size++;
 8003fda:	3001      	adds	r0, #1
    temp = temp->next;		
 8003fdc:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d1fb      	bne.n	8003fda <list_get_size+0x10>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8003fe6:	4770      	bx	lr
  int size = 0;
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e7fa      	b.n	8003fe2 <list_get_size+0x18>

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000038 	.word	0x20000038

08003ff8 <__sflush_r>:
 8003ff8:	898a      	ldrh	r2, [r1, #12]
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	4605      	mov	r5, r0
 8004000:	0710      	lsls	r0, r2, #28
 8004002:	460c      	mov	r4, r1
 8004004:	d458      	bmi.n	80040b8 <__sflush_r+0xc0>
 8004006:	684b      	ldr	r3, [r1, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dc05      	bgt.n	8004018 <__sflush_r+0x20>
 800400c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	dc02      	bgt.n	8004018 <__sflush_r+0x20>
 8004012:	2000      	movs	r0, #0
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401a:	2e00      	cmp	r6, #0
 800401c:	d0f9      	beq.n	8004012 <__sflush_r+0x1a>
 800401e:	2300      	movs	r3, #0
 8004020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004024:	682f      	ldr	r7, [r5, #0]
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	d032      	beq.n	8004090 <__sflush_r+0x98>
 800402a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	075a      	lsls	r2, r3, #29
 8004030:	d505      	bpl.n	800403e <__sflush_r+0x46>
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	1ac0      	subs	r0, r0, r3
 8004036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004038:	b10b      	cbz	r3, 800403e <__sflush_r+0x46>
 800403a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800403c:	1ac0      	subs	r0, r0, r3
 800403e:	2300      	movs	r3, #0
 8004040:	4602      	mov	r2, r0
 8004042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004044:	6a21      	ldr	r1, [r4, #32]
 8004046:	4628      	mov	r0, r5
 8004048:	47b0      	blx	r6
 800404a:	1c43      	adds	r3, r0, #1
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	d106      	bne.n	800405e <__sflush_r+0x66>
 8004050:	6829      	ldr	r1, [r5, #0]
 8004052:	291d      	cmp	r1, #29
 8004054:	d82c      	bhi.n	80040b0 <__sflush_r+0xb8>
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <__sflush_r+0x108>)
 8004058:	40ca      	lsrs	r2, r1
 800405a:	07d6      	lsls	r6, r2, #31
 800405c:	d528      	bpl.n	80040b0 <__sflush_r+0xb8>
 800405e:	2200      	movs	r2, #0
 8004060:	6062      	str	r2, [r4, #4]
 8004062:	04d9      	lsls	r1, r3, #19
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	d504      	bpl.n	8004074 <__sflush_r+0x7c>
 800406a:	1c42      	adds	r2, r0, #1
 800406c:	d101      	bne.n	8004072 <__sflush_r+0x7a>
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	b903      	cbnz	r3, 8004074 <__sflush_r+0x7c>
 8004072:	6560      	str	r0, [r4, #84]	; 0x54
 8004074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004076:	602f      	str	r7, [r5, #0]
 8004078:	2900      	cmp	r1, #0
 800407a:	d0ca      	beq.n	8004012 <__sflush_r+0x1a>
 800407c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004080:	4299      	cmp	r1, r3
 8004082:	d002      	beq.n	800408a <__sflush_r+0x92>
 8004084:	4628      	mov	r0, r5
 8004086:	f000 f9bf 	bl	8004408 <_free_r>
 800408a:	2000      	movs	r0, #0
 800408c:	6360      	str	r0, [r4, #52]	; 0x34
 800408e:	e7c1      	b.n	8004014 <__sflush_r+0x1c>
 8004090:	6a21      	ldr	r1, [r4, #32]
 8004092:	2301      	movs	r3, #1
 8004094:	4628      	mov	r0, r5
 8004096:	47b0      	blx	r6
 8004098:	1c41      	adds	r1, r0, #1
 800409a:	d1c7      	bne.n	800402c <__sflush_r+0x34>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0c4      	beq.n	800402c <__sflush_r+0x34>
 80040a2:	2b1d      	cmp	r3, #29
 80040a4:	d001      	beq.n	80040aa <__sflush_r+0xb2>
 80040a6:	2b16      	cmp	r3, #22
 80040a8:	d101      	bne.n	80040ae <__sflush_r+0xb6>
 80040aa:	602f      	str	r7, [r5, #0]
 80040ac:	e7b1      	b.n	8004012 <__sflush_r+0x1a>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	e7ad      	b.n	8004014 <__sflush_r+0x1c>
 80040b8:	690f      	ldr	r7, [r1, #16]
 80040ba:	2f00      	cmp	r7, #0
 80040bc:	d0a9      	beq.n	8004012 <__sflush_r+0x1a>
 80040be:	0793      	lsls	r3, r2, #30
 80040c0:	680e      	ldr	r6, [r1, #0]
 80040c2:	bf08      	it	eq
 80040c4:	694b      	ldreq	r3, [r1, #20]
 80040c6:	600f      	str	r7, [r1, #0]
 80040c8:	bf18      	it	ne
 80040ca:	2300      	movne	r3, #0
 80040cc:	eba6 0807 	sub.w	r8, r6, r7
 80040d0:	608b      	str	r3, [r1, #8]
 80040d2:	f1b8 0f00 	cmp.w	r8, #0
 80040d6:	dd9c      	ble.n	8004012 <__sflush_r+0x1a>
 80040d8:	6a21      	ldr	r1, [r4, #32]
 80040da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040dc:	4643      	mov	r3, r8
 80040de:	463a      	mov	r2, r7
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b0      	blx	r6
 80040e4:	2800      	cmp	r0, #0
 80040e6:	dc06      	bgt.n	80040f6 <__sflush_r+0xfe>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e78e      	b.n	8004014 <__sflush_r+0x1c>
 80040f6:	4407      	add	r7, r0
 80040f8:	eba8 0800 	sub.w	r8, r8, r0
 80040fc:	e7e9      	b.n	80040d2 <__sflush_r+0xda>
 80040fe:	bf00      	nop
 8004100:	20400001 	.word	0x20400001

08004104 <_fflush_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	690b      	ldr	r3, [r1, #16]
 8004108:	4605      	mov	r5, r0
 800410a:	460c      	mov	r4, r1
 800410c:	b913      	cbnz	r3, 8004114 <_fflush_r+0x10>
 800410e:	2500      	movs	r5, #0
 8004110:	4628      	mov	r0, r5
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	b118      	cbz	r0, 800411e <_fflush_r+0x1a>
 8004116:	6983      	ldr	r3, [r0, #24]
 8004118:	b90b      	cbnz	r3, 800411e <_fflush_r+0x1a>
 800411a:	f000 f899 	bl	8004250 <__sinit>
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <_fflush_r+0x6c>)
 8004120:	429c      	cmp	r4, r3
 8004122:	d11b      	bne.n	800415c <_fflush_r+0x58>
 8004124:	686c      	ldr	r4, [r5, #4]
 8004126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ef      	beq.n	800410e <_fflush_r+0xa>
 800412e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004130:	07d0      	lsls	r0, r2, #31
 8004132:	d404      	bmi.n	800413e <_fflush_r+0x3a>
 8004134:	0599      	lsls	r1, r3, #22
 8004136:	d402      	bmi.n	800413e <_fflush_r+0x3a>
 8004138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413a:	f000 f94c 	bl	80043d6 <__retarget_lock_acquire_recursive>
 800413e:	4628      	mov	r0, r5
 8004140:	4621      	mov	r1, r4
 8004142:	f7ff ff59 	bl	8003ff8 <__sflush_r>
 8004146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004148:	07da      	lsls	r2, r3, #31
 800414a:	4605      	mov	r5, r0
 800414c:	d4e0      	bmi.n	8004110 <_fflush_r+0xc>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	059b      	lsls	r3, r3, #22
 8004152:	d4dd      	bmi.n	8004110 <_fflush_r+0xc>
 8004154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004156:	f000 f93f 	bl	80043d8 <__retarget_lock_release_recursive>
 800415a:	e7d9      	b.n	8004110 <_fflush_r+0xc>
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <_fflush_r+0x70>)
 800415e:	429c      	cmp	r4, r3
 8004160:	d101      	bne.n	8004166 <_fflush_r+0x62>
 8004162:	68ac      	ldr	r4, [r5, #8]
 8004164:	e7df      	b.n	8004126 <_fflush_r+0x22>
 8004166:	4b04      	ldr	r3, [pc, #16]	; (8004178 <_fflush_r+0x74>)
 8004168:	429c      	cmp	r4, r3
 800416a:	bf08      	it	eq
 800416c:	68ec      	ldreq	r4, [r5, #12]
 800416e:	e7da      	b.n	8004126 <_fflush_r+0x22>
 8004170:	080054a0 	.word	0x080054a0
 8004174:	080054c0 	.word	0x080054c0
 8004178:	08005480 	.word	0x08005480

0800417c <fflush>:
 800417c:	4601      	mov	r1, r0
 800417e:	b920      	cbnz	r0, 800418a <fflush+0xe>
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <fflush+0x18>)
 8004182:	4905      	ldr	r1, [pc, #20]	; (8004198 <fflush+0x1c>)
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f000 b8e1 	b.w	800434c <_fwalk_reent>
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <fflush+0x20>)
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f7ff bfb9 	b.w	8004104 <_fflush_r>
 8004192:	bf00      	nop
 8004194:	080054e0 	.word	0x080054e0
 8004198:	08004105 	.word	0x08004105
 800419c:	20000038 	.word	0x20000038

080041a0 <std>:
 80041a0:	2300      	movs	r3, #0
 80041a2:	b510      	push	{r4, lr}
 80041a4:	4604      	mov	r4, r0
 80041a6:	e9c0 3300 	strd	r3, r3, [r0]
 80041aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041ae:	6083      	str	r3, [r0, #8]
 80041b0:	8181      	strh	r1, [r0, #12]
 80041b2:	6643      	str	r3, [r0, #100]	; 0x64
 80041b4:	81c2      	strh	r2, [r0, #14]
 80041b6:	6183      	str	r3, [r0, #24]
 80041b8:	4619      	mov	r1, r3
 80041ba:	2208      	movs	r2, #8
 80041bc:	305c      	adds	r0, #92	; 0x5c
 80041be:	f000 f91a 	bl	80043f6 <memset>
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <std+0x38>)
 80041c4:	6263      	str	r3, [r4, #36]	; 0x24
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <std+0x3c>)
 80041c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <std+0x40>)
 80041cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <std+0x44>)
 80041d0:	6224      	str	r4, [r4, #32]
 80041d2:	6323      	str	r3, [r4, #48]	; 0x30
 80041d4:	bd10      	pop	{r4, pc}
 80041d6:	bf00      	nop
 80041d8:	08004705 	.word	0x08004705
 80041dc:	08004727 	.word	0x08004727
 80041e0:	0800475f 	.word	0x0800475f
 80041e4:	08004783 	.word	0x08004783

080041e8 <_cleanup_r>:
 80041e8:	4901      	ldr	r1, [pc, #4]	; (80041f0 <_cleanup_r+0x8>)
 80041ea:	f000 b8af 	b.w	800434c <_fwalk_reent>
 80041ee:	bf00      	nop
 80041f0:	08004105 	.word	0x08004105

080041f4 <__sfmoreglue>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	2268      	movs	r2, #104	; 0x68
 80041f8:	1e4d      	subs	r5, r1, #1
 80041fa:	4355      	muls	r5, r2
 80041fc:	460e      	mov	r6, r1
 80041fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004202:	f000 f96d 	bl	80044e0 <_malloc_r>
 8004206:	4604      	mov	r4, r0
 8004208:	b140      	cbz	r0, 800421c <__sfmoreglue+0x28>
 800420a:	2100      	movs	r1, #0
 800420c:	e9c0 1600 	strd	r1, r6, [r0]
 8004210:	300c      	adds	r0, #12
 8004212:	60a0      	str	r0, [r4, #8]
 8004214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004218:	f000 f8ed 	bl	80043f6 <memset>
 800421c:	4620      	mov	r0, r4
 800421e:	bd70      	pop	{r4, r5, r6, pc}

08004220 <__sfp_lock_acquire>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__sfp_lock_acquire+0x8>)
 8004222:	f000 b8d8 	b.w	80043d6 <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	20000755 	.word	0x20000755

0800422c <__sfp_lock_release>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__sfp_lock_release+0x8>)
 800422e:	f000 b8d3 	b.w	80043d8 <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	20000755 	.word	0x20000755

08004238 <__sinit_lock_acquire>:
 8004238:	4801      	ldr	r0, [pc, #4]	; (8004240 <__sinit_lock_acquire+0x8>)
 800423a:	f000 b8cc 	b.w	80043d6 <__retarget_lock_acquire_recursive>
 800423e:	bf00      	nop
 8004240:	20000756 	.word	0x20000756

08004244 <__sinit_lock_release>:
 8004244:	4801      	ldr	r0, [pc, #4]	; (800424c <__sinit_lock_release+0x8>)
 8004246:	f000 b8c7 	b.w	80043d8 <__retarget_lock_release_recursive>
 800424a:	bf00      	nop
 800424c:	20000756 	.word	0x20000756

08004250 <__sinit>:
 8004250:	b510      	push	{r4, lr}
 8004252:	4604      	mov	r4, r0
 8004254:	f7ff fff0 	bl	8004238 <__sinit_lock_acquire>
 8004258:	69a3      	ldr	r3, [r4, #24]
 800425a:	b11b      	cbz	r3, 8004264 <__sinit+0x14>
 800425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004260:	f7ff bff0 	b.w	8004244 <__sinit_lock_release>
 8004264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004268:	6523      	str	r3, [r4, #80]	; 0x50
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <__sinit+0x68>)
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <__sinit+0x6c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	62a2      	str	r2, [r4, #40]	; 0x28
 8004272:	42a3      	cmp	r3, r4
 8004274:	bf04      	itt	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	61a3      	streq	r3, [r4, #24]
 800427a:	4620      	mov	r0, r4
 800427c:	f000 f820 	bl	80042c0 <__sfp>
 8004280:	6060      	str	r0, [r4, #4]
 8004282:	4620      	mov	r0, r4
 8004284:	f000 f81c 	bl	80042c0 <__sfp>
 8004288:	60a0      	str	r0, [r4, #8]
 800428a:	4620      	mov	r0, r4
 800428c:	f000 f818 	bl	80042c0 <__sfp>
 8004290:	2200      	movs	r2, #0
 8004292:	60e0      	str	r0, [r4, #12]
 8004294:	2104      	movs	r1, #4
 8004296:	6860      	ldr	r0, [r4, #4]
 8004298:	f7ff ff82 	bl	80041a0 <std>
 800429c:	68a0      	ldr	r0, [r4, #8]
 800429e:	2201      	movs	r2, #1
 80042a0:	2109      	movs	r1, #9
 80042a2:	f7ff ff7d 	bl	80041a0 <std>
 80042a6:	68e0      	ldr	r0, [r4, #12]
 80042a8:	2202      	movs	r2, #2
 80042aa:	2112      	movs	r1, #18
 80042ac:	f7ff ff78 	bl	80041a0 <std>
 80042b0:	2301      	movs	r3, #1
 80042b2:	61a3      	str	r3, [r4, #24]
 80042b4:	e7d2      	b.n	800425c <__sinit+0xc>
 80042b6:	bf00      	nop
 80042b8:	080054e0 	.word	0x080054e0
 80042bc:	080041e9 	.word	0x080041e9

080042c0 <__sfp>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	4607      	mov	r7, r0
 80042c4:	f7ff ffac 	bl	8004220 <__sfp_lock_acquire>
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <__sfp+0x84>)
 80042ca:	681e      	ldr	r6, [r3, #0]
 80042cc:	69b3      	ldr	r3, [r6, #24]
 80042ce:	b913      	cbnz	r3, 80042d6 <__sfp+0x16>
 80042d0:	4630      	mov	r0, r6
 80042d2:	f7ff ffbd 	bl	8004250 <__sinit>
 80042d6:	3648      	adds	r6, #72	; 0x48
 80042d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042dc:	3b01      	subs	r3, #1
 80042de:	d503      	bpl.n	80042e8 <__sfp+0x28>
 80042e0:	6833      	ldr	r3, [r6, #0]
 80042e2:	b30b      	cbz	r3, 8004328 <__sfp+0x68>
 80042e4:	6836      	ldr	r6, [r6, #0]
 80042e6:	e7f7      	b.n	80042d8 <__sfp+0x18>
 80042e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042ec:	b9d5      	cbnz	r5, 8004324 <__sfp+0x64>
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <__sfp+0x88>)
 80042f0:	60e3      	str	r3, [r4, #12]
 80042f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042f6:	6665      	str	r5, [r4, #100]	; 0x64
 80042f8:	f000 f86c 	bl	80043d4 <__retarget_lock_init_recursive>
 80042fc:	f7ff ff96 	bl	800422c <__sfp_lock_release>
 8004300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004308:	6025      	str	r5, [r4, #0]
 800430a:	61a5      	str	r5, [r4, #24]
 800430c:	2208      	movs	r2, #8
 800430e:	4629      	mov	r1, r5
 8004310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004314:	f000 f86f 	bl	80043f6 <memset>
 8004318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800431c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004320:	4620      	mov	r0, r4
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004324:	3468      	adds	r4, #104	; 0x68
 8004326:	e7d9      	b.n	80042dc <__sfp+0x1c>
 8004328:	2104      	movs	r1, #4
 800432a:	4638      	mov	r0, r7
 800432c:	f7ff ff62 	bl	80041f4 <__sfmoreglue>
 8004330:	4604      	mov	r4, r0
 8004332:	6030      	str	r0, [r6, #0]
 8004334:	2800      	cmp	r0, #0
 8004336:	d1d5      	bne.n	80042e4 <__sfp+0x24>
 8004338:	f7ff ff78 	bl	800422c <__sfp_lock_release>
 800433c:	230c      	movs	r3, #12
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	e7ee      	b.n	8004320 <__sfp+0x60>
 8004342:	bf00      	nop
 8004344:	080054e0 	.word	0x080054e0
 8004348:	ffff0001 	.word	0xffff0001

0800434c <_fwalk_reent>:
 800434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004350:	4606      	mov	r6, r0
 8004352:	4688      	mov	r8, r1
 8004354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004358:	2700      	movs	r7, #0
 800435a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800435e:	f1b9 0901 	subs.w	r9, r9, #1
 8004362:	d505      	bpl.n	8004370 <_fwalk_reent+0x24>
 8004364:	6824      	ldr	r4, [r4, #0]
 8004366:	2c00      	cmp	r4, #0
 8004368:	d1f7      	bne.n	800435a <_fwalk_reent+0xe>
 800436a:	4638      	mov	r0, r7
 800436c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004370:	89ab      	ldrh	r3, [r5, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d907      	bls.n	8004386 <_fwalk_reent+0x3a>
 8004376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800437a:	3301      	adds	r3, #1
 800437c:	d003      	beq.n	8004386 <_fwalk_reent+0x3a>
 800437e:	4629      	mov	r1, r5
 8004380:	4630      	mov	r0, r6
 8004382:	47c0      	blx	r8
 8004384:	4307      	orrs	r7, r0
 8004386:	3568      	adds	r5, #104	; 0x68
 8004388:	e7e9      	b.n	800435e <_fwalk_reent+0x12>
	...

0800438c <__libc_init_array>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4d0d      	ldr	r5, [pc, #52]	; (80043c4 <__libc_init_array+0x38>)
 8004390:	4c0d      	ldr	r4, [pc, #52]	; (80043c8 <__libc_init_array+0x3c>)
 8004392:	1b64      	subs	r4, r4, r5
 8004394:	10a4      	asrs	r4, r4, #2
 8004396:	2600      	movs	r6, #0
 8004398:	42a6      	cmp	r6, r4
 800439a:	d109      	bne.n	80043b0 <__libc_init_array+0x24>
 800439c:	4d0b      	ldr	r5, [pc, #44]	; (80043cc <__libc_init_array+0x40>)
 800439e:	4c0c      	ldr	r4, [pc, #48]	; (80043d0 <__libc_init_array+0x44>)
 80043a0:	f000 fe7c 	bl	800509c <_init>
 80043a4:	1b64      	subs	r4, r4, r5
 80043a6:	10a4      	asrs	r4, r4, #2
 80043a8:	2600      	movs	r6, #0
 80043aa:	42a6      	cmp	r6, r4
 80043ac:	d105      	bne.n	80043ba <__libc_init_array+0x2e>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b4:	4798      	blx	r3
 80043b6:	3601      	adds	r6, #1
 80043b8:	e7ee      	b.n	8004398 <__libc_init_array+0xc>
 80043ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80043be:	4798      	blx	r3
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7f2      	b.n	80043aa <__libc_init_array+0x1e>
 80043c4:	08005520 	.word	0x08005520
 80043c8:	08005520 	.word	0x08005520
 80043cc:	08005520 	.word	0x08005520
 80043d0:	08005524 	.word	0x08005524

080043d4 <__retarget_lock_init_recursive>:
 80043d4:	4770      	bx	lr

080043d6 <__retarget_lock_acquire_recursive>:
 80043d6:	4770      	bx	lr

080043d8 <__retarget_lock_release_recursive>:
 80043d8:	4770      	bx	lr

080043da <memcpy>:
 80043da:	440a      	add	r2, r1
 80043dc:	4291      	cmp	r1, r2
 80043de:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e2:	d100      	bne.n	80043e6 <memcpy+0xc>
 80043e4:	4770      	bx	lr
 80043e6:	b510      	push	{r4, lr}
 80043e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f0:	4291      	cmp	r1, r2
 80043f2:	d1f9      	bne.n	80043e8 <memcpy+0xe>
 80043f4:	bd10      	pop	{r4, pc}

080043f6 <memset>:
 80043f6:	4402      	add	r2, r0
 80043f8:	4603      	mov	r3, r0
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d100      	bne.n	8004400 <memset+0xa>
 80043fe:	4770      	bx	lr
 8004400:	f803 1b01 	strb.w	r1, [r3], #1
 8004404:	e7f9      	b.n	80043fa <memset+0x4>
	...

08004408 <_free_r>:
 8004408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800440a:	2900      	cmp	r1, #0
 800440c:	d044      	beq.n	8004498 <_free_r+0x90>
 800440e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f1a1 0404 	sub.w	r4, r1, #4
 800441a:	bfb8      	it	lt
 800441c:	18e4      	addlt	r4, r4, r3
 800441e:	f000 fb0f 	bl	8004a40 <__malloc_lock>
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <_free_r+0x94>)
 8004424:	9801      	ldr	r0, [sp, #4]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	b933      	cbnz	r3, 8004438 <_free_r+0x30>
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	b003      	add	sp, #12
 8004430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004434:	f000 bb0a 	b.w	8004a4c <__malloc_unlock>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d908      	bls.n	800444e <_free_r+0x46>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	1961      	adds	r1, r4, r5
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1949      	addeq	r1, r1, r5
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	e7ed      	b.n	800442a <_free_r+0x22>
 800444e:	461a      	mov	r2, r3
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b10b      	cbz	r3, 8004458 <_free_r+0x50>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d9fa      	bls.n	800444e <_free_r+0x46>
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	1855      	adds	r5, r2, r1
 800445c:	42a5      	cmp	r5, r4
 800445e:	d10b      	bne.n	8004478 <_free_r+0x70>
 8004460:	6824      	ldr	r4, [r4, #0]
 8004462:	4421      	add	r1, r4
 8004464:	1854      	adds	r4, r2, r1
 8004466:	42a3      	cmp	r3, r4
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	d1e0      	bne.n	800442e <_free_r+0x26>
 800446c:	681c      	ldr	r4, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	6053      	str	r3, [r2, #4]
 8004472:	4421      	add	r1, r4
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	e7da      	b.n	800442e <_free_r+0x26>
 8004478:	d902      	bls.n	8004480 <_free_r+0x78>
 800447a:	230c      	movs	r3, #12
 800447c:	6003      	str	r3, [r0, #0]
 800447e:	e7d6      	b.n	800442e <_free_r+0x26>
 8004480:	6825      	ldr	r5, [r4, #0]
 8004482:	1961      	adds	r1, r4, r5
 8004484:	428b      	cmp	r3, r1
 8004486:	bf04      	itt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	bf04      	itt	eq
 8004490:	1949      	addeq	r1, r1, r5
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	6054      	str	r4, [r2, #4]
 8004496:	e7ca      	b.n	800442e <_free_r+0x26>
 8004498:	b003      	add	sp, #12
 800449a:	bd30      	pop	{r4, r5, pc}
 800449c:	20000758 	.word	0x20000758

080044a0 <sbrk_aligned>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4e0e      	ldr	r6, [pc, #56]	; (80044dc <sbrk_aligned+0x3c>)
 80044a4:	460c      	mov	r4, r1
 80044a6:	6831      	ldr	r1, [r6, #0]
 80044a8:	4605      	mov	r5, r0
 80044aa:	b911      	cbnz	r1, 80044b2 <sbrk_aligned+0x12>
 80044ac:	f000 f91a 	bl	80046e4 <_sbrk_r>
 80044b0:	6030      	str	r0, [r6, #0]
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 f915 	bl	80046e4 <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d00a      	beq.n	80044d4 <sbrk_aligned+0x34>
 80044be:	1cc4      	adds	r4, r0, #3
 80044c0:	f024 0403 	bic.w	r4, r4, #3
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d007      	beq.n	80044d8 <sbrk_aligned+0x38>
 80044c8:	1a21      	subs	r1, r4, r0
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f90a 	bl	80046e4 <_sbrk_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d101      	bne.n	80044d8 <sbrk_aligned+0x38>
 80044d4:	f04f 34ff 	mov.w	r4, #4294967295
 80044d8:	4620      	mov	r0, r4
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	2000075c 	.word	0x2000075c

080044e0 <_malloc_r>:
 80044e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	1ccd      	adds	r5, r1, #3
 80044e6:	f025 0503 	bic.w	r5, r5, #3
 80044ea:	3508      	adds	r5, #8
 80044ec:	2d0c      	cmp	r5, #12
 80044ee:	bf38      	it	cc
 80044f0:	250c      	movcc	r5, #12
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	4607      	mov	r7, r0
 80044f6:	db01      	blt.n	80044fc <_malloc_r+0x1c>
 80044f8:	42a9      	cmp	r1, r5
 80044fa:	d905      	bls.n	8004508 <_malloc_r+0x28>
 80044fc:	230c      	movs	r3, #12
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	2600      	movs	r6, #0
 8004502:	4630      	mov	r0, r6
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004508:	4e2e      	ldr	r6, [pc, #184]	; (80045c4 <_malloc_r+0xe4>)
 800450a:	f000 fa99 	bl	8004a40 <__malloc_lock>
 800450e:	6833      	ldr	r3, [r6, #0]
 8004510:	461c      	mov	r4, r3
 8004512:	bb34      	cbnz	r4, 8004562 <_malloc_r+0x82>
 8004514:	4629      	mov	r1, r5
 8004516:	4638      	mov	r0, r7
 8004518:	f7ff ffc2 	bl	80044a0 <sbrk_aligned>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	4604      	mov	r4, r0
 8004520:	d14d      	bne.n	80045be <_malloc_r+0xde>
 8004522:	6834      	ldr	r4, [r6, #0]
 8004524:	4626      	mov	r6, r4
 8004526:	2e00      	cmp	r6, #0
 8004528:	d140      	bne.n	80045ac <_malloc_r+0xcc>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4631      	mov	r1, r6
 800452e:	4638      	mov	r0, r7
 8004530:	eb04 0803 	add.w	r8, r4, r3
 8004534:	f000 f8d6 	bl	80046e4 <_sbrk_r>
 8004538:	4580      	cmp	r8, r0
 800453a:	d13a      	bne.n	80045b2 <_malloc_r+0xd2>
 800453c:	6821      	ldr	r1, [r4, #0]
 800453e:	3503      	adds	r5, #3
 8004540:	1a6d      	subs	r5, r5, r1
 8004542:	f025 0503 	bic.w	r5, r5, #3
 8004546:	3508      	adds	r5, #8
 8004548:	2d0c      	cmp	r5, #12
 800454a:	bf38      	it	cc
 800454c:	250c      	movcc	r5, #12
 800454e:	4629      	mov	r1, r5
 8004550:	4638      	mov	r0, r7
 8004552:	f7ff ffa5 	bl	80044a0 <sbrk_aligned>
 8004556:	3001      	adds	r0, #1
 8004558:	d02b      	beq.n	80045b2 <_malloc_r+0xd2>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	442b      	add	r3, r5
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	e00e      	b.n	8004580 <_malloc_r+0xa0>
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	1b52      	subs	r2, r2, r5
 8004566:	d41e      	bmi.n	80045a6 <_malloc_r+0xc6>
 8004568:	2a0b      	cmp	r2, #11
 800456a:	d916      	bls.n	800459a <_malloc_r+0xba>
 800456c:	1961      	adds	r1, r4, r5
 800456e:	42a3      	cmp	r3, r4
 8004570:	6025      	str	r5, [r4, #0]
 8004572:	bf18      	it	ne
 8004574:	6059      	strne	r1, [r3, #4]
 8004576:	6863      	ldr	r3, [r4, #4]
 8004578:	bf08      	it	eq
 800457a:	6031      	streq	r1, [r6, #0]
 800457c:	5162      	str	r2, [r4, r5]
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	4638      	mov	r0, r7
 8004582:	f104 060b 	add.w	r6, r4, #11
 8004586:	f000 fa61 	bl	8004a4c <__malloc_unlock>
 800458a:	f026 0607 	bic.w	r6, r6, #7
 800458e:	1d23      	adds	r3, r4, #4
 8004590:	1af2      	subs	r2, r6, r3
 8004592:	d0b6      	beq.n	8004502 <_malloc_r+0x22>
 8004594:	1b9b      	subs	r3, r3, r6
 8004596:	50a3      	str	r3, [r4, r2]
 8004598:	e7b3      	b.n	8004502 <_malloc_r+0x22>
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	42a3      	cmp	r3, r4
 800459e:	bf0c      	ite	eq
 80045a0:	6032      	streq	r2, [r6, #0]
 80045a2:	605a      	strne	r2, [r3, #4]
 80045a4:	e7ec      	b.n	8004580 <_malloc_r+0xa0>
 80045a6:	4623      	mov	r3, r4
 80045a8:	6864      	ldr	r4, [r4, #4]
 80045aa:	e7b2      	b.n	8004512 <_malloc_r+0x32>
 80045ac:	4634      	mov	r4, r6
 80045ae:	6876      	ldr	r6, [r6, #4]
 80045b0:	e7b9      	b.n	8004526 <_malloc_r+0x46>
 80045b2:	230c      	movs	r3, #12
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4638      	mov	r0, r7
 80045b8:	f000 fa48 	bl	8004a4c <__malloc_unlock>
 80045bc:	e7a1      	b.n	8004502 <_malloc_r+0x22>
 80045be:	6025      	str	r5, [r4, #0]
 80045c0:	e7de      	b.n	8004580 <_malloc_r+0xa0>
 80045c2:	bf00      	nop
 80045c4:	20000758 	.word	0x20000758

080045c8 <iprintf>:
 80045c8:	b40f      	push	{r0, r1, r2, r3}
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <iprintf+0x2c>)
 80045cc:	b513      	push	{r0, r1, r4, lr}
 80045ce:	681c      	ldr	r4, [r3, #0]
 80045d0:	b124      	cbz	r4, 80045dc <iprintf+0x14>
 80045d2:	69a3      	ldr	r3, [r4, #24]
 80045d4:	b913      	cbnz	r3, 80045dc <iprintf+0x14>
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff fe3a 	bl	8004250 <__sinit>
 80045dc:	ab05      	add	r3, sp, #20
 80045de:	9a04      	ldr	r2, [sp, #16]
 80045e0:	68a1      	ldr	r1, [r4, #8]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	4620      	mov	r0, r4
 80045e6:	f000 fa61 	bl	8004aac <_vfiprintf_r>
 80045ea:	b002      	add	sp, #8
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	b004      	add	sp, #16
 80045f2:	4770      	bx	lr
 80045f4:	20000038 	.word	0x20000038

080045f8 <_puts_r>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	4605      	mov	r5, r0
 80045fe:	b118      	cbz	r0, 8004608 <_puts_r+0x10>
 8004600:	6983      	ldr	r3, [r0, #24]
 8004602:	b90b      	cbnz	r3, 8004608 <_puts_r+0x10>
 8004604:	f7ff fe24 	bl	8004250 <__sinit>
 8004608:	69ab      	ldr	r3, [r5, #24]
 800460a:	68ac      	ldr	r4, [r5, #8]
 800460c:	b913      	cbnz	r3, 8004614 <_puts_r+0x1c>
 800460e:	4628      	mov	r0, r5
 8004610:	f7ff fe1e 	bl	8004250 <__sinit>
 8004614:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <_puts_r+0xd0>)
 8004616:	429c      	cmp	r4, r3
 8004618:	d120      	bne.n	800465c <_puts_r+0x64>
 800461a:	686c      	ldr	r4, [r5, #4]
 800461c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800461e:	07db      	lsls	r3, r3, #31
 8004620:	d405      	bmi.n	800462e <_puts_r+0x36>
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	0598      	lsls	r0, r3, #22
 8004626:	d402      	bmi.n	800462e <_puts_r+0x36>
 8004628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800462a:	f7ff fed4 	bl	80043d6 <__retarget_lock_acquire_recursive>
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	0719      	lsls	r1, r3, #28
 8004632:	d51d      	bpl.n	8004670 <_puts_r+0x78>
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	b1db      	cbz	r3, 8004670 <_puts_r+0x78>
 8004638:	3e01      	subs	r6, #1
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004640:	3b01      	subs	r3, #1
 8004642:	60a3      	str	r3, [r4, #8]
 8004644:	bb39      	cbnz	r1, 8004696 <_puts_r+0x9e>
 8004646:	2b00      	cmp	r3, #0
 8004648:	da38      	bge.n	80046bc <_puts_r+0xc4>
 800464a:	4622      	mov	r2, r4
 800464c:	210a      	movs	r1, #10
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f89c 	bl	800478c <__swbuf_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d011      	beq.n	800467c <_puts_r+0x84>
 8004658:	250a      	movs	r5, #10
 800465a:	e011      	b.n	8004680 <_puts_r+0x88>
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <_puts_r+0xd4>)
 800465e:	429c      	cmp	r4, r3
 8004660:	d101      	bne.n	8004666 <_puts_r+0x6e>
 8004662:	68ac      	ldr	r4, [r5, #8]
 8004664:	e7da      	b.n	800461c <_puts_r+0x24>
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <_puts_r+0xd8>)
 8004668:	429c      	cmp	r4, r3
 800466a:	bf08      	it	eq
 800466c:	68ec      	ldreq	r4, [r5, #12]
 800466e:	e7d5      	b.n	800461c <_puts_r+0x24>
 8004670:	4621      	mov	r1, r4
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f8ee 	bl	8004854 <__swsetup_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	d0dd      	beq.n	8004638 <_puts_r+0x40>
 800467c:	f04f 35ff 	mov.w	r5, #4294967295
 8004680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004682:	07da      	lsls	r2, r3, #31
 8004684:	d405      	bmi.n	8004692 <_puts_r+0x9a>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	059b      	lsls	r3, r3, #22
 800468a:	d402      	bmi.n	8004692 <_puts_r+0x9a>
 800468c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800468e:	f7ff fea3 	bl	80043d8 <__retarget_lock_release_recursive>
 8004692:	4628      	mov	r0, r5
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	2b00      	cmp	r3, #0
 8004698:	da04      	bge.n	80046a4 <_puts_r+0xac>
 800469a:	69a2      	ldr	r2, [r4, #24]
 800469c:	429a      	cmp	r2, r3
 800469e:	dc06      	bgt.n	80046ae <_puts_r+0xb6>
 80046a0:	290a      	cmp	r1, #10
 80046a2:	d004      	beq.n	80046ae <_puts_r+0xb6>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	7019      	strb	r1, [r3, #0]
 80046ac:	e7c5      	b.n	800463a <_puts_r+0x42>
 80046ae:	4622      	mov	r2, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f86b 	bl	800478c <__swbuf_r>
 80046b6:	3001      	adds	r0, #1
 80046b8:	d1bf      	bne.n	800463a <_puts_r+0x42>
 80046ba:	e7df      	b.n	800467c <_puts_r+0x84>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	250a      	movs	r5, #10
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	6022      	str	r2, [r4, #0]
 80046c4:	701d      	strb	r5, [r3, #0]
 80046c6:	e7db      	b.n	8004680 <_puts_r+0x88>
 80046c8:	080054a0 	.word	0x080054a0
 80046cc:	080054c0 	.word	0x080054c0
 80046d0:	08005480 	.word	0x08005480

080046d4 <puts>:
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <puts+0xc>)
 80046d6:	4601      	mov	r1, r0
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	f7ff bf8d 	b.w	80045f8 <_puts_r>
 80046de:	bf00      	nop
 80046e0:	20000038 	.word	0x20000038

080046e4 <_sbrk_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4d06      	ldr	r5, [pc, #24]	; (8004700 <_sbrk_r+0x1c>)
 80046e8:	2300      	movs	r3, #0
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	f7fd f8f2 	bl	80018d8 <_sbrk>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d102      	bne.n	80046fe <_sbrk_r+0x1a>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	b103      	cbz	r3, 80046fe <_sbrk_r+0x1a>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	20000760 	.word	0x20000760

08004704 <__sread>:
 8004704:	b510      	push	{r4, lr}
 8004706:	460c      	mov	r4, r1
 8004708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470c:	f000 fc92 	bl	8005034 <_read_r>
 8004710:	2800      	cmp	r0, #0
 8004712:	bfab      	itete	ge
 8004714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004716:	89a3      	ldrhlt	r3, [r4, #12]
 8004718:	181b      	addge	r3, r3, r0
 800471a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800471e:	bfac      	ite	ge
 8004720:	6563      	strge	r3, [r4, #84]	; 0x54
 8004722:	81a3      	strhlt	r3, [r4, #12]
 8004724:	bd10      	pop	{r4, pc}

08004726 <__swrite>:
 8004726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472a:	461f      	mov	r7, r3
 800472c:	898b      	ldrh	r3, [r1, #12]
 800472e:	05db      	lsls	r3, r3, #23
 8004730:	4605      	mov	r5, r0
 8004732:	460c      	mov	r4, r1
 8004734:	4616      	mov	r6, r2
 8004736:	d505      	bpl.n	8004744 <__swrite+0x1e>
 8004738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473c:	2302      	movs	r3, #2
 800473e:	2200      	movs	r2, #0
 8004740:	f000 f906 	bl	8004950 <_lseek_r>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800474a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800474e:	81a3      	strh	r3, [r4, #12]
 8004750:	4632      	mov	r2, r6
 8004752:	463b      	mov	r3, r7
 8004754:	4628      	mov	r0, r5
 8004756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	f000 b869 	b.w	8004830 <_write_r>

0800475e <__sseek>:
 800475e:	b510      	push	{r4, lr}
 8004760:	460c      	mov	r4, r1
 8004762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004766:	f000 f8f3 	bl	8004950 <_lseek_r>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	bf15      	itete	ne
 8004770:	6560      	strne	r0, [r4, #84]	; 0x54
 8004772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800477a:	81a3      	strheq	r3, [r4, #12]
 800477c:	bf18      	it	ne
 800477e:	81a3      	strhne	r3, [r4, #12]
 8004780:	bd10      	pop	{r4, pc}

08004782 <__sclose>:
 8004782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004786:	f000 b8d3 	b.w	8004930 <_close_r>
	...

0800478c <__swbuf_r>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	460e      	mov	r6, r1
 8004790:	4614      	mov	r4, r2
 8004792:	4605      	mov	r5, r0
 8004794:	b118      	cbz	r0, 800479e <__swbuf_r+0x12>
 8004796:	6983      	ldr	r3, [r0, #24]
 8004798:	b90b      	cbnz	r3, 800479e <__swbuf_r+0x12>
 800479a:	f7ff fd59 	bl	8004250 <__sinit>
 800479e:	4b21      	ldr	r3, [pc, #132]	; (8004824 <__swbuf_r+0x98>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	d12b      	bne.n	80047fc <__swbuf_r+0x70>
 80047a4:	686c      	ldr	r4, [r5, #4]
 80047a6:	69a3      	ldr	r3, [r4, #24]
 80047a8:	60a3      	str	r3, [r4, #8]
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	071a      	lsls	r2, r3, #28
 80047ae:	d52f      	bpl.n	8004810 <__swbuf_r+0x84>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	b36b      	cbz	r3, 8004810 <__swbuf_r+0x84>
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	1ac0      	subs	r0, r0, r3
 80047ba:	6963      	ldr	r3, [r4, #20]
 80047bc:	b2f6      	uxtb	r6, r6
 80047be:	4283      	cmp	r3, r0
 80047c0:	4637      	mov	r7, r6
 80047c2:	dc04      	bgt.n	80047ce <__swbuf_r+0x42>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	f7ff fc9c 	bl	8004104 <_fflush_r>
 80047cc:	bb30      	cbnz	r0, 800481c <__swbuf_r+0x90>
 80047ce:	68a3      	ldr	r3, [r4, #8]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60a3      	str	r3, [r4, #8]
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	6022      	str	r2, [r4, #0]
 80047da:	701e      	strb	r6, [r3, #0]
 80047dc:	6963      	ldr	r3, [r4, #20]
 80047de:	3001      	adds	r0, #1
 80047e0:	4283      	cmp	r3, r0
 80047e2:	d004      	beq.n	80047ee <__swbuf_r+0x62>
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	07db      	lsls	r3, r3, #31
 80047e8:	d506      	bpl.n	80047f8 <__swbuf_r+0x6c>
 80047ea:	2e0a      	cmp	r6, #10
 80047ec:	d104      	bne.n	80047f8 <__swbuf_r+0x6c>
 80047ee:	4621      	mov	r1, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	f7ff fc87 	bl	8004104 <_fflush_r>
 80047f6:	b988      	cbnz	r0, 800481c <__swbuf_r+0x90>
 80047f8:	4638      	mov	r0, r7
 80047fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <__swbuf_r+0x9c>)
 80047fe:	429c      	cmp	r4, r3
 8004800:	d101      	bne.n	8004806 <__swbuf_r+0x7a>
 8004802:	68ac      	ldr	r4, [r5, #8]
 8004804:	e7cf      	b.n	80047a6 <__swbuf_r+0x1a>
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <__swbuf_r+0xa0>)
 8004808:	429c      	cmp	r4, r3
 800480a:	bf08      	it	eq
 800480c:	68ec      	ldreq	r4, [r5, #12]
 800480e:	e7ca      	b.n	80047a6 <__swbuf_r+0x1a>
 8004810:	4621      	mov	r1, r4
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f81e 	bl	8004854 <__swsetup_r>
 8004818:	2800      	cmp	r0, #0
 800481a:	d0cb      	beq.n	80047b4 <__swbuf_r+0x28>
 800481c:	f04f 37ff 	mov.w	r7, #4294967295
 8004820:	e7ea      	b.n	80047f8 <__swbuf_r+0x6c>
 8004822:	bf00      	nop
 8004824:	080054a0 	.word	0x080054a0
 8004828:	080054c0 	.word	0x080054c0
 800482c:	08005480 	.word	0x08005480

08004830 <_write_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d07      	ldr	r5, [pc, #28]	; (8004850 <_write_r+0x20>)
 8004834:	4604      	mov	r4, r0
 8004836:	4608      	mov	r0, r1
 8004838:	4611      	mov	r1, r2
 800483a:	2200      	movs	r2, #0
 800483c:	602a      	str	r2, [r5, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	f7fd f831 	bl	80018a6 <_write>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_write_r+0x1e>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_write_r+0x1e>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	20000760 	.word	0x20000760

08004854 <__swsetup_r>:
 8004854:	4b32      	ldr	r3, [pc, #200]	; (8004920 <__swsetup_r+0xcc>)
 8004856:	b570      	push	{r4, r5, r6, lr}
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	4606      	mov	r6, r0
 800485c:	460c      	mov	r4, r1
 800485e:	b125      	cbz	r5, 800486a <__swsetup_r+0x16>
 8004860:	69ab      	ldr	r3, [r5, #24]
 8004862:	b913      	cbnz	r3, 800486a <__swsetup_r+0x16>
 8004864:	4628      	mov	r0, r5
 8004866:	f7ff fcf3 	bl	8004250 <__sinit>
 800486a:	4b2e      	ldr	r3, [pc, #184]	; (8004924 <__swsetup_r+0xd0>)
 800486c:	429c      	cmp	r4, r3
 800486e:	d10f      	bne.n	8004890 <__swsetup_r+0x3c>
 8004870:	686c      	ldr	r4, [r5, #4]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004878:	0719      	lsls	r1, r3, #28
 800487a:	d42c      	bmi.n	80048d6 <__swsetup_r+0x82>
 800487c:	06dd      	lsls	r5, r3, #27
 800487e:	d411      	bmi.n	80048a4 <__swsetup_r+0x50>
 8004880:	2309      	movs	r3, #9
 8004882:	6033      	str	r3, [r6, #0]
 8004884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	f04f 30ff 	mov.w	r0, #4294967295
 800488e:	e03e      	b.n	800490e <__swsetup_r+0xba>
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <__swsetup_r+0xd4>)
 8004892:	429c      	cmp	r4, r3
 8004894:	d101      	bne.n	800489a <__swsetup_r+0x46>
 8004896:	68ac      	ldr	r4, [r5, #8]
 8004898:	e7eb      	b.n	8004872 <__swsetup_r+0x1e>
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <__swsetup_r+0xd8>)
 800489c:	429c      	cmp	r4, r3
 800489e:	bf08      	it	eq
 80048a0:	68ec      	ldreq	r4, [r5, #12]
 80048a2:	e7e6      	b.n	8004872 <__swsetup_r+0x1e>
 80048a4:	0758      	lsls	r0, r3, #29
 80048a6:	d512      	bpl.n	80048ce <__swsetup_r+0x7a>
 80048a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048aa:	b141      	cbz	r1, 80048be <__swsetup_r+0x6a>
 80048ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048b0:	4299      	cmp	r1, r3
 80048b2:	d002      	beq.n	80048ba <__swsetup_r+0x66>
 80048b4:	4630      	mov	r0, r6
 80048b6:	f7ff fda7 	bl	8004408 <_free_r>
 80048ba:	2300      	movs	r3, #0
 80048bc:	6363      	str	r3, [r4, #52]	; 0x34
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048c4:	81a3      	strh	r3, [r4, #12]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	f043 0308 	orr.w	r3, r3, #8
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	b94b      	cbnz	r3, 80048ee <__swsetup_r+0x9a>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d003      	beq.n	80048ee <__swsetup_r+0x9a>
 80048e6:	4621      	mov	r1, r4
 80048e8:	4630      	mov	r0, r6
 80048ea:	f000 f869 	bl	80049c0 <__smakebuf_r>
 80048ee:	89a0      	ldrh	r0, [r4, #12]
 80048f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048f4:	f010 0301 	ands.w	r3, r0, #1
 80048f8:	d00a      	beq.n	8004910 <__swsetup_r+0xbc>
 80048fa:	2300      	movs	r3, #0
 80048fc:	60a3      	str	r3, [r4, #8]
 80048fe:	6963      	ldr	r3, [r4, #20]
 8004900:	425b      	negs	r3, r3
 8004902:	61a3      	str	r3, [r4, #24]
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	b943      	cbnz	r3, 800491a <__swsetup_r+0xc6>
 8004908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800490c:	d1ba      	bne.n	8004884 <__swsetup_r+0x30>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	0781      	lsls	r1, r0, #30
 8004912:	bf58      	it	pl
 8004914:	6963      	ldrpl	r3, [r4, #20]
 8004916:	60a3      	str	r3, [r4, #8]
 8004918:	e7f4      	b.n	8004904 <__swsetup_r+0xb0>
 800491a:	2000      	movs	r0, #0
 800491c:	e7f7      	b.n	800490e <__swsetup_r+0xba>
 800491e:	bf00      	nop
 8004920:	20000038 	.word	0x20000038
 8004924:	080054a0 	.word	0x080054a0
 8004928:	080054c0 	.word	0x080054c0
 800492c:	08005480 	.word	0x08005480

08004930 <_close_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4d06      	ldr	r5, [pc, #24]	; (800494c <_close_r+0x1c>)
 8004934:	2300      	movs	r3, #0
 8004936:	4604      	mov	r4, r0
 8004938:	4608      	mov	r0, r1
 800493a:	602b      	str	r3, [r5, #0]
 800493c:	f7fc ffc0 	bl	80018c0 <_close>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_close_r+0x1a>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_close_r+0x1a>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000760 	.word	0x20000760

08004950 <_lseek_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4d07      	ldr	r5, [pc, #28]	; (8004970 <_lseek_r+0x20>)
 8004954:	4604      	mov	r4, r0
 8004956:	4608      	mov	r0, r1
 8004958:	4611      	mov	r1, r2
 800495a:	2200      	movs	r2, #0
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f7fc ffb8 	bl	80018d4 <_lseek>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_lseek_r+0x1e>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_lseek_r+0x1e>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	20000760 	.word	0x20000760

08004974 <__swhatbuf_r>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	460e      	mov	r6, r1
 8004978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497c:	2900      	cmp	r1, #0
 800497e:	b096      	sub	sp, #88	; 0x58
 8004980:	4614      	mov	r4, r2
 8004982:	461d      	mov	r5, r3
 8004984:	da08      	bge.n	8004998 <__swhatbuf_r+0x24>
 8004986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	602a      	str	r2, [r5, #0]
 800498e:	061a      	lsls	r2, r3, #24
 8004990:	d410      	bmi.n	80049b4 <__swhatbuf_r+0x40>
 8004992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004996:	e00e      	b.n	80049b6 <__swhatbuf_r+0x42>
 8004998:	466a      	mov	r2, sp
 800499a:	f000 fb5d 	bl	8005058 <_fstat_r>
 800499e:	2800      	cmp	r0, #0
 80049a0:	dbf1      	blt.n	8004986 <__swhatbuf_r+0x12>
 80049a2:	9a01      	ldr	r2, [sp, #4]
 80049a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049ac:	425a      	negs	r2, r3
 80049ae:	415a      	adcs	r2, r3
 80049b0:	602a      	str	r2, [r5, #0]
 80049b2:	e7ee      	b.n	8004992 <__swhatbuf_r+0x1e>
 80049b4:	2340      	movs	r3, #64	; 0x40
 80049b6:	2000      	movs	r0, #0
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	b016      	add	sp, #88	; 0x58
 80049bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080049c0 <__smakebuf_r>:
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049c4:	079d      	lsls	r5, r3, #30
 80049c6:	4606      	mov	r6, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	d507      	bpl.n	80049dc <__smakebuf_r+0x1c>
 80049cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	2301      	movs	r3, #1
 80049d6:	6163      	str	r3, [r4, #20]
 80049d8:	b002      	add	sp, #8
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	ab01      	add	r3, sp, #4
 80049de:	466a      	mov	r2, sp
 80049e0:	f7ff ffc8 	bl	8004974 <__swhatbuf_r>
 80049e4:	9900      	ldr	r1, [sp, #0]
 80049e6:	4605      	mov	r5, r0
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff fd79 	bl	80044e0 <_malloc_r>
 80049ee:	b948      	cbnz	r0, 8004a04 <__smakebuf_r+0x44>
 80049f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f4:	059a      	lsls	r2, r3, #22
 80049f6:	d4ef      	bmi.n	80049d8 <__smakebuf_r+0x18>
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	e7e3      	b.n	80049cc <__smakebuf_r+0xc>
 8004a04:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <__smakebuf_r+0x7c>)
 8004a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	9b00      	ldr	r3, [sp, #0]
 8004a14:	6163      	str	r3, [r4, #20]
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	6120      	str	r0, [r4, #16]
 8004a1a:	b15b      	cbz	r3, 8004a34 <__smakebuf_r+0x74>
 8004a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a20:	4630      	mov	r0, r6
 8004a22:	f000 fb2b 	bl	800507c <_isatty_r>
 8004a26:	b128      	cbz	r0, 8004a34 <__smakebuf_r+0x74>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	89a0      	ldrh	r0, [r4, #12]
 8004a36:	4305      	orrs	r5, r0
 8004a38:	81a5      	strh	r5, [r4, #12]
 8004a3a:	e7cd      	b.n	80049d8 <__smakebuf_r+0x18>
 8004a3c:	080041e9 	.word	0x080041e9

08004a40 <__malloc_lock>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__malloc_lock+0x8>)
 8004a42:	f7ff bcc8 	b.w	80043d6 <__retarget_lock_acquire_recursive>
 8004a46:	bf00      	nop
 8004a48:	20000754 	.word	0x20000754

08004a4c <__malloc_unlock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__malloc_unlock+0x8>)
 8004a4e:	f7ff bcc3 	b.w	80043d8 <__retarget_lock_release_recursive>
 8004a52:	bf00      	nop
 8004a54:	20000754 	.word	0x20000754

08004a58 <__sfputc_r>:
 8004a58:	6893      	ldr	r3, [r2, #8]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	b410      	push	{r4}
 8004a60:	6093      	str	r3, [r2, #8]
 8004a62:	da08      	bge.n	8004a76 <__sfputc_r+0x1e>
 8004a64:	6994      	ldr	r4, [r2, #24]
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	db01      	blt.n	8004a6e <__sfputc_r+0x16>
 8004a6a:	290a      	cmp	r1, #10
 8004a6c:	d103      	bne.n	8004a76 <__sfputc_r+0x1e>
 8004a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a72:	f7ff be8b 	b.w	800478c <__swbuf_r>
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	1c58      	adds	r0, r3, #1
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	7019      	strb	r1, [r3, #0]
 8004a7e:	4608      	mov	r0, r1
 8004a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <__sfputs_r>:
 8004a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a88:	4606      	mov	r6, r0
 8004a8a:	460f      	mov	r7, r1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	18d5      	adds	r5, r2, r3
 8004a90:	42ac      	cmp	r4, r5
 8004a92:	d101      	bne.n	8004a98 <__sfputs_r+0x12>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e007      	b.n	8004aa8 <__sfputs_r+0x22>
 8004a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9c:	463a      	mov	r2, r7
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff ffda 	bl	8004a58 <__sfputc_r>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d1f3      	bne.n	8004a90 <__sfputs_r+0xa>
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004aac <_vfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	b09d      	sub	sp, #116	; 0x74
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	4606      	mov	r6, r0
 8004aba:	b118      	cbz	r0, 8004ac4 <_vfiprintf_r+0x18>
 8004abc:	6983      	ldr	r3, [r0, #24]
 8004abe:	b90b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x18>
 8004ac0:	f7ff fbc6 	bl	8004250 <__sinit>
 8004ac4:	4b89      	ldr	r3, [pc, #548]	; (8004cec <_vfiprintf_r+0x240>)
 8004ac6:	429d      	cmp	r5, r3
 8004ac8:	d11b      	bne.n	8004b02 <_vfiprintf_r+0x56>
 8004aca:	6875      	ldr	r5, [r6, #4]
 8004acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ace:	07d9      	lsls	r1, r3, #31
 8004ad0:	d405      	bmi.n	8004ade <_vfiprintf_r+0x32>
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	059a      	lsls	r2, r3, #22
 8004ad6:	d402      	bmi.n	8004ade <_vfiprintf_r+0x32>
 8004ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ada:	f7ff fc7c 	bl	80043d6 <__retarget_lock_acquire_recursive>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	071b      	lsls	r3, r3, #28
 8004ae2:	d501      	bpl.n	8004ae8 <_vfiprintf_r+0x3c>
 8004ae4:	692b      	ldr	r3, [r5, #16]
 8004ae6:	b9eb      	cbnz	r3, 8004b24 <_vfiprintf_r+0x78>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff feb2 	bl	8004854 <__swsetup_r>
 8004af0:	b1c0      	cbz	r0, 8004b24 <_vfiprintf_r+0x78>
 8004af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af4:	07dc      	lsls	r4, r3, #31
 8004af6:	d50e      	bpl.n	8004b16 <_vfiprintf_r+0x6a>
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295
 8004afc:	b01d      	add	sp, #116	; 0x74
 8004afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b02:	4b7b      	ldr	r3, [pc, #492]	; (8004cf0 <_vfiprintf_r+0x244>)
 8004b04:	429d      	cmp	r5, r3
 8004b06:	d101      	bne.n	8004b0c <_vfiprintf_r+0x60>
 8004b08:	68b5      	ldr	r5, [r6, #8]
 8004b0a:	e7df      	b.n	8004acc <_vfiprintf_r+0x20>
 8004b0c:	4b79      	ldr	r3, [pc, #484]	; (8004cf4 <_vfiprintf_r+0x248>)
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	bf08      	it	eq
 8004b12:	68f5      	ldreq	r5, [r6, #12]
 8004b14:	e7da      	b.n	8004acc <_vfiprintf_r+0x20>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	0598      	lsls	r0, r3, #22
 8004b1a:	d4ed      	bmi.n	8004af8 <_vfiprintf_r+0x4c>
 8004b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b1e:	f7ff fc5b 	bl	80043d8 <__retarget_lock_release_recursive>
 8004b22:	e7e9      	b.n	8004af8 <_vfiprintf_r+0x4c>
 8004b24:	2300      	movs	r3, #0
 8004b26:	9309      	str	r3, [sp, #36]	; 0x24
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b32:	2330      	movs	r3, #48	; 0x30
 8004b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cf8 <_vfiprintf_r+0x24c>
 8004b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b3c:	f04f 0901 	mov.w	r9, #1
 8004b40:	4623      	mov	r3, r4
 8004b42:	469a      	mov	sl, r3
 8004b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b48:	b10a      	cbz	r2, 8004b4e <_vfiprintf_r+0xa2>
 8004b4a:	2a25      	cmp	r2, #37	; 0x25
 8004b4c:	d1f9      	bne.n	8004b42 <_vfiprintf_r+0x96>
 8004b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b52:	d00b      	beq.n	8004b6c <_vfiprintf_r+0xc0>
 8004b54:	465b      	mov	r3, fp
 8004b56:	4622      	mov	r2, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7ff ff93 	bl	8004a86 <__sfputs_r>
 8004b60:	3001      	adds	r0, #1
 8004b62:	f000 80aa 	beq.w	8004cba <_vfiprintf_r+0x20e>
 8004b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b68:	445a      	add	r2, fp
 8004b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a2 	beq.w	8004cba <_vfiprintf_r+0x20e>
 8004b76:	2300      	movs	r3, #0
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b80:	f10a 0a01 	add.w	sl, sl, #1
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	9307      	str	r3, [sp, #28]
 8004b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b8e:	4654      	mov	r4, sl
 8004b90:	2205      	movs	r2, #5
 8004b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b96:	4858      	ldr	r0, [pc, #352]	; (8004cf8 <_vfiprintf_r+0x24c>)
 8004b98:	f7fb fb2a 	bl	80001f0 <memchr>
 8004b9c:	9a04      	ldr	r2, [sp, #16]
 8004b9e:	b9d8      	cbnz	r0, 8004bd8 <_vfiprintf_r+0x12c>
 8004ba0:	06d1      	lsls	r1, r2, #27
 8004ba2:	bf44      	itt	mi
 8004ba4:	2320      	movmi	r3, #32
 8004ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004baa:	0713      	lsls	r3, r2, #28
 8004bac:	bf44      	itt	mi
 8004bae:	232b      	movmi	r3, #43	; 0x2b
 8004bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d015      	beq.n	8004be8 <_vfiprintf_r+0x13c>
 8004bbc:	9a07      	ldr	r2, [sp, #28]
 8004bbe:	4654      	mov	r4, sl
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f04f 0c0a 	mov.w	ip, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bcc:	3b30      	subs	r3, #48	; 0x30
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d94e      	bls.n	8004c70 <_vfiprintf_r+0x1c4>
 8004bd2:	b1b0      	cbz	r0, 8004c02 <_vfiprintf_r+0x156>
 8004bd4:	9207      	str	r2, [sp, #28]
 8004bd6:	e014      	b.n	8004c02 <_vfiprintf_r+0x156>
 8004bd8:	eba0 0308 	sub.w	r3, r0, r8
 8004bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	46a2      	mov	sl, r4
 8004be6:	e7d2      	b.n	8004b8e <_vfiprintf_r+0xe2>
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	1d19      	adds	r1, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	9103      	str	r1, [sp, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bfbb      	ittet	lt
 8004bf4:	425b      	neglt	r3, r3
 8004bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfa:	9307      	strge	r3, [sp, #28]
 8004bfc:	9307      	strlt	r3, [sp, #28]
 8004bfe:	bfb8      	it	lt
 8004c00:	9204      	strlt	r2, [sp, #16]
 8004c02:	7823      	ldrb	r3, [r4, #0]
 8004c04:	2b2e      	cmp	r3, #46	; 0x2e
 8004c06:	d10c      	bne.n	8004c22 <_vfiprintf_r+0x176>
 8004c08:	7863      	ldrb	r3, [r4, #1]
 8004c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0c:	d135      	bne.n	8004c7a <_vfiprintf_r+0x1ce>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9203      	str	r2, [sp, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb8      	it	lt
 8004c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c1e:	3402      	adds	r4, #2
 8004c20:	9305      	str	r3, [sp, #20]
 8004c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d08 <_vfiprintf_r+0x25c>
 8004c26:	7821      	ldrb	r1, [r4, #0]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f7fb fae0 	bl	80001f0 <memchr>
 8004c30:	b140      	cbz	r0, 8004c44 <_vfiprintf_r+0x198>
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	eba0 000a 	sub.w	r0, r0, sl
 8004c38:	fa03 f000 	lsl.w	r0, r3, r0
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	4303      	orrs	r3, r0
 8004c40:	3401      	adds	r4, #1
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c48:	482c      	ldr	r0, [pc, #176]	; (8004cfc <_vfiprintf_r+0x250>)
 8004c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c4e:	2206      	movs	r2, #6
 8004c50:	f7fb face 	bl	80001f0 <memchr>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d03f      	beq.n	8004cd8 <_vfiprintf_r+0x22c>
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <_vfiprintf_r+0x254>)
 8004c5a:	bb1b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x1f8>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	3307      	adds	r3, #7
 8004c60:	f023 0307 	bic.w	r3, r3, #7
 8004c64:	3308      	adds	r3, #8
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6a:	443b      	add	r3, r7
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c6e:	e767      	b.n	8004b40 <_vfiprintf_r+0x94>
 8004c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c74:	460c      	mov	r4, r1
 8004c76:	2001      	movs	r0, #1
 8004c78:	e7a5      	b.n	8004bc6 <_vfiprintf_r+0x11a>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	3401      	adds	r4, #1
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	4619      	mov	r1, r3
 8004c82:	f04f 0c0a 	mov.w	ip, #10
 8004c86:	4620      	mov	r0, r4
 8004c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c8c:	3a30      	subs	r2, #48	; 0x30
 8004c8e:	2a09      	cmp	r2, #9
 8004c90:	d903      	bls.n	8004c9a <_vfiprintf_r+0x1ee>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0c5      	beq.n	8004c22 <_vfiprintf_r+0x176>
 8004c96:	9105      	str	r1, [sp, #20]
 8004c98:	e7c3      	b.n	8004c22 <_vfiprintf_r+0x176>
 8004c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e7f0      	b.n	8004c86 <_vfiprintf_r+0x1da>
 8004ca4:	ab03      	add	r3, sp, #12
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <_vfiprintf_r+0x258>)
 8004cac:	a904      	add	r1, sp, #16
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f3af 8000 	nop.w
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	1c78      	adds	r0, r7, #1
 8004cb8:	d1d6      	bne.n	8004c68 <_vfiprintf_r+0x1bc>
 8004cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	d405      	bmi.n	8004ccc <_vfiprintf_r+0x220>
 8004cc0:	89ab      	ldrh	r3, [r5, #12]
 8004cc2:	059a      	lsls	r2, r3, #22
 8004cc4:	d402      	bmi.n	8004ccc <_vfiprintf_r+0x220>
 8004cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cc8:	f7ff fb86 	bl	80043d8 <__retarget_lock_release_recursive>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	065b      	lsls	r3, r3, #25
 8004cd0:	f53f af12 	bmi.w	8004af8 <_vfiprintf_r+0x4c>
 8004cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd6:	e711      	b.n	8004afc <_vfiprintf_r+0x50>
 8004cd8:	ab03      	add	r3, sp, #12
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <_vfiprintf_r+0x258>)
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 f880 	bl	8004de8 <_printf_i>
 8004ce8:	e7e4      	b.n	8004cb4 <_vfiprintf_r+0x208>
 8004cea:	bf00      	nop
 8004cec:	080054a0 	.word	0x080054a0
 8004cf0:	080054c0 	.word	0x080054c0
 8004cf4:	08005480 	.word	0x08005480
 8004cf8:	080054e4 	.word	0x080054e4
 8004cfc:	080054ee 	.word	0x080054ee
 8004d00:	00000000 	.word	0x00000000
 8004d04:	08004a87 	.word	0x08004a87
 8004d08:	080054ea 	.word	0x080054ea

08004d0c <_printf_common>:
 8004d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	4616      	mov	r6, r2
 8004d12:	4699      	mov	r9, r3
 8004d14:	688a      	ldr	r2, [r1, #8]
 8004d16:	690b      	ldr	r3, [r1, #16]
 8004d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bfb8      	it	lt
 8004d20:	4613      	movlt	r3, r2
 8004d22:	6033      	str	r3, [r6, #0]
 8004d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d28:	4607      	mov	r7, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	b10a      	cbz	r2, 8004d32 <_printf_common+0x26>
 8004d2e:	3301      	adds	r3, #1
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	0699      	lsls	r1, r3, #26
 8004d36:	bf42      	ittt	mi
 8004d38:	6833      	ldrmi	r3, [r6, #0]
 8004d3a:	3302      	addmi	r3, #2
 8004d3c:	6033      	strmi	r3, [r6, #0]
 8004d3e:	6825      	ldr	r5, [r4, #0]
 8004d40:	f015 0506 	ands.w	r5, r5, #6
 8004d44:	d106      	bne.n	8004d54 <_printf_common+0x48>
 8004d46:	f104 0a19 	add.w	sl, r4, #25
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	6832      	ldr	r2, [r6, #0]
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dc26      	bgt.n	8004da2 <_printf_common+0x96>
 8004d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d58:	1e13      	subs	r3, r2, #0
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	bf18      	it	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	0692      	lsls	r2, r2, #26
 8004d62:	d42b      	bmi.n	8004dbc <_printf_common+0xb0>
 8004d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d01e      	beq.n	8004db0 <_printf_common+0xa4>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	68e5      	ldr	r5, [r4, #12]
 8004d76:	6832      	ldr	r2, [r6, #0]
 8004d78:	f003 0306 	and.w	r3, r3, #6
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	bf08      	it	eq
 8004d80:	1aad      	subeq	r5, r5, r2
 8004d82:	68a3      	ldr	r3, [r4, #8]
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	bf0c      	ite	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	2500      	movne	r5, #0
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	bfc4      	itt	gt
 8004d92:	1a9b      	subgt	r3, r3, r2
 8004d94:	18ed      	addgt	r5, r5, r3
 8004d96:	2600      	movs	r6, #0
 8004d98:	341a      	adds	r4, #26
 8004d9a:	42b5      	cmp	r5, r6
 8004d9c:	d11a      	bne.n	8004dd4 <_printf_common+0xc8>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e008      	b.n	8004db4 <_printf_common+0xa8>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4652      	mov	r2, sl
 8004da6:	4649      	mov	r1, r9
 8004da8:	4638      	mov	r0, r7
 8004daa:	47c0      	blx	r8
 8004dac:	3001      	adds	r0, #1
 8004dae:	d103      	bne.n	8004db8 <_printf_common+0xac>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	3501      	adds	r5, #1
 8004dba:	e7c6      	b.n	8004d4a <_printf_common+0x3e>
 8004dbc:	18e1      	adds	r1, r4, r3
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	2030      	movs	r0, #48	; 0x30
 8004dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc6:	4422      	add	r2, r4
 8004dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	e7c7      	b.n	8004d64 <_printf_common+0x58>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d0e6      	beq.n	8004db0 <_printf_common+0xa4>
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7d9      	b.n	8004d9a <_printf_common+0x8e>
	...

08004de8 <_printf_i>:
 8004de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	7e0f      	ldrb	r7, [r1, #24]
 8004dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004df0:	2f78      	cmp	r7, #120	; 0x78
 8004df2:	4691      	mov	r9, r2
 8004df4:	4680      	mov	r8, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	469a      	mov	sl, r3
 8004dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dfe:	d807      	bhi.n	8004e10 <_printf_i+0x28>
 8004e00:	2f62      	cmp	r7, #98	; 0x62
 8004e02:	d80a      	bhi.n	8004e1a <_printf_i+0x32>
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	f000 80d8 	beq.w	8004fba <_printf_i+0x1d2>
 8004e0a:	2f58      	cmp	r7, #88	; 0x58
 8004e0c:	f000 80a3 	beq.w	8004f56 <_printf_i+0x16e>
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e18:	e03a      	b.n	8004e90 <_printf_i+0xa8>
 8004e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e1e:	2b15      	cmp	r3, #21
 8004e20:	d8f6      	bhi.n	8004e10 <_printf_i+0x28>
 8004e22:	a101      	add	r1, pc, #4	; (adr r1, 8004e28 <_printf_i+0x40>)
 8004e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e95 	.word	0x08004e95
 8004e30:	08004e11 	.word	0x08004e11
 8004e34:	08004e11 	.word	0x08004e11
 8004e38:	08004e11 	.word	0x08004e11
 8004e3c:	08004e11 	.word	0x08004e11
 8004e40:	08004e95 	.word	0x08004e95
 8004e44:	08004e11 	.word	0x08004e11
 8004e48:	08004e11 	.word	0x08004e11
 8004e4c:	08004e11 	.word	0x08004e11
 8004e50:	08004e11 	.word	0x08004e11
 8004e54:	08004fa1 	.word	0x08004fa1
 8004e58:	08004ec5 	.word	0x08004ec5
 8004e5c:	08004f83 	.word	0x08004f83
 8004e60:	08004e11 	.word	0x08004e11
 8004e64:	08004e11 	.word	0x08004e11
 8004e68:	08004fc3 	.word	0x08004fc3
 8004e6c:	08004e11 	.word	0x08004e11
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e11 	.word	0x08004e11
 8004e78:	08004e11 	.word	0x08004e11
 8004e7c:	08004f8b 	.word	0x08004f8b
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0a3      	b.n	8004fdc <_printf_i+0x1f4>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	6829      	ldr	r1, [r5, #0]
 8004e98:	0606      	lsls	r6, r0, #24
 8004e9a:	f101 0304 	add.w	r3, r1, #4
 8004e9e:	d50a      	bpl.n	8004eb6 <_printf_i+0xce>
 8004ea0:	680e      	ldr	r6, [r1, #0]
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	da03      	bge.n	8004eb0 <_printf_i+0xc8>
 8004ea8:	232d      	movs	r3, #45	; 0x2d
 8004eaa:	4276      	negs	r6, r6
 8004eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb0:	485e      	ldr	r0, [pc, #376]	; (800502c <_printf_i+0x244>)
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	e019      	b.n	8004eea <_printf_i+0x102>
 8004eb6:	680e      	ldr	r6, [r1, #0]
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ebe:	bf18      	it	ne
 8004ec0:	b236      	sxthne	r6, r6
 8004ec2:	e7ef      	b.n	8004ea4 <_printf_i+0xbc>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	1d19      	adds	r1, r3, #4
 8004eca:	6029      	str	r1, [r5, #0]
 8004ecc:	0601      	lsls	r1, r0, #24
 8004ece:	d501      	bpl.n	8004ed4 <_printf_i+0xec>
 8004ed0:	681e      	ldr	r6, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <_printf_i+0xf2>
 8004ed4:	0646      	lsls	r6, r0, #25
 8004ed6:	d5fb      	bpl.n	8004ed0 <_printf_i+0xe8>
 8004ed8:	881e      	ldrh	r6, [r3, #0]
 8004eda:	4854      	ldr	r0, [pc, #336]	; (800502c <_printf_i+0x244>)
 8004edc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ede:	bf0c      	ite	eq
 8004ee0:	2308      	moveq	r3, #8
 8004ee2:	230a      	movne	r3, #10
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eea:	6865      	ldr	r5, [r4, #4]
 8004eec:	60a5      	str	r5, [r4, #8]
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	bfa2      	ittt	ge
 8004ef2:	6821      	ldrge	r1, [r4, #0]
 8004ef4:	f021 0104 	bicge.w	r1, r1, #4
 8004ef8:	6021      	strge	r1, [r4, #0]
 8004efa:	b90e      	cbnz	r6, 8004f00 <_printf_i+0x118>
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	d04d      	beq.n	8004f9c <_printf_i+0x1b4>
 8004f00:	4615      	mov	r5, r2
 8004f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f06:	fb03 6711 	mls	r7, r3, r1, r6
 8004f0a:	5dc7      	ldrb	r7, [r0, r7]
 8004f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f10:	4637      	mov	r7, r6
 8004f12:	42bb      	cmp	r3, r7
 8004f14:	460e      	mov	r6, r1
 8004f16:	d9f4      	bls.n	8004f02 <_printf_i+0x11a>
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d10b      	bne.n	8004f34 <_printf_i+0x14c>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	07de      	lsls	r6, r3, #31
 8004f20:	d508      	bpl.n	8004f34 <_printf_i+0x14c>
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	4299      	cmp	r1, r3
 8004f28:	bfde      	ittt	le
 8004f2a:	2330      	movle	r3, #48	; 0x30
 8004f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f34:	1b52      	subs	r2, r2, r5
 8004f36:	6122      	str	r2, [r4, #16]
 8004f38:	f8cd a000 	str.w	sl, [sp]
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	aa03      	add	r2, sp, #12
 8004f40:	4621      	mov	r1, r4
 8004f42:	4640      	mov	r0, r8
 8004f44:	f7ff fee2 	bl	8004d0c <_printf_common>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d14c      	bne.n	8004fe6 <_printf_i+0x1fe>
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	b004      	add	sp, #16
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f56:	4835      	ldr	r0, [pc, #212]	; (800502c <_printf_i+0x244>)
 8004f58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f5c:	6829      	ldr	r1, [r5, #0]
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f64:	6029      	str	r1, [r5, #0]
 8004f66:	061d      	lsls	r5, r3, #24
 8004f68:	d514      	bpl.n	8004f94 <_printf_i+0x1ac>
 8004f6a:	07df      	lsls	r7, r3, #31
 8004f6c:	bf44      	itt	mi
 8004f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f72:	6023      	strmi	r3, [r4, #0]
 8004f74:	b91e      	cbnz	r6, 8004f7e <_printf_i+0x196>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f023 0320 	bic.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	2310      	movs	r3, #16
 8004f80:	e7b0      	b.n	8004ee4 <_printf_i+0xfc>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2378      	movs	r3, #120	; 0x78
 8004f8c:	4828      	ldr	r0, [pc, #160]	; (8005030 <_printf_i+0x248>)
 8004f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f92:	e7e3      	b.n	8004f5c <_printf_i+0x174>
 8004f94:	0659      	lsls	r1, r3, #25
 8004f96:	bf48      	it	mi
 8004f98:	b2b6      	uxthmi	r6, r6
 8004f9a:	e7e6      	b.n	8004f6a <_printf_i+0x182>
 8004f9c:	4615      	mov	r5, r2
 8004f9e:	e7bb      	b.n	8004f18 <_printf_i+0x130>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	6826      	ldr	r6, [r4, #0]
 8004fa4:	6961      	ldr	r1, [r4, #20]
 8004fa6:	1d18      	adds	r0, r3, #4
 8004fa8:	6028      	str	r0, [r5, #0]
 8004faa:	0635      	lsls	r5, r6, #24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0x1cc>
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0x1d2>
 8004fb4:	0670      	lsls	r0, r6, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0x1c8>
 8004fb8:	8019      	strh	r1, [r3, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	4615      	mov	r5, r2
 8004fc0:	e7ba      	b.n	8004f38 <_printf_i+0x150>
 8004fc2:	682b      	ldr	r3, [r5, #0]
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	602a      	str	r2, [r5, #0]
 8004fc8:	681d      	ldr	r5, [r3, #0]
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7fb f90e 	bl	80001f0 <memchr>
 8004fd4:	b108      	cbz	r0, 8004fda <_printf_i+0x1f2>
 8004fd6:	1b40      	subs	r0, r0, r5
 8004fd8:	6060      	str	r0, [r4, #4]
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	e7a8      	b.n	8004f38 <_printf_i+0x150>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	462a      	mov	r2, r5
 8004fea:	4649      	mov	r1, r9
 8004fec:	4640      	mov	r0, r8
 8004fee:	47d0      	blx	sl
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d0ab      	beq.n	8004f4c <_printf_i+0x164>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	079b      	lsls	r3, r3, #30
 8004ff8:	d413      	bmi.n	8005022 <_printf_i+0x23a>
 8004ffa:	68e0      	ldr	r0, [r4, #12]
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	4298      	cmp	r0, r3
 8005000:	bfb8      	it	lt
 8005002:	4618      	movlt	r0, r3
 8005004:	e7a4      	b.n	8004f50 <_printf_i+0x168>
 8005006:	2301      	movs	r3, #1
 8005008:	4632      	mov	r2, r6
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d09b      	beq.n	8004f4c <_printf_i+0x164>
 8005014:	3501      	adds	r5, #1
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	9903      	ldr	r1, [sp, #12]
 800501a:	1a5b      	subs	r3, r3, r1
 800501c:	42ab      	cmp	r3, r5
 800501e:	dcf2      	bgt.n	8005006 <_printf_i+0x21e>
 8005020:	e7eb      	b.n	8004ffa <_printf_i+0x212>
 8005022:	2500      	movs	r5, #0
 8005024:	f104 0619 	add.w	r6, r4, #25
 8005028:	e7f5      	b.n	8005016 <_printf_i+0x22e>
 800502a:	bf00      	nop
 800502c:	080054f5 	.word	0x080054f5
 8005030:	08005506 	.word	0x08005506

08005034 <_read_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d07      	ldr	r5, [pc, #28]	; (8005054 <_read_r+0x20>)
 8005038:	4604      	mov	r4, r0
 800503a:	4608      	mov	r0, r1
 800503c:	4611      	mov	r1, r2
 800503e:	2200      	movs	r2, #0
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fc fc22 	bl	800188c <_read>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_read_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_read_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000760 	.word	0x20000760

08005058 <_fstat_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d07      	ldr	r5, [pc, #28]	; (8005078 <_fstat_r+0x20>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	f7fc fc2e 	bl	80018c6 <_fstat>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d102      	bne.n	8005074 <_fstat_r+0x1c>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	b103      	cbz	r3, 8005074 <_fstat_r+0x1c>
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	bf00      	nop
 8005078:	20000760 	.word	0x20000760

0800507c <_isatty_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4d06      	ldr	r5, [pc, #24]	; (8005098 <_isatty_r+0x1c>)
 8005080:	2300      	movs	r3, #0
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	f7fc fc22 	bl	80018d0 <_isatty>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_isatty_r+0x1a>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_isatty_r+0x1a>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	20000760 	.word	0x20000760

0800509c <_init>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr

080050a8 <_fini>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr
