
Digimat_receiver_v1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b6c  08006b6c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b74  08006b74  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200000a4  08006c20  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08006c20  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001610c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334b  00000000  00000000  000361e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00039530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0b6  00000000  00000000  0003b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157da  00000000  00000000  000565fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092710  00000000  00000000  0006bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe4e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  000fe538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800672c 	.word	0x0800672c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800672c 	.word	0x0800672c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	; 0x38
 8000598:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800059a:	4a73      	ldr	r2, [pc, #460]	; (8000768 <MX_BlueNRG_MS_Init+0x1d4>)
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	3304      	adds	r3, #4
 80005a8:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005aa:	4a70      	ldr	r2, [pc, #448]	; (800076c <MX_BlueNRG_MS_Init+0x1d8>)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b4:	6018      	str	r0, [r3, #0]
 80005b6:	3304      	adds	r3, #4
 80005b8:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005ba:	f000 f8fd 	bl	80007b8 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 fc38 	bl	8001e34 <BSP_PB_GetState>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b69      	ldr	r3, [pc, #420]	; (8000770 <MX_BlueNRG_MS_Init+0x1dc>)
 80005ca:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005cc:	2100      	movs	r1, #0
 80005ce:	4869      	ldr	r0, [pc, #420]	; (8000774 <MX_BlueNRG_MS_Init+0x1e0>)
 80005d0:	f004 fcea 	bl	8004fa8 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005d4:	1cba      	adds	r2, r7, #2
 80005d6:	1d7b      	adds	r3, r7, #5
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fb59 	bl	8004c92 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005e0:	f004 fb9b 	bl	8004d1a <hci_reset>

  HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f001 fdc9 	bl	800217c <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	4619      	mov	r1, r3
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4861      	ldr	r0, [pc, #388]	; (8000778 <MX_BlueNRG_MS_Init+0x1e4>)
 80005f4:	f005 fad2 	bl	8005b9c <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	2b30      	cmp	r3, #48	; 0x30
 80005fc:	d902      	bls.n	8000604 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 80005fe:	4b5f      	ldr	r3, [pc, #380]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d109      	bne.n	8000620 <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	f107 021c 	add.w	r2, r7, #28
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
 800061e:	e008      	b.n	8000632 <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	f107 0214 	add.w	r2, r7, #20
 8000628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062c:	6018      	str	r0, [r3, #0]
 800062e:	3304      	adds	r3, #4
 8000630:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	461a      	mov	r2, r3
 8000638:	2106      	movs	r1, #6
 800063a:	2000      	movs	r0, #0
 800063c:	f004 fa93 	bl	8004b66 <aci_hal_write_config_data>
 8000640:	4603      	mov	r3, r0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800064a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800064c:	484d      	ldr	r0, [pc, #308]	; (8000784 <MX_BlueNRG_MS_Init+0x1f0>)
 800064e:	f005 faa5 	bl	8005b9c <iprintf>
  }

  ret = aci_gatt_init();
 8000652:	f004 f808 	bl	8004666 <aci_gatt_init>
 8000656:	4603      	mov	r3, r0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 8000660:	4849      	ldr	r0, [pc, #292]	; (8000788 <MX_BlueNRG_MS_Init+0x1f4>)
 8000662:	f005 fb37 	bl	8005cd4 <puts>
  }

  if (BLE_Role == SERVER) {
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d11e      	bne.n	80006ac <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d10f      	bne.n	8000696 <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000676:	f107 020a 	add.w	r2, r7, #10
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4613      	mov	r3, r2
 8000686:	2207      	movs	r2, #7
 8000688:	2100      	movs	r1, #0
 800068a:	2001      	movs	r0, #1
 800068c:	f003 fdbc 	bl	8004208 <aci_gap_init_IDB05A1>
 8000690:	4603      	mov	r3, r0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
 8000694:	e028      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	f107 010a 	add.w	r1, r7, #10
 80006a0:	2001      	movs	r0, #1
 80006a2:	f003 fe01 	bl	80042a8 <aci_gap_init_IDB04A1>
 80006a6:	4603      	mov	r3, r0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
 80006aa:	e01d      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <MX_BlueNRG_MS_Init+0x1e8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10f      	bne.n	80006d4 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006b4:	f107 020a 	add.w	r2, r7, #10
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4613      	mov	r3, r2
 80006c4:	2207      	movs	r2, #7
 80006c6:	2100      	movs	r1, #0
 80006c8:	2004      	movs	r0, #4
 80006ca:	f003 fd9d 	bl	8004208 <aci_gap_init_IDB05A1>
 80006ce:	4603      	mov	r3, r0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
 80006d2:	e009      	b.n	80006e8 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	f107 010a 	add.w	r1, r7, #10
 80006de:	2003      	movs	r0, #3
 80006e0:	f003 fde2 	bl	80042a8 <aci_gap_init_IDB04A1>
 80006e4:	4603      	mov	r3, r0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006ee:	4827      	ldr	r0, [pc, #156]	; (800078c <MX_BlueNRG_MS_Init+0x1f8>)
 80006f0:	f005 faf0 	bl	8005cd4 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006f4:	2301      	movs	r3, #1
 80006f6:	9303      	str	r3, [sp, #12]
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_BlueNRG_MS_Init+0x1fc>)
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2310      	movs	r3, #16
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2307      	movs	r3, #7
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f003 ff00 	bl	8004510 <aci_gap_set_auth_requirement>
 8000710:	4603      	mov	r3, r0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 800071a:	481e      	ldr	r0, [pc, #120]	; (8000794 <MX_BlueNRG_MS_Init+0x200>)
 800071c:	f005 fada 	bl	8005cd4 <puts>
  }

  if (BLE_Role == SERVER) {
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_BlueNRG_MS_Init+0x1ec>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d111      	bne.n	800074c <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <MX_BlueNRG_MS_Init+0x204>)
 800072a:	f005 fad3 	bl	8005cd4 <puts>
    ret = Add_Sample_Service();
 800072e:	f000 fa11 	bl	8000b54 <Add_Sample_Service>
 8000732:	4603      	mov	r3, r0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <MX_BlueNRG_MS_Init+0x208>)
 800073e:	f005 fac9 	bl	8005cd4 <puts>
 8000742:	e006      	b.n	8000752 <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_BlueNRG_MS_Init+0x20c>)
 8000746:	f005 fac5 	bl	8005cd4 <puts>
 800074a:	e002      	b.n	8000752 <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <MX_BlueNRG_MS_Init+0x210>)
 800074e:	f005 fac1 	bl	8005cd4 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000752:	2104      	movs	r1, #4
 8000754:	2001      	movs	r0, #1
 8000756:	f004 fa6b 	bl	8004c30 <aci_hal_set_tx_power_level>
 800075a:	4603      	mov	r3, r0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	080068e8 	.word	0x080068e8
 800076c:	080068f0 	.word	0x080068f0
 8000770:	20000000 	.word	0x20000000
 8000774:	08000f9d 	.word	0x08000f9d
 8000778:	080067fc 	.word	0x080067fc
 800077c:	200000c0 	.word	0x200000c0
 8000780:	20000001 	.word	0x20000001
 8000784:	08006810 	.word	0x08006810
 8000788:	08006830 	.word	0x08006830
 800078c:	08006844 	.word	0x08006844
 8000790:	0001e240 	.word	0x0001e240
 8000794:	08006858 	.word	0x08006858
 8000798:	08006870 	.word	0x08006870
 800079c:	08006890 	.word	0x08006890
 80007a0:	080068ac 	.word	0x080068ac
 80007a4:	080068c8 	.word	0x080068c8

080007a8 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80007ac:	f000 f898 	bl	80008e0 <User_Process>
  hci_user_evt_proc();
 80007b0:	f004 fd76 	bl	80052a0 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f001 fae4 	bl	8001d8c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fa4b 	bl	8001c60 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 fb94 	bl	8001ef8 <BSP_COM_Init>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <modem_at_cmd>:
 *         between a client and a server.
 *
 * @param  None
 * @retval None
 */
void modem_at_cmd(char* buffer, int n){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0; i<n; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	75fb      	strb	r3, [r7, #23]
 80007e2:	e010      	b.n	8000806 <modem_at_cmd+0x32>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer+i, 1, 100);
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	18d1      	adds	r1, r2, r3
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	4821      	ldr	r0, [pc, #132]	; (8000874 <modem_at_cmd+0xa0>)
 80007f0:	f003 f8f3 	bl	80039da <HAL_UART_Transmit>
		//printf("tx: %c\n",buffer[i]);
		HAL_UART_Receive(&huart1, &c, 1, 100);
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	2201      	movs	r2, #1
 80007f8:	491f      	ldr	r1, [pc, #124]	; (8000878 <modem_at_cmd+0xa4>)
 80007fa:	481e      	ldr	r0, [pc, #120]	; (8000874 <modem_at_cmd+0xa0>)
 80007fc:	f003 f97f 	bl	8003afe <HAL_UART_Receive>
	for(uint8_t i=0; i<n; i++) {
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	3301      	adds	r3, #1
 8000804:	75fb      	strb	r3, [r7, #23]
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	dcea      	bgt.n	80007e4 <modem_at_cmd+0x10>
		//printf("rx: %c\n",c);
	}

	//	memset(response,0,sizeof(response));
	char tredici='\r';
 800080e:	230d      	movs	r3, #13
 8000810:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) &tredici, 1, 100);
 8000812:	f107 010f 	add.w	r1, r7, #15
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2201      	movs	r2, #1
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <modem_at_cmd+0xa0>)
 800081c:	f003 f8dd 	bl	80039da <HAL_UART_Transmit>
	//	printf("tx: %c\n",tredici);
	HAL_UART_Receive(&huart1, &c, 1, 100);
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2201      	movs	r2, #1
 8000824:	4914      	ldr	r1, [pc, #80]	; (8000878 <modem_at_cmd+0xa4>)
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <modem_at_cmd+0xa0>)
 8000828:	f003 f969 	bl	8003afe <HAL_UART_Receive>
	//	printf("rx: %c\n",c);
	int i=0;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
	memset(risposta_uart,0,sizeof(risposta_uart));
 8000830:	2232      	movs	r2, #50	; 0x32
 8000832:	2100      	movs	r1, #0
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <modem_at_cmd+0xa8>)
 8000836:	f005 f8c8 	bl	80059ca <memset>
	do {
		//		if (lora.readable()) {
		HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 100);
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2201      	movs	r2, #1
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <modem_at_cmd+0xa4>)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <modem_at_cmd+0xa0>)
 8000842:	f003 f95c 	bl	8003afe <HAL_UART_Receive>
		//printf("rx: %c",c);
		risposta_uart[i]=c;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <modem_at_cmd+0xa4>)
 8000848:	7819      	ldrb	r1, [r3, #0]
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <modem_at_cmd+0xa8>)
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	4413      	add	r3, r2
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
		i++;
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	613b      	str	r3, [r7, #16]

		//	} while(c!='#' && c!='\r'&& c!=' ' && c!='\n');
	} while(c!=' ');
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <modem_at_cmd+0xa4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b20      	cmp	r3, #32
 8000860:	d1eb      	bne.n	800083a <modem_at_cmd+0x66>
	printf("%s",risposta_uart);
 8000862:	4906      	ldr	r1, [pc, #24]	; (800087c <modem_at_cmd+0xa8>)
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <modem_at_cmd+0xac>)
 8000866:	f005 f999 	bl	8005b9c <iprintf>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000021c 	.word	0x2000021c
 8000878:	200000c2 	.word	0x200000c2
 800087c:	200000c8 	.word	0x200000c8
 8000880:	080068f8 	.word	0x080068f8

08000884 <wait4join>:

void wait4join(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	memset(risposta_uart,0,sizeof(risposta_uart));
 8000888:	2232      	movs	r2, #50	; 0x32
 800088a:	2100      	movs	r1, #0
 800088c:	4810      	ldr	r0, [pc, #64]	; (80008d0 <wait4join+0x4c>)
 800088e:	f005 f89c 	bl	80059ca <memset>
		//		if(HAL_UART_Receive(&huart1, (uint8_t *) &response, 1, 100)){
		//			//        if (lora.readable()) {
		//
		//			printf("response: %s\n",response);
		//		}
		HAL_UART_Receive(&huart1,(uint8_t *) &c, 1, 100);
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	2201      	movs	r2, #1
 8000896:	490f      	ldr	r1, [pc, #60]	; (80008d4 <wait4join+0x50>)
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <wait4join+0x54>)
 800089a:	f003 f930 	bl	8003afe <HAL_UART_Receive>
		//		printf("rx: %c",c);
		risposta_uart[i]=c;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <wait4join+0x58>)
 80008a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <wait4join+0x50>)
 80008a8:	7819      	ldrb	r1, [r3, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <wait4join+0x4c>)
 80008ac:	5499      	strb	r1, [r3, r2]
		i++;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <wait4join+0x58>)
 80008b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <wait4join+0x58>)
 80008be:	801a      	strh	r2, [r3, #0]
	}while(c!='d');
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <wait4join+0x50>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b64      	cmp	r3, #100	; 0x64
 80008c6:	d1e4      	bne.n	8000892 <wait4join+0xe>
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	200000c2 	.word	0x200000c2
 80008d8:	2000021c 	.word	0x2000021c
 80008dc:	200000c4 	.word	0x200000c4

080008e0 <User_Process>:


static void User_Process(void)
{
 80008e0:	b598      	push	{r3, r4, r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  if (set_connectable)
 80008e4:	4b7b      	ldr	r3, [pc, #492]	; (8000ad4 <User_Process+0x1f4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00b      	beq.n	8000906 <User_Process+0x26>
  {
    /* Establish connection with remote device */
    Make_Connection();
 80008ee:	f000 f9a3 	bl	8000c38 <Make_Connection>
    set_connectable = FALSE;
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <User_Process+0x1f4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa9b 	bl	8001e34 <BSP_PB_GetState>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b75      	ldr	r3, [pc, #468]	; (8000ad8 <User_Process+0x1f8>)
 8000904:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 8000906:	4b75      	ldr	r3, [pc, #468]	; (8000adc <User_Process+0x1fc>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d12e      	bne.n	800096c <User_Process+0x8c>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 800090e:	4b74      	ldr	r3, [pc, #464]	; (8000ae0 <User_Process+0x200>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <User_Process+0x46>
 8000916:	4b73      	ldr	r3, [pc, #460]	; (8000ae4 <User_Process+0x204>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <User_Process+0x46>
      startReadTXCharHandle();
 8000920:	f000 f9f4 	bl	8000d0c <startReadTXCharHandle>
 8000924:	e00a      	b.n	800093c <User_Process+0x5c>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000926:	4b6e      	ldr	r3, [pc, #440]	; (8000ae0 <User_Process+0x200>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <User_Process+0x5c>
 800092e:	4b6e      	ldr	r3, [pc, #440]	; (8000ae8 <User_Process+0x208>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <User_Process+0x5c>
      startReadRXCharHandle();
 8000938:	f000 fa0e 	bl	8000d58 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800093c:	4b68      	ldr	r3, [pc, #416]	; (8000ae0 <User_Process+0x200>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d013      	beq.n	800096c <User_Process+0x8c>
 8000944:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <User_Process+0x204>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00e      	beq.n	800096c <User_Process+0x8c>
 800094e:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <User_Process+0x208>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d009      	beq.n	800096c <User_Process+0x8c>
 8000958:	4b64      	ldr	r3, [pc, #400]	; (8000aec <User_Process+0x20c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <User_Process+0x8c>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000962:	2000      	movs	r0, #0
 8000964:	f001 f9a4 	bl	8001cb0 <BSP_LED_Off>
      enableNotification();
 8000968:	f000 fa42 	bl	8000df0 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 800096c:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <User_Process+0x210>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 80ac 	beq.w	8000ad0 <User_Process+0x1f0>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f001 fbff 	bl	800217c <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 800097e:	bf00      	nop
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa57 	bl	8001e34 <BSP_PB_GetState>
 8000986:	4602      	mov	r2, r0
 8000988:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <User_Process+0x1f8>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf0c      	ite	eq
 8000992:	2301      	moveq	r3, #1
 8000994:	2300      	movne	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	429a      	cmp	r2, r3
 800099a:	d0f1      	beq.n	8000980 <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 800099c:	2032      	movs	r0, #50	; 0x32
 800099e:	f001 fbed 	bl	800217c <HAL_Delay>

    if (connected && notification_enabled)
 80009a2:	4b4f      	ldr	r3, [pc, #316]	; (8000ae0 <User_Process+0x200>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 808f 	beq.w	8000aca <User_Process+0x1ea>
 80009ac:	4b4f      	ldr	r3, [pc, #316]	; (8000aec <User_Process+0x20c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8089 	beq.w	8000aca <User_Process+0x1ea>
    {
      /* Send a toggle command to the remote device */
    //  uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
      //sendData(data, sizeof(data));
    		printf("Test seriale no pc\r\n");
 80009b8:	484e      	ldr	r0, [pc, #312]	; (8000af4 <User_Process+0x214>)
 80009ba:	f005 f98b 	bl	8005cd4 <puts>
    		modem_at_cmd(msg1,(int)strlen(msg1));
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <User_Process+0x218>)
 80009c0:	681c      	ldr	r4, [r3, #0]
 80009c2:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <User_Process+0x218>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fc0a 	bl	80001e0 <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff feff 	bl	80007d4 <modem_at_cmd>
    		printf("Inviato AT\r\n");
 80009d6:	4849      	ldr	r0, [pc, #292]	; (8000afc <User_Process+0x21c>)
 80009d8:	f005 f97c 	bl	8005cd4 <puts>
    		HAL_Delay(1000);
 80009dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e0:	f001 fbcc 	bl	800217c <HAL_Delay>
    		//  	modem_at_cmd(msg_at_verbose,(int)strlen(msg_at_verbose));
    		//	printf("Verbose attivato\r\n");



    		HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f001 fbc8 	bl	800217c <HAL_Delay>
    		modem_at_cmd(msg6,(int)strlen(msg6));
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <User_Process+0x220>)
 80009ee:	681c      	ldr	r4, [r3, #0]
 80009f0:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <User_Process+0x220>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbf3 	bl	80001e0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4619      	mov	r1, r3
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff fee8 	bl	80007d4 <modem_at_cmd>
    		printf("Inviato band\r\n");
 8000a04:	483f      	ldr	r0, [pc, #252]	; (8000b04 <User_Process+0x224>)
 8000a06:	f005 f965 	bl	8005cd4 <puts>


    		HAL_Delay(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0e:	f001 fbb5 	bl	800217c <HAL_Delay>
    		modem_at_cmd(msg2,(int)strlen(msg2));
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <User_Process+0x228>)
 8000a14:	681c      	ldr	r4, [r3, #0]
 8000a16:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <User_Process+0x228>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fbe0 	bl	80001e0 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4620      	mov	r0, r4
 8000a26:	f7ff fed5 	bl	80007d4 <modem_at_cmd>
    		printf("Inviato EUI\r\n");
 8000a2a:	4838      	ldr	r0, [pc, #224]	; (8000b0c <User_Process+0x22c>)
 8000a2c:	f005 f952 	bl	8005cd4 <puts>
    		HAL_Delay(1000);
 8000a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a34:	f001 fba2 	bl	800217c <HAL_Delay>
    		//	HAL_Delay(1000);
    		//	modem_at_cmd(msg_at_appeui,(int)strlen(msg_at_appeui));
    		//	printf("Inviato band\r\n");


    		modem_at_cmd(msg3,(int)strlen(msg3));
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <User_Process+0x230>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <User_Process+0x230>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbcd 	bl	80001e0 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f7ff fec2 	bl	80007d4 <modem_at_cmd>
    		printf("Inviato AK\r\n");
 8000a50:	4830      	ldr	r0, [pc, #192]	; (8000b14 <User_Process+0x234>)
 8000a52:	f005 f93f 	bl	8005cd4 <puts>
    		HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f001 fb8f 	bl	800217c <HAL_Delay>
    			modem_at_cmd("AT+DC=0",7);
 8000a5e:	2107      	movs	r1, #7
 8000a60:	482d      	ldr	r0, [pc, #180]	; (8000b18 <User_Process+0x238>)
 8000a62:	f7ff feb7 	bl	80007d4 <modem_at_cmd>
    		  	printf("Disabled DUTY Cycle\r\n");
 8000a66:	482d      	ldr	r0, [pc, #180]	; (8000b1c <User_Process+0x23c>)
 8000a68:	f005 f934 	bl	8005cd4 <puts>
    		//  	printf("Enabled ADR\r\n");
    	//	    modem_at_cmd(msg9,(int)strlen(msg9));
    	//		  	    printf("Inviato JOIN Delay RX1\r\n");
    	//		  	    modem_at_cmd(msg10,(int)strlen(msg10));
    	//		  	    printf("Inviato JOIN Delay RX2\r\n");
    			  	modem_at_cmd(msg4,(int)strlen(msg4));
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <User_Process+0x240>)
 8000a6e:	681c      	ldr	r4, [r3, #0]
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <User_Process+0x240>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fbb3 	bl	80001e0 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f7ff fea8 	bl	80007d4 <modem_at_cmd>

    		printf("Inviato JOIN\r\n");
 8000a84:	4827      	ldr	r0, [pc, #156]	; (8000b24 <User_Process+0x244>)
 8000a86:	f005 f925 	bl	8005cd4 <puts>
    		HAL_Delay(1000);
 8000a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8e:	f001 fb75 	bl	800217c <HAL_Delay>
    		wait4join();
 8000a92:	f7ff fef7 	bl	8000884 <wait4join>
    		HAL_Delay(1000);
 8000a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9a:	f001 fb6f 	bl	800217c <HAL_Delay>
    		//	modem_at_cmd(msg5,(int)strlen(msg5));
    		//	printf("Inviato send\r\n");
    		HAL_Delay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f001 fb6b 	bl	800217c <HAL_Delay>
    		modem_at_cmd(msg_ascii,(int)strlen(msg_ascii));
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <User_Process+0x248>)
 8000aa8:	681c      	ldr	r4, [r3, #0]
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <User_Process+0x248>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb96 	bl	80001e0 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f7ff fe8b 	bl	80007d4 <modem_at_cmd>
    		printf("Inviato send msg_not_ascii\r\n");
 8000abe:	481b      	ldr	r0, [pc, #108]	; (8000b2c <User_Process+0x24c>)
 8000ac0:	f005 f908 	bl	8005cd4 <puts>

    		printf("Initialization..\r\n");
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <User_Process+0x250>)
 8000ac6:	f005 f905 	bl	8005cd4 <puts>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <User_Process+0x210>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd98      	pop	{r3, r4, r7, pc}
 8000ad4:	2000001c 	.word	0x2000001c
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000001 	.word	0x20000001
 8000ae0:	200000fc 	.word	0x200000fc
 8000ae4:	20000105 	.word	0x20000105
 8000ae8:	20000106 	.word	0x20000106
 8000aec:	20000102 	.word	0x20000102
 8000af0:	200000c1 	.word	0x200000c1
 8000af4:	080068fc 	.word	0x080068fc
 8000af8:	20000004 	.word	0x20000004
 8000afc:	08006910 	.word	0x08006910
 8000b00:	20000018 	.word	0x20000018
 8000b04:	0800691c 	.word	0x0800691c
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	0800692c 	.word	0x0800692c
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	0800693c 	.word	0x0800693c
 8000b18:	08006948 	.word	0x08006948
 8000b1c:	08006950 	.word	0x08006950
 8000b20:	20000010 	.word	0x20000010
 8000b24:	08006968 	.word	0x08006968
 8000b28:	20000014 	.word	0x20000014
 8000b2c:	08006978 	.word	0x08006978
 8000b30:	08006994 	.word	0x08006994

08000b34 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <BSP_PB_Callback+0x1c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200000c1 	.word	0x200000c1

08000b54 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b095      	sub	sp, #84	; 0x54
 8000b58:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <Add_Sample_Service+0xcc>)
 8000b5c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <Add_Sample_Service+0xd0>)
 8000b68:	f107 0414 	add.w	r4, r7, #20
 8000b6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <Add_Sample_Service+0xd4>)
 8000b74:	1d3c      	adds	r4, r7, #4
 8000b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000b7c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <Add_Sample_Service+0xd8>)
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2307      	movs	r3, #7
 8000b86:	2201      	movs	r2, #1
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f003 fd8f 	bl	80046ac <aci_gatt_add_serv>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d136      	bne.n	8000c0a <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <Add_Sample_Service+0xd8>)
 8000b9e:	8818      	ldrh	r0, [r3, #0]
 8000ba0:	f107 0214 	add.w	r2, r7, #20
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <Add_Sample_Service+0xdc>)
 8000ba6:	9305      	str	r3, [sp, #20]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	9304      	str	r3, [sp, #16]
 8000bac:	2310      	movs	r3, #16
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	2310      	movs	r3, #16
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	f003 fdfd 	bl	80047be <aci_gatt_add_char>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000bca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11d      	bne.n	8000c0e <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <Add_Sample_Service+0xd8>)
 8000bd4:	8818      	ldrh	r0, [r3, #0]
 8000bd6:	1d3a      	adds	r2, r7, #4
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <Add_Sample_Service+0xe0>)
 8000bda:	9305      	str	r3, [sp, #20]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9304      	str	r3, [sp, #16]
 8000be0:	2310      	movs	r3, #16
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	2300      	movs	r3, #0
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	230c      	movs	r3, #12
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f003 fde3 	bl	80047be <aci_gatt_add_char>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e005      	b.n	8000c16 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000c12:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8000c14:	2347      	movs	r3, #71	; 0x47
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	373c      	adds	r7, #60	; 0x3c
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	080069a8 	.word	0x080069a8
 8000c24:	080069b8 	.word	0x080069b8
 8000c28:	080069c8 	.word	0x080069c8
 8000c2c:	2000010c 	.word	0x2000010c
 8000c30:	2000010e 	.word	0x2000010e
 8000c34:	20000110 	.word	0x20000110

08000c38 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08f      	sub	sp, #60	; 0x3c
 8000c3c:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <Make_Connection+0xc0>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d132      	bne.n	8000cac <Make_Connection+0x74>

    printf("Client Create Connection\n");
 8000c46:	482d      	ldr	r0, [pc, #180]	; (8000cfc <Make_Connection+0xc4>)
 8000c48:	f005 f844 	bl	8005cd4 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000c4c:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <Make_Connection+0xc8>)
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c56:	6018      	str	r0, [r3, #0]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f001 f811 	bl	8001c84 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c6a:	9206      	str	r2, [sp, #24]
 8000c6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c70:	9205      	str	r2, [sp, #20]
 8000c72:	223c      	movs	r2, #60	; 0x3c
 8000c74:	9204      	str	r2, [sp, #16]
 8000c76:	2200      	movs	r2, #0
 8000c78:	9203      	str	r2, [sp, #12]
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	9202      	str	r2, [sp, #8]
 8000c7e:	2228      	movs	r2, #40	; 0x28
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	9200      	str	r2, [sp, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c90:	f003 fc95 	bl	80045be <aci_gap_create_connection>
 8000c94:	4603      	mov	r3, r0
 8000c96:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d027      	beq.n	8000cee <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 8000c9e:	4819      	ldr	r0, [pc, #100]	; (8000d04 <Make_Connection+0xcc>)
 8000ca0:	f005 f818 	bl	8005cd4 <puts>
      HAL_Delay(100);
 8000ca4:	2064      	movs	r0, #100	; 0x64
 8000ca6:	f001 fa69 	bl	800217c <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000caa:	e020      	b.n	8000cee <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <Make_Connection+0xd0>)
 8000cae:	463c      	mov	r4, r7
 8000cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb2:	c407      	stmia	r4!, {r0, r1, r2}
 8000cb4:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f004 f89a 	bl	8004df2 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9306      	str	r3, [sp, #24]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	9305      	str	r3, [sp, #20]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9303      	str	r3, [sp, #12]
 8000cce:	463b      	mov	r3, r7
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	230d      	movs	r3, #13
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f003 fb29 	bl	800433c <aci_gap_set_discoverable>
 8000cea:	4603      	mov	r3, r0
 8000cec:	75fb      	strb	r3, [r7, #23]
}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd90      	pop	{r4, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000001 	.word	0x20000001
 8000cfc:	080069d8 	.word	0x080069d8
 8000d00:	08006a18 	.word	0x08006a18
 8000d04:	080069f4 	.word	0x080069f4
 8000d08:	08006a20 	.word	0x08006a20

08000d0c <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <startReadTXCharHandle+0x40>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d112      	bne.n	8000d42 <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <startReadTXCharHandle+0x44>)
 8000d1e:	463c      	mov	r4, r7
 8000d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <startReadTXCharHandle+0x48>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	b298      	uxth	r0, r3
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2302      	movs	r3, #2
 8000d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d36:	2101      	movs	r1, #1
 8000d38:	f003 fe0c 	bl	8004954 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <startReadTXCharHandle+0x40>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
  }
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000103 	.word	0x20000103
 8000d50:	080069b8 	.word	0x080069b8
 8000d54:	20000100 	.word	0x20000100

08000d58 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <startReadRXCharHandle+0x40>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d112      	bne.n	8000d8e <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <startReadRXCharHandle+0x44>)
 8000d6a:	463c      	mov	r4, r7
 8000d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <startReadRXCharHandle+0x48>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b298      	uxth	r0, r3
 8000d78:	463b      	mov	r3, r7
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d82:	2101      	movs	r1, #1
 8000d84:	f003 fde6 	bl	8004954 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <startReadRXCharHandle+0x40>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000104 	.word	0x20000104
 8000d9c:	080069c8 	.word	0x080069c8
 8000da0:	20000100 	.word	0x20000100

08000da4 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 ff93 	bl	8001cdc <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e009      	b.n	8000dd0 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 ff01 	bl	8005bcc <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf1      	blt.n	8000dbc <receiveData+0x18>
  }
  fflush(stdout);
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <receiveData+0x48>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fcb6 	bl	8005750 <fflush>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000040 	.word	0x20000040

08000df0 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000df6:	2301      	movs	r3, #1
 8000df8:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8000dfa:	f001 f9b3 	bl	8002164 <HAL_GetTick>
 8000dfe:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000e00:	e008      	b.n	8000e14 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000e02:	f001 f9af 	bl	8002164 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d80e      	bhi.n	8000e32 <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <enableNotification+0x54>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <enableNotification+0x58>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	3302      	adds	r3, #2
 8000e20:	b299      	uxth	r1, r3
 8000e22:	463b      	mov	r3, r7
 8000e24:	2202      	movs	r2, #2
 8000e26:	f003 fe23 	bl	8004a70 <aci_gatt_write_charac_descriptor>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b46      	cmp	r3, #70	; 0x46
 8000e2e:	d0e8      	beq.n	8000e02 <enableNotification+0x12>
 8000e30:	e000      	b.n	8000e34 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000e32:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <enableNotification+0x5c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000100 	.word	0x20000100
 8000e48:	20000108 	.word	0x20000108
 8000e4c:	20000102 	.word	0x20000102

08000e50 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	603a      	str	r2, [r7, #0]
 8000e5a:	80fb      	strh	r3, [r7, #6]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000e60:	88fa      	ldrh	r2, [r7, #6]
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <Attribute_Modified_CB+0x4c>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d105      	bne.n	8000e78 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	f7ff ff97 	bl	8000da4 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000e76:	e00c      	b.n	8000e92 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <Attribute_Modified_CB+0x50>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	3302      	adds	r3, #2
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d106      	bne.n	8000e92 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <Attribute_Modified_CB+0x54>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000110 	.word	0x20000110
 8000ea0:	2000010e 	.word	0x2000010e
 8000ea4:	20000102 	.word	0x20000102

08000ea8 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <GAP_ConnectionComplete_CB+0x54>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <GAP_ConnectionComplete_CB+0x58>)
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <GAP_ConnectionComplete_CB+0x5c>)
 8000ec2:	f004 fe6b 	bl	8005b9c <iprintf>
  for(int i = 5; i > 0; i--){
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	e00a      	b.n	8000ee2 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <GAP_ConnectionComplete_CB+0x60>)
 8000ed8:	f004 fe60 	bl	8005b9c <iprintf>
  for(int i = 5; i > 0; i--){
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dcf1      	bgt.n	8000ecc <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <GAP_ConnectionComplete_CB+0x64>)
 8000ef0:	f004 fe54 	bl	8005b9c <iprintf>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000fc 	.word	0x200000fc
 8000f00:	20000100 	.word	0x20000100
 8000f04:	08006a30 	.word	0x08006a30
 8000f08:	08006a48 	.word	0x08006a48
 8000f0c:	08006a50 	.word	0x08006a50

08000f10 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <GAP_DisconnectionComplete_CB+0x38>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <GAP_DisconnectionComplete_CB+0x3c>)
 8000f1c:	f004 feda 	bl	8005cd4 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <GAP_DisconnectionComplete_CB+0x40>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <GAP_DisconnectionComplete_CB+0x44>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <GAP_DisconnectionComplete_CB+0x48>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <GAP_DisconnectionComplete_CB+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <GAP_DisconnectionComplete_CB+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <GAP_DisconnectionComplete_CB+0x54>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000fc 	.word	0x200000fc
 8000f4c:	08006a58 	.word	0x08006a58
 8000f50:	2000001c 	.word	0x2000001c
 8000f54:	20000102 	.word	0x20000102
 8000f58:	20000103 	.word	0x20000103
 8000f5c:	20000104 	.word	0x20000104
 8000f60:	20000105 	.word	0x20000105
 8000f64:	20000106 	.word	0x20000106

08000f68 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	603a      	str	r2, [r7, #0]
 8000f72:	80fb      	strh	r3, [r7, #6]
 8000f74:	460b      	mov	r3, r1
 8000f76:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <GATT_Notification_CB+0x30>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d104      	bne.n	8000f8e <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000f84:	797b      	ldrb	r3, [r7, #5]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f7ff ff0b 	bl	8000da4 <receiveData>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000108 	.word	0x20000108

08000f9c <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	3301      	adds	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	f040 80e2 	bne.w	800117c <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2bff      	cmp	r3, #255	; 0xff
 8000fbe:	d021      	beq.n	8001004 <user_notify+0x68>
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	f300 80e0 	bgt.w	8001186 <user_notify+0x1ea>
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d002      	beq.n	8000fd0 <user_notify+0x34>
 8000fca:	2b3e      	cmp	r3, #62	; 0x3e
 8000fcc:	d003      	beq.n	8000fd6 <user_notify+0x3a>
 8000fce:	e0da      	b.n	8001186 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000fd0:	f7ff ff9e 	bl	8000f10 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000fd4:	e0d7      	b.n	8001186 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	3302      	adds	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 80cd 	bne.w	8001180 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1d5a      	adds	r2, r3, #5
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f7ff ff54 	bl	8000ea8 <GAP_ConnectionComplete_CB>
        }
        break;
 8001000:	bf00      	nop
      }
    }
    break;
 8001002:	e0bd      	b.n	8001180 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	3302      	adds	r3, #2
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8001014:	2b11      	cmp	r3, #17
 8001016:	f200 80b5 	bhi.w	8001184 <user_notify+0x1e8>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <user_notify+0x84>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	08001069 	.word	0x08001069
 8001024:	08001185 	.word	0x08001185
 8001028:	08001185 	.word	0x08001185
 800102c:	08001185 	.word	0x08001185
 8001030:	08001185 	.word	0x08001185
 8001034:	08001185 	.word	0x08001185
 8001038:	08001185 	.word	0x08001185
 800103c:	08001185 	.word	0x08001185
 8001040:	08001185 	.word	0x08001185
 8001044:	08001185 	.word	0x08001185
 8001048:	08001185 	.word	0x08001185
 800104c:	08001185 	.word	0x08001185
 8001050:	08001185 	.word	0x08001185
 8001054:	08001185 	.word	0x08001185
 8001058:	080010a9 	.word	0x080010a9
 800105c:	08001135 	.word	0x08001135
 8001060:	08001185 	.word	0x08001185
 8001064:	080010cb 	.word	0x080010cb

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <user_notify+0x1f0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10d      	bne.n	800108c <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	3302      	adds	r3, #2
 8001074:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	885b      	ldrh	r3, [r3, #2]
 800107a:	b298      	uxth	r0, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	7919      	ldrb	r1, [r3, #4]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3307      	adds	r3, #7
 8001084:	461a      	mov	r2, r3
 8001086:	f7ff fee3 	bl	8000e50 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 800108a:	e076      	b.n	800117a <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	3302      	adds	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	885b      	ldrh	r3, [r3, #2]
 8001096:	b298      	uxth	r0, r3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	7919      	ldrb	r1, [r3, #4]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	3305      	adds	r3, #5
 80010a0:	461a      	mov	r2, r3
 80010a2:	f7ff fed5 	bl	8000e50 <Attribute_Modified_CB>
        break;
 80010a6:	e068      	b.n	800117a <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	3302      	adds	r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80010b4:	b298      	uxth	r0, r3
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	3b02      	subs	r3, #2
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3305      	adds	r3, #5
 80010c2:	461a      	mov	r2, r3
 80010c4:	f7ff ff50 	bl	8000f68 <GATT_Notification_CB>
        }
        break;
 80010c8:	e057      	b.n	800117a <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <user_notify+0x1f4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d150      	bne.n	8001174 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	3302      	adds	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <user_notify+0x1f8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d011      	beq.n	8001106 <user_notify+0x16a>
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <user_notify+0x1fc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10c      	bne.n	8001106 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <user_notify+0x200>)
 80010f6:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <user_notify+0x200>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4828      	ldr	r0, [pc, #160]	; (80011a0 <user_notify+0x204>)
 8001100:	f004 fd4c 	bl	8005b9c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8001104:	e036      	b.n	8001174 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <user_notify+0x208>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d031      	beq.n	8001174 <user_notify+0x1d8>
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <user_notify+0x20c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d12c      	bne.n	8001174 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <user_notify+0x210>)
 8001124:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <user_notify+0x210>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4820      	ldr	r0, [pc, #128]	; (80011b0 <user_notify+0x214>)
 800112e:	f004 fd35 	bl	8005b9c <iprintf>
        break;
 8001132:	e01f      	b.n	8001174 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <user_notify+0x1f4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d11d      	bne.n	8001178 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <user_notify+0x1f8>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <user_notify+0x1bc>
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <user_notify+0x1fc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <user_notify+0x1fc>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8001156:	e00f      	b.n	8001178 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <user_notify+0x208>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <user_notify+0x1dc>
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <user_notify+0x20c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d105      	bne.n	8001178 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <user_notify+0x20c>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
        break;
 8001172:	e001      	b.n	8001178 <user_notify+0x1dc>
        break;
 8001174:	bf00      	nop
 8001176:	e005      	b.n	8001184 <user_notify+0x1e8>
        break;
 8001178:	bf00      	nop
      }
    }
    break;
 800117a:	e003      	b.n	8001184 <user_notify+0x1e8>
    return;
 800117c:	bf00      	nop
 800117e:	e002      	b.n	8001186 <user_notify+0x1ea>
    break;
 8001180:	bf00      	nop
 8001182:	e000      	b.n	8001186 <user_notify+0x1ea>
    break;
 8001184:	bf00      	nop
  }
}
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000c0 	.word	0x200000c0
 8001190:	20000001 	.word	0x20000001
 8001194:	20000103 	.word	0x20000103
 8001198:	20000105 	.word	0x20000105
 800119c:	20000108 	.word	0x20000108
 80011a0:	08006a68 	.word	0x08006a68
 80011a4:	20000104 	.word	0x20000104
 80011a8:	20000106 	.word	0x20000106
 80011ac:	2000010a 	.word	0x2000010a
 80011b0:	08006a80 	.word	0x08006a80

080011b4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HCI_TL_SPI_Init+0x88>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HCI_TL_SPI_Init+0x88>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HCI_TL_SPI_Init+0x88>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4619      	mov	r1, r3
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <HCI_TL_SPI_Init+0x8c>)
 80011ee:	f001 f94d 	bl	800248c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HCI_TL_SPI_Init+0x8c>)
 800120c:	f001 f93e 	bl	800248c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001210:	2302      	movs	r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <HCI_TL_SPI_Init+0x8c>)
 8001228:	f001 f930 	bl	800248c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 800122c:	f000 fb3c 	bl	80018a8 <BSP_SPI1_Init>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001248:	2101      	movs	r1, #1
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <HCI_TL_SPI_DeInit+0x24>)
 800124c:	f001 faa2 	bl	8002794 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001250:	2102      	movs	r1, #2
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HCI_TL_SPI_DeInit+0x24>)
 8001254:	f001 fa9e 	bl	8002794 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <HCI_TL_SPI_DeInit+0x24>)
 800125e:	f001 fa99 	bl	8002794 <HAL_GPIO_DeInit>
  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000

0800126c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HCI_TL_SPI_Reset+0x38>)
 8001276:	f001 fb89 	bl	800298c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <HCI_TL_SPI_Reset+0x38>)
 8001282:	f001 fb83 	bl	800298c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001286:	2005      	movs	r0, #5
 8001288:	f000 ff78 	bl	800217c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <HCI_TL_SPI_Reset+0x38>)
 8001294:	f001 fb7a 	bl	800298c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001298:	2005      	movs	r0, #5
 800129a:	f000 ff6f 	bl	800217c <HAL_Delay>
  return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40020000 	.word	0x40020000

080012a8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80012b8:	23ff      	movs	r3, #255	; 0xff
 80012ba:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80012bc:	4a25      	ldr	r2, [pc, #148]	; (8001354 <HCI_TL_SPI_Receive+0xac>)
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c6:	6018      	str	r0, [r3, #0]
 80012c8:	3304      	adds	r3, #4
 80012ca:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2102      	movs	r1, #2
 80012d0:	4821      	ldr	r0, [pc, #132]	; (8001358 <HCI_TL_SPI_Receive+0xb0>)
 80012d2:	f001 fb5b 	bl	800298c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2205      	movs	r2, #5
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fb11 	bl	8001908 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80012e6:	7b3b      	ldrb	r3, [r7, #12]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d129      	bne.n	8001340 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80012ec:	7c3b      	ldrb	r3, [r7, #16]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80012fc:	8bfb      	ldrh	r3, [r7, #30]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01e      	beq.n	8001340 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001302:	8bfa      	ldrh	r2, [r7, #30]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	429a      	cmp	r2, r3
 8001308:	d901      	bls.n	800130e <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800130e:	2300      	movs	r3, #0
 8001310:	777b      	strb	r3, [r7, #29]
 8001312:	e010      	b.n	8001336 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001314:	f107 011b 	add.w	r1, r7, #27
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	2201      	movs	r2, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f000 faf2 	bl	8001908 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001324:	7f7b      	ldrb	r3, [r7, #29]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	7efa      	ldrb	r2, [r7, #27]
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001330:	7f7b      	ldrb	r3, [r7, #29]
 8001332:	3301      	adds	r3, #1
 8001334:	777b      	strb	r3, [r7, #29]
 8001336:	7f7b      	ldrb	r3, [r7, #29]
 8001338:	b29b      	uxth	r3, r3
 800133a:	8bfa      	ldrh	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8e9      	bhi.n	8001314 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2102      	movs	r1, #2
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <HCI_TL_SPI_Receive+0xb0>)
 8001346:	f001 fb21 	bl	800298c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800134a:	7f7b      	ldrb	r3, [r7, #29]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	08006a98 	.word	0x08006a98
 8001358:	40020000 	.word	0x40020000

0800135c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HCI_TL_SPI_Send+0x9c>)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001378:	f000 fef4 	bl	8002164 <HAL_GetTick>
 800137c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2102      	movs	r1, #2
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <HCI_TL_SPI_Send+0xa0>)
 8001388:	f001 fb00 	bl	800298c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800138c:	f107 0108 	add.w	r1, r7, #8
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2205      	movs	r2, #5
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fab6 	bl	8001908 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 800139c:	7a3b      	ldrb	r3, [r7, #8]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d10f      	bne.n	80013c2 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80013a2:	7a7b      	ldrb	r3, [r7, #9]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d806      	bhi.n	80013ba <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4913      	ldr	r1, [pc, #76]	; (8001400 <HCI_TL_SPI_Send+0xa4>)
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 faa8 	bl	8001908 <BSP_SPI1_SendRecv>
 80013b8:	e006      	b.n	80013c8 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80013ba:	f06f 0301 	mvn.w	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	e002      	b.n	80013c8 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2102      	movs	r1, #2
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <HCI_TL_SPI_Send+0xa0>)
 80013ce:	f001 fadd 	bl	800298c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80013d2:	f000 fec7 	bl	8002164 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d903      	bls.n	80013e8 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 80013e0:	f06f 0302 	mvn.w	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
      break;
 80013e6:	e002      	b.n	80013ee <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dbc7      	blt.n	800137e <HCI_TL_SPI_Send+0x22>

  return result;
 80013ee:	69fb      	ldr	r3, [r7, #28]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08006aa0 	.word	0x08006aa0
 80013fc:	40020000 	.word	0x40020000
 8001400:	2000011c 	.word	0x2000011c

08001404 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001408:	2101      	movs	r1, #1
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <IsDataAvailable+0x1c>)
 800140c:	f001 faa6 	bl	800295c <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020000 	.word	0x40020000

08001424 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <hci_tl_lowlevel_init+0x54>)
 800142c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <hci_tl_lowlevel_init+0x58>)
 8001430:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <hci_tl_lowlevel_init+0x5c>)
 8001434:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <hci_tl_lowlevel_init+0x60>)
 8001438:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <hci_tl_lowlevel_init+0x64>)
 800143c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <hci_tl_lowlevel_init+0x68>)
 8001440:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fdf1 	bl	800502c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800144a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800144e:	4810      	ldr	r0, [pc, #64]	; (8001490 <hci_tl_lowlevel_init+0x6c>)
 8001450:	f000 ffe3 	bl	800241a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <hci_tl_lowlevel_init+0x70>)
 8001456:	2100      	movs	r1, #0
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <hci_tl_lowlevel_init+0x6c>)
 800145a:	f000 ffc4 	bl	80023e6 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	f000 ff89 	bl	800237a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001468:	2006      	movs	r0, #6
 800146a:	f000 ffa2 	bl	80023b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	080011b5 	.word	0x080011b5
 800147c:	08001245 	.word	0x08001245
 8001480:	0800135d 	.word	0x0800135d
 8001484:	080012a9 	.word	0x080012a9
 8001488:	0800126d 	.word	0x0800126d
 800148c:	08001949 	.word	0x08001949
 8001490:	20000114 	.word	0x20000114
 8001494:	08001499 	.word	0x08001499

08001498 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800149c:	e005      	b.n	80014aa <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800149e:	2000      	movs	r0, #0
 80014a0:	f003 ff2a 	bl	80052f8 <hci_notify_asynch_evt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80014aa:	f7ff ffab 	bl	8001404 <IsDataAvailable>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f4      	bne.n	800149e <hci_tl_lowlevel_isr+0x6>
 80014b4:	e000      	b.n	80014b8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80014b6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80014b8:	bd80      	pop	{r7, pc}

080014ba <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014be:	f000 fdeb 	bl	8002098 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014c2:	f000 f809 	bl	80014d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014c6:	f000 f89d 	bl	8001604 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80014ca:	f000 f871 	bl	80015b0 <MX_USART1_UART_Init>
	MX_BlueNRG_MS_Init();
 80014ce:	f7ff f861 	bl	8000594 <MX_BlueNRG_MS_Init>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		MX_BlueNRG_MS_Process();
 80014d2:	f7ff f969 	bl	80007a8 <MX_BlueNRG_MS_Process>
 80014d6:	e7fc      	b.n	80014d2 <main+0x18>

080014d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	2230      	movs	r2, #48	; 0x30
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 fa6f 	bl	80059ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <SystemClock_Config+0xd0>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <SystemClock_Config+0xd0>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <SystemClock_Config+0xd0>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <SystemClock_Config+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <SystemClock_Config+0xd4>)
 8001526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SystemClock_Config+0xd4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	2301      	movs	r3, #1
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	2310      	movs	r3, #16
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800154c:	2310      	movs	r3, #16
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001556:	2304      	movs	r3, #4
 8001558:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800155a:	2307      	movs	r3, #7
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fa46 	bl	80029f4 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800156e:	f000 f8c7 	bl	8001700 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fca8 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800159a:	f000 f8b1 	bl	8001700 <Error_Handler>
	}
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	; 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f002 f9aa 	bl	8003940 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80015f2:	f000 f885 	bl	8001700 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000021c 	.word	0x2000021c
 8001600:	40011000 	.word	0x40011000

08001604 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a35      	ldr	r2, [pc, #212]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_GPIO_Init+0xf4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <MX_GPIO_Init+0xf4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <MX_GPIO_Init+0xf4>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_GPIO_Init+0xf4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f240 3102 	movw	r1, #770	; 0x302
 8001690:	481a      	ldr	r0, [pc, #104]	; (80016fc <MX_GPIO_Init+0xf8>)
 8001692:	f001 f97b 	bl	800298c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800169e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <MX_GPIO_Init+0xf8>)
 80016ac:	f000 feee 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 80016b0:	f240 3302 	movw	r3, #770	; 0x302
 80016b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_GPIO_Init+0xf8>)
 80016ca:	f000 fedf 	bl	800248c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2006      	movs	r0, #6
 80016d4:	f000 fe51 	bl	800237a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016d8:	2006      	movs	r0, #6
 80016da:	f000 fe6a 	bl	80023b2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2028      	movs	r0, #40	; 0x28
 80016e4:	f000 fe49 	bl	800237a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e8:	2028      	movs	r0, #40	; 0x28
 80016ea:	f000 fe62 	bl	80023b2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_MspInit+0x4c>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x4c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800174a:	2007      	movs	r0, #7
 800174c:	f000 fe0a 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a28      	ldr	r2, [pc, #160]	; (800181c <HAL_UART_MspInit+0xc0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d14a      	bne.n	8001814 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_UART_MspInit+0xc4>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_UART_MspInit+0xc4>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_UART_MspInit+0xc4>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_UART_MspInit+0xc4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_UART_MspInit+0xc4>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_UART_MspInit+0xc4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_UART_MspInit+0xc4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_UART_MspInit+0xc4>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_UART_MspInit+0xc4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e4:	2307      	movs	r3, #7
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017f0:	f000 fe4c 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001804:	2307      	movs	r3, #7
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <HAL_UART_MspInit+0xcc>)
 8001810:	f000 fe3c 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40011000 	.word	0x40011000
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 fc60 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <EXTI0_IRQHandler+0x10>)
 8001886:	f000 fddd 	bl	8002444 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000114 	.word	0x20000114

08001894 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <EXTI15_10_IRQHandler+0x10>)
 800189a:	f000 fdd3 	bl	8002444 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000002c 	.word	0x2000002c

080018a8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <BSP_SPI1_Init+0x54>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <BSP_SPI1_Init+0x58>)
 80018b6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <BSP_SPI1_Init+0x5c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	4911      	ldr	r1, [pc, #68]	; (8001904 <BSP_SPI1_Init+0x5c>)
 80018c0:	600a      	str	r2, [r1, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d114      	bne.n	80018f0 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <BSP_SPI1_Init+0x54>)
 80018c8:	f001 ff61 	bl	800378e <HAL_SPI_GetState>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <BSP_SPI1_Init+0x54>)
 80018d4:	f000 f87c 	bl	80019d0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <BSP_SPI1_Init+0x54>)
 80018e0:	f000 f83a 	bl	8001958 <MX_SPI1_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80018ea:	f06f 0307 	mvn.w	r3, #7
 80018ee:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000260 	.word	0x20000260
 8001900:	40013000 	.word	0x40013000
 8001904:	200002b8 	.word	0x200002b8

08001908 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	4613      	mov	r3, r2
 8001914:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <BSP_SPI1_SendRecv+0x3c>)
 8001928:	f001 fd8f 	bl	800344a <HAL_SPI_TransmitReceive>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001932:	f06f 0305 	mvn.w	r3, #5
 8001936:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001938:	697b      	ldr	r3, [r7, #20]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000260 	.word	0x20000260

08001948 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800194c:	f000 fc0a 	bl	8002164 <HAL_GetTick>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a19      	ldr	r2, [pc, #100]	; (80019cc <MX_SPI1_Init+0x74>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001990:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2218      	movs	r2, #24
 8001996:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	220a      	movs	r2, #10
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f001 fcb7 	bl	8003324 <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40013000 	.word	0x40013000

080019d0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <SPI1_MspInit+0xc4>)
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	4a2c      	ldr	r2, [pc, #176]	; (8001a94 <SPI1_MspInit+0xc4>)
 80019e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e6:	6453      	str	r3, [r2, #68]	; 0x44
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <SPI1_MspInit+0xc4>)
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <SPI1_MspInit+0xc4>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <SPI1_MspInit+0xc4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6313      	str	r3, [r2, #48]	; 0x30
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <SPI1_MspInit+0xc4>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <SPI1_MspInit+0xc4>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <SPI1_MspInit+0xc4>)
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <SPI1_MspInit+0xc4>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4814      	ldr	r0, [pc, #80]	; (8001a98 <SPI1_MspInit+0xc8>)
 8001a48:	f000 fd20 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <SPI1_MspInit+0xc8>)
 8001a68:	f000 fd10 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <SPI1_MspInit+0xcc>)
 8001a88:	f000 fd00 	bl	800248c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab2:	f3af 8000 	nop.w
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf0      	blt.n	8001ab2 <_read+0x12>
  }

  return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e009      	b.n	8001b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fa6b 	bl	8001fd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf1      	blt.n	8001aec <_write+0x12>
  }
  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_close>:

int _close(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_isatty>:

int _isatty(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f003 fd08 	bl	80055c0 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20018000 	.word	0x20018000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	200002bc 	.word	0x200002bc
 8001be4:	20000608 	.word	0x20000608

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	; (8001c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c36:	f7ff ffd7 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f003 fe91 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7ff fc3c 	bl	80014ba <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001c50:	08006b7c 	.word	0x08006b7c
  ldr r2, =_sbss
 8001c54:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001c58:	20000608 	.word	0x20000608

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>
	...

08001c60 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <BSP_LED_Init+0x20>)
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08006ac0 	.word	0x08006ac0

08001c84 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <BSP_LED_On+0x28>)
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	2120      	movs	r1, #32
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fe76 	bl	800298c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000024 	.word	0x20000024

08001cb0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <BSP_LED_Off+0x28>)
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fe60 	bl	800298c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000024 	.word	0x20000024

08001cdc <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <BSP_LED_Toggle+0x28>)
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fe63 	bl	80029be <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000024 	.word	0x20000024

08001d08 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <LED_USER_GPIO_Init+0x7c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <LED_USER_GPIO_Init+0x7c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <LED_USER_GPIO_Init+0x7c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <LED_USER_GPIO_Init+0x7c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <LED_USER_GPIO_Init+0x7c>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <LED_USER_GPIO_Init+0x7c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2120      	movs	r1, #32
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <LED_USER_GPIO_Init+0x80>)
 8001d5c:	f000 fe16 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001d60:	2320      	movs	r3, #32
 8001d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4804      	ldr	r0, [pc, #16]	; (8001d88 <LED_USER_GPIO_Init+0x80>)
 8001d78:	f000 fb88 	bl	800248c <HAL_GPIO_Init>

}
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <BSP_PB_Init+0x94>)
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d132      	bne.n	8001e16 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <BSP_PB_Init+0x98>)
 8001db6:	441a      	add	r2, r3
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	491b      	ldr	r1, [pc, #108]	; (8001e28 <BSP_PB_Init+0x9c>)
 8001dbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 fb29 	bl	800241a <HAL_EXTI_GetHandle>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001dce:	f06f 0303 	mvn.w	r3, #3
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e01f      	b.n	8001e16 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <BSP_PB_Init+0x98>)
 8001ddc:	1898      	adds	r0, r3, r2
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <BSP_PB_Init+0xa0>)
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	461a      	mov	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	f000 fafc 	bl	80023e6 <HAL_EXTI_RegisterCallback>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001df4:	f06f 0303 	mvn.w	r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e00c      	b.n	8001e16 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001dfc:	2028      	movs	r0, #40	; 0x28
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <BSP_PB_Init+0xa4>)
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	2200      	movs	r2, #0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f000 fab6 	bl	800237a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e0e:	2328      	movs	r3, #40	; 0x28
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 face 	bl	80023b2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	08006ac4 	.word	0x08006ac4
 8001e24:	2000002c 	.word	0x2000002c
 8001e28:	08006ac8 	.word	0x08006ac8
 8001e2c:	08006acc 	.word	0x08006acc
 8001e30:	08006ad0 	.word	0x08006ad0

08001e34 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <BSP_PB_GetState+0x34>)
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fd85 	bl	800295c <HAL_GPIO_ReadPin>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000028 	.word	0x20000028

08001e6c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7fe fe5f 	bl	8000b34 <BSP_PB_Callback>
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <BUTTON_USER_GPIO_Init+0x74>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <BUTTON_USER_GPIO_Init+0x74>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <BUTTON_USER_GPIO_Init+0x74>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <BUTTON_USER_GPIO_Init+0x74>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <BUTTON_USER_GPIO_Init+0x74>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <BUTTON_USER_GPIO_Init+0x74>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <BUTTON_USER_GPIO_Init+0x78>)
 8001ee2:	f000 fad3 	bl	800248c <HAL_GPIO_Init>

}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020800 	.word	0x40020800

08001ef8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d903      	bls.n	8001f14 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f0c:	f06f 0301 	mvn.w	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e025      	b.n	8001f60 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	4914      	ldr	r1, [pc, #80]	; (8001f6c <BSP_COM_Init+0x74>)
 8001f1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f1e:	4814      	ldr	r0, [pc, #80]	; (8001f70 <BSP_COM_Init+0x78>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4403      	add	r3, r0
 8001f2a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <BSP_COM_Init+0x78>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f864 	bl	8002008 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <BSP_COM_Init+0x78>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f810 	bl	8001f74 <MX_USART2_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f5a:	f06f 0303 	mvn.w	r3, #3
 8001f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000034 	.word	0x20000034
 8001f70:	200002c0 	.word	0x200002c0

08001f74 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f001 fcc4 	bl	8003940 <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40004400 	.word	0x40004400

08001fd0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <__io_putchar+0x30>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4613      	mov	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <__io_putchar+0x34>)
 8001fe8:	1898      	adds	r0, r3, r2
 8001fea:	1d39      	adds	r1, r7, #4
 8001fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f001 fcf2 	bl	80039da <HAL_UART_Transmit>
  return ch;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000304 	.word	0x20000304
 8002004:	200002c0 	.word	0x200002c0

08002008 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <USART2_MspInit+0x88>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <USART2_MspInit+0x88>)
 800201a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <USART2_MspInit+0x88>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <USART2_MspInit+0x88>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a16      	ldr	r2, [pc, #88]	; (8002090 <USART2_MspInit+0x88>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6313      	str	r3, [r2, #48]	; 0x30
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <USART2_MspInit+0x88>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002048:	2304      	movs	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002058:	2307      	movs	r3, #7
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <USART2_MspInit+0x8c>)
 8002064:	f000 fa12 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002068:	2308      	movs	r3, #8
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002078:	2307      	movs	r3, #7
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <USART2_MspInit+0x8c>)
 8002084:	f000 fa02 	bl	800248c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_Init+0x40>)
 80020a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_Init+0x40>)
 80020ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_Init+0x40>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f94f 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fb1e 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f967 	bl	80023ce <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f000 f92f 	bl	800237a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000020 	.word	0x20000020
 8002134:	2000003c 	.word	0x2000003c
 8002138:	20000038 	.word	0x20000038

0800213c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	2000003c 	.word	0x2000003c
 8002160:	20000308 	.word	0x20000308

08002164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000308 	.word	0x20000308

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ffee 	bl	8002164 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffde 	bl	8002164 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000003c 	.word	0x2000003c

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <__NVIC_EnableIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f7ff ff8e 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff29 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff3e 	bl	800220c <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff8e 	bl	80022b8 <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5d 	bl	8002264 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff31 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffa2 	bl	8002320 <SysTick_Config>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	460b      	mov	r3, r1
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]
      break;
 8002404:	e002      	b.n	800240c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
      break;
 800240a:	bf00      	nop
  }

  return status;
 800240c:	7dfb      	ldrb	r3, [r7, #23]
}
 800240e:	4618      	mov	r0, r3
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e003      	b.n	8002436 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2201      	movs	r2, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_EXTI_IRQHandler+0x44>)
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4013      	ands	r3, r2
 8002464:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800246c:	4a06      	ldr	r2, [pc, #24]	; (8002488 <HAL_EXTI_IRQHandler+0x44>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4798      	blx	r3
    }
  }
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e159      	b.n	800275c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8148 	bne.w	8002756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a2 	beq.w	8002756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b57      	ldr	r3, [pc, #348]	; (8002774 <HAL_GPIO_Init+0x2e8>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a56      	ldr	r2, [pc, #344]	; (8002774 <HAL_GPIO_Init+0x2e8>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b54      	ldr	r3, [pc, #336]	; (8002774 <HAL_GPIO_Init+0x2e8>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_GPIO_Init+0x2ec>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a49      	ldr	r2, [pc, #292]	; (800277c <HAL_GPIO_Init+0x2f0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x202>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a48      	ldr	r2, [pc, #288]	; (8002780 <HAL_GPIO_Init+0x2f4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x1fe>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a47      	ldr	r2, [pc, #284]	; (8002784 <HAL_GPIO_Init+0x2f8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x1fa>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a46      	ldr	r2, [pc, #280]	; (8002788 <HAL_GPIO_Init+0x2fc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x1f6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a45      	ldr	r2, [pc, #276]	; (800278c <HAL_GPIO_Init+0x300>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x1f2>
 800267a:	2304      	movs	r3, #4
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x204>
 800267e:	2307      	movs	r3, #7
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x204>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x204>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x204>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x204>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4935      	ldr	r1, [pc, #212]	; (8002778 <HAL_GPIO_Init+0x2ec>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <HAL_GPIO_Init+0x304>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <HAL_GPIO_Init+0x304>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_GPIO_Init+0x304>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <HAL_GPIO_Init+0x304>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_GPIO_Init+0x304>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_GPIO_Init+0x304>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_GPIO_Init+0x304>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_GPIO_Init+0x304>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f aea2 	bls.w	80024a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40013800 	.word	0x40013800
 800277c:	40020000 	.word	0x40020000
 8002780:	40020400 	.word	0x40020400
 8002784:	40020800 	.word	0x40020800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e0bb      	b.n	8002928 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	f040 80ab 	bne.w	8002922 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80027cc:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_GPIO_DeInit+0x1ac>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	4013      	ands	r3, r2
 80027ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a54      	ldr	r2, [pc, #336]	; (8002944 <HAL_GPIO_DeInit+0x1b0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_DeInit+0x96>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_GPIO_DeInit+0x1b4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_DeInit+0x92>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_GPIO_DeInit+0x1b8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_DeInit+0x8e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a51      	ldr	r2, [pc, #324]	; (8002950 <HAL_GPIO_DeInit+0x1bc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_DeInit+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a50      	ldr	r2, [pc, #320]	; (8002954 <HAL_GPIO_DeInit+0x1c0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_DeInit+0x86>
 8002816:	2304      	movs	r3, #4
 8002818:	e008      	b.n	800282c <HAL_GPIO_DeInit+0x98>
 800281a:	2307      	movs	r3, #7
 800281c:	e006      	b.n	800282c <HAL_GPIO_DeInit+0x98>
 800281e:	2303      	movs	r3, #3
 8002820:	e004      	b.n	800282c <HAL_GPIO_DeInit+0x98>
 8002822:	2302      	movs	r3, #2
 8002824:	e002      	b.n	800282c <HAL_GPIO_DeInit+0x98>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_GPIO_DeInit+0x98>
 800282a:	2300      	movs	r3, #0
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	f002 0203 	and.w	r2, r2, #3
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	4093      	lsls	r3, r2
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d132      	bne.n	80028a2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800283c:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	4944      	ldr	r1, [pc, #272]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 8002846:	4013      	ands	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800284a:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	4941      	ldr	r1, [pc, #260]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 8002854:	4013      	ands	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	43db      	mvns	r3, r3
 8002860:	493d      	ldr	r1, [pc, #244]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 8002862:	4013      	ands	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002866:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43db      	mvns	r3, r3
 800286e:	493a      	ldr	r1, [pc, #232]	; (8002958 <HAL_GPIO_DeInit+0x1c4>)
 8002870:	4013      	ands	r3, r2
 8002872:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_GPIO_DeInit+0x1ac>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	43da      	mvns	r2, r3
 8002894:	482a      	ldr	r0, [pc, #168]	; (8002940 <HAL_GPIO_DeInit+0x1ac>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	400a      	ands	r2, r1
 800289c:	3302      	adds	r3, #2
 800289e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2103      	movs	r1, #3
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	08d2      	lsrs	r2, r2, #3
 80028d8:	4019      	ands	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2103      	movs	r1, #3
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	2101      	movs	r1, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2103      	movs	r1, #3
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3301      	adds	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f af40 	bls.w	80027b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40013c00 	.word	0x40013c00

0800295c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e001      	b.n	800297e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	041a      	lsls	r2, r3, #16
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43d9      	mvns	r1, r3
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	400b      	ands	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e267      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d075      	beq.n	8002afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b85      	ldr	r3, [pc, #532]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e242      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x74>
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a75      	ldr	r2, [pc, #468]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x98>
 8002a72:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6f      	ldr	r2, [pc, #444]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6c      	ldr	r2, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	4b69      	ldr	r3, [pc, #420]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a68      	ldr	r2, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7ff fb5a 	bl	8002164 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fb56 	bl	8002164 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e207      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff fb46 	bl	8002164 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff fb42 	bl	8002164 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1f3      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1c7      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4937      	ldr	r1, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b64:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <HAL_RCC_OscConfig+0x244>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7ff fafb 	bl	8002164 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7ff faf7 	bl	8002164 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1a8      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4925      	ldr	r1, [pc, #148]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_OscConfig+0x244>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff fada 	bl	8002164 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7ff fad6 	bl	8002164 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e187      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d036      	beq.n	8002c4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_RCC_OscConfig+0x248>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7ff faba 	bl	8002164 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7ff fab6 	bl	8002164 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e167      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x200>
 8002c12:	e01b      	b.n	8002c4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_OscConfig+0x248>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff faa3 	bl	8002164 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	e00e      	b.n	8002c40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c22:	f7ff fa9f 	bl	8002164 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d907      	bls.n	8002c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e150      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470000 	.word	0x42470000
 8002c3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b88      	ldr	r3, [pc, #544]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ea      	bne.n	8002c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8097 	beq.w	8002d88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a7c      	ldr	r2, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b77      	ldr	r3, [pc, #476]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fa5f 	bl	8002164 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7ff fa5b 	bl	8002164 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e10c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x2ea>
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a63      	ldr	r2, [pc, #396]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCC_OscConfig+0x324>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x30c>
 8002ce6:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a5e      	ldr	r2, [pc, #376]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	4b5c      	ldr	r3, [pc, #368]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a5b      	ldr	r2, [pc, #364]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0x324>
 8002d00:	4b58      	ldr	r3, [pc, #352]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a54      	ldr	r2, [pc, #336]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d12:	f023 0304 	bic.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7ff fa20 	bl	8002164 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7ff fa1c 	bl	8002164 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0cb      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ee      	beq.n	8002d28 <HAL_RCC_OscConfig+0x334>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7ff fa0a 	bl	8002164 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7ff fa06 	bl	8002164 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0b5      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ee      	bne.n	8002d54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	4a38      	ldr	r2, [pc, #224]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a1 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d05c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d141      	bne.n	8002e2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff f9da 	bl	8002164 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db4:	f7ff f9d6 	bl	8002164 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e087      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	491b      	ldr	r1, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7ff f9af 	bl	8002164 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7ff f9ab 	bl	8002164 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e05c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x416>
 8002e28:	e054      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff f998 	bl	8002164 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff f994 	bl	8002164 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e045      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x444>
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e038      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d028      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d121      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d111      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0cc      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d90c      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b65      	ldr	r3, [pc, #404]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b8      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f50:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	494d      	ldr	r1, [pc, #308]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d044      	beq.n	8003004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d119      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e06f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e067      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4934      	ldr	r1, [pc, #208]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd4:	f7ff f8c6 	bl	8002164 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fdc:	f7ff f8c2 	bl	8002164 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 020c 	and.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d1eb      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d20c      	bcs.n	800302c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e032      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4916      	ldr	r1, [pc, #88]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	490e      	ldr	r1, [pc, #56]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306a:	f000 f821 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800306e:	4602      	mov	r2, r0
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	490a      	ldr	r1, [pc, #40]	; (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	5ccb      	ldrb	r3, [r1, r3]
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f826 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023c00 	.word	0x40023c00
 80030a0:	40023800 	.word	0x40023800
 80030a4:	08006aa8 	.word	0x08006aa8
 80030a8:	20000020 	.word	0x20000020
 80030ac:	20000038 	.word	0x20000038

080030b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b094      	sub	sp, #80	; 0x50
 80030b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
 80030bc:	2300      	movs	r3, #0
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c0:	2300      	movs	r3, #0
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c8:	4b79      	ldr	r3, [pc, #484]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d00d      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x40>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	f200 80e1 	bhi.w	800329c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x34>
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x3a>
 80030e2:	e0db      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030e8:	e0db      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ea:	4b73      	ldr	r3, [pc, #460]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ee:	e0d8      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f0:	4b6f      	ldr	r3, [pc, #444]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fa:	4b6d      	ldr	r3, [pc, #436]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003106:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	099b      	lsrs	r3, r3, #6
 800310c:	2200      	movs	r2, #0
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003110:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
 800311a:	2300      	movs	r3, #0
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
 800311e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	f04f 0000 	mov.w	r0, #0
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	0159      	lsls	r1, r3, #5
 8003130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003134:	0150      	lsls	r0, r2, #5
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4621      	mov	r1, r4
 800313c:	1a51      	subs	r1, r2, r1
 800313e:	6139      	str	r1, [r7, #16]
 8003140:	4629      	mov	r1, r5
 8003142:	eb63 0301 	sbc.w	r3, r3, r1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003154:	4659      	mov	r1, fp
 8003156:	018b      	lsls	r3, r1, #6
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800315e:	4651      	mov	r1, sl
 8003160:	018a      	lsls	r2, r1, #6
 8003162:	4651      	mov	r1, sl
 8003164:	ebb2 0801 	subs.w	r8, r2, r1
 8003168:	4659      	mov	r1, fp
 800316a:	eb63 0901 	sbc.w	r9, r3, r1
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800317e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003182:	4690      	mov	r8, r2
 8003184:	4699      	mov	r9, r3
 8003186:	4623      	mov	r3, r4
 8003188:	eb18 0303 	adds.w	r3, r8, r3
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	462b      	mov	r3, r5
 8003190:	eb49 0303 	adc.w	r3, r9, r3
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031a2:	4629      	mov	r1, r5
 80031a4:	024b      	lsls	r3, r1, #9
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ac:	4621      	mov	r1, r4
 80031ae:	024a      	lsls	r2, r1, #9
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031c0:	f7fd f866 	bl	8000290 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4613      	mov	r3, r2
 80031ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031cc:	e058      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	2200      	movs	r2, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	4611      	mov	r1, r2
 80031da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fa:	0150      	lsls	r0, r2, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4641      	mov	r1, r8
 8003202:	ebb2 0a01 	subs.w	sl, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb63 0b01 	sbc.w	fp, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003218:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800321c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003220:	ebb2 040a 	subs.w	r4, r2, sl
 8003224:	eb63 050b 	sbc.w	r5, r3, fp
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	00eb      	lsls	r3, r5, #3
 8003232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003236:	00e2      	lsls	r2, r4, #3
 8003238:	4614      	mov	r4, r2
 800323a:	461d      	mov	r5, r3
 800323c:	4643      	mov	r3, r8
 800323e:	18e3      	adds	r3, r4, r3
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	464b      	mov	r3, r9
 8003244:	eb45 0303 	adc.w	r3, r5, r3
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003256:	4629      	mov	r1, r5
 8003258:	028b      	lsls	r3, r1, #10
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003260:	4621      	mov	r1, r4
 8003262:	028a      	lsls	r2, r1, #10
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	61fa      	str	r2, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	f7fd f80c 	bl	8000290 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800329a:	e002      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3750      	adds	r7, #80	; 0x50
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200

080032bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000020 	.word	0x20000020

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff0 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08006ab8 	.word	0x08006ab8

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffdc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	08006ab8 	.word	0x08006ab8

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07b      	b.n	800342e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f85d 	bl	8003436 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0104 	and.w	r1, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0210 	and.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b08c      	sub	sp, #48	; 0x30
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003458:	2301      	movs	r3, #1
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x26>
 800346c:	2302      	movs	r3, #2
 800346e:	e18a      	b.n	8003786 <HAL_SPI_TransmitReceive+0x33c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003478:	f7fe fe74 	bl	8002164 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003496:	2b01      	cmp	r3, #1
 8003498:	d00f      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x70>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a0:	d107      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x68>
 80034aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034b8:	e15b      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x82>
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034d2:	e14e      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d003      	beq.n	80034e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d178      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x10a>
 800354e:	8b7b      	ldrh	r3, [r7, #26]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d166      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003578:	e053      	b.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d11b      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x176>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x176>
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d113      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d119      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x1b8>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	b292      	uxth	r2, r2
 80035e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	1c9a      	adds	r2, r3, #2
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035fe:	2301      	movs	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003602:	f7fe fdaf 	bl	8002164 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360e:	429a      	cmp	r2, r3
 8003610:	d807      	bhi.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d003      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003620:	e0a7      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1a6      	bne.n	800357a <HAL_SPI_TransmitReceive+0x130>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1a1      	bne.n	800357a <HAL_SPI_TransmitReceive+0x130>
 8003636:	e07c      	b.n	8003732 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x1fc>
 8003640:	8b7b      	ldrh	r3, [r7, #26]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d16b      	bne.n	800371e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800366c:	e057      	b.n	800371e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11c      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x26c>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x26c>
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d114      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d119      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x2ae>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036f4:	2301      	movs	r3, #1
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036f8:	f7fe fd34 	bl	8002164 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003704:	429a      	cmp	r2, r3
 8003706:	d803      	bhi.n	8003710 <HAL_SPI_TransmitReceive+0x2c6>
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d102      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x2cc>
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800371c:	e029      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1a2      	bne.n	800366e <HAL_SPI_TransmitReceive+0x224>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d19d      	bne.n	800366e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8c0 	bl	80038bc <SPI_EndRxTxTransaction>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800374e:	e010      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	e000      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003786:	4618      	mov	r0, r3
 8003788:	3730      	adds	r7, #48	; 0x30
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379c:	b2db      	uxtb	r3, r3
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037bc:	f7fe fcd2 	bl	8002164 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	4413      	add	r3, r2
 80037ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037cc:	f7fe fcca 	bl	8002164 <HAL_GetTick>
 80037d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	015b      	lsls	r3, r3, #5
 80037d8:	0d1b      	lsrs	r3, r3, #20
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037e2:	e054      	b.n	800388e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d050      	beq.n	800388e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037ec:	f7fe fcba 	bl	8002164 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d902      	bls.n	8003802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d13d      	bne.n	800387e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381a:	d111      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	d004      	beq.n	8003830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	d107      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	d10f      	bne.n	800386a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e017      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3b01      	subs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d19b      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000020 	.word	0x20000020

080038bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <SPI_EndRxTxTransaction+0x7c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <SPI_EndRxTxTransaction+0x80>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0d5b      	lsrs	r3, r3, #21
 80038d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e6:	d112      	bne.n	800390e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ff5a 	bl	80037ac <SPI_WaitFlagStateUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e00f      	b.n	800392e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3b01      	subs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d0f2      	beq.n	800390e <SPI_EndRxTxTransaction+0x52>
 8003928:	e000      	b.n	800392c <SPI_EndRxTxTransaction+0x70>
        break;
 800392a:	bf00      	nop
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000020 	.word	0x20000020
 800393c:	165e9f81 	.word	0x165e9f81

08003940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e03f      	b.n	80039d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fef8 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f9cb 	bl	8003d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af02      	add	r7, sp, #8
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d17c      	bne.n	8003af4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_Transmit+0x2c>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e075      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit+0x3e>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e06e      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2221      	movs	r2, #33	; 0x21
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2e:	f7fe fb99 	bl	8002164 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d108      	bne.n	8003a5c <HAL_UART_Transmit+0x82>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e003      	b.n	8003a64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a6c:	e02a      	b.n	8003ac4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2200      	movs	r2, #0
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f8e2 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e036      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e007      	b.n	8003ab6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1cf      	bne.n	8003a6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f8b2 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e006      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b08a      	sub	sp, #40	; 0x28
 8003b02:	af02      	add	r7, sp, #8
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	f040 808c 	bne.w	8003c38 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_UART_Receive+0x2e>
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e084      	b.n	8003c3a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Receive+0x40>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e07d      	b.n	8003c3a <HAL_UART_Receive+0x13c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2222      	movs	r2, #34	; 0x22
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fe fb03 	bl	8002164 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Receive+0x8a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b98:	e043      	b.n	8003c22 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f84c 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e042      	b.n	8003c3a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	3302      	adds	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e01f      	b.n	8003c14 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d007      	beq.n	8003bee <HAL_UART_Receive+0xf0>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_UART_Receive+0xfe>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e008      	b.n	8003c0e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1b6      	bne.n	8003b9a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b090      	sub	sp, #64	; 0x40
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	e050      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d04c      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c62:	f7fe fa7f 	bl	8002164 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d241      	bcs.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c92:	637a      	str	r2, [r7, #52]	; 0x34
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	623a      	str	r2, [r7, #32]
 8003cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	69f9      	ldr	r1, [r7, #28]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e00f      	b.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d09f      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3740      	adds	r7, #64	; 0x40
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b0c0      	sub	sp, #256	; 0x100
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	68d9      	ldr	r1, [r3, #12]
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	ea40 0301 	orr.w	r3, r0, r1
 8003d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d78:	f021 010c 	bic.w	r1, r1, #12
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d86:	430b      	orrs	r3, r1
 8003d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	6999      	ldr	r1, [r3, #24]
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	ea40 0301 	orr.w	r3, r0, r1
 8003da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b8f      	ldr	r3, [pc, #572]	; (8003fec <UART_SetConfig+0x2cc>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d005      	beq.n	8003dc0 <UART_SetConfig+0xa0>
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <UART_SetConfig+0x2d0>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d104      	bne.n	8003dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7ff fa9c 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dc8:	e003      	b.n	8003dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dca:	f7ff fa83 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8003dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ddc:	f040 810c 	bne.w	8003ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	1891      	adds	r1, r2, r2
 8003df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dfa:	415b      	adcs	r3, r3
 8003dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e02:	4621      	mov	r1, r4
 8003e04:	eb12 0801 	adds.w	r8, r2, r1
 8003e08:	4629      	mov	r1, r5
 8003e0a:	eb43 0901 	adc.w	r9, r3, r1
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e22:	4690      	mov	r8, r2
 8003e24:	4699      	mov	r9, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	eb18 0303 	adds.w	r3, r8, r3
 8003e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e30:	462b      	mov	r3, r5
 8003e32:	eb49 0303 	adc.w	r3, r9, r3
 8003e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e4e:	460b      	mov	r3, r1
 8003e50:	18db      	adds	r3, r3, r3
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
 8003e54:	4613      	mov	r3, r2
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e64:	f7fc fa14 	bl	8000290 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	011c      	lsls	r4, r3, #4
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e90:	415b      	adcs	r3, r3
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e98:	4641      	mov	r1, r8
 8003e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb8:	4692      	mov	sl, r2
 8003eba:	469b      	mov	fp, r3
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8003ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003efa:	f7fc f9c9 	bl	8000290 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003f06:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2264      	movs	r2, #100	; 0x64
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f28:	441c      	add	r4, r3
 8003f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f44:	415b      	adcs	r3, r3
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	1851      	adds	r1, r2, r1
 8003f50:	6339      	str	r1, [r7, #48]	; 0x30
 8003f52:	4649      	mov	r1, r9
 8003f54:	414b      	adcs	r3, r1
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f64:	4659      	mov	r1, fp
 8003f66:	00cb      	lsls	r3, r1, #3
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6e:	4651      	mov	r1, sl
 8003f70:	00ca      	lsls	r2, r1, #3
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f80:	464b      	mov	r3, r9
 8003f82:	460a      	mov	r2, r1
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	18db      	adds	r3, r3, r3
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fb6:	f7fc f96b 	bl	8000290 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <UART_SetConfig+0x2d4>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0207 	and.w	r2, r3, #7
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4422      	add	r2, r4
 8003fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe8:	e105      	b.n	80041f6 <UART_SetConfig+0x4d6>
 8003fea:	bf00      	nop
 8003fec:	40011000 	.word	0x40011000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800400a:	4642      	mov	r2, r8
 800400c:	464b      	mov	r3, r9
 800400e:	1891      	adds	r1, r2, r2
 8004010:	6239      	str	r1, [r7, #32]
 8004012:	415b      	adcs	r3, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800401a:	4641      	mov	r1, r8
 800401c:	1854      	adds	r4, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb43 0501 	adc.w	r5, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004040:	464b      	mov	r3, r9
 8004042:	eb45 0303 	adc.w	r3, r5, r3
 8004046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004066:	4629      	mov	r1, r5
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004070:	4621      	mov	r1, r4
 8004072:	008a      	lsls	r2, r1, #2
 8004074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004078:	f7fc f90a 	bl	8000290 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <UART_SetConfig+0x4e4>)
 8004082:	fba3 2302 	umull	r2, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	011c      	lsls	r4, r3, #4
 800408a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	61b9      	str	r1, [r7, #24]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ac:	4641      	mov	r1, r8
 80040ae:	1851      	adds	r1, r2, r1
 80040b0:	6139      	str	r1, [r7, #16]
 80040b2:	4649      	mov	r1, r9
 80040b4:	414b      	adcs	r3, r1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c4:	4659      	mov	r1, fp
 80040c6:	00cb      	lsls	r3, r1, #3
 80040c8:	4651      	mov	r1, sl
 80040ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ce:	4651      	mov	r1, sl
 80040d0:	00ca      	lsls	r2, r1, #3
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	4642      	mov	r2, r8
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040e0:	464b      	mov	r3, r9
 80040e2:	460a      	mov	r2, r1
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004104:	4649      	mov	r1, r9
 8004106:	008b      	lsls	r3, r1, #2
 8004108:	4641      	mov	r1, r8
 800410a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800410e:	4641      	mov	r1, r8
 8004110:	008a      	lsls	r2, r1, #2
 8004112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004116:	f7fc f8bb 	bl	8000290 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4b39      	ldr	r3, [pc, #228]	; (8004204 <UART_SetConfig+0x4e4>)
 8004120:	fba3 1302 	umull	r1, r3, r3, r2
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2164      	movs	r1, #100	; 0x64
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	3332      	adds	r3, #50	; 0x32
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <UART_SetConfig+0x4e4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413e:	441c      	add	r4, r3
 8004140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004144:	2200      	movs	r2, #0
 8004146:	673b      	str	r3, [r7, #112]	; 0x70
 8004148:	677a      	str	r2, [r7, #116]	; 0x74
 800414a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800414e:	4642      	mov	r2, r8
 8004150:	464b      	mov	r3, r9
 8004152:	1891      	adds	r1, r2, r2
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	415b      	adcs	r3, r3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800415e:	4641      	mov	r1, r8
 8004160:	1851      	adds	r1, r2, r1
 8004162:	6039      	str	r1, [r7, #0]
 8004164:	4649      	mov	r1, r9
 8004166:	414b      	adcs	r3, r1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004176:	4659      	mov	r1, fp
 8004178:	00cb      	lsls	r3, r1, #3
 800417a:	4651      	mov	r1, sl
 800417c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004180:	4651      	mov	r1, sl
 8004182:	00ca      	lsls	r2, r1, #3
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	4603      	mov	r3, r0
 800418a:	4642      	mov	r2, r8
 800418c:	189b      	adds	r3, r3, r2
 800418e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	663b      	str	r3, [r7, #96]	; 0x60
 80041a4:	667a      	str	r2, [r7, #100]	; 0x64
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041b2:	4649      	mov	r1, r9
 80041b4:	008b      	lsls	r3, r1, #2
 80041b6:	4641      	mov	r1, r8
 80041b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041bc:	4641      	mov	r1, r8
 80041be:	008a      	lsls	r2, r1, #2
 80041c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041c4:	f7fc f864 	bl	8000290 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <UART_SetConfig+0x4e4>)
 80041ce:	fba3 1302 	umull	r1, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2164      	movs	r1, #100	; 0x64
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a08      	ldr	r2, [pc, #32]	; (8004204 <UART_SetConfig+0x4e4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4422      	add	r2, r4
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	bf00      	nop
 80041f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	51eb851f 	.word	0x51eb851f

08004208 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af00      	add	r7, sp, #0
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4603      	mov	r3, r0
 8004212:	71fb      	strb	r3, [r7, #7]
 8004214:	460b      	mov	r3, r1
 8004216:	71bb      	strb	r3, [r7, #6]
 8004218:	4613      	mov	r3, r2
 800421a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8004220:	79bb      	ldrb	r3, [r7, #6]
 8004222:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8004224:	797b      	ldrb	r3, [r7, #5]
 8004226:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	2207      	movs	r2, #7
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fbca 	bl	80059ca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004236:	f107 0318 	add.w	r3, r7, #24
 800423a:	2218      	movs	r2, #24
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fbc3 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004244:	233f      	movs	r3, #63	; 0x3f
 8004246:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8004248:	238a      	movs	r3, #138	; 0x8a
 800424a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8004252:	2303      	movs	r3, #3
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800425c:	2307      	movs	r3, #7
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004260:	f107 0318 	add.w	r3, r7, #24
 8004264:	2100      	movs	r1, #0
 8004266:	4618      	mov	r0, r3
 8004268:	f000 ff00 	bl	800506c <hci_send_req>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	da01      	bge.n	8004276 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8004272:	23ff      	movs	r3, #255	; 0xff
 8004274:	e014      	b.n	80042a0 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8004276:	7b3b      	ldrb	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800427c:	7b3b      	ldrb	r3, [r7, #12]
 800427e:	e00f      	b.n	80042a0 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004280:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8004284:	b29a      	uxth	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800428a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800428e:	b29a      	uxth	r2, r3
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004294:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8004298:	b29a      	uxth	r2, r3
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3730      	adds	r7, #48	; 0x30
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08e      	sub	sp, #56	; 0x38
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4603      	mov	r3, r0
 80042b6:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	2207      	movs	r2, #7
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 fb80 	bl	80059ca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80042ca:	f107 0320 	add.w	r3, r7, #32
 80042ce:	2218      	movs	r2, #24
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fb79 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80042d8:	233f      	movs	r3, #63	; 0x3f
 80042da:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80042dc:	238a      	movs	r3, #138	; 0x8a
 80042de:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 80042e0:	f107 031c 	add.w	r3, r7, #28
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 80042e6:	2301      	movs	r3, #1
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80042f0:	2307      	movs	r3, #7
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80042f4:	f107 0320 	add.w	r3, r7, #32
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 feb6 	bl	800506c <hci_send_req>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	da01      	bge.n	800430a <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8004306:	23ff      	movs	r3, #255	; 0xff
 8004308:	e014      	b.n	8004334 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800430a:	7d3b      	ldrb	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8004310:	7d3b      	ldrb	r3, [r7, #20]
 8004312:	e00f      	b.n	8004334 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004314:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8004318:	b29a      	uxth	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800431e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004328:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800432c:	b29a      	uxth	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3738      	adds	r7, #56	; 0x38
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b095      	sub	sp, #84	; 0x54
 8004340:	af00      	add	r7, sp, #0
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	461a      	mov	r2, r3
 800434a:	4623      	mov	r3, r4
 800434c:	71fb      	strb	r3, [r7, #7]
 800434e:	4603      	mov	r3, r0
 8004350:	80bb      	strh	r3, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	807b      	strh	r3, [r7, #2]
 8004356:	4613      	mov	r3, r2
 8004358:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8004360:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004364:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004368:	4413      	add	r3, r2
 800436a:	330e      	adds	r3, #14
 800436c:	2b28      	cmp	r3, #40	; 0x28
 800436e:	d901      	bls.n	8004374 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8004370:	2342      	movs	r3, #66	; 0x42
 8004372:	e0c9      	b.n	8004508 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8004374:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004378:	3350      	adds	r3, #80	; 0x50
 800437a:	443b      	add	r3, r7
 800437c:	79fa      	ldrb	r2, [r7, #7]
 800437e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004382:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004386:	3301      	adds	r3, #1
 8004388:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800438c:	88bb      	ldrh	r3, [r7, #4]
 800438e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8004390:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004394:	f107 0208 	add.w	r2, r7, #8
 8004398:	4413      	add	r3, r2
 800439a:	88ba      	ldrh	r2, [r7, #4]
 800439c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800439e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043a2:	3302      	adds	r3, #2
 80043a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80043ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043b0:	f107 0208 	add.w	r2, r7, #8
 80043b4:	4413      	add	r3, r2
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80043ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043be:	3302      	adds	r3, #2
 80043c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80043c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043c8:	3350      	adds	r3, #80	; 0x50
 80043ca:	443b      	add	r3, r7
 80043cc:	79ba      	ldrb	r2, [r7, #6]
 80043ce:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80043d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043d6:	3301      	adds	r3, #1
 80043d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80043dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043e0:	3350      	adds	r3, #80	; 0x50
 80043e2:	443b      	add	r3, r7
 80043e4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80043e8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80043ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043f0:	3301      	adds	r3, #1
 80043f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80043f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043fa:	3350      	adds	r3, #80	; 0x50
 80043fc:	443b      	add	r3, r7
 80043fe:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004402:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004406:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800440a:	3301      	adds	r3, #1
 800440c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004410:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004414:	f107 0208 	add.w	r2, r7, #8
 8004418:	4413      	add	r3, r2
 800441a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800441e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fac4 	bl	80059ae <memcpy>
  indx +=  LocalNameLen;
 8004426:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800442a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800442e:	4413      	add	r3, r2
 8004430:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8004434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004438:	3350      	adds	r3, #80	; 0x50
 800443a:	443b      	add	r3, r7
 800443c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8004440:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004444:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004448:	3301      	adds	r3, #1
 800444a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800444e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	4413      	add	r3, r2
 8004458:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800445c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800445e:	4618      	mov	r0, r3
 8004460:	f001 faa5 	bl	80059ae <memcpy>
  indx +=  ServiceUUIDLen;  
 8004464:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004468:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800446c:	4413      	add	r3, r2
 800446e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8004472:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004476:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800447a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800447e:	f107 0208 	add.w	r2, r7, #8
 8004482:	4413      	add	r3, r2
 8004484:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8004488:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800448a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800448e:	3302      	adds	r3, #2
 8004490:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8004494:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8004498:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800449c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	4413      	add	r3, r2
 80044a6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80044aa:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80044ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044b0:	3302      	adds	r3, #2
 80044b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80044b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044ba:	2218      	movs	r2, #24
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fa83 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80044c4:	233f      	movs	r3, #63	; 0x3f
 80044c6:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80044c8:	2383      	movs	r3, #131	; 0x83
 80044ca:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80044d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 80044d8:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80044e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fdbf 	bl	800506c <hci_send_req>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	da01      	bge.n	80044f8 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80044f4:	23ff      	movs	r3, #255	; 0xff
 80044f6:	e007      	b.n	8004508 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80044f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <aci_gap_set_discoverable+0x1ca>
    return status;
 8004500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004504:	e000      	b.n	8004508 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3754      	adds	r7, #84	; 0x54
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}

08004510 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b091      	sub	sp, #68	; 0x44
 8004514:	af00      	add	r7, sp, #0
 8004516:	603a      	str	r2, [r7, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
 800451e:	460b      	mov	r3, r1
 8004520:	71bb      	strb	r3, [r7, #6]
 8004522:	4613      	mov	r3, r2
 8004524:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800452a:	79bb      	ldrb	r3, [r7, #6]
 800452c:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800452e:	79bb      	ldrb	r3, [r7, #6]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	f107 030e 	add.w	r3, r7, #14
 800453a:	6814      	ldr	r4, [r2, #0]
 800453c:	6850      	ldr	r0, [r2, #4]
 800453e:	6891      	ldr	r1, [r2, #8]
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	601c      	str	r4, [r3, #0]
 8004544:	6058      	str	r0, [r3, #4]
 8004546:	6099      	str	r1, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800454a:	797b      	ldrb	r3, [r7, #5]
 800454c:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800454e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004552:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8004554:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004558:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800455c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800455e:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8004562:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004566:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800456a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800456e:	2218      	movs	r2, #24
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fa29 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004578:	233f      	movs	r3, #63	; 0x3f
 800457a:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800457c:	2386      	movs	r3, #134	; 0x86
 800457e:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8004586:	231a      	movs	r3, #26
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800458a:	f107 030b 	add.w	r3, r7, #11
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8004590:	2301      	movs	r3, #1
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8004594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fd66 	bl	800506c <hci_send_req>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	da01      	bge.n	80045aa <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80045a6:	23ff      	movs	r3, #255	; 0xff
 80045a8:	e005      	b.n	80045b6 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <aci_gap_set_auth_requirement+0xa4>
    return status;
 80045b0:	7afb      	ldrb	r3, [r7, #11]
 80045b2:	e000      	b.n	80045b6 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3744      	adds	r7, #68	; 0x44
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd90      	pop	{r4, r7, pc}

080045be <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b092      	sub	sp, #72	; 0x48
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	4603      	mov	r3, r0
 80045c8:	81fb      	strh	r3, [r7, #14]
 80045ca:	460b      	mov	r3, r1
 80045cc:	81bb      	strh	r3, [r7, #12]
 80045ce:	4613      	mov	r3, r2
 80045d0:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	f107 031d 	add.w	r3, r7, #29
 80045e4:	6811      	ldr	r1, [r2, #0]
 80045e6:	6019      	str	r1, [r3, #0]
 80045e8:	8892      	ldrh	r2, [r2, #4]
 80045ea:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 80045ec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 80045f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80045f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 80045fa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8004600:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004604:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8004606:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800460a:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 800460c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004610:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8004612:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004616:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800461c:	2218      	movs	r2, #24
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f9d2 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004626:	233f      	movs	r3, #63	; 0x3f
 8004628:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 800462a:	239c      	movs	r3, #156	; 0x9c
 800462c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 800462e:	f107 0318 	add.w	r3, r7, #24
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 8004634:	2318      	movs	r3, #24
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8004638:	230f      	movs	r3, #15
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800463c:	f107 0317 	add.w	r3, r7, #23
 8004640:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8004642:	2301      	movs	r3, #1
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fd0d 	bl	800506c <hci_send_req>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	da01      	bge.n	800465c <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004658:	23ff      	movs	r3, #255	; 0xff
 800465a:	e000      	b.n	800465e <aci_gap_create_connection+0xa0>

  return status;
 800465c:	7dfb      	ldrb	r3, [r7, #23]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3748      	adds	r7, #72	; 0x48
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b088      	sub	sp, #32
 800466a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	2218      	movs	r2, #24
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f001 f9a8 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800467a:	233f      	movs	r3, #63	; 0x3f
 800467c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800467e:	f240 1301 	movw	r3, #257	; 0x101
 8004682:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004688:	2301      	movs	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fcea 	bl	800506c <hci_send_req>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	da01      	bge.n	80046a2 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800469e:	23ff      	movs	r3, #255	; 0xff
 80046a0:	e000      	b.n	80046a4 <aci_gatt_init+0x3e>

  return status;
 80046a2:	79fb      	ldrb	r3, [r7, #7]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b090      	sub	sp, #64	; 0x40
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6039      	str	r1, [r7, #0]
 80046b4:	4611      	mov	r1, r2
 80046b6:	461a      	mov	r2, r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	71fb      	strb	r3, [r7, #7]
 80046bc:	460b      	mov	r3, r1
 80046be:	71bb      	strb	r3, [r7, #6]
 80046c0:	4613      	mov	r3, r2
 80046c2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80046ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046ce:	3340      	adds	r3, #64	; 0x40
 80046d0:	443b      	add	r3, r7
 80046d2:	79fa      	ldrb	r2, [r7, #7]
 80046d4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80046d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046dc:	3301      	adds	r3, #1
 80046de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d103      	bne.n	80046f0 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80046e8:	2302      	movs	r3, #2
 80046ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80046ee:	e002      	b.n	80046f6 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80046f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046fa:	f107 020c 	add.w	r2, r7, #12
 80046fe:	4413      	add	r3, r2
 8004700:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f951 	bl	80059ae <memcpy>
  indx +=  uuid_len;
 800470c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004714:	4413      	add	r3, r2
 8004716:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800471a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800471e:	3340      	adds	r3, #64	; 0x40
 8004720:	443b      	add	r3, r7
 8004722:	79ba      	ldrb	r2, [r7, #6]
 8004724:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004728:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800472c:	3301      	adds	r3, #1
 800472e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8004732:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004736:	3340      	adds	r3, #64	; 0x40
 8004738:	443b      	add	r3, r7
 800473a:	797a      	ldrb	r2, [r7, #5]
 800473c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8004740:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004744:	3301      	adds	r3, #1
 8004746:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800474a:	f107 0320 	add.w	r3, r7, #32
 800474e:	2203      	movs	r2, #3
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f939 	bl	80059ca <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475c:	2218      	movs	r2, #24
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f932 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004766:	233f      	movs	r3, #63	; 0x3f
 8004768:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800476a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800476e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8004770:	f107 030c 	add.w	r3, r7, #12
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8004776:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800477c:	f107 0320 	add.w	r3, r7, #32
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8004782:	2303      	movs	r3, #3
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8004786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fc6d 	bl	800506c <hci_send_req>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	da01      	bge.n	800479c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8004798:	23ff      	movs	r3, #255	; 0xff
 800479a:	e00c      	b.n	80047b6 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800479c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <aci_gatt_add_serv+0xfe>
    return resp.status;
 80047a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047a8:	e005      	b.n	80047b6 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80047aa:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	801a      	strh	r2, [r3, #0]

  return 0;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3740      	adds	r7, #64	; 0x40
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b092      	sub	sp, #72	; 0x48
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	603a      	str	r2, [r7, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	4603      	mov	r3, r0
 80047ca:	80fb      	strh	r3, [r7, #6]
 80047cc:	460b      	mov	r3, r1
 80047ce:	717b      	strb	r3, [r7, #5]
 80047d0:	4613      	mov	r3, r2
 80047d2:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80047de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047e2:	f107 020c 	add.w	r2, r7, #12
 80047e6:	4413      	add	r3, r2
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80047ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047f0:	3302      	adds	r3, #2
 80047f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 80047f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047fa:	3348      	adds	r3, #72	; 0x48
 80047fc:	443b      	add	r3, r7
 80047fe:	797a      	ldrb	r2, [r7, #5]
 8004800:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004804:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004808:	3301      	adds	r3, #1
 800480a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800480e:	797b      	ldrb	r3, [r7, #5]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d103      	bne.n	800481c <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8004814:	2302      	movs	r3, #2
 8004816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800481a:	e002      	b.n	8004822 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800481c:	2310      	movs	r3, #16
 800481e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004822:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004826:	f107 020c 	add.w	r2, r7, #12
 800482a:	4413      	add	r3, r2
 800482c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f001 f8bb 	bl	80059ae <memcpy>
  indx +=  uuid_len;
 8004838:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800483c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004840:	4413      	add	r3, r2
 8004842:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8004846:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800484a:	3348      	adds	r3, #72	; 0x48
 800484c:	443b      	add	r3, r7
 800484e:	793a      	ldrb	r2, [r7, #4]
 8004850:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004854:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004858:	3301      	adds	r3, #1
 800485a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800485e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004862:	3348      	adds	r3, #72	; 0x48
 8004864:	443b      	add	r3, r7
 8004866:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800486a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800486e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004872:	3301      	adds	r3, #1
 8004874:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8004878:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800487c:	3348      	adds	r3, #72	; 0x48
 800487e:	443b      	add	r3, r7
 8004880:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8004884:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8004888:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800488c:	3301      	adds	r3, #1
 800488e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8004892:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004896:	3348      	adds	r3, #72	; 0x48
 8004898:	443b      	add	r3, r7
 800489a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800489e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80048a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048a6:	3301      	adds	r3, #1
 80048a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80048ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048b0:	3348      	adds	r3, #72	; 0x48
 80048b2:	443b      	add	r3, r7
 80048b4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80048b8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80048bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048c0:	3301      	adds	r3, #1
 80048c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80048c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048ca:	3348      	adds	r3, #72	; 0x48
 80048cc:	443b      	add	r3, r7
 80048ce:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80048d2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80048d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80048da:	3301      	adds	r3, #1
 80048dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80048e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e4:	2203      	movs	r2, #3
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 f86e 	bl	80059ca <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80048ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048f2:	2218      	movs	r2, #24
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f867 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80048fc:	233f      	movs	r3, #63	; 0x3f
 80048fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8004900:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004904:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8004906:	f107 030c 	add.w	r3, r7, #12
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800490c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8004912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8004918:	2303      	movs	r3, #3
 800491a:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800491c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fba2 	bl	800506c <hci_send_req>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	da01      	bge.n	8004932 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800492e:	23ff      	movs	r3, #255	; 0xff
 8004930:	e00c      	b.n	800494c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8004932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <aci_gatt_add_char+0x182>
    return resp.status;
 800493a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800493e:	e005      	b.n	800494c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8004940:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8004944:	b29a      	uxth	r2, r3
 8004946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004948:	801a      	strh	r2, [r3, #0]

  return 0;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3748      	adds	r7, #72	; 0x48
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b091      	sub	sp, #68	; 0x44
 8004958:	af00      	add	r7, sp, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	461a      	mov	r2, r3
 8004962:	4623      	mov	r3, r4
 8004964:	80fb      	strh	r3, [r7, #6]
 8004966:	4603      	mov	r3, r0
 8004968:	80bb      	strh	r3, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	807b      	strh	r3, [r7, #2]
 800496e:	4613      	mov	r3, r2
 8004970:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800497c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004980:	f107 020c 	add.w	r2, r7, #12
 8004984:	4413      	add	r3, r2
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800498a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800498e:	3302      	adds	r3, #2
 8004990:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 8004994:	88bb      	ldrh	r3, [r7, #4]
 8004996:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 8004998:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800499c:	f107 020c 	add.w	r2, r7, #12
 80049a0:	4413      	add	r3, r2
 80049a2:	88ba      	ldrh	r2, [r7, #4]
 80049a4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80049a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049aa:	3302      	adds	r3, #2
 80049ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 80049b0:	887b      	ldrh	r3, [r7, #2]
 80049b2:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80049b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049b8:	f107 020c 	add.w	r2, r7, #12
 80049bc:	4413      	add	r3, r2
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80049c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049c6:	3302      	adds	r3, #2
 80049c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 80049cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049d0:	3340      	adds	r3, #64	; 0x40
 80049d2:	443b      	add	r3, r7
 80049d4:	787a      	ldrb	r2, [r7, #1]
 80049d6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80049da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049de:	3301      	adds	r3, #1
 80049e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d103      	bne.n	80049f2 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 80049ea:	2302      	movs	r3, #2
 80049ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049f0:	e002      	b.n	80049f8 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 80049f2:	2310      	movs	r3, #16
 80049f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80049f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049fc:	f107 020c 	add.w	r2, r7, #12
 8004a00:	4413      	add	r3, r2
 8004a02:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 ffd0 	bl	80059ae <memcpy>
  indx +=  uuid_len;
 8004a0e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004a12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a16:	4413      	add	r3, r2
 8004a18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a20:	2218      	movs	r2, #24
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 ffd0 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004a2a:	233f      	movs	r3, #63	; 0x3f
 8004a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 8004a2e:	f44f 738b 	mov.w	r3, #278	; 0x116
 8004a32:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8004a3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 8004a40:	230f      	movs	r3, #15
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8004a44:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8004a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fb09 	bl	800506c <hci_send_req>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da01      	bge.n	8004a64 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 8004a60:	23ff      	movs	r3, #255	; 0xff
 8004a62:	e001      	b.n	8004a68 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 8004a64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3744      	adds	r7, #68	; 0x44
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}

08004a70 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b0ac      	sub	sp, #176	; 0xb0
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	4603      	mov	r3, r0
 8004a7a:	81fb      	strh	r3, [r7, #14]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	81bb      	strh	r3, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	2b7b      	cmp	r3, #123	; 0x7b
 8004a8e:	d901      	bls.n	8004a94 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 8004a90:	2342      	movs	r3, #66	; 0x42
 8004a92:	e064      	b.n	8004b5e <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 8004a94:	89fb      	ldrh	r3, [r7, #14]
 8004a96:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8004a98:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004a9c:	f107 0210 	add.w	r2, r7, #16
 8004aa0:	4413      	add	r3, r2
 8004aa2:	89fa      	ldrh	r2, [r7, #14]
 8004aa4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004aa6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004aaa:	3302      	adds	r3, #2
 8004aac:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 8004ab0:	89bb      	ldrh	r3, [r7, #12]
 8004ab2:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8004ab4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ab8:	f107 0210 	add.w	r2, r7, #16
 8004abc:	4413      	add	r3, r2
 8004abe:	89ba      	ldrh	r2, [r7, #12]
 8004ac0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8004ac2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8004acc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ad0:	33b0      	adds	r3, #176	; 0xb0
 8004ad2:	443b      	add	r3, r7
 8004ad4:	7afa      	ldrb	r2, [r7, #11]
 8004ad6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004ada:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8004ae4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004ae8:	f107 0210 	add.w	r2, r7, #16
 8004aec:	4413      	add	r3, r2
 8004aee:	7afa      	ldrb	r2, [r7, #11]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 ff5b 	bl	80059ae <memcpy>
  indx +=  value_len;
 8004af8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	4413      	add	r3, r2
 8004b00:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b08:	2218      	movs	r2, #24
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 ff5c 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004b12:	233f      	movs	r3, #63	; 0x3f
 8004b14:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8004b18:	f240 1321 	movw	r3, #289	; 0x121
 8004b1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8004b20:	f107 0310 	add.w	r3, r7, #16
 8004b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8004b28:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8004b30:	230f      	movs	r3, #15
 8004b32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004b36:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8004b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8004b44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fa8e 	bl	800506c <hci_send_req>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da01      	bge.n	8004b5a <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 8004b56:	23ff      	movs	r3, #255	; 0xff
 8004b58:	e001      	b.n	8004b5e <aci_gatt_write_charac_descriptor+0xee>

  return status;
 8004b5a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	37b0      	adds	r7, #176	; 0xb0
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b0aa      	sub	sp, #168	; 0xa8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	603a      	str	r2, [r7, #0]
 8004b70:	71fb      	strb	r3, [r7, #7]
 8004b72:	460b      	mov	r3, r1
 8004b74:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8004b7c:	79bb      	ldrb	r3, [r7, #6]
 8004b7e:	2b7e      	cmp	r3, #126	; 0x7e
 8004b80:	d901      	bls.n	8004b86 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8004b82:	2342      	movs	r3, #66	; 0x42
 8004b84:	e050      	b.n	8004c28 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 8004b86:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004b8a:	33a8      	adds	r3, #168	; 0xa8
 8004b8c:	443b      	add	r3, r7
 8004b8e:	79fa      	ldrb	r2, [r7, #7]
 8004b90:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004b94:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004b98:	3301      	adds	r3, #1
 8004b9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8004b9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004ba2:	33a8      	adds	r3, #168	; 0xa8
 8004ba4:	443b      	add	r3, r7
 8004ba6:	79ba      	ldrb	r2, [r7, #6]
 8004ba8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004bac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8004bb6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bba:	f107 0208 	add.w	r2, r7, #8
 8004bbe:	4413      	add	r3, r2
 8004bc0:	79ba      	ldrb	r2, [r7, #6]
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fef2 	bl	80059ae <memcpy>
  indx +=  len;
 8004bca:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8004bce:	79bb      	ldrb	r3, [r7, #6]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004bd6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004bda:	2218      	movs	r2, #24
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fef3 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004be4:	233f      	movs	r3, #63	; 0x3f
 8004be6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8004bea:	230c      	movs	r3, #12
 8004bec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8004bf8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8004c00:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8004c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8004c0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fa29 	bl	800506c <hci_send_req>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	da01      	bge.n	8004c24 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004c20:	23ff      	movs	r3, #255	; 0xff
 8004c22:	e001      	b.n	8004c28 <aci_hal_write_config_data+0xc2>

  return status;
 8004c24:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	37a8      	adds	r7, #168	; 0xa8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	460a      	mov	r2, r1
 8004c3a:	71fb      	strb	r3, [r7, #7]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8004c44:	79bb      	ldrb	r3, [r7, #6]
 8004c46:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	2218      	movs	r2, #24
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 feba 	bl	80059ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004c56:	233f      	movs	r3, #63	; 0x3f
 8004c58:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8004c5a:	230f      	movs	r3, #15
 8004c5c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8004c64:	2302      	movs	r3, #2
 8004c66:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8004c68:	f107 030b 	add.w	r3, r7, #11
 8004c6c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8004c72:	f107 0310 	add.w	r3, r7, #16
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f9f7 	bl	800506c <hci_send_req>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	da01      	bge.n	8004c88 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8004c84:	23ff      	movs	r3, #255	; 0xff
 8004c86:	e000      	b.n	8004c8a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8004c88:	7afb      	ldrb	r3, [r7, #11]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3728      	adds	r7, #40	; 0x28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8004c92:	b590      	push	{r4, r7, lr}
 8004c94:	b089      	sub	sp, #36	; 0x24
 8004c96:	af02      	add	r7, sp, #8
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8004c9c:	f107 0410 	add.w	r4, r7, #16
 8004ca0:	f107 0215 	add.w	r2, r7, #21
 8004ca4:	f107 0112 	add.w	r1, r7, #18
 8004ca8:	f107 0016 	add.w	r0, r7, #22
 8004cac:	f107 030e 	add.w	r3, r7, #14
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	f000 f853 	bl	8004d5e <hci_le_read_local_version>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d126      	bne.n	8004d10 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8004cc2:	8a7b      	ldrh	r3, [r7, #18]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8004cce:	8a7b      	ldrh	r3, [r7, #18]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b21a      	sxth	r2, r3
 8004cde:	89fb      	ldrh	r3, [r7, #14]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b21a      	sxth	r2, r3
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	b21b      	sxth	r3, r3
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}

08004d1a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	2218      	movs	r2, #24
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fe4e 	bl	80059ca <memset>
  rq.ogf = OGF_HOST_CTL;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8004d32:	2303      	movs	r3, #3
 8004d34:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004d3e:	f107 0308 	add.w	r3, r7, #8
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f991 	bl	800506c <hci_send_req>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da01      	bge.n	8004d54 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8004d50:	23ff      	movs	r3, #255	; 0xff
 8004d52:	e000      	b.n	8004d56 <hci_reset+0x3c>
  
  return status;  
 8004d54:	79fb      	ldrb	r3, [r7, #7]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08e      	sub	sp, #56	; 0x38
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	2209      	movs	r2, #9
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fe28 	bl	80059ca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d7a:	f107 0320 	add.w	r3, r7, #32
 8004d7e:	2218      	movs	r2, #24
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fe21 	bl	80059ca <memset>
  rq.ogf = OGF_INFO_PARAM;
 8004d88:	2304      	movs	r3, #4
 8004d8a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8004d9e:	2309      	movs	r3, #9
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004da2:	f107 0320 	add.w	r3, r7, #32
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f95f 	bl	800506c <hci_send_req>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da01      	bge.n	8004db8 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8004db4:	23ff      	movs	r3, #255	; 0xff
 8004db6:	e018      	b.n	8004dea <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8004db8:	7d3b      	ldrb	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <hci_le_read_local_version+0x64>
    return resp.status;
 8004dbe:	7d3b      	ldrb	r3, [r7, #20]
 8004dc0:	e013      	b.n	8004dea <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8004dc2:	7d7a      	ldrb	r2, [r7, #21]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8004dc8:	8afa      	ldrh	r2, [r7, #22]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8004dce:	7e3a      	ldrb	r2, [r7, #24]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8004dd4:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8004dde:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3738      	adds	r7, #56	; 0x38
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b092      	sub	sp, #72	; 0x48
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	6039      	str	r1, [r7, #0]
 8004dfc:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8004dfe:	f107 0310 	add.w	r3, r7, #16
 8004e02:	2220      	movs	r2, #32
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fddf 	bl	80059ca <memset>
  scan_resp_cp.length = length;
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b1f      	cmp	r3, #31
 8004e14:	bf28      	it	cs
 8004e16:	231f      	movcs	r3, #31
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	3301      	adds	r3, #1
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fdc2 	bl	80059ae <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e2e:	2218      	movs	r2, #24
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fdc9 	bl	80059ca <memset>
  rq.ogf = OGF_LE_CTL;
 8004e38:	2308      	movs	r3, #8
 8004e3a:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8004e3c:	2309      	movs	r3, #9
 8004e3e:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8004e46:	2320      	movs	r3, #32
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8004e4a:	f107 030f 	add.w	r3, r7, #15
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8004e50:	2301      	movs	r3, #1
 8004e52:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f906 	bl	800506c <hci_send_req>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da01      	bge.n	8004e6a <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8004e66:	23ff      	movs	r3, #255	; 0xff
 8004e68:	e000      	b.n	8004e6c <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3748      	adds	r7, #72	; 0x48
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d001      	beq.n	8004e8e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00c      	b.n	8004ea8 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3302      	adds	r3, #2
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004e9c:	3b03      	subs	r3, #3
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e000      	b.n	8004ea8 <verify_packet+0x34>
  
  return 0;      
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0a6      	sub	sp, #152	; 0x98
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	81fb      	strh	r3, [r7, #14]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	81bb      	strh	r3, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8004ec8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	b21a      	sxth	r2, r3
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	029b      	lsls	r3, r3, #10
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8004ee0:	7afb      	ldrb	r3, [r7, #11]
 8004ee2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8004ee8:	f107 0318 	add.w	r3, r7, #24
 8004eec:	3301      	adds	r3, #1
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f107 0314 	add.w	r3, r7, #20
 8004ef4:	8819      	ldrh	r1, [r3, #0]
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	8011      	strh	r1, [r2, #0]
 8004efa:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004efc:	f107 0318 	add.w	r3, r7, #24
 8004f00:	3304      	adds	r3, #4
 8004f02:	7afa      	ldrb	r2, [r7, #11]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fd51 	bl	80059ae <memcpy>
  
  if (hciContext.io.Send)
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <send_cmd+0x7c>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <send_cmd+0x7c>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	3204      	adds	r2, #4
 8004f1e:	b291      	uxth	r1, r2
 8004f20:	f107 0218 	add.w	r2, r7, #24
 8004f24:	4610      	mov	r0, r2
 8004f26:	4798      	blx	r3
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3798      	adds	r7, #152	; 0x98
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200005d8 	.word	0x200005d8

08004f34 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8004f3e:	e00a      	b.n	8004f56 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	4619      	mov	r1, r3
 8004f46:	6838      	ldr	r0, [r7, #0]
 8004f48:	f000 faea 	bl	8005520 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fa51 	bl	80053f8 <list_insert_head>
  while (!list_is_empty(src_list))
 8004f56:	6838      	ldr	r0, [r7, #0]
 8004f58:	f000 fa2c 	bl	80053b4 <list_is_empty>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ee      	beq.n	8004f40 <move_list+0xc>
  }
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004f72:	e009      	b.n	8004f88 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4809      	ldr	r0, [pc, #36]	; (8004fa0 <free_event_list+0x34>)
 8004f7a:	f000 faaa 	bl	80054d2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4619      	mov	r1, r3
 8004f82:	4808      	ldr	r0, [pc, #32]	; (8004fa4 <free_event_list+0x38>)
 8004f84:	f000 fa5e 	bl	8005444 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004f88:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <free_event_list+0x38>)
 8004f8a:	f000 faf0 	bl	800556e <list_get_size>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	ddef      	ble.n	8004f74 <free_event_list+0x8>
  }
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000314 	.word	0x20000314
 8004fa4:	2000030c 	.word	0x2000030c

08004fa8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <hci_init+0x74>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8004fbe:	4818      	ldr	r0, [pc, #96]	; (8005020 <hci_init+0x78>)
 8004fc0:	f000 f9e8 	bl	8005394 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8004fc4:	4817      	ldr	r0, [pc, #92]	; (8005024 <hci_init+0x7c>)
 8004fc6:	f000 f9e5 	bl	8005394 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8004fca:	f7fc fa2b 	bl	8001424 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	e00c      	b.n	8004fee <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	228c      	movs	r2, #140	; 0x8c
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	4a12      	ldr	r2, [pc, #72]	; (8005028 <hci_init+0x80>)
 8004fde:	4413      	add	r3, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	480f      	ldr	r0, [pc, #60]	; (8005020 <hci_init+0x78>)
 8004fe4:	f000 fa2e 	bl	8005444 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	3301      	adds	r3, #1
 8004fec:	73fb      	strb	r3, [r7, #15]
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d9ef      	bls.n	8004fd4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <hci_init+0x74>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <hci_init+0x5c>
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <hci_init+0x74>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2000      	movs	r0, #0
 8005002:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <hci_init+0x74>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <hci_init+0x6a>
 800500c:	4b03      	ldr	r3, [pc, #12]	; (800501c <hci_init+0x74>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4798      	blx	r3
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200005d8 	.word	0x200005d8
 8005020:	2000030c 	.word	0x2000030c
 8005024:	20000314 	.word	0x20000314
 8005028:	2000031c 	.word	0x2000031c

0800502c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <hci_register_io_bus+0x3c>)
 800503a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a09      	ldr	r2, [pc, #36]	; (8005068 <hci_register_io_bus+0x3c>)
 8005042:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	4a07      	ldr	r2, [pc, #28]	; (8005068 <hci_register_io_bus+0x3c>)
 800504a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4a05      	ldr	r2, [pc, #20]	; (8005068 <hci_register_io_bus+0x3c>)
 8005052:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a03      	ldr	r2, [pc, #12]	; (8005068 <hci_register_io_bus+0x3c>)
 800505a:	6093      	str	r3, [r2, #8]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200005d8 	.word	0x200005d8

0800506c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	; 0x38
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	885b      	ldrh	r3, [r3, #2]
 800507c:	b21b      	sxth	r3, r3
 800507e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005082:	b21a      	sxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	029b      	lsls	r3, r3, #10
 800508a:	b21b      	sxth	r3, r3
 800508c:	4313      	orrs	r3, r2
 800508e:	b21b      	sxth	r3, r3
 8005090:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005096:	f107 0308 	add.w	r3, r7, #8
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f97a 	bl	8005394 <list_init_head>

  free_event_list();
 80050a0:	f7ff ff64 	bl	8004f6c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8818      	ldrh	r0, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8859      	ldrh	r1, [r3, #2]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f7ff fefd 	bl	8004eb4 <send_cmd>
  
  if (async)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <hci_send_req+0x58>
  {
    return 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e0e5      	b.n	8005290 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80050c4:	f7fd f84e 	bl	8002164 <HAL_GetTick>
 80050c8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80050ca:	f7fd f84b 	bl	8002164 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d8:	f200 80b6 	bhi.w	8005248 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80050dc:	486e      	ldr	r0, [pc, #440]	; (8005298 <hci_send_req+0x22c>)
 80050de:	f000 f969 	bl	80053b4 <list_is_empty>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d000      	beq.n	80050ea <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80050e8:	e7ef      	b.n	80050ca <hci_send_req+0x5e>
      {
        break;
 80050ea:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80050ec:	f107 0310 	add.w	r3, r7, #16
 80050f0:	4619      	mov	r1, r3
 80050f2:	4869      	ldr	r0, [pc, #420]	; (8005298 <hci_send_req+0x22c>)
 80050f4:	f000 f9ed 	bl	80054d2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	3308      	adds	r3, #8
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b04      	cmp	r3, #4
 8005104:	d17b      	bne.n	80051fe <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	3301      	adds	r3, #1
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3308      	adds	r3, #8
 8005110:	3303      	adds	r3, #3
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800511a:	3b03      	subs	r3, #3
 800511c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b3e      	cmp	r3, #62	; 0x3e
 8005124:	d04d      	beq.n	80051c2 <hci_send_req+0x156>
 8005126:	2b3e      	cmp	r3, #62	; 0x3e
 8005128:	dc6b      	bgt.n	8005202 <hci_send_req+0x196>
 800512a:	2b10      	cmp	r3, #16
 800512c:	f000 808e 	beq.w	800524c <hci_send_req+0x1e0>
 8005130:	2b10      	cmp	r3, #16
 8005132:	dc66      	bgt.n	8005202 <hci_send_req+0x196>
 8005134:	2b0e      	cmp	r3, #14
 8005136:	d024      	beq.n	8005182 <hci_send_req+0x116>
 8005138:	2b0f      	cmp	r3, #15
 800513a:	d162      	bne.n	8005202 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	885b      	ldrh	r3, [r3, #2]
 8005144:	b29b      	uxth	r3, r3
 8005146:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005148:	429a      	cmp	r2, r3
 800514a:	f040 8081 	bne.w	8005250 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b0f      	cmp	r3, #15
 8005154:	d004      	beq.n	8005160 <hci_send_req+0xf4>
          if (cs->status) {
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d053      	beq.n	8005206 <hci_send_req+0x19a>
            goto failed;
 800515e:	e07a      	b.n	8005256 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf28      	it	cs
 800516a:	461a      	movcs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6918      	ldr	r0, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	461a      	mov	r2, r3
 800517a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800517c:	f000 fc17 	bl	80059ae <memcpy>
        goto done;
 8005180:	e07a      	b.n	8005278 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800518c:	b29b      	uxth	r3, r3
 800518e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005190:	429a      	cmp	r2, r3
 8005192:	d15f      	bne.n	8005254 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3303      	adds	r3, #3
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	3b03      	subs	r3, #3
 800519e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf28      	it	cs
 80051aa:	461a      	movcs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6918      	ldr	r0, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051bc:	f000 fbf7 	bl	80059ae <memcpy>
        goto done;
 80051c0:	e05a      	b.n	8005278 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d11a      	bne.n	800520a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	bf28      	it	cs
 80051e4:	461a      	movcs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6918      	ldr	r0, [r3, #16]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 fbd9 	bl	80059ae <memcpy>
        goto done;
 80051fc:	e03c      	b.n	8005278 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <hci_send_req+0x1a0>
        break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <hci_send_req+0x1a0>
          break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <hci_send_req+0x1a0>
          break;
 800520a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800520c:	4823      	ldr	r0, [pc, #140]	; (800529c <hci_send_req+0x230>)
 800520e:	f000 f8d1 	bl	80053b4 <list_is_empty>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <hci_send_req+0x1c8>
 8005218:	481f      	ldr	r0, [pc, #124]	; (8005298 <hci_send_req+0x22c>)
 800521a:	f000 f8cb 	bl	80053b4 <list_is_empty>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4619      	mov	r1, r3
 8005228:	481c      	ldr	r0, [pc, #112]	; (800529c <hci_send_req+0x230>)
 800522a:	f000 f90b 	bl	8005444 <list_insert_tail>
      hciReadPacket=NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e008      	b.n	8005246 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f901 	bl	8005444 <list_insert_tail>
      hciReadPacket=NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
  {
 8005246:	e73d      	b.n	80050c4 <hci_send_req+0x58>
        goto failed;
 8005248:	bf00      	nop
 800524a:	e004      	b.n	8005256 <hci_send_req+0x1ea>
        goto failed;
 800524c:	bf00      	nop
 800524e:	e002      	b.n	8005256 <hci_send_req+0x1ea>
          goto failed;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <hci_send_req+0x1ea>
          goto failed;
 8005254:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4619      	mov	r1, r3
 8005260:	480e      	ldr	r0, [pc, #56]	; (800529c <hci_send_req+0x230>)
 8005262:	f000 f8c9 	bl	80053f8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	4619      	mov	r1, r3
 800526c:	480a      	ldr	r0, [pc, #40]	; (8005298 <hci_send_req+0x22c>)
 800526e:	f7ff fe61 	bl	8004f34 <move_list>

  return -1;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	e00b      	b.n	8005290 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4619      	mov	r1, r3
 800527c:	4807      	ldr	r0, [pc, #28]	; (800529c <hci_send_req+0x230>)
 800527e:	f000 f8bb 	bl	80053f8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005282:	f107 0308 	add.w	r3, r7, #8
 8005286:	4619      	mov	r1, r3
 8005288:	4803      	ldr	r0, [pc, #12]	; (8005298 <hci_send_req+0x22c>)
 800528a:	f7ff fe53 	bl	8004f34 <move_list>

  return 0;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3738      	adds	r7, #56	; 0x38
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000314 	.word	0x20000314
 800529c:	2000030c 	.word	0x2000030c

080052a0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80052aa:	e013      	b.n	80052d4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	4619      	mov	r1, r3
 80052b0:	480e      	ldr	r0, [pc, #56]	; (80052ec <hci_user_evt_proc+0x4c>)
 80052b2:	f000 f90e 	bl	80054d2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <hci_user_evt_proc+0x50>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <hci_user_evt_proc+0x50>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	3208      	adds	r2, #8
 80052c6:	4610      	mov	r0, r2
 80052c8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4809      	ldr	r0, [pc, #36]	; (80052f4 <hci_user_evt_proc+0x54>)
 80052d0:	f000 f8b8 	bl	8005444 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80052d4:	4805      	ldr	r0, [pc, #20]	; (80052ec <hci_user_evt_proc+0x4c>)
 80052d6:	f000 f86d 	bl	80053b4 <list_is_empty>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0e5      	beq.n	80052ac <hci_user_evt_proc+0xc>
  }
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000314 	.word	0x20000314
 80052f0:	200005d8 	.word	0x200005d8
 80052f4:	2000030c 	.word	0x2000030c

080052f8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005308:	481f      	ldr	r0, [pc, #124]	; (8005388 <hci_notify_asynch_evt+0x90>)
 800530a:	f000 f853 	bl	80053b4 <list_is_empty>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d132      	bne.n	800537a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	4619      	mov	r1, r3
 800531a:	481b      	ldr	r0, [pc, #108]	; (8005388 <hci_notify_asynch_evt+0x90>)
 800531c:	f000 f8d9 	bl	80054d2 <list_remove_head>
    
    if (hciContext.io.Receive)
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <hci_notify_asynch_evt+0x94>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02a      	beq.n	800537e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <hci_notify_asynch_evt+0x94>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	3208      	adds	r2, #8
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	4610      	mov	r0, r2
 8005334:	4798      	blx	r3
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	7cfa      	ldrb	r2, [r7, #19]
 8005344:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fd92 	bl	8004e74 <verify_packet>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4619      	mov	r1, r3
 800535a:	480d      	ldr	r0, [pc, #52]	; (8005390 <hci_notify_asynch_evt+0x98>)
 800535c:	f000 f872 	bl	8005444 <list_insert_tail>
 8005360:	e00d      	b.n	800537e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4619      	mov	r1, r3
 8005366:	4808      	ldr	r0, [pc, #32]	; (8005388 <hci_notify_asynch_evt+0x90>)
 8005368:	f000 f846 	bl	80053f8 <list_insert_head>
 800536c:	e007      	b.n	800537e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4619      	mov	r1, r3
 8005372:	4805      	ldr	r0, [pc, #20]	; (8005388 <hci_notify_asynch_evt+0x90>)
 8005374:	f000 f840 	bl	80053f8 <list_insert_head>
 8005378:	e001      	b.n	800537e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800537e:	697b      	ldr	r3, [r7, #20]

}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	2000030c 	.word	0x2000030c
 800538c:	200005d8 	.word	0x200005d8
 8005390:	20000314 	.word	0x20000314

08005394 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053bc:	f3ef 8310 	mrs	r3, PRIMASK
 80053c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80053c2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80053c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80053c6:	b672      	cpsid	i
}
 80053c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d102      	bne.n	80053da <list_is_empty+0x26>
  {
    return_value = 1;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
 80053d8:	e001      	b.n	80053de <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005402:	f3ef 8310 	mrs	r3, PRIMASK
 8005406:	60fb      	str	r3, [r7, #12]
  return(result);
 8005408:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800540a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800540c:	b672      	cpsid	i
}
 800540e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544e:	f3ef 8310 	mrs	r3, PRIMASK
 8005452:	60fb      	str	r3, [r7, #12]
  return(result);
 8005454:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005458:	b672      	cpsid	i
}
 800545a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f383 8810 	msr	PRIMASK, r3
}
 8005482:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005498:	f3ef 8310 	mrs	r3, PRIMASK
 800549c:	60fb      	str	r3, [r7, #12]
  return(result);
 800549e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80054a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80054a2:	b672      	cpsid	i
}
 80054a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6852      	ldr	r2, [r2, #4]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054dc:	f3ef 8310 	mrs	r3, PRIMASK
 80054e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80054e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80054e6:	b672      	cpsid	i
}
 80054e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff ffca 	bl	8005490 <list_remove_node>
  (*node)->next = NULL;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2200      	movs	r2, #0
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f383 8810 	msr	PRIMASK, r3
}
 8005516:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005518:	bf00      	nop
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552a:	f3ef 8310 	mrs	r3, PRIMASK
 800552e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005530:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005534:	b672      	cpsid	i
}
 8005536:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff ffa3 	bl	8005490 <list_remove_node>
  (*node)->next = NULL;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005566:	bf00      	nop
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800556e:	b480      	push	{r7}
 8005570:	b089      	sub	sp, #36	; 0x24
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557a:	f3ef 8310 	mrs	r3, PRIMASK
 800557e:	613b      	str	r3, [r7, #16]
  return(result);
 8005580:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005584:	b672      	cpsid	i
}
 8005586:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800558e:	e005      	b.n	800559c <list_get_size+0x2e>
  {
    size++;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3301      	adds	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1f5      	bne.n	8005590 <list_get_size+0x22>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f383 8810 	msr	PRIMASK, r3
}
 80055ae:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80055b0:	69fb      	ldr	r3, [r7, #28]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3724      	adds	r7, #36	; 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <__errno>:
 80055c0:	4b01      	ldr	r3, [pc, #4]	; (80055c8 <__errno+0x8>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000040 	.word	0x20000040

080055cc <__sflush_r>:
 80055cc:	898a      	ldrh	r2, [r1, #12]
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	4605      	mov	r5, r0
 80055d4:	0710      	lsls	r0, r2, #28
 80055d6:	460c      	mov	r4, r1
 80055d8:	d458      	bmi.n	800568c <__sflush_r+0xc0>
 80055da:	684b      	ldr	r3, [r1, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dc05      	bgt.n	80055ec <__sflush_r+0x20>
 80055e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dc02      	bgt.n	80055ec <__sflush_r+0x20>
 80055e6:	2000      	movs	r0, #0
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d0f9      	beq.n	80055e6 <__sflush_r+0x1a>
 80055f2:	2300      	movs	r3, #0
 80055f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055f8:	682f      	ldr	r7, [r5, #0]
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	d032      	beq.n	8005664 <__sflush_r+0x98>
 80055fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	075a      	lsls	r2, r3, #29
 8005604:	d505      	bpl.n	8005612 <__sflush_r+0x46>
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	1ac0      	subs	r0, r0, r3
 800560a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800560c:	b10b      	cbz	r3, 8005612 <__sflush_r+0x46>
 800560e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005610:	1ac0      	subs	r0, r0, r3
 8005612:	2300      	movs	r3, #0
 8005614:	4602      	mov	r2, r0
 8005616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005618:	6a21      	ldr	r1, [r4, #32]
 800561a:	4628      	mov	r0, r5
 800561c:	47b0      	blx	r6
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	d106      	bne.n	8005632 <__sflush_r+0x66>
 8005624:	6829      	ldr	r1, [r5, #0]
 8005626:	291d      	cmp	r1, #29
 8005628:	d82c      	bhi.n	8005684 <__sflush_r+0xb8>
 800562a:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <__sflush_r+0x108>)
 800562c:	40ca      	lsrs	r2, r1
 800562e:	07d6      	lsls	r6, r2, #31
 8005630:	d528      	bpl.n	8005684 <__sflush_r+0xb8>
 8005632:	2200      	movs	r2, #0
 8005634:	6062      	str	r2, [r4, #4]
 8005636:	04d9      	lsls	r1, r3, #19
 8005638:	6922      	ldr	r2, [r4, #16]
 800563a:	6022      	str	r2, [r4, #0]
 800563c:	d504      	bpl.n	8005648 <__sflush_r+0x7c>
 800563e:	1c42      	adds	r2, r0, #1
 8005640:	d101      	bne.n	8005646 <__sflush_r+0x7a>
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	b903      	cbnz	r3, 8005648 <__sflush_r+0x7c>
 8005646:	6560      	str	r0, [r4, #84]	; 0x54
 8005648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564a:	602f      	str	r7, [r5, #0]
 800564c:	2900      	cmp	r1, #0
 800564e:	d0ca      	beq.n	80055e6 <__sflush_r+0x1a>
 8005650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005654:	4299      	cmp	r1, r3
 8005656:	d002      	beq.n	800565e <__sflush_r+0x92>
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f9bf 	bl	80059dc <_free_r>
 800565e:	2000      	movs	r0, #0
 8005660:	6360      	str	r0, [r4, #52]	; 0x34
 8005662:	e7c1      	b.n	80055e8 <__sflush_r+0x1c>
 8005664:	6a21      	ldr	r1, [r4, #32]
 8005666:	2301      	movs	r3, #1
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	1c41      	adds	r1, r0, #1
 800566e:	d1c7      	bne.n	8005600 <__sflush_r+0x34>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0c4      	beq.n	8005600 <__sflush_r+0x34>
 8005676:	2b1d      	cmp	r3, #29
 8005678:	d001      	beq.n	800567e <__sflush_r+0xb2>
 800567a:	2b16      	cmp	r3, #22
 800567c:	d101      	bne.n	8005682 <__sflush_r+0xb6>
 800567e:	602f      	str	r7, [r5, #0]
 8005680:	e7b1      	b.n	80055e6 <__sflush_r+0x1a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	e7ad      	b.n	80055e8 <__sflush_r+0x1c>
 800568c:	690f      	ldr	r7, [r1, #16]
 800568e:	2f00      	cmp	r7, #0
 8005690:	d0a9      	beq.n	80055e6 <__sflush_r+0x1a>
 8005692:	0793      	lsls	r3, r2, #30
 8005694:	680e      	ldr	r6, [r1, #0]
 8005696:	bf08      	it	eq
 8005698:	694b      	ldreq	r3, [r1, #20]
 800569a:	600f      	str	r7, [r1, #0]
 800569c:	bf18      	it	ne
 800569e:	2300      	movne	r3, #0
 80056a0:	eba6 0807 	sub.w	r8, r6, r7
 80056a4:	608b      	str	r3, [r1, #8]
 80056a6:	f1b8 0f00 	cmp.w	r8, #0
 80056aa:	dd9c      	ble.n	80055e6 <__sflush_r+0x1a>
 80056ac:	6a21      	ldr	r1, [r4, #32]
 80056ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b0:	4643      	mov	r3, r8
 80056b2:	463a      	mov	r2, r7
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	2800      	cmp	r0, #0
 80056ba:	dc06      	bgt.n	80056ca <__sflush_r+0xfe>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e78e      	b.n	80055e8 <__sflush_r+0x1c>
 80056ca:	4407      	add	r7, r0
 80056cc:	eba8 0800 	sub.w	r8, r8, r0
 80056d0:	e7e9      	b.n	80056a6 <__sflush_r+0xda>
 80056d2:	bf00      	nop
 80056d4:	20400001 	.word	0x20400001

080056d8 <_fflush_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	690b      	ldr	r3, [r1, #16]
 80056dc:	4605      	mov	r5, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b913      	cbnz	r3, 80056e8 <_fflush_r+0x10>
 80056e2:	2500      	movs	r5, #0
 80056e4:	4628      	mov	r0, r5
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	b118      	cbz	r0, 80056f2 <_fflush_r+0x1a>
 80056ea:	6983      	ldr	r3, [r0, #24]
 80056ec:	b90b      	cbnz	r3, 80056f2 <_fflush_r+0x1a>
 80056ee:	f000 f899 	bl	8005824 <__sinit>
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <_fflush_r+0x6c>)
 80056f4:	429c      	cmp	r4, r3
 80056f6:	d11b      	bne.n	8005730 <_fflush_r+0x58>
 80056f8:	686c      	ldr	r4, [r5, #4]
 80056fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ef      	beq.n	80056e2 <_fflush_r+0xa>
 8005702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005704:	07d0      	lsls	r0, r2, #31
 8005706:	d404      	bmi.n	8005712 <_fflush_r+0x3a>
 8005708:	0599      	lsls	r1, r3, #22
 800570a:	d402      	bmi.n	8005712 <_fflush_r+0x3a>
 800570c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570e:	f000 f94c 	bl	80059aa <__retarget_lock_acquire_recursive>
 8005712:	4628      	mov	r0, r5
 8005714:	4621      	mov	r1, r4
 8005716:	f7ff ff59 	bl	80055cc <__sflush_r>
 800571a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800571c:	07da      	lsls	r2, r3, #31
 800571e:	4605      	mov	r5, r0
 8005720:	d4e0      	bmi.n	80056e4 <_fflush_r+0xc>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	059b      	lsls	r3, r3, #22
 8005726:	d4dd      	bmi.n	80056e4 <_fflush_r+0xc>
 8005728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800572a:	f000 f93f 	bl	80059ac <__retarget_lock_release_recursive>
 800572e:	e7d9      	b.n	80056e4 <_fflush_r+0xc>
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <_fflush_r+0x70>)
 8005732:	429c      	cmp	r4, r3
 8005734:	d101      	bne.n	800573a <_fflush_r+0x62>
 8005736:	68ac      	ldr	r4, [r5, #8]
 8005738:	e7df      	b.n	80056fa <_fflush_r+0x22>
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <_fflush_r+0x74>)
 800573c:	429c      	cmp	r4, r3
 800573e:	bf08      	it	eq
 8005740:	68ec      	ldreq	r4, [r5, #12]
 8005742:	e7da      	b.n	80056fa <_fflush_r+0x22>
 8005744:	08006af4 	.word	0x08006af4
 8005748:	08006b14 	.word	0x08006b14
 800574c:	08006ad4 	.word	0x08006ad4

08005750 <fflush>:
 8005750:	4601      	mov	r1, r0
 8005752:	b920      	cbnz	r0, 800575e <fflush+0xe>
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <fflush+0x18>)
 8005756:	4905      	ldr	r1, [pc, #20]	; (800576c <fflush+0x1c>)
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f000 b8e1 	b.w	8005920 <_fwalk_reent>
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <fflush+0x20>)
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f7ff bfb9 	b.w	80056d8 <_fflush_r>
 8005766:	bf00      	nop
 8005768:	08006b34 	.word	0x08006b34
 800576c:	080056d9 	.word	0x080056d9
 8005770:	20000040 	.word	0x20000040

08005774 <std>:
 8005774:	2300      	movs	r3, #0
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
 800577a:	e9c0 3300 	strd	r3, r3, [r0]
 800577e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005782:	6083      	str	r3, [r0, #8]
 8005784:	8181      	strh	r1, [r0, #12]
 8005786:	6643      	str	r3, [r0, #100]	; 0x64
 8005788:	81c2      	strh	r2, [r0, #14]
 800578a:	6183      	str	r3, [r0, #24]
 800578c:	4619      	mov	r1, r3
 800578e:	2208      	movs	r2, #8
 8005790:	305c      	adds	r0, #92	; 0x5c
 8005792:	f000 f91a 	bl	80059ca <memset>
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <std+0x38>)
 8005798:	6263      	str	r3, [r4, #36]	; 0x24
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <std+0x3c>)
 800579c:	62a3      	str	r3, [r4, #40]	; 0x28
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <std+0x40>)
 80057a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <std+0x44>)
 80057a4:	6224      	str	r4, [r4, #32]
 80057a6:	6323      	str	r3, [r4, #48]	; 0x30
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	bf00      	nop
 80057ac:	08005d05 	.word	0x08005d05
 80057b0:	08005d27 	.word	0x08005d27
 80057b4:	08005d5f 	.word	0x08005d5f
 80057b8:	08005d83 	.word	0x08005d83

080057bc <_cleanup_r>:
 80057bc:	4901      	ldr	r1, [pc, #4]	; (80057c4 <_cleanup_r+0x8>)
 80057be:	f000 b8af 	b.w	8005920 <_fwalk_reent>
 80057c2:	bf00      	nop
 80057c4:	080056d9 	.word	0x080056d9

080057c8 <__sfmoreglue>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	2268      	movs	r2, #104	; 0x68
 80057cc:	1e4d      	subs	r5, r1, #1
 80057ce:	4355      	muls	r5, r2
 80057d0:	460e      	mov	r6, r1
 80057d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057d6:	f000 f96d 	bl	8005ab4 <_malloc_r>
 80057da:	4604      	mov	r4, r0
 80057dc:	b140      	cbz	r0, 80057f0 <__sfmoreglue+0x28>
 80057de:	2100      	movs	r1, #0
 80057e0:	e9c0 1600 	strd	r1, r6, [r0]
 80057e4:	300c      	adds	r0, #12
 80057e6:	60a0      	str	r0, [r4, #8]
 80057e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057ec:	f000 f8ed 	bl	80059ca <memset>
 80057f0:	4620      	mov	r0, r4
 80057f2:	bd70      	pop	{r4, r5, r6, pc}

080057f4 <__sfp_lock_acquire>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__sfp_lock_acquire+0x8>)
 80057f6:	f000 b8d8 	b.w	80059aa <__retarget_lock_acquire_recursive>
 80057fa:	bf00      	nop
 80057fc:	200005f9 	.word	0x200005f9

08005800 <__sfp_lock_release>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__sfp_lock_release+0x8>)
 8005802:	f000 b8d3 	b.w	80059ac <__retarget_lock_release_recursive>
 8005806:	bf00      	nop
 8005808:	200005f9 	.word	0x200005f9

0800580c <__sinit_lock_acquire>:
 800580c:	4801      	ldr	r0, [pc, #4]	; (8005814 <__sinit_lock_acquire+0x8>)
 800580e:	f000 b8cc 	b.w	80059aa <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	200005fa 	.word	0x200005fa

08005818 <__sinit_lock_release>:
 8005818:	4801      	ldr	r0, [pc, #4]	; (8005820 <__sinit_lock_release+0x8>)
 800581a:	f000 b8c7 	b.w	80059ac <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	200005fa 	.word	0x200005fa

08005824 <__sinit>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4604      	mov	r4, r0
 8005828:	f7ff fff0 	bl	800580c <__sinit_lock_acquire>
 800582c:	69a3      	ldr	r3, [r4, #24]
 800582e:	b11b      	cbz	r3, 8005838 <__sinit+0x14>
 8005830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005834:	f7ff bff0 	b.w	8005818 <__sinit_lock_release>
 8005838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800583c:	6523      	str	r3, [r4, #80]	; 0x50
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <__sinit+0x68>)
 8005840:	4a13      	ldr	r2, [pc, #76]	; (8005890 <__sinit+0x6c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	62a2      	str	r2, [r4, #40]	; 0x28
 8005846:	42a3      	cmp	r3, r4
 8005848:	bf04      	itt	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	61a3      	streq	r3, [r4, #24]
 800584e:	4620      	mov	r0, r4
 8005850:	f000 f820 	bl	8005894 <__sfp>
 8005854:	6060      	str	r0, [r4, #4]
 8005856:	4620      	mov	r0, r4
 8005858:	f000 f81c 	bl	8005894 <__sfp>
 800585c:	60a0      	str	r0, [r4, #8]
 800585e:	4620      	mov	r0, r4
 8005860:	f000 f818 	bl	8005894 <__sfp>
 8005864:	2200      	movs	r2, #0
 8005866:	60e0      	str	r0, [r4, #12]
 8005868:	2104      	movs	r1, #4
 800586a:	6860      	ldr	r0, [r4, #4]
 800586c:	f7ff ff82 	bl	8005774 <std>
 8005870:	68a0      	ldr	r0, [r4, #8]
 8005872:	2201      	movs	r2, #1
 8005874:	2109      	movs	r1, #9
 8005876:	f7ff ff7d 	bl	8005774 <std>
 800587a:	68e0      	ldr	r0, [r4, #12]
 800587c:	2202      	movs	r2, #2
 800587e:	2112      	movs	r1, #18
 8005880:	f7ff ff78 	bl	8005774 <std>
 8005884:	2301      	movs	r3, #1
 8005886:	61a3      	str	r3, [r4, #24]
 8005888:	e7d2      	b.n	8005830 <__sinit+0xc>
 800588a:	bf00      	nop
 800588c:	08006b34 	.word	0x08006b34
 8005890:	080057bd 	.word	0x080057bd

08005894 <__sfp>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	4607      	mov	r7, r0
 8005898:	f7ff ffac 	bl	80057f4 <__sfp_lock_acquire>
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <__sfp+0x84>)
 800589e:	681e      	ldr	r6, [r3, #0]
 80058a0:	69b3      	ldr	r3, [r6, #24]
 80058a2:	b913      	cbnz	r3, 80058aa <__sfp+0x16>
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff ffbd 	bl	8005824 <__sinit>
 80058aa:	3648      	adds	r6, #72	; 0x48
 80058ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	d503      	bpl.n	80058bc <__sfp+0x28>
 80058b4:	6833      	ldr	r3, [r6, #0]
 80058b6:	b30b      	cbz	r3, 80058fc <__sfp+0x68>
 80058b8:	6836      	ldr	r6, [r6, #0]
 80058ba:	e7f7      	b.n	80058ac <__sfp+0x18>
 80058bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058c0:	b9d5      	cbnz	r5, 80058f8 <__sfp+0x64>
 80058c2:	4b16      	ldr	r3, [pc, #88]	; (800591c <__sfp+0x88>)
 80058c4:	60e3      	str	r3, [r4, #12]
 80058c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058ca:	6665      	str	r5, [r4, #100]	; 0x64
 80058cc:	f000 f86c 	bl	80059a8 <__retarget_lock_init_recursive>
 80058d0:	f7ff ff96 	bl	8005800 <__sfp_lock_release>
 80058d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058dc:	6025      	str	r5, [r4, #0]
 80058de:	61a5      	str	r5, [r4, #24]
 80058e0:	2208      	movs	r2, #8
 80058e2:	4629      	mov	r1, r5
 80058e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058e8:	f000 f86f 	bl	80059ca <memset>
 80058ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058f4:	4620      	mov	r0, r4
 80058f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f8:	3468      	adds	r4, #104	; 0x68
 80058fa:	e7d9      	b.n	80058b0 <__sfp+0x1c>
 80058fc:	2104      	movs	r1, #4
 80058fe:	4638      	mov	r0, r7
 8005900:	f7ff ff62 	bl	80057c8 <__sfmoreglue>
 8005904:	4604      	mov	r4, r0
 8005906:	6030      	str	r0, [r6, #0]
 8005908:	2800      	cmp	r0, #0
 800590a:	d1d5      	bne.n	80058b8 <__sfp+0x24>
 800590c:	f7ff ff78 	bl	8005800 <__sfp_lock_release>
 8005910:	230c      	movs	r3, #12
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	e7ee      	b.n	80058f4 <__sfp+0x60>
 8005916:	bf00      	nop
 8005918:	08006b34 	.word	0x08006b34
 800591c:	ffff0001 	.word	0xffff0001

08005920 <_fwalk_reent>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	4606      	mov	r6, r0
 8005926:	4688      	mov	r8, r1
 8005928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800592c:	2700      	movs	r7, #0
 800592e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005932:	f1b9 0901 	subs.w	r9, r9, #1
 8005936:	d505      	bpl.n	8005944 <_fwalk_reent+0x24>
 8005938:	6824      	ldr	r4, [r4, #0]
 800593a:	2c00      	cmp	r4, #0
 800593c:	d1f7      	bne.n	800592e <_fwalk_reent+0xe>
 800593e:	4638      	mov	r0, r7
 8005940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005944:	89ab      	ldrh	r3, [r5, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d907      	bls.n	800595a <_fwalk_reent+0x3a>
 800594a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800594e:	3301      	adds	r3, #1
 8005950:	d003      	beq.n	800595a <_fwalk_reent+0x3a>
 8005952:	4629      	mov	r1, r5
 8005954:	4630      	mov	r0, r6
 8005956:	47c0      	blx	r8
 8005958:	4307      	orrs	r7, r0
 800595a:	3568      	adds	r5, #104	; 0x68
 800595c:	e7e9      	b.n	8005932 <_fwalk_reent+0x12>
	...

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4d0d      	ldr	r5, [pc, #52]	; (8005998 <__libc_init_array+0x38>)
 8005964:	4c0d      	ldr	r4, [pc, #52]	; (800599c <__libc_init_array+0x3c>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	2600      	movs	r6, #0
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	4d0b      	ldr	r5, [pc, #44]	; (80059a0 <__libc_init_array+0x40>)
 8005972:	4c0c      	ldr	r4, [pc, #48]	; (80059a4 <__libc_init_array+0x44>)
 8005974:	f000 feda 	bl	800672c <_init>
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	2600      	movs	r6, #0
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	f855 3b04 	ldr.w	r3, [r5], #4
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	08006b74 	.word	0x08006b74
 800599c:	08006b74 	.word	0x08006b74
 80059a0:	08006b74 	.word	0x08006b74
 80059a4:	08006b78 	.word	0x08006b78

080059a8 <__retarget_lock_init_recursive>:
 80059a8:	4770      	bx	lr

080059aa <__retarget_lock_acquire_recursive>:
 80059aa:	4770      	bx	lr

080059ac <__retarget_lock_release_recursive>:
 80059ac:	4770      	bx	lr

080059ae <memcpy>:
 80059ae:	440a      	add	r2, r1
 80059b0:	4291      	cmp	r1, r2
 80059b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b6:	d100      	bne.n	80059ba <memcpy+0xc>
 80059b8:	4770      	bx	lr
 80059ba:	b510      	push	{r4, lr}
 80059bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059c4:	4291      	cmp	r1, r2
 80059c6:	d1f9      	bne.n	80059bc <memcpy+0xe>
 80059c8:	bd10      	pop	{r4, pc}

080059ca <memset>:
 80059ca:	4402      	add	r2, r0
 80059cc:	4603      	mov	r3, r0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d100      	bne.n	80059d4 <memset+0xa>
 80059d2:	4770      	bx	lr
 80059d4:	f803 1b01 	strb.w	r1, [r3], #1
 80059d8:	e7f9      	b.n	80059ce <memset+0x4>
	...

080059dc <_free_r>:
 80059dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059de:	2900      	cmp	r1, #0
 80059e0:	d044      	beq.n	8005a6c <_free_r+0x90>
 80059e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e6:	9001      	str	r0, [sp, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f1a1 0404 	sub.w	r4, r1, #4
 80059ee:	bfb8      	it	lt
 80059f0:	18e4      	addlt	r4, r4, r3
 80059f2:	f000 fb25 	bl	8006040 <__malloc_lock>
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <_free_r+0x94>)
 80059f8:	9801      	ldr	r0, [sp, #4]
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x30>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	b003      	add	sp, #12
 8005a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a08:	f000 bb20 	b.w	800604c <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x46>
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1949      	addeq	r1, r1, r5
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x22>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x50>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x46>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1855      	adds	r5, r2, r1
 8005a30:	42a5      	cmp	r5, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x70>
 8005a34:	6824      	ldr	r4, [r4, #0]
 8005a36:	4421      	add	r1, r4
 8005a38:	1854      	adds	r4, r2, r1
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x26>
 8005a40:	681c      	ldr	r4, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6053      	str	r3, [r2, #4]
 8005a46:	4421      	add	r1, r4
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x26>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x78>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x26>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1949      	addeq	r1, r1, r5
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	6054      	str	r4, [r2, #4]
 8005a6a:	e7ca      	b.n	8005a02 <_free_r+0x26>
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bd30      	pop	{r4, r5, pc}
 8005a70:	200005fc 	.word	0x200005fc

08005a74 <sbrk_aligned>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4e0e      	ldr	r6, [pc, #56]	; (8005ab0 <sbrk_aligned+0x3c>)
 8005a78:	460c      	mov	r4, r1
 8005a7a:	6831      	ldr	r1, [r6, #0]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	b911      	cbnz	r1, 8005a86 <sbrk_aligned+0x12>
 8005a80:	f000 f930 	bl	8005ce4 <_sbrk_r>
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	4621      	mov	r1, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 f92b 	bl	8005ce4 <_sbrk_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d00a      	beq.n	8005aa8 <sbrk_aligned+0x34>
 8005a92:	1cc4      	adds	r4, r0, #3
 8005a94:	f024 0403 	bic.w	r4, r4, #3
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d007      	beq.n	8005aac <sbrk_aligned+0x38>
 8005a9c:	1a21      	subs	r1, r4, r0
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 f920 	bl	8005ce4 <_sbrk_r>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d101      	bne.n	8005aac <sbrk_aligned+0x38>
 8005aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8005aac:	4620      	mov	r0, r4
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	20000600 	.word	0x20000600

08005ab4 <_malloc_r>:
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	1ccd      	adds	r5, r1, #3
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	4607      	mov	r7, r0
 8005aca:	db01      	blt.n	8005ad0 <_malloc_r+0x1c>
 8005acc:	42a9      	cmp	r1, r5
 8005ace:	d905      	bls.n	8005adc <_malloc_r+0x28>
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005adc:	4e2e      	ldr	r6, [pc, #184]	; (8005b98 <_malloc_r+0xe4>)
 8005ade:	f000 faaf 	bl	8006040 <__malloc_lock>
 8005ae2:	6833      	ldr	r3, [r6, #0]
 8005ae4:	461c      	mov	r4, r3
 8005ae6:	bb34      	cbnz	r4, 8005b36 <_malloc_r+0x82>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4638      	mov	r0, r7
 8005aec:	f7ff ffc2 	bl	8005a74 <sbrk_aligned>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	4604      	mov	r4, r0
 8005af4:	d14d      	bne.n	8005b92 <_malloc_r+0xde>
 8005af6:	6834      	ldr	r4, [r6, #0]
 8005af8:	4626      	mov	r6, r4
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	d140      	bne.n	8005b80 <_malloc_r+0xcc>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	4631      	mov	r1, r6
 8005b02:	4638      	mov	r0, r7
 8005b04:	eb04 0803 	add.w	r8, r4, r3
 8005b08:	f000 f8ec 	bl	8005ce4 <_sbrk_r>
 8005b0c:	4580      	cmp	r8, r0
 8005b0e:	d13a      	bne.n	8005b86 <_malloc_r+0xd2>
 8005b10:	6821      	ldr	r1, [r4, #0]
 8005b12:	3503      	adds	r5, #3
 8005b14:	1a6d      	subs	r5, r5, r1
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	4629      	mov	r1, r5
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff ffa5 	bl	8005a74 <sbrk_aligned>
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d02b      	beq.n	8005b86 <_malloc_r+0xd2>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	442b      	add	r3, r5
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	e00e      	b.n	8005b54 <_malloc_r+0xa0>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	1b52      	subs	r2, r2, r5
 8005b3a:	d41e      	bmi.n	8005b7a <_malloc_r+0xc6>
 8005b3c:	2a0b      	cmp	r2, #11
 8005b3e:	d916      	bls.n	8005b6e <_malloc_r+0xba>
 8005b40:	1961      	adds	r1, r4, r5
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	6025      	str	r5, [r4, #0]
 8005b46:	bf18      	it	ne
 8005b48:	6059      	strne	r1, [r3, #4]
 8005b4a:	6863      	ldr	r3, [r4, #4]
 8005b4c:	bf08      	it	eq
 8005b4e:	6031      	streq	r1, [r6, #0]
 8005b50:	5162      	str	r2, [r4, r5]
 8005b52:	604b      	str	r3, [r1, #4]
 8005b54:	4638      	mov	r0, r7
 8005b56:	f104 060b 	add.w	r6, r4, #11
 8005b5a:	f000 fa77 	bl	800604c <__malloc_unlock>
 8005b5e:	f026 0607 	bic.w	r6, r6, #7
 8005b62:	1d23      	adds	r3, r4, #4
 8005b64:	1af2      	subs	r2, r6, r3
 8005b66:	d0b6      	beq.n	8005ad6 <_malloc_r+0x22>
 8005b68:	1b9b      	subs	r3, r3, r6
 8005b6a:	50a3      	str	r3, [r4, r2]
 8005b6c:	e7b3      	b.n	8005ad6 <_malloc_r+0x22>
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	bf0c      	ite	eq
 8005b74:	6032      	streq	r2, [r6, #0]
 8005b76:	605a      	strne	r2, [r3, #4]
 8005b78:	e7ec      	b.n	8005b54 <_malloc_r+0xa0>
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	6864      	ldr	r4, [r4, #4]
 8005b7e:	e7b2      	b.n	8005ae6 <_malloc_r+0x32>
 8005b80:	4634      	mov	r4, r6
 8005b82:	6876      	ldr	r6, [r6, #4]
 8005b84:	e7b9      	b.n	8005afa <_malloc_r+0x46>
 8005b86:	230c      	movs	r3, #12
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	f000 fa5e 	bl	800604c <__malloc_unlock>
 8005b90:	e7a1      	b.n	8005ad6 <_malloc_r+0x22>
 8005b92:	6025      	str	r5, [r4, #0]
 8005b94:	e7de      	b.n	8005b54 <_malloc_r+0xa0>
 8005b96:	bf00      	nop
 8005b98:	200005fc 	.word	0x200005fc

08005b9c <iprintf>:
 8005b9c:	b40f      	push	{r0, r1, r2, r3}
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <iprintf+0x2c>)
 8005ba0:	b513      	push	{r0, r1, r4, lr}
 8005ba2:	681c      	ldr	r4, [r3, #0]
 8005ba4:	b124      	cbz	r4, 8005bb0 <iprintf+0x14>
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	b913      	cbnz	r3, 8005bb0 <iprintf+0x14>
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff fe3a 	bl	8005824 <__sinit>
 8005bb0:	ab05      	add	r3, sp, #20
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	68a1      	ldr	r1, [r4, #8]
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fa77 	bl	80060ac <_vfiprintf_r>
 8005bbe:	b002      	add	sp, #8
 8005bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc4:	b004      	add	sp, #16
 8005bc6:	4770      	bx	lr
 8005bc8:	20000040 	.word	0x20000040

08005bcc <putchar>:
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <putchar+0x28>)
 8005bce:	b513      	push	{r0, r1, r4, lr}
 8005bd0:	681c      	ldr	r4, [r3, #0]
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	b134      	cbz	r4, 8005be4 <putchar+0x18>
 8005bd6:	69a3      	ldr	r3, [r4, #24]
 8005bd8:	b923      	cbnz	r3, 8005be4 <putchar+0x18>
 8005bda:	9001      	str	r0, [sp, #4]
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff fe21 	bl	8005824 <__sinit>
 8005be2:	9901      	ldr	r1, [sp, #4]
 8005be4:	68a2      	ldr	r2, [r4, #8]
 8005be6:	4620      	mov	r0, r4
 8005be8:	b002      	add	sp, #8
 8005bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bee:	f000 bd21 	b.w	8006634 <_putc_r>
 8005bf2:	bf00      	nop
 8005bf4:	20000040 	.word	0x20000040

08005bf8 <_puts_r>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	460e      	mov	r6, r1
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	b118      	cbz	r0, 8005c08 <_puts_r+0x10>
 8005c00:	6983      	ldr	r3, [r0, #24]
 8005c02:	b90b      	cbnz	r3, 8005c08 <_puts_r+0x10>
 8005c04:	f7ff fe0e 	bl	8005824 <__sinit>
 8005c08:	69ab      	ldr	r3, [r5, #24]
 8005c0a:	68ac      	ldr	r4, [r5, #8]
 8005c0c:	b913      	cbnz	r3, 8005c14 <_puts_r+0x1c>
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f7ff fe08 	bl	8005824 <__sinit>
 8005c14:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <_puts_r+0xd0>)
 8005c16:	429c      	cmp	r4, r3
 8005c18:	d120      	bne.n	8005c5c <_puts_r+0x64>
 8005c1a:	686c      	ldr	r4, [r5, #4]
 8005c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d405      	bmi.n	8005c2e <_puts_r+0x36>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	0598      	lsls	r0, r3, #22
 8005c26:	d402      	bmi.n	8005c2e <_puts_r+0x36>
 8005c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2a:	f7ff febe 	bl	80059aa <__retarget_lock_acquire_recursive>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	0719      	lsls	r1, r3, #28
 8005c32:	d51d      	bpl.n	8005c70 <_puts_r+0x78>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	b1db      	cbz	r3, 8005c70 <_puts_r+0x78>
 8005c38:	3e01      	subs	r6, #1
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c40:	3b01      	subs	r3, #1
 8005c42:	60a3      	str	r3, [r4, #8]
 8005c44:	bb39      	cbnz	r1, 8005c96 <_puts_r+0x9e>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da38      	bge.n	8005cbc <_puts_r+0xc4>
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	210a      	movs	r1, #10
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f89c 	bl	8005d8c <__swbuf_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d011      	beq.n	8005c7c <_puts_r+0x84>
 8005c58:	250a      	movs	r5, #10
 8005c5a:	e011      	b.n	8005c80 <_puts_r+0x88>
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <_puts_r+0xd4>)
 8005c5e:	429c      	cmp	r4, r3
 8005c60:	d101      	bne.n	8005c66 <_puts_r+0x6e>
 8005c62:	68ac      	ldr	r4, [r5, #8]
 8005c64:	e7da      	b.n	8005c1c <_puts_r+0x24>
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <_puts_r+0xd8>)
 8005c68:	429c      	cmp	r4, r3
 8005c6a:	bf08      	it	eq
 8005c6c:	68ec      	ldreq	r4, [r5, #12]
 8005c6e:	e7d5      	b.n	8005c1c <_puts_r+0x24>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f8ee 	bl	8005e54 <__swsetup_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d0dd      	beq.n	8005c38 <_puts_r+0x40>
 8005c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c82:	07da      	lsls	r2, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_puts_r+0x9a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	059b      	lsls	r3, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_puts_r+0x9a>
 8005c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c8e:	f7ff fe8d 	bl	80059ac <__retarget_lock_release_recursive>
 8005c92:	4628      	mov	r0, r5
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da04      	bge.n	8005ca4 <_puts_r+0xac>
 8005c9a:	69a2      	ldr	r2, [r4, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	dc06      	bgt.n	8005cae <_puts_r+0xb6>
 8005ca0:	290a      	cmp	r1, #10
 8005ca2:	d004      	beq.n	8005cae <_puts_r+0xb6>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	7019      	strb	r1, [r3, #0]
 8005cac:	e7c5      	b.n	8005c3a <_puts_r+0x42>
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f86b 	bl	8005d8c <__swbuf_r>
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d1bf      	bne.n	8005c3a <_puts_r+0x42>
 8005cba:	e7df      	b.n	8005c7c <_puts_r+0x84>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	250a      	movs	r5, #10
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	701d      	strb	r5, [r3, #0]
 8005cc6:	e7db      	b.n	8005c80 <_puts_r+0x88>
 8005cc8:	08006af4 	.word	0x08006af4
 8005ccc:	08006b14 	.word	0x08006b14
 8005cd0:	08006ad4 	.word	0x08006ad4

08005cd4 <puts>:
 8005cd4:	4b02      	ldr	r3, [pc, #8]	; (8005ce0 <puts+0xc>)
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f7ff bf8d 	b.w	8005bf8 <_puts_r>
 8005cde:	bf00      	nop
 8005ce0:	20000040 	.word	0x20000040

08005ce4 <_sbrk_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	; (8005d00 <_sbrk_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fb ff44 	bl	8001b7c <_sbrk>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_sbrk_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_sbrk_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	20000604 	.word	0x20000604

08005d04 <__sread>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	460c      	mov	r4, r1
 8005d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0c:	f000 fcda 	bl	80066c4 <_read_r>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	bfab      	itete	ge
 8005d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d16:	89a3      	ldrhlt	r3, [r4, #12]
 8005d18:	181b      	addge	r3, r3, r0
 8005d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d1e:	bfac      	ite	ge
 8005d20:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d22:	81a3      	strhlt	r3, [r4, #12]
 8005d24:	bd10      	pop	{r4, pc}

08005d26 <__swrite>:
 8005d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2a:	461f      	mov	r7, r3
 8005d2c:	898b      	ldrh	r3, [r1, #12]
 8005d2e:	05db      	lsls	r3, r3, #23
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	4616      	mov	r6, r2
 8005d36:	d505      	bpl.n	8005d44 <__swrite+0x1e>
 8005d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f000 f906 	bl	8005f50 <_lseek_r>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	4632      	mov	r2, r6
 8005d52:	463b      	mov	r3, r7
 8005d54:	4628      	mov	r0, r5
 8005d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5a:	f000 b869 	b.w	8005e30 <_write_r>

08005d5e <__sseek>:
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	460c      	mov	r4, r1
 8005d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d66:	f000 f8f3 	bl	8005f50 <_lseek_r>
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	bf15      	itete	ne
 8005d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d7a:	81a3      	strheq	r3, [r4, #12]
 8005d7c:	bf18      	it	ne
 8005d7e:	81a3      	strhne	r3, [r4, #12]
 8005d80:	bd10      	pop	{r4, pc}

08005d82 <__sclose>:
 8005d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d86:	f000 b8d3 	b.w	8005f30 <_close_r>
	...

08005d8c <__swbuf_r>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	460e      	mov	r6, r1
 8005d90:	4614      	mov	r4, r2
 8005d92:	4605      	mov	r5, r0
 8005d94:	b118      	cbz	r0, 8005d9e <__swbuf_r+0x12>
 8005d96:	6983      	ldr	r3, [r0, #24]
 8005d98:	b90b      	cbnz	r3, 8005d9e <__swbuf_r+0x12>
 8005d9a:	f7ff fd43 	bl	8005824 <__sinit>
 8005d9e:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <__swbuf_r+0x98>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d12b      	bne.n	8005dfc <__swbuf_r+0x70>
 8005da4:	686c      	ldr	r4, [r5, #4]
 8005da6:	69a3      	ldr	r3, [r4, #24]
 8005da8:	60a3      	str	r3, [r4, #8]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	071a      	lsls	r2, r3, #28
 8005dae:	d52f      	bpl.n	8005e10 <__swbuf_r+0x84>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	b36b      	cbz	r3, 8005e10 <__swbuf_r+0x84>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	1ac0      	subs	r0, r0, r3
 8005dba:	6963      	ldr	r3, [r4, #20]
 8005dbc:	b2f6      	uxtb	r6, r6
 8005dbe:	4283      	cmp	r3, r0
 8005dc0:	4637      	mov	r7, r6
 8005dc2:	dc04      	bgt.n	8005dce <__swbuf_r+0x42>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7ff fc86 	bl	80056d8 <_fflush_r>
 8005dcc:	bb30      	cbnz	r0, 8005e1c <__swbuf_r+0x90>
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	6022      	str	r2, [r4, #0]
 8005dda:	701e      	strb	r6, [r3, #0]
 8005ddc:	6963      	ldr	r3, [r4, #20]
 8005dde:	3001      	adds	r0, #1
 8005de0:	4283      	cmp	r3, r0
 8005de2:	d004      	beq.n	8005dee <__swbuf_r+0x62>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	07db      	lsls	r3, r3, #31
 8005de8:	d506      	bpl.n	8005df8 <__swbuf_r+0x6c>
 8005dea:	2e0a      	cmp	r6, #10
 8005dec:	d104      	bne.n	8005df8 <__swbuf_r+0x6c>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7ff fc71 	bl	80056d8 <_fflush_r>
 8005df6:	b988      	cbnz	r0, 8005e1c <__swbuf_r+0x90>
 8005df8:	4638      	mov	r0, r7
 8005dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <__swbuf_r+0x9c>)
 8005dfe:	429c      	cmp	r4, r3
 8005e00:	d101      	bne.n	8005e06 <__swbuf_r+0x7a>
 8005e02:	68ac      	ldr	r4, [r5, #8]
 8005e04:	e7cf      	b.n	8005da6 <__swbuf_r+0x1a>
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <__swbuf_r+0xa0>)
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	bf08      	it	eq
 8005e0c:	68ec      	ldreq	r4, [r5, #12]
 8005e0e:	e7ca      	b.n	8005da6 <__swbuf_r+0x1a>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f81e 	bl	8005e54 <__swsetup_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d0cb      	beq.n	8005db4 <__swbuf_r+0x28>
 8005e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e20:	e7ea      	b.n	8005df8 <__swbuf_r+0x6c>
 8005e22:	bf00      	nop
 8005e24:	08006af4 	.word	0x08006af4
 8005e28:	08006b14 	.word	0x08006b14
 8005e2c:	08006ad4 	.word	0x08006ad4

08005e30 <_write_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	; (8005e50 <_write_r+0x20>)
 8005e34:	4604      	mov	r4, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fb fe4b 	bl	8001ada <_write>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_write_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_write_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000604 	.word	0x20000604

08005e54 <__swsetup_r>:
 8005e54:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <__swsetup_r+0xcc>)
 8005e56:	b570      	push	{r4, r5, r6, lr}
 8005e58:	681d      	ldr	r5, [r3, #0]
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	b125      	cbz	r5, 8005e6a <__swsetup_r+0x16>
 8005e60:	69ab      	ldr	r3, [r5, #24]
 8005e62:	b913      	cbnz	r3, 8005e6a <__swsetup_r+0x16>
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7ff fcdd 	bl	8005824 <__sinit>
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <__swsetup_r+0xd0>)
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d10f      	bne.n	8005e90 <__swsetup_r+0x3c>
 8005e70:	686c      	ldr	r4, [r5, #4]
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e78:	0719      	lsls	r1, r3, #28
 8005e7a:	d42c      	bmi.n	8005ed6 <__swsetup_r+0x82>
 8005e7c:	06dd      	lsls	r5, r3, #27
 8005e7e:	d411      	bmi.n	8005ea4 <__swsetup_r+0x50>
 8005e80:	2309      	movs	r3, #9
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	e03e      	b.n	8005f0e <__swsetup_r+0xba>
 8005e90:	4b25      	ldr	r3, [pc, #148]	; (8005f28 <__swsetup_r+0xd4>)
 8005e92:	429c      	cmp	r4, r3
 8005e94:	d101      	bne.n	8005e9a <__swsetup_r+0x46>
 8005e96:	68ac      	ldr	r4, [r5, #8]
 8005e98:	e7eb      	b.n	8005e72 <__swsetup_r+0x1e>
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <__swsetup_r+0xd8>)
 8005e9c:	429c      	cmp	r4, r3
 8005e9e:	bf08      	it	eq
 8005ea0:	68ec      	ldreq	r4, [r5, #12]
 8005ea2:	e7e6      	b.n	8005e72 <__swsetup_r+0x1e>
 8005ea4:	0758      	lsls	r0, r3, #29
 8005ea6:	d512      	bpl.n	8005ece <__swsetup_r+0x7a>
 8005ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eaa:	b141      	cbz	r1, 8005ebe <__swsetup_r+0x6a>
 8005eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	d002      	beq.n	8005eba <__swsetup_r+0x66>
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff fd91 	bl	80059dc <_free_r>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6063      	str	r3, [r4, #4]
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	f043 0308 	orr.w	r3, r3, #8
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	b94b      	cbnz	r3, 8005eee <__swsetup_r+0x9a>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee4:	d003      	beq.n	8005eee <__swsetup_r+0x9a>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f869 	bl	8005fc0 <__smakebuf_r>
 8005eee:	89a0      	ldrh	r0, [r4, #12]
 8005ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ef4:	f010 0301 	ands.w	r3, r0, #1
 8005ef8:	d00a      	beq.n	8005f10 <__swsetup_r+0xbc>
 8005efa:	2300      	movs	r3, #0
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	6963      	ldr	r3, [r4, #20]
 8005f00:	425b      	negs	r3, r3
 8005f02:	61a3      	str	r3, [r4, #24]
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	b943      	cbnz	r3, 8005f1a <__swsetup_r+0xc6>
 8005f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f0c:	d1ba      	bne.n	8005e84 <__swsetup_r+0x30>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	0781      	lsls	r1, r0, #30
 8005f12:	bf58      	it	pl
 8005f14:	6963      	ldrpl	r3, [r4, #20]
 8005f16:	60a3      	str	r3, [r4, #8]
 8005f18:	e7f4      	b.n	8005f04 <__swsetup_r+0xb0>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e7f7      	b.n	8005f0e <__swsetup_r+0xba>
 8005f1e:	bf00      	nop
 8005f20:	20000040 	.word	0x20000040
 8005f24:	08006af4 	.word	0x08006af4
 8005f28:	08006b14 	.word	0x08006b14
 8005f2c:	08006ad4 	.word	0x08006ad4

08005f30 <_close_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d06      	ldr	r5, [pc, #24]	; (8005f4c <_close_r+0x1c>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb fde9 	bl	8001b12 <_close>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_close_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_close_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000604 	.word	0x20000604

08005f50 <_lseek_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	; (8005f70 <_lseek_r+0x20>)
 8005f54:	4604      	mov	r4, r0
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fb fdfe 	bl	8001b60 <_lseek>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_lseek_r+0x1e>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_lseek_r+0x1e>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	20000604 	.word	0x20000604

08005f74 <__swhatbuf_r>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	460e      	mov	r6, r1
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	b096      	sub	sp, #88	; 0x58
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	da08      	bge.n	8005f98 <__swhatbuf_r+0x24>
 8005f86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	061a      	lsls	r2, r3, #24
 8005f90:	d410      	bmi.n	8005fb4 <__swhatbuf_r+0x40>
 8005f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f96:	e00e      	b.n	8005fb6 <__swhatbuf_r+0x42>
 8005f98:	466a      	mov	r2, sp
 8005f9a:	f000 fba5 	bl	80066e8 <_fstat_r>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	dbf1      	blt.n	8005f86 <__swhatbuf_r+0x12>
 8005fa2:	9a01      	ldr	r2, [sp, #4]
 8005fa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fac:	425a      	negs	r2, r3
 8005fae:	415a      	adcs	r2, r3
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	e7ee      	b.n	8005f92 <__swhatbuf_r+0x1e>
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	b016      	add	sp, #88	; 0x58
 8005fbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fc0 <__smakebuf_r>:
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fc4:	079d      	lsls	r5, r3, #30
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	d507      	bpl.n	8005fdc <__smakebuf_r+0x1c>
 8005fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	6163      	str	r3, [r4, #20]
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	ab01      	add	r3, sp, #4
 8005fde:	466a      	mov	r2, sp
 8005fe0:	f7ff ffc8 	bl	8005f74 <__swhatbuf_r>
 8005fe4:	9900      	ldr	r1, [sp, #0]
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff fd63 	bl	8005ab4 <_malloc_r>
 8005fee:	b948      	cbnz	r0, 8006004 <__smakebuf_r+0x44>
 8005ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff4:	059a      	lsls	r2, r3, #22
 8005ff6:	d4ef      	bmi.n	8005fd8 <__smakebuf_r+0x18>
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	f043 0302 	orr.w	r3, r3, #2
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	e7e3      	b.n	8005fcc <__smakebuf_r+0xc>
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <__smakebuf_r+0x7c>)
 8006006:	62b3      	str	r3, [r6, #40]	; 0x28
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	6020      	str	r0, [r4, #0]
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	9b00      	ldr	r3, [sp, #0]
 8006014:	6163      	str	r3, [r4, #20]
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	6120      	str	r0, [r4, #16]
 800601a:	b15b      	cbz	r3, 8006034 <__smakebuf_r+0x74>
 800601c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 fb73 	bl	800670c <_isatty_r>
 8006026:	b128      	cbz	r0, 8006034 <__smakebuf_r+0x74>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	89a0      	ldrh	r0, [r4, #12]
 8006036:	4305      	orrs	r5, r0
 8006038:	81a5      	strh	r5, [r4, #12]
 800603a:	e7cd      	b.n	8005fd8 <__smakebuf_r+0x18>
 800603c:	080057bd 	.word	0x080057bd

08006040 <__malloc_lock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_lock+0x8>)
 8006042:	f7ff bcb2 	b.w	80059aa <__retarget_lock_acquire_recursive>
 8006046:	bf00      	nop
 8006048:	200005f8 	.word	0x200005f8

0800604c <__malloc_unlock>:
 800604c:	4801      	ldr	r0, [pc, #4]	; (8006054 <__malloc_unlock+0x8>)
 800604e:	f7ff bcad 	b.w	80059ac <__retarget_lock_release_recursive>
 8006052:	bf00      	nop
 8006054:	200005f8 	.word	0x200005f8

08006058 <__sfputc_r>:
 8006058:	6893      	ldr	r3, [r2, #8]
 800605a:	3b01      	subs	r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	b410      	push	{r4}
 8006060:	6093      	str	r3, [r2, #8]
 8006062:	da08      	bge.n	8006076 <__sfputc_r+0x1e>
 8006064:	6994      	ldr	r4, [r2, #24]
 8006066:	42a3      	cmp	r3, r4
 8006068:	db01      	blt.n	800606e <__sfputc_r+0x16>
 800606a:	290a      	cmp	r1, #10
 800606c:	d103      	bne.n	8006076 <__sfputc_r+0x1e>
 800606e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006072:	f7ff be8b 	b.w	8005d8c <__swbuf_r>
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	1c58      	adds	r0, r3, #1
 800607a:	6010      	str	r0, [r2, #0]
 800607c:	7019      	strb	r1, [r3, #0]
 800607e:	4608      	mov	r0, r1
 8006080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006084:	4770      	bx	lr

08006086 <__sfputs_r>:
 8006086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006088:	4606      	mov	r6, r0
 800608a:	460f      	mov	r7, r1
 800608c:	4614      	mov	r4, r2
 800608e:	18d5      	adds	r5, r2, r3
 8006090:	42ac      	cmp	r4, r5
 8006092:	d101      	bne.n	8006098 <__sfputs_r+0x12>
 8006094:	2000      	movs	r0, #0
 8006096:	e007      	b.n	80060a8 <__sfputs_r+0x22>
 8006098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609c:	463a      	mov	r2, r7
 800609e:	4630      	mov	r0, r6
 80060a0:	f7ff ffda 	bl	8006058 <__sfputc_r>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d1f3      	bne.n	8006090 <__sfputs_r+0xa>
 80060a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060ac <_vfiprintf_r>:
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	460d      	mov	r5, r1
 80060b2:	b09d      	sub	sp, #116	; 0x74
 80060b4:	4614      	mov	r4, r2
 80060b6:	4698      	mov	r8, r3
 80060b8:	4606      	mov	r6, r0
 80060ba:	b118      	cbz	r0, 80060c4 <_vfiprintf_r+0x18>
 80060bc:	6983      	ldr	r3, [r0, #24]
 80060be:	b90b      	cbnz	r3, 80060c4 <_vfiprintf_r+0x18>
 80060c0:	f7ff fbb0 	bl	8005824 <__sinit>
 80060c4:	4b89      	ldr	r3, [pc, #548]	; (80062ec <_vfiprintf_r+0x240>)
 80060c6:	429d      	cmp	r5, r3
 80060c8:	d11b      	bne.n	8006102 <_vfiprintf_r+0x56>
 80060ca:	6875      	ldr	r5, [r6, #4]
 80060cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ce:	07d9      	lsls	r1, r3, #31
 80060d0:	d405      	bmi.n	80060de <_vfiprintf_r+0x32>
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	059a      	lsls	r2, r3, #22
 80060d6:	d402      	bmi.n	80060de <_vfiprintf_r+0x32>
 80060d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060da:	f7ff fc66 	bl	80059aa <__retarget_lock_acquire_recursive>
 80060de:	89ab      	ldrh	r3, [r5, #12]
 80060e0:	071b      	lsls	r3, r3, #28
 80060e2:	d501      	bpl.n	80060e8 <_vfiprintf_r+0x3c>
 80060e4:	692b      	ldr	r3, [r5, #16]
 80060e6:	b9eb      	cbnz	r3, 8006124 <_vfiprintf_r+0x78>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff feb2 	bl	8005e54 <__swsetup_r>
 80060f0:	b1c0      	cbz	r0, 8006124 <_vfiprintf_r+0x78>
 80060f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060f4:	07dc      	lsls	r4, r3, #31
 80060f6:	d50e      	bpl.n	8006116 <_vfiprintf_r+0x6a>
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	b01d      	add	sp, #116	; 0x74
 80060fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006102:	4b7b      	ldr	r3, [pc, #492]	; (80062f0 <_vfiprintf_r+0x244>)
 8006104:	429d      	cmp	r5, r3
 8006106:	d101      	bne.n	800610c <_vfiprintf_r+0x60>
 8006108:	68b5      	ldr	r5, [r6, #8]
 800610a:	e7df      	b.n	80060cc <_vfiprintf_r+0x20>
 800610c:	4b79      	ldr	r3, [pc, #484]	; (80062f4 <_vfiprintf_r+0x248>)
 800610e:	429d      	cmp	r5, r3
 8006110:	bf08      	it	eq
 8006112:	68f5      	ldreq	r5, [r6, #12]
 8006114:	e7da      	b.n	80060cc <_vfiprintf_r+0x20>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	0598      	lsls	r0, r3, #22
 800611a:	d4ed      	bmi.n	80060f8 <_vfiprintf_r+0x4c>
 800611c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800611e:	f7ff fc45 	bl	80059ac <__retarget_lock_release_recursive>
 8006122:	e7e9      	b.n	80060f8 <_vfiprintf_r+0x4c>
 8006124:	2300      	movs	r3, #0
 8006126:	9309      	str	r3, [sp, #36]	; 0x24
 8006128:	2320      	movs	r3, #32
 800612a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800612e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006132:	2330      	movs	r3, #48	; 0x30
 8006134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062f8 <_vfiprintf_r+0x24c>
 8006138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800613c:	f04f 0901 	mov.w	r9, #1
 8006140:	4623      	mov	r3, r4
 8006142:	469a      	mov	sl, r3
 8006144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006148:	b10a      	cbz	r2, 800614e <_vfiprintf_r+0xa2>
 800614a:	2a25      	cmp	r2, #37	; 0x25
 800614c:	d1f9      	bne.n	8006142 <_vfiprintf_r+0x96>
 800614e:	ebba 0b04 	subs.w	fp, sl, r4
 8006152:	d00b      	beq.n	800616c <_vfiprintf_r+0xc0>
 8006154:	465b      	mov	r3, fp
 8006156:	4622      	mov	r2, r4
 8006158:	4629      	mov	r1, r5
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ff93 	bl	8006086 <__sfputs_r>
 8006160:	3001      	adds	r0, #1
 8006162:	f000 80aa 	beq.w	80062ba <_vfiprintf_r+0x20e>
 8006166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006168:	445a      	add	r2, fp
 800616a:	9209      	str	r2, [sp, #36]	; 0x24
 800616c:	f89a 3000 	ldrb.w	r3, [sl]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80a2 	beq.w	80062ba <_vfiprintf_r+0x20e>
 8006176:	2300      	movs	r3, #0
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006180:	f10a 0a01 	add.w	sl, sl, #1
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	9307      	str	r3, [sp, #28]
 8006188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800618c:	931a      	str	r3, [sp, #104]	; 0x68
 800618e:	4654      	mov	r4, sl
 8006190:	2205      	movs	r2, #5
 8006192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006196:	4858      	ldr	r0, [pc, #352]	; (80062f8 <_vfiprintf_r+0x24c>)
 8006198:	f7fa f82a 	bl	80001f0 <memchr>
 800619c:	9a04      	ldr	r2, [sp, #16]
 800619e:	b9d8      	cbnz	r0, 80061d8 <_vfiprintf_r+0x12c>
 80061a0:	06d1      	lsls	r1, r2, #27
 80061a2:	bf44      	itt	mi
 80061a4:	2320      	movmi	r3, #32
 80061a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061aa:	0713      	lsls	r3, r2, #28
 80061ac:	bf44      	itt	mi
 80061ae:	232b      	movmi	r3, #43	; 0x2b
 80061b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061b4:	f89a 3000 	ldrb.w	r3, [sl]
 80061b8:	2b2a      	cmp	r3, #42	; 0x2a
 80061ba:	d015      	beq.n	80061e8 <_vfiprintf_r+0x13c>
 80061bc:	9a07      	ldr	r2, [sp, #28]
 80061be:	4654      	mov	r4, sl
 80061c0:	2000      	movs	r0, #0
 80061c2:	f04f 0c0a 	mov.w	ip, #10
 80061c6:	4621      	mov	r1, r4
 80061c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061cc:	3b30      	subs	r3, #48	; 0x30
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d94e      	bls.n	8006270 <_vfiprintf_r+0x1c4>
 80061d2:	b1b0      	cbz	r0, 8006202 <_vfiprintf_r+0x156>
 80061d4:	9207      	str	r2, [sp, #28]
 80061d6:	e014      	b.n	8006202 <_vfiprintf_r+0x156>
 80061d8:	eba0 0308 	sub.w	r3, r0, r8
 80061dc:	fa09 f303 	lsl.w	r3, r9, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	46a2      	mov	sl, r4
 80061e6:	e7d2      	b.n	800618e <_vfiprintf_r+0xe2>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	1d19      	adds	r1, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	9103      	str	r1, [sp, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfbb      	ittet	lt
 80061f4:	425b      	neglt	r3, r3
 80061f6:	f042 0202 	orrlt.w	r2, r2, #2
 80061fa:	9307      	strge	r3, [sp, #28]
 80061fc:	9307      	strlt	r3, [sp, #28]
 80061fe:	bfb8      	it	lt
 8006200:	9204      	strlt	r2, [sp, #16]
 8006202:	7823      	ldrb	r3, [r4, #0]
 8006204:	2b2e      	cmp	r3, #46	; 0x2e
 8006206:	d10c      	bne.n	8006222 <_vfiprintf_r+0x176>
 8006208:	7863      	ldrb	r3, [r4, #1]
 800620a:	2b2a      	cmp	r3, #42	; 0x2a
 800620c:	d135      	bne.n	800627a <_vfiprintf_r+0x1ce>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	1d1a      	adds	r2, r3, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	9203      	str	r2, [sp, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfb8      	it	lt
 800621a:	f04f 33ff 	movlt.w	r3, #4294967295
 800621e:	3402      	adds	r4, #2
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006308 <_vfiprintf_r+0x25c>
 8006226:	7821      	ldrb	r1, [r4, #0]
 8006228:	2203      	movs	r2, #3
 800622a:	4650      	mov	r0, sl
 800622c:	f7f9 ffe0 	bl	80001f0 <memchr>
 8006230:	b140      	cbz	r0, 8006244 <_vfiprintf_r+0x198>
 8006232:	2340      	movs	r3, #64	; 0x40
 8006234:	eba0 000a 	sub.w	r0, r0, sl
 8006238:	fa03 f000 	lsl.w	r0, r3, r0
 800623c:	9b04      	ldr	r3, [sp, #16]
 800623e:	4303      	orrs	r3, r0
 8006240:	3401      	adds	r4, #1
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006248:	482c      	ldr	r0, [pc, #176]	; (80062fc <_vfiprintf_r+0x250>)
 800624a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800624e:	2206      	movs	r2, #6
 8006250:	f7f9 ffce 	bl	80001f0 <memchr>
 8006254:	2800      	cmp	r0, #0
 8006256:	d03f      	beq.n	80062d8 <_vfiprintf_r+0x22c>
 8006258:	4b29      	ldr	r3, [pc, #164]	; (8006300 <_vfiprintf_r+0x254>)
 800625a:	bb1b      	cbnz	r3, 80062a4 <_vfiprintf_r+0x1f8>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	3307      	adds	r3, #7
 8006260:	f023 0307 	bic.w	r3, r3, #7
 8006264:	3308      	adds	r3, #8
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	443b      	add	r3, r7
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
 800626e:	e767      	b.n	8006140 <_vfiprintf_r+0x94>
 8006270:	fb0c 3202 	mla	r2, ip, r2, r3
 8006274:	460c      	mov	r4, r1
 8006276:	2001      	movs	r0, #1
 8006278:	e7a5      	b.n	80061c6 <_vfiprintf_r+0x11a>
 800627a:	2300      	movs	r3, #0
 800627c:	3401      	adds	r4, #1
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	4619      	mov	r1, r3
 8006282:	f04f 0c0a 	mov.w	ip, #10
 8006286:	4620      	mov	r0, r4
 8006288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800628c:	3a30      	subs	r2, #48	; 0x30
 800628e:	2a09      	cmp	r2, #9
 8006290:	d903      	bls.n	800629a <_vfiprintf_r+0x1ee>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0c5      	beq.n	8006222 <_vfiprintf_r+0x176>
 8006296:	9105      	str	r1, [sp, #20]
 8006298:	e7c3      	b.n	8006222 <_vfiprintf_r+0x176>
 800629a:	fb0c 2101 	mla	r1, ip, r1, r2
 800629e:	4604      	mov	r4, r0
 80062a0:	2301      	movs	r3, #1
 80062a2:	e7f0      	b.n	8006286 <_vfiprintf_r+0x1da>
 80062a4:	ab03      	add	r3, sp, #12
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	462a      	mov	r2, r5
 80062aa:	4b16      	ldr	r3, [pc, #88]	; (8006304 <_vfiprintf_r+0x258>)
 80062ac:	a904      	add	r1, sp, #16
 80062ae:	4630      	mov	r0, r6
 80062b0:	f3af 8000 	nop.w
 80062b4:	4607      	mov	r7, r0
 80062b6:	1c78      	adds	r0, r7, #1
 80062b8:	d1d6      	bne.n	8006268 <_vfiprintf_r+0x1bc>
 80062ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062bc:	07d9      	lsls	r1, r3, #31
 80062be:	d405      	bmi.n	80062cc <_vfiprintf_r+0x220>
 80062c0:	89ab      	ldrh	r3, [r5, #12]
 80062c2:	059a      	lsls	r2, r3, #22
 80062c4:	d402      	bmi.n	80062cc <_vfiprintf_r+0x220>
 80062c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062c8:	f7ff fb70 	bl	80059ac <__retarget_lock_release_recursive>
 80062cc:	89ab      	ldrh	r3, [r5, #12]
 80062ce:	065b      	lsls	r3, r3, #25
 80062d0:	f53f af12 	bmi.w	80060f8 <_vfiprintf_r+0x4c>
 80062d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d6:	e711      	b.n	80060fc <_vfiprintf_r+0x50>
 80062d8:	ab03      	add	r3, sp, #12
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	462a      	mov	r2, r5
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <_vfiprintf_r+0x258>)
 80062e0:	a904      	add	r1, sp, #16
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 f880 	bl	80063e8 <_printf_i>
 80062e8:	e7e4      	b.n	80062b4 <_vfiprintf_r+0x208>
 80062ea:	bf00      	nop
 80062ec:	08006af4 	.word	0x08006af4
 80062f0:	08006b14 	.word	0x08006b14
 80062f4:	08006ad4 	.word	0x08006ad4
 80062f8:	08006b38 	.word	0x08006b38
 80062fc:	08006b42 	.word	0x08006b42
 8006300:	00000000 	.word	0x00000000
 8006304:	08006087 	.word	0x08006087
 8006308:	08006b3e 	.word	0x08006b3e

0800630c <_printf_common>:
 800630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	4616      	mov	r6, r2
 8006312:	4699      	mov	r9, r3
 8006314:	688a      	ldr	r2, [r1, #8]
 8006316:	690b      	ldr	r3, [r1, #16]
 8006318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800631c:	4293      	cmp	r3, r2
 800631e:	bfb8      	it	lt
 8006320:	4613      	movlt	r3, r2
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006328:	4607      	mov	r7, r0
 800632a:	460c      	mov	r4, r1
 800632c:	b10a      	cbz	r2, 8006332 <_printf_common+0x26>
 800632e:	3301      	adds	r3, #1
 8006330:	6033      	str	r3, [r6, #0]
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	0699      	lsls	r1, r3, #26
 8006336:	bf42      	ittt	mi
 8006338:	6833      	ldrmi	r3, [r6, #0]
 800633a:	3302      	addmi	r3, #2
 800633c:	6033      	strmi	r3, [r6, #0]
 800633e:	6825      	ldr	r5, [r4, #0]
 8006340:	f015 0506 	ands.w	r5, r5, #6
 8006344:	d106      	bne.n	8006354 <_printf_common+0x48>
 8006346:	f104 0a19 	add.w	sl, r4, #25
 800634a:	68e3      	ldr	r3, [r4, #12]
 800634c:	6832      	ldr	r2, [r6, #0]
 800634e:	1a9b      	subs	r3, r3, r2
 8006350:	42ab      	cmp	r3, r5
 8006352:	dc26      	bgt.n	80063a2 <_printf_common+0x96>
 8006354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006358:	1e13      	subs	r3, r2, #0
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	bf18      	it	ne
 800635e:	2301      	movne	r3, #1
 8006360:	0692      	lsls	r2, r2, #26
 8006362:	d42b      	bmi.n	80063bc <_printf_common+0xb0>
 8006364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006368:	4649      	mov	r1, r9
 800636a:	4638      	mov	r0, r7
 800636c:	47c0      	blx	r8
 800636e:	3001      	adds	r0, #1
 8006370:	d01e      	beq.n	80063b0 <_printf_common+0xa4>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	68e5      	ldr	r5, [r4, #12]
 8006376:	6832      	ldr	r2, [r6, #0]
 8006378:	f003 0306 	and.w	r3, r3, #6
 800637c:	2b04      	cmp	r3, #4
 800637e:	bf08      	it	eq
 8006380:	1aad      	subeq	r5, r5, r2
 8006382:	68a3      	ldr	r3, [r4, #8]
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	bf0c      	ite	eq
 8006388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800638c:	2500      	movne	r5, #0
 800638e:	4293      	cmp	r3, r2
 8006390:	bfc4      	itt	gt
 8006392:	1a9b      	subgt	r3, r3, r2
 8006394:	18ed      	addgt	r5, r5, r3
 8006396:	2600      	movs	r6, #0
 8006398:	341a      	adds	r4, #26
 800639a:	42b5      	cmp	r5, r6
 800639c:	d11a      	bne.n	80063d4 <_printf_common+0xc8>
 800639e:	2000      	movs	r0, #0
 80063a0:	e008      	b.n	80063b4 <_printf_common+0xa8>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4652      	mov	r2, sl
 80063a6:	4649      	mov	r1, r9
 80063a8:	4638      	mov	r0, r7
 80063aa:	47c0      	blx	r8
 80063ac:	3001      	adds	r0, #1
 80063ae:	d103      	bne.n	80063b8 <_printf_common+0xac>
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b8:	3501      	adds	r5, #1
 80063ba:	e7c6      	b.n	800634a <_printf_common+0x3e>
 80063bc:	18e1      	adds	r1, r4, r3
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	2030      	movs	r0, #48	; 0x30
 80063c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063c6:	4422      	add	r2, r4
 80063c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d0:	3302      	adds	r3, #2
 80063d2:	e7c7      	b.n	8006364 <_printf_common+0x58>
 80063d4:	2301      	movs	r3, #1
 80063d6:	4622      	mov	r2, r4
 80063d8:	4649      	mov	r1, r9
 80063da:	4638      	mov	r0, r7
 80063dc:	47c0      	blx	r8
 80063de:	3001      	adds	r0, #1
 80063e0:	d0e6      	beq.n	80063b0 <_printf_common+0xa4>
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7d9      	b.n	800639a <_printf_common+0x8e>
	...

080063e8 <_printf_i>:
 80063e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	7e0f      	ldrb	r7, [r1, #24]
 80063ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f0:	2f78      	cmp	r7, #120	; 0x78
 80063f2:	4691      	mov	r9, r2
 80063f4:	4680      	mov	r8, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	469a      	mov	sl, r3
 80063fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063fe:	d807      	bhi.n	8006410 <_printf_i+0x28>
 8006400:	2f62      	cmp	r7, #98	; 0x62
 8006402:	d80a      	bhi.n	800641a <_printf_i+0x32>
 8006404:	2f00      	cmp	r7, #0
 8006406:	f000 80d8 	beq.w	80065ba <_printf_i+0x1d2>
 800640a:	2f58      	cmp	r7, #88	; 0x58
 800640c:	f000 80a3 	beq.w	8006556 <_printf_i+0x16e>
 8006410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006418:	e03a      	b.n	8006490 <_printf_i+0xa8>
 800641a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800641e:	2b15      	cmp	r3, #21
 8006420:	d8f6      	bhi.n	8006410 <_printf_i+0x28>
 8006422:	a101      	add	r1, pc, #4	; (adr r1, 8006428 <_printf_i+0x40>)
 8006424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006428:	08006481 	.word	0x08006481
 800642c:	08006495 	.word	0x08006495
 8006430:	08006411 	.word	0x08006411
 8006434:	08006411 	.word	0x08006411
 8006438:	08006411 	.word	0x08006411
 800643c:	08006411 	.word	0x08006411
 8006440:	08006495 	.word	0x08006495
 8006444:	08006411 	.word	0x08006411
 8006448:	08006411 	.word	0x08006411
 800644c:	08006411 	.word	0x08006411
 8006450:	08006411 	.word	0x08006411
 8006454:	080065a1 	.word	0x080065a1
 8006458:	080064c5 	.word	0x080064c5
 800645c:	08006583 	.word	0x08006583
 8006460:	08006411 	.word	0x08006411
 8006464:	08006411 	.word	0x08006411
 8006468:	080065c3 	.word	0x080065c3
 800646c:	08006411 	.word	0x08006411
 8006470:	080064c5 	.word	0x080064c5
 8006474:	08006411 	.word	0x08006411
 8006478:	08006411 	.word	0x08006411
 800647c:	0800658b 	.word	0x0800658b
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	1d1a      	adds	r2, r3, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	602a      	str	r2, [r5, #0]
 8006488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800648c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006490:	2301      	movs	r3, #1
 8006492:	e0a3      	b.n	80065dc <_printf_i+0x1f4>
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	6829      	ldr	r1, [r5, #0]
 8006498:	0606      	lsls	r6, r0, #24
 800649a:	f101 0304 	add.w	r3, r1, #4
 800649e:	d50a      	bpl.n	80064b6 <_printf_i+0xce>
 80064a0:	680e      	ldr	r6, [r1, #0]
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	2e00      	cmp	r6, #0
 80064a6:	da03      	bge.n	80064b0 <_printf_i+0xc8>
 80064a8:	232d      	movs	r3, #45	; 0x2d
 80064aa:	4276      	negs	r6, r6
 80064ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b0:	485e      	ldr	r0, [pc, #376]	; (800662c <_printf_i+0x244>)
 80064b2:	230a      	movs	r3, #10
 80064b4:	e019      	b.n	80064ea <_printf_i+0x102>
 80064b6:	680e      	ldr	r6, [r1, #0]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064be:	bf18      	it	ne
 80064c0:	b236      	sxthne	r6, r6
 80064c2:	e7ef      	b.n	80064a4 <_printf_i+0xbc>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	1d19      	adds	r1, r3, #4
 80064ca:	6029      	str	r1, [r5, #0]
 80064cc:	0601      	lsls	r1, r0, #24
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0xec>
 80064d0:	681e      	ldr	r6, [r3, #0]
 80064d2:	e002      	b.n	80064da <_printf_i+0xf2>
 80064d4:	0646      	lsls	r6, r0, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0xe8>
 80064d8:	881e      	ldrh	r6, [r3, #0]
 80064da:	4854      	ldr	r0, [pc, #336]	; (800662c <_printf_i+0x244>)
 80064dc:	2f6f      	cmp	r7, #111	; 0x6f
 80064de:	bf0c      	ite	eq
 80064e0:	2308      	moveq	r3, #8
 80064e2:	230a      	movne	r3, #10
 80064e4:	2100      	movs	r1, #0
 80064e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ea:	6865      	ldr	r5, [r4, #4]
 80064ec:	60a5      	str	r5, [r4, #8]
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	bfa2      	ittt	ge
 80064f2:	6821      	ldrge	r1, [r4, #0]
 80064f4:	f021 0104 	bicge.w	r1, r1, #4
 80064f8:	6021      	strge	r1, [r4, #0]
 80064fa:	b90e      	cbnz	r6, 8006500 <_printf_i+0x118>
 80064fc:	2d00      	cmp	r5, #0
 80064fe:	d04d      	beq.n	800659c <_printf_i+0x1b4>
 8006500:	4615      	mov	r5, r2
 8006502:	fbb6 f1f3 	udiv	r1, r6, r3
 8006506:	fb03 6711 	mls	r7, r3, r1, r6
 800650a:	5dc7      	ldrb	r7, [r0, r7]
 800650c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006510:	4637      	mov	r7, r6
 8006512:	42bb      	cmp	r3, r7
 8006514:	460e      	mov	r6, r1
 8006516:	d9f4      	bls.n	8006502 <_printf_i+0x11a>
 8006518:	2b08      	cmp	r3, #8
 800651a:	d10b      	bne.n	8006534 <_printf_i+0x14c>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	07de      	lsls	r6, r3, #31
 8006520:	d508      	bpl.n	8006534 <_printf_i+0x14c>
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	4299      	cmp	r1, r3
 8006528:	bfde      	ittt	le
 800652a:	2330      	movle	r3, #48	; 0x30
 800652c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006534:	1b52      	subs	r2, r2, r5
 8006536:	6122      	str	r2, [r4, #16]
 8006538:	f8cd a000 	str.w	sl, [sp]
 800653c:	464b      	mov	r3, r9
 800653e:	aa03      	add	r2, sp, #12
 8006540:	4621      	mov	r1, r4
 8006542:	4640      	mov	r0, r8
 8006544:	f7ff fee2 	bl	800630c <_printf_common>
 8006548:	3001      	adds	r0, #1
 800654a:	d14c      	bne.n	80065e6 <_printf_i+0x1fe>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b004      	add	sp, #16
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006556:	4835      	ldr	r0, [pc, #212]	; (800662c <_printf_i+0x244>)
 8006558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800655c:	6829      	ldr	r1, [r5, #0]
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f851 6b04 	ldr.w	r6, [r1], #4
 8006564:	6029      	str	r1, [r5, #0]
 8006566:	061d      	lsls	r5, r3, #24
 8006568:	d514      	bpl.n	8006594 <_printf_i+0x1ac>
 800656a:	07df      	lsls	r7, r3, #31
 800656c:	bf44      	itt	mi
 800656e:	f043 0320 	orrmi.w	r3, r3, #32
 8006572:	6023      	strmi	r3, [r4, #0]
 8006574:	b91e      	cbnz	r6, 800657e <_printf_i+0x196>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	f023 0320 	bic.w	r3, r3, #32
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	2310      	movs	r3, #16
 8006580:	e7b0      	b.n	80064e4 <_printf_i+0xfc>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	f043 0320 	orr.w	r3, r3, #32
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	2378      	movs	r3, #120	; 0x78
 800658c:	4828      	ldr	r0, [pc, #160]	; (8006630 <_printf_i+0x248>)
 800658e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006592:	e7e3      	b.n	800655c <_printf_i+0x174>
 8006594:	0659      	lsls	r1, r3, #25
 8006596:	bf48      	it	mi
 8006598:	b2b6      	uxthmi	r6, r6
 800659a:	e7e6      	b.n	800656a <_printf_i+0x182>
 800659c:	4615      	mov	r5, r2
 800659e:	e7bb      	b.n	8006518 <_printf_i+0x130>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6826      	ldr	r6, [r4, #0]
 80065a4:	6961      	ldr	r1, [r4, #20]
 80065a6:	1d18      	adds	r0, r3, #4
 80065a8:	6028      	str	r0, [r5, #0]
 80065aa:	0635      	lsls	r5, r6, #24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0x1cc>
 80065b0:	6019      	str	r1, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0x1d2>
 80065b4:	0670      	lsls	r0, r6, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0x1c8>
 80065b8:	8019      	strh	r1, [r3, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	4615      	mov	r5, r2
 80065c0:	e7ba      	b.n	8006538 <_printf_i+0x150>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	6862      	ldr	r2, [r4, #4]
 80065cc:	2100      	movs	r1, #0
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7f9 fe0e 	bl	80001f0 <memchr>
 80065d4:	b108      	cbz	r0, 80065da <_printf_i+0x1f2>
 80065d6:	1b40      	subs	r0, r0, r5
 80065d8:	6060      	str	r0, [r4, #4]
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	2300      	movs	r3, #0
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	e7a8      	b.n	8006538 <_printf_i+0x150>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d0ab      	beq.n	800654c <_printf_i+0x164>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	079b      	lsls	r3, r3, #30
 80065f8:	d413      	bmi.n	8006622 <_printf_i+0x23a>
 80065fa:	68e0      	ldr	r0, [r4, #12]
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	4298      	cmp	r0, r3
 8006600:	bfb8      	it	lt
 8006602:	4618      	movlt	r0, r3
 8006604:	e7a4      	b.n	8006550 <_printf_i+0x168>
 8006606:	2301      	movs	r3, #1
 8006608:	4632      	mov	r2, r6
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	47d0      	blx	sl
 8006610:	3001      	adds	r0, #1
 8006612:	d09b      	beq.n	800654c <_printf_i+0x164>
 8006614:	3501      	adds	r5, #1
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	9903      	ldr	r1, [sp, #12]
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	42ab      	cmp	r3, r5
 800661e:	dcf2      	bgt.n	8006606 <_printf_i+0x21e>
 8006620:	e7eb      	b.n	80065fa <_printf_i+0x212>
 8006622:	2500      	movs	r5, #0
 8006624:	f104 0619 	add.w	r6, r4, #25
 8006628:	e7f5      	b.n	8006616 <_printf_i+0x22e>
 800662a:	bf00      	nop
 800662c:	08006b49 	.word	0x08006b49
 8006630:	08006b5a 	.word	0x08006b5a

08006634 <_putc_r>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	460d      	mov	r5, r1
 8006638:	4614      	mov	r4, r2
 800663a:	4606      	mov	r6, r0
 800663c:	b118      	cbz	r0, 8006646 <_putc_r+0x12>
 800663e:	6983      	ldr	r3, [r0, #24]
 8006640:	b90b      	cbnz	r3, 8006646 <_putc_r+0x12>
 8006642:	f7ff f8ef 	bl	8005824 <__sinit>
 8006646:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <_putc_r+0x84>)
 8006648:	429c      	cmp	r4, r3
 800664a:	d124      	bne.n	8006696 <_putc_r+0x62>
 800664c:	6874      	ldr	r4, [r6, #4]
 800664e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006650:	07d8      	lsls	r0, r3, #31
 8006652:	d405      	bmi.n	8006660 <_putc_r+0x2c>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	0599      	lsls	r1, r3, #22
 8006658:	d402      	bmi.n	8006660 <_putc_r+0x2c>
 800665a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800665c:	f7ff f9a5 	bl	80059aa <__retarget_lock_acquire_recursive>
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	3b01      	subs	r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	da05      	bge.n	8006676 <_putc_r+0x42>
 800666a:	69a2      	ldr	r2, [r4, #24]
 800666c:	4293      	cmp	r3, r2
 800666e:	db1c      	blt.n	80066aa <_putc_r+0x76>
 8006670:	b2eb      	uxtb	r3, r5
 8006672:	2b0a      	cmp	r3, #10
 8006674:	d019      	beq.n	80066aa <_putc_r+0x76>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	701d      	strb	r5, [r3, #0]
 800667e:	b2ed      	uxtb	r5, r5
 8006680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d405      	bmi.n	8006692 <_putc_r+0x5e>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	059b      	lsls	r3, r3, #22
 800668a:	d402      	bmi.n	8006692 <_putc_r+0x5e>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f7ff f98d 	bl	80059ac <__retarget_lock_release_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	4b09      	ldr	r3, [pc, #36]	; (80066bc <_putc_r+0x88>)
 8006698:	429c      	cmp	r4, r3
 800669a:	d101      	bne.n	80066a0 <_putc_r+0x6c>
 800669c:	68b4      	ldr	r4, [r6, #8]
 800669e:	e7d6      	b.n	800664e <_putc_r+0x1a>
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <_putc_r+0x8c>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	bf08      	it	eq
 80066a6:	68f4      	ldreq	r4, [r6, #12]
 80066a8:	e7d1      	b.n	800664e <_putc_r+0x1a>
 80066aa:	4629      	mov	r1, r5
 80066ac:	4622      	mov	r2, r4
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff fb6c 	bl	8005d8c <__swbuf_r>
 80066b4:	4605      	mov	r5, r0
 80066b6:	e7e3      	b.n	8006680 <_putc_r+0x4c>
 80066b8:	08006af4 	.word	0x08006af4
 80066bc:	08006b14 	.word	0x08006b14
 80066c0:	08006ad4 	.word	0x08006ad4

080066c4 <_read_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d07      	ldr	r5, [pc, #28]	; (80066e4 <_read_r+0x20>)
 80066c8:	4604      	mov	r4, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fb f9e4 	bl	8001aa0 <_read>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_read_r+0x1e>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_read_r+0x1e>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000604 	.word	0x20000604

080066e8 <_fstat_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	; (8006708 <_fstat_r+0x20>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	f7fb fa18 	bl	8001b2a <_fstat>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	d102      	bne.n	8006704 <_fstat_r+0x1c>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b103      	cbz	r3, 8006704 <_fstat_r+0x1c>
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	20000604 	.word	0x20000604

0800670c <_isatty_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	; (8006728 <_isatty_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fb fa17 	bl	8001b4a <_isatty>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_isatty_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_isatty_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20000604 	.word	0x20000604

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
