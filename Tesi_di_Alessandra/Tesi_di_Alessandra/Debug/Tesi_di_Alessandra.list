
Tesi_di_Alessandra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800b180  0800b180  0001b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b58c  0800b58c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b58c  0800b58c  0001b58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b594  0800b594  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b598  0800b598  0001b598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0001db30  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001dd0c  2001dd0c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc39  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037eb  00000000  00000000  0003fe45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  00043630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a48  00000000  00000000  000451c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e130  00000000  00000000  00046c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e979  00000000  00000000  00074d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011493d  00000000  00000000  000936b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a7ff6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008818  00000000  00000000  001a8048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b168 	.word	0x0800b168

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800b168 	.word	0x0800b168

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f001 ff71 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f89f 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 fbaf 	bl	800164c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eee:	f000 fb4f 	bl	8001590 <MX_DMA_Init>
  MX_ADC3_Init();
 8000ef2:	f000 f90d 	bl	8001110 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f95d 	bl	80011b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000efa:	f000 f989 	bl	8001210 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000efe:	f000 f9b5 	bl	800126c <MX_I2S2_Init>
  MX_RTC_Init();
 8000f02:	f000 f9e1 	bl	80012c8 <MX_RTC_Init>
  MX_SPI4_Init();
 8000f06:	f000 fa39 	bl	800137c <MX_SPI4_Init>
  MX_TIM3_Init();
 8000f0a:	f000 fa6d 	bl	80013e8 <MX_TIM3_Init>
  MX_UART5_Init();
 8000f0e:	f000 faeb 	bl	80014e8 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 fb13 	bl	800153c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	contatore_campioni=0;
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <main+0x118>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

	bus_vibrometro.Init=BSP_SPI1_Init;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <main+0x11c>)
 8000f1e:	4a37      	ldr	r2, [pc, #220]	; (8000ffc <main+0x120>)
 8000f20:	601a      	str	r2, [r3, #0]
	bus_vibrometro.DeInit=BSP_SPI1_DeInit;
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <main+0x11c>)
 8000f24:	4a36      	ldr	r2, [pc, #216]	; (8001000 <main+0x124>)
 8000f26:	605a      	str	r2, [r3, #4]
	bus_vibrometro.BusType=1;
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <main+0x11c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	609a      	str	r2, [r3, #8]
	bus_vibrometro.ReadReg=iis3dwb_read_reg;
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <main+0x11c>)
 8000f30:	4a34      	ldr	r2, [pc, #208]	; (8001004 <main+0x128>)
 8000f32:	615a      	str	r2, [r3, #20]
//	bus_vibrometro.ReadReg=IIS3DWB_Read_Reg;
	bus_vibrometro.WriteReg=iis3dwb_write_reg;
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <main+0x11c>)
 8000f36:	4a34      	ldr	r2, [pc, #208]	; (8001008 <main+0x12c>)
 8000f38:	611a      	str	r2, [r3, #16]
//	bus_vibrometro.WriteReg=BSP_I2C1_WriteReg;
//	bus_vibrometro.Address=LSM303AGR_I2C_ADD_XL;



	IIS3DWB_RegisterBusIO(&vibration_sensor, &bus_vibrometro);
 8000f3a:	492f      	ldr	r1, [pc, #188]	; (8000ff8 <main+0x11c>)
 8000f3c:	4833      	ldr	r0, [pc, #204]	; (800100c <main+0x130>)
 8000f3e:	f001 fac5 	bl	80024cc <IIS3DWB_RegisterBusIO>
	if(IIS3DWB_Init(&vibration_sensor) ==HAL_OK){
 8000f42:	4832      	ldr	r0, [pc, #200]	; (800100c <main+0x130>)
 8000f44:	f001 fb0c 	bl	8002560 <IIS3DWB_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d107      	bne.n	8000f5e <main+0x82>
		IIS3DWB_ACC_SetOutputDataRate(&vibration_sensor, 6000);
 8000f4e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001010 <main+0x134>
 8000f52:	482e      	ldr	r0, [pc, #184]	; (800100c <main+0x130>)
 8000f54:	f001 fbe4 	bl	8002720 <IIS3DWB_ACC_SetOutputDataRate>
		IIS3DWB_ACC_Enable(&vibration_sensor);
 8000f58:	482c      	ldr	r0, [pc, #176]	; (800100c <main+0x130>)
 8000f5a:	f001 fb60 	bl	800261e <IIS3DWB_ACC_Enable>
	}

	HAL_TIM_Base_Start_IT(&htim3);
 8000f5e:	482d      	ldr	r0, [pc, #180]	; (8001014 <main+0x138>)
 8000f60:	f005 faa4 	bl	80064ac <HAL_TIM_Base_Start_IT>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(contatore_campioni>DIM){
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <main+0x118>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	ddf9      	ble.n	8000f64 <main+0x88>

			HAL_TIM_Base_Stop_IT(&htim3);
 8000f70:	4828      	ldr	r0, [pc, #160]	; (8001014 <main+0x138>)
 8000f72:	f005 fb0b 	bl	800658c <HAL_TIM_Base_Stop_IT>

			for(int i=0; i<DIM; i++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	e02c      	b.n	8000fd6 <main+0xfa>
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure[i].x, misure[i].y, misure[i].z);
 8000f7c:	4926      	ldr	r1, [pc, #152]	; (8001018 <main+0x13c>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	4822      	ldr	r0, [pc, #136]	; (8001018 <main+0x13c>)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4403      	add	r3, r0
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	4c1e      	ldr	r4, [pc, #120]	; (8001018 <main+0x13c>)
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4423      	add	r3, r4
 8000fac:	3308      	adds	r3, #8
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	4919      	ldr	r1, [pc, #100]	; (800101c <main+0x140>)
 8000fb8:	4819      	ldr	r0, [pc, #100]	; (8001020 <main+0x144>)
 8000fba:	f007 fe5d 	bl	8008c78 <siprintf>
				HAL_UART_Transmit(&huart2, &buffer, sizeof(buffer), 100);
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	2264      	movs	r2, #100	; 0x64
 8000fc2:	4917      	ldr	r1, [pc, #92]	; (8001020 <main+0x144>)
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <main+0x148>)
 8000fc6:	f006 f9f4 	bl	80073b2 <HAL_UART_Transmit>
				HAL_Delay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f001 ff6e 	bl	8002eac <HAL_Delay>
			for(int i=0; i<DIM; i++){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	ddcd      	ble.n	8000f7c <main+0xa0>

			}

			if(IIS3DWB_ACC_Disable(&vibration_sensor) ==HAL_OK){
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <main+0x130>)
 8000fe2:	f001 fb32 	bl	800264a <IIS3DWB_ACC_Disable>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1bb      	bne.n	8000f64 <main+0x88>
				IIS3DWB_DeInit(&vibration_sensor);
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <main+0x130>)
 8000fee:	f001 fb00 	bl	80025f2 <IIS3DWB_DeInit>
		if(contatore_campioni>DIM){
 8000ff2:	e7b7      	b.n	8000f64 <main+0x88>
 8000ff4:	2001dc30 	.word	0x2001dc30
 8000ff8:	2001dc10 	.word	0x2001dc10
 8000ffc:	08002bb5 	.word	0x08002bb5
 8001000:	08002c15 	.word	0x08002c15
 8001004:	08002885 	.word	0x08002885
 8001008:	080028b5 	.word	0x080028b5
 800100c:	20000718 	.word	0x20000718
 8001010:	45bb8000 	.word	0x45bb8000
 8001014:	200004c8 	.word	0x200004c8
 8001018:	20000750 	.word	0x20000750
 800101c:	0800b180 	.word	0x0800b180
 8001020:	2001dc34 	.word	0x2001dc34
 8001024:	20000554 	.word	0x20000554

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2234      	movs	r2, #52	; 0x34
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f007 f9ac 	bl	8008394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <SystemClock_Config+0xe0>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <SystemClock_Config+0xe0>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xe0>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <SystemClock_Config+0xe4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a26      	ldr	r2, [pc, #152]	; (800110c <SystemClock_Config+0xe4>)
 8001072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <SystemClock_Config+0xe4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001084:	2305      	movs	r3, #5
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 800109c:	230c      	movs	r3, #12
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010a0:	23b4      	movs	r3, #180	; 0xb4
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 fc31 	bl	800591c <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010c0:	f000 fbe6 	bl	8001890 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010c4:	f003 ff5e 	bl	8004f84 <HAL_PWREx_EnableOverDrive>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010ce:	f000 fbdf 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2105      	movs	r1, #5
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 ff97 	bl	8005024 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80010fc:	f000 fbc8 	bl	8001890 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <MX_ADC3_Init+0x9c>)
 8001126:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ADC3_Init+0x98>)
 800112a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_ADC3_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_ADC3_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <MX_ADC3_Init+0xa0>)
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_ADC3_Init+0x98>)
 800115e:	2201      	movs	r2, #1
 8001160:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ADC3_Init+0x98>)
 800116c:	2201      	movs	r2, #1
 800116e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001172:	f001 febf 	bl	8002ef4 <HAL_ADC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 fb88 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001180:	230e      	movs	r3, #14
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_ADC3_Init+0x98>)
 8001192:	f001 fef3 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800119c:	f000 fb78 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	40012200 	.word	0x40012200
 80011b0:	0f000001 	.word	0x0f000001

080011b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_I2C1_Init+0x50>)
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <MX_I2C1_Init+0x54>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_I2C1_Init+0x50>)
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_I2C1_Init+0x58>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x1F;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_I2C1_Init+0x50>)
 80011cc:	221f      	movs	r2, #31
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_I2C1_Init+0x50>)
 80011d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_I2C1_Init+0x50>)
 80011f2:	f003 f8d3 	bl	800439c <HAL_I2C_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011fc:	f000 fb48 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000240 	.word	0x20000240
 8001208:	40005400 	.word	0x40005400
 800120c:	00061a80 	.word	0x00061a80

08001210 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C2_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C2_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C2_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C2_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C2_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0x1E;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C2_Init+0x50>)
 8001228:	221e      	movs	r2, #30
 800122a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C2_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C2_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C2_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C2_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C2_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C2_Init+0x50>)
 800124e:	f003 f8a5 	bl	800439c <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fb1a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000294 	.word	0x20000294
 8001264:	40005800 	.word	0x40005800
 8001268:	00061a80 	.word	0x00061a80

0800126c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_I2S2_Init+0x54>)
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <MX_I2S2_Init+0x58>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2S2_Init+0x54>)
 8001278:	f44f 7240 	mov.w	r2, #768	; 0x300
 800127c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_I2S2_Init+0x54>)
 8001280:	2210      	movs	r2, #16
 8001282:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2S2_Init+0x54>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_I2S2_Init+0x54>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_I2S2_Init+0x54>)
 8001292:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001296:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2S2_Init+0x54>)
 800129a:	2208      	movs	r2, #8
 800129c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_I2S2_Init+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2S2_Init+0x54>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_I2S2_Init+0x54>)
 80012ac:	f003 f9ba 	bl	8004624 <HAL_I2S_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80012b6:	f000 faeb 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002e8 	.word	0x200002e8
 80012c4:	40003800 	.word	0x40003800

080012c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_RTC_Init+0xac>)
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <MX_RTC_Init+0xb0>)
 80012e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_RTC_Init+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_RTC_Init+0xac>)
 80012ee:	227f      	movs	r2, #127	; 0x7f
 80012f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_RTC_Init+0xac>)
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_RTC_Init+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_RTC_Init+0xac>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_RTC_Init+0xac>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <MX_RTC_Init+0xac>)
 800130c:	f004 fd8a 	bl	8005e24 <HAL_RTC_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 fabb 	bl	8001890 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800131a:	2300      	movs	r3, #0
 800131c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800131e:	2300      	movs	r3, #0
 8001320:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001322:	2300      	movs	r3, #0
 8001324:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	480f      	ldr	r0, [pc, #60]	; (8001374 <MX_RTC_Init+0xac>)
 8001336:	f004 fdeb 	bl	8005f10 <HAL_RTC_SetTime>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001340:	f000 faa6 	bl	8001890 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001344:	2301      	movs	r3, #1
 8001346:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001348:	2301      	movs	r3, #1
 800134a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800134c:	2301      	movs	r3, #1
 800134e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001350:	2300      	movs	r3, #0
 8001352:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_RTC_Init+0xac>)
 800135c:	f004 fe72 	bl	8006044 <HAL_RTC_SetDate>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001366:	f000 fa93 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000390 	.word	0x20000390
 8001378:	40002800 	.word	0x40002800

0800137c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_SPI4_Init+0x64>)
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <MX_SPI4_Init+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI4_Init+0x64>)
 8001388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI4_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_SPI4_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI4_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013b0:	2218      	movs	r2, #24
 80013b2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013c8:	220a      	movs	r2, #10
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_SPI4_Init+0x64>)
 80013ce:	f004 ff5e 	bl	800628e <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80013d8:	f000 fa5a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200003b0 	.word	0x200003b0
 80013e4:	40013400 	.word	0x40013400

080013e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_TIM3_Init+0xf8>)
 800141a:	4a32      	ldr	r2, [pc, #200]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800141c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_TIM3_Init+0xf8>)
 8001420:	222c      	movs	r2, #44	; 0x2c
 8001422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_TIM3_Init+0xf8>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_TIM3_Init+0xf8>)
 800142c:	22c7      	movs	r2, #199	; 0xc7
 800142e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_TIM3_Init+0xf8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_TIM3_Init+0xf8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800143c:	4828      	ldr	r0, [pc, #160]	; (80014e0 <MX_TIM3_Init+0xf8>)
 800143e:	f004 ffe5 	bl	800640c <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001448:	f000 fa22 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	4821      	ldr	r0, [pc, #132]	; (80014e0 <MX_TIM3_Init+0xf8>)
 800145a:	f005 fae9 	bl	8006a30 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001464:	f000 fa14 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001468:	481d      	ldr	r0, [pc, #116]	; (80014e0 <MX_TIM3_Init+0xf8>)
 800146a:	f005 f8be 	bl	80065ea <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001474:	f000 fa0c 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4619      	mov	r1, r3
 8001486:	4816      	ldr	r0, [pc, #88]	; (80014e0 <MX_TIM3_Init+0xf8>)
 8001488:	f005 feb6 	bl	80071f8 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001492:	f000 f9fd 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2208      	movs	r2, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_TIM3_Init+0xf8>)
 80014ae:	f005 f9fd 	bl	80068ac <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80014b8:	f000 f9ea 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	220c      	movs	r2, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM3_Init+0xf8>)
 80014c4:	f005 f9f2 	bl	80068ac <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80014ce:	f000 f9df 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d2:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM3_Init+0xf8>)
 80014d4:	f000 fc96 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	; 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200004c8 	.word	0x200004c8
 80014e4:	40000400 	.word	0x40000400

080014e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_UART5_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_UART5_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_UART5_Init+0x4c>)
 80014f4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80014f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_UART5_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_UART5_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_UART5_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_UART5_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_UART5_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_UART5_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_UART5_Init+0x4c>)
 8001520:	f005 fefa 	bl	8007318 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f9b1 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000510 	.word	0x20000510
 8001538:	40005000 	.word	0x40005000

0800153c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART2_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001548:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800154c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001574:	f005 fed0 	bl	8007318 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157e:	f000 f987 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000554 	.word	0x20000554
 800158c:	40004400 	.word	0x40004400

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <MX_DMA_Init+0xb8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <MX_DMA_Init+0xb8>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_DMA_Init+0xb8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MX_DMA_Init+0xb8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <MX_DMA_Init+0xb8>)
 80015bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_DMA_Init+0xb8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2102      	movs	r1, #2
 80015d2:	200b      	movs	r0, #11
 80015d4:	f001 ffdb 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015d8:	200b      	movs	r0, #11
 80015da:	f001 fff4 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2106      	movs	r1, #6
 80015e2:	200e      	movs	r0, #14
 80015e4:	f001 ffd3 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015e8:	200e      	movs	r0, #14
 80015ea:	f001 ffec 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	2010      	movs	r0, #16
 80015f4:	f001 ffcb 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015f8:	2010      	movs	r0, #16
 80015fa:	f001 ffe4 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 2, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2102      	movs	r1, #2
 8001602:	2011      	movs	r0, #17
 8001604:	f001 ffc3 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001608:	2011      	movs	r0, #17
 800160a:	f001 ffdc 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 2, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	202f      	movs	r0, #47	; 0x2f
 8001614:	f001 ffbb 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001618:	202f      	movs	r0, #47	; 0x2f
 800161a:	f001 ffd4 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2107      	movs	r1, #7
 8001622:	2038      	movs	r0, #56	; 0x38
 8001624:	f001 ffb3 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001628:	2038      	movs	r0, #56	; 0x38
 800162a:	f001 ffcc 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 7, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2107      	movs	r1, #7
 8001632:	2039      	movs	r0, #57	; 0x39
 8001634:	f001 ffab 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001638:	2039      	movs	r0, #57	; 0x39
 800163a:	f001 ffc4 	bl	80035c6 <HAL_NVIC_EnableIRQ>

}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	4b84      	ldr	r3, [pc, #528]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a83      	ldr	r2, [pc, #524]	; (8001878 <MX_GPIO_Init+0x22c>)
 800166c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a7c      	ldr	r2, [pc, #496]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	4b76      	ldr	r3, [pc, #472]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a75      	ldr	r2, [pc, #468]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a67      	ldr	r2, [pc, #412]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b61      	ldr	r3, [pc, #388]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a60      	ldr	r2, [pc, #384]	; (8001878 <MX_GPIO_Init+0x22c>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a59      	ldr	r2, [pc, #356]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b57      	ldr	r3, [pc, #348]	; (8001878 <MX_GPIO_Init+0x22c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b53      	ldr	r3, [pc, #332]	; (8001878 <MX_GPIO_Init+0x22c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a52      	ldr	r2, [pc, #328]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b50      	ldr	r3, [pc, #320]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <MX_GPIO_Init+0x22c>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, MEM_W_Pin|MEM_HOLD_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2160      	movs	r1, #96	; 0x60
 8001762:	4846      	ldr	r0, [pc, #280]	; (800187c <MX_GPIO_Init+0x230>)
 8001764:	f002 fddc 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2120      	movs	r1, #32
 800176c:	4844      	ldr	r0, [pc, #272]	; (8001880 <MX_GPIO_Init+0x234>)
 800176e:	f002 fdd7 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_CS_GPIO_Port, MEM_CS_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	4841      	ldr	r0, [pc, #260]	; (800187c <MX_GPIO_Init+0x230>)
 8001778:	f002 fdd2 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2104      	movs	r1, #4
 8001780:	4840      	ldr	r0, [pc, #256]	; (8001884 <MX_GPIO_Init+0x238>)
 8001782:	f002 fdcd 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PRESS_DRDY_Pin HUM_TEMP_DRDY_Pin */
  GPIO_InitStruct.Pin = PRESS_DRDY_Pin|HUM_TEMP_DRDY_Pin;
 8001786:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	483a      	ldr	r0, [pc, #232]	; (8001884 <MX_GPIO_Init+0x238>)
 800179c:	f002 fb08 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEM_W_Pin MEM_HOLD_Pin */
  GPIO_InitStruct.Pin = MEM_W_Pin|MEM_HOLD_Pin;
 80017a0:	2360      	movs	r3, #96	; 0x60
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2302      	movs	r3, #2
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4831      	ldr	r0, [pc, #196]	; (800187c <MX_GPIO_Init+0x230>)
 80017b8:	f002 fafa 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80017bc:	2320      	movs	r3, #32
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	482b      	ldr	r0, [pc, #172]	; (8001880 <MX_GPIO_Init+0x234>)
 80017d4:	f002 faec 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEM_CS_Pin */
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 80017d8:	2310      	movs	r3, #16
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e4:	2302      	movs	r3, #2
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4823      	ldr	r0, [pc, #140]	; (800187c <MX_GPIO_Init+0x230>)
 80017f0:	f002 fade 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_INT2_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin|ACC_INT1_Pin;
 80017f4:	2318      	movs	r3, #24
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	481e      	ldr	r0, [pc, #120]	; (8001884 <MX_GPIO_Init+0x238>)
 800180a:	f002 fad1 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 800180e:	2304      	movs	r3, #4
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <MX_GPIO_Init+0x238>)
 8001826:	f002 fac3 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMBALERT_Pin */
  GPIO_InitStruct.Pin = SMBALERT_Pin;
 800182a:	2304      	movs	r3, #4
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SMBALERT_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_GPIO_Init+0x23c>)
 800183e:	f002 fab7 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOLINK_OL_Pin IOLINK_EN_DIAG_Pin */
  GPIO_InitStruct.Pin = IOLINK_OL_Pin|IOLINK_EN_DIAG_Pin;
 8001842:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001848:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_GPIO_Init+0x240>)
 800185a:	f002 faa9 	bl	8003db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2106      	movs	r1, #6
 8001862:	2017      	movs	r0, #23
 8001864:	f001 fe93 	bl	800358e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001868:	2017      	movs	r0, #23
 800186a:	f001 feac 	bl	80035c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40022000 	.word	0x40022000
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40021800 	.word	0x40021800
 8001888:	40021400 	.word	0x40021400
 800188c:	40021000 	.word	0x40021000

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_MspInit+0x4c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_ADC_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d127      	bne.n	800195e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_ADC_MspInit+0x80>)
 8001934:	f043 0320 	orr.w	r3, r3, #32
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_ADC_MspInit+0x80>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    */
    GPIO_InitStruct.Pin = AUX_IO_Pin;
 8001946:	2310      	movs	r3, #16
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194a:	2303      	movs	r3, #3
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUX_IO_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_ADC_MspInit+0x84>)
 800195a:	f002 fa29 	bl	8003db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40012200 	.word	0x40012200
 800196c:	40023800 	.word	0x40023800
 8001970:	40021400 	.word	0x40021400

08001974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <HAL_I2C_MspInit+0xe8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12d      	bne.n	80019f2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = ENV_SD_Pin|ENV_CK_Pin;
 80019b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c4:	2304      	movs	r3, #4
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	4825      	ldr	r0, [pc, #148]	; (8001a64 <HAL_I2C_MspInit+0xf0>)
 80019d0:	f002 f9ee 	bl	8003db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 80019de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019f0:	e030      	b.n	8001a54 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_I2C_MspInit+0xf4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d12b      	bne.n	8001a54 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 8001a06:	f043 0320 	orr.w	r3, r3, #32
 8001a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SMBDATA_Pin|SMBCLK_Pin;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <HAL_I2C_MspInit+0xf8>)
 8001a34:	f002 f9bc 	bl	8003db0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 8001a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_I2C_MspInit+0xec>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40005400 	.word	0x40005400
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40005800 	.word	0x40005800
 8001a6c:	40021400 	.word	0x40021400

08001a70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b098      	sub	sp, #96	; 0x60
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	223c      	movs	r2, #60	; 0x3c
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f006 fc7f 	bl	8008394 <memset>
  if(hi2s->Instance==SPI2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a3a      	ldr	r2, [pc, #232]	; (8001b84 <HAL_I2S_MspInit+0x114>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d16c      	bne.n	8001b7a <HAL_I2S_MspInit+0x10a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fc97 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001abc:	f7ff fee8 	bl	8001890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <HAL_I2S_MspInit+0x118>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <HAL_I2S_MspInit+0x118>)
 8001aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_I2S_MspInit+0x118>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_I2S_MspInit+0x118>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a28      	ldr	r2, [pc, #160]	; (8001b88 <HAL_I2S_MspInit+0x118>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_I2S_MspInit+0x118>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PI3     ------> I2S2_SD
    PI1     ------> I2S2_CK
    PI0     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = MIC_SD_Pin|MIC_CK_Pin|GPIO_PIN_0;
 8001af8:	230b      	movs	r3, #11
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b10:	4619      	mov	r1, r3
 8001b12:	481e      	ldr	r0, [pc, #120]	; (8001b8c <HAL_I2S_MspInit+0x11c>)
 8001b14:	f002 f94c 	bl	8003db0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_I2S_MspInit+0x124>)
 8001b1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b36:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b3e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b46:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b56:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b5e:	480c      	ldr	r0, [pc, #48]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b60:	f001 fd4c 	bl	80035fc <HAL_DMA_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2S_MspInit+0xfe>
    {
      Error_Handler();
 8001b6a:	f7ff fe91 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_I2S_MspInit+0x120>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3760      	adds	r7, #96	; 0x60
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40003800 	.word	0x40003800
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	20000330 	.word	0x20000330
 8001b94:	40026058 	.word	0x40026058

08001b98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b092      	sub	sp, #72	; 0x48
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	223c      	movs	r2, #60	; 0x3c
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f006 fbf3 	bl	8008394 <memset>
  if(hrtc->Instance==RTC)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RTC_MspInit+0x4c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fc0c 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001bd2:	f7ff fe5d 	bl	8001890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RTC_MspInit+0x50>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3748      	adds	r7, #72	; 0x48
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40002800 	.word	0x40002800
 8001be8:	42470e3c 	.word	0x42470e3c

08001bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_SPI_MspInit+0x15c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	f040 8098 	bne.w	8001d40 <HAL_SPI_MspInit+0x154>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_SPI_MspInit+0x160>)
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_SPI_MspInit+0x160>)
 8001c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c20:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_SPI_MspInit+0x160>)
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_SPI_MspInit+0x160>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <HAL_SPI_MspInit+0x160>)
 8001c36:	f043 0310 	orr.w	r3, r3, #16
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_SPI_MspInit+0x160>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    PE2     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = MEM_SO_Pin|MEM_SI_Pin;
 8001c48:	2360      	movs	r3, #96	; 0x60
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c58:	2305      	movs	r3, #5
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	483b      	ldr	r0, [pc, #236]	; (8001d50 <HAL_SPI_MspInit+0x164>)
 8001c64:	f002 f8a4 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MEM_CK_Pin;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MEM_CK_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4833      	ldr	r0, [pc, #204]	; (8001d50 <HAL_SPI_MspInit+0x164>)
 8001c84:	f002 f894 	bl	8003db0 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001c8a:	4a33      	ldr	r2, [pc, #204]	; (8001d58 <HAL_SPI_MspInit+0x16c>)
 8001c8c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c94:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca8:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001cc8:	4822      	ldr	r0, [pc, #136]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cca:	f001 fc97 	bl	80035fc <HAL_DMA_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8001cd4:	f7ff fddc 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001cdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cde:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <HAL_SPI_MspInit+0x168>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_SPI_MspInit+0x174>)
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf0:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d04:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d26:	f001 fc69 	bl	80035fc <HAL_DMA_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001d30:	f7ff fdae 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d38:	649a      	str	r2, [r3, #72]	; 0x48
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_SPI_MspInit+0x170>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40013400 	.word	0x40013400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	20000408 	.word	0x20000408
 8001d58:	40026410 	.word	0x40026410
 8001d5c:	20000468 	.word	0x20000468
 8001d60:	40026428 	.word	0x40026428

08001d64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_SPI_MspDeInit+0x44>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d113      	bne.n	8001d9e <HAL_SPI_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_SPI_MspDeInit+0x48>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_SPI_MspDeInit+0x48>)
 8001d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    PE2     ------> SPI4_SCK
    */
    HAL_GPIO_DeInit(GPIOE, MEM_SO_Pin|MEM_SI_Pin|MEM_CK_Pin);
 8001d82:	2164      	movs	r1, #100	; 0x64
 8001d84:	480a      	ldr	r0, [pc, #40]	; (8001db0 <HAL_SPI_MspDeInit+0x4c>)
 8001d86:	f002 f9bf 	bl	8004108 <HAL_GPIO_DeInit>

    /* SPI4 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 fce2 	bl	8003758 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fcdd 	bl	8003758 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40013400 	.word	0x40013400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_TIM_Base_MspInit+0x48>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d115      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_TIM_Base_MspInit+0x4c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_TIM_Base_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	201d      	movs	r0, #29
 8001de8:	f001 fbd1 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dec:	201d      	movs	r0, #29
 8001dee:	f001 fbea 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <HAL_TIM_MspPostInit+0x68>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d11d      	bne.n	8001e62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PB1_Pin|PB0_Pin;
 8001e42:	2303      	movs	r3, #3
 8001e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_TIM_MspPostInit+0x70>)
 8001e5e:	f001 ffa7 	bl	8003db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020400 	.word	0x40020400

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a59      	ldr	r2, [pc, #356]	; (8001ffc <HAL_UART_MspInit+0x184>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 80c0 	bne.w	800201c <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b54      	ldr	r3, [pc, #336]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_UART_MspInit+0x188>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = COM_TX_Pin;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f02:	2308      	movs	r3, #8
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COM_TX_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	483d      	ldr	r0, [pc, #244]	; (8002004 <HAL_UART_MspInit+0x18c>)
 8001f0e:	f001 ff4f 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COM_RX_Pin;
 8001f12:	2304      	movs	r3, #4
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f22:	2308      	movs	r3, #8
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COM_RX_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4836      	ldr	r0, [pc, #216]	; (8002008 <HAL_UART_MspInit+0x190>)
 8001f2e:	f001 ff3f 	bl	8003db0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f34:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_UART_MspInit+0x198>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f3e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f52:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001f72:	4826      	ldr	r0, [pc, #152]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f74:	f001 fb42 	bl	80035fc <HAL_DMA_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001f7e:	f7ff fc87 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_UART_MspInit+0x194>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <HAL_UART_MspInit+0x1a0>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f9a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fae:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001fce:	4811      	ldr	r0, [pc, #68]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fd0:	f001 fb14 	bl	80035fc <HAL_DMA_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001fda:	f7ff fc59 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_UART_MspInit+0x19c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2035      	movs	r0, #53	; 0x35
 8001ff0:	f001 facd 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ff4:	2035      	movs	r0, #53	; 0x35
 8001ff6:	f001 fae6 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ffa:	e0a5      	b.n	8002148 <HAL_UART_MspInit+0x2d0>
 8001ffc:	40005000 	.word	0x40005000
 8002000:	40023800 	.word	0x40023800
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	20000598 	.word	0x20000598
 8002010:	40026010 	.word	0x40026010
 8002014:	200005f8 	.word	0x200005f8
 8002018:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_UART_MspInit+0x2d8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 8090 	bne.w	8002148 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_UART_MspInit+0x2dc>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_UART_MspInit+0x2dc>)
 8002032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_UART_MspInit+0x2dc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <HAL_UART_MspInit+0x2dc>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a41      	ldr	r2, [pc, #260]	; (8002154 <HAL_UART_MspInit+0x2dc>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_UART_MspInit+0x2dc>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IOLINK_COM_TX_Pin|IOLINK_COM_RX_Pin;
 8002060:	230c      	movs	r3, #12
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002070:	2307      	movs	r3, #7
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4837      	ldr	r0, [pc, #220]	; (8002158 <HAL_UART_MspInit+0x2e0>)
 800207c:	f001 fe98 	bl	8003db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_UART_MspInit+0x2e4>)
 8002082:	4a37      	ldr	r2, [pc, #220]	; (8002160 <HAL_UART_MspInit+0x2e8>)
 8002084:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_UART_MspInit+0x2e4>)
 8002088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800208c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_UART_MspInit+0x2e4>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_UART_MspInit+0x2e4>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_UART_MspInit+0x2e4>)
 800209c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020c0:	4826      	ldr	r0, [pc, #152]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020c2:	f001 fa9b 	bl	80035fc <HAL_DMA_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80020cc:	f7ff fbe0 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_UART_MspInit+0x2e4>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 80020de:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_UART_MspInit+0x2f0>)
 80020e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 80020e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 80020ec:	2240      	movs	r2, #64	; 0x40
 80020ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 80020f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800211c:	4811      	ldr	r0, [pc, #68]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 800211e:	f001 fa6d 	bl	80035fc <HAL_DMA_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002128:	f7ff fbb2 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_UART_MspInit+0x2ec>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2102      	movs	r1, #2
 800213c:	2026      	movs	r0, #38	; 0x26
 800213e:	f001 fa26 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002142:	2026      	movs	r0, #38	; 0x26
 8002144:	f001 fa3f 	bl	80035c6 <HAL_NVIC_EnableIRQ>
}
 8002148:	bf00      	nop
 800214a:	3730      	adds	r7, #48	; 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40004400 	.word	0x40004400
 8002154:	40023800 	.word	0x40023800
 8002158:	40020000 	.word	0x40020000
 800215c:	20000658 	.word	0x20000658
 8002160:	40026088 	.word	0x40026088
 8002164:	200006b8 	.word	0x200006b8
 8002168:	400260a0 	.word	0x400260a0

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b8:	f000 fe58 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <DMA1_Stream0_IRQHandler+0x10>)
 80021c6:	f001 fbb7 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000598 	.word	0x20000598

080021d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA1_Stream3_IRQHandler+0x10>)
 80021da:	f001 fbad 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000330 	.word	0x20000330

080021e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Stream5_IRQHandler+0x10>)
 80021ee:	f001 fba3 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000658 	.word	0x20000658

080021fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA1_Stream6_IRQHandler+0x10>)
 8002202:	f001 fb99 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200006b8 	.word	0x200006b8

08002210 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOLINK_EN_DIAG_Pin);
 8002214:	2080      	movs	r0, #128	; 0x80
 8002216:	f002 f89d 	bl	8004354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IOLINK_OL_Pin);
 800221a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800221e:	f002 f899 	bl	8004354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800222c:	4809      	ldr	r0, [pc, #36]	; (8002254 <TIM3_IRQHandler+0x2c>)
 800222e:	f004 fa35 	bl	800669c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  IIS3DWB_ACC_GetAxes(&vibration_sensor, &misure[contatore_campioni++]);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <TIM3_IRQHandler+0x30>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	1c53      	adds	r3, r2, #1
 8002238:	4907      	ldr	r1, [pc, #28]	; (8002258 <TIM3_IRQHandler+0x30>)
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <TIM3_IRQHandler+0x34>)
 8002246:	4413      	add	r3, r2
 8002248:	4619      	mov	r1, r3
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <TIM3_IRQHandler+0x38>)
 800224c:	f000 fa8d 	bl	800276a <IIS3DWB_ACC_GetAxes>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200004c8 	.word	0x200004c8
 8002258:	2001dc30 	.word	0x2001dc30
 800225c:	20000750 	.word	0x20000750
 8002260:	20000718 	.word	0x20000718

08002264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <USART2_IRQHandler+0x10>)
 800226a:	f005 f935 	bl	80074d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000554 	.word	0x20000554

08002278 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA1_Stream7_IRQHandler+0x10>)
 800227e:	f001 fb5b 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200005f8 	.word	0x200005f8

0800228c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <UART5_IRQHandler+0x10>)
 8002292:	f005 f921 	bl	80074d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000510 	.word	0x20000510

080022a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <DMA2_Stream0_IRQHandler+0x10>)
 80022a6:	f001 fb47 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000408 	.word	0x20000408

080022b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA2_Stream1_IRQHandler+0x10>)
 80022ba:	f001 fb3d 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000468 	.word	0x20000468

080022c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return 1;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_kill>:

int _kill(int pid, int sig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e2:	f006 f82d 	bl	8008340 <__errno>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2216      	movs	r2, #22
 80022ea:	601a      	str	r2, [r3, #0]
  return -1;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_exit>:

void _exit (int status)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ffe7 	bl	80022d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800230a:	e7fe      	b.n	800230a <_exit+0x12>

0800230c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e00a      	b.n	8002334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800231e:	f3af 8000 	nop.w
 8002322:	4601      	mov	r1, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf0      	blt.n	800231e <_read+0x12>
  }

  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e009      	b.n	800236c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf1      	blt.n	8002358 <_write+0x12>
  }
  return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_close>:

int _close(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a6:	605a      	str	r2, [r3, #4]
  return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_isatty>:

int _isatty(int file)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f005 ff92 	bl	8008340 <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20050000 	.word	0x20050000
 8002448:	00000400 	.word	0x00000400
 800244c:	2001dc98 	.word	0x2001dc98
 8002450:	2001dd10 	.word	0x2001dd10

08002454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <SystemInit+0x20>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <SystemInit+0x20>)
 8002460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800247c:	480d      	ldr	r0, [pc, #52]	; (80024b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800247e:	490e      	ldr	r1, [pc, #56]	; (80024b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002494:	4c0b      	ldr	r4, [pc, #44]	; (80024c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024a2:	f7ff ffd7 	bl	8002454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a6:	f005 ff51 	bl	800834c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024aa:	f7fe fd17 	bl	8000edc <main>
  bx  lr    
 80024ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024bc:	0800b59c 	.word	0x0800b59c
  ldr r2, =_sbss
 80024c0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024c4:	2001dd0c 	.word	0x2001dd0c

080024c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC_IRQHandler>
	...

080024cc <IIS3DWB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_RegisterBusIO(IIS3DWB_Object_t *pObj, IIS3DWB_IO_t *pIO)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <IIS3DWB_RegisterBusIO+0x18>
  {
    ret = IIS3DWB_ERROR;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e034      	b.n	800254e <IIS3DWB_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	7b1a      	ldrb	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <IIS3DWB_RegisterBusIO+0x8c>)
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <IIS3DWB_RegisterBusIO+0x90>)
 8002526:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <IIS3DWB_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4798      	blx	r3
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	e002      	b.n	800254e <IIS3DWB_RegisterBusIO+0x82>
    }
    else
    {
      ret = IIS3DWB_ERROR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	08002819 	.word	0x08002819
 800255c:	0800284f 	.word	0x0800284f

08002560 <IIS3DWB_Init>:
 * @brief  Initialize the IIS3DWB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_Init(IIS3DWB_Object_t *pObj)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Reset all the configuration registers in order to set correctly */
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3320      	adds	r3, #32
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f000 faad 	bl	8002ace <iis3dwb_reset_set>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <IIS3DWB_Init+0x20>
  {
    return IIS3DWB_ERROR;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e034      	b.n	80025ea <IIS3DWB_Init+0x8a>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis3dwb_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3320      	adds	r3, #32
 8002584:	2101      	movs	r1, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fac7 	bl	8002b1a <iis3dwb_auto_increment_set>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <IIS3DWB_Init+0x38>
  {
    return IIS3DWB_ERROR;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e028      	b.n	80025ea <IIS3DWB_Init+0x8a>
  }

  /* Enable BDU */
  if (iis3dwb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3320      	adds	r3, #32
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fa24 	bl	80029ec <iis3dwb_block_data_update_set>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <IIS3DWB_Init+0x50>
  {
    return IIS3DWB_ERROR;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e01c      	b.n	80025ea <IIS3DWB_Init+0x8a>
  }

  /* FIFO mode selection */
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), IIS3DWB_BYPASS_MODE) != IIS3DWB_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3320      	adds	r3, #32
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fad5 	bl	8002b66 <iis3dwb_fifo_mode_set>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <IIS3DWB_Init+0x68>
  {
    return IIS3DWB_ERROR;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	e010      	b.n	80025ea <IIS3DWB_Init+0x8a>
  }

  /* Full scale selection. */
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), IIS3DWB_2g) != IIS3DWB_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3320      	adds	r3, #32
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f988 	bl	80028e4 <iis3dwb_xl_full_scale_set>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <IIS3DWB_Init+0x80>
  {
    return IIS3DWB_ERROR;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e004      	b.n	80025ea <IIS3DWB_Init+0x8a>
  }

  pObj->is_initialized = 1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS3DWB_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <IIS3DWB_DeInit>:
 * @brief  Deinitialize the IIS3DWB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_DeInit(IIS3DWB_Object_t *pObj)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS3DWB_ACC_Disable(pObj) != IIS3DWB_OK)
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f825 	bl	800264a <IIS3DWB_ACC_Disable>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <IIS3DWB_DeInit+0x1a>
  {
    return IIS3DWB_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e004      	b.n	8002616 <IIS3DWB_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS3DWB_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <IIS3DWB_ACC_Enable>:
 * @brief  Enable the IIS3DWB accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Enable(IIS3DWB_Object_t *pObj)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <IIS3DWB_ACC_Enable+0x16>
  {
    return IIS3DWB_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e004      	b.n	800263e <IIS3DWB_ACC_Enable+0x20>
  }

  pObj->acc_is_enabled = 1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS3DWB_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <IIS3DWB_ACC_Disable>:
 * @brief  Disable the IIS3DWB accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Disable(IIS3DWB_Object_t *pObj)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <IIS3DWB_ACC_Disable+0x16>
  {
    return IIS3DWB_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e010      	b.n	8002682 <IIS3DWB_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3320      	adds	r3, #32
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f99a 	bl	80029a0 <iis3dwb_xl_data_rate_set>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <IIS3DWB_ACC_Disable+0x2e>
  {
    return IIS3DWB_ERROR;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	e004      	b.n	8002682 <IIS3DWB_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS3DWB_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <IIS3DWB_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_GetSensitivity(IIS3DWB_Object_t *pObj, float *Sensitivity)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS3DWB_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  iis3dwb_fs_xl_t full_scale;
  
  /* Read actual full scale selection from sensor. */
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3320      	adds	r3, #32
 800269e:	f107 020b 	add.w	r2, r7, #11
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f943 	bl	8002930 <iis3dwb_xl_full_scale_get>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <IIS3DWB_ACC_GetSensitivity+0x2a>
  {
    return IIS3DWB_ERROR;
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	e026      	b.n	8002704 <IIS3DWB_ACC_GetSensitivity+0x78>
  }
  
  switch (full_scale)
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d81b      	bhi.n	80026f4 <IIS3DWB_ACC_GetSensitivity+0x68>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <IIS3DWB_ACC_GetSensitivity+0x38>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	080026d5 	.word	0x080026d5
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026e5 	.word	0x080026e5
  {
  case IIS3DWB_2g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4a0d      	ldr	r2, [pc, #52]	; (800270c <IIS3DWB_ACC_GetSensitivity+0x80>)
 80026d8:	601a      	str	r2, [r3, #0]
    break;
 80026da:	e012      	b.n	8002702 <IIS3DWB_ACC_GetSensitivity+0x76>
    
  case IIS3DWB_4g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <IIS3DWB_ACC_GetSensitivity+0x84>)
 80026e0:	601a      	str	r2, [r3, #0]
    break;
 80026e2:	e00e      	b.n	8002702 <IIS3DWB_ACC_GetSensitivity+0x76>
    
  case IIS3DWB_8g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <IIS3DWB_ACC_GetSensitivity+0x88>)
 80026e8:	601a      	str	r2, [r3, #0]
    break;
 80026ea:	e00a      	b.n	8002702 <IIS3DWB_ACC_GetSensitivity+0x76>
    
  case IIS3DWB_16g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <IIS3DWB_ACC_GetSensitivity+0x8c>)
 80026f0:	601a      	str	r2, [r3, #0]
    break;
 80026f2:	e006      	b.n	8002702 <IIS3DWB_ACC_GetSensitivity+0x76>
    
  default:
    *Sensitivity = -1.0f;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <IIS3DWB_ACC_GetSensitivity+0x90>)
 80026f8:	601a      	str	r2, [r3, #0]
    ret = IIS3DWB_ERROR;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	60fb      	str	r3, [r7, #12]
    break;
 8002700:	bf00      	nop
  }
  
  return ret;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	3d79db23 	.word	0x3d79db23
 8002710:	3df9db23 	.word	0x3df9db23
 8002714:	3e79db23 	.word	0x3e79db23
 8002718:	3ef9db23 	.word	0x3ef9db23
 800271c:	bf800000 	.word	0xbf800000

08002720 <IIS3DWB_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_SetOutputDataRate(IIS3DWB_Object_t *pObj, float Odr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	ed87 0a00 	vstr	s0, [r7]
  iis3dwb_odr_xl_t new_odr;

  new_odr = (Odr <=    1.0f) ? IIS3DWB_XL_ODR_OFF             
          :                    IIS3DWB_XL_ODR_26k7Hz;
 800272c:	edd7 7a00 	vldr	s15, [r7]
 8002730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d801      	bhi.n	8002742 <IIS3DWB_ACC_SetOutputDataRate+0x22>
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <IIS3DWB_ACC_SetOutputDataRate+0x24>
 8002742:	2305      	movs	r3, #5
  new_odr = (Odr <=    1.0f) ? IIS3DWB_XL_ODR_OFF             
 8002744:	73fb      	strb	r3, [r7, #15]
                               
  /* Output data rate selection. */
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3320      	adds	r3, #32
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f926 	bl	80029a0 <iis3dwb_xl_data_rate_set>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <IIS3DWB_ACC_SetOutputDataRate+0x40>
  {
    return IIS3DWB_ERROR;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e000      	b.n	8002762 <IIS3DWB_ACC_SetOutputDataRate+0x42>
  }
  
  return IIS3DWB_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <IIS3DWB_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_GetAxes(IIS3DWB_Object_t *pObj, IIS3DWB_Axes_t *Acceleration)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  iis3dwb_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3320      	adds	r3, #32
 800277e:	f107 0210 	add.w	r2, r7, #16
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f957 	bl	8002a38 <iis3dwb_acceleration_raw_get>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <IIS3DWB_ACC_GetAxes+0x2c>
  {
    return IIS3DWB_ERROR;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	e03c      	b.n	8002810 <IIS3DWB_ACC_GetAxes+0xa6>
  }

  /* Get IIS3DWB actual sensitivity. */
  if (IIS3DWB_ACC_GetSensitivity(pObj, &sensitivity) != IIS3DWB_OK)
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff75 	bl	800268c <IIS3DWB_ACC_GetSensitivity>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <IIS3DWB_ACC_GetAxes+0x44>
  {
    return IIS3DWB_ERROR;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	e030      	b.n	8002810 <IIS3DWB_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80027ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c6:	ee17 2a90 	vmov	r2, s15
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80027ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027da:	edd7 7a03 	vldr	s15, [r7, #12]
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e6:	ee17 2a90 	vmov	r2, s15
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80027ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002806:	ee17 2a90 	vmov	r2, s15
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	609a      	str	r2, [r3, #8]

  return IIS3DWB_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	460b      	mov	r3, r1
 8002826:	72fb      	strb	r3, [r7, #11]
 8002828:	4613      	mov	r3, r2
 800282a:	813b      	strh	r3, [r7, #8]
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	695c      	ldr	r4, [r3, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	7b1b      	ldrb	r3, [r3, #12]
 8002838:	b298      	uxth	r0, r3
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	b299      	uxth	r1, r3
 800283e:	893b      	ldrh	r3, [r7, #8]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	47a0      	blx	r4
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}

0800284e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800284e:	b590      	push	{r4, r7, lr}
 8002850:	b087      	sub	sp, #28
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	461a      	mov	r2, r3
 800285a:	460b      	mov	r3, r1
 800285c:	72fb      	strb	r3, [r7, #11]
 800285e:	4613      	mov	r3, r2
 8002860:	813b      	strh	r3, [r7, #8]
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	691c      	ldr	r4, [r3, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	7b1b      	ldrb	r3, [r3, #12]
 800286e:	b298      	uxth	r0, r3
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	b299      	uxth	r1, r3
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	47a0      	blx	r4
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}

08002884 <iis3dwb_read_reg>:
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	460b      	mov	r3, r1
 8002892:	72fb      	strb	r3, [r7, #11]
 8002894:	4613      	mov	r3, r2
 8002896:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685c      	ldr	r4, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68d8      	ldr	r0, [r3, #12]
 80028a0:	893b      	ldrh	r3, [r7, #8]
 80028a2:	7af9      	ldrb	r1, [r7, #11]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	47a0      	blx	r4
 80028a8:	6178      	str	r0, [r7, #20]

  return ret;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}

080028b4 <iis3dwb_write_reg>:
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	460b      	mov	r3, r1
 80028c2:	72fb      	strb	r3, [r7, #11]
 80028c4:	4613      	mov	r3, r2
 80028c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68d8      	ldr	r0, [r3, #12]
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	7af9      	ldrb	r1, [r7, #11]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	47a0      	blx	r4
 80028d8:	6178      	str	r0, [r7, #20]

  return ret;
 80028da:	697b      	ldr	r3, [r7, #20]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80028f0:	f107 0208 	add.w	r2, r7, #8
 80028f4:	2301      	movs	r3, #1
 80028f6:	2110      	movs	r1, #16
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ffc3 	bl	8002884 <iis3dwb_read_reg>
 80028fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <iis3dwb_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	b2da      	uxtb	r2, r3
 800290e:	7a3b      	ldrb	r3, [r7, #8]
 8002910:	f362 0383 	bfi	r3, r2, #2, #2
 8002914:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8002916:	f107 0208 	add.w	r2, r7, #8
 800291a:	2301      	movs	r3, #1
 800291c:	2110      	movs	r1, #16
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffc8 	bl	80028b4 <iis3dwb_write_reg>
 8002924:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <iis3dwb_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t *val)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800293a:	f107 0208 	add.w	r2, r7, #8
 800293e:	2301      	movs	r3, #1
 8002940:	2110      	movs	r1, #16
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff9e 	bl	8002884 <iis3dwb_read_reg>
 8002948:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 800294a:	7a3b      	ldrb	r3, [r7, #8]
 800294c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d81a      	bhi.n	800298c <iis3dwb_xl_full_scale_get+0x5c>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <iis3dwb_xl_full_scale_get+0x2c>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800296d 	.word	0x0800296d
 8002960:	08002975 	.word	0x08002975
 8002964:	0800297d 	.word	0x0800297d
 8002968:	08002985 	.word	0x08002985
  {
    case IIS3DWB_2g:
      *val = IIS3DWB_2g;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
      break;
 8002972:	e00f      	b.n	8002994 <iis3dwb_xl_full_scale_get+0x64>

    case IIS3DWB_16g:
      *val = IIS3DWB_16g;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
      break;
 800297a:	e00b      	b.n	8002994 <iis3dwb_xl_full_scale_get+0x64>

    case IIS3DWB_4g:
      *val = IIS3DWB_4g;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2202      	movs	r2, #2
 8002980:	701a      	strb	r2, [r3, #0]
      break;
 8002982:	e007      	b.n	8002994 <iis3dwb_xl_full_scale_get+0x64>

    case IIS3DWB_8g:
      *val = IIS3DWB_8g;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2203      	movs	r2, #3
 8002988:	701a      	strb	r2, [r3, #0]
      break;
 800298a:	e003      	b.n	8002994 <iis3dwb_xl_full_scale_get+0x64>

    default:
      *val = IIS3DWB_2g;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
      break;
 8002992:	bf00      	nop
  }

  return ret;
 8002994:	68fb      	ldr	r3, [r7, #12]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop

080029a0 <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80029ac:	f107 0208 	add.w	r2, r7, #8
 80029b0:	2301      	movs	r3, #1
 80029b2:	2110      	movs	r1, #16
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff65 	bl	8002884 <iis3dwb_read_reg>
 80029ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <iis3dwb_xl_data_rate_set+0x42>
  {
    ctrl1_xl.xl_en = (uint8_t)val;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	7a3b      	ldrb	r3, [r7, #8]
 80029cc:	f362 1347 	bfi	r3, r2, #5, #3
 80029d0:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 80029d2:	f107 0208 	add.w	r2, r7, #8
 80029d6:	2301      	movs	r3, #1
 80029d8:	2110      	movs	r1, #16
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff6a 	bl	80028b4 <iis3dwb_write_reg>
 80029e0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80029f8:	f107 0208 	add.w	r2, r7, #8
 80029fc:	2301      	movs	r3, #1
 80029fe:	2112      	movs	r1, #18
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff3f 	bl	8002884 <iis3dwb_read_reg>
 8002a06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <iis3dwb_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	7a3b      	ldrb	r3, [r7, #8]
 8002a18:	f362 1386 	bfi	r3, r2, #6, #1
 8002a1c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002a1e:	f107 0208 	add.w	r2, r7, #8
 8002a22:	2301      	movs	r3, #1
 8002a24:	2112      	movs	r1, #18
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff44 	bl	80028b4 <iis3dwb_write_reg>
 8002a2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <iis3dwb_acceleration_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
 8002a42:	f107 020c 	add.w	r2, r7, #12
 8002a46:	2306      	movs	r3, #6
 8002a48:	2128      	movs	r1, #40	; 0x28
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff1a 	bl	8002884 <iis3dwb_read_reg>
 8002a50:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002a52:	7b7b      	ldrb	r3, [r7, #13]
 8002a54:	b21a      	sxth	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	7b3b      	ldrb	r3, [r7, #12]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	b212      	sxth	r2, r2
 8002a7c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3302      	adds	r3, #2
 8002a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3302      	adds	r3, #2
 8002a98:	b212      	sxth	r2, r2
 8002a9a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002a9c:	7c7a      	ldrb	r2, [r7, #17]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	b212      	sxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	7c3b      	ldrb	r3, [r7, #16]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	b212      	sxth	r2, r2
 8002ac2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ac4:	697b      	ldr	r3, [r7, #20]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002ada:	f107 0208 	add.w	r2, r7, #8
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2112      	movs	r1, #18
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fece 	bl	8002884 <iis3dwb_read_reg>
 8002ae8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10f      	bne.n	8002b10 <iis3dwb_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	7a3b      	ldrb	r3, [r7, #8]
 8002afa:	f362 0300 	bfi	r3, r2, #0, #1
 8002afe:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b00:	f107 0208 	add.w	r2, r7, #8
 8002b04:	2301      	movs	r3, #1
 8002b06:	2112      	movs	r1, #18
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fed3 	bl	80028b4 <iis3dwb_write_reg>
 8002b0e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <iis3dwb_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b26:	f107 0208 	add.w	r2, r7, #8
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2112      	movs	r1, #18
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fea8 	bl	8002884 <iis3dwb_read_reg>
 8002b34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <iis3dwb_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	7a3b      	ldrb	r3, [r7, #8]
 8002b46:	f362 0382 	bfi	r3, r2, #2, #1
 8002b4a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b4c:	f107 0208 	add.w	r2, r7, #8
 8002b50:	2301      	movs	r3, #1
 8002b52:	2112      	movs	r1, #18
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fead 	bl	80028b4 <iis3dwb_write_reg>
 8002b5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8002b72:	f107 0208 	add.w	r2, r7, #8
 8002b76:	2301      	movs	r3, #1
 8002b78:	210a      	movs	r1, #10
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fe82 	bl	8002884 <iis3dwb_read_reg>
 8002b80:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <iis3dwb_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	7a3b      	ldrb	r3, [r7, #8]
 8002b92:	f362 0302 	bfi	r3, r2, #0, #3
 8002b96:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8002b98:	f107 0208 	add.w	r2, r7, #8
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	210a      	movs	r1, #10
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fe87 	bl	80028b4 <iis3dwb_write_reg>
 8002ba6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <BSP_SPI1_Init+0x54>)
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <BSP_SPI1_Init+0x58>)
 8002bc2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <BSP_SPI1_Init+0x5c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	4911      	ldr	r1, [pc, #68]	; (8002c10 <BSP_SPI1_Init+0x5c>)
 8002bcc:	600a      	str	r2, [r1, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d114      	bne.n	8002bfc <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <BSP_SPI1_Init+0x54>)
 8002bd4:	f003 fc0c 	bl	80063f0 <HAL_SPI_GetState>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10e      	bne.n	8002bfc <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002bde:	480a      	ldr	r0, [pc, #40]	; (8002c08 <BSP_SPI1_Init+0x54>)
 8002be0:	f000 f87c 	bl	8002cdc <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002bea:	4807      	ldr	r0, [pc, #28]	; (8002c08 <BSP_SPI1_Init+0x54>)
 8002bec:	f000 f83a 	bl	8002c64 <MX_SPI1_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002bf6:	f06f 0307 	mvn.w	r3, #7
 8002bfa:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002bfc:	687b      	ldr	r3, [r7, #4]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2001dc9c 	.word	0x2001dc9c
 8002c0c:	40013000 	.word	0x40013000
 8002c10:	2001dcf4 	.word	0x2001dcf4

08002c14 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8002c1a:	f06f 0307 	mvn.w	r3, #7
 8002c1e:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <BSP_SPI1_DeInit+0x48>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <BSP_SPI1_DeInit+0x48>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <BSP_SPI1_DeInit+0x48>)
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <BSP_SPI1_DeInit+0x48>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8002c3a:	4809      	ldr	r0, [pc, #36]	; (8002c60 <BSP_SPI1_DeInit+0x4c>)
 8002c3c:	f000 f8a6 	bl	8002d8c <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8002c40:	4807      	ldr	r0, [pc, #28]	; (8002c60 <BSP_SPI1_DeInit+0x4c>)
 8002c42:	f003 fbad 	bl	80063a0 <HAL_SPI_DeInit>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2001dcf4 	.word	0x2001dcf4
 8002c60:	2001dc9c 	.word	0x2001dc9c

08002c64 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c74:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c7c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9c:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2218      	movs	r2, #24
 8002ca2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	220a      	movs	r2, #10
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f003 fae6 	bl	800628e <HAL_SPI_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40013000 	.word	0x40013000

08002cdc <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <SPI1_MspInit+0xa8>)
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <SPI1_MspInit+0xa8>)
 8002cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <SPI1_MspInit+0xa8>)
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <SPI1_MspInit+0xa8>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <SPI1_MspInit+0xa8>)
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <SPI1_MspInit+0xa8>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d24:	2301      	movs	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002d2c:	2305      	movs	r3, #5
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4814      	ldr	r0, [pc, #80]	; (8002d88 <SPI1_MspInit+0xac>)
 8002d38:	f001 f83a 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4619      	mov	r1, r3
 8002d56:	480c      	ldr	r0, [pc, #48]	; (8002d88 <SPI1_MspInit+0xac>)
 8002d58:	f001 f82a 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d64:	2301      	movs	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002d6c:	2305      	movs	r3, #5
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4804      	ldr	r0, [pc, #16]	; (8002d88 <SPI1_MspInit+0xac>)
 8002d78:	f001 f81a 	bl	8003db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020400 	.word	0x40020400

08002d8c <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <SPI1_MspDeInit+0x34>)
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <SPI1_MspDeInit+0x34>)
 8002d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d9e:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8002da0:	2108      	movs	r1, #8
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <SPI1_MspDeInit+0x38>)
 8002da4:	f001 f9b0 	bl	8004108 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8002da8:	2120      	movs	r1, #32
 8002daa:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <SPI1_MspDeInit+0x38>)
 8002dac:	f001 f9ac 	bl	8004108 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8002db0:	2110      	movs	r1, #16
 8002db2:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <SPI1_MspDeInit+0x38>)
 8002db4:	f001 f9a8 	bl	8004108 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020400 	.word	0x40020400

08002dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_Init+0x40>)
 8002dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_Init+0x40>)
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_Init+0x40>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f000 fbc1 	bl	8003578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 f808 	bl	8002e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dfc:	f7fe fd4e 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_InitTick+0x54>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_InitTick+0x58>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fbd9 	bl	80035e2 <HAL_SYSTICK_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00e      	b.n	8002e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d80a      	bhi.n	8002e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e40:	2200      	movs	r2, #0
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f000 fba1 	bl	800358e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4c:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <HAL_InitTick+0x5c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000008 	.word	0x20000008
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000008 	.word	0x20000008
 8002e90:	2001dcf8 	.word	0x2001dcf8

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	2001dcf8 	.word	0x2001dcf8

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e033      	b.n	8002f72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fcea 	bl	80018ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f94a 	bl	80031e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
 8002f62:	e001      	b.n	8002f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e113      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x244>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d925      	bls.n	8002ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b1e      	subs	r3, #30
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	400a      	ands	r2, r1
 8002fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68d9      	ldr	r1, [r3, #12]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4403      	add	r3, r0
 8002fe6:	3b1e      	subs	r3, #30
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	e022      	b.n	800303a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	2207      	movs	r2, #7
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	400a      	ands	r2, r1
 8003016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6919      	ldr	r1, [r3, #16]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	4603      	mov	r3, r0
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4403      	add	r3, r0
 8003030:	409a      	lsls	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b06      	cmp	r3, #6
 8003040:	d824      	bhi.n	800308c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3b05      	subs	r3, #5
 8003054:	221f      	movs	r2, #31
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	400a      	ands	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	4618      	mov	r0, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b05      	subs	r3, #5
 800307e:	fa00 f203 	lsl.w	r2, r0, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	635a      	str	r2, [r3, #52]	; 0x34
 800308a:	e04c      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d824      	bhi.n	80030de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b23      	subs	r3, #35	; 0x23
 80030a6:	221f      	movs	r2, #31
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b23      	subs	r3, #35	; 0x23
 80030d0:	fa00 f203 	lsl.w	r2, r0, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
 80030dc:	e023      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b41      	subs	r3, #65	; 0x41
 80030f0:	221f      	movs	r2, #31
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	400a      	ands	r2, r1
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b41      	subs	r3, #65	; 0x41
 800311a:	fa00 f203 	lsl.w	r2, r0, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_ADC_ConfigChannel+0x250>)
 8003128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <HAL_ADC_ConfigChannel+0x254>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10f      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1d8>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d10b      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_ADC_ConfigChannel+0x254>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d12b      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x23a>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_ADC_ConfigChannel+0x258>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x1f4>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b11      	cmp	r3, #17
 800316e:	d122      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_ADC_ConfigChannel+0x258>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_ADC_ConfigChannel+0x260>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	0c9a      	lsrs	r2, r3, #18
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f9      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40012300 	.word	0x40012300
 80031d0:	40012000 	.word	0x40012000
 80031d4:	10000012 	.word	0x10000012
 80031d8:	20000000 	.word	0x20000000
 80031dc:	431bde83 	.word	0x431bde83

080031e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e8:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <ADC_Init+0x1f0>)
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <ADC_Init+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	e00f      	b.n	80032de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0202 	bic.w	r2, r2, #2
 80032ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7e1b      	ldrb	r3, [r3, #24]
 80032f8:	005a      	lsls	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800332a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	035a      	lsls	r2, r3, #13
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e007      	b.n	8003354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	3b01      	subs	r3, #1
 8003370:	051a      	lsls	r2, r3, #20
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003396:	025a      	lsls	r2, r3, #9
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	029a      	lsls	r2, r3, #10
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40012300 	.word	0x40012300
 80033d4:	0f000001 	.word	0x0f000001

080033d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__NVIC_GetPriorityGrouping+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0307 	and.w	r3, r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0b      	blt.n	8003466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <__NVIC_EnableIRQ+0x38>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000e100 	.word	0xe000e100

08003478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db0a      	blt.n	80034a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	490c      	ldr	r1, [pc, #48]	; (80034c4 <__NVIC_SetPriority+0x4c>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	440b      	add	r3, r1
 800349c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a0:	e00a      	b.n	80034b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <__NVIC_SetPriority+0x50>)
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	3b04      	subs	r3, #4
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	440b      	add	r3, r1
 80034b6:	761a      	strb	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	bf28      	it	cs
 80034ea:	2304      	movcs	r3, #4
 80034ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d902      	bls.n	80034fc <NVIC_EncodePriority+0x30>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3b03      	subs	r3, #3
 80034fa:	e000      	b.n	80034fe <NVIC_EncodePriority+0x32>
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003514:	f04f 31ff 	mov.w	r1, #4294967295
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	43d9      	mvns	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	4313      	orrs	r3, r2
         );
}
 8003526:	4618      	mov	r0, r3
 8003528:	3724      	adds	r7, #36	; 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003544:	d301      	bcc.n	800354a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003546:	2301      	movs	r3, #1
 8003548:	e00f      	b.n	800356a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <SysTick_Config+0x40>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003552:	210f      	movs	r1, #15
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	f7ff ff8e 	bl	8003478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <SysTick_Config+0x40>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SysTick_Config+0x40>)
 8003564:	2207      	movs	r2, #7
 8003566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000e010 	.word	0xe000e010

08003578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff29 	bl	80033d8 <__NVIC_SetPriorityGrouping>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a0:	f7ff ff3e 	bl	8003420 <__NVIC_GetPriorityGrouping>
 80035a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff ff8e 	bl	80034cc <NVIC_EncodePriority>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff5d 	bl	8003478 <__NVIC_SetPriority>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff31 	bl	800343c <__NVIC_EnableIRQ>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ffa2 	bl	8003534 <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7ff fc44 	bl	8002e94 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e099      	b.n	800374c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003638:	e00f      	b.n	800365a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363a:	f7ff fc2b 	bl	8002e94 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b05      	cmp	r3, #5
 8003646:	d908      	bls.n	800365a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e078      	b.n	800374c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e8      	bne.n	800363a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_DMA_Init+0x158>)
 8003674:	4013      	ands	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4313      	orrs	r3, r2
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d117      	bne.n	800371e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fad9 	bl	8003cb8 <DMA_CheckFifoParam>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800371a:	2301      	movs	r3, #1
 800371c:	e016      	b.n	800374c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa90 	bl	8003c4c <DMA_CalcBaseAndBitshift>
 800372c:	4603      	mov	r3, r0
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	223f      	movs	r2, #63	; 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	f010803f 	.word	0xf010803f

08003758 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e050      	b.n	800380c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d101      	bne.n	800377a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	e048      	b.n	800380c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2221      	movs	r2, #33	; 0x21
 80037b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa46 	bl	8003c4c <DMA_CalcBaseAndBitshift>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	223f      	movs	r2, #63	; 0x3f
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003822:	f7ff fb37 	bl	8002e94 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d008      	beq.n	8003846 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e052      	b.n	80038ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0216 	bic.w	r2, r2, #22
 8003854:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003864:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_DMA_Abort+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0208 	bic.w	r2, r2, #8
 8003884:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003896:	e013      	b.n	80038c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003898:	f7ff fafc 	bl	8002e94 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	d90c      	bls.n	80038c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2203      	movs	r2, #3
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e015      	b.n	80038ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e4      	bne.n	8003898 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	223f      	movs	r2, #63	; 0x3f
 80038d4:	409a      	lsls	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e00c      	b.n	800392c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2205      	movs	r2, #5
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003944:	4b8e      	ldr	r3, [pc, #568]	; (8003b80 <HAL_DMA_IRQHandler+0x248>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a8e      	ldr	r2, [pc, #568]	; (8003b84 <HAL_DMA_IRQHandler+0x24c>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	2208      	movs	r2, #8
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01a      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	2208      	movs	r2, #8
 8003992:	409a      	lsls	r2, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	2201      	movs	r2, #1
 80039aa:	409a      	lsls	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d012      	beq.n	80039da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	2201      	movs	r2, #1
 80039c8:	409a      	lsls	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2204      	movs	r2, #4
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d012      	beq.n	8003a10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00b      	beq.n	8003a10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	2204      	movs	r2, #4
 80039fe:	409a      	lsls	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	2210      	movs	r2, #16
 8003a16:	409a      	lsls	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d043      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d03c      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	2210      	movs	r2, #16
 8003a34:	409a      	lsls	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d024      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
 8003a66:	e01f      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
 8003a78:	e016      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0208 	bic.w	r2, r2, #8
 8003a96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	2220      	movs	r2, #32
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 808f 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8087 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	2220      	movs	r2, #32
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d136      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0216 	bic.w	r2, r2, #22
 8003af0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x1da>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	223f      	movs	r2, #63	; 0x3f
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d07e      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
        }
        return;
 8003b4e:	e079      	b.n	8003c44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d031      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
 8003b7c:	e02c      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000
 8003b84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d023      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
 8003b98:	e01e      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0210 	bic.w	r2, r2, #16
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d032      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d022      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2205      	movs	r2, #5
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d307      	bcc.n	8003c20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f2      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x2cc>
 8003c1e:	e000      	b.n	8003c22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
 8003c42:	e000      	b.n	8003c46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c44:	bf00      	nop
    }
  }
}
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	3b10      	subs	r3, #16
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d909      	bls.n	8003c8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8c:	e007      	b.n	8003c9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	aaaaaaab 	.word	0xaaaaaaab
 8003cb4:	0800b1a8 	.word	0x0800b1a8

08003cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11f      	bne.n	8003d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d856      	bhi.n	8003d86 <DMA_CheckFifoParam+0xce>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <DMA_CheckFifoParam+0x28>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003cf1 	.word	0x08003cf1
 8003cec:	08003d87 	.word	0x08003d87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d046      	beq.n	8003d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d00:	e043      	b.n	8003d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d0a:	d140      	bne.n	8003d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e03d      	b.n	8003d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d121      	bne.n	8003d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d837      	bhi.n	8003d92 <DMA_CheckFifoParam+0xda>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x70>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d3f 	.word	0x08003d3f
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003d51 	.word	0x08003d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e030      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d025      	beq.n	8003d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4e:	e022      	b.n	8003d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5e:	e01c      	b.n	8003d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d903      	bls.n	8003d6e <DMA_CheckFifoParam+0xb6>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d6c:	e018      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      break;
 8003d72:	e015      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e00b      	b.n	8003d9e <DMA_CheckFifoParam+0xe6>
      break;
 8003d86:	bf00      	nop
 8003d88:	e00a      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e008      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e177      	b.n	80040bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	f040 8166 	bne.w	80040b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d005      	beq.n	8003e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d130      	bne.n	8003e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0201 	and.w	r2, r3, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d017      	beq.n	8003ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d123      	bne.n	8003ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	08da      	lsrs	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80c0 	beq.w	80040b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b66      	ldr	r3, [pc, #408]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4a65      	ldr	r2, [pc, #404]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f52:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <HAL_GPIO_Init+0x328>)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	3302      	adds	r3, #2
 8003f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	220f      	movs	r2, #15
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a58      	ldr	r2, [pc, #352]	; (80040dc <HAL_GPIO_Init+0x32c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d037      	beq.n	8003fee <HAL_GPIO_Init+0x23e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <HAL_GPIO_Init+0x330>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d031      	beq.n	8003fea <HAL_GPIO_Init+0x23a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a56      	ldr	r2, [pc, #344]	; (80040e4 <HAL_GPIO_Init+0x334>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_GPIO_Init+0x236>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a55      	ldr	r2, [pc, #340]	; (80040e8 <HAL_GPIO_Init+0x338>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d025      	beq.n	8003fe2 <HAL_GPIO_Init+0x232>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_GPIO_Init+0x33c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01f      	beq.n	8003fde <HAL_GPIO_Init+0x22e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a53      	ldr	r2, [pc, #332]	; (80040f0 <HAL_GPIO_Init+0x340>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d019      	beq.n	8003fda <HAL_GPIO_Init+0x22a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a52      	ldr	r2, [pc, #328]	; (80040f4 <HAL_GPIO_Init+0x344>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_GPIO_Init+0x226>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a51      	ldr	r2, [pc, #324]	; (80040f8 <HAL_GPIO_Init+0x348>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_GPIO_Init+0x222>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a50      	ldr	r2, [pc, #320]	; (80040fc <HAL_GPIO_Init+0x34c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <HAL_GPIO_Init+0x21e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	; (8004100 <HAL_GPIO_Init+0x350>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_GPIO_Init+0x21a>
 8003fc6:	2309      	movs	r3, #9
 8003fc8:	e012      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fca:	230a      	movs	r3, #10
 8003fcc:	e010      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	e00e      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	e00c      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	e00a      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fda:	2305      	movs	r3, #5
 8003fdc:	e008      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e004      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_GPIO_Init+0x240>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f002 0203 	and.w	r2, r2, #3
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004000:	4935      	ldr	r1, [pc, #212]	; (80040d8 <HAL_GPIO_Init+0x328>)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_GPIO_Init+0x354>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004032:	4a34      	ldr	r2, [pc, #208]	; (8004104 <HAL_GPIO_Init+0x354>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <HAL_GPIO_Init+0x354>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800405c:	4a29      	ldr	r2, [pc, #164]	; (8004104 <HAL_GPIO_Init+0x354>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004062:	4b28      	ldr	r3, [pc, #160]	; (8004104 <HAL_GPIO_Init+0x354>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004086:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_GPIO_Init+0x354>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_GPIO_Init+0x354>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <HAL_GPIO_Init+0x354>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	f67f ae84 	bls.w	8003dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40020c00 	.word	0x40020c00
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40021400 	.word	0x40021400
 80040f4:	40021800 	.word	0x40021800
 80040f8:	40021c00 	.word	0x40021c00
 80040fc:	40022000 	.word	0x40022000
 8004100:	40022400 	.word	0x40022400
 8004104:	40013c00 	.word	0x40013c00

08004108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e0d9      	b.n	80042d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004124:	2201      	movs	r2, #1
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	429a      	cmp	r2, r3
 800413c:	f040 80c9 	bne.w	80042d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004140:	4a6b      	ldr	r2, [pc, #428]	; (80042f0 <HAL_GPIO_DeInit+0x1e8>)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	3302      	adds	r3, #2
 8004148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	220f      	movs	r2, #15
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a63      	ldr	r2, [pc, #396]	; (80042f4 <HAL_GPIO_DeInit+0x1ec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d037      	beq.n	80041da <HAL_GPIO_DeInit+0xd2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a62      	ldr	r2, [pc, #392]	; (80042f8 <HAL_GPIO_DeInit+0x1f0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_GPIO_DeInit+0xce>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a61      	ldr	r2, [pc, #388]	; (80042fc <HAL_GPIO_DeInit+0x1f4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d02b      	beq.n	80041d2 <HAL_GPIO_DeInit+0xca>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a60      	ldr	r2, [pc, #384]	; (8004300 <HAL_GPIO_DeInit+0x1f8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d025      	beq.n	80041ce <HAL_GPIO_DeInit+0xc6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a5f      	ldr	r2, [pc, #380]	; (8004304 <HAL_GPIO_DeInit+0x1fc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01f      	beq.n	80041ca <HAL_GPIO_DeInit+0xc2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a5e      	ldr	r2, [pc, #376]	; (8004308 <HAL_GPIO_DeInit+0x200>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d019      	beq.n	80041c6 <HAL_GPIO_DeInit+0xbe>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a5d      	ldr	r2, [pc, #372]	; (800430c <HAL_GPIO_DeInit+0x204>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_GPIO_DeInit+0xba>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a5c      	ldr	r2, [pc, #368]	; (8004310 <HAL_GPIO_DeInit+0x208>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00d      	beq.n	80041be <HAL_GPIO_DeInit+0xb6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <HAL_GPIO_DeInit+0x20c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <HAL_GPIO_DeInit+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a5a      	ldr	r2, [pc, #360]	; (8004318 <HAL_GPIO_DeInit+0x210>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_GPIO_DeInit+0xae>
 80041b2:	2309      	movs	r3, #9
 80041b4:	e012      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041b6:	230a      	movs	r3, #10
 80041b8:	e010      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041ba:	2308      	movs	r3, #8
 80041bc:	e00e      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041be:	2307      	movs	r3, #7
 80041c0:	e00c      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041c2:	2306      	movs	r3, #6
 80041c4:	e00a      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041c6:	2305      	movs	r3, #5
 80041c8:	e008      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041ca:	2304      	movs	r3, #4
 80041cc:	e006      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041ce:	2303      	movs	r3, #3
 80041d0:	e004      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e002      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_GPIO_DeInit+0xd4>
 80041da:	2300      	movs	r3, #0
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	f002 0203 	and.w	r2, r2, #3
 80041e2:	0092      	lsls	r2, r2, #2
 80041e4:	4093      	lsls	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d132      	bne.n	8004252 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041ec:	4b4b      	ldr	r3, [pc, #300]	; (800431c <HAL_GPIO_DeInit+0x214>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	4949      	ldr	r1, [pc, #292]	; (800431c <HAL_GPIO_DeInit+0x214>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041fa:	4b48      	ldr	r3, [pc, #288]	; (800431c <HAL_GPIO_DeInit+0x214>)
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	43db      	mvns	r3, r3
 8004202:	4946      	ldr	r1, [pc, #280]	; (800431c <HAL_GPIO_DeInit+0x214>)
 8004204:	4013      	ands	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004208:	4b44      	ldr	r3, [pc, #272]	; (800431c <HAL_GPIO_DeInit+0x214>)
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	43db      	mvns	r3, r3
 8004210:	4942      	ldr	r1, [pc, #264]	; (800431c <HAL_GPIO_DeInit+0x214>)
 8004212:	4013      	ands	r3, r2
 8004214:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_GPIO_DeInit+0x214>)
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43db      	mvns	r3, r3
 800421e:	493f      	ldr	r1, [pc, #252]	; (800431c <HAL_GPIO_DeInit+0x214>)
 8004220:	4013      	ands	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004234:	4a2e      	ldr	r2, [pc, #184]	; (80042f0 <HAL_GPIO_DeInit+0x1e8>)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	43da      	mvns	r2, r3
 8004244:	482a      	ldr	r0, [pc, #168]	; (80042f0 <HAL_GPIO_DeInit+0x1e8>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	400a      	ands	r2, r1
 800424c:	3302      	adds	r3, #2
 800424e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2103      	movs	r1, #3
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	08da      	lsrs	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3208      	adds	r2, #8
 8004270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	08d2      	lsrs	r2, r2, #3
 8004288:	4019      	ands	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3208      	adds	r2, #8
 800428e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2103      	movs	r1, #3
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	401a      	ands	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	2101      	movs	r1, #1
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2103      	movs	r1, #3
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	401a      	ands	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3301      	adds	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b0f      	cmp	r3, #15
 80042dc:	f67f af22 	bls.w	8004124 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40013800 	.word	0x40013800
 80042f4:	40020000 	.word	0x40020000
 80042f8:	40020400 	.word	0x40020400
 80042fc:	40020800 	.word	0x40020800
 8004300:	40020c00 	.word	0x40020c00
 8004304:	40021000 	.word	0x40021000
 8004308:	40021400 	.word	0x40021400
 800430c:	40021800 	.word	0x40021800
 8004310:	40021c00 	.word	0x40021c00
 8004314:	40022000 	.word	0x40022000
 8004318:	40022400 	.word	0x40022400
 800431c:	40013c00 	.word	0x40013c00

08004320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
 800432c:	4613      	mov	r3, r2
 800432e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004330:	787b      	ldrb	r3, [r7, #1]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800433c:	e003      	b.n	8004346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	041a      	lsls	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	619a      	str	r2, [r3, #24]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f806 	bl	8004384 <HAL_GPIO_EXTI_Callback>
  }
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40013c00 	.word	0x40013c00

08004384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e12b      	b.n	8004606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd fad6 	bl	8001974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004400:	f000 ffc8 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_I2C_Init+0x274>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d807      	bhi.n	8004420 <HAL_I2C_Init+0x84>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_I2C_Init+0x278>)
 8004414:	4293      	cmp	r3, r2
 8004416:	bf94      	ite	ls
 8004418:	2301      	movls	r3, #1
 800441a:	2300      	movhi	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e006      	b.n	800442e <HAL_I2C_Init+0x92>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a7d      	ldr	r2, [pc, #500]	; (8004618 <HAL_I2C_Init+0x27c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0e7      	b.n	8004606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a78      	ldr	r2, [pc, #480]	; (800461c <HAL_I2C_Init+0x280>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0c9b      	lsrs	r3, r3, #18
 8004440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a6a      	ldr	r2, [pc, #424]	; (8004610 <HAL_I2C_Init+0x274>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d802      	bhi.n	8004470 <HAL_I2C_Init+0xd4>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3301      	adds	r3, #1
 800446e:	e009      	b.n	8004484 <HAL_I2C_Init+0xe8>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	4a69      	ldr	r2, [pc, #420]	; (8004620 <HAL_I2C_Init+0x284>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	3301      	adds	r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	495c      	ldr	r1, [pc, #368]	; (8004610 <HAL_I2C_Init+0x274>)
 80044a0:	428b      	cmp	r3, r1
 80044a2:	d819      	bhi.n	80044d8 <HAL_I2C_Init+0x13c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e59      	subs	r1, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044b8:	400b      	ands	r3, r1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_I2C_Init+0x138>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e59      	subs	r1, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d2:	e051      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d4:	2304      	movs	r3, #4
 80044d6:	e04f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <HAL_I2C_Init+0x168>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e012      	b.n	800452a <HAL_I2C_Init+0x18e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Init+0x196>
 800452e:	2301      	movs	r3, #1
 8004530:	e022      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <HAL_I2C_Init+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e58      	subs	r0, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	fbb0 f3f3 	udiv	r3, r0, r3
 800454c:	3301      	adds	r3, #1
 800454e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004556:	e00f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1e58      	subs	r0, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	0099      	lsls	r1, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	6809      	ldr	r1, [r1, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6911      	ldr	r1, [r2, #16]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	4311      	orrs	r1, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	000186a0 	.word	0x000186a0
 8004614:	001e847f 	.word	0x001e847f
 8004618:	003d08ff 	.word	0x003d08ff
 800461c:	431bde83 	.word	0x431bde83
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e138      	b.n	80048a8 <HAL_I2S_Init+0x284>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a98      	ldr	r2, [pc, #608]	; (80048b0 <HAL_I2S_Init+0x28c>)
 800464e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fd fa0d 	bl	8001a70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2202      	movs	r2, #2
 8004678:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d060      	beq.n	8004744 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800468a:	2310      	movs	r3, #16
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e001      	b.n	8004694 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004690:	2320      	movs	r3, #32
 8004692:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b20      	cmp	r3, #32
 800469a:	d802      	bhi.n	80046a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80046a2:	2001      	movs	r0, #1
 80046a4:	f001 f8dc 	bl	8005860 <HAL_RCCEx_GetPeriphCLKFreq>
 80046a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b2:	d125      	bne.n	8004700 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	3305      	adds	r3, #5
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e01f      	b.n	800471e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	3305      	adds	r3, #5
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	e00e      	b.n	800471e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	fbb2 f2f3 	udiv	r2, r2, r3
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	3305      	adds	r3, #5
 800471c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4a64      	ldr	r2, [pc, #400]	; (80048b4 <HAL_I2S_Init+0x290>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	08db      	lsrs	r3, r3, #3
 8004728:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e003      	b.n	800474c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004744:	2302      	movs	r3, #2
 8004746:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d902      	bls.n	8004758 <HAL_I2S_Init+0x134>
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2bff      	cmp	r3, #255	; 0xff
 8004756:	d907      	bls.n	8004768 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f043 0210 	orr.w	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e09f      	b.n	80048a8 <HAL_I2S_Init+0x284>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	ea42 0103 	orr.w	r1, r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	430a      	orrs	r2, r1
 800477a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004786:	f023 030f 	bic.w	r3, r3, #15
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6851      	ldr	r1, [r2, #4]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6892      	ldr	r2, [r2, #8]
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68d2      	ldr	r2, [r2, #12]
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6992      	ldr	r2, [r2, #24]
 800479e:	430a      	orrs	r2, r1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047aa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d003      	beq.n	80047bc <HAL_I2S_Init+0x198>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2bb0      	cmp	r3, #176	; 0xb0
 80047ba:	d107      	bne.n	80047cc <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d161      	bne.n	8004898 <HAL_I2S_Init+0x274>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a38      	ldr	r2, [pc, #224]	; (80048b8 <HAL_I2S_Init+0x294>)
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a37      	ldr	r2, [pc, #220]	; (80048bc <HAL_I2S_Init+0x298>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_I2S_Init+0x1c4>
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <HAL_I2S_Init+0x29c>)
 80047e6:	e001      	b.n	80047ec <HAL_I2S_Init+0x1c8>
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	4932      	ldr	r1, [pc, #200]	; (80048bc <HAL_I2S_Init+0x298>)
 80047f4:	428a      	cmp	r2, r1
 80047f6:	d101      	bne.n	80047fc <HAL_I2S_Init+0x1d8>
 80047f8:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <HAL_I2S_Init+0x29c>)
 80047fa:	e001      	b.n	8004800 <HAL_I2S_Init+0x1dc>
 80047fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004800:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004804:	f023 030f 	bic.w	r3, r3, #15
 8004808:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2b      	ldr	r2, [pc, #172]	; (80048bc <HAL_I2S_Init+0x298>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_I2S_Init+0x1f4>
 8004814:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <HAL_I2S_Init+0x29c>)
 8004816:	e001      	b.n	800481c <HAL_I2S_Init+0x1f8>
 8004818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481c:	2202      	movs	r2, #2
 800481e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <HAL_I2S_Init+0x298>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_I2S_Init+0x20a>
 800482a:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_I2S_Init+0x29c>)
 800482c:	e001      	b.n	8004832 <HAL_I2S_Init+0x20e>
 800482e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483e:	d003      	beq.n	8004848 <HAL_I2S_Init+0x224>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <HAL_I2S_Init+0x22c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e001      	b.n	8004854 <HAL_I2S_Init+0x230>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800485e:	4313      	orrs	r3, r2
 8004860:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004868:	4313      	orrs	r3, r2
 800486a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004872:	4313      	orrs	r3, r2
 8004874:	b29a      	uxth	r2, r3
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	4313      	orrs	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004880:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <HAL_I2S_Init+0x298>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_I2S_Init+0x26c>
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_I2S_Init+0x29c>)
 800488e:	e001      	b.n	8004894 <HAL_I2S_Init+0x270>
 8004890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004894:	897a      	ldrh	r2, [r7, #10]
 8004896:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	080049bb 	.word	0x080049bb
 80048b4:	cccccccd 	.word	0xcccccccd
 80048b8:	08004ad1 	.word	0x08004ad1
 80048bc:	40003800 	.word	0x40003800
 80048c0:	40003400 	.word	0x40003400

080048c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10e      	bne.n	8004954 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004944:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ffb8 	bl	80048c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	b292      	uxth	r2, r2
 8004970:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	1c9a      	adds	r2, r3, #2
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10e      	bne.n	80049b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff93 	bl	80048d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d13a      	bne.n	8004a4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d109      	bne.n	80049f4 <I2S_IRQHandler+0x3a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d102      	bne.n	80049f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ffb4 	bl	800495c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d126      	bne.n	8004a4c <I2S_IRQHandler+0x92>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d11f      	bne.n	8004a4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f043 0202 	orr.w	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff ff50 	bl	80048ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d136      	bne.n	8004ac6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d109      	bne.n	8004a76 <I2S_IRQHandler+0xbc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d102      	bne.n	8004a76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff45 	bl	8004900 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d122      	bne.n	8004ac6 <I2S_IRQHandler+0x10c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d11b      	bne.n	8004ac6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	f043 0204 	orr.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ff13 	bl	80048ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a92      	ldr	r2, [pc, #584]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004aea:	4b92      	ldr	r3, [pc, #584]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aec:	e001      	b.n	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a8b      	ldr	r2, [pc, #556]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004b08:	4b8a      	ldr	r3, [pc, #552]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b0a:	e001      	b.n	8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1c:	d004      	beq.n	8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 8099 	bne.w	8004c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d107      	bne.n	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f925 	bl	8004d8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9c8 	bl	8004eec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d13a      	bne.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d035      	beq.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a6e      	ldr	r2, [pc, #440]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b7a:	4b6e      	ldr	r3, [pc, #440]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b7c:	e001      	b.n	8004b82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4969      	ldr	r1, [pc, #420]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b8a:	428b      	cmp	r3, r1
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b8e:	4b69      	ldr	r3, [pc, #420]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b90:	e001      	b.n	8004b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004baa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fe88 	bl	80048ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	f040 80c3 	bne.w	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80bd 	beq.w	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a49      	ldr	r2, [pc, #292]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004c0e:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c10:	e001      	b.n	8004c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4944      	ldr	r1, [pc, #272]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c1e:	428b      	cmp	r3, r1
 8004c20:	d101      	bne.n	8004c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004c22:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c24:	e001      	b.n	8004c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c30:	2300      	movs	r3, #0
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	f043 0204 	orr.w	r2, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fe4a 	bl	80048ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c58:	e089      	b.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d107      	bne.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8be 	bl	8004df0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8fd 	bl	8004e88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d12f      	bne.n	8004cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02a      	beq.n	8004cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cbe:	e001      	b.n	8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4919      	ldr	r1, [pc, #100]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d101      	bne.n	8004cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd2:	e001      	b.n	8004cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cdc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f043 0202 	orr.w	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fdfa 	bl	80048ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d136      	bne.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d031      	beq.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a07      	ldr	r2, [pc, #28]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d18:	e001      	b.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4902      	ldr	r1, [pc, #8]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d26:	428b      	cmp	r3, r1
 8004d28:	d106      	bne.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004d2a:	4b02      	ldr	r3, [pc, #8]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d2c:	e006      	b.n	8004d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004d2e:	bf00      	nop
 8004d30:	40003800 	.word	0x40003800
 8004d34:	40003400 	.word	0x40003400
 8004d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d40:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fdc0 	bl	80048ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	e000      	b.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d6e:	bf00      	nop
}
 8004d70:	bf00      	nop
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c99      	adds	r1, r3, #2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ffc9 	bl	8004d78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c99      	adds	r1, r3, #2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6251      	str	r1, [r2, #36]	; 0x24
 8004e02:	8819      	ldrh	r1, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <I2SEx_TxISR_I2SExt+0x90>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <I2SEx_TxISR_I2SExt+0x22>
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <I2SEx_TxISR_I2SExt+0x94>)
 8004e10:	e001      	b.n	8004e16 <I2SEx_TxISR_I2SExt+0x26>
 8004e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e16:	460a      	mov	r2, r1
 8004e18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d121      	bne.n	8004e76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <I2SEx_TxISR_I2SExt+0x90>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <I2SEx_TxISR_I2SExt+0x50>
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <I2SEx_TxISR_I2SExt+0x94>)
 8004e3e:	e001      	b.n	8004e44 <I2SEx_TxISR_I2SExt+0x54>
 8004e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	490d      	ldr	r1, [pc, #52]	; (8004e80 <I2SEx_TxISR_I2SExt+0x90>)
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	d101      	bne.n	8004e54 <I2SEx_TxISR_I2SExt+0x64>
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <I2SEx_TxISR_I2SExt+0x94>)
 8004e52:	e001      	b.n	8004e58 <I2SEx_TxISR_I2SExt+0x68>
 8004e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff81 	bl	8004d78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40003800 	.word	0x40003800
 8004e84:	40003400 	.word	0x40003400

08004e88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68d8      	ldr	r0, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	1c99      	adds	r1, r3, #2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ea0:	b282      	uxth	r2, r0
 8004ea2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff ff4a 	bl	8004d78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <I2SEx_RxISR_I2SExt+0x90>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <I2SEx_RxISR_I2SExt+0x16>
 8004efe:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <I2SEx_RxISR_I2SExt+0x94>)
 8004f00:	e001      	b.n	8004f06 <I2SEx_RxISR_I2SExt+0x1a>
 8004f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f06:	68d8      	ldr	r0, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	1c99      	adds	r1, r3, #2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f12:	b282      	uxth	r2, r0
 8004f14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d121      	bne.n	8004f72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <I2SEx_RxISR_I2SExt+0x90>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <I2SEx_RxISR_I2SExt+0x50>
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <I2SEx_RxISR_I2SExt+0x94>)
 8004f3a:	e001      	b.n	8004f40 <I2SEx_RxISR_I2SExt+0x54>
 8004f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	490d      	ldr	r1, [pc, #52]	; (8004f7c <I2SEx_RxISR_I2SExt+0x90>)
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	d101      	bne.n	8004f50 <I2SEx_RxISR_I2SExt+0x64>
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <I2SEx_RxISR_I2SExt+0x94>)
 8004f4e:	e001      	b.n	8004f54 <I2SEx_RxISR_I2SExt+0x68>
 8004f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff03 	bl	8004d78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40003800 	.word	0x40003800
 8004f80:	40003400 	.word	0x40003400

08004f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_PWREx_EnableOverDrive+0x94>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb0:	f7fd ff70 	bl	8002e94 <HAL_GetTick>
 8004fb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fb6:	e009      	b.n	8004fcc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fb8:	f7fd ff6c 	bl	8002e94 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc6:	d901      	bls.n	8004fcc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e01f      	b.n	800500c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fcc:	4b13      	ldr	r3, [pc, #76]	; (800501c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d1ee      	bne.n	8004fb8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe0:	f7fd ff58 	bl	8002e94 <HAL_GetTick>
 8004fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fe6:	e009      	b.n	8004ffc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fe8:	f7fd ff54 	bl	8002e94 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff6:	d901      	bls.n	8004ffc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e007      	b.n	800500c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005008:	d1ee      	bne.n	8004fe8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	420e0040 	.word	0x420e0040
 800501c:	40007000 	.word	0x40007000
 8005020:	420e0044 	.word	0x420e0044

08005024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0cc      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005038:	4b68      	ldr	r3, [pc, #416]	; (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d90c      	bls.n	8005060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b65      	ldr	r3, [pc, #404]	; (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b63      	ldr	r3, [pc, #396]	; (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0b8      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d020      	beq.n	80050ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005078:	4b59      	ldr	r3, [pc, #356]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a58      	ldr	r2, [pc, #352]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005090:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a52      	ldr	r2, [pc, #328]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800509a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509c:	4b50      	ldr	r3, [pc, #320]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	494d      	ldr	r1, [pc, #308]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d044      	beq.n	8005144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d119      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e07f      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d003      	beq.n	80050e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e06f      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e067      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4934      	ldr	r1, [pc, #208]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005114:	f7fd febe 	bl	8002e94 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fd feba 	bl	8002e94 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e04f      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b2b      	ldr	r3, [pc, #172]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 020c 	and.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1eb      	bne.n	800511c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005144:	4b25      	ldr	r3, [pc, #148]	; (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d20c      	bcs.n	800516c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b22      	ldr	r3, [pc, #136]	; (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_ClockConfig+0x1b8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e032      	b.n	80051d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4916      	ldr	r1, [pc, #88]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	4313      	orrs	r3, r2
 8005188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	490e      	ldr	r1, [pc, #56]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051aa:	f000 f821 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 80051ae:	4602      	mov	r2, r0
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	490a      	ldr	r1, [pc, #40]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	5ccb      	ldrb	r3, [r1, r3]
 80051be:	fa22 f303 	lsr.w	r3, r2, r3
 80051c2:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_RCC_ClockConfig+0x1c8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fd fe1e 	bl	8002e0c <HAL_InitTick>

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40023c00 	.word	0x40023c00
 80051e0:	40023800 	.word	0x40023800
 80051e4:	0800b190 	.word	0x0800b190
 80051e8:	20000000 	.word	0x20000000
 80051ec:	20000004 	.word	0x20000004

080051f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f4:	b090      	sub	sp, #64	; 0x40
 80051f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
 80051fc:	2300      	movs	r3, #0
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005200:	2300      	movs	r3, #0
 8005202:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005208:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCC_GetSysClockFreq+0x180>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b08      	cmp	r3, #8
 8005212:	d00d      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x40>
 8005214:	2b08      	cmp	r3, #8
 8005216:	f200 80a1 	bhi.w	800535c <HAL_RCC_GetSysClockFreq+0x16c>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x34>
 800521e:	2b04      	cmp	r3, #4
 8005220:	d003      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x3a>
 8005222:	e09b      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005224:	4b53      	ldr	r3, [pc, #332]	; (8005374 <HAL_RCC_GetSysClockFreq+0x184>)
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005228:	e09b      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800522a:	4b53      	ldr	r3, [pc, #332]	; (8005378 <HAL_RCC_GetSysClockFreq+0x188>)
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800522e:	e098      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005230:	4b4f      	ldr	r3, [pc, #316]	; (8005370 <HAL_RCC_GetSysClockFreq+0x180>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800523a:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <HAL_RCC_GetSysClockFreq+0x180>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d028      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005246:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <HAL_RCC_GetSysClockFreq+0x180>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	2200      	movs	r2, #0
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	627a      	str	r2, [r7, #36]	; 0x24
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005258:	2100      	movs	r1, #0
 800525a:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_RCC_GetSysClockFreq+0x188>)
 800525c:	fb03 f201 	mul.w	r2, r3, r1
 8005260:	2300      	movs	r3, #0
 8005262:	fb00 f303 	mul.w	r3, r0, r3
 8005266:	4413      	add	r3, r2
 8005268:	4a43      	ldr	r2, [pc, #268]	; (8005378 <HAL_RCC_GetSysClockFreq+0x188>)
 800526a:	fba0 1202 	umull	r1, r2, r0, r2
 800526e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005270:	460a      	mov	r2, r1
 8005272:	62ba      	str	r2, [r7, #40]	; 0x28
 8005274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005276:	4413      	add	r3, r2
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	2200      	movs	r2, #0
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	61fa      	str	r2, [r7, #28]
 8005282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005286:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800528a:	f7fb fca5 	bl	8000bd8 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4613      	mov	r3, r2
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005296:	e053      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005298:	4b35      	ldr	r3, [pc, #212]	; (8005370 <HAL_RCC_GetSysClockFreq+0x180>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	099b      	lsrs	r3, r3, #6
 800529e:	2200      	movs	r2, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	617a      	str	r2, [r7, #20]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052aa:	f04f 0b00 	mov.w	fp, #0
 80052ae:	4652      	mov	r2, sl
 80052b0:	465b      	mov	r3, fp
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	0159      	lsls	r1, r3, #5
 80052bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c0:	0150      	lsls	r0, r2, #5
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	ebb2 080a 	subs.w	r8, r2, sl
 80052ca:	eb63 090b 	sbc.w	r9, r3, fp
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052e2:	ebb2 0408 	subs.w	r4, r2, r8
 80052e6:	eb63 0509 	sbc.w	r5, r3, r9
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	00eb      	lsls	r3, r5, #3
 80052f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f8:	00e2      	lsls	r2, r4, #3
 80052fa:	4614      	mov	r4, r2
 80052fc:	461d      	mov	r5, r3
 80052fe:	eb14 030a 	adds.w	r3, r4, sl
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	eb45 030b 	adc.w	r3, r5, fp
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005316:	4629      	mov	r1, r5
 8005318:	028b      	lsls	r3, r1, #10
 800531a:	4621      	mov	r1, r4
 800531c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005320:	4621      	mov	r1, r4
 8005322:	028a      	lsls	r2, r1, #10
 8005324:	4610      	mov	r0, r2
 8005326:	4619      	mov	r1, r3
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	2200      	movs	r2, #0
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	60fa      	str	r2, [r7, #12]
 8005330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005334:	f7fb fc50 	bl	8000bd8 <__aeabi_uldivmod>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4613      	mov	r3, r2
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCC_GetSysClockFreq+0x180>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	3301      	adds	r3, #1
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800535a:	e002      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetSysClockFreq+0x184>)
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005364:	4618      	mov	r0, r3
 8005366:	3740      	adds	r7, #64	; 0x40
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800
 8005374:	00f42400 	.word	0x00f42400
 8005378:	016e3600 	.word	0x016e3600

0800537c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <HAL_RCC_GetHCLKFreq+0x14>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000000 	.word	0x20000000

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005398:	f7ff fff0 	bl	800537c <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0a9b      	lsrs	r3, r3, #10
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	0800b1a0 	.word	0x0800b1a0

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053c0:	f7ff ffdc 	bl	800537c <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	0b5b      	lsrs	r3, r3, #13
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4903      	ldr	r1, [pc, #12]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40023800 	.word	0x40023800
 80053e0:	0800b1a0 	.word	0x0800b1a0

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800540c:	4b66      	ldr	r3, [pc, #408]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800540e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005412:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	4963      	ldr	r1, [pc, #396]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800542e:	4b5e      	ldr	r3, [pc, #376]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	495a      	ldr	r1, [pc, #360]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005464:	2b00      	cmp	r3, #0
 8005466:	d075      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005468:	4b50      	ldr	r3, [pc, #320]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800546e:	f7fd fd11 	bl	8002e94 <HAL_GetTick>
 8005472:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005476:	f7fd fd0d 	bl	8002e94 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e1dc      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005488:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f0      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	019a      	lsls	r2, r3, #6
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	071b      	lsls	r3, r3, #28
 80054ac:	493e      	ldr	r1, [pc, #248]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01f      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c6:	0f1b      	lsrs	r3, r3, #28
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	019a      	lsls	r2, r3, #6
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	431a      	orrs	r2, r3
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	071b      	lsls	r3, r3, #28
 80054e0:	4931      	ldr	r1, [pc, #196]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054e8:	4b2f      	ldr	r3, [pc, #188]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ee:	f023 021f 	bic.w	r2, r3, #31
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	492b      	ldr	r1, [pc, #172]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	019a      	lsls	r2, r3, #6
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	071b      	lsls	r3, r3, #28
 8005520:	4921      	ldr	r1, [pc, #132]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800552e:	f7fd fcb1 	bl	8002e94 <HAL_GetTick>
 8005532:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005536:	f7fd fcad 	bl	8002e94 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e17c      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005548:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d112      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10c      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80ce 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800557e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005582:	f040 80c8 	bne.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800558c:	f7fd fc82 	bl	8002e94 <HAL_GetTick>
 8005590:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005592:	e00f      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005594:	f7fd fc7e 	bl	8002e94 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d908      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e14d      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	42470068 	.word	0x42470068
 80055b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055b4:	4ba5      	ldr	r3, [pc, #660]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c0:	d0e8      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02e      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80055ce:	4b9f      	ldr	r3, [pc, #636]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	3301      	adds	r3, #1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055e0:	4b9a      	ldr	r3, [pc, #616]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	0f1b      	lsrs	r3, r3, #28
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	019a      	lsls	r2, r3, #6
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	061b      	lsls	r3, r3, #24
 8005604:	431a      	orrs	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	071b      	lsls	r3, r3, #28
 800560a:	4990      	ldr	r1, [pc, #576]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005612:	4b8e      	ldr	r3, [pc, #568]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	3b01      	subs	r3, #1
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	4989      	ldr	r1, [pc, #548]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d02c      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005638:	4b84      	ldr	r3, [pc, #528]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	3301      	adds	r3, #1
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800564a:	4b80      	ldr	r3, [pc, #512]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	0e1b      	lsrs	r3, r3, #24
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	019a      	lsls	r2, r3, #6
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	3b01      	subs	r3, #1
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	431a      	orrs	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	071b      	lsls	r3, r3, #28
 8005674:	4975      	ldr	r1, [pc, #468]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800567c:	4b73      	ldr	r3, [pc, #460]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800567e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	4970      	ldr	r1, [pc, #448]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d024      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80056a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a6:	d11f      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056a8:	4b68      	ldr	r3, [pc, #416]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	0e1b      	lsrs	r3, r3, #24
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056b6:	4b65      	ldr	r3, [pc, #404]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	0f1b      	lsrs	r3, r3, #28
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	019a      	lsls	r2, r3, #6
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	3b01      	subs	r3, #1
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	431a      	orrs	r2, r3
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	061b      	lsls	r3, r3, #24
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	071b      	lsls	r3, r3, #28
 80056e0:	495a      	ldr	r1, [pc, #360]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056e8:	4b59      	ldr	r3, [pc, #356]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ee:	f7fd fbd1 	bl	8002e94 <HAL_GetTick>
 80056f2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80056f6:	f7fd fbcd 	bl	8002e94 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e09c      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005708:	4b50      	ldr	r3, [pc, #320]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005714:	d1ef      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8083 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	2300      	movs	r3, #0
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	4b48      	ldr	r3, [pc, #288]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	4a47      	ldr	r2, [pc, #284]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	6413      	str	r3, [r2, #64]	; 0x40
 8005734:	4b45      	ldr	r3, [pc, #276]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005740:	4b44      	ldr	r3, [pc, #272]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a43      	ldr	r2, [pc, #268]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800574c:	f7fd fba2 	bl	8002e94 <HAL_GetTick>
 8005750:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005754:	f7fd fb9e 	bl	8002e94 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e06d      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005772:	4b36      	ldr	r3, [pc, #216]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	429a      	cmp	r2, r3
 800578e:	d028      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005790:	4b2e      	ldr	r3, [pc, #184]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057a0:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057a6:	4a29      	ldr	r2, [pc, #164]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ac:	4b27      	ldr	r3, [pc, #156]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d114      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fd fb6c 	bl	8002e94 <HAL_GetTick>
 80057bc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fd fb68 	bl	8002e94 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e035      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ee:	d10d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80057f0:	4b16      	ldr	r3, [pc, #88]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	4911      	ldr	r1, [pc, #68]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4a0e      	ldr	r2, [pc, #56]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005812:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005816:	6093      	str	r3, [r2, #8]
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800581a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005824:	4909      	ldr	r1, [pc, #36]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005826:	4313      	orrs	r3, r2
 8005828:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800583e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	42470070 	.word	0x42470070
 8005854:	40007000 	.word	0x40007000
 8005858:	42470e40 	.word	0x42470e40
 800585c:	424711e0 	.word	0x424711e0

08005860 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d13e      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800587e:	4b23      	ldr	r3, [pc, #140]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d12f      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005896:	617b      	str	r3, [r7, #20]
          break;
 8005898:	e02f      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800589a:	4b1c      	ldr	r3, [pc, #112]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a6:	d108      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058a8:	4b18      	ldr	r3, [pc, #96]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b0:	4a18      	ldr	r2, [pc, #96]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e007      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058ba:	4b14      	ldr	r3, [pc, #80]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e4:	0f1b      	lsrs	r3, r3, #28
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]
          break;
 80058f2:	e002      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
          break;
 80058f8:	bf00      	nop
        }
      }
      break;
 80058fa:	bf00      	nop
    }
  }
  return frequency;
 80058fc:	697b      	ldr	r3, [r7, #20]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	00bb8000 	.word	0x00bb8000
 8005914:	016e3600 	.word	0x016e3600
 8005918:	00f42400 	.word	0x00f42400

0800591c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e273      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d075      	beq.n	8005a26 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800593a:	4b88      	ldr	r3, [pc, #544]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b04      	cmp	r3, #4
 8005944:	d00c      	beq.n	8005960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005946:	4b85      	ldr	r3, [pc, #532]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800594e:	2b08      	cmp	r3, #8
 8005950:	d112      	bne.n	8005978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005952:	4b82      	ldr	r3, [pc, #520]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595e:	d10b      	bne.n	8005978 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	4b7e      	ldr	r3, [pc, #504]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d05b      	beq.n	8005a24 <HAL_RCC_OscConfig+0x108>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d157      	bne.n	8005a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e24e      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x74>
 8005982:	4b76      	ldr	r3, [pc, #472]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a75      	ldr	r2, [pc, #468]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e01d      	b.n	80059cc <HAL_RCC_OscConfig+0xb0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x98>
 800599a:	4b70      	ldr	r3, [pc, #448]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a6f      	ldr	r2, [pc, #444]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b6d      	ldr	r3, [pc, #436]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6c      	ldr	r2, [pc, #432]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0xb0>
 80059b4:	4b69      	ldr	r3, [pc, #420]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a68      	ldr	r2, [pc, #416]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4b66      	ldr	r3, [pc, #408]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a65      	ldr	r2, [pc, #404]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fd fa5e 	bl	8002e94 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fd fa5a 	bl	8002e94 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	; 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e213      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	4b5b      	ldr	r3, [pc, #364]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0xc0>
 80059fa:	e014      	b.n	8005a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fd fa4a 	bl	8002e94 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a04:	f7fd fa46 	bl	8002e94 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e1ff      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	4b51      	ldr	r3, [pc, #324]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0xe8>
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d063      	beq.n	8005afa <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a32:	4b4a      	ldr	r3, [pc, #296]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3e:	4b47      	ldr	r3, [pc, #284]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d11c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4a:	4b44      	ldr	r3, [pc, #272]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a56:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_RCC_OscConfig+0x152>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e1d3      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4937      	ldr	r1, [pc, #220]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a82:	e03a      	b.n	8005afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a8c:	4b34      	ldr	r3, [pc, #208]	; (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a92:	f7fd f9ff 	bl	8002e94 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a9a:	f7fd f9fb 	bl	8002e94 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e1b4      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aac:	4b2b      	ldr	r3, [pc, #172]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab8:	4b28      	ldr	r3, [pc, #160]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4925      	ldr	r1, [pc, #148]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]
 8005acc:	e015      	b.n	8005afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ace:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad4:	f7fd f9de 	bl	8002e94 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005adc:	f7fd f9da 	bl	8002e94 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e193      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aee:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d036      	beq.n	8005b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0e:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <HAL_RCC_OscConfig+0x248>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b14:	f7fd f9be 	bl	8002e94 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b1c:	f7fd f9ba 	bl	8002e94 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e173      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_OscConfig+0x240>)
 8005b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x200>
 8005b3a:	e01b      	b.n	8005b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b3c:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <HAL_RCC_OscConfig+0x248>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b42:	f7fd f9a7 	bl	8002e94 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b48:	e00e      	b.n	8005b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b4a:	f7fd f9a3 	bl	8002e94 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d907      	bls.n	8005b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e15c      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	42470000 	.word	0x42470000
 8005b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b68:	4b8a      	ldr	r3, [pc, #552]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1ea      	bne.n	8005b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8097 	beq.w	8005cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b82:	2300      	movs	r3, #0
 8005b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b86:	4b83      	ldr	r3, [pc, #524]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10f      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	4b7f      	ldr	r3, [pc, #508]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	4a7e      	ldr	r2, [pc, #504]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba2:	4b7c      	ldr	r3, [pc, #496]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb2:	4b79      	ldr	r3, [pc, #484]	; (8005d98 <HAL_RCC_OscConfig+0x47c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d118      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bbe:	4b76      	ldr	r3, [pc, #472]	; (8005d98 <HAL_RCC_OscConfig+0x47c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a75      	ldr	r2, [pc, #468]	; (8005d98 <HAL_RCC_OscConfig+0x47c>)
 8005bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bca:	f7fd f963 	bl	8002e94 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd2:	f7fd f95f 	bl	8002e94 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e118      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	4b6c      	ldr	r3, [pc, #432]	; (8005d98 <HAL_RCC_OscConfig+0x47c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d106      	bne.n	8005c06 <HAL_RCC_OscConfig+0x2ea>
 8005bf8:	4b66      	ldr	r3, [pc, #408]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a65      	ldr	r2, [pc, #404]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
 8005c04:	e01c      	b.n	8005c40 <HAL_RCC_OscConfig+0x324>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d10c      	bne.n	8005c28 <HAL_RCC_OscConfig+0x30c>
 8005c0e:	4b61      	ldr	r3, [pc, #388]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	4a60      	ldr	r2, [pc, #384]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c14:	f043 0304 	orr.w	r3, r3, #4
 8005c18:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1a:	4b5e      	ldr	r3, [pc, #376]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a5d      	ldr	r2, [pc, #372]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
 8005c26:	e00b      	b.n	8005c40 <HAL_RCC_OscConfig+0x324>
 8005c28:	4b5a      	ldr	r3, [pc, #360]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	4a59      	ldr	r2, [pc, #356]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c2e:	f023 0301 	bic.w	r3, r3, #1
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
 8005c34:	4b57      	ldr	r3, [pc, #348]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a56      	ldr	r2, [pc, #344]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c3a:	f023 0304 	bic.w	r3, r3, #4
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d015      	beq.n	8005c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c48:	f7fd f924 	bl	8002e94 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c50:	f7fd f920 	bl	8002e94 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e0d7      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c66:	4b4b      	ldr	r3, [pc, #300]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0ee      	beq.n	8005c50 <HAL_RCC_OscConfig+0x334>
 8005c72:	e014      	b.n	8005c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fd f90e 	bl	8002e94 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c7c:	f7fd f90a 	bl	8002e94 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e0c1      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c92:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1ee      	bne.n	8005c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d105      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca4:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	4a3a      	ldr	r2, [pc, #232]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80ad 	beq.w	8005e14 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d060      	beq.n	8005d88 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d145      	bne.n	8005d5a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cce:	4b33      	ldr	r3, [pc, #204]	; (8005d9c <HAL_RCC_OscConfig+0x480>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fd f8de 	bl	8002e94 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cdc:	f7fd f8da 	bl	8002e94 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e093      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cee:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	3b01      	subs	r3, #1
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	071b      	lsls	r3, r3, #28
 8005d26:	491b      	ldr	r1, [pc, #108]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <HAL_RCC_OscConfig+0x480>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fd f8af 	bl	8002e94 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3a:	f7fd f8ab 	bl	8002e94 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e064      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCC_OscConfig+0x41e>
 8005d58:	e05c      	b.n	8005e14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5a:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <HAL_RCC_OscConfig+0x480>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fd f898 	bl	8002e94 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fd f894 	bl	8002e94 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e04d      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_RCC_OscConfig+0x478>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x44c>
 8005d86:	e045      	b.n	8005e14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e040      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
 8005d94:	40023800 	.word	0x40023800
 8005d98:	40007000 	.word	0x40007000
 8005d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005da0:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <HAL_RCC_OscConfig+0x504>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d030      	beq.n	8005e10 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d129      	bne.n	8005e10 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d122      	bne.n	8005e10 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d119      	bne.n	8005e10 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	3b01      	subs	r3, #1
 8005dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d10f      	bne.n	8005e10 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d001      	beq.n	8005e14 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800

08005e24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e066      	b.n	8005f08 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7f5b      	ldrb	r3, [r3, #29]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fb fea4 	bl	8001b98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	22ca      	movs	r2, #202	; 0xca
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2253      	movs	r2, #83	; 0x53
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f998 	bl	800619c <RTC_EnterInitMode>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d12c      	bne.n	8005ed0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6899      	ldr	r1, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	68d2      	ldr	r2, [r2, #12]
 8005eb0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6919      	ldr	r1, [r3, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	041a      	lsls	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f99f 	bl	800620a <RTC_ExitInitMode>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d113      	bne.n	8005efe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	7f1b      	ldrb	r3, [r3, #28]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_RTC_SetTime+0x1c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e087      	b.n	800603c <HAL_RTC_SetTime+0x12c>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2202      	movs	r2, #2
 8005f36:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d126      	bne.n	8005f8c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f97c 	bl	8006254 <RTC_ByteToBcd2>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f975 	bl	8006254 <RTC_ByteToBcd2>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f6e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	789b      	ldrb	r3, [r3, #2]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 f96d 	bl	8006254 <RTC_ByteToBcd2>
 8005f7a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f7c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	78db      	ldrb	r3, [r3, #3]
 8005f84:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e018      	b.n	8005fbe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fac:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005fb2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	78db      	ldrb	r3, [r3, #3]
 8005fb8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	22ca      	movs	r2, #202	; 0xca
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2253      	movs	r2, #83	; 0x53
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f8e4 	bl	800619c <RTC_EnterInitMode>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d120      	bne.n	8006020 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fe8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ffc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f8f7 	bl	800620a <RTC_ExitInitMode>
 800601c:	4603      	mov	r3, r0
 800601e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006020:	7cfb      	ldrb	r3, [r7, #19]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	22ff      	movs	r2, #255	; 0xff
 8006032:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	771a      	strb	r2, [r3, #28]

  return status;
 800603a:	7cfb      	ldrb	r3, [r7, #19]
}
 800603c:	4618      	mov	r0, r3
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	bd90      	pop	{r4, r7, pc}

08006044 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	7f1b      	ldrb	r3, [r3, #28]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_RTC_SetDate+0x1c>
 800605c:	2302      	movs	r3, #2
 800605e:	e071      	b.n	8006144 <HAL_RTC_SetDate+0x100>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2202      	movs	r2, #2
 800606a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10e      	bne.n	8006090 <HAL_RTC_SetDate+0x4c>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	f023 0310 	bic.w	r3, r3, #16
 8006086:	b2db      	uxtb	r3, r3
 8006088:	330a      	adds	r3, #10
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d11c      	bne.n	80060d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	78db      	ldrb	r3, [r3, #3]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f8da 	bl	8006254 <RTC_ByteToBcd2>
 80060a0:	4603      	mov	r3, r0
 80060a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f8d3 	bl	8006254 <RTC_ByteToBcd2>
 80060ae:	4603      	mov	r3, r0
 80060b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	789b      	ldrb	r3, [r3, #2]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f8cb 	bl	8006254 <RTC_ByteToBcd2>
 80060be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e00e      	b.n	80060ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	78db      	ldrb	r3, [r3, #3]
 80060d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	22ca      	movs	r2, #202	; 0xca
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2253      	movs	r2, #83	; 0x53
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f84c 	bl	800619c <RTC_EnterInitMode>
 8006104:	4603      	mov	r3, r0
 8006106:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800611c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f873 	bl	800620a <RTC_ExitInitMode>
 8006124:	4603      	mov	r3, r0
 8006126:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006128:	7cfb      	ldrb	r3, [r7, #19]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	771a      	strb	r2, [r3, #28]

  return status;
 8006142:	7cfb      	ldrb	r3, [r7, #19]
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd90      	pop	{r4, r7, pc}

0800614c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006166:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006168:	f7fc fe94 	bl	8002e94 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800616e:	e009      	b.n	8006184 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006170:	f7fc fe90 	bl	8002e94 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617e:	d901      	bls.n	8006184 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e007      	b.n	8006194 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0ee      	beq.n	8006170 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d122      	bne.n	8006200 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061ca:	f7fc fe63 	bl	8002e94 <HAL_GetTick>
 80061ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061d0:	e00c      	b.n	80061ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061d2:	f7fc fe5f 	bl	8002e94 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e0:	d904      	bls.n	80061ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2204      	movs	r2, #4
 80061e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <RTC_EnterInitMode+0x64>
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d1e8      	bne.n	80061d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006224:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff89 	bl	800614c <HAL_RTC_WaitForSynchro>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2204      	movs	r2, #4
 8006244:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006262:	e005      	b.n	8006270 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	3301      	adds	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	3b0a      	subs	r3, #10
 800626e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b09      	cmp	r3, #9
 8006274:	d8f6      	bhi.n	8006264 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	b2da      	uxtb	r2, r3
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	4313      	orrs	r3, r2
 8006280:	b2db      	uxtb	r3, r3
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e07b      	b.n	8006398 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d108      	bne.n	80062ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b0:	d009      	beq.n	80062c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	e005      	b.n	80062c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7fb fc83 	bl	8001bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	ea42 0103 	orr.w	r1, r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	f003 0104 	and.w	r1, r3, #4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	f003 0210 	and.w	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006386:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e01a      	b.n	80063e8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb fcca 	bl	8001d64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063fe:	b2db      	uxtb	r3, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e041      	b.n	80064a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fcbe 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f000 fbea 	bl	8006c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d001      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e04e      	b.n	8006562 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a23      	ldr	r2, [pc, #140]	; (8006570 <HAL_TIM_Base_Start_IT+0xc4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d022      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d01d      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <HAL_TIM_Base_Start_IT+0xc8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d018      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <HAL_TIM_Base_Start_IT+0xcc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d013      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1c      	ldr	r2, [pc, #112]	; (800657c <HAL_TIM_Base_Start_IT+0xd0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <HAL_TIM_Base_Start_IT+0xd4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a19      	ldr	r2, [pc, #100]	; (8006584 <HAL_TIM_Base_Start_IT+0xd8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x80>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_TIM_Base_Start_IT+0xdc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d111      	bne.n	8006550 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b06      	cmp	r3, #6
 800653c:	d010      	beq.n	8006560 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654e:	e007      	b.n	8006560 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40010000 	.word	0x40010000
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	40010400 	.word	0x40010400
 8006584:	40014000 	.word	0x40014000
 8006588:	40001800 	.word	0x40001800

0800658c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <HAL_TIM_Base_Stop_IT+0x48>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	f240 4344 	movw	r3, #1092	; 0x444
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_Base_Stop_IT+0x48>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e041      	b.n	8006680 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f839 	bl	8006688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f000 fafb 	bl	8006c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d122      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d11b      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0202 	mvn.w	r2, #2
 80066c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa81 	bl	8006be6 <HAL_TIM_IC_CaptureCallback>
 80066e4:	e005      	b.n	80066f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa73 	bl	8006bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fa84 	bl	8006bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b04      	cmp	r3, #4
 8006704:	d122      	bne.n	800674c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b04      	cmp	r3, #4
 8006712:	d11b      	bne.n	800674c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0204 	mvn.w	r2, #4
 800671c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa57 	bl	8006be6 <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa49 	bl	8006bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa5a 	bl	8006bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b08      	cmp	r3, #8
 8006758:	d122      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b08      	cmp	r3, #8
 8006766:	d11b      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0208 	mvn.w	r2, #8
 8006770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2204      	movs	r2, #4
 8006776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa2d 	bl	8006be6 <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa1f 	bl	8006bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa30 	bl	8006bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d122      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d11b      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0210 	mvn.w	r2, #16
 80067c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2208      	movs	r2, #8
 80067ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa03 	bl	8006be6 <HAL_TIM_IC_CaptureCallback>
 80067e0:	e005      	b.n	80067ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f9f5 	bl	8006bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa06 	bl	8006bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d10e      	bne.n	8006820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0201 	mvn.w	r2, #1
 8006818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9cf 	bl	8006bbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d10e      	bne.n	800684c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b80      	cmp	r3, #128	; 0x80
 800683a:	d107      	bne.n	800684c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fd5c 	bl	8007304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d10e      	bne.n	8006878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d107      	bne.n	8006878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9cb 	bl	8006c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b20      	cmp	r3, #32
 8006884:	d10e      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b20      	cmp	r3, #32
 8006892:	d107      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0220 	mvn.w	r2, #32
 800689c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fd26 	bl	80072f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e0ae      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b0c      	cmp	r3, #12
 80068d6:	f200 809f 	bhi.w	8006a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	08006915 	.word	0x08006915
 80068e4:	08006a19 	.word	0x08006a19
 80068e8:	08006a19 	.word	0x08006a19
 80068ec:	08006a19 	.word	0x08006a19
 80068f0:	08006955 	.word	0x08006955
 80068f4:	08006a19 	.word	0x08006a19
 80068f8:	08006a19 	.word	0x08006a19
 80068fc:	08006a19 	.word	0x08006a19
 8006900:	08006997 	.word	0x08006997
 8006904:	08006a19 	.word	0x08006a19
 8006908:	08006a19 	.word	0x08006a19
 800690c:	08006a19 	.word	0x08006a19
 8006910:	080069d7 	.word	0x080069d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fa22 	bl	8006d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0208 	orr.w	r2, r2, #8
 800692e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6999      	ldr	r1, [r3, #24]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	619a      	str	r2, [r3, #24]
      break;
 8006952:	e064      	b.n	8006a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fa72 	bl	8006e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6999      	ldr	r1, [r3, #24]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	021a      	lsls	r2, r3, #8
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	619a      	str	r2, [r3, #24]
      break;
 8006994:	e043      	b.n	8006a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fac7 	bl	8006f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0208 	orr.w	r2, r2, #8
 80069b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0204 	bic.w	r2, r2, #4
 80069c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69d9      	ldr	r1, [r3, #28]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	61da      	str	r2, [r3, #28]
      break;
 80069d4:	e023      	b.n	8006a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fb1b 	bl	8007018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69d9      	ldr	r1, [r3, #28]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	021a      	lsls	r2, r3, #8
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	61da      	str	r2, [r3, #28]
      break;
 8006a16:	e002      	b.n	8006a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_TIM_ConfigClockSource+0x1c>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e0b4      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x186>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a84:	d03e      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0xd4>
 8006a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8a:	f200 8087 	bhi.w	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a92:	f000 8086 	beq.w	8006ba2 <HAL_TIM_ConfigClockSource+0x172>
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	d87f      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b70      	cmp	r3, #112	; 0x70
 8006a9e:	d01a      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8006aa0:	2b70      	cmp	r3, #112	; 0x70
 8006aa2:	d87b      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006aa4:	2b60      	cmp	r3, #96	; 0x60
 8006aa6:	d050      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x11a>
 8006aa8:	2b60      	cmp	r3, #96	; 0x60
 8006aaa:	d877      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006aac:	2b50      	cmp	r3, #80	; 0x50
 8006aae:	d03c      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xfa>
 8006ab0:	2b50      	cmp	r3, #80	; 0x50
 8006ab2:	d873      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d058      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x13a>
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d86f      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006abc:	2b30      	cmp	r3, #48	; 0x30
 8006abe:	d064      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15a>
 8006ac0:	2b30      	cmp	r3, #48	; 0x30
 8006ac2:	d86b      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d060      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15a>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d867      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d05c      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15a>
 8006ad0:	2b10      	cmp	r3, #16
 8006ad2:	d05a      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15a>
 8006ad4:	e062      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f000 fb67 	bl	80071b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	609a      	str	r2, [r3, #8]
      break;
 8006b02:	e04f      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	6899      	ldr	r1, [r3, #8]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f000 fb50 	bl	80071b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b26:	609a      	str	r2, [r3, #8]
      break;
 8006b28:	e03c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f000 fac4 	bl	80070c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2150      	movs	r1, #80	; 0x50
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fb1d 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006b48:	e02c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f000 fae3 	bl	8007122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2160      	movs	r1, #96	; 0x60
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fb0d 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006b68:	e01c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 faa4 	bl	80070c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2140      	movs	r1, #64	; 0x40
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fafd 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006b88:	e00c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f000 faf4 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006b9a:	e003      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	e000      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a40      	ldr	r2, [pc, #256]	; (8006d38 <TIM_Base_SetConfig+0x114>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <TIM_Base_SetConfig+0x40>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c42:	d00f      	beq.n	8006c64 <TIM_Base_SetConfig+0x40>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a3d      	ldr	r2, [pc, #244]	; (8006d3c <TIM_Base_SetConfig+0x118>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <TIM_Base_SetConfig+0x40>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a3c      	ldr	r2, [pc, #240]	; (8006d40 <TIM_Base_SetConfig+0x11c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d007      	beq.n	8006c64 <TIM_Base_SetConfig+0x40>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a3b      	ldr	r2, [pc, #236]	; (8006d44 <TIM_Base_SetConfig+0x120>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_Base_SetConfig+0x40>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a3a      	ldr	r2, [pc, #232]	; (8006d48 <TIM_Base_SetConfig+0x124>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d108      	bne.n	8006c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2f      	ldr	r2, [pc, #188]	; (8006d38 <TIM_Base_SetConfig+0x114>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d02b      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c84:	d027      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <TIM_Base_SetConfig+0x118>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d023      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a2b      	ldr	r2, [pc, #172]	; (8006d40 <TIM_Base_SetConfig+0x11c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01f      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a2a      	ldr	r2, [pc, #168]	; (8006d44 <TIM_Base_SetConfig+0x120>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01b      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a29      	ldr	r2, [pc, #164]	; (8006d48 <TIM_Base_SetConfig+0x124>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d017      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a28      	ldr	r2, [pc, #160]	; (8006d4c <TIM_Base_SetConfig+0x128>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a27      	ldr	r2, [pc, #156]	; (8006d50 <TIM_Base_SetConfig+0x12c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00f      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a26      	ldr	r2, [pc, #152]	; (8006d54 <TIM_Base_SetConfig+0x130>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00b      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a25      	ldr	r2, [pc, #148]	; (8006d58 <TIM_Base_SetConfig+0x134>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d007      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <TIM_Base_SetConfig+0x138>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d003      	beq.n	8006cd6 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <TIM_Base_SetConfig+0x13c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d108      	bne.n	8006ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <TIM_Base_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_Base_SetConfig+0xf8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a0c      	ldr	r2, [pc, #48]	; (8006d48 <TIM_Base_SetConfig+0x124>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d103      	bne.n	8006d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	615a      	str	r2, [r3, #20]
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40010400 	.word	0x40010400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800
 8006d58:	40001800 	.word	0x40001800
 8006d5c:	40001c00 	.word	0x40001c00
 8006d60:	40002000 	.word	0x40002000

08006d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0201 	bic.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 0302 	bic.w	r3, r3, #2
 8006dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <TIM_OC1_SetConfig+0xd8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC1_SetConfig+0x64>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <TIM_OC1_SetConfig+0xdc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d10c      	bne.n	8006de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0308 	bic.w	r3, r3, #8
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f023 0304 	bic.w	r3, r3, #4
 8006de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <TIM_OC1_SetConfig+0xd8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_OC1_SetConfig+0x8e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <TIM_OC1_SetConfig+0xdc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d111      	bne.n	8006e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	621a      	str	r2, [r3, #32]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40010400 	.word	0x40010400

08006e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0210 	bic.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0320 	bic.w	r3, r3, #32
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a22      	ldr	r2, [pc, #136]	; (8006f28 <TIM_OC2_SetConfig+0xe4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_OC2_SetConfig+0x68>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <TIM_OC2_SetConfig+0xe8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d10d      	bne.n	8006ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <TIM_OC2_SetConfig+0xe4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x94>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <TIM_OC2_SetConfig+0xe8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d113      	bne.n	8006f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	40010400 	.word	0x40010400

08006f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a21      	ldr	r2, [pc, #132]	; (8007010 <TIM_OC3_SetConfig+0xe0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_OC3_SetConfig+0x66>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a20      	ldr	r2, [pc, #128]	; (8007014 <TIM_OC3_SetConfig+0xe4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d10d      	bne.n	8006fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a16      	ldr	r2, [pc, #88]	; (8007010 <TIM_OC3_SetConfig+0xe0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_OC3_SetConfig+0x92>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a15      	ldr	r2, [pc, #84]	; (8007014 <TIM_OC3_SetConfig+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d113      	bne.n	8006fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	621a      	str	r2, [r3, #32]
}
 8007004:	bf00      	nop
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	40010000 	.word	0x40010000
 8007014:	40010400 	.word	0x40010400

08007018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	021b      	lsls	r3, r3, #8
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	031b      	lsls	r3, r3, #12
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a12      	ldr	r2, [pc, #72]	; (80070bc <TIM_OC4_SetConfig+0xa4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d003      	beq.n	8007080 <TIM_OC4_SetConfig+0x68>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <TIM_OC4_SetConfig+0xa8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d109      	bne.n	8007094 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	019b      	lsls	r3, r3, #6
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40010400 	.word	0x40010400

080070c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 030a 	bic.w	r3, r3, #10
 8007100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0210 	bic.w	r2, r3, #16
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800714c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800715e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f043 0307 	orr.w	r3, r3, #7
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	609a      	str	r2, [r3, #8]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	431a      	orrs	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800720c:	2302      	movs	r3, #2
 800720e:	e05a      	b.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d01d      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1d      	ldr	r2, [pc, #116]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1a      	ldr	r2, [pc, #104]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a18      	ldr	r2, [pc, #96]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10c      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40010400 	.word	0x40010400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40001800 	.word	0x40001800

080072f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e03f      	b.n	80073aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa fd9a 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	; 0x24
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800735a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fd7b 	bl	8007e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b08a      	sub	sp, #40	; 0x28
 80073b6:	af02      	add	r7, sp, #8
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d17c      	bne.n	80074cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_UART_Transmit+0x2c>
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e075      	b.n	80074ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_UART_Transmit+0x3e>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e06e      	b.n	80074ce <HAL_UART_Transmit+0x11c>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2221      	movs	r2, #33	; 0x21
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007406:	f7fb fd45 	bl	8002e94 <HAL_GetTick>
 800740a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d108      	bne.n	8007434 <HAL_UART_Transmit+0x82>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e003      	b.n	800743c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007444:	e02a      	b.n	800749c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 faf9 	bl	8007a48 <UART_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e036      	b.n	80074ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	3302      	adds	r3, #2
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e007      	b.n	800748e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	3301      	adds	r3, #1
 800748c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1cf      	bne.n	8007446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2200      	movs	r2, #0
 80074ae:	2140      	movs	r1, #64	; 0x40
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fac9 	bl	8007a48 <UART_WaitOnFlagUntilTimeout>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e006      	b.n	80074ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e000      	b.n	80074ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
  }
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b0ba      	sub	sp, #232	; 0xe8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_UART_IRQHandler+0x66>
 800752a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fbd3 	bl	8007ce2 <UART_Receive_IT>
      return;
 800753c:	e256      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800753e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80de 	beq.w	8007704 <HAL_UART_IRQHandler+0x22c>
 8007548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007558:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80d1 	beq.w	8007704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <HAL_UART_IRQHandler+0xae>
 800756e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f043 0201 	orr.w	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <HAL_UART_IRQHandler+0xd2>
 8007592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f043 0202 	orr.w	r2, r3, #2
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_UART_IRQHandler+0xf6>
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f043 0204 	orr.w	r2, r3, #4
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d011      	beq.n	80075fe <HAL_UART_IRQHandler+0x126>
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f043 0208 	orr.w	r2, r3, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 81ed 	beq.w	80079e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_UART_IRQHandler+0x14e>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb5e 	bl	8007ce2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <HAL_UART_IRQHandler+0x17a>
 800764a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800764e:	2b00      	cmp	r3, #0
 8007650:	d04f      	beq.n	80076f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa66 	bl	8007b24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d141      	bne.n	80076ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3314      	adds	r3, #20
 800766c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800767c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3314      	adds	r3, #20
 800768e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800769e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1d9      	bne.n	8007666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d013      	beq.n	80076e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	4a7d      	ldr	r2, [pc, #500]	; (80078b4 <HAL_UART_IRQHandler+0x3dc>)
 80076c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fc f914 	bl	80038f4 <HAL_DMA_Abort_IT>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	e00e      	b.n	8007700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f99a 	bl	8007a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e8:	e00a      	b.n	8007700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f996 	bl	8007a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	e006      	b.n	8007700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f992 	bl	8007a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076fe:	e170      	b.n	80079e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007700:	bf00      	nop
    return;
 8007702:	e16e      	b.n	80079e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 814a 	bne.w	80079a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8143 	beq.w	80079a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 813c 	beq.w	80079a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800772a:	2300      	movs	r3, #0
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	f040 80b4 	bne.w	80078b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800775c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8140 	beq.w	80079e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800776a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800776e:	429a      	cmp	r2, r3
 8007770:	f080 8139 	bcs.w	80079e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800777a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007786:	f000 8088 	beq.w	800789a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1d9      	bne.n	800778a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800780c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e1      	bne.n	80077d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3314      	adds	r3, #20
 8007818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3314      	adds	r3, #20
 8007832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800783c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e3      	bne.n	8007812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786a:	f023 0310 	bic.w	r3, r3, #16
 800786e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800787c:	65ba      	str	r2, [r7, #88]	; 0x58
 800787e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e3      	bne.n	8007858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	4618      	mov	r0, r3
 8007896:	f7fb ffbd 	bl	8003814 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8c0 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078b0:	e099      	b.n	80079e6 <HAL_UART_IRQHandler+0x50e>
 80078b2:	bf00      	nop
 80078b4:	08007beb 	.word	0x08007beb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 808b 	beq.w	80079ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8086 	beq.w	80079ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007902:	647a      	str	r2, [r7, #68]	; 0x44
 8007904:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e3      	bne.n	80078de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3314      	adds	r3, #20
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	623b      	str	r3, [r7, #32]
   return(result);
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	f023 0301 	bic.w	r3, r3, #1
 800792c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3314      	adds	r3, #20
 8007936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800793a:	633a      	str	r2, [r7, #48]	; 0x30
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	60fb      	str	r3, [r7, #12]
   return(result);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0310 	bic.w	r3, r3, #16
 8007972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007980:	61fa      	str	r2, [r7, #28]
 8007982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	69b9      	ldr	r1, [r7, #24]
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	617b      	str	r3, [r7, #20]
   return(result);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e3      	bne.n	800795c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f848 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079a0:	e023      	b.n	80079ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d009      	beq.n	80079c2 <HAL_UART_IRQHandler+0x4ea>
 80079ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f929 	bl	8007c12 <UART_Transmit_IT>
    return;
 80079c0:	e014      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00e      	beq.n	80079ec <HAL_UART_IRQHandler+0x514>
 80079ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f969 	bl	8007cb2 <UART_EndTransmit_IT>
    return;
 80079e0:	e004      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
    return;
 80079e2:	bf00      	nop
 80079e4:	e002      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
      return;
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
      return;
 80079ea:	bf00      	nop
  }
}
 80079ec:	37e8      	adds	r7, #232	; 0xe8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop

080079f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b090      	sub	sp, #64	; 0x40
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a58:	e050      	b.n	8007afc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d04c      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d007      	beq.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a68:	f7fb fa14 	bl	8002e94 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d241      	bcs.n	8007afc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a98:	637a      	str	r2, [r7, #52]	; 0x34
 8007a9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	613b      	str	r3, [r7, #16]
   return(result);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007acc:	623a      	str	r2, [r7, #32]
 8007ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	69f9      	ldr	r1, [r7, #28]
 8007ad2:	6a3a      	ldr	r2, [r7, #32]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e00f      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d09f      	beq.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3740      	adds	r7, #64	; 0x40
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b095      	sub	sp, #84	; 0x54
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330c      	adds	r3, #12
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b4c:	643a      	str	r2, [r7, #64]	; 0x40
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3314      	adds	r3, #20
 8007b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e5      	bne.n	8007b60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d119      	bne.n	8007bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	330c      	adds	r3, #12
 8007ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f023 0310 	bic.w	r3, r3, #16
 8007bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	330c      	adds	r3, #12
 8007bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bbc:	61ba      	str	r2, [r7, #24]
 8007bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6979      	ldr	r1, [r7, #20]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bde:	bf00      	nop
 8007be0:	3754      	adds	r7, #84	; 0x54
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff ff09 	bl	8007a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b21      	cmp	r3, #33	; 0x21
 8007c24:	d13e      	bne.n	8007ca4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	d114      	bne.n	8007c5a <UART_Transmit_IT+0x48>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d110      	bne.n	8007c5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	1c9a      	adds	r2, r3, #2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]
 8007c58:	e008      	b.n	8007c6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	1c59      	adds	r1, r3, #1
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	6211      	str	r1, [r2, #32]
 8007c64:	781a      	ldrb	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10f      	bne.n	8007ca0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e000      	b.n	8007ca6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ca4:	2302      	movs	r3, #2
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fe8e 	bl	80079f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b08c      	sub	sp, #48	; 0x30
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b22      	cmp	r3, #34	; 0x22
 8007cf4:	f040 80ab 	bne.w	8007e4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d00:	d117      	bne.n	8007d32 <UART_Receive_IT+0x50>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d113      	bne.n	8007d32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	1c9a      	adds	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d30:	e026      	b.n	8007d80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d44:	d007      	beq.n	8007d56 <UART_Receive_IT+0x74>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <UART_Receive_IT+0x82>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e008      	b.n	8007d76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d15a      	bne.n	8007e4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0220 	bic.w	r2, r2, #32
 8007da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695a      	ldr	r2, [r3, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0201 	bic.w	r2, r2, #1
 8007dc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d135      	bne.n	8007e40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f023 0310 	bic.w	r3, r3, #16
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfa:	623a      	str	r2, [r7, #32]
 8007dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	69f9      	ldr	r1, [r7, #28]
 8007e00:	6a3a      	ldr	r2, [r7, #32]
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b10      	cmp	r3, #16
 8007e1a:	d10a      	bne.n	8007e32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fdf9 	bl	8007a30 <HAL_UARTEx_RxEventCallback>
 8007e3e:	e002      	b.n	8007e46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fde1 	bl	8007a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e002      	b.n	8007e50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e000      	b.n	8007e50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
  }
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3730      	adds	r7, #48	; 0x30
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e5c:	b0c0      	sub	sp, #256	; 0x100
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	68d9      	ldr	r1, [r3, #12]
 8007e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	ea40 0301 	orr.w	r3, r0, r1
 8007e80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007eb0:	f021 010c 	bic.w	r1, r1, #12
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed2:	6999      	ldr	r1, [r3, #24]
 8007ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	ea40 0301 	orr.w	r3, r0, r1
 8007ede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b8f      	ldr	r3, [pc, #572]	; (8008124 <UART_SetConfig+0x2cc>)
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d005      	beq.n	8007ef8 <UART_SetConfig+0xa0>
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b8d      	ldr	r3, [pc, #564]	; (8008128 <UART_SetConfig+0x2d0>)
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d104      	bne.n	8007f02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ef8:	f7fd fa60 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8007efc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f00:	e003      	b.n	8007f0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f02:	f7fd fa47 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8007f06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f14:	f040 810c 	bne.w	8008130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	1891      	adds	r1, r2, r2
 8007f30:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f32:	415b      	adcs	r3, r3
 8007f34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	eb12 0801 	adds.w	r8, r2, r1
 8007f40:	4629      	mov	r1, r5
 8007f42:	eb43 0901 	adc.w	r9, r3, r1
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f5a:	4690      	mov	r8, r2
 8007f5c:	4699      	mov	r9, r3
 8007f5e:	4623      	mov	r3, r4
 8007f60:	eb18 0303 	adds.w	r3, r8, r3
 8007f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f68:	462b      	mov	r3, r5
 8007f6a:	eb49 0303 	adc.w	r3, r9, r3
 8007f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f86:	460b      	mov	r3, r1
 8007f88:	18db      	adds	r3, r3, r3
 8007f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	eb42 0303 	adc.w	r3, r2, r3
 8007f92:	657b      	str	r3, [r7, #84]	; 0x54
 8007f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f9c:	f7f8 fe1c 	bl	8000bd8 <__aeabi_uldivmod>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4b61      	ldr	r3, [pc, #388]	; (800812c <UART_SetConfig+0x2d4>)
 8007fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	011c      	lsls	r4, r3, #4
 8007fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	1891      	adds	r1, r2, r2
 8007fc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fc8:	415b      	adcs	r3, r3
 8007fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fd0:	4641      	mov	r1, r8
 8007fd2:	eb12 0a01 	adds.w	sl, r2, r1
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	eb43 0b01 	adc.w	fp, r3, r1
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ff0:	4692      	mov	sl, r2
 8007ff2:	469b      	mov	fp, r3
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	eb1a 0303 	adds.w	r3, sl, r3
 8007ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ffe:	464b      	mov	r3, r9
 8008000:	eb4b 0303 	adc.w	r3, fp, r3
 8008004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008014:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800801c:	460b      	mov	r3, r1
 800801e:	18db      	adds	r3, r3, r3
 8008020:	643b      	str	r3, [r7, #64]	; 0x40
 8008022:	4613      	mov	r3, r2
 8008024:	eb42 0303 	adc.w	r3, r2, r3
 8008028:	647b      	str	r3, [r7, #68]	; 0x44
 800802a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800802e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008032:	f7f8 fdd1 	bl	8000bd8 <__aeabi_uldivmod>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4611      	mov	r1, r2
 800803c:	4b3b      	ldr	r3, [pc, #236]	; (800812c <UART_SetConfig+0x2d4>)
 800803e:	fba3 2301 	umull	r2, r3, r3, r1
 8008042:	095b      	lsrs	r3, r3, #5
 8008044:	2264      	movs	r2, #100	; 0x64
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	1acb      	subs	r3, r1, r3
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008052:	4b36      	ldr	r3, [pc, #216]	; (800812c <UART_SetConfig+0x2d4>)
 8008054:	fba3 2302 	umull	r2, r3, r3, r2
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008060:	441c      	add	r4, r3
 8008062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008066:	2200      	movs	r2, #0
 8008068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800806c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008074:	4642      	mov	r2, r8
 8008076:	464b      	mov	r3, r9
 8008078:	1891      	adds	r1, r2, r2
 800807a:	63b9      	str	r1, [r7, #56]	; 0x38
 800807c:	415b      	adcs	r3, r3
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008084:	4641      	mov	r1, r8
 8008086:	1851      	adds	r1, r2, r1
 8008088:	6339      	str	r1, [r7, #48]	; 0x30
 800808a:	4649      	mov	r1, r9
 800808c:	414b      	adcs	r3, r1
 800808e:	637b      	str	r3, [r7, #52]	; 0x34
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800809c:	4659      	mov	r1, fp
 800809e:	00cb      	lsls	r3, r1, #3
 80080a0:	4651      	mov	r1, sl
 80080a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080a6:	4651      	mov	r1, sl
 80080a8:	00ca      	lsls	r2, r1, #3
 80080aa:	4610      	mov	r0, r2
 80080ac:	4619      	mov	r1, r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	4642      	mov	r2, r8
 80080b2:	189b      	adds	r3, r3, r2
 80080b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080b8:	464b      	mov	r3, r9
 80080ba:	460a      	mov	r2, r1
 80080bc:	eb42 0303 	adc.w	r3, r2, r3
 80080c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080d8:	460b      	mov	r3, r1
 80080da:	18db      	adds	r3, r3, r3
 80080dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080de:	4613      	mov	r3, r2
 80080e0:	eb42 0303 	adc.w	r3, r2, r3
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080ee:	f7f8 fd73 	bl	8000bd8 <__aeabi_uldivmod>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <UART_SetConfig+0x2d4>)
 80080f8:	fba3 1302 	umull	r1, r3, r3, r2
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	2164      	movs	r1, #100	; 0x64
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	3332      	adds	r3, #50	; 0x32
 800810a:	4a08      	ldr	r2, [pc, #32]	; (800812c <UART_SetConfig+0x2d4>)
 800810c:	fba2 2303 	umull	r2, r3, r2, r3
 8008110:	095b      	lsrs	r3, r3, #5
 8008112:	f003 0207 	and.w	r2, r3, #7
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4422      	add	r2, r4
 800811e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008120:	e105      	b.n	800832e <UART_SetConfig+0x4d6>
 8008122:	bf00      	nop
 8008124:	40011000 	.word	0x40011000
 8008128:	40011400 	.word	0x40011400
 800812c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008134:	2200      	movs	r2, #0
 8008136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800813a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800813e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008142:	4642      	mov	r2, r8
 8008144:	464b      	mov	r3, r9
 8008146:	1891      	adds	r1, r2, r2
 8008148:	6239      	str	r1, [r7, #32]
 800814a:	415b      	adcs	r3, r3
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
 800814e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008152:	4641      	mov	r1, r8
 8008154:	1854      	adds	r4, r2, r1
 8008156:	4649      	mov	r1, r9
 8008158:	eb43 0501 	adc.w	r5, r3, r1
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	00eb      	lsls	r3, r5, #3
 8008166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800816a:	00e2      	lsls	r2, r4, #3
 800816c:	4614      	mov	r4, r2
 800816e:	461d      	mov	r5, r3
 8008170:	4643      	mov	r3, r8
 8008172:	18e3      	adds	r3, r4, r3
 8008174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008178:	464b      	mov	r3, r9
 800817a:	eb45 0303 	adc.w	r3, r5, r3
 800817e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800818e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800819e:	4629      	mov	r1, r5
 80081a0:	008b      	lsls	r3, r1, #2
 80081a2:	4621      	mov	r1, r4
 80081a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081a8:	4621      	mov	r1, r4
 80081aa:	008a      	lsls	r2, r1, #2
 80081ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081b0:	f7f8 fd12 	bl	8000bd8 <__aeabi_uldivmod>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4b60      	ldr	r3, [pc, #384]	; (800833c <UART_SetConfig+0x4e4>)
 80081ba:	fba3 2302 	umull	r2, r3, r3, r2
 80081be:	095b      	lsrs	r3, r3, #5
 80081c0:	011c      	lsls	r4, r3, #4
 80081c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081d4:	4642      	mov	r2, r8
 80081d6:	464b      	mov	r3, r9
 80081d8:	1891      	adds	r1, r2, r2
 80081da:	61b9      	str	r1, [r7, #24]
 80081dc:	415b      	adcs	r3, r3
 80081de:	61fb      	str	r3, [r7, #28]
 80081e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081e4:	4641      	mov	r1, r8
 80081e6:	1851      	adds	r1, r2, r1
 80081e8:	6139      	str	r1, [r7, #16]
 80081ea:	4649      	mov	r1, r9
 80081ec:	414b      	adcs	r3, r1
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081fc:	4659      	mov	r1, fp
 80081fe:	00cb      	lsls	r3, r1, #3
 8008200:	4651      	mov	r1, sl
 8008202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008206:	4651      	mov	r1, sl
 8008208:	00ca      	lsls	r2, r1, #3
 800820a:	4610      	mov	r0, r2
 800820c:	4619      	mov	r1, r3
 800820e:	4603      	mov	r3, r0
 8008210:	4642      	mov	r2, r8
 8008212:	189b      	adds	r3, r3, r2
 8008214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008218:	464b      	mov	r3, r9
 800821a:	460a      	mov	r2, r1
 800821c:	eb42 0303 	adc.w	r3, r2, r3
 8008220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	67bb      	str	r3, [r7, #120]	; 0x78
 800822e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800823c:	4649      	mov	r1, r9
 800823e:	008b      	lsls	r3, r1, #2
 8008240:	4641      	mov	r1, r8
 8008242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008246:	4641      	mov	r1, r8
 8008248:	008a      	lsls	r2, r1, #2
 800824a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800824e:	f7f8 fcc3 	bl	8000bd8 <__aeabi_uldivmod>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4b39      	ldr	r3, [pc, #228]	; (800833c <UART_SetConfig+0x4e4>)
 8008258:	fba3 1302 	umull	r1, r3, r3, r2
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	2164      	movs	r1, #100	; 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	3332      	adds	r3, #50	; 0x32
 800826a:	4a34      	ldr	r2, [pc, #208]	; (800833c <UART_SetConfig+0x4e4>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008276:	441c      	add	r4, r3
 8008278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800827c:	2200      	movs	r2, #0
 800827e:	673b      	str	r3, [r7, #112]	; 0x70
 8008280:	677a      	str	r2, [r7, #116]	; 0x74
 8008282:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	1891      	adds	r1, r2, r2
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	415b      	adcs	r3, r3
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008296:	4641      	mov	r1, r8
 8008298:	1851      	adds	r1, r2, r1
 800829a:	6039      	str	r1, [r7, #0]
 800829c:	4649      	mov	r1, r9
 800829e:	414b      	adcs	r3, r1
 80082a0:	607b      	str	r3, [r7, #4]
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	f04f 0300 	mov.w	r3, #0
 80082aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082ae:	4659      	mov	r1, fp
 80082b0:	00cb      	lsls	r3, r1, #3
 80082b2:	4651      	mov	r1, sl
 80082b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082b8:	4651      	mov	r1, sl
 80082ba:	00ca      	lsls	r2, r1, #3
 80082bc:	4610      	mov	r0, r2
 80082be:	4619      	mov	r1, r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	4642      	mov	r2, r8
 80082c4:	189b      	adds	r3, r3, r2
 80082c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082c8:	464b      	mov	r3, r9
 80082ca:	460a      	mov	r2, r1
 80082cc:	eb42 0303 	adc.w	r3, r2, r3
 80082d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	663b      	str	r3, [r7, #96]	; 0x60
 80082dc:	667a      	str	r2, [r7, #100]	; 0x64
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082ea:	4649      	mov	r1, r9
 80082ec:	008b      	lsls	r3, r1, #2
 80082ee:	4641      	mov	r1, r8
 80082f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082f4:	4641      	mov	r1, r8
 80082f6:	008a      	lsls	r2, r1, #2
 80082f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082fc:	f7f8 fc6c 	bl	8000bd8 <__aeabi_uldivmod>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4b0d      	ldr	r3, [pc, #52]	; (800833c <UART_SetConfig+0x4e4>)
 8008306:	fba3 1302 	umull	r1, r3, r3, r2
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	2164      	movs	r1, #100	; 0x64
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	3332      	adds	r3, #50	; 0x32
 8008318:	4a08      	ldr	r2, [pc, #32]	; (800833c <UART_SetConfig+0x4e4>)
 800831a:	fba2 2303 	umull	r2, r3, r2, r3
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4422      	add	r2, r4
 800832c:	609a      	str	r2, [r3, #8]
}
 800832e:	bf00      	nop
 8008330:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008334:	46bd      	mov	sp, r7
 8008336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833a:	bf00      	nop
 800833c:	51eb851f 	.word	0x51eb851f

08008340 <__errno>:
 8008340:	4b01      	ldr	r3, [pc, #4]	; (8008348 <__errno+0x8>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	2000000c 	.word	0x2000000c

0800834c <__libc_init_array>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4d0d      	ldr	r5, [pc, #52]	; (8008384 <__libc_init_array+0x38>)
 8008350:	4c0d      	ldr	r4, [pc, #52]	; (8008388 <__libc_init_array+0x3c>)
 8008352:	1b64      	subs	r4, r4, r5
 8008354:	10a4      	asrs	r4, r4, #2
 8008356:	2600      	movs	r6, #0
 8008358:	42a6      	cmp	r6, r4
 800835a:	d109      	bne.n	8008370 <__libc_init_array+0x24>
 800835c:	4d0b      	ldr	r5, [pc, #44]	; (800838c <__libc_init_array+0x40>)
 800835e:	4c0c      	ldr	r4, [pc, #48]	; (8008390 <__libc_init_array+0x44>)
 8008360:	f002 ff02 	bl	800b168 <_init>
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	2600      	movs	r6, #0
 800836a:	42a6      	cmp	r6, r4
 800836c:	d105      	bne.n	800837a <__libc_init_array+0x2e>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	f855 3b04 	ldr.w	r3, [r5], #4
 8008374:	4798      	blx	r3
 8008376:	3601      	adds	r6, #1
 8008378:	e7ee      	b.n	8008358 <__libc_init_array+0xc>
 800837a:	f855 3b04 	ldr.w	r3, [r5], #4
 800837e:	4798      	blx	r3
 8008380:	3601      	adds	r6, #1
 8008382:	e7f2      	b.n	800836a <__libc_init_array+0x1e>
 8008384:	0800b594 	.word	0x0800b594
 8008388:	0800b594 	.word	0x0800b594
 800838c:	0800b594 	.word	0x0800b594
 8008390:	0800b598 	.word	0x0800b598

08008394 <memset>:
 8008394:	4402      	add	r2, r0
 8008396:	4603      	mov	r3, r0
 8008398:	4293      	cmp	r3, r2
 800839a:	d100      	bne.n	800839e <memset+0xa>
 800839c:	4770      	bx	lr
 800839e:	f803 1b01 	strb.w	r1, [r3], #1
 80083a2:	e7f9      	b.n	8008398 <memset+0x4>

080083a4 <__cvt>:
 80083a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	ec55 4b10 	vmov	r4, r5, d0
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	460e      	mov	r6, r1
 80083b0:	4619      	mov	r1, r3
 80083b2:	462b      	mov	r3, r5
 80083b4:	bfbb      	ittet	lt
 80083b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083ba:	461d      	movlt	r5, r3
 80083bc:	2300      	movge	r3, #0
 80083be:	232d      	movlt	r3, #45	; 0x2d
 80083c0:	700b      	strb	r3, [r1, #0]
 80083c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083c8:	4691      	mov	r9, r2
 80083ca:	f023 0820 	bic.w	r8, r3, #32
 80083ce:	bfbc      	itt	lt
 80083d0:	4622      	movlt	r2, r4
 80083d2:	4614      	movlt	r4, r2
 80083d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083d8:	d005      	beq.n	80083e6 <__cvt+0x42>
 80083da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083de:	d100      	bne.n	80083e2 <__cvt+0x3e>
 80083e0:	3601      	adds	r6, #1
 80083e2:	2102      	movs	r1, #2
 80083e4:	e000      	b.n	80083e8 <__cvt+0x44>
 80083e6:	2103      	movs	r1, #3
 80083e8:	ab03      	add	r3, sp, #12
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	ab02      	add	r3, sp, #8
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	ec45 4b10 	vmov	d0, r4, r5
 80083f4:	4653      	mov	r3, sl
 80083f6:	4632      	mov	r2, r6
 80083f8:	f000 fcea 	bl	8008dd0 <_dtoa_r>
 80083fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008400:	4607      	mov	r7, r0
 8008402:	d102      	bne.n	800840a <__cvt+0x66>
 8008404:	f019 0f01 	tst.w	r9, #1
 8008408:	d022      	beq.n	8008450 <__cvt+0xac>
 800840a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800840e:	eb07 0906 	add.w	r9, r7, r6
 8008412:	d110      	bne.n	8008436 <__cvt+0x92>
 8008414:	783b      	ldrb	r3, [r7, #0]
 8008416:	2b30      	cmp	r3, #48	; 0x30
 8008418:	d10a      	bne.n	8008430 <__cvt+0x8c>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4620      	mov	r0, r4
 8008420:	4629      	mov	r1, r5
 8008422:	f7f8 fb69 	bl	8000af8 <__aeabi_dcmpeq>
 8008426:	b918      	cbnz	r0, 8008430 <__cvt+0x8c>
 8008428:	f1c6 0601 	rsb	r6, r6, #1
 800842c:	f8ca 6000 	str.w	r6, [sl]
 8008430:	f8da 3000 	ldr.w	r3, [sl]
 8008434:	4499      	add	r9, r3
 8008436:	2200      	movs	r2, #0
 8008438:	2300      	movs	r3, #0
 800843a:	4620      	mov	r0, r4
 800843c:	4629      	mov	r1, r5
 800843e:	f7f8 fb5b 	bl	8000af8 <__aeabi_dcmpeq>
 8008442:	b108      	cbz	r0, 8008448 <__cvt+0xa4>
 8008444:	f8cd 900c 	str.w	r9, [sp, #12]
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	454b      	cmp	r3, r9
 800844e:	d307      	bcc.n	8008460 <__cvt+0xbc>
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008454:	1bdb      	subs	r3, r3, r7
 8008456:	4638      	mov	r0, r7
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	b004      	add	sp, #16
 800845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008460:	1c59      	adds	r1, r3, #1
 8008462:	9103      	str	r1, [sp, #12]
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e7f0      	b.n	800844a <__cvt+0xa6>

08008468 <__exponent>:
 8008468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846a:	4603      	mov	r3, r0
 800846c:	2900      	cmp	r1, #0
 800846e:	bfb8      	it	lt
 8008470:	4249      	neglt	r1, r1
 8008472:	f803 2b02 	strb.w	r2, [r3], #2
 8008476:	bfb4      	ite	lt
 8008478:	222d      	movlt	r2, #45	; 0x2d
 800847a:	222b      	movge	r2, #43	; 0x2b
 800847c:	2909      	cmp	r1, #9
 800847e:	7042      	strb	r2, [r0, #1]
 8008480:	dd2a      	ble.n	80084d8 <__exponent+0x70>
 8008482:	f10d 0407 	add.w	r4, sp, #7
 8008486:	46a4      	mov	ip, r4
 8008488:	270a      	movs	r7, #10
 800848a:	46a6      	mov	lr, r4
 800848c:	460a      	mov	r2, r1
 800848e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008492:	fb07 1516 	mls	r5, r7, r6, r1
 8008496:	3530      	adds	r5, #48	; 0x30
 8008498:	2a63      	cmp	r2, #99	; 0x63
 800849a:	f104 34ff 	add.w	r4, r4, #4294967295
 800849e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084a2:	4631      	mov	r1, r6
 80084a4:	dcf1      	bgt.n	800848a <__exponent+0x22>
 80084a6:	3130      	adds	r1, #48	; 0x30
 80084a8:	f1ae 0502 	sub.w	r5, lr, #2
 80084ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084b0:	1c44      	adds	r4, r0, #1
 80084b2:	4629      	mov	r1, r5
 80084b4:	4561      	cmp	r1, ip
 80084b6:	d30a      	bcc.n	80084ce <__exponent+0x66>
 80084b8:	f10d 0209 	add.w	r2, sp, #9
 80084bc:	eba2 020e 	sub.w	r2, r2, lr
 80084c0:	4565      	cmp	r5, ip
 80084c2:	bf88      	it	hi
 80084c4:	2200      	movhi	r2, #0
 80084c6:	4413      	add	r3, r2
 80084c8:	1a18      	subs	r0, r3, r0
 80084ca:	b003      	add	sp, #12
 80084cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084d6:	e7ed      	b.n	80084b4 <__exponent+0x4c>
 80084d8:	2330      	movs	r3, #48	; 0x30
 80084da:	3130      	adds	r1, #48	; 0x30
 80084dc:	7083      	strb	r3, [r0, #2]
 80084de:	70c1      	strb	r1, [r0, #3]
 80084e0:	1d03      	adds	r3, r0, #4
 80084e2:	e7f1      	b.n	80084c8 <__exponent+0x60>

080084e4 <_printf_float>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	ed2d 8b02 	vpush	{d8}
 80084ec:	b08d      	sub	sp, #52	; 0x34
 80084ee:	460c      	mov	r4, r1
 80084f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084f4:	4616      	mov	r6, r2
 80084f6:	461f      	mov	r7, r3
 80084f8:	4605      	mov	r5, r0
 80084fa:	f001 fa57 	bl	80099ac <_localeconv_r>
 80084fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008502:	4650      	mov	r0, sl
 8008504:	f7f7 fe7c 	bl	8000200 <strlen>
 8008508:	2300      	movs	r3, #0
 800850a:	930a      	str	r3, [sp, #40]	; 0x28
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	f8d8 3000 	ldr.w	r3, [r8]
 8008514:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008518:	3307      	adds	r3, #7
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	f103 0208 	add.w	r2, r3, #8
 8008522:	f8c8 2000 	str.w	r2, [r8]
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800852e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008536:	9307      	str	r3, [sp, #28]
 8008538:	f8cd 8018 	str.w	r8, [sp, #24]
 800853c:	ee08 0a10 	vmov	s16, r0
 8008540:	4b9f      	ldr	r3, [pc, #636]	; (80087c0 <_printf_float+0x2dc>)
 8008542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	f7f8 fb07 	bl	8000b5c <__aeabi_dcmpun>
 800854e:	bb88      	cbnz	r0, 80085b4 <_printf_float+0xd0>
 8008550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008554:	4b9a      	ldr	r3, [pc, #616]	; (80087c0 <_printf_float+0x2dc>)
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	f7f8 fae1 	bl	8000b20 <__aeabi_dcmple>
 800855e:	bb48      	cbnz	r0, 80085b4 <_printf_float+0xd0>
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 fad0 	bl	8000b0c <__aeabi_dcmplt>
 800856c:	b110      	cbz	r0, 8008574 <_printf_float+0x90>
 800856e:	232d      	movs	r3, #45	; 0x2d
 8008570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008574:	4b93      	ldr	r3, [pc, #588]	; (80087c4 <_printf_float+0x2e0>)
 8008576:	4894      	ldr	r0, [pc, #592]	; (80087c8 <_printf_float+0x2e4>)
 8008578:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800857c:	bf94      	ite	ls
 800857e:	4698      	movls	r8, r3
 8008580:	4680      	movhi	r8, r0
 8008582:	2303      	movs	r3, #3
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	9b05      	ldr	r3, [sp, #20]
 8008588:	f023 0204 	bic.w	r2, r3, #4
 800858c:	6022      	str	r2, [r4, #0]
 800858e:	f04f 0900 	mov.w	r9, #0
 8008592:	9700      	str	r7, [sp, #0]
 8008594:	4633      	mov	r3, r6
 8008596:	aa0b      	add	r2, sp, #44	; 0x2c
 8008598:	4621      	mov	r1, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f9d8 	bl	8008950 <_printf_common>
 80085a0:	3001      	adds	r0, #1
 80085a2:	f040 8090 	bne.w	80086c6 <_printf_float+0x1e2>
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295
 80085aa:	b00d      	add	sp, #52	; 0x34
 80085ac:	ecbd 8b02 	vpop	{d8}
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	4640      	mov	r0, r8
 80085ba:	4649      	mov	r1, r9
 80085bc:	f7f8 face 	bl	8000b5c <__aeabi_dcmpun>
 80085c0:	b140      	cbz	r0, 80085d4 <_printf_float+0xf0>
 80085c2:	464b      	mov	r3, r9
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfbc      	itt	lt
 80085c8:	232d      	movlt	r3, #45	; 0x2d
 80085ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085ce:	487f      	ldr	r0, [pc, #508]	; (80087cc <_printf_float+0x2e8>)
 80085d0:	4b7f      	ldr	r3, [pc, #508]	; (80087d0 <_printf_float+0x2ec>)
 80085d2:	e7d1      	b.n	8008578 <_printf_float+0x94>
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085da:	9206      	str	r2, [sp, #24]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	d13f      	bne.n	8008660 <_printf_float+0x17c>
 80085e0:	2306      	movs	r3, #6
 80085e2:	6063      	str	r3, [r4, #4]
 80085e4:	9b05      	ldr	r3, [sp, #20]
 80085e6:	6861      	ldr	r1, [r4, #4]
 80085e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085ec:	2300      	movs	r3, #0
 80085ee:	9303      	str	r3, [sp, #12]
 80085f0:	ab0a      	add	r3, sp, #40	; 0x28
 80085f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085f6:	ab09      	add	r3, sp, #36	; 0x24
 80085f8:	ec49 8b10 	vmov	d0, r8, r9
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff fecd 	bl	80083a4 <__cvt>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800860e:	2b47      	cmp	r3, #71	; 0x47
 8008610:	4680      	mov	r8, r0
 8008612:	d108      	bne.n	8008626 <_printf_float+0x142>
 8008614:	1cc8      	adds	r0, r1, #3
 8008616:	db02      	blt.n	800861e <_printf_float+0x13a>
 8008618:	6863      	ldr	r3, [r4, #4]
 800861a:	4299      	cmp	r1, r3
 800861c:	dd41      	ble.n	80086a2 <_printf_float+0x1be>
 800861e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008622:	fa5f fb8b 	uxtb.w	fp, fp
 8008626:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800862a:	d820      	bhi.n	800866e <_printf_float+0x18a>
 800862c:	3901      	subs	r1, #1
 800862e:	465a      	mov	r2, fp
 8008630:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008634:	9109      	str	r1, [sp, #36]	; 0x24
 8008636:	f7ff ff17 	bl	8008468 <__exponent>
 800863a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863c:	1813      	adds	r3, r2, r0
 800863e:	2a01      	cmp	r2, #1
 8008640:	4681      	mov	r9, r0
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	dc02      	bgt.n	800864c <_printf_float+0x168>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	07d2      	lsls	r2, r2, #31
 800864a:	d501      	bpl.n	8008650 <_printf_float+0x16c>
 800864c:	3301      	adds	r3, #1
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008654:	2b00      	cmp	r3, #0
 8008656:	d09c      	beq.n	8008592 <_printf_float+0xae>
 8008658:	232d      	movs	r3, #45	; 0x2d
 800865a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865e:	e798      	b.n	8008592 <_printf_float+0xae>
 8008660:	9a06      	ldr	r2, [sp, #24]
 8008662:	2a47      	cmp	r2, #71	; 0x47
 8008664:	d1be      	bne.n	80085e4 <_printf_float+0x100>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1bc      	bne.n	80085e4 <_printf_float+0x100>
 800866a:	2301      	movs	r3, #1
 800866c:	e7b9      	b.n	80085e2 <_printf_float+0xfe>
 800866e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008672:	d118      	bne.n	80086a6 <_printf_float+0x1c2>
 8008674:	2900      	cmp	r1, #0
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	dd0b      	ble.n	8008692 <_printf_float+0x1ae>
 800867a:	6121      	str	r1, [r4, #16]
 800867c:	b913      	cbnz	r3, 8008684 <_printf_float+0x1a0>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	07d0      	lsls	r0, r2, #31
 8008682:	d502      	bpl.n	800868a <_printf_float+0x1a6>
 8008684:	3301      	adds	r3, #1
 8008686:	440b      	add	r3, r1
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	65a1      	str	r1, [r4, #88]	; 0x58
 800868c:	f04f 0900 	mov.w	r9, #0
 8008690:	e7de      	b.n	8008650 <_printf_float+0x16c>
 8008692:	b913      	cbnz	r3, 800869a <_printf_float+0x1b6>
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	07d2      	lsls	r2, r2, #31
 8008698:	d501      	bpl.n	800869e <_printf_float+0x1ba>
 800869a:	3302      	adds	r3, #2
 800869c:	e7f4      	b.n	8008688 <_printf_float+0x1a4>
 800869e:	2301      	movs	r3, #1
 80086a0:	e7f2      	b.n	8008688 <_printf_float+0x1a4>
 80086a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	4299      	cmp	r1, r3
 80086aa:	db05      	blt.n	80086b8 <_printf_float+0x1d4>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	6121      	str	r1, [r4, #16]
 80086b0:	07d8      	lsls	r0, r3, #31
 80086b2:	d5ea      	bpl.n	800868a <_printf_float+0x1a6>
 80086b4:	1c4b      	adds	r3, r1, #1
 80086b6:	e7e7      	b.n	8008688 <_printf_float+0x1a4>
 80086b8:	2900      	cmp	r1, #0
 80086ba:	bfd4      	ite	le
 80086bc:	f1c1 0202 	rsble	r2, r1, #2
 80086c0:	2201      	movgt	r2, #1
 80086c2:	4413      	add	r3, r2
 80086c4:	e7e0      	b.n	8008688 <_printf_float+0x1a4>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	055a      	lsls	r2, r3, #21
 80086ca:	d407      	bmi.n	80086dc <_printf_float+0x1f8>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	4642      	mov	r2, r8
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	d12c      	bne.n	8008734 <_printf_float+0x250>
 80086da:	e764      	b.n	80085a6 <_printf_float+0xc2>
 80086dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086e0:	f240 80e0 	bls.w	80088a4 <_printf_float+0x3c0>
 80086e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	f7f8 fa04 	bl	8000af8 <__aeabi_dcmpeq>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d034      	beq.n	800875e <_printf_float+0x27a>
 80086f4:	4a37      	ldr	r2, [pc, #220]	; (80087d4 <_printf_float+0x2f0>)
 80086f6:	2301      	movs	r3, #1
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	f43f af51 	beq.w	80085a6 <_printf_float+0xc2>
 8008704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008708:	429a      	cmp	r2, r3
 800870a:	db02      	blt.n	8008712 <_printf_float+0x22e>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	07d8      	lsls	r0, r3, #31
 8008710:	d510      	bpl.n	8008734 <_printf_float+0x250>
 8008712:	ee18 3a10 	vmov	r3, s16
 8008716:	4652      	mov	r2, sl
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	f43f af41 	beq.w	80085a6 <_printf_float+0xc2>
 8008724:	f04f 0800 	mov.w	r8, #0
 8008728:	f104 091a 	add.w	r9, r4, #26
 800872c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872e:	3b01      	subs	r3, #1
 8008730:	4543      	cmp	r3, r8
 8008732:	dc09      	bgt.n	8008748 <_printf_float+0x264>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	079b      	lsls	r3, r3, #30
 8008738:	f100 8105 	bmi.w	8008946 <_printf_float+0x462>
 800873c:	68e0      	ldr	r0, [r4, #12]
 800873e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008740:	4298      	cmp	r0, r3
 8008742:	bfb8      	it	lt
 8008744:	4618      	movlt	r0, r3
 8008746:	e730      	b.n	80085aa <_printf_float+0xc6>
 8008748:	2301      	movs	r3, #1
 800874a:	464a      	mov	r2, r9
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	f43f af27 	beq.w	80085a6 <_printf_float+0xc2>
 8008758:	f108 0801 	add.w	r8, r8, #1
 800875c:	e7e6      	b.n	800872c <_printf_float+0x248>
 800875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	dc39      	bgt.n	80087d8 <_printf_float+0x2f4>
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <_printf_float+0x2f0>)
 8008766:	2301      	movs	r3, #1
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f af19 	beq.w	80085a6 <_printf_float+0xc2>
 8008774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008778:	4313      	orrs	r3, r2
 800877a:	d102      	bne.n	8008782 <_printf_float+0x29e>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d5d8      	bpl.n	8008734 <_printf_float+0x250>
 8008782:	ee18 3a10 	vmov	r3, s16
 8008786:	4652      	mov	r2, sl
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	f43f af09 	beq.w	80085a6 <_printf_float+0xc2>
 8008794:	f04f 0900 	mov.w	r9, #0
 8008798:	f104 0a1a 	add.w	sl, r4, #26
 800879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879e:	425b      	negs	r3, r3
 80087a0:	454b      	cmp	r3, r9
 80087a2:	dc01      	bgt.n	80087a8 <_printf_float+0x2c4>
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	e792      	b.n	80086ce <_printf_float+0x1ea>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4652      	mov	r2, sl
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	f43f aef7 	beq.w	80085a6 <_printf_float+0xc2>
 80087b8:	f109 0901 	add.w	r9, r9, #1
 80087bc:	e7ee      	b.n	800879c <_printf_float+0x2b8>
 80087be:	bf00      	nop
 80087c0:	7fefffff 	.word	0x7fefffff
 80087c4:	0800b1b4 	.word	0x0800b1b4
 80087c8:	0800b1b8 	.word	0x0800b1b8
 80087cc:	0800b1c0 	.word	0x0800b1c0
 80087d0:	0800b1bc 	.word	0x0800b1bc
 80087d4:	0800b1c4 	.word	0x0800b1c4
 80087d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087dc:	429a      	cmp	r2, r3
 80087de:	bfa8      	it	ge
 80087e0:	461a      	movge	r2, r3
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	4691      	mov	r9, r2
 80087e6:	dc37      	bgt.n	8008858 <_printf_float+0x374>
 80087e8:	f04f 0b00 	mov.w	fp, #0
 80087ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087f0:	f104 021a 	add.w	r2, r4, #26
 80087f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087f6:	9305      	str	r3, [sp, #20]
 80087f8:	eba3 0309 	sub.w	r3, r3, r9
 80087fc:	455b      	cmp	r3, fp
 80087fe:	dc33      	bgt.n	8008868 <_printf_float+0x384>
 8008800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008804:	429a      	cmp	r2, r3
 8008806:	db3b      	blt.n	8008880 <_printf_float+0x39c>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07da      	lsls	r2, r3, #31
 800880c:	d438      	bmi.n	8008880 <_printf_float+0x39c>
 800880e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008810:	9a05      	ldr	r2, [sp, #20]
 8008812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008814:	1a9a      	subs	r2, r3, r2
 8008816:	eba3 0901 	sub.w	r9, r3, r1
 800881a:	4591      	cmp	r9, r2
 800881c:	bfa8      	it	ge
 800881e:	4691      	movge	r9, r2
 8008820:	f1b9 0f00 	cmp.w	r9, #0
 8008824:	dc35      	bgt.n	8008892 <_printf_float+0x3ae>
 8008826:	f04f 0800 	mov.w	r8, #0
 800882a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800882e:	f104 0a1a 	add.w	sl, r4, #26
 8008832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	eba3 0309 	sub.w	r3, r3, r9
 800883c:	4543      	cmp	r3, r8
 800883e:	f77f af79 	ble.w	8008734 <_printf_float+0x250>
 8008842:	2301      	movs	r3, #1
 8008844:	4652      	mov	r2, sl
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	f43f aeaa 	beq.w	80085a6 <_printf_float+0xc2>
 8008852:	f108 0801 	add.w	r8, r8, #1
 8008856:	e7ec      	b.n	8008832 <_printf_float+0x34e>
 8008858:	4613      	mov	r3, r2
 800885a:	4631      	mov	r1, r6
 800885c:	4642      	mov	r2, r8
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	d1c0      	bne.n	80087e8 <_printf_float+0x304>
 8008866:	e69e      	b.n	80085a6 <_printf_float+0xc2>
 8008868:	2301      	movs	r3, #1
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	9205      	str	r2, [sp, #20]
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f ae97 	beq.w	80085a6 <_printf_float+0xc2>
 8008878:	9a05      	ldr	r2, [sp, #20]
 800887a:	f10b 0b01 	add.w	fp, fp, #1
 800887e:	e7b9      	b.n	80087f4 <_printf_float+0x310>
 8008880:	ee18 3a10 	vmov	r3, s16
 8008884:	4652      	mov	r2, sl
 8008886:	4631      	mov	r1, r6
 8008888:	4628      	mov	r0, r5
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	d1be      	bne.n	800880e <_printf_float+0x32a>
 8008890:	e689      	b.n	80085a6 <_printf_float+0xc2>
 8008892:	9a05      	ldr	r2, [sp, #20]
 8008894:	464b      	mov	r3, r9
 8008896:	4442      	add	r2, r8
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	d1c1      	bne.n	8008826 <_printf_float+0x342>
 80088a2:	e680      	b.n	80085a6 <_printf_float+0xc2>
 80088a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088a6:	2a01      	cmp	r2, #1
 80088a8:	dc01      	bgt.n	80088ae <_printf_float+0x3ca>
 80088aa:	07db      	lsls	r3, r3, #31
 80088ac:	d538      	bpl.n	8008920 <_printf_float+0x43c>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4642      	mov	r2, r8
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae74 	beq.w	80085a6 <_printf_float+0xc2>
 80088be:	ee18 3a10 	vmov	r3, s16
 80088c2:	4652      	mov	r2, sl
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f ae6b 	beq.w	80085a6 <_printf_float+0xc2>
 80088d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	f7f8 f90e 	bl	8000af8 <__aeabi_dcmpeq>
 80088dc:	b9d8      	cbnz	r0, 8008916 <_printf_float+0x432>
 80088de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e0:	f108 0201 	add.w	r2, r8, #1
 80088e4:	3b01      	subs	r3, #1
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	d10e      	bne.n	800890e <_printf_float+0x42a>
 80088f0:	e659      	b.n	80085a6 <_printf_float+0xc2>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4652      	mov	r2, sl
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	f43f ae52 	beq.w	80085a6 <_printf_float+0xc2>
 8008902:	f108 0801 	add.w	r8, r8, #1
 8008906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008908:	3b01      	subs	r3, #1
 800890a:	4543      	cmp	r3, r8
 800890c:	dcf1      	bgt.n	80088f2 <_printf_float+0x40e>
 800890e:	464b      	mov	r3, r9
 8008910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008914:	e6dc      	b.n	80086d0 <_printf_float+0x1ec>
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	f104 0a1a 	add.w	sl, r4, #26
 800891e:	e7f2      	b.n	8008906 <_printf_float+0x422>
 8008920:	2301      	movs	r3, #1
 8008922:	4642      	mov	r2, r8
 8008924:	e7df      	b.n	80088e6 <_printf_float+0x402>
 8008926:	2301      	movs	r3, #1
 8008928:	464a      	mov	r2, r9
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	47b8      	blx	r7
 8008930:	3001      	adds	r0, #1
 8008932:	f43f ae38 	beq.w	80085a6 <_printf_float+0xc2>
 8008936:	f108 0801 	add.w	r8, r8, #1
 800893a:	68e3      	ldr	r3, [r4, #12]
 800893c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800893e:	1a5b      	subs	r3, r3, r1
 8008940:	4543      	cmp	r3, r8
 8008942:	dcf0      	bgt.n	8008926 <_printf_float+0x442>
 8008944:	e6fa      	b.n	800873c <_printf_float+0x258>
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	f104 0919 	add.w	r9, r4, #25
 800894e:	e7f4      	b.n	800893a <_printf_float+0x456>

08008950 <_printf_common>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4616      	mov	r6, r2
 8008956:	4699      	mov	r9, r3
 8008958:	688a      	ldr	r2, [r1, #8]
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008960:	4293      	cmp	r3, r2
 8008962:	bfb8      	it	lt
 8008964:	4613      	movlt	r3, r2
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800896c:	4607      	mov	r7, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b10a      	cbz	r2, 8008976 <_printf_common+0x26>
 8008972:	3301      	adds	r3, #1
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	0699      	lsls	r1, r3, #26
 800897a:	bf42      	ittt	mi
 800897c:	6833      	ldrmi	r3, [r6, #0]
 800897e:	3302      	addmi	r3, #2
 8008980:	6033      	strmi	r3, [r6, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	f015 0506 	ands.w	r5, r5, #6
 8008988:	d106      	bne.n	8008998 <_printf_common+0x48>
 800898a:	f104 0a19 	add.w	sl, r4, #25
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	6832      	ldr	r2, [r6, #0]
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	42ab      	cmp	r3, r5
 8008996:	dc26      	bgt.n	80089e6 <_printf_common+0x96>
 8008998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800899c:	1e13      	subs	r3, r2, #0
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	bf18      	it	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	0692      	lsls	r2, r2, #26
 80089a6:	d42b      	bmi.n	8008a00 <_printf_common+0xb0>
 80089a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ac:	4649      	mov	r1, r9
 80089ae:	4638      	mov	r0, r7
 80089b0:	47c0      	blx	r8
 80089b2:	3001      	adds	r0, #1
 80089b4:	d01e      	beq.n	80089f4 <_printf_common+0xa4>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	68e5      	ldr	r5, [r4, #12]
 80089ba:	6832      	ldr	r2, [r6, #0]
 80089bc:	f003 0306 	and.w	r3, r3, #6
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	bf08      	it	eq
 80089c4:	1aad      	subeq	r5, r5, r2
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	6922      	ldr	r2, [r4, #16]
 80089ca:	bf0c      	ite	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	2500      	movne	r5, #0
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bfc4      	itt	gt
 80089d6:	1a9b      	subgt	r3, r3, r2
 80089d8:	18ed      	addgt	r5, r5, r3
 80089da:	2600      	movs	r6, #0
 80089dc:	341a      	adds	r4, #26
 80089de:	42b5      	cmp	r5, r6
 80089e0:	d11a      	bne.n	8008a18 <_printf_common+0xc8>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e008      	b.n	80089f8 <_printf_common+0xa8>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	4649      	mov	r1, r9
 80089ec:	4638      	mov	r0, r7
 80089ee:	47c0      	blx	r8
 80089f0:	3001      	adds	r0, #1
 80089f2:	d103      	bne.n	80089fc <_printf_common+0xac>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	3501      	adds	r5, #1
 80089fe:	e7c6      	b.n	800898e <_printf_common+0x3e>
 8008a00:	18e1      	adds	r1, r4, r3
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	2030      	movs	r0, #48	; 0x30
 8008a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a0a:	4422      	add	r2, r4
 8008a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a14:	3302      	adds	r3, #2
 8008a16:	e7c7      	b.n	80089a8 <_printf_common+0x58>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c0      	blx	r8
 8008a22:	3001      	adds	r0, #1
 8008a24:	d0e6      	beq.n	80089f4 <_printf_common+0xa4>
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7d9      	b.n	80089de <_printf_common+0x8e>
	...

08008a2c <_printf_i>:
 8008a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	7e0f      	ldrb	r7, [r1, #24]
 8008a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a34:	2f78      	cmp	r7, #120	; 0x78
 8008a36:	4691      	mov	r9, r2
 8008a38:	4680      	mov	r8, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a42:	d807      	bhi.n	8008a54 <_printf_i+0x28>
 8008a44:	2f62      	cmp	r7, #98	; 0x62
 8008a46:	d80a      	bhi.n	8008a5e <_printf_i+0x32>
 8008a48:	2f00      	cmp	r7, #0
 8008a4a:	f000 80d8 	beq.w	8008bfe <_printf_i+0x1d2>
 8008a4e:	2f58      	cmp	r7, #88	; 0x58
 8008a50:	f000 80a3 	beq.w	8008b9a <_printf_i+0x16e>
 8008a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a5c:	e03a      	b.n	8008ad4 <_printf_i+0xa8>
 8008a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a62:	2b15      	cmp	r3, #21
 8008a64:	d8f6      	bhi.n	8008a54 <_printf_i+0x28>
 8008a66:	a101      	add	r1, pc, #4	; (adr r1, 8008a6c <_printf_i+0x40>)
 8008a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008a55 	.word	0x08008a55
 8008a78:	08008a55 	.word	0x08008a55
 8008a7c:	08008a55 	.word	0x08008a55
 8008a80:	08008a55 	.word	0x08008a55
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008a55 	.word	0x08008a55
 8008a8c:	08008a55 	.word	0x08008a55
 8008a90:	08008a55 	.word	0x08008a55
 8008a94:	08008a55 	.word	0x08008a55
 8008a98:	08008be5 	.word	0x08008be5
 8008a9c:	08008b09 	.word	0x08008b09
 8008aa0:	08008bc7 	.word	0x08008bc7
 8008aa4:	08008a55 	.word	0x08008a55
 8008aa8:	08008a55 	.word	0x08008a55
 8008aac:	08008c07 	.word	0x08008c07
 8008ab0:	08008a55 	.word	0x08008a55
 8008ab4:	08008b09 	.word	0x08008b09
 8008ab8:	08008a55 	.word	0x08008a55
 8008abc:	08008a55 	.word	0x08008a55
 8008ac0:	08008bcf 	.word	0x08008bcf
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	602a      	str	r2, [r5, #0]
 8008acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0a3      	b.n	8008c20 <_printf_i+0x1f4>
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	6829      	ldr	r1, [r5, #0]
 8008adc:	0606      	lsls	r6, r0, #24
 8008ade:	f101 0304 	add.w	r3, r1, #4
 8008ae2:	d50a      	bpl.n	8008afa <_printf_i+0xce>
 8008ae4:	680e      	ldr	r6, [r1, #0]
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	2e00      	cmp	r6, #0
 8008aea:	da03      	bge.n	8008af4 <_printf_i+0xc8>
 8008aec:	232d      	movs	r3, #45	; 0x2d
 8008aee:	4276      	negs	r6, r6
 8008af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af4:	485e      	ldr	r0, [pc, #376]	; (8008c70 <_printf_i+0x244>)
 8008af6:	230a      	movs	r3, #10
 8008af8:	e019      	b.n	8008b2e <_printf_i+0x102>
 8008afa:	680e      	ldr	r6, [r1, #0]
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b02:	bf18      	it	ne
 8008b04:	b236      	sxthne	r6, r6
 8008b06:	e7ef      	b.n	8008ae8 <_printf_i+0xbc>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	1d19      	adds	r1, r3, #4
 8008b0e:	6029      	str	r1, [r5, #0]
 8008b10:	0601      	lsls	r1, r0, #24
 8008b12:	d501      	bpl.n	8008b18 <_printf_i+0xec>
 8008b14:	681e      	ldr	r6, [r3, #0]
 8008b16:	e002      	b.n	8008b1e <_printf_i+0xf2>
 8008b18:	0646      	lsls	r6, r0, #25
 8008b1a:	d5fb      	bpl.n	8008b14 <_printf_i+0xe8>
 8008b1c:	881e      	ldrh	r6, [r3, #0]
 8008b1e:	4854      	ldr	r0, [pc, #336]	; (8008c70 <_printf_i+0x244>)
 8008b20:	2f6f      	cmp	r7, #111	; 0x6f
 8008b22:	bf0c      	ite	eq
 8008b24:	2308      	moveq	r3, #8
 8008b26:	230a      	movne	r3, #10
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b2e:	6865      	ldr	r5, [r4, #4]
 8008b30:	60a5      	str	r5, [r4, #8]
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	bfa2      	ittt	ge
 8008b36:	6821      	ldrge	r1, [r4, #0]
 8008b38:	f021 0104 	bicge.w	r1, r1, #4
 8008b3c:	6021      	strge	r1, [r4, #0]
 8008b3e:	b90e      	cbnz	r6, 8008b44 <_printf_i+0x118>
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	d04d      	beq.n	8008be0 <_printf_i+0x1b4>
 8008b44:	4615      	mov	r5, r2
 8008b46:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b4a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b4e:	5dc7      	ldrb	r7, [r0, r7]
 8008b50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b54:	4637      	mov	r7, r6
 8008b56:	42bb      	cmp	r3, r7
 8008b58:	460e      	mov	r6, r1
 8008b5a:	d9f4      	bls.n	8008b46 <_printf_i+0x11a>
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d10b      	bne.n	8008b78 <_printf_i+0x14c>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	07de      	lsls	r6, r3, #31
 8008b64:	d508      	bpl.n	8008b78 <_printf_i+0x14c>
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	6861      	ldr	r1, [r4, #4]
 8008b6a:	4299      	cmp	r1, r3
 8008b6c:	bfde      	ittt	le
 8008b6e:	2330      	movle	r3, #48	; 0x30
 8008b70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b78:	1b52      	subs	r2, r2, r5
 8008b7a:	6122      	str	r2, [r4, #16]
 8008b7c:	f8cd a000 	str.w	sl, [sp]
 8008b80:	464b      	mov	r3, r9
 8008b82:	aa03      	add	r2, sp, #12
 8008b84:	4621      	mov	r1, r4
 8008b86:	4640      	mov	r0, r8
 8008b88:	f7ff fee2 	bl	8008950 <_printf_common>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d14c      	bne.n	8008c2a <_printf_i+0x1fe>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b004      	add	sp, #16
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	4835      	ldr	r0, [pc, #212]	; (8008c70 <_printf_i+0x244>)
 8008b9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ba0:	6829      	ldr	r1, [r5, #0]
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ba8:	6029      	str	r1, [r5, #0]
 8008baa:	061d      	lsls	r5, r3, #24
 8008bac:	d514      	bpl.n	8008bd8 <_printf_i+0x1ac>
 8008bae:	07df      	lsls	r7, r3, #31
 8008bb0:	bf44      	itt	mi
 8008bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008bb6:	6023      	strmi	r3, [r4, #0]
 8008bb8:	b91e      	cbnz	r6, 8008bc2 <_printf_i+0x196>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f023 0320 	bic.w	r3, r3, #32
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	e7b0      	b.n	8008b28 <_printf_i+0xfc>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f043 0320 	orr.w	r3, r3, #32
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	2378      	movs	r3, #120	; 0x78
 8008bd0:	4828      	ldr	r0, [pc, #160]	; (8008c74 <_printf_i+0x248>)
 8008bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bd6:	e7e3      	b.n	8008ba0 <_printf_i+0x174>
 8008bd8:	0659      	lsls	r1, r3, #25
 8008bda:	bf48      	it	mi
 8008bdc:	b2b6      	uxthmi	r6, r6
 8008bde:	e7e6      	b.n	8008bae <_printf_i+0x182>
 8008be0:	4615      	mov	r5, r2
 8008be2:	e7bb      	b.n	8008b5c <_printf_i+0x130>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6826      	ldr	r6, [r4, #0]
 8008be8:	6961      	ldr	r1, [r4, #20]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6028      	str	r0, [r5, #0]
 8008bee:	0635      	lsls	r5, r6, #24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	d501      	bpl.n	8008bf8 <_printf_i+0x1cc>
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <_printf_i+0x1d2>
 8008bf8:	0670      	lsls	r0, r6, #25
 8008bfa:	d5fb      	bpl.n	8008bf4 <_printf_i+0x1c8>
 8008bfc:	8019      	strh	r1, [r3, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	4615      	mov	r5, r2
 8008c04:	e7ba      	b.n	8008b7c <_printf_i+0x150>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	602a      	str	r2, [r5, #0]
 8008c0c:	681d      	ldr	r5, [r3, #0]
 8008c0e:	6862      	ldr	r2, [r4, #4]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f7 fafc 	bl	8000210 <memchr>
 8008c18:	b108      	cbz	r0, 8008c1e <_printf_i+0x1f2>
 8008c1a:	1b40      	subs	r0, r0, r5
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	e7a8      	b.n	8008b7c <_printf_i+0x150>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0ab      	beq.n	8008b90 <_printf_i+0x164>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	079b      	lsls	r3, r3, #30
 8008c3c:	d413      	bmi.n	8008c66 <_printf_i+0x23a>
 8008c3e:	68e0      	ldr	r0, [r4, #12]
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bfb8      	it	lt
 8008c46:	4618      	movlt	r0, r3
 8008c48:	e7a4      	b.n	8008b94 <_printf_i+0x168>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d09b      	beq.n	8008b90 <_printf_i+0x164>
 8008c58:	3501      	adds	r5, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dcf2      	bgt.n	8008c4a <_printf_i+0x21e>
 8008c64:	e7eb      	b.n	8008c3e <_printf_i+0x212>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f104 0619 	add.w	r6, r4, #25
 8008c6c:	e7f5      	b.n	8008c5a <_printf_i+0x22e>
 8008c6e:	bf00      	nop
 8008c70:	0800b1c6 	.word	0x0800b1c6
 8008c74:	0800b1d7 	.word	0x0800b1d7

08008c78 <siprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b500      	push	{lr}
 8008c7c:	b09c      	sub	sp, #112	; 0x70
 8008c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c80:	9002      	str	r0, [sp, #8]
 8008c82:	9006      	str	r0, [sp, #24]
 8008c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c88:	4809      	ldr	r0, [pc, #36]	; (8008cb0 <siprintf+0x38>)
 8008c8a:	9107      	str	r1, [sp, #28]
 8008c8c:	9104      	str	r1, [sp, #16]
 8008c8e:	4909      	ldr	r1, [pc, #36]	; (8008cb4 <siprintf+0x3c>)
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	6800      	ldr	r0, [r0, #0]
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	a902      	add	r1, sp, #8
 8008c9c:	f001 fb76 	bl	800a38c <_svfiprintf_r>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	b01c      	add	sp, #112	; 0x70
 8008ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cac:	b003      	add	sp, #12
 8008cae:	4770      	bx	lr
 8008cb0:	2000000c 	.word	0x2000000c
 8008cb4:	ffff0208 	.word	0xffff0208

08008cb8 <quorem>:
 8008cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	6903      	ldr	r3, [r0, #16]
 8008cbe:	690c      	ldr	r4, [r1, #16]
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	f2c0 8081 	blt.w	8008dca <quorem+0x112>
 8008cc8:	3c01      	subs	r4, #1
 8008cca:	f101 0814 	add.w	r8, r1, #20
 8008cce:	f100 0514 	add.w	r5, r0, #20
 8008cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cf0:	d331      	bcc.n	8008d56 <quorem+0x9e>
 8008cf2:	f04f 0e00 	mov.w	lr, #0
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	46ac      	mov	ip, r5
 8008cfa:	46f2      	mov	sl, lr
 8008cfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d00:	b293      	uxth	r3, r2
 8008d02:	fb06 e303 	mla	r3, r6, r3, lr
 8008d06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d10:	f8dc a000 	ldr.w	sl, [ip]
 8008d14:	0c12      	lsrs	r2, r2, #16
 8008d16:	fa13 f38a 	uxtah	r3, r3, sl
 8008d1a:	fb06 e202 	mla	r2, r6, r2, lr
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	9b00      	ldr	r3, [sp, #0]
 8008d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d26:	b292      	uxth	r2, r2
 8008d28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d30:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d34:	4581      	cmp	r9, r0
 8008d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d3a:	f84c 3b04 	str.w	r3, [ip], #4
 8008d3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d42:	d2db      	bcs.n	8008cfc <quorem+0x44>
 8008d44:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d48:	b92b      	cbnz	r3, 8008d56 <quorem+0x9e>
 8008d4a:	9b01      	ldr	r3, [sp, #4]
 8008d4c:	3b04      	subs	r3, #4
 8008d4e:	429d      	cmp	r5, r3
 8008d50:	461a      	mov	r2, r3
 8008d52:	d32e      	bcc.n	8008db2 <quorem+0xfa>
 8008d54:	613c      	str	r4, [r7, #16]
 8008d56:	4638      	mov	r0, r7
 8008d58:	f001 f8c4 	bl	8009ee4 <__mcmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	db24      	blt.n	8008daa <quorem+0xf2>
 8008d60:	3601      	adds	r6, #1
 8008d62:	4628      	mov	r0, r5
 8008d64:	f04f 0c00 	mov.w	ip, #0
 8008d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d6c:	f8d0 e000 	ldr.w	lr, [r0]
 8008d70:	b293      	uxth	r3, r2
 8008d72:	ebac 0303 	sub.w	r3, ip, r3
 8008d76:	0c12      	lsrs	r2, r2, #16
 8008d78:	fa13 f38e 	uxtah	r3, r3, lr
 8008d7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d8a:	45c1      	cmp	r9, r8
 8008d8c:	f840 3b04 	str.w	r3, [r0], #4
 8008d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d94:	d2e8      	bcs.n	8008d68 <quorem+0xb0>
 8008d96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d9e:	b922      	cbnz	r2, 8008daa <quorem+0xf2>
 8008da0:	3b04      	subs	r3, #4
 8008da2:	429d      	cmp	r5, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	d30a      	bcc.n	8008dbe <quorem+0x106>
 8008da8:	613c      	str	r4, [r7, #16]
 8008daa:	4630      	mov	r0, r6
 8008dac:	b003      	add	sp, #12
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	6812      	ldr	r2, [r2, #0]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	2a00      	cmp	r2, #0
 8008db8:	d1cc      	bne.n	8008d54 <quorem+0x9c>
 8008dba:	3c01      	subs	r4, #1
 8008dbc:	e7c7      	b.n	8008d4e <quorem+0x96>
 8008dbe:	6812      	ldr	r2, [r2, #0]
 8008dc0:	3b04      	subs	r3, #4
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	d1f0      	bne.n	8008da8 <quorem+0xf0>
 8008dc6:	3c01      	subs	r4, #1
 8008dc8:	e7eb      	b.n	8008da2 <quorem+0xea>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	e7ee      	b.n	8008dac <quorem+0xf4>
	...

08008dd0 <_dtoa_r>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	ed2d 8b04 	vpush	{d8-d9}
 8008dd8:	ec57 6b10 	vmov	r6, r7, d0
 8008ddc:	b093      	sub	sp, #76	; 0x4c
 8008dde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008de0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008de4:	9106      	str	r1, [sp, #24]
 8008de6:	ee10 aa10 	vmov	sl, s0
 8008dea:	4604      	mov	r4, r0
 8008dec:	9209      	str	r2, [sp, #36]	; 0x24
 8008dee:	930c      	str	r3, [sp, #48]	; 0x30
 8008df0:	46bb      	mov	fp, r7
 8008df2:	b975      	cbnz	r5, 8008e12 <_dtoa_r+0x42>
 8008df4:	2010      	movs	r0, #16
 8008df6:	f000 fddd 	bl	80099b4 <malloc>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8008dfe:	b920      	cbnz	r0, 8008e0a <_dtoa_r+0x3a>
 8008e00:	4ba7      	ldr	r3, [pc, #668]	; (80090a0 <_dtoa_r+0x2d0>)
 8008e02:	21ea      	movs	r1, #234	; 0xea
 8008e04:	48a7      	ldr	r0, [pc, #668]	; (80090a4 <_dtoa_r+0x2d4>)
 8008e06:	f001 fbd1 	bl	800a5ac <__assert_func>
 8008e0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e0e:	6005      	str	r5, [r0, #0]
 8008e10:	60c5      	str	r5, [r0, #12]
 8008e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e14:	6819      	ldr	r1, [r3, #0]
 8008e16:	b151      	cbz	r1, 8008e2e <_dtoa_r+0x5e>
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	604a      	str	r2, [r1, #4]
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4093      	lsls	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 fe1c 	bl	8009a60 <_Bfree>
 8008e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	1e3b      	subs	r3, r7, #0
 8008e30:	bfaa      	itet	ge
 8008e32:	2300      	movge	r3, #0
 8008e34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e38:	f8c8 3000 	strge.w	r3, [r8]
 8008e3c:	4b9a      	ldr	r3, [pc, #616]	; (80090a8 <_dtoa_r+0x2d8>)
 8008e3e:	bfbc      	itt	lt
 8008e40:	2201      	movlt	r2, #1
 8008e42:	f8c8 2000 	strlt.w	r2, [r8]
 8008e46:	ea33 030b 	bics.w	r3, r3, fp
 8008e4a:	d11b      	bne.n	8008e84 <_dtoa_r+0xb4>
 8008e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e58:	4333      	orrs	r3, r6
 8008e5a:	f000 8592 	beq.w	8009982 <_dtoa_r+0xbb2>
 8008e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e60:	b963      	cbnz	r3, 8008e7c <_dtoa_r+0xac>
 8008e62:	4b92      	ldr	r3, [pc, #584]	; (80090ac <_dtoa_r+0x2dc>)
 8008e64:	e022      	b.n	8008eac <_dtoa_r+0xdc>
 8008e66:	4b92      	ldr	r3, [pc, #584]	; (80090b0 <_dtoa_r+0x2e0>)
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	9801      	ldr	r0, [sp, #4]
 8008e72:	b013      	add	sp, #76	; 0x4c
 8008e74:	ecbd 8b04 	vpop	{d8-d9}
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	4b8b      	ldr	r3, [pc, #556]	; (80090ac <_dtoa_r+0x2dc>)
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	3303      	adds	r3, #3
 8008e82:	e7f3      	b.n	8008e6c <_dtoa_r+0x9c>
 8008e84:	2200      	movs	r2, #0
 8008e86:	2300      	movs	r3, #0
 8008e88:	4650      	mov	r0, sl
 8008e8a:	4659      	mov	r1, fp
 8008e8c:	f7f7 fe34 	bl	8000af8 <__aeabi_dcmpeq>
 8008e90:	ec4b ab19 	vmov	d9, sl, fp
 8008e94:	4680      	mov	r8, r0
 8008e96:	b158      	cbz	r0, 8008eb0 <_dtoa_r+0xe0>
 8008e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 856b 	beq.w	800997c <_dtoa_r+0xbac>
 8008ea6:	4883      	ldr	r0, [pc, #524]	; (80090b4 <_dtoa_r+0x2e4>)
 8008ea8:	6018      	str	r0, [r3, #0]
 8008eaa:	1e43      	subs	r3, r0, #1
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	e7df      	b.n	8008e70 <_dtoa_r+0xa0>
 8008eb0:	ec4b ab10 	vmov	d0, sl, fp
 8008eb4:	aa10      	add	r2, sp, #64	; 0x40
 8008eb6:	a911      	add	r1, sp, #68	; 0x44
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f001 f8b9 	bl	800a030 <__d2b>
 8008ebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ec2:	ee08 0a10 	vmov	s16, r0
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	f000 8084 	beq.w	8008fd4 <_dtoa_r+0x204>
 8008ecc:	ee19 3a90 	vmov	r3, s19
 8008ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ed8:	4656      	mov	r6, sl
 8008eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ee6:	4b74      	ldr	r3, [pc, #464]	; (80090b8 <_dtoa_r+0x2e8>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4630      	mov	r0, r6
 8008eec:	4639      	mov	r1, r7
 8008eee:	f7f7 f9e3 	bl	80002b8 <__aeabi_dsub>
 8008ef2:	a365      	add	r3, pc, #404	; (adr r3, 8009088 <_dtoa_r+0x2b8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 fb96 	bl	8000628 <__aeabi_dmul>
 8008efc:	a364      	add	r3, pc, #400	; (adr r3, 8009090 <_dtoa_r+0x2c0>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 f9db 	bl	80002bc <__adddf3>
 8008f06:	4606      	mov	r6, r0
 8008f08:	4628      	mov	r0, r5
 8008f0a:	460f      	mov	r7, r1
 8008f0c:	f7f7 fb22 	bl	8000554 <__aeabi_i2d>
 8008f10:	a361      	add	r3, pc, #388	; (adr r3, 8009098 <_dtoa_r+0x2c8>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fb87 	bl	8000628 <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 f9cb 	bl	80002bc <__adddf3>
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	f7f7 fe2d 	bl	8000b88 <__aeabi_d2iz>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	9000      	str	r0, [sp, #0]
 8008f32:	2300      	movs	r3, #0
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 fde8 	bl	8000b0c <__aeabi_dcmplt>
 8008f3c:	b150      	cbz	r0, 8008f54 <_dtoa_r+0x184>
 8008f3e:	9800      	ldr	r0, [sp, #0]
 8008f40:	f7f7 fb08 	bl	8000554 <__aeabi_i2d>
 8008f44:	4632      	mov	r2, r6
 8008f46:	463b      	mov	r3, r7
 8008f48:	f7f7 fdd6 	bl	8000af8 <__aeabi_dcmpeq>
 8008f4c:	b910      	cbnz	r0, 8008f54 <_dtoa_r+0x184>
 8008f4e:	9b00      	ldr	r3, [sp, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	2b16      	cmp	r3, #22
 8008f58:	d85a      	bhi.n	8009010 <_dtoa_r+0x240>
 8008f5a:	9a00      	ldr	r2, [sp, #0]
 8008f5c:	4b57      	ldr	r3, [pc, #348]	; (80090bc <_dtoa_r+0x2ec>)
 8008f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	ec51 0b19 	vmov	r0, r1, d9
 8008f6a:	f7f7 fdcf 	bl	8000b0c <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d050      	beq.n	8009014 <_dtoa_r+0x244>
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f7e:	1b5d      	subs	r5, r3, r5
 8008f80:	1e6b      	subs	r3, r5, #1
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	bf45      	ittet	mi
 8008f86:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f8a:	9304      	strmi	r3, [sp, #16]
 8008f8c:	2300      	movpl	r3, #0
 8008f8e:	2300      	movmi	r3, #0
 8008f90:	bf4c      	ite	mi
 8008f92:	9305      	strmi	r3, [sp, #20]
 8008f94:	9304      	strpl	r3, [sp, #16]
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	db3d      	blt.n	8009018 <_dtoa_r+0x248>
 8008f9c:	9b05      	ldr	r3, [sp, #20]
 8008f9e:	9a00      	ldr	r2, [sp, #0]
 8008fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8008fa2:	4413      	add	r3, r2
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	9307      	str	r3, [sp, #28]
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	f200 8089 	bhi.w	80090c4 <_dtoa_r+0x2f4>
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	bfc4      	itt	gt
 8008fb6:	3b04      	subgt	r3, #4
 8008fb8:	9306      	strgt	r3, [sp, #24]
 8008fba:	9b06      	ldr	r3, [sp, #24]
 8008fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8008fc0:	bfcc      	ite	gt
 8008fc2:	2500      	movgt	r5, #0
 8008fc4:	2501      	movle	r5, #1
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	f200 8087 	bhi.w	80090da <_dtoa_r+0x30a>
 8008fcc:	e8df f003 	tbb	[pc, r3]
 8008fd0:	59383a2d 	.word	0x59383a2d
 8008fd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fd8:	441d      	add	r5, r3
 8008fda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	bfc1      	itttt	gt
 8008fe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fea:	fa0b f303 	lslgt.w	r3, fp, r3
 8008fee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ff2:	bfda      	itte	le
 8008ff4:	f1c3 0320 	rsble	r3, r3, #32
 8008ff8:	fa06 f003 	lslle.w	r0, r6, r3
 8008ffc:	4318      	orrgt	r0, r3
 8008ffe:	f7f7 fa99 	bl	8000534 <__aeabi_ui2d>
 8009002:	2301      	movs	r3, #1
 8009004:	4606      	mov	r6, r0
 8009006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800900a:	3d01      	subs	r5, #1
 800900c:	930e      	str	r3, [sp, #56]	; 0x38
 800900e:	e76a      	b.n	8008ee6 <_dtoa_r+0x116>
 8009010:	2301      	movs	r3, #1
 8009012:	e7b2      	b.n	8008f7a <_dtoa_r+0x1aa>
 8009014:	900b      	str	r0, [sp, #44]	; 0x2c
 8009016:	e7b1      	b.n	8008f7c <_dtoa_r+0x1ac>
 8009018:	9b04      	ldr	r3, [sp, #16]
 800901a:	9a00      	ldr	r2, [sp, #0]
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	9304      	str	r3, [sp, #16]
 8009020:	4253      	negs	r3, r2
 8009022:	9307      	str	r3, [sp, #28]
 8009024:	2300      	movs	r3, #0
 8009026:	930a      	str	r3, [sp, #40]	; 0x28
 8009028:	e7bf      	b.n	8008faa <_dtoa_r+0x1da>
 800902a:	2300      	movs	r3, #0
 800902c:	9308      	str	r3, [sp, #32]
 800902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc55      	bgt.n	80090e0 <_dtoa_r+0x310>
 8009034:	2301      	movs	r3, #1
 8009036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800903a:	461a      	mov	r2, r3
 800903c:	9209      	str	r2, [sp, #36]	; 0x24
 800903e:	e00c      	b.n	800905a <_dtoa_r+0x28a>
 8009040:	2301      	movs	r3, #1
 8009042:	e7f3      	b.n	800902c <_dtoa_r+0x25c>
 8009044:	2300      	movs	r3, #0
 8009046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009048:	9308      	str	r3, [sp, #32]
 800904a:	9b00      	ldr	r3, [sp, #0]
 800904c:	4413      	add	r3, r2
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	3301      	adds	r3, #1
 8009052:	2b01      	cmp	r3, #1
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	bfb8      	it	lt
 8009058:	2301      	movlt	r3, #1
 800905a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800905c:	2200      	movs	r2, #0
 800905e:	6042      	str	r2, [r0, #4]
 8009060:	2204      	movs	r2, #4
 8009062:	f102 0614 	add.w	r6, r2, #20
 8009066:	429e      	cmp	r6, r3
 8009068:	6841      	ldr	r1, [r0, #4]
 800906a:	d93d      	bls.n	80090e8 <_dtoa_r+0x318>
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fcb7 	bl	80099e0 <_Balloc>
 8009072:	9001      	str	r0, [sp, #4]
 8009074:	2800      	cmp	r0, #0
 8009076:	d13b      	bne.n	80090f0 <_dtoa_r+0x320>
 8009078:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <_dtoa_r+0x2f0>)
 800907a:	4602      	mov	r2, r0
 800907c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009080:	e6c0      	b.n	8008e04 <_dtoa_r+0x34>
 8009082:	2301      	movs	r3, #1
 8009084:	e7df      	b.n	8009046 <_dtoa_r+0x276>
 8009086:	bf00      	nop
 8009088:	636f4361 	.word	0x636f4361
 800908c:	3fd287a7 	.word	0x3fd287a7
 8009090:	8b60c8b3 	.word	0x8b60c8b3
 8009094:	3fc68a28 	.word	0x3fc68a28
 8009098:	509f79fb 	.word	0x509f79fb
 800909c:	3fd34413 	.word	0x3fd34413
 80090a0:	0800b1f5 	.word	0x0800b1f5
 80090a4:	0800b20c 	.word	0x0800b20c
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	0800b1f1 	.word	0x0800b1f1
 80090b0:	0800b1e8 	.word	0x0800b1e8
 80090b4:	0800b1c5 	.word	0x0800b1c5
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	0800b300 	.word	0x0800b300
 80090c0:	0800b267 	.word	0x0800b267
 80090c4:	2501      	movs	r5, #1
 80090c6:	2300      	movs	r3, #0
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	9508      	str	r5, [sp, #32]
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295
 80090d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2312      	movs	r3, #18
 80090d8:	e7b0      	b.n	800903c <_dtoa_r+0x26c>
 80090da:	2301      	movs	r3, #1
 80090dc:	9308      	str	r3, [sp, #32]
 80090de:	e7f5      	b.n	80090cc <_dtoa_r+0x2fc>
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090e6:	e7b8      	b.n	800905a <_dtoa_r+0x28a>
 80090e8:	3101      	adds	r1, #1
 80090ea:	6041      	str	r1, [r0, #4]
 80090ec:	0052      	lsls	r2, r2, #1
 80090ee:	e7b8      	b.n	8009062 <_dtoa_r+0x292>
 80090f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	2b0e      	cmp	r3, #14
 80090fa:	f200 809d 	bhi.w	8009238 <_dtoa_r+0x468>
 80090fe:	2d00      	cmp	r5, #0
 8009100:	f000 809a 	beq.w	8009238 <_dtoa_r+0x468>
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd32      	ble.n	8009170 <_dtoa_r+0x3a0>
 800910a:	4ab7      	ldr	r2, [pc, #732]	; (80093e8 <_dtoa_r+0x618>)
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	05d8      	lsls	r0, r3, #23
 800911c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009120:	d516      	bpl.n	8009150 <_dtoa_r+0x380>
 8009122:	4bb2      	ldr	r3, [pc, #712]	; (80093ec <_dtoa_r+0x61c>)
 8009124:	ec51 0b19 	vmov	r0, r1, d9
 8009128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800912c:	f7f7 fba6 	bl	800087c <__aeabi_ddiv>
 8009130:	f007 070f 	and.w	r7, r7, #15
 8009134:	4682      	mov	sl, r0
 8009136:	468b      	mov	fp, r1
 8009138:	2503      	movs	r5, #3
 800913a:	4eac      	ldr	r6, [pc, #688]	; (80093ec <_dtoa_r+0x61c>)
 800913c:	b957      	cbnz	r7, 8009154 <_dtoa_r+0x384>
 800913e:	4642      	mov	r2, r8
 8009140:	464b      	mov	r3, r9
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	f7f7 fb99 	bl	800087c <__aeabi_ddiv>
 800914a:	4682      	mov	sl, r0
 800914c:	468b      	mov	fp, r1
 800914e:	e028      	b.n	80091a2 <_dtoa_r+0x3d2>
 8009150:	2502      	movs	r5, #2
 8009152:	e7f2      	b.n	800913a <_dtoa_r+0x36a>
 8009154:	07f9      	lsls	r1, r7, #31
 8009156:	d508      	bpl.n	800916a <_dtoa_r+0x39a>
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009160:	f7f7 fa62 	bl	8000628 <__aeabi_dmul>
 8009164:	3501      	adds	r5, #1
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	107f      	asrs	r7, r7, #1
 800916c:	3608      	adds	r6, #8
 800916e:	e7e5      	b.n	800913c <_dtoa_r+0x36c>
 8009170:	f000 809b 	beq.w	80092aa <_dtoa_r+0x4da>
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	4f9d      	ldr	r7, [pc, #628]	; (80093ec <_dtoa_r+0x61c>)
 8009178:	425e      	negs	r6, r3
 800917a:	4b9b      	ldr	r3, [pc, #620]	; (80093e8 <_dtoa_r+0x618>)
 800917c:	f006 020f 	and.w	r2, r6, #15
 8009180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	ec51 0b19 	vmov	r0, r1, d9
 800918c:	f7f7 fa4c 	bl	8000628 <__aeabi_dmul>
 8009190:	1136      	asrs	r6, r6, #4
 8009192:	4682      	mov	sl, r0
 8009194:	468b      	mov	fp, r1
 8009196:	2300      	movs	r3, #0
 8009198:	2502      	movs	r5, #2
 800919a:	2e00      	cmp	r6, #0
 800919c:	d17a      	bne.n	8009294 <_dtoa_r+0x4c4>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1d3      	bne.n	800914a <_dtoa_r+0x37a>
 80091a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8082 	beq.w	80092ae <_dtoa_r+0x4de>
 80091aa:	4b91      	ldr	r3, [pc, #580]	; (80093f0 <_dtoa_r+0x620>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	4650      	mov	r0, sl
 80091b0:	4659      	mov	r1, fp
 80091b2:	f7f7 fcab 	bl	8000b0c <__aeabi_dcmplt>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d079      	beq.n	80092ae <_dtoa_r+0x4de>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d076      	beq.n	80092ae <_dtoa_r+0x4de>
 80091c0:	9b02      	ldr	r3, [sp, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dd36      	ble.n	8009234 <_dtoa_r+0x464>
 80091c6:	9b00      	ldr	r3, [sp, #0]
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	1e5f      	subs	r7, r3, #1
 80091ce:	2200      	movs	r2, #0
 80091d0:	4b88      	ldr	r3, [pc, #544]	; (80093f4 <_dtoa_r+0x624>)
 80091d2:	f7f7 fa29 	bl	8000628 <__aeabi_dmul>
 80091d6:	9e02      	ldr	r6, [sp, #8]
 80091d8:	4682      	mov	sl, r0
 80091da:	468b      	mov	fp, r1
 80091dc:	3501      	adds	r5, #1
 80091de:	4628      	mov	r0, r5
 80091e0:	f7f7 f9b8 	bl	8000554 <__aeabi_i2d>
 80091e4:	4652      	mov	r2, sl
 80091e6:	465b      	mov	r3, fp
 80091e8:	f7f7 fa1e 	bl	8000628 <__aeabi_dmul>
 80091ec:	4b82      	ldr	r3, [pc, #520]	; (80093f8 <_dtoa_r+0x628>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	f7f7 f864 	bl	80002bc <__adddf3>
 80091f4:	46d0      	mov	r8, sl
 80091f6:	46d9      	mov	r9, fp
 80091f8:	4682      	mov	sl, r0
 80091fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d158      	bne.n	80092b4 <_dtoa_r+0x4e4>
 8009202:	4b7e      	ldr	r3, [pc, #504]	; (80093fc <_dtoa_r+0x62c>)
 8009204:	2200      	movs	r2, #0
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	f7f7 f855 	bl	80002b8 <__aeabi_dsub>
 800920e:	4652      	mov	r2, sl
 8009210:	465b      	mov	r3, fp
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	f7f7 fc97 	bl	8000b48 <__aeabi_dcmpgt>
 800921a:	2800      	cmp	r0, #0
 800921c:	f040 8295 	bne.w	800974a <_dtoa_r+0x97a>
 8009220:	4652      	mov	r2, sl
 8009222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f040 8289 	bne.w	8009746 <_dtoa_r+0x976>
 8009234:	ec5b ab19 	vmov	sl, fp, d9
 8009238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800923a:	2b00      	cmp	r3, #0
 800923c:	f2c0 8148 	blt.w	80094d0 <_dtoa_r+0x700>
 8009240:	9a00      	ldr	r2, [sp, #0]
 8009242:	2a0e      	cmp	r2, #14
 8009244:	f300 8144 	bgt.w	80094d0 <_dtoa_r+0x700>
 8009248:	4b67      	ldr	r3, [pc, #412]	; (80093e8 <_dtoa_r+0x618>)
 800924a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800924e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	f280 80d5 	bge.w	8009404 <_dtoa_r+0x634>
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f300 80d1 	bgt.w	8009404 <_dtoa_r+0x634>
 8009262:	f040 826f 	bne.w	8009744 <_dtoa_r+0x974>
 8009266:	4b65      	ldr	r3, [pc, #404]	; (80093fc <_dtoa_r+0x62c>)
 8009268:	2200      	movs	r2, #0
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f9db 	bl	8000628 <__aeabi_dmul>
 8009272:	4652      	mov	r2, sl
 8009274:	465b      	mov	r3, fp
 8009276:	f7f7 fc5d 	bl	8000b34 <__aeabi_dcmpge>
 800927a:	9e03      	ldr	r6, [sp, #12]
 800927c:	4637      	mov	r7, r6
 800927e:	2800      	cmp	r0, #0
 8009280:	f040 8245 	bne.w	800970e <_dtoa_r+0x93e>
 8009284:	9d01      	ldr	r5, [sp, #4]
 8009286:	2331      	movs	r3, #49	; 0x31
 8009288:	f805 3b01 	strb.w	r3, [r5], #1
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	e240      	b.n	8009716 <_dtoa_r+0x946>
 8009294:	07f2      	lsls	r2, r6, #31
 8009296:	d505      	bpl.n	80092a4 <_dtoa_r+0x4d4>
 8009298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929c:	f7f7 f9c4 	bl	8000628 <__aeabi_dmul>
 80092a0:	3501      	adds	r5, #1
 80092a2:	2301      	movs	r3, #1
 80092a4:	1076      	asrs	r6, r6, #1
 80092a6:	3708      	adds	r7, #8
 80092a8:	e777      	b.n	800919a <_dtoa_r+0x3ca>
 80092aa:	2502      	movs	r5, #2
 80092ac:	e779      	b.n	80091a2 <_dtoa_r+0x3d2>
 80092ae:	9f00      	ldr	r7, [sp, #0]
 80092b0:	9e03      	ldr	r6, [sp, #12]
 80092b2:	e794      	b.n	80091de <_dtoa_r+0x40e>
 80092b4:	9901      	ldr	r1, [sp, #4]
 80092b6:	4b4c      	ldr	r3, [pc, #304]	; (80093e8 <_dtoa_r+0x618>)
 80092b8:	4431      	add	r1, r6
 80092ba:	910d      	str	r1, [sp, #52]	; 0x34
 80092bc:	9908      	ldr	r1, [sp, #32]
 80092be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d043      	beq.n	8009352 <_dtoa_r+0x582>
 80092ca:	494d      	ldr	r1, [pc, #308]	; (8009400 <_dtoa_r+0x630>)
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7f7 fad5 	bl	800087c <__aeabi_ddiv>
 80092d2:	4652      	mov	r2, sl
 80092d4:	465b      	mov	r3, fp
 80092d6:	f7f6 ffef 	bl	80002b8 <__aeabi_dsub>
 80092da:	9d01      	ldr	r5, [sp, #4]
 80092dc:	4682      	mov	sl, r0
 80092de:	468b      	mov	fp, r1
 80092e0:	4649      	mov	r1, r9
 80092e2:	4640      	mov	r0, r8
 80092e4:	f7f7 fc50 	bl	8000b88 <__aeabi_d2iz>
 80092e8:	4606      	mov	r6, r0
 80092ea:	f7f7 f933 	bl	8000554 <__aeabi_i2d>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ffdf 	bl	80002b8 <__aeabi_dsub>
 80092fa:	3630      	adds	r6, #48	; 0x30
 80092fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009300:	4652      	mov	r2, sl
 8009302:	465b      	mov	r3, fp
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	f7f7 fc00 	bl	8000b0c <__aeabi_dcmplt>
 800930c:	2800      	cmp	r0, #0
 800930e:	d163      	bne.n	80093d8 <_dtoa_r+0x608>
 8009310:	4642      	mov	r2, r8
 8009312:	464b      	mov	r3, r9
 8009314:	4936      	ldr	r1, [pc, #216]	; (80093f0 <_dtoa_r+0x620>)
 8009316:	2000      	movs	r0, #0
 8009318:	f7f6 ffce 	bl	80002b8 <__aeabi_dsub>
 800931c:	4652      	mov	r2, sl
 800931e:	465b      	mov	r3, fp
 8009320:	f7f7 fbf4 	bl	8000b0c <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	f040 80b5 	bne.w	8009494 <_dtoa_r+0x6c4>
 800932a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800932c:	429d      	cmp	r5, r3
 800932e:	d081      	beq.n	8009234 <_dtoa_r+0x464>
 8009330:	4b30      	ldr	r3, [pc, #192]	; (80093f4 <_dtoa_r+0x624>)
 8009332:	2200      	movs	r2, #0
 8009334:	4650      	mov	r0, sl
 8009336:	4659      	mov	r1, fp
 8009338:	f7f7 f976 	bl	8000628 <__aeabi_dmul>
 800933c:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <_dtoa_r+0x624>)
 800933e:	4682      	mov	sl, r0
 8009340:	468b      	mov	fp, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	2200      	movs	r2, #0
 8009348:	f7f7 f96e 	bl	8000628 <__aeabi_dmul>
 800934c:	4680      	mov	r8, r0
 800934e:	4689      	mov	r9, r1
 8009350:	e7c6      	b.n	80092e0 <_dtoa_r+0x510>
 8009352:	4650      	mov	r0, sl
 8009354:	4659      	mov	r1, fp
 8009356:	f7f7 f967 	bl	8000628 <__aeabi_dmul>
 800935a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800935c:	9d01      	ldr	r5, [sp, #4]
 800935e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009360:	4682      	mov	sl, r0
 8009362:	468b      	mov	fp, r1
 8009364:	4649      	mov	r1, r9
 8009366:	4640      	mov	r0, r8
 8009368:	f7f7 fc0e 	bl	8000b88 <__aeabi_d2iz>
 800936c:	4606      	mov	r6, r0
 800936e:	f7f7 f8f1 	bl	8000554 <__aeabi_i2d>
 8009372:	3630      	adds	r6, #48	; 0x30
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4640      	mov	r0, r8
 800937a:	4649      	mov	r1, r9
 800937c:	f7f6 ff9c 	bl	80002b8 <__aeabi_dsub>
 8009380:	f805 6b01 	strb.w	r6, [r5], #1
 8009384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009386:	429d      	cmp	r5, r3
 8009388:	4680      	mov	r8, r0
 800938a:	4689      	mov	r9, r1
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	d124      	bne.n	80093dc <_dtoa_r+0x60c>
 8009392:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <_dtoa_r+0x630>)
 8009394:	4650      	mov	r0, sl
 8009396:	4659      	mov	r1, fp
 8009398:	f7f6 ff90 	bl	80002bc <__adddf3>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f7 fbd0 	bl	8000b48 <__aeabi_dcmpgt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d173      	bne.n	8009494 <_dtoa_r+0x6c4>
 80093ac:	4652      	mov	r2, sl
 80093ae:	465b      	mov	r3, fp
 80093b0:	4913      	ldr	r1, [pc, #76]	; (8009400 <_dtoa_r+0x630>)
 80093b2:	2000      	movs	r0, #0
 80093b4:	f7f6 ff80 	bl	80002b8 <__aeabi_dsub>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f7 fba4 	bl	8000b0c <__aeabi_dcmplt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f43f af35 	beq.w	8009234 <_dtoa_r+0x464>
 80093ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093cc:	1e6b      	subs	r3, r5, #1
 80093ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093d4:	2b30      	cmp	r3, #48	; 0x30
 80093d6:	d0f8      	beq.n	80093ca <_dtoa_r+0x5fa>
 80093d8:	9700      	str	r7, [sp, #0]
 80093da:	e049      	b.n	8009470 <_dtoa_r+0x6a0>
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <_dtoa_r+0x624>)
 80093de:	f7f7 f923 	bl	8000628 <__aeabi_dmul>
 80093e2:	4680      	mov	r8, r0
 80093e4:	4689      	mov	r9, r1
 80093e6:	e7bd      	b.n	8009364 <_dtoa_r+0x594>
 80093e8:	0800b300 	.word	0x0800b300
 80093ec:	0800b2d8 	.word	0x0800b2d8
 80093f0:	3ff00000 	.word	0x3ff00000
 80093f4:	40240000 	.word	0x40240000
 80093f8:	401c0000 	.word	0x401c0000
 80093fc:	40140000 	.word	0x40140000
 8009400:	3fe00000 	.word	0x3fe00000
 8009404:	9d01      	ldr	r5, [sp, #4]
 8009406:	4656      	mov	r6, sl
 8009408:	465f      	mov	r7, fp
 800940a:	4642      	mov	r2, r8
 800940c:	464b      	mov	r3, r9
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f7 fa33 	bl	800087c <__aeabi_ddiv>
 8009416:	f7f7 fbb7 	bl	8000b88 <__aeabi_d2iz>
 800941a:	4682      	mov	sl, r0
 800941c:	f7f7 f89a 	bl	8000554 <__aeabi_i2d>
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	f7f7 f900 	bl	8000628 <__aeabi_dmul>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009434:	f7f6 ff40 	bl	80002b8 <__aeabi_dsub>
 8009438:	f805 6b01 	strb.w	r6, [r5], #1
 800943c:	9e01      	ldr	r6, [sp, #4]
 800943e:	9f03      	ldr	r7, [sp, #12]
 8009440:	1bae      	subs	r6, r5, r6
 8009442:	42b7      	cmp	r7, r6
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	d135      	bne.n	80094b6 <_dtoa_r+0x6e6>
 800944a:	f7f6 ff37 	bl	80002bc <__adddf3>
 800944e:	4642      	mov	r2, r8
 8009450:	464b      	mov	r3, r9
 8009452:	4606      	mov	r6, r0
 8009454:	460f      	mov	r7, r1
 8009456:	f7f7 fb77 	bl	8000b48 <__aeabi_dcmpgt>
 800945a:	b9d0      	cbnz	r0, 8009492 <_dtoa_r+0x6c2>
 800945c:	4642      	mov	r2, r8
 800945e:	464b      	mov	r3, r9
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 8009468:	b110      	cbz	r0, 8009470 <_dtoa_r+0x6a0>
 800946a:	f01a 0f01 	tst.w	sl, #1
 800946e:	d110      	bne.n	8009492 <_dtoa_r+0x6c2>
 8009470:	4620      	mov	r0, r4
 8009472:	ee18 1a10 	vmov	r1, s16
 8009476:	f000 faf3 	bl	8009a60 <_Bfree>
 800947a:	2300      	movs	r3, #0
 800947c:	9800      	ldr	r0, [sp, #0]
 800947e:	702b      	strb	r3, [r5, #0]
 8009480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009482:	3001      	adds	r0, #1
 8009484:	6018      	str	r0, [r3, #0]
 8009486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009488:	2b00      	cmp	r3, #0
 800948a:	f43f acf1 	beq.w	8008e70 <_dtoa_r+0xa0>
 800948e:	601d      	str	r5, [r3, #0]
 8009490:	e4ee      	b.n	8008e70 <_dtoa_r+0xa0>
 8009492:	9f00      	ldr	r7, [sp, #0]
 8009494:	462b      	mov	r3, r5
 8009496:	461d      	mov	r5, r3
 8009498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800949c:	2a39      	cmp	r2, #57	; 0x39
 800949e:	d106      	bne.n	80094ae <_dtoa_r+0x6de>
 80094a0:	9a01      	ldr	r2, [sp, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d1f7      	bne.n	8009496 <_dtoa_r+0x6c6>
 80094a6:	9901      	ldr	r1, [sp, #4]
 80094a8:	2230      	movs	r2, #48	; 0x30
 80094aa:	3701      	adds	r7, #1
 80094ac:	700a      	strb	r2, [r1, #0]
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	3201      	adds	r2, #1
 80094b2:	701a      	strb	r2, [r3, #0]
 80094b4:	e790      	b.n	80093d8 <_dtoa_r+0x608>
 80094b6:	4ba6      	ldr	r3, [pc, #664]	; (8009750 <_dtoa_r+0x980>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8b5 	bl	8000628 <__aeabi_dmul>
 80094be:	2200      	movs	r2, #0
 80094c0:	2300      	movs	r3, #0
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	f7f7 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d09d      	beq.n	800940a <_dtoa_r+0x63a>
 80094ce:	e7cf      	b.n	8009470 <_dtoa_r+0x6a0>
 80094d0:	9a08      	ldr	r2, [sp, #32]
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	f000 80d7 	beq.w	8009686 <_dtoa_r+0x8b6>
 80094d8:	9a06      	ldr	r2, [sp, #24]
 80094da:	2a01      	cmp	r2, #1
 80094dc:	f300 80ba 	bgt.w	8009654 <_dtoa_r+0x884>
 80094e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	f000 80b2 	beq.w	800964c <_dtoa_r+0x87c>
 80094e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094ec:	9e07      	ldr	r6, [sp, #28]
 80094ee:	9d04      	ldr	r5, [sp, #16]
 80094f0:	9a04      	ldr	r2, [sp, #16]
 80094f2:	441a      	add	r2, r3
 80094f4:	9204      	str	r2, [sp, #16]
 80094f6:	9a05      	ldr	r2, [sp, #20]
 80094f8:	2101      	movs	r1, #1
 80094fa:	441a      	add	r2, r3
 80094fc:	4620      	mov	r0, r4
 80094fe:	9205      	str	r2, [sp, #20]
 8009500:	f000 fb66 	bl	8009bd0 <__i2b>
 8009504:	4607      	mov	r7, r0
 8009506:	2d00      	cmp	r5, #0
 8009508:	dd0c      	ble.n	8009524 <_dtoa_r+0x754>
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd09      	ble.n	8009524 <_dtoa_r+0x754>
 8009510:	42ab      	cmp	r3, r5
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	bfa8      	it	ge
 8009516:	462b      	movge	r3, r5
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	9204      	str	r2, [sp, #16]
 800951c:	9a05      	ldr	r2, [sp, #20]
 800951e:	1aed      	subs	r5, r5, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	9b07      	ldr	r3, [sp, #28]
 8009526:	b31b      	cbz	r3, 8009570 <_dtoa_r+0x7a0>
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 80af 	beq.w	800968e <_dtoa_r+0x8be>
 8009530:	2e00      	cmp	r6, #0
 8009532:	dd13      	ble.n	800955c <_dtoa_r+0x78c>
 8009534:	4639      	mov	r1, r7
 8009536:	4632      	mov	r2, r6
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fc09 	bl	8009d50 <__pow5mult>
 800953e:	ee18 2a10 	vmov	r2, s16
 8009542:	4601      	mov	r1, r0
 8009544:	4607      	mov	r7, r0
 8009546:	4620      	mov	r0, r4
 8009548:	f000 fb58 	bl	8009bfc <__multiply>
 800954c:	ee18 1a10 	vmov	r1, s16
 8009550:	4680      	mov	r8, r0
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fa84 	bl	8009a60 <_Bfree>
 8009558:	ee08 8a10 	vmov	s16, r8
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	1b9a      	subs	r2, r3, r6
 8009560:	d006      	beq.n	8009570 <_dtoa_r+0x7a0>
 8009562:	ee18 1a10 	vmov	r1, s16
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fbf2 	bl	8009d50 <__pow5mult>
 800956c:	ee08 0a10 	vmov	s16, r0
 8009570:	2101      	movs	r1, #1
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fb2c 	bl	8009bd0 <__i2b>
 8009578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957a:	2b00      	cmp	r3, #0
 800957c:	4606      	mov	r6, r0
 800957e:	f340 8088 	ble.w	8009692 <_dtoa_r+0x8c2>
 8009582:	461a      	mov	r2, r3
 8009584:	4601      	mov	r1, r0
 8009586:	4620      	mov	r0, r4
 8009588:	f000 fbe2 	bl	8009d50 <__pow5mult>
 800958c:	9b06      	ldr	r3, [sp, #24]
 800958e:	2b01      	cmp	r3, #1
 8009590:	4606      	mov	r6, r0
 8009592:	f340 8081 	ble.w	8009698 <_dtoa_r+0x8c8>
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	6933      	ldr	r3, [r6, #16]
 800959c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095a0:	6918      	ldr	r0, [r3, #16]
 80095a2:	f000 fac5 	bl	8009b30 <__hi0bits>
 80095a6:	f1c0 0020 	rsb	r0, r0, #32
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	4418      	add	r0, r3
 80095ae:	f010 001f 	ands.w	r0, r0, #31
 80095b2:	f000 8092 	beq.w	80096da <_dtoa_r+0x90a>
 80095b6:	f1c0 0320 	rsb	r3, r0, #32
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	f340 808a 	ble.w	80096d4 <_dtoa_r+0x904>
 80095c0:	f1c0 001c 	rsb	r0, r0, #28
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	4403      	add	r3, r0
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	4403      	add	r3, r0
 80095ce:	4405      	add	r5, r0
 80095d0:	9305      	str	r3, [sp, #20]
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd07      	ble.n	80095e8 <_dtoa_r+0x818>
 80095d8:	ee18 1a10 	vmov	r1, s16
 80095dc:	461a      	mov	r2, r3
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fc10 	bl	8009e04 <__lshift>
 80095e4:	ee08 0a10 	vmov	s16, r0
 80095e8:	9b05      	ldr	r3, [sp, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	dd05      	ble.n	80095fa <_dtoa_r+0x82a>
 80095ee:	4631      	mov	r1, r6
 80095f0:	461a      	mov	r2, r3
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 fc06 	bl	8009e04 <__lshift>
 80095f8:	4606      	mov	r6, r0
 80095fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d06e      	beq.n	80096de <_dtoa_r+0x90e>
 8009600:	ee18 0a10 	vmov	r0, s16
 8009604:	4631      	mov	r1, r6
 8009606:	f000 fc6d 	bl	8009ee4 <__mcmp>
 800960a:	2800      	cmp	r0, #0
 800960c:	da67      	bge.n	80096de <_dtoa_r+0x90e>
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	3b01      	subs	r3, #1
 8009612:	ee18 1a10 	vmov	r1, s16
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	220a      	movs	r2, #10
 800961a:	2300      	movs	r3, #0
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fa41 	bl	8009aa4 <__multadd>
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	ee08 0a10 	vmov	s16, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 81b1 	beq.w	8009990 <_dtoa_r+0xbc0>
 800962e:	2300      	movs	r3, #0
 8009630:	4639      	mov	r1, r7
 8009632:	220a      	movs	r2, #10
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fa35 	bl	8009aa4 <__multadd>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	4607      	mov	r7, r0
 8009640:	f300 808e 	bgt.w	8009760 <_dtoa_r+0x990>
 8009644:	9b06      	ldr	r3, [sp, #24]
 8009646:	2b02      	cmp	r3, #2
 8009648:	dc51      	bgt.n	80096ee <_dtoa_r+0x91e>
 800964a:	e089      	b.n	8009760 <_dtoa_r+0x990>
 800964c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800964e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009652:	e74b      	b.n	80094ec <_dtoa_r+0x71c>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1e5e      	subs	r6, r3, #1
 8009658:	9b07      	ldr	r3, [sp, #28]
 800965a:	42b3      	cmp	r3, r6
 800965c:	bfbf      	itttt	lt
 800965e:	9b07      	ldrlt	r3, [sp, #28]
 8009660:	9607      	strlt	r6, [sp, #28]
 8009662:	1af2      	sublt	r2, r6, r3
 8009664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009666:	bfb6      	itet	lt
 8009668:	189b      	addlt	r3, r3, r2
 800966a:	1b9e      	subge	r6, r3, r6
 800966c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	bfb8      	it	lt
 8009672:	2600      	movlt	r6, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfb7      	itett	lt
 8009678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800967c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009680:	1a9d      	sublt	r5, r3, r2
 8009682:	2300      	movlt	r3, #0
 8009684:	e734      	b.n	80094f0 <_dtoa_r+0x720>
 8009686:	9e07      	ldr	r6, [sp, #28]
 8009688:	9d04      	ldr	r5, [sp, #16]
 800968a:	9f08      	ldr	r7, [sp, #32]
 800968c:	e73b      	b.n	8009506 <_dtoa_r+0x736>
 800968e:	9a07      	ldr	r2, [sp, #28]
 8009690:	e767      	b.n	8009562 <_dtoa_r+0x792>
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	2b01      	cmp	r3, #1
 8009696:	dc18      	bgt.n	80096ca <_dtoa_r+0x8fa>
 8009698:	f1ba 0f00 	cmp.w	sl, #0
 800969c:	d115      	bne.n	80096ca <_dtoa_r+0x8fa>
 800969e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096a2:	b993      	cbnz	r3, 80096ca <_dtoa_r+0x8fa>
 80096a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096a8:	0d1b      	lsrs	r3, r3, #20
 80096aa:	051b      	lsls	r3, r3, #20
 80096ac:	b183      	cbz	r3, 80096d0 <_dtoa_r+0x900>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	3301      	adds	r3, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	9b05      	ldr	r3, [sp, #20]
 80096b6:	3301      	adds	r3, #1
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f04f 0801 	mov.w	r8, #1
 80096be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f af6a 	bne.w	800959a <_dtoa_r+0x7ca>
 80096c6:	2001      	movs	r0, #1
 80096c8:	e76f      	b.n	80095aa <_dtoa_r+0x7da>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	e7f6      	b.n	80096be <_dtoa_r+0x8ee>
 80096d0:	4698      	mov	r8, r3
 80096d2:	e7f4      	b.n	80096be <_dtoa_r+0x8ee>
 80096d4:	f43f af7d 	beq.w	80095d2 <_dtoa_r+0x802>
 80096d8:	4618      	mov	r0, r3
 80096da:	301c      	adds	r0, #28
 80096dc:	e772      	b.n	80095c4 <_dtoa_r+0x7f4>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dc37      	bgt.n	8009754 <_dtoa_r+0x984>
 80096e4:	9b06      	ldr	r3, [sp, #24]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	dd34      	ble.n	8009754 <_dtoa_r+0x984>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	9b02      	ldr	r3, [sp, #8]
 80096f0:	b96b      	cbnz	r3, 800970e <_dtoa_r+0x93e>
 80096f2:	4631      	mov	r1, r6
 80096f4:	2205      	movs	r2, #5
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f9d4 	bl	8009aa4 <__multadd>
 80096fc:	4601      	mov	r1, r0
 80096fe:	4606      	mov	r6, r0
 8009700:	ee18 0a10 	vmov	r0, s16
 8009704:	f000 fbee 	bl	8009ee4 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	f73f adbb 	bgt.w	8009284 <_dtoa_r+0x4b4>
 800970e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009710:	9d01      	ldr	r5, [sp, #4]
 8009712:	43db      	mvns	r3, r3
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	4631      	mov	r1, r6
 800971c:	4620      	mov	r0, r4
 800971e:	f000 f99f 	bl	8009a60 <_Bfree>
 8009722:	2f00      	cmp	r7, #0
 8009724:	f43f aea4 	beq.w	8009470 <_dtoa_r+0x6a0>
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	d005      	beq.n	800973a <_dtoa_r+0x96a>
 800972e:	45b8      	cmp	r8, r7
 8009730:	d003      	beq.n	800973a <_dtoa_r+0x96a>
 8009732:	4641      	mov	r1, r8
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f993 	bl	8009a60 <_Bfree>
 800973a:	4639      	mov	r1, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f000 f98f 	bl	8009a60 <_Bfree>
 8009742:	e695      	b.n	8009470 <_dtoa_r+0x6a0>
 8009744:	2600      	movs	r6, #0
 8009746:	4637      	mov	r7, r6
 8009748:	e7e1      	b.n	800970e <_dtoa_r+0x93e>
 800974a:	9700      	str	r7, [sp, #0]
 800974c:	4637      	mov	r7, r6
 800974e:	e599      	b.n	8009284 <_dtoa_r+0x4b4>
 8009750:	40240000 	.word	0x40240000
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80ca 	beq.w	80098f0 <_dtoa_r+0xb20>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	2d00      	cmp	r5, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x9a0>
 8009764:	4639      	mov	r1, r7
 8009766:	462a      	mov	r2, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fb4b 	bl	8009e04 <__lshift>
 800976e:	4607      	mov	r7, r0
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	d05b      	beq.n	800982e <_dtoa_r+0xa5e>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f931 	bl	80099e0 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b928      	cbnz	r0, 800978e <_dtoa_r+0x9be>
 8009782:	4b87      	ldr	r3, [pc, #540]	; (80099a0 <_dtoa_r+0xbd0>)
 8009784:	4602      	mov	r2, r0
 8009786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800978a:	f7ff bb3b 	b.w	8008e04 <_dtoa_r+0x34>
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	f107 010c 	add.w	r1, r7, #12
 8009798:	300c      	adds	r0, #12
 800979a:	f000 f913 	bl	80099c4 <memcpy>
 800979e:	2201      	movs	r2, #1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fb2e 	bl	8009e04 <__lshift>
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	f103 0901 	add.w	r9, r3, #1
 80097ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	f00a 0301 	and.w	r3, sl, #1
 80097ba:	46b8      	mov	r8, r7
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	4607      	mov	r7, r0
 80097c0:	4631      	mov	r1, r6
 80097c2:	ee18 0a10 	vmov	r0, s16
 80097c6:	f7ff fa77 	bl	8008cb8 <quorem>
 80097ca:	4641      	mov	r1, r8
 80097cc:	9002      	str	r0, [sp, #8]
 80097ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097d2:	ee18 0a10 	vmov	r0, s16
 80097d6:	f000 fb85 	bl	8009ee4 <__mcmp>
 80097da:	463a      	mov	r2, r7
 80097dc:	9003      	str	r0, [sp, #12]
 80097de:	4631      	mov	r1, r6
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fb9b 	bl	8009f1c <__mdiff>
 80097e6:	68c2      	ldr	r2, [r0, #12]
 80097e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80097ec:	4605      	mov	r5, r0
 80097ee:	bb02      	cbnz	r2, 8009832 <_dtoa_r+0xa62>
 80097f0:	4601      	mov	r1, r0
 80097f2:	ee18 0a10 	vmov	r0, s16
 80097f6:	f000 fb75 	bl	8009ee4 <__mcmp>
 80097fa:	4602      	mov	r2, r0
 80097fc:	4629      	mov	r1, r5
 80097fe:	4620      	mov	r0, r4
 8009800:	9207      	str	r2, [sp, #28]
 8009802:	f000 f92d 	bl	8009a60 <_Bfree>
 8009806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800980a:	ea43 0102 	orr.w	r1, r3, r2
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	430b      	orrs	r3, r1
 8009812:	464d      	mov	r5, r9
 8009814:	d10f      	bne.n	8009836 <_dtoa_r+0xa66>
 8009816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800981a:	d02a      	beq.n	8009872 <_dtoa_r+0xaa2>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	dd02      	ble.n	8009828 <_dtoa_r+0xa58>
 8009822:	9b02      	ldr	r3, [sp, #8]
 8009824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009828:	f88b a000 	strb.w	sl, [fp]
 800982c:	e775      	b.n	800971a <_dtoa_r+0x94a>
 800982e:	4638      	mov	r0, r7
 8009830:	e7ba      	b.n	80097a8 <_dtoa_r+0x9d8>
 8009832:	2201      	movs	r2, #1
 8009834:	e7e2      	b.n	80097fc <_dtoa_r+0xa2c>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	db04      	blt.n	8009846 <_dtoa_r+0xa76>
 800983c:	9906      	ldr	r1, [sp, #24]
 800983e:	430b      	orrs	r3, r1
 8009840:	9904      	ldr	r1, [sp, #16]
 8009842:	430b      	orrs	r3, r1
 8009844:	d122      	bne.n	800988c <_dtoa_r+0xabc>
 8009846:	2a00      	cmp	r2, #0
 8009848:	ddee      	ble.n	8009828 <_dtoa_r+0xa58>
 800984a:	ee18 1a10 	vmov	r1, s16
 800984e:	2201      	movs	r2, #1
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fad7 	bl	8009e04 <__lshift>
 8009856:	4631      	mov	r1, r6
 8009858:	ee08 0a10 	vmov	s16, r0
 800985c:	f000 fb42 	bl	8009ee4 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dc03      	bgt.n	800986c <_dtoa_r+0xa9c>
 8009864:	d1e0      	bne.n	8009828 <_dtoa_r+0xa58>
 8009866:	f01a 0f01 	tst.w	sl, #1
 800986a:	d0dd      	beq.n	8009828 <_dtoa_r+0xa58>
 800986c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009870:	d1d7      	bne.n	8009822 <_dtoa_r+0xa52>
 8009872:	2339      	movs	r3, #57	; 0x39
 8009874:	f88b 3000 	strb.w	r3, [fp]
 8009878:	462b      	mov	r3, r5
 800987a:	461d      	mov	r5, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009882:	2a39      	cmp	r2, #57	; 0x39
 8009884:	d071      	beq.n	800996a <_dtoa_r+0xb9a>
 8009886:	3201      	adds	r2, #1
 8009888:	701a      	strb	r2, [r3, #0]
 800988a:	e746      	b.n	800971a <_dtoa_r+0x94a>
 800988c:	2a00      	cmp	r2, #0
 800988e:	dd07      	ble.n	80098a0 <_dtoa_r+0xad0>
 8009890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009894:	d0ed      	beq.n	8009872 <_dtoa_r+0xaa2>
 8009896:	f10a 0301 	add.w	r3, sl, #1
 800989a:	f88b 3000 	strb.w	r3, [fp]
 800989e:	e73c      	b.n	800971a <_dtoa_r+0x94a>
 80098a0:	9b05      	ldr	r3, [sp, #20]
 80098a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098a6:	4599      	cmp	r9, r3
 80098a8:	d047      	beq.n	800993a <_dtoa_r+0xb6a>
 80098aa:	ee18 1a10 	vmov	r1, s16
 80098ae:	2300      	movs	r3, #0
 80098b0:	220a      	movs	r2, #10
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 f8f6 	bl	8009aa4 <__multadd>
 80098b8:	45b8      	cmp	r8, r7
 80098ba:	ee08 0a10 	vmov	s16, r0
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	f04f 020a 	mov.w	r2, #10
 80098c6:	4641      	mov	r1, r8
 80098c8:	4620      	mov	r0, r4
 80098ca:	d106      	bne.n	80098da <_dtoa_r+0xb0a>
 80098cc:	f000 f8ea 	bl	8009aa4 <__multadd>
 80098d0:	4680      	mov	r8, r0
 80098d2:	4607      	mov	r7, r0
 80098d4:	f109 0901 	add.w	r9, r9, #1
 80098d8:	e772      	b.n	80097c0 <_dtoa_r+0x9f0>
 80098da:	f000 f8e3 	bl	8009aa4 <__multadd>
 80098de:	4639      	mov	r1, r7
 80098e0:	4680      	mov	r8, r0
 80098e2:	2300      	movs	r3, #0
 80098e4:	220a      	movs	r2, #10
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 f8dc 	bl	8009aa4 <__multadd>
 80098ec:	4607      	mov	r7, r0
 80098ee:	e7f1      	b.n	80098d4 <_dtoa_r+0xb04>
 80098f0:	9b03      	ldr	r3, [sp, #12]
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	9d01      	ldr	r5, [sp, #4]
 80098f6:	ee18 0a10 	vmov	r0, s16
 80098fa:	4631      	mov	r1, r6
 80098fc:	f7ff f9dc 	bl	8008cb8 <quorem>
 8009900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	f805 ab01 	strb.w	sl, [r5], #1
 800990a:	1aea      	subs	r2, r5, r3
 800990c:	9b02      	ldr	r3, [sp, #8]
 800990e:	4293      	cmp	r3, r2
 8009910:	dd09      	ble.n	8009926 <_dtoa_r+0xb56>
 8009912:	ee18 1a10 	vmov	r1, s16
 8009916:	2300      	movs	r3, #0
 8009918:	220a      	movs	r2, #10
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f8c2 	bl	8009aa4 <__multadd>
 8009920:	ee08 0a10 	vmov	s16, r0
 8009924:	e7e7      	b.n	80098f6 <_dtoa_r+0xb26>
 8009926:	9b02      	ldr	r3, [sp, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	bfc8      	it	gt
 800992c:	461d      	movgt	r5, r3
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	bfd8      	it	le
 8009932:	2501      	movle	r5, #1
 8009934:	441d      	add	r5, r3
 8009936:	f04f 0800 	mov.w	r8, #0
 800993a:	ee18 1a10 	vmov	r1, s16
 800993e:	2201      	movs	r2, #1
 8009940:	4620      	mov	r0, r4
 8009942:	f000 fa5f 	bl	8009e04 <__lshift>
 8009946:	4631      	mov	r1, r6
 8009948:	ee08 0a10 	vmov	s16, r0
 800994c:	f000 faca 	bl	8009ee4 <__mcmp>
 8009950:	2800      	cmp	r0, #0
 8009952:	dc91      	bgt.n	8009878 <_dtoa_r+0xaa8>
 8009954:	d102      	bne.n	800995c <_dtoa_r+0xb8c>
 8009956:	f01a 0f01 	tst.w	sl, #1
 800995a:	d18d      	bne.n	8009878 <_dtoa_r+0xaa8>
 800995c:	462b      	mov	r3, r5
 800995e:	461d      	mov	r5, r3
 8009960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009964:	2a30      	cmp	r2, #48	; 0x30
 8009966:	d0fa      	beq.n	800995e <_dtoa_r+0xb8e>
 8009968:	e6d7      	b.n	800971a <_dtoa_r+0x94a>
 800996a:	9a01      	ldr	r2, [sp, #4]
 800996c:	429a      	cmp	r2, r3
 800996e:	d184      	bne.n	800987a <_dtoa_r+0xaaa>
 8009970:	9b00      	ldr	r3, [sp, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	2331      	movs	r3, #49	; 0x31
 8009978:	7013      	strb	r3, [r2, #0]
 800997a:	e6ce      	b.n	800971a <_dtoa_r+0x94a>
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <_dtoa_r+0xbd4>)
 800997e:	f7ff ba95 	b.w	8008eac <_dtoa_r+0xdc>
 8009982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009984:	2b00      	cmp	r3, #0
 8009986:	f47f aa6e 	bne.w	8008e66 <_dtoa_r+0x96>
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <_dtoa_r+0xbd8>)
 800998c:	f7ff ba8e 	b.w	8008eac <_dtoa_r+0xdc>
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dcae      	bgt.n	80098f4 <_dtoa_r+0xb24>
 8009996:	9b06      	ldr	r3, [sp, #24]
 8009998:	2b02      	cmp	r3, #2
 800999a:	f73f aea8 	bgt.w	80096ee <_dtoa_r+0x91e>
 800999e:	e7a9      	b.n	80098f4 <_dtoa_r+0xb24>
 80099a0:	0800b267 	.word	0x0800b267
 80099a4:	0800b1c4 	.word	0x0800b1c4
 80099a8:	0800b1e8 	.word	0x0800b1e8

080099ac <_localeconv_r>:
 80099ac:	4800      	ldr	r0, [pc, #0]	; (80099b0 <_localeconv_r+0x4>)
 80099ae:	4770      	bx	lr
 80099b0:	20000160 	.word	0x20000160

080099b4 <malloc>:
 80099b4:	4b02      	ldr	r3, [pc, #8]	; (80099c0 <malloc+0xc>)
 80099b6:	4601      	mov	r1, r0
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	f000 bc17 	b.w	800a1ec <_malloc_r>
 80099be:	bf00      	nop
 80099c0:	2000000c 	.word	0x2000000c

080099c4 <memcpy>:
 80099c4:	440a      	add	r2, r1
 80099c6:	4291      	cmp	r1, r2
 80099c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099cc:	d100      	bne.n	80099d0 <memcpy+0xc>
 80099ce:	4770      	bx	lr
 80099d0:	b510      	push	{r4, lr}
 80099d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099da:	4291      	cmp	r1, r2
 80099dc:	d1f9      	bne.n	80099d2 <memcpy+0xe>
 80099de:	bd10      	pop	{r4, pc}

080099e0 <_Balloc>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099e4:	4604      	mov	r4, r0
 80099e6:	460d      	mov	r5, r1
 80099e8:	b976      	cbnz	r6, 8009a08 <_Balloc+0x28>
 80099ea:	2010      	movs	r0, #16
 80099ec:	f7ff ffe2 	bl	80099b4 <malloc>
 80099f0:	4602      	mov	r2, r0
 80099f2:	6260      	str	r0, [r4, #36]	; 0x24
 80099f4:	b920      	cbnz	r0, 8009a00 <_Balloc+0x20>
 80099f6:	4b18      	ldr	r3, [pc, #96]	; (8009a58 <_Balloc+0x78>)
 80099f8:	4818      	ldr	r0, [pc, #96]	; (8009a5c <_Balloc+0x7c>)
 80099fa:	2166      	movs	r1, #102	; 0x66
 80099fc:	f000 fdd6 	bl	800a5ac <__assert_func>
 8009a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a04:	6006      	str	r6, [r0, #0]
 8009a06:	60c6      	str	r6, [r0, #12]
 8009a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a0a:	68f3      	ldr	r3, [r6, #12]
 8009a0c:	b183      	cbz	r3, 8009a30 <_Balloc+0x50>
 8009a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a16:	b9b8      	cbnz	r0, 8009a48 <_Balloc+0x68>
 8009a18:	2101      	movs	r1, #1
 8009a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a1e:	1d72      	adds	r2, r6, #5
 8009a20:	0092      	lsls	r2, r2, #2
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 fb60 	bl	800a0e8 <_calloc_r>
 8009a28:	b160      	cbz	r0, 8009a44 <_Balloc+0x64>
 8009a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a2e:	e00e      	b.n	8009a4e <_Balloc+0x6e>
 8009a30:	2221      	movs	r2, #33	; 0x21
 8009a32:	2104      	movs	r1, #4
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fb57 	bl	800a0e8 <_calloc_r>
 8009a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3c:	60f0      	str	r0, [r6, #12]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e4      	bne.n	8009a0e <_Balloc+0x2e>
 8009a44:	2000      	movs	r0, #0
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	6802      	ldr	r2, [r0, #0]
 8009a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a54:	e7f7      	b.n	8009a46 <_Balloc+0x66>
 8009a56:	bf00      	nop
 8009a58:	0800b1f5 	.word	0x0800b1f5
 8009a5c:	0800b278 	.word	0x0800b278

08009a60 <_Bfree>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a64:	4605      	mov	r5, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	b976      	cbnz	r6, 8009a88 <_Bfree+0x28>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7ff ffa2 	bl	80099b4 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6268      	str	r0, [r5, #36]	; 0x24
 8009a74:	b920      	cbnz	r0, 8009a80 <_Bfree+0x20>
 8009a76:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <_Bfree+0x3c>)
 8009a78:	4809      	ldr	r0, [pc, #36]	; (8009aa0 <_Bfree+0x40>)
 8009a7a:	218a      	movs	r1, #138	; 0x8a
 8009a7c:	f000 fd96 	bl	800a5ac <__assert_func>
 8009a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a84:	6006      	str	r6, [r0, #0]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	b13c      	cbz	r4, 8009a9a <_Bfree+0x3a>
 8009a8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a8c:	6862      	ldr	r2, [r4, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a94:	6021      	str	r1, [r4, #0]
 8009a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	0800b1f5 	.word	0x0800b1f5
 8009aa0:	0800b278 	.word	0x0800b278

08009aa4 <__multadd>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	690d      	ldr	r5, [r1, #16]
 8009aaa:	4607      	mov	r7, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	461e      	mov	r6, r3
 8009ab0:	f101 0c14 	add.w	ip, r1, #20
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aba:	b299      	uxth	r1, r3
 8009abc:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac0:	0c1e      	lsrs	r6, r3, #16
 8009ac2:	0c0b      	lsrs	r3, r1, #16
 8009ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ac8:	b289      	uxth	r1, r1
 8009aca:	3001      	adds	r0, #1
 8009acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad0:	4285      	cmp	r5, r0
 8009ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ada:	dcec      	bgt.n	8009ab6 <__multadd+0x12>
 8009adc:	b30e      	cbz	r6, 8009b22 <__multadd+0x7e>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dc19      	bgt.n	8009b18 <__multadd+0x74>
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	3101      	adds	r1, #1
 8009aea:	f7ff ff79 	bl	80099e0 <_Balloc>
 8009aee:	4680      	mov	r8, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__multadd+0x5a>
 8009af2:	4602      	mov	r2, r0
 8009af4:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <__multadd+0x84>)
 8009af6:	480d      	ldr	r0, [pc, #52]	; (8009b2c <__multadd+0x88>)
 8009af8:	21b5      	movs	r1, #181	; 0xb5
 8009afa:	f000 fd57 	bl	800a5ac <__assert_func>
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	3202      	adds	r2, #2
 8009b02:	f104 010c 	add.w	r1, r4, #12
 8009b06:	0092      	lsls	r2, r2, #2
 8009b08:	300c      	adds	r0, #12
 8009b0a:	f7ff ff5b 	bl	80099c4 <memcpy>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ffa5 	bl	8009a60 <_Bfree>
 8009b16:	4644      	mov	r4, r8
 8009b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	615e      	str	r6, [r3, #20]
 8009b20:	6125      	str	r5, [r4, #16]
 8009b22:	4620      	mov	r0, r4
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	0800b267 	.word	0x0800b267
 8009b2c:	0800b278 	.word	0x0800b278

08009b30 <__hi0bits>:
 8009b30:	0c03      	lsrs	r3, r0, #16
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	b9d3      	cbnz	r3, 8009b6c <__hi0bits+0x3c>
 8009b36:	0400      	lsls	r0, r0, #16
 8009b38:	2310      	movs	r3, #16
 8009b3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b3e:	bf04      	itt	eq
 8009b40:	0200      	lsleq	r0, r0, #8
 8009b42:	3308      	addeq	r3, #8
 8009b44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b48:	bf04      	itt	eq
 8009b4a:	0100      	lsleq	r0, r0, #4
 8009b4c:	3304      	addeq	r3, #4
 8009b4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b52:	bf04      	itt	eq
 8009b54:	0080      	lsleq	r0, r0, #2
 8009b56:	3302      	addeq	r3, #2
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	db05      	blt.n	8009b68 <__hi0bits+0x38>
 8009b5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b60:	f103 0301 	add.w	r3, r3, #1
 8009b64:	bf08      	it	eq
 8009b66:	2320      	moveq	r3, #32
 8009b68:	4618      	mov	r0, r3
 8009b6a:	4770      	bx	lr
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e7e4      	b.n	8009b3a <__hi0bits+0xa>

08009b70 <__lo0bits>:
 8009b70:	6803      	ldr	r3, [r0, #0]
 8009b72:	f013 0207 	ands.w	r2, r3, #7
 8009b76:	4601      	mov	r1, r0
 8009b78:	d00b      	beq.n	8009b92 <__lo0bits+0x22>
 8009b7a:	07da      	lsls	r2, r3, #31
 8009b7c:	d423      	bmi.n	8009bc6 <__lo0bits+0x56>
 8009b7e:	0798      	lsls	r0, r3, #30
 8009b80:	bf49      	itett	mi
 8009b82:	085b      	lsrmi	r3, r3, #1
 8009b84:	089b      	lsrpl	r3, r3, #2
 8009b86:	2001      	movmi	r0, #1
 8009b88:	600b      	strmi	r3, [r1, #0]
 8009b8a:	bf5c      	itt	pl
 8009b8c:	600b      	strpl	r3, [r1, #0]
 8009b8e:	2002      	movpl	r0, #2
 8009b90:	4770      	bx	lr
 8009b92:	b298      	uxth	r0, r3
 8009b94:	b9a8      	cbnz	r0, 8009bc2 <__lo0bits+0x52>
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	2010      	movs	r0, #16
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	b90a      	cbnz	r2, 8009ba2 <__lo0bits+0x32>
 8009b9e:	3008      	adds	r0, #8
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	071a      	lsls	r2, r3, #28
 8009ba4:	bf04      	itt	eq
 8009ba6:	091b      	lsreq	r3, r3, #4
 8009ba8:	3004      	addeq	r0, #4
 8009baa:	079a      	lsls	r2, r3, #30
 8009bac:	bf04      	itt	eq
 8009bae:	089b      	lsreq	r3, r3, #2
 8009bb0:	3002      	addeq	r0, #2
 8009bb2:	07da      	lsls	r2, r3, #31
 8009bb4:	d403      	bmi.n	8009bbe <__lo0bits+0x4e>
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	f100 0001 	add.w	r0, r0, #1
 8009bbc:	d005      	beq.n	8009bca <__lo0bits+0x5a>
 8009bbe:	600b      	str	r3, [r1, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	e7e9      	b.n	8009b9a <__lo0bits+0x2a>
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	4770      	bx	lr
 8009bca:	2020      	movs	r0, #32
 8009bcc:	4770      	bx	lr
	...

08009bd0 <__i2b>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	f7ff ff03 	bl	80099e0 <_Balloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__i2b+0x1a>
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <__i2b+0x24>)
 8009be0:	4805      	ldr	r0, [pc, #20]	; (8009bf8 <__i2b+0x28>)
 8009be2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009be6:	f000 fce1 	bl	800a5ac <__assert_func>
 8009bea:	2301      	movs	r3, #1
 8009bec:	6144      	str	r4, [r0, #20]
 8009bee:	6103      	str	r3, [r0, #16]
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800b267 	.word	0x0800b267
 8009bf8:	0800b278 	.word	0x0800b278

08009bfc <__multiply>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	4691      	mov	r9, r2
 8009c02:	690a      	ldr	r2, [r1, #16]
 8009c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	bfb8      	it	lt
 8009c0c:	460b      	movlt	r3, r1
 8009c0e:	460c      	mov	r4, r1
 8009c10:	bfbc      	itt	lt
 8009c12:	464c      	movlt	r4, r9
 8009c14:	4699      	movlt	r9, r3
 8009c16:	6927      	ldr	r7, [r4, #16]
 8009c18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c1c:	68a3      	ldr	r3, [r4, #8]
 8009c1e:	6861      	ldr	r1, [r4, #4]
 8009c20:	eb07 060a 	add.w	r6, r7, sl
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	b085      	sub	sp, #20
 8009c28:	bfb8      	it	lt
 8009c2a:	3101      	addlt	r1, #1
 8009c2c:	f7ff fed8 	bl	80099e0 <_Balloc>
 8009c30:	b930      	cbnz	r0, 8009c40 <__multiply+0x44>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b44      	ldr	r3, [pc, #272]	; (8009d48 <__multiply+0x14c>)
 8009c36:	4845      	ldr	r0, [pc, #276]	; (8009d4c <__multiply+0x150>)
 8009c38:	f240 115d 	movw	r1, #349	; 0x15d
 8009c3c:	f000 fcb6 	bl	800a5ac <__assert_func>
 8009c40:	f100 0514 	add.w	r5, r0, #20
 8009c44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c48:	462b      	mov	r3, r5
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4543      	cmp	r3, r8
 8009c4e:	d321      	bcc.n	8009c94 <__multiply+0x98>
 8009c50:	f104 0314 	add.w	r3, r4, #20
 8009c54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c58:	f109 0314 	add.w	r3, r9, #20
 8009c5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c60:	9202      	str	r2, [sp, #8]
 8009c62:	1b3a      	subs	r2, r7, r4
 8009c64:	3a15      	subs	r2, #21
 8009c66:	f022 0203 	bic.w	r2, r2, #3
 8009c6a:	3204      	adds	r2, #4
 8009c6c:	f104 0115 	add.w	r1, r4, #21
 8009c70:	428f      	cmp	r7, r1
 8009c72:	bf38      	it	cc
 8009c74:	2204      	movcc	r2, #4
 8009c76:	9201      	str	r2, [sp, #4]
 8009c78:	9a02      	ldr	r2, [sp, #8]
 8009c7a:	9303      	str	r3, [sp, #12]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d80c      	bhi.n	8009c9a <__multiply+0x9e>
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	dd03      	ble.n	8009c8c <__multiply+0x90>
 8009c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d05a      	beq.n	8009d42 <__multiply+0x146>
 8009c8c:	6106      	str	r6, [r0, #16]
 8009c8e:	b005      	add	sp, #20
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	f843 2b04 	str.w	r2, [r3], #4
 8009c98:	e7d8      	b.n	8009c4c <__multiply+0x50>
 8009c9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c9e:	f1ba 0f00 	cmp.w	sl, #0
 8009ca2:	d024      	beq.n	8009cee <__multiply+0xf2>
 8009ca4:	f104 0e14 	add.w	lr, r4, #20
 8009ca8:	46a9      	mov	r9, r5
 8009caa:	f04f 0c00 	mov.w	ip, #0
 8009cae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cb2:	f8d9 1000 	ldr.w	r1, [r9]
 8009cb6:	fa1f fb82 	uxth.w	fp, r2
 8009cba:	b289      	uxth	r1, r1
 8009cbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cc8:	4461      	add	r1, ip
 8009cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cce:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cd6:	b289      	uxth	r1, r1
 8009cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cdc:	4577      	cmp	r7, lr
 8009cde:	f849 1b04 	str.w	r1, [r9], #4
 8009ce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ce6:	d8e2      	bhi.n	8009cae <__multiply+0xb2>
 8009ce8:	9a01      	ldr	r2, [sp, #4]
 8009cea:	f845 c002 	str.w	ip, [r5, r2]
 8009cee:	9a03      	ldr	r2, [sp, #12]
 8009cf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	f1b9 0f00 	cmp.w	r9, #0
 8009cfa:	d020      	beq.n	8009d3e <__multiply+0x142>
 8009cfc:	6829      	ldr	r1, [r5, #0]
 8009cfe:	f104 0c14 	add.w	ip, r4, #20
 8009d02:	46ae      	mov	lr, r5
 8009d04:	f04f 0a00 	mov.w	sl, #0
 8009d08:	f8bc b000 	ldrh.w	fp, [ip]
 8009d0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d10:	fb09 220b 	mla	r2, r9, fp, r2
 8009d14:	4492      	add	sl, r2
 8009d16:	b289      	uxth	r1, r1
 8009d18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d1c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d24:	f8be 1000 	ldrh.w	r1, [lr]
 8009d28:	0c12      	lsrs	r2, r2, #16
 8009d2a:	fb09 1102 	mla	r1, r9, r2, r1
 8009d2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d32:	4567      	cmp	r7, ip
 8009d34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d38:	d8e6      	bhi.n	8009d08 <__multiply+0x10c>
 8009d3a:	9a01      	ldr	r2, [sp, #4]
 8009d3c:	50a9      	str	r1, [r5, r2]
 8009d3e:	3504      	adds	r5, #4
 8009d40:	e79a      	b.n	8009c78 <__multiply+0x7c>
 8009d42:	3e01      	subs	r6, #1
 8009d44:	e79c      	b.n	8009c80 <__multiply+0x84>
 8009d46:	bf00      	nop
 8009d48:	0800b267 	.word	0x0800b267
 8009d4c:	0800b278 	.word	0x0800b278

08009d50 <__pow5mult>:
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	4615      	mov	r5, r2
 8009d56:	f012 0203 	ands.w	r2, r2, #3
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460f      	mov	r7, r1
 8009d5e:	d007      	beq.n	8009d70 <__pow5mult+0x20>
 8009d60:	4c25      	ldr	r4, [pc, #148]	; (8009df8 <__pow5mult+0xa8>)
 8009d62:	3a01      	subs	r2, #1
 8009d64:	2300      	movs	r3, #0
 8009d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d6a:	f7ff fe9b 	bl	8009aa4 <__multadd>
 8009d6e:	4607      	mov	r7, r0
 8009d70:	10ad      	asrs	r5, r5, #2
 8009d72:	d03d      	beq.n	8009df0 <__pow5mult+0xa0>
 8009d74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d76:	b97c      	cbnz	r4, 8009d98 <__pow5mult+0x48>
 8009d78:	2010      	movs	r0, #16
 8009d7a:	f7ff fe1b 	bl	80099b4 <malloc>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6270      	str	r0, [r6, #36]	; 0x24
 8009d82:	b928      	cbnz	r0, 8009d90 <__pow5mult+0x40>
 8009d84:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <__pow5mult+0xac>)
 8009d86:	481e      	ldr	r0, [pc, #120]	; (8009e00 <__pow5mult+0xb0>)
 8009d88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d8c:	f000 fc0e 	bl	800a5ac <__assert_func>
 8009d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d94:	6004      	str	r4, [r0, #0]
 8009d96:	60c4      	str	r4, [r0, #12]
 8009d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009da0:	b94c      	cbnz	r4, 8009db6 <__pow5mult+0x66>
 8009da2:	f240 2171 	movw	r1, #625	; 0x271
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7ff ff12 	bl	8009bd0 <__i2b>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009db2:	4604      	mov	r4, r0
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	f04f 0900 	mov.w	r9, #0
 8009dba:	07eb      	lsls	r3, r5, #31
 8009dbc:	d50a      	bpl.n	8009dd4 <__pow5mult+0x84>
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ff1a 	bl	8009bfc <__multiply>
 8009dc8:	4639      	mov	r1, r7
 8009dca:	4680      	mov	r8, r0
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff fe47 	bl	8009a60 <_Bfree>
 8009dd2:	4647      	mov	r7, r8
 8009dd4:	106d      	asrs	r5, r5, #1
 8009dd6:	d00b      	beq.n	8009df0 <__pow5mult+0xa0>
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	b938      	cbnz	r0, 8009dec <__pow5mult+0x9c>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4621      	mov	r1, r4
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff ff0b 	bl	8009bfc <__multiply>
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	f8c0 9000 	str.w	r9, [r0]
 8009dec:	4604      	mov	r4, r0
 8009dee:	e7e4      	b.n	8009dba <__pow5mult+0x6a>
 8009df0:	4638      	mov	r0, r7
 8009df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df6:	bf00      	nop
 8009df8:	0800b3c8 	.word	0x0800b3c8
 8009dfc:	0800b1f5 	.word	0x0800b1f5
 8009e00:	0800b278 	.word	0x0800b278

08009e04 <__lshift>:
 8009e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	6849      	ldr	r1, [r1, #4]
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	4607      	mov	r7, r0
 8009e16:	4691      	mov	r9, r2
 8009e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e1c:	f108 0601 	add.w	r6, r8, #1
 8009e20:	42b3      	cmp	r3, r6
 8009e22:	db0b      	blt.n	8009e3c <__lshift+0x38>
 8009e24:	4638      	mov	r0, r7
 8009e26:	f7ff fddb 	bl	80099e0 <_Balloc>
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	b948      	cbnz	r0, 8009e42 <__lshift+0x3e>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4b2a      	ldr	r3, [pc, #168]	; (8009edc <__lshift+0xd8>)
 8009e32:	482b      	ldr	r0, [pc, #172]	; (8009ee0 <__lshift+0xdc>)
 8009e34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e38:	f000 fbb8 	bl	800a5ac <__assert_func>
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	e7ee      	b.n	8009e20 <__lshift+0x1c>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f100 0114 	add.w	r1, r0, #20
 8009e48:	f100 0210 	add.w	r2, r0, #16
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4553      	cmp	r3, sl
 8009e50:	db37      	blt.n	8009ec2 <__lshift+0xbe>
 8009e52:	6920      	ldr	r0, [r4, #16]
 8009e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e58:	f104 0314 	add.w	r3, r4, #20
 8009e5c:	f019 091f 	ands.w	r9, r9, #31
 8009e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e68:	d02f      	beq.n	8009eca <__lshift+0xc6>
 8009e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e6e:	468a      	mov	sl, r1
 8009e70:	f04f 0c00 	mov.w	ip, #0
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	fa02 f209 	lsl.w	r2, r2, r9
 8009e7a:	ea42 020c 	orr.w	r2, r2, ip
 8009e7e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e86:	4298      	cmp	r0, r3
 8009e88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e8c:	d8f2      	bhi.n	8009e74 <__lshift+0x70>
 8009e8e:	1b03      	subs	r3, r0, r4
 8009e90:	3b15      	subs	r3, #21
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	3304      	adds	r3, #4
 8009e98:	f104 0215 	add.w	r2, r4, #21
 8009e9c:	4290      	cmp	r0, r2
 8009e9e:	bf38      	it	cc
 8009ea0:	2304      	movcc	r3, #4
 8009ea2:	f841 c003 	str.w	ip, [r1, r3]
 8009ea6:	f1bc 0f00 	cmp.w	ip, #0
 8009eaa:	d001      	beq.n	8009eb0 <__lshift+0xac>
 8009eac:	f108 0602 	add.w	r6, r8, #2
 8009eb0:	3e01      	subs	r6, #1
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	612e      	str	r6, [r5, #16]
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	f7ff fdd2 	bl	8009a60 <_Bfree>
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	e7c1      	b.n	8009e4e <__lshift+0x4a>
 8009eca:	3904      	subs	r1, #4
 8009ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ed4:	4298      	cmp	r0, r3
 8009ed6:	d8f9      	bhi.n	8009ecc <__lshift+0xc8>
 8009ed8:	e7ea      	b.n	8009eb0 <__lshift+0xac>
 8009eda:	bf00      	nop
 8009edc:	0800b267 	.word	0x0800b267
 8009ee0:	0800b278 	.word	0x0800b278

08009ee4 <__mcmp>:
 8009ee4:	b530      	push	{r4, r5, lr}
 8009ee6:	6902      	ldr	r2, [r0, #16]
 8009ee8:	690c      	ldr	r4, [r1, #16]
 8009eea:	1b12      	subs	r2, r2, r4
 8009eec:	d10e      	bne.n	8009f0c <__mcmp+0x28>
 8009eee:	f100 0314 	add.w	r3, r0, #20
 8009ef2:	3114      	adds	r1, #20
 8009ef4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ef8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009efc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f04:	42a5      	cmp	r5, r4
 8009f06:	d003      	beq.n	8009f10 <__mcmp+0x2c>
 8009f08:	d305      	bcc.n	8009f16 <__mcmp+0x32>
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	bd30      	pop	{r4, r5, pc}
 8009f10:	4283      	cmp	r3, r0
 8009f12:	d3f3      	bcc.n	8009efc <__mcmp+0x18>
 8009f14:	e7fa      	b.n	8009f0c <__mcmp+0x28>
 8009f16:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1a:	e7f7      	b.n	8009f0c <__mcmp+0x28>

08009f1c <__mdiff>:
 8009f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	460c      	mov	r4, r1
 8009f22:	4606      	mov	r6, r0
 8009f24:	4611      	mov	r1, r2
 8009f26:	4620      	mov	r0, r4
 8009f28:	4690      	mov	r8, r2
 8009f2a:	f7ff ffdb 	bl	8009ee4 <__mcmp>
 8009f2e:	1e05      	subs	r5, r0, #0
 8009f30:	d110      	bne.n	8009f54 <__mdiff+0x38>
 8009f32:	4629      	mov	r1, r5
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff fd53 	bl	80099e0 <_Balloc>
 8009f3a:	b930      	cbnz	r0, 8009f4a <__mdiff+0x2e>
 8009f3c:	4b3a      	ldr	r3, [pc, #232]	; (800a028 <__mdiff+0x10c>)
 8009f3e:	4602      	mov	r2, r0
 8009f40:	f240 2132 	movw	r1, #562	; 0x232
 8009f44:	4839      	ldr	r0, [pc, #228]	; (800a02c <__mdiff+0x110>)
 8009f46:	f000 fb31 	bl	800a5ac <__assert_func>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	bfa4      	itt	ge
 8009f56:	4643      	movge	r3, r8
 8009f58:	46a0      	movge	r8, r4
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f60:	bfa6      	itte	ge
 8009f62:	461c      	movge	r4, r3
 8009f64:	2500      	movge	r5, #0
 8009f66:	2501      	movlt	r5, #1
 8009f68:	f7ff fd3a 	bl	80099e0 <_Balloc>
 8009f6c:	b920      	cbnz	r0, 8009f78 <__mdiff+0x5c>
 8009f6e:	4b2e      	ldr	r3, [pc, #184]	; (800a028 <__mdiff+0x10c>)
 8009f70:	4602      	mov	r2, r0
 8009f72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f76:	e7e5      	b.n	8009f44 <__mdiff+0x28>
 8009f78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f7c:	6926      	ldr	r6, [r4, #16]
 8009f7e:	60c5      	str	r5, [r0, #12]
 8009f80:	f104 0914 	add.w	r9, r4, #20
 8009f84:	f108 0514 	add.w	r5, r8, #20
 8009f88:	f100 0e14 	add.w	lr, r0, #20
 8009f8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f94:	f108 0210 	add.w	r2, r8, #16
 8009f98:	46f2      	mov	sl, lr
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fa0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fa4:	fa1f f883 	uxth.w	r8, r3
 8009fa8:	fa11 f18b 	uxtah	r1, r1, fp
 8009fac:	0c1b      	lsrs	r3, r3, #16
 8009fae:	eba1 0808 	sub.w	r8, r1, r8
 8009fb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fba:	fa1f f888 	uxth.w	r8, r8
 8009fbe:	1419      	asrs	r1, r3, #16
 8009fc0:	454e      	cmp	r6, r9
 8009fc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fc6:	f84a 3b04 	str.w	r3, [sl], #4
 8009fca:	d8e7      	bhi.n	8009f9c <__mdiff+0x80>
 8009fcc:	1b33      	subs	r3, r6, r4
 8009fce:	3b15      	subs	r3, #21
 8009fd0:	f023 0303 	bic.w	r3, r3, #3
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	3415      	adds	r4, #21
 8009fd8:	42a6      	cmp	r6, r4
 8009fda:	bf38      	it	cc
 8009fdc:	2304      	movcc	r3, #4
 8009fde:	441d      	add	r5, r3
 8009fe0:	4473      	add	r3, lr
 8009fe2:	469e      	mov	lr, r3
 8009fe4:	462e      	mov	r6, r5
 8009fe6:	4566      	cmp	r6, ip
 8009fe8:	d30e      	bcc.n	800a008 <__mdiff+0xec>
 8009fea:	f10c 0203 	add.w	r2, ip, #3
 8009fee:	1b52      	subs	r2, r2, r5
 8009ff0:	f022 0203 	bic.w	r2, r2, #3
 8009ff4:	3d03      	subs	r5, #3
 8009ff6:	45ac      	cmp	ip, r5
 8009ff8:	bf38      	it	cc
 8009ffa:	2200      	movcc	r2, #0
 8009ffc:	441a      	add	r2, r3
 8009ffe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a002:	b17b      	cbz	r3, 800a024 <__mdiff+0x108>
 800a004:	6107      	str	r7, [r0, #16]
 800a006:	e7a3      	b.n	8009f50 <__mdiff+0x34>
 800a008:	f856 8b04 	ldr.w	r8, [r6], #4
 800a00c:	fa11 f288 	uxtah	r2, r1, r8
 800a010:	1414      	asrs	r4, r2, #16
 800a012:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a016:	b292      	uxth	r2, r2
 800a018:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a01c:	f84e 2b04 	str.w	r2, [lr], #4
 800a020:	1421      	asrs	r1, r4, #16
 800a022:	e7e0      	b.n	8009fe6 <__mdiff+0xca>
 800a024:	3f01      	subs	r7, #1
 800a026:	e7ea      	b.n	8009ffe <__mdiff+0xe2>
 800a028:	0800b267 	.word	0x0800b267
 800a02c:	0800b278 	.word	0x0800b278

0800a030 <__d2b>:
 800a030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a034:	4689      	mov	r9, r1
 800a036:	2101      	movs	r1, #1
 800a038:	ec57 6b10 	vmov	r6, r7, d0
 800a03c:	4690      	mov	r8, r2
 800a03e:	f7ff fccf 	bl	80099e0 <_Balloc>
 800a042:	4604      	mov	r4, r0
 800a044:	b930      	cbnz	r0, 800a054 <__d2b+0x24>
 800a046:	4602      	mov	r2, r0
 800a048:	4b25      	ldr	r3, [pc, #148]	; (800a0e0 <__d2b+0xb0>)
 800a04a:	4826      	ldr	r0, [pc, #152]	; (800a0e4 <__d2b+0xb4>)
 800a04c:	f240 310a 	movw	r1, #778	; 0x30a
 800a050:	f000 faac 	bl	800a5ac <__assert_func>
 800a054:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a05c:	bb35      	cbnz	r5, 800a0ac <__d2b+0x7c>
 800a05e:	2e00      	cmp	r6, #0
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	d028      	beq.n	800a0b6 <__d2b+0x86>
 800a064:	4668      	mov	r0, sp
 800a066:	9600      	str	r6, [sp, #0]
 800a068:	f7ff fd82 	bl	8009b70 <__lo0bits>
 800a06c:	9900      	ldr	r1, [sp, #0]
 800a06e:	b300      	cbz	r0, 800a0b2 <__d2b+0x82>
 800a070:	9a01      	ldr	r2, [sp, #4]
 800a072:	f1c0 0320 	rsb	r3, r0, #32
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	430b      	orrs	r3, r1
 800a07c:	40c2      	lsrs	r2, r0
 800a07e:	6163      	str	r3, [r4, #20]
 800a080:	9201      	str	r2, [sp, #4]
 800a082:	9b01      	ldr	r3, [sp, #4]
 800a084:	61a3      	str	r3, [r4, #24]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bf14      	ite	ne
 800a08a:	2202      	movne	r2, #2
 800a08c:	2201      	moveq	r2, #1
 800a08e:	6122      	str	r2, [r4, #16]
 800a090:	b1d5      	cbz	r5, 800a0c8 <__d2b+0x98>
 800a092:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a096:	4405      	add	r5, r0
 800a098:	f8c9 5000 	str.w	r5, [r9]
 800a09c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0a0:	f8c8 0000 	str.w	r0, [r8]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	b003      	add	sp, #12
 800a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0b0:	e7d5      	b.n	800a05e <__d2b+0x2e>
 800a0b2:	6161      	str	r1, [r4, #20]
 800a0b4:	e7e5      	b.n	800a082 <__d2b+0x52>
 800a0b6:	a801      	add	r0, sp, #4
 800a0b8:	f7ff fd5a 	bl	8009b70 <__lo0bits>
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	6163      	str	r3, [r4, #20]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	6122      	str	r2, [r4, #16]
 800a0c4:	3020      	adds	r0, #32
 800a0c6:	e7e3      	b.n	800a090 <__d2b+0x60>
 800a0c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0d0:	f8c9 0000 	str.w	r0, [r9]
 800a0d4:	6918      	ldr	r0, [r3, #16]
 800a0d6:	f7ff fd2b 	bl	8009b30 <__hi0bits>
 800a0da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0de:	e7df      	b.n	800a0a0 <__d2b+0x70>
 800a0e0:	0800b267 	.word	0x0800b267
 800a0e4:	0800b278 	.word	0x0800b278

0800a0e8 <_calloc_r>:
 800a0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ea:	fba1 2402 	umull	r2, r4, r1, r2
 800a0ee:	b94c      	cbnz	r4, 800a104 <_calloc_r+0x1c>
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	9201      	str	r2, [sp, #4]
 800a0f4:	f000 f87a 	bl	800a1ec <_malloc_r>
 800a0f8:	9a01      	ldr	r2, [sp, #4]
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	b930      	cbnz	r0, 800a10c <_calloc_r+0x24>
 800a0fe:	4628      	mov	r0, r5
 800a100:	b003      	add	sp, #12
 800a102:	bd30      	pop	{r4, r5, pc}
 800a104:	220c      	movs	r2, #12
 800a106:	6002      	str	r2, [r0, #0]
 800a108:	2500      	movs	r5, #0
 800a10a:	e7f8      	b.n	800a0fe <_calloc_r+0x16>
 800a10c:	4621      	mov	r1, r4
 800a10e:	f7fe f941 	bl	8008394 <memset>
 800a112:	e7f4      	b.n	800a0fe <_calloc_r+0x16>

0800a114 <_free_r>:
 800a114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a116:	2900      	cmp	r1, #0
 800a118:	d044      	beq.n	800a1a4 <_free_r+0x90>
 800a11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a11e:	9001      	str	r0, [sp, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	f1a1 0404 	sub.w	r4, r1, #4
 800a126:	bfb8      	it	lt
 800a128:	18e4      	addlt	r4, r4, r3
 800a12a:	f000 fa9b 	bl	800a664 <__malloc_lock>
 800a12e:	4a1e      	ldr	r2, [pc, #120]	; (800a1a8 <_free_r+0x94>)
 800a130:	9801      	ldr	r0, [sp, #4]
 800a132:	6813      	ldr	r3, [r2, #0]
 800a134:	b933      	cbnz	r3, 800a144 <_free_r+0x30>
 800a136:	6063      	str	r3, [r4, #4]
 800a138:	6014      	str	r4, [r2, #0]
 800a13a:	b003      	add	sp, #12
 800a13c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a140:	f000 ba96 	b.w	800a670 <__malloc_unlock>
 800a144:	42a3      	cmp	r3, r4
 800a146:	d908      	bls.n	800a15a <_free_r+0x46>
 800a148:	6825      	ldr	r5, [r4, #0]
 800a14a:	1961      	adds	r1, r4, r5
 800a14c:	428b      	cmp	r3, r1
 800a14e:	bf01      	itttt	eq
 800a150:	6819      	ldreq	r1, [r3, #0]
 800a152:	685b      	ldreq	r3, [r3, #4]
 800a154:	1949      	addeq	r1, r1, r5
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	e7ed      	b.n	800a136 <_free_r+0x22>
 800a15a:	461a      	mov	r2, r3
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	b10b      	cbz	r3, 800a164 <_free_r+0x50>
 800a160:	42a3      	cmp	r3, r4
 800a162:	d9fa      	bls.n	800a15a <_free_r+0x46>
 800a164:	6811      	ldr	r1, [r2, #0]
 800a166:	1855      	adds	r5, r2, r1
 800a168:	42a5      	cmp	r5, r4
 800a16a:	d10b      	bne.n	800a184 <_free_r+0x70>
 800a16c:	6824      	ldr	r4, [r4, #0]
 800a16e:	4421      	add	r1, r4
 800a170:	1854      	adds	r4, r2, r1
 800a172:	42a3      	cmp	r3, r4
 800a174:	6011      	str	r1, [r2, #0]
 800a176:	d1e0      	bne.n	800a13a <_free_r+0x26>
 800a178:	681c      	ldr	r4, [r3, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	6053      	str	r3, [r2, #4]
 800a17e:	4421      	add	r1, r4
 800a180:	6011      	str	r1, [r2, #0]
 800a182:	e7da      	b.n	800a13a <_free_r+0x26>
 800a184:	d902      	bls.n	800a18c <_free_r+0x78>
 800a186:	230c      	movs	r3, #12
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	e7d6      	b.n	800a13a <_free_r+0x26>
 800a18c:	6825      	ldr	r5, [r4, #0]
 800a18e:	1961      	adds	r1, r4, r5
 800a190:	428b      	cmp	r3, r1
 800a192:	bf04      	itt	eq
 800a194:	6819      	ldreq	r1, [r3, #0]
 800a196:	685b      	ldreq	r3, [r3, #4]
 800a198:	6063      	str	r3, [r4, #4]
 800a19a:	bf04      	itt	eq
 800a19c:	1949      	addeq	r1, r1, r5
 800a19e:	6021      	streq	r1, [r4, #0]
 800a1a0:	6054      	str	r4, [r2, #4]
 800a1a2:	e7ca      	b.n	800a13a <_free_r+0x26>
 800a1a4:	b003      	add	sp, #12
 800a1a6:	bd30      	pop	{r4, r5, pc}
 800a1a8:	2001dcfc 	.word	0x2001dcfc

0800a1ac <sbrk_aligned>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4e0e      	ldr	r6, [pc, #56]	; (800a1e8 <sbrk_aligned+0x3c>)
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	6831      	ldr	r1, [r6, #0]
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	b911      	cbnz	r1, 800a1be <sbrk_aligned+0x12>
 800a1b8:	f000 f9e8 	bl	800a58c <_sbrk_r>
 800a1bc:	6030      	str	r0, [r6, #0]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 f9e3 	bl	800a58c <_sbrk_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d00a      	beq.n	800a1e0 <sbrk_aligned+0x34>
 800a1ca:	1cc4      	adds	r4, r0, #3
 800a1cc:	f024 0403 	bic.w	r4, r4, #3
 800a1d0:	42a0      	cmp	r0, r4
 800a1d2:	d007      	beq.n	800a1e4 <sbrk_aligned+0x38>
 800a1d4:	1a21      	subs	r1, r4, r0
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 f9d8 	bl	800a58c <_sbrk_r>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d101      	bne.n	800a1e4 <sbrk_aligned+0x38>
 800a1e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	2001dd00 	.word	0x2001dd00

0800a1ec <_malloc_r>:
 800a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f0:	1ccd      	adds	r5, r1, #3
 800a1f2:	f025 0503 	bic.w	r5, r5, #3
 800a1f6:	3508      	adds	r5, #8
 800a1f8:	2d0c      	cmp	r5, #12
 800a1fa:	bf38      	it	cc
 800a1fc:	250c      	movcc	r5, #12
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	4607      	mov	r7, r0
 800a202:	db01      	blt.n	800a208 <_malloc_r+0x1c>
 800a204:	42a9      	cmp	r1, r5
 800a206:	d905      	bls.n	800a214 <_malloc_r+0x28>
 800a208:	230c      	movs	r3, #12
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	2600      	movs	r6, #0
 800a20e:	4630      	mov	r0, r6
 800a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a214:	4e2e      	ldr	r6, [pc, #184]	; (800a2d0 <_malloc_r+0xe4>)
 800a216:	f000 fa25 	bl	800a664 <__malloc_lock>
 800a21a:	6833      	ldr	r3, [r6, #0]
 800a21c:	461c      	mov	r4, r3
 800a21e:	bb34      	cbnz	r4, 800a26e <_malloc_r+0x82>
 800a220:	4629      	mov	r1, r5
 800a222:	4638      	mov	r0, r7
 800a224:	f7ff ffc2 	bl	800a1ac <sbrk_aligned>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	4604      	mov	r4, r0
 800a22c:	d14d      	bne.n	800a2ca <_malloc_r+0xde>
 800a22e:	6834      	ldr	r4, [r6, #0]
 800a230:	4626      	mov	r6, r4
 800a232:	2e00      	cmp	r6, #0
 800a234:	d140      	bne.n	800a2b8 <_malloc_r+0xcc>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	4631      	mov	r1, r6
 800a23a:	4638      	mov	r0, r7
 800a23c:	eb04 0803 	add.w	r8, r4, r3
 800a240:	f000 f9a4 	bl	800a58c <_sbrk_r>
 800a244:	4580      	cmp	r8, r0
 800a246:	d13a      	bne.n	800a2be <_malloc_r+0xd2>
 800a248:	6821      	ldr	r1, [r4, #0]
 800a24a:	3503      	adds	r5, #3
 800a24c:	1a6d      	subs	r5, r5, r1
 800a24e:	f025 0503 	bic.w	r5, r5, #3
 800a252:	3508      	adds	r5, #8
 800a254:	2d0c      	cmp	r5, #12
 800a256:	bf38      	it	cc
 800a258:	250c      	movcc	r5, #12
 800a25a:	4629      	mov	r1, r5
 800a25c:	4638      	mov	r0, r7
 800a25e:	f7ff ffa5 	bl	800a1ac <sbrk_aligned>
 800a262:	3001      	adds	r0, #1
 800a264:	d02b      	beq.n	800a2be <_malloc_r+0xd2>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	442b      	add	r3, r5
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	e00e      	b.n	800a28c <_malloc_r+0xa0>
 800a26e:	6822      	ldr	r2, [r4, #0]
 800a270:	1b52      	subs	r2, r2, r5
 800a272:	d41e      	bmi.n	800a2b2 <_malloc_r+0xc6>
 800a274:	2a0b      	cmp	r2, #11
 800a276:	d916      	bls.n	800a2a6 <_malloc_r+0xba>
 800a278:	1961      	adds	r1, r4, r5
 800a27a:	42a3      	cmp	r3, r4
 800a27c:	6025      	str	r5, [r4, #0]
 800a27e:	bf18      	it	ne
 800a280:	6059      	strne	r1, [r3, #4]
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	bf08      	it	eq
 800a286:	6031      	streq	r1, [r6, #0]
 800a288:	5162      	str	r2, [r4, r5]
 800a28a:	604b      	str	r3, [r1, #4]
 800a28c:	4638      	mov	r0, r7
 800a28e:	f104 060b 	add.w	r6, r4, #11
 800a292:	f000 f9ed 	bl	800a670 <__malloc_unlock>
 800a296:	f026 0607 	bic.w	r6, r6, #7
 800a29a:	1d23      	adds	r3, r4, #4
 800a29c:	1af2      	subs	r2, r6, r3
 800a29e:	d0b6      	beq.n	800a20e <_malloc_r+0x22>
 800a2a0:	1b9b      	subs	r3, r3, r6
 800a2a2:	50a3      	str	r3, [r4, r2]
 800a2a4:	e7b3      	b.n	800a20e <_malloc_r+0x22>
 800a2a6:	6862      	ldr	r2, [r4, #4]
 800a2a8:	42a3      	cmp	r3, r4
 800a2aa:	bf0c      	ite	eq
 800a2ac:	6032      	streq	r2, [r6, #0]
 800a2ae:	605a      	strne	r2, [r3, #4]
 800a2b0:	e7ec      	b.n	800a28c <_malloc_r+0xa0>
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	6864      	ldr	r4, [r4, #4]
 800a2b6:	e7b2      	b.n	800a21e <_malloc_r+0x32>
 800a2b8:	4634      	mov	r4, r6
 800a2ba:	6876      	ldr	r6, [r6, #4]
 800a2bc:	e7b9      	b.n	800a232 <_malloc_r+0x46>
 800a2be:	230c      	movs	r3, #12
 800a2c0:	603b      	str	r3, [r7, #0]
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f000 f9d4 	bl	800a670 <__malloc_unlock>
 800a2c8:	e7a1      	b.n	800a20e <_malloc_r+0x22>
 800a2ca:	6025      	str	r5, [r4, #0]
 800a2cc:	e7de      	b.n	800a28c <_malloc_r+0xa0>
 800a2ce:	bf00      	nop
 800a2d0:	2001dcfc 	.word	0x2001dcfc

0800a2d4 <__ssputs_r>:
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	688e      	ldr	r6, [r1, #8]
 800a2da:	429e      	cmp	r6, r3
 800a2dc:	4682      	mov	sl, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	4690      	mov	r8, r2
 800a2e2:	461f      	mov	r7, r3
 800a2e4:	d838      	bhi.n	800a358 <__ssputs_r+0x84>
 800a2e6:	898a      	ldrh	r2, [r1, #12]
 800a2e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2ec:	d032      	beq.n	800a354 <__ssputs_r+0x80>
 800a2ee:	6825      	ldr	r5, [r4, #0]
 800a2f0:	6909      	ldr	r1, [r1, #16]
 800a2f2:	eba5 0901 	sub.w	r9, r5, r1
 800a2f6:	6965      	ldr	r5, [r4, #20]
 800a2f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a300:	3301      	adds	r3, #1
 800a302:	444b      	add	r3, r9
 800a304:	106d      	asrs	r5, r5, #1
 800a306:	429d      	cmp	r5, r3
 800a308:	bf38      	it	cc
 800a30a:	461d      	movcc	r5, r3
 800a30c:	0553      	lsls	r3, r2, #21
 800a30e:	d531      	bpl.n	800a374 <__ssputs_r+0xa0>
 800a310:	4629      	mov	r1, r5
 800a312:	f7ff ff6b 	bl	800a1ec <_malloc_r>
 800a316:	4606      	mov	r6, r0
 800a318:	b950      	cbnz	r0, 800a330 <__ssputs_r+0x5c>
 800a31a:	230c      	movs	r3, #12
 800a31c:	f8ca 3000 	str.w	r3, [sl]
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a326:	81a3      	strh	r3, [r4, #12]
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a330:	6921      	ldr	r1, [r4, #16]
 800a332:	464a      	mov	r2, r9
 800a334:	f7ff fb46 	bl	80099c4 <memcpy>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	6126      	str	r6, [r4, #16]
 800a346:	6165      	str	r5, [r4, #20]
 800a348:	444e      	add	r6, r9
 800a34a:	eba5 0509 	sub.w	r5, r5, r9
 800a34e:	6026      	str	r6, [r4, #0]
 800a350:	60a5      	str	r5, [r4, #8]
 800a352:	463e      	mov	r6, r7
 800a354:	42be      	cmp	r6, r7
 800a356:	d900      	bls.n	800a35a <__ssputs_r+0x86>
 800a358:	463e      	mov	r6, r7
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	4632      	mov	r2, r6
 800a35e:	4641      	mov	r1, r8
 800a360:	f000 f966 	bl	800a630 <memmove>
 800a364:	68a3      	ldr	r3, [r4, #8]
 800a366:	1b9b      	subs	r3, r3, r6
 800a368:	60a3      	str	r3, [r4, #8]
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	4433      	add	r3, r6
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	2000      	movs	r0, #0
 800a372:	e7db      	b.n	800a32c <__ssputs_r+0x58>
 800a374:	462a      	mov	r2, r5
 800a376:	f000 f981 	bl	800a67c <_realloc_r>
 800a37a:	4606      	mov	r6, r0
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d1e1      	bne.n	800a344 <__ssputs_r+0x70>
 800a380:	6921      	ldr	r1, [r4, #16]
 800a382:	4650      	mov	r0, sl
 800a384:	f7ff fec6 	bl	800a114 <_free_r>
 800a388:	e7c7      	b.n	800a31a <__ssputs_r+0x46>
	...

0800a38c <_svfiprintf_r>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4698      	mov	r8, r3
 800a392:	898b      	ldrh	r3, [r1, #12]
 800a394:	061b      	lsls	r3, r3, #24
 800a396:	b09d      	sub	sp, #116	; 0x74
 800a398:	4607      	mov	r7, r0
 800a39a:	460d      	mov	r5, r1
 800a39c:	4614      	mov	r4, r2
 800a39e:	d50e      	bpl.n	800a3be <_svfiprintf_r+0x32>
 800a3a0:	690b      	ldr	r3, [r1, #16]
 800a3a2:	b963      	cbnz	r3, 800a3be <_svfiprintf_r+0x32>
 800a3a4:	2140      	movs	r1, #64	; 0x40
 800a3a6:	f7ff ff21 	bl	800a1ec <_malloc_r>
 800a3aa:	6028      	str	r0, [r5, #0]
 800a3ac:	6128      	str	r0, [r5, #16]
 800a3ae:	b920      	cbnz	r0, 800a3ba <_svfiprintf_r+0x2e>
 800a3b0:	230c      	movs	r3, #12
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e0d1      	b.n	800a55e <_svfiprintf_r+0x1d2>
 800a3ba:	2340      	movs	r3, #64	; 0x40
 800a3bc:	616b      	str	r3, [r5, #20]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c2:	2320      	movs	r3, #32
 800a3c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3cc:	2330      	movs	r3, #48	; 0x30
 800a3ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a578 <_svfiprintf_r+0x1ec>
 800a3d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3d6:	f04f 0901 	mov.w	r9, #1
 800a3da:	4623      	mov	r3, r4
 800a3dc:	469a      	mov	sl, r3
 800a3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e2:	b10a      	cbz	r2, 800a3e8 <_svfiprintf_r+0x5c>
 800a3e4:	2a25      	cmp	r2, #37	; 0x25
 800a3e6:	d1f9      	bne.n	800a3dc <_svfiprintf_r+0x50>
 800a3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ec:	d00b      	beq.n	800a406 <_svfiprintf_r+0x7a>
 800a3ee:	465b      	mov	r3, fp
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	f7ff ff6d 	bl	800a2d4 <__ssputs_r>
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	f000 80aa 	beq.w	800a554 <_svfiprintf_r+0x1c8>
 800a400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a402:	445a      	add	r2, fp
 800a404:	9209      	str	r2, [sp, #36]	; 0x24
 800a406:	f89a 3000 	ldrb.w	r3, [sl]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 80a2 	beq.w	800a554 <_svfiprintf_r+0x1c8>
 800a410:	2300      	movs	r3, #0
 800a412:	f04f 32ff 	mov.w	r2, #4294967295
 800a416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a41a:	f10a 0a01 	add.w	sl, sl, #1
 800a41e:	9304      	str	r3, [sp, #16]
 800a420:	9307      	str	r3, [sp, #28]
 800a422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a426:	931a      	str	r3, [sp, #104]	; 0x68
 800a428:	4654      	mov	r4, sl
 800a42a:	2205      	movs	r2, #5
 800a42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a430:	4851      	ldr	r0, [pc, #324]	; (800a578 <_svfiprintf_r+0x1ec>)
 800a432:	f7f5 feed 	bl	8000210 <memchr>
 800a436:	9a04      	ldr	r2, [sp, #16]
 800a438:	b9d8      	cbnz	r0, 800a472 <_svfiprintf_r+0xe6>
 800a43a:	06d0      	lsls	r0, r2, #27
 800a43c:	bf44      	itt	mi
 800a43e:	2320      	movmi	r3, #32
 800a440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a444:	0711      	lsls	r1, r2, #28
 800a446:	bf44      	itt	mi
 800a448:	232b      	movmi	r3, #43	; 0x2b
 800a44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a44e:	f89a 3000 	ldrb.w	r3, [sl]
 800a452:	2b2a      	cmp	r3, #42	; 0x2a
 800a454:	d015      	beq.n	800a482 <_svfiprintf_r+0xf6>
 800a456:	9a07      	ldr	r2, [sp, #28]
 800a458:	4654      	mov	r4, sl
 800a45a:	2000      	movs	r0, #0
 800a45c:	f04f 0c0a 	mov.w	ip, #10
 800a460:	4621      	mov	r1, r4
 800a462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a466:	3b30      	subs	r3, #48	; 0x30
 800a468:	2b09      	cmp	r3, #9
 800a46a:	d94e      	bls.n	800a50a <_svfiprintf_r+0x17e>
 800a46c:	b1b0      	cbz	r0, 800a49c <_svfiprintf_r+0x110>
 800a46e:	9207      	str	r2, [sp, #28]
 800a470:	e014      	b.n	800a49c <_svfiprintf_r+0x110>
 800a472:	eba0 0308 	sub.w	r3, r0, r8
 800a476:	fa09 f303 	lsl.w	r3, r9, r3
 800a47a:	4313      	orrs	r3, r2
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	46a2      	mov	sl, r4
 800a480:	e7d2      	b.n	800a428 <_svfiprintf_r+0x9c>
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	1d19      	adds	r1, r3, #4
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	9103      	str	r1, [sp, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfbb      	ittet	lt
 800a48e:	425b      	neglt	r3, r3
 800a490:	f042 0202 	orrlt.w	r2, r2, #2
 800a494:	9307      	strge	r3, [sp, #28]
 800a496:	9307      	strlt	r3, [sp, #28]
 800a498:	bfb8      	it	lt
 800a49a:	9204      	strlt	r2, [sp, #16]
 800a49c:	7823      	ldrb	r3, [r4, #0]
 800a49e:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a0:	d10c      	bne.n	800a4bc <_svfiprintf_r+0x130>
 800a4a2:	7863      	ldrb	r3, [r4, #1]
 800a4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a6:	d135      	bne.n	800a514 <_svfiprintf_r+0x188>
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	1d1a      	adds	r2, r3, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	9203      	str	r2, [sp, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfb8      	it	lt
 800a4b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4b8:	3402      	adds	r4, #2
 800a4ba:	9305      	str	r3, [sp, #20]
 800a4bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a588 <_svfiprintf_r+0x1fc>
 800a4c0:	7821      	ldrb	r1, [r4, #0]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	f7f5 fea3 	bl	8000210 <memchr>
 800a4ca:	b140      	cbz	r0, 800a4de <_svfiprintf_r+0x152>
 800a4cc:	2340      	movs	r3, #64	; 0x40
 800a4ce:	eba0 000a 	sub.w	r0, r0, sl
 800a4d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4d6:	9b04      	ldr	r3, [sp, #16]
 800a4d8:	4303      	orrs	r3, r0
 800a4da:	3401      	adds	r4, #1
 800a4dc:	9304      	str	r3, [sp, #16]
 800a4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e2:	4826      	ldr	r0, [pc, #152]	; (800a57c <_svfiprintf_r+0x1f0>)
 800a4e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4e8:	2206      	movs	r2, #6
 800a4ea:	f7f5 fe91 	bl	8000210 <memchr>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d038      	beq.n	800a564 <_svfiprintf_r+0x1d8>
 800a4f2:	4b23      	ldr	r3, [pc, #140]	; (800a580 <_svfiprintf_r+0x1f4>)
 800a4f4:	bb1b      	cbnz	r3, 800a53e <_svfiprintf_r+0x1b2>
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	3307      	adds	r3, #7
 800a4fa:	f023 0307 	bic.w	r3, r3, #7
 800a4fe:	3308      	adds	r3, #8
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a504:	4433      	add	r3, r6
 800a506:	9309      	str	r3, [sp, #36]	; 0x24
 800a508:	e767      	b.n	800a3da <_svfiprintf_r+0x4e>
 800a50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a50e:	460c      	mov	r4, r1
 800a510:	2001      	movs	r0, #1
 800a512:	e7a5      	b.n	800a460 <_svfiprintf_r+0xd4>
 800a514:	2300      	movs	r3, #0
 800a516:	3401      	adds	r4, #1
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	4619      	mov	r1, r3
 800a51c:	f04f 0c0a 	mov.w	ip, #10
 800a520:	4620      	mov	r0, r4
 800a522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a526:	3a30      	subs	r2, #48	; 0x30
 800a528:	2a09      	cmp	r2, #9
 800a52a:	d903      	bls.n	800a534 <_svfiprintf_r+0x1a8>
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0c5      	beq.n	800a4bc <_svfiprintf_r+0x130>
 800a530:	9105      	str	r1, [sp, #20]
 800a532:	e7c3      	b.n	800a4bc <_svfiprintf_r+0x130>
 800a534:	fb0c 2101 	mla	r1, ip, r1, r2
 800a538:	4604      	mov	r4, r0
 800a53a:	2301      	movs	r3, #1
 800a53c:	e7f0      	b.n	800a520 <_svfiprintf_r+0x194>
 800a53e:	ab03      	add	r3, sp, #12
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	462a      	mov	r2, r5
 800a544:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <_svfiprintf_r+0x1f8>)
 800a546:	a904      	add	r1, sp, #16
 800a548:	4638      	mov	r0, r7
 800a54a:	f7fd ffcb 	bl	80084e4 <_printf_float>
 800a54e:	1c42      	adds	r2, r0, #1
 800a550:	4606      	mov	r6, r0
 800a552:	d1d6      	bne.n	800a502 <_svfiprintf_r+0x176>
 800a554:	89ab      	ldrh	r3, [r5, #12]
 800a556:	065b      	lsls	r3, r3, #25
 800a558:	f53f af2c 	bmi.w	800a3b4 <_svfiprintf_r+0x28>
 800a55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a55e:	b01d      	add	sp, #116	; 0x74
 800a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a564:	ab03      	add	r3, sp, #12
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	462a      	mov	r2, r5
 800a56a:	4b06      	ldr	r3, [pc, #24]	; (800a584 <_svfiprintf_r+0x1f8>)
 800a56c:	a904      	add	r1, sp, #16
 800a56e:	4638      	mov	r0, r7
 800a570:	f7fe fa5c 	bl	8008a2c <_printf_i>
 800a574:	e7eb      	b.n	800a54e <_svfiprintf_r+0x1c2>
 800a576:	bf00      	nop
 800a578:	0800b3d4 	.word	0x0800b3d4
 800a57c:	0800b3de 	.word	0x0800b3de
 800a580:	080084e5 	.word	0x080084e5
 800a584:	0800a2d5 	.word	0x0800a2d5
 800a588:	0800b3da 	.word	0x0800b3da

0800a58c <_sbrk_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d06      	ldr	r5, [pc, #24]	; (800a5a8 <_sbrk_r+0x1c>)
 800a590:	2300      	movs	r3, #0
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7f7 ff26 	bl	80023e8 <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_sbrk_r+0x1a>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_sbrk_r+0x1a>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	2001dd04 	.word	0x2001dd04

0800a5ac <__assert_func>:
 800a5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ae:	4614      	mov	r4, r2
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <__assert_func+0x2c>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	68d8      	ldr	r0, [r3, #12]
 800a5ba:	b14c      	cbz	r4, 800a5d0 <__assert_func+0x24>
 800a5bc:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <__assert_func+0x30>)
 800a5be:	9100      	str	r1, [sp, #0]
 800a5c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5c4:	4906      	ldr	r1, [pc, #24]	; (800a5e0 <__assert_func+0x34>)
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f000 f80e 	bl	800a5e8 <fiprintf>
 800a5cc:	f000 faac 	bl	800ab28 <abort>
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <__assert_func+0x38>)
 800a5d2:	461c      	mov	r4, r3
 800a5d4:	e7f3      	b.n	800a5be <__assert_func+0x12>
 800a5d6:	bf00      	nop
 800a5d8:	2000000c 	.word	0x2000000c
 800a5dc:	0800b3e5 	.word	0x0800b3e5
 800a5e0:	0800b3f2 	.word	0x0800b3f2
 800a5e4:	0800b420 	.word	0x0800b420

0800a5e8 <fiprintf>:
 800a5e8:	b40e      	push	{r1, r2, r3}
 800a5ea:	b503      	push	{r0, r1, lr}
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	ab03      	add	r3, sp, #12
 800a5f0:	4805      	ldr	r0, [pc, #20]	; (800a608 <fiprintf+0x20>)
 800a5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f6:	6800      	ldr	r0, [r0, #0]
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	f000 f897 	bl	800a72c <_vfiprintf_r>
 800a5fe:	b002      	add	sp, #8
 800a600:	f85d eb04 	ldr.w	lr, [sp], #4
 800a604:	b003      	add	sp, #12
 800a606:	4770      	bx	lr
 800a608:	2000000c 	.word	0x2000000c

0800a60c <__ascii_mbtowc>:
 800a60c:	b082      	sub	sp, #8
 800a60e:	b901      	cbnz	r1, 800a612 <__ascii_mbtowc+0x6>
 800a610:	a901      	add	r1, sp, #4
 800a612:	b142      	cbz	r2, 800a626 <__ascii_mbtowc+0x1a>
 800a614:	b14b      	cbz	r3, 800a62a <__ascii_mbtowc+0x1e>
 800a616:	7813      	ldrb	r3, [r2, #0]
 800a618:	600b      	str	r3, [r1, #0]
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	1e10      	subs	r0, r2, #0
 800a61e:	bf18      	it	ne
 800a620:	2001      	movne	r0, #1
 800a622:	b002      	add	sp, #8
 800a624:	4770      	bx	lr
 800a626:	4610      	mov	r0, r2
 800a628:	e7fb      	b.n	800a622 <__ascii_mbtowc+0x16>
 800a62a:	f06f 0001 	mvn.w	r0, #1
 800a62e:	e7f8      	b.n	800a622 <__ascii_mbtowc+0x16>

0800a630 <memmove>:
 800a630:	4288      	cmp	r0, r1
 800a632:	b510      	push	{r4, lr}
 800a634:	eb01 0402 	add.w	r4, r1, r2
 800a638:	d902      	bls.n	800a640 <memmove+0x10>
 800a63a:	4284      	cmp	r4, r0
 800a63c:	4623      	mov	r3, r4
 800a63e:	d807      	bhi.n	800a650 <memmove+0x20>
 800a640:	1e43      	subs	r3, r0, #1
 800a642:	42a1      	cmp	r1, r4
 800a644:	d008      	beq.n	800a658 <memmove+0x28>
 800a646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a64e:	e7f8      	b.n	800a642 <memmove+0x12>
 800a650:	4402      	add	r2, r0
 800a652:	4601      	mov	r1, r0
 800a654:	428a      	cmp	r2, r1
 800a656:	d100      	bne.n	800a65a <memmove+0x2a>
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a662:	e7f7      	b.n	800a654 <memmove+0x24>

0800a664 <__malloc_lock>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__malloc_lock+0x8>)
 800a666:	f000 bc1f 	b.w	800aea8 <__retarget_lock_acquire_recursive>
 800a66a:	bf00      	nop
 800a66c:	2001dd08 	.word	0x2001dd08

0800a670 <__malloc_unlock>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__malloc_unlock+0x8>)
 800a672:	f000 bc1a 	b.w	800aeaa <__retarget_lock_release_recursive>
 800a676:	bf00      	nop
 800a678:	2001dd08 	.word	0x2001dd08

0800a67c <_realloc_r>:
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	4680      	mov	r8, r0
 800a682:	4614      	mov	r4, r2
 800a684:	460e      	mov	r6, r1
 800a686:	b921      	cbnz	r1, 800a692 <_realloc_r+0x16>
 800a688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a68c:	4611      	mov	r1, r2
 800a68e:	f7ff bdad 	b.w	800a1ec <_malloc_r>
 800a692:	b92a      	cbnz	r2, 800a6a0 <_realloc_r+0x24>
 800a694:	f7ff fd3e 	bl	800a114 <_free_r>
 800a698:	4625      	mov	r5, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a0:	f000 fc6a 	bl	800af78 <_malloc_usable_size_r>
 800a6a4:	4284      	cmp	r4, r0
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	d802      	bhi.n	800a6b0 <_realloc_r+0x34>
 800a6aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ae:	d812      	bhi.n	800a6d6 <_realloc_r+0x5a>
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	f7ff fd9a 	bl	800a1ec <_malloc_r>
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0ed      	beq.n	800a69a <_realloc_r+0x1e>
 800a6be:	42bc      	cmp	r4, r7
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	bf28      	it	cs
 800a6c6:	463a      	movcs	r2, r7
 800a6c8:	f7ff f97c 	bl	80099c4 <memcpy>
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7ff fd20 	bl	800a114 <_free_r>
 800a6d4:	e7e1      	b.n	800a69a <_realloc_r+0x1e>
 800a6d6:	4635      	mov	r5, r6
 800a6d8:	e7df      	b.n	800a69a <_realloc_r+0x1e>

0800a6da <__sfputc_r>:
 800a6da:	6893      	ldr	r3, [r2, #8]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	b410      	push	{r4}
 800a6e2:	6093      	str	r3, [r2, #8]
 800a6e4:	da08      	bge.n	800a6f8 <__sfputc_r+0x1e>
 800a6e6:	6994      	ldr	r4, [r2, #24]
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	db01      	blt.n	800a6f0 <__sfputc_r+0x16>
 800a6ec:	290a      	cmp	r1, #10
 800a6ee:	d103      	bne.n	800a6f8 <__sfputc_r+0x1e>
 800a6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f4:	f000 b94a 	b.w	800a98c <__swbuf_r>
 800a6f8:	6813      	ldr	r3, [r2, #0]
 800a6fa:	1c58      	adds	r0, r3, #1
 800a6fc:	6010      	str	r0, [r2, #0]
 800a6fe:	7019      	strb	r1, [r3, #0]
 800a700:	4608      	mov	r0, r1
 800a702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <__sfputs_r>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	4614      	mov	r4, r2
 800a710:	18d5      	adds	r5, r2, r3
 800a712:	42ac      	cmp	r4, r5
 800a714:	d101      	bne.n	800a71a <__sfputs_r+0x12>
 800a716:	2000      	movs	r0, #0
 800a718:	e007      	b.n	800a72a <__sfputs_r+0x22>
 800a71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71e:	463a      	mov	r2, r7
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff ffda 	bl	800a6da <__sfputc_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d1f3      	bne.n	800a712 <__sfputs_r+0xa>
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a72c <_vfiprintf_r>:
 800a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	460d      	mov	r5, r1
 800a732:	b09d      	sub	sp, #116	; 0x74
 800a734:	4614      	mov	r4, r2
 800a736:	4698      	mov	r8, r3
 800a738:	4606      	mov	r6, r0
 800a73a:	b118      	cbz	r0, 800a744 <_vfiprintf_r+0x18>
 800a73c:	6983      	ldr	r3, [r0, #24]
 800a73e:	b90b      	cbnz	r3, 800a744 <_vfiprintf_r+0x18>
 800a740:	f000 fb14 	bl	800ad6c <__sinit>
 800a744:	4b89      	ldr	r3, [pc, #548]	; (800a96c <_vfiprintf_r+0x240>)
 800a746:	429d      	cmp	r5, r3
 800a748:	d11b      	bne.n	800a782 <_vfiprintf_r+0x56>
 800a74a:	6875      	ldr	r5, [r6, #4]
 800a74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a74e:	07d9      	lsls	r1, r3, #31
 800a750:	d405      	bmi.n	800a75e <_vfiprintf_r+0x32>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	059a      	lsls	r2, r3, #22
 800a756:	d402      	bmi.n	800a75e <_vfiprintf_r+0x32>
 800a758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75a:	f000 fba5 	bl	800aea8 <__retarget_lock_acquire_recursive>
 800a75e:	89ab      	ldrh	r3, [r5, #12]
 800a760:	071b      	lsls	r3, r3, #28
 800a762:	d501      	bpl.n	800a768 <_vfiprintf_r+0x3c>
 800a764:	692b      	ldr	r3, [r5, #16]
 800a766:	b9eb      	cbnz	r3, 800a7a4 <_vfiprintf_r+0x78>
 800a768:	4629      	mov	r1, r5
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 f96e 	bl	800aa4c <__swsetup_r>
 800a770:	b1c0      	cbz	r0, 800a7a4 <_vfiprintf_r+0x78>
 800a772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a774:	07dc      	lsls	r4, r3, #31
 800a776:	d50e      	bpl.n	800a796 <_vfiprintf_r+0x6a>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	b01d      	add	sp, #116	; 0x74
 800a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a782:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <_vfiprintf_r+0x244>)
 800a784:	429d      	cmp	r5, r3
 800a786:	d101      	bne.n	800a78c <_vfiprintf_r+0x60>
 800a788:	68b5      	ldr	r5, [r6, #8]
 800a78a:	e7df      	b.n	800a74c <_vfiprintf_r+0x20>
 800a78c:	4b79      	ldr	r3, [pc, #484]	; (800a974 <_vfiprintf_r+0x248>)
 800a78e:	429d      	cmp	r5, r3
 800a790:	bf08      	it	eq
 800a792:	68f5      	ldreq	r5, [r6, #12]
 800a794:	e7da      	b.n	800a74c <_vfiprintf_r+0x20>
 800a796:	89ab      	ldrh	r3, [r5, #12]
 800a798:	0598      	lsls	r0, r3, #22
 800a79a:	d4ed      	bmi.n	800a778 <_vfiprintf_r+0x4c>
 800a79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a79e:	f000 fb84 	bl	800aeaa <__retarget_lock_release_recursive>
 800a7a2:	e7e9      	b.n	800a778 <_vfiprintf_r+0x4c>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a8:	2320      	movs	r3, #32
 800a7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b2:	2330      	movs	r3, #48	; 0x30
 800a7b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a978 <_vfiprintf_r+0x24c>
 800a7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7bc:	f04f 0901 	mov.w	r9, #1
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	469a      	mov	sl, r3
 800a7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_vfiprintf_r+0xa2>
 800a7ca:	2a25      	cmp	r2, #37	; 0x25
 800a7cc:	d1f9      	bne.n	800a7c2 <_vfiprintf_r+0x96>
 800a7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d2:	d00b      	beq.n	800a7ec <_vfiprintf_r+0xc0>
 800a7d4:	465b      	mov	r3, fp
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7ff ff94 	bl	800a708 <__sfputs_r>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	f000 80aa 	beq.w	800a93a <_vfiprintf_r+0x20e>
 800a7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e8:	445a      	add	r2, fp
 800a7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80a2 	beq.w	800a93a <_vfiprintf_r+0x20e>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a800:	f10a 0a01 	add.w	sl, sl, #1
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	9307      	str	r3, [sp, #28]
 800a808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80c:	931a      	str	r3, [sp, #104]	; 0x68
 800a80e:	4654      	mov	r4, sl
 800a810:	2205      	movs	r2, #5
 800a812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a816:	4858      	ldr	r0, [pc, #352]	; (800a978 <_vfiprintf_r+0x24c>)
 800a818:	f7f5 fcfa 	bl	8000210 <memchr>
 800a81c:	9a04      	ldr	r2, [sp, #16]
 800a81e:	b9d8      	cbnz	r0, 800a858 <_vfiprintf_r+0x12c>
 800a820:	06d1      	lsls	r1, r2, #27
 800a822:	bf44      	itt	mi
 800a824:	2320      	movmi	r3, #32
 800a826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82a:	0713      	lsls	r3, r2, #28
 800a82c:	bf44      	itt	mi
 800a82e:	232b      	movmi	r3, #43	; 0x2b
 800a830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a834:	f89a 3000 	ldrb.w	r3, [sl]
 800a838:	2b2a      	cmp	r3, #42	; 0x2a
 800a83a:	d015      	beq.n	800a868 <_vfiprintf_r+0x13c>
 800a83c:	9a07      	ldr	r2, [sp, #28]
 800a83e:	4654      	mov	r4, sl
 800a840:	2000      	movs	r0, #0
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	4621      	mov	r1, r4
 800a848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84c:	3b30      	subs	r3, #48	; 0x30
 800a84e:	2b09      	cmp	r3, #9
 800a850:	d94e      	bls.n	800a8f0 <_vfiprintf_r+0x1c4>
 800a852:	b1b0      	cbz	r0, 800a882 <_vfiprintf_r+0x156>
 800a854:	9207      	str	r2, [sp, #28]
 800a856:	e014      	b.n	800a882 <_vfiprintf_r+0x156>
 800a858:	eba0 0308 	sub.w	r3, r0, r8
 800a85c:	fa09 f303 	lsl.w	r3, r9, r3
 800a860:	4313      	orrs	r3, r2
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	46a2      	mov	sl, r4
 800a866:	e7d2      	b.n	800a80e <_vfiprintf_r+0xe2>
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	1d19      	adds	r1, r3, #4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	9103      	str	r1, [sp, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	bfbb      	ittet	lt
 800a874:	425b      	neglt	r3, r3
 800a876:	f042 0202 	orrlt.w	r2, r2, #2
 800a87a:	9307      	strge	r3, [sp, #28]
 800a87c:	9307      	strlt	r3, [sp, #28]
 800a87e:	bfb8      	it	lt
 800a880:	9204      	strlt	r2, [sp, #16]
 800a882:	7823      	ldrb	r3, [r4, #0]
 800a884:	2b2e      	cmp	r3, #46	; 0x2e
 800a886:	d10c      	bne.n	800a8a2 <_vfiprintf_r+0x176>
 800a888:	7863      	ldrb	r3, [r4, #1]
 800a88a:	2b2a      	cmp	r3, #42	; 0x2a
 800a88c:	d135      	bne.n	800a8fa <_vfiprintf_r+0x1ce>
 800a88e:	9b03      	ldr	r3, [sp, #12]
 800a890:	1d1a      	adds	r2, r3, #4
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	9203      	str	r2, [sp, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfb8      	it	lt
 800a89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89e:	3402      	adds	r4, #2
 800a8a0:	9305      	str	r3, [sp, #20]
 800a8a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a988 <_vfiprintf_r+0x25c>
 800a8a6:	7821      	ldrb	r1, [r4, #0]
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	f7f5 fcb0 	bl	8000210 <memchr>
 800a8b0:	b140      	cbz	r0, 800a8c4 <_vfiprintf_r+0x198>
 800a8b2:	2340      	movs	r3, #64	; 0x40
 800a8b4:	eba0 000a 	sub.w	r0, r0, sl
 800a8b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a8bc:	9b04      	ldr	r3, [sp, #16]
 800a8be:	4303      	orrs	r3, r0
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c8:	482c      	ldr	r0, [pc, #176]	; (800a97c <_vfiprintf_r+0x250>)
 800a8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ce:	2206      	movs	r2, #6
 800a8d0:	f7f5 fc9e 	bl	8000210 <memchr>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d03f      	beq.n	800a958 <_vfiprintf_r+0x22c>
 800a8d8:	4b29      	ldr	r3, [pc, #164]	; (800a980 <_vfiprintf_r+0x254>)
 800a8da:	bb1b      	cbnz	r3, 800a924 <_vfiprintf_r+0x1f8>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	3307      	adds	r3, #7
 800a8e0:	f023 0307 	bic.w	r3, r3, #7
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	9303      	str	r3, [sp, #12]
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	443b      	add	r3, r7
 800a8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ee:	e767      	b.n	800a7c0 <_vfiprintf_r+0x94>
 800a8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	e7a5      	b.n	800a846 <_vfiprintf_r+0x11a>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	9305      	str	r3, [sp, #20]
 800a900:	4619      	mov	r1, r3
 800a902:	f04f 0c0a 	mov.w	ip, #10
 800a906:	4620      	mov	r0, r4
 800a908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90c:	3a30      	subs	r2, #48	; 0x30
 800a90e:	2a09      	cmp	r2, #9
 800a910:	d903      	bls.n	800a91a <_vfiprintf_r+0x1ee>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0c5      	beq.n	800a8a2 <_vfiprintf_r+0x176>
 800a916:	9105      	str	r1, [sp, #20]
 800a918:	e7c3      	b.n	800a8a2 <_vfiprintf_r+0x176>
 800a91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91e:	4604      	mov	r4, r0
 800a920:	2301      	movs	r3, #1
 800a922:	e7f0      	b.n	800a906 <_vfiprintf_r+0x1da>
 800a924:	ab03      	add	r3, sp, #12
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	462a      	mov	r2, r5
 800a92a:	4b16      	ldr	r3, [pc, #88]	; (800a984 <_vfiprintf_r+0x258>)
 800a92c:	a904      	add	r1, sp, #16
 800a92e:	4630      	mov	r0, r6
 800a930:	f7fd fdd8 	bl	80084e4 <_printf_float>
 800a934:	4607      	mov	r7, r0
 800a936:	1c78      	adds	r0, r7, #1
 800a938:	d1d6      	bne.n	800a8e8 <_vfiprintf_r+0x1bc>
 800a93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a93c:	07d9      	lsls	r1, r3, #31
 800a93e:	d405      	bmi.n	800a94c <_vfiprintf_r+0x220>
 800a940:	89ab      	ldrh	r3, [r5, #12]
 800a942:	059a      	lsls	r2, r3, #22
 800a944:	d402      	bmi.n	800a94c <_vfiprintf_r+0x220>
 800a946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a948:	f000 faaf 	bl	800aeaa <__retarget_lock_release_recursive>
 800a94c:	89ab      	ldrh	r3, [r5, #12]
 800a94e:	065b      	lsls	r3, r3, #25
 800a950:	f53f af12 	bmi.w	800a778 <_vfiprintf_r+0x4c>
 800a954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a956:	e711      	b.n	800a77c <_vfiprintf_r+0x50>
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462a      	mov	r2, r5
 800a95e:	4b09      	ldr	r3, [pc, #36]	; (800a984 <_vfiprintf_r+0x258>)
 800a960:	a904      	add	r1, sp, #16
 800a962:	4630      	mov	r0, r6
 800a964:	f7fe f862 	bl	8008a2c <_printf_i>
 800a968:	e7e4      	b.n	800a934 <_vfiprintf_r+0x208>
 800a96a:	bf00      	nop
 800a96c:	0800b54c 	.word	0x0800b54c
 800a970:	0800b56c 	.word	0x0800b56c
 800a974:	0800b52c 	.word	0x0800b52c
 800a978:	0800b3d4 	.word	0x0800b3d4
 800a97c:	0800b3de 	.word	0x0800b3de
 800a980:	080084e5 	.word	0x080084e5
 800a984:	0800a709 	.word	0x0800a709
 800a988:	0800b3da 	.word	0x0800b3da

0800a98c <__swbuf_r>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	460e      	mov	r6, r1
 800a990:	4614      	mov	r4, r2
 800a992:	4605      	mov	r5, r0
 800a994:	b118      	cbz	r0, 800a99e <__swbuf_r+0x12>
 800a996:	6983      	ldr	r3, [r0, #24]
 800a998:	b90b      	cbnz	r3, 800a99e <__swbuf_r+0x12>
 800a99a:	f000 f9e7 	bl	800ad6c <__sinit>
 800a99e:	4b21      	ldr	r3, [pc, #132]	; (800aa24 <__swbuf_r+0x98>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	d12b      	bne.n	800a9fc <__swbuf_r+0x70>
 800a9a4:	686c      	ldr	r4, [r5, #4]
 800a9a6:	69a3      	ldr	r3, [r4, #24]
 800a9a8:	60a3      	str	r3, [r4, #8]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	071a      	lsls	r2, r3, #28
 800a9ae:	d52f      	bpl.n	800aa10 <__swbuf_r+0x84>
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	b36b      	cbz	r3, 800aa10 <__swbuf_r+0x84>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	6820      	ldr	r0, [r4, #0]
 800a9b8:	1ac0      	subs	r0, r0, r3
 800a9ba:	6963      	ldr	r3, [r4, #20]
 800a9bc:	b2f6      	uxtb	r6, r6
 800a9be:	4283      	cmp	r3, r0
 800a9c0:	4637      	mov	r7, r6
 800a9c2:	dc04      	bgt.n	800a9ce <__swbuf_r+0x42>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 f93c 	bl	800ac44 <_fflush_r>
 800a9cc:	bb30      	cbnz	r0, 800aa1c <__swbuf_r+0x90>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	60a3      	str	r3, [r4, #8]
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	701e      	strb	r6, [r3, #0]
 800a9dc:	6963      	ldr	r3, [r4, #20]
 800a9de:	3001      	adds	r0, #1
 800a9e0:	4283      	cmp	r3, r0
 800a9e2:	d004      	beq.n	800a9ee <__swbuf_r+0x62>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	07db      	lsls	r3, r3, #31
 800a9e8:	d506      	bpl.n	800a9f8 <__swbuf_r+0x6c>
 800a9ea:	2e0a      	cmp	r6, #10
 800a9ec:	d104      	bne.n	800a9f8 <__swbuf_r+0x6c>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 f927 	bl	800ac44 <_fflush_r>
 800a9f6:	b988      	cbnz	r0, 800aa1c <__swbuf_r+0x90>
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <__swbuf_r+0x9c>)
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	d101      	bne.n	800aa06 <__swbuf_r+0x7a>
 800aa02:	68ac      	ldr	r4, [r5, #8]
 800aa04:	e7cf      	b.n	800a9a6 <__swbuf_r+0x1a>
 800aa06:	4b09      	ldr	r3, [pc, #36]	; (800aa2c <__swbuf_r+0xa0>)
 800aa08:	429c      	cmp	r4, r3
 800aa0a:	bf08      	it	eq
 800aa0c:	68ec      	ldreq	r4, [r5, #12]
 800aa0e:	e7ca      	b.n	800a9a6 <__swbuf_r+0x1a>
 800aa10:	4621      	mov	r1, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	f000 f81a 	bl	800aa4c <__swsetup_r>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d0cb      	beq.n	800a9b4 <__swbuf_r+0x28>
 800aa1c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa20:	e7ea      	b.n	800a9f8 <__swbuf_r+0x6c>
 800aa22:	bf00      	nop
 800aa24:	0800b54c 	.word	0x0800b54c
 800aa28:	0800b56c 	.word	0x0800b56c
 800aa2c:	0800b52c 	.word	0x0800b52c

0800aa30 <__ascii_wctomb>:
 800aa30:	b149      	cbz	r1, 800aa46 <__ascii_wctomb+0x16>
 800aa32:	2aff      	cmp	r2, #255	; 0xff
 800aa34:	bf85      	ittet	hi
 800aa36:	238a      	movhi	r3, #138	; 0x8a
 800aa38:	6003      	strhi	r3, [r0, #0]
 800aa3a:	700a      	strbls	r2, [r1, #0]
 800aa3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa40:	bf98      	it	ls
 800aa42:	2001      	movls	r0, #1
 800aa44:	4770      	bx	lr
 800aa46:	4608      	mov	r0, r1
 800aa48:	4770      	bx	lr
	...

0800aa4c <__swsetup_r>:
 800aa4c:	4b32      	ldr	r3, [pc, #200]	; (800ab18 <__swsetup_r+0xcc>)
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	681d      	ldr	r5, [r3, #0]
 800aa52:	4606      	mov	r6, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	b125      	cbz	r5, 800aa62 <__swsetup_r+0x16>
 800aa58:	69ab      	ldr	r3, [r5, #24]
 800aa5a:	b913      	cbnz	r3, 800aa62 <__swsetup_r+0x16>
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f000 f985 	bl	800ad6c <__sinit>
 800aa62:	4b2e      	ldr	r3, [pc, #184]	; (800ab1c <__swsetup_r+0xd0>)
 800aa64:	429c      	cmp	r4, r3
 800aa66:	d10f      	bne.n	800aa88 <__swsetup_r+0x3c>
 800aa68:	686c      	ldr	r4, [r5, #4]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa70:	0719      	lsls	r1, r3, #28
 800aa72:	d42c      	bmi.n	800aace <__swsetup_r+0x82>
 800aa74:	06dd      	lsls	r5, r3, #27
 800aa76:	d411      	bmi.n	800aa9c <__swsetup_r+0x50>
 800aa78:	2309      	movs	r3, #9
 800aa7a:	6033      	str	r3, [r6, #0]
 800aa7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295
 800aa86:	e03e      	b.n	800ab06 <__swsetup_r+0xba>
 800aa88:	4b25      	ldr	r3, [pc, #148]	; (800ab20 <__swsetup_r+0xd4>)
 800aa8a:	429c      	cmp	r4, r3
 800aa8c:	d101      	bne.n	800aa92 <__swsetup_r+0x46>
 800aa8e:	68ac      	ldr	r4, [r5, #8]
 800aa90:	e7eb      	b.n	800aa6a <__swsetup_r+0x1e>
 800aa92:	4b24      	ldr	r3, [pc, #144]	; (800ab24 <__swsetup_r+0xd8>)
 800aa94:	429c      	cmp	r4, r3
 800aa96:	bf08      	it	eq
 800aa98:	68ec      	ldreq	r4, [r5, #12]
 800aa9a:	e7e6      	b.n	800aa6a <__swsetup_r+0x1e>
 800aa9c:	0758      	lsls	r0, r3, #29
 800aa9e:	d512      	bpl.n	800aac6 <__swsetup_r+0x7a>
 800aaa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaa2:	b141      	cbz	r1, 800aab6 <__swsetup_r+0x6a>
 800aaa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d002      	beq.n	800aab2 <__swsetup_r+0x66>
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff fb31 	bl	800a114 <_free_r>
 800aab2:	2300      	movs	r3, #0
 800aab4:	6363      	str	r3, [r4, #52]	; 0x34
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	2300      	movs	r3, #0
 800aac0:	6063      	str	r3, [r4, #4]
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f043 0308 	orr.w	r3, r3, #8
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	b94b      	cbnz	r3, 800aae6 <__swsetup_r+0x9a>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aadc:	d003      	beq.n	800aae6 <__swsetup_r+0x9a>
 800aade:	4621      	mov	r1, r4
 800aae0:	4630      	mov	r0, r6
 800aae2:	f000 fa09 	bl	800aef8 <__smakebuf_r>
 800aae6:	89a0      	ldrh	r0, [r4, #12]
 800aae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaec:	f010 0301 	ands.w	r3, r0, #1
 800aaf0:	d00a      	beq.n	800ab08 <__swsetup_r+0xbc>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60a3      	str	r3, [r4, #8]
 800aaf6:	6963      	ldr	r3, [r4, #20]
 800aaf8:	425b      	negs	r3, r3
 800aafa:	61a3      	str	r3, [r4, #24]
 800aafc:	6923      	ldr	r3, [r4, #16]
 800aafe:	b943      	cbnz	r3, 800ab12 <__swsetup_r+0xc6>
 800ab00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab04:	d1ba      	bne.n	800aa7c <__swsetup_r+0x30>
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
 800ab08:	0781      	lsls	r1, r0, #30
 800ab0a:	bf58      	it	pl
 800ab0c:	6963      	ldrpl	r3, [r4, #20]
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	e7f4      	b.n	800aafc <__swsetup_r+0xb0>
 800ab12:	2000      	movs	r0, #0
 800ab14:	e7f7      	b.n	800ab06 <__swsetup_r+0xba>
 800ab16:	bf00      	nop
 800ab18:	2000000c 	.word	0x2000000c
 800ab1c:	0800b54c 	.word	0x0800b54c
 800ab20:	0800b56c 	.word	0x0800b56c
 800ab24:	0800b52c 	.word	0x0800b52c

0800ab28 <abort>:
 800ab28:	b508      	push	{r3, lr}
 800ab2a:	2006      	movs	r0, #6
 800ab2c:	f000 fa54 	bl	800afd8 <raise>
 800ab30:	2001      	movs	r0, #1
 800ab32:	f7f7 fbe1 	bl	80022f8 <_exit>
	...

0800ab38 <__sflush_r>:
 800ab38:	898a      	ldrh	r2, [r1, #12]
 800ab3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	4605      	mov	r5, r0
 800ab40:	0710      	lsls	r0, r2, #28
 800ab42:	460c      	mov	r4, r1
 800ab44:	d458      	bmi.n	800abf8 <__sflush_r+0xc0>
 800ab46:	684b      	ldr	r3, [r1, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dc05      	bgt.n	800ab58 <__sflush_r+0x20>
 800ab4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dc02      	bgt.n	800ab58 <__sflush_r+0x20>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab5a:	2e00      	cmp	r6, #0
 800ab5c:	d0f9      	beq.n	800ab52 <__sflush_r+0x1a>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab64:	682f      	ldr	r7, [r5, #0]
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	d032      	beq.n	800abd0 <__sflush_r+0x98>
 800ab6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	075a      	lsls	r2, r3, #29
 800ab70:	d505      	bpl.n	800ab7e <__sflush_r+0x46>
 800ab72:	6863      	ldr	r3, [r4, #4]
 800ab74:	1ac0      	subs	r0, r0, r3
 800ab76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab78:	b10b      	cbz	r3, 800ab7e <__sflush_r+0x46>
 800ab7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab7c:	1ac0      	subs	r0, r0, r3
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4602      	mov	r2, r0
 800ab82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab84:	6a21      	ldr	r1, [r4, #32]
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b0      	blx	r6
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	d106      	bne.n	800ab9e <__sflush_r+0x66>
 800ab90:	6829      	ldr	r1, [r5, #0]
 800ab92:	291d      	cmp	r1, #29
 800ab94:	d82c      	bhi.n	800abf0 <__sflush_r+0xb8>
 800ab96:	4a2a      	ldr	r2, [pc, #168]	; (800ac40 <__sflush_r+0x108>)
 800ab98:	40ca      	lsrs	r2, r1
 800ab9a:	07d6      	lsls	r6, r2, #31
 800ab9c:	d528      	bpl.n	800abf0 <__sflush_r+0xb8>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	6062      	str	r2, [r4, #4]
 800aba2:	04d9      	lsls	r1, r3, #19
 800aba4:	6922      	ldr	r2, [r4, #16]
 800aba6:	6022      	str	r2, [r4, #0]
 800aba8:	d504      	bpl.n	800abb4 <__sflush_r+0x7c>
 800abaa:	1c42      	adds	r2, r0, #1
 800abac:	d101      	bne.n	800abb2 <__sflush_r+0x7a>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	b903      	cbnz	r3, 800abb4 <__sflush_r+0x7c>
 800abb2:	6560      	str	r0, [r4, #84]	; 0x54
 800abb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abb6:	602f      	str	r7, [r5, #0]
 800abb8:	2900      	cmp	r1, #0
 800abba:	d0ca      	beq.n	800ab52 <__sflush_r+0x1a>
 800abbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc0:	4299      	cmp	r1, r3
 800abc2:	d002      	beq.n	800abca <__sflush_r+0x92>
 800abc4:	4628      	mov	r0, r5
 800abc6:	f7ff faa5 	bl	800a114 <_free_r>
 800abca:	2000      	movs	r0, #0
 800abcc:	6360      	str	r0, [r4, #52]	; 0x34
 800abce:	e7c1      	b.n	800ab54 <__sflush_r+0x1c>
 800abd0:	6a21      	ldr	r1, [r4, #32]
 800abd2:	2301      	movs	r3, #1
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b0      	blx	r6
 800abd8:	1c41      	adds	r1, r0, #1
 800abda:	d1c7      	bne.n	800ab6c <__sflush_r+0x34>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0c4      	beq.n	800ab6c <__sflush_r+0x34>
 800abe2:	2b1d      	cmp	r3, #29
 800abe4:	d001      	beq.n	800abea <__sflush_r+0xb2>
 800abe6:	2b16      	cmp	r3, #22
 800abe8:	d101      	bne.n	800abee <__sflush_r+0xb6>
 800abea:	602f      	str	r7, [r5, #0]
 800abec:	e7b1      	b.n	800ab52 <__sflush_r+0x1a>
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf4:	81a3      	strh	r3, [r4, #12]
 800abf6:	e7ad      	b.n	800ab54 <__sflush_r+0x1c>
 800abf8:	690f      	ldr	r7, [r1, #16]
 800abfa:	2f00      	cmp	r7, #0
 800abfc:	d0a9      	beq.n	800ab52 <__sflush_r+0x1a>
 800abfe:	0793      	lsls	r3, r2, #30
 800ac00:	680e      	ldr	r6, [r1, #0]
 800ac02:	bf08      	it	eq
 800ac04:	694b      	ldreq	r3, [r1, #20]
 800ac06:	600f      	str	r7, [r1, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	eba6 0807 	sub.w	r8, r6, r7
 800ac10:	608b      	str	r3, [r1, #8]
 800ac12:	f1b8 0f00 	cmp.w	r8, #0
 800ac16:	dd9c      	ble.n	800ab52 <__sflush_r+0x1a>
 800ac18:	6a21      	ldr	r1, [r4, #32]
 800ac1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac1c:	4643      	mov	r3, r8
 800ac1e:	463a      	mov	r2, r7
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b0      	blx	r6
 800ac24:	2800      	cmp	r0, #0
 800ac26:	dc06      	bgt.n	800ac36 <__sflush_r+0xfe>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	e78e      	b.n	800ab54 <__sflush_r+0x1c>
 800ac36:	4407      	add	r7, r0
 800ac38:	eba8 0800 	sub.w	r8, r8, r0
 800ac3c:	e7e9      	b.n	800ac12 <__sflush_r+0xda>
 800ac3e:	bf00      	nop
 800ac40:	20400001 	.word	0x20400001

0800ac44 <_fflush_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	690b      	ldr	r3, [r1, #16]
 800ac48:	4605      	mov	r5, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	b913      	cbnz	r3, 800ac54 <_fflush_r+0x10>
 800ac4e:	2500      	movs	r5, #0
 800ac50:	4628      	mov	r0, r5
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	b118      	cbz	r0, 800ac5e <_fflush_r+0x1a>
 800ac56:	6983      	ldr	r3, [r0, #24]
 800ac58:	b90b      	cbnz	r3, 800ac5e <_fflush_r+0x1a>
 800ac5a:	f000 f887 	bl	800ad6c <__sinit>
 800ac5e:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <_fflush_r+0x6c>)
 800ac60:	429c      	cmp	r4, r3
 800ac62:	d11b      	bne.n	800ac9c <_fflush_r+0x58>
 800ac64:	686c      	ldr	r4, [r5, #4]
 800ac66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0ef      	beq.n	800ac4e <_fflush_r+0xa>
 800ac6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac70:	07d0      	lsls	r0, r2, #31
 800ac72:	d404      	bmi.n	800ac7e <_fflush_r+0x3a>
 800ac74:	0599      	lsls	r1, r3, #22
 800ac76:	d402      	bmi.n	800ac7e <_fflush_r+0x3a>
 800ac78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac7a:	f000 f915 	bl	800aea8 <__retarget_lock_acquire_recursive>
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4621      	mov	r1, r4
 800ac82:	f7ff ff59 	bl	800ab38 <__sflush_r>
 800ac86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac88:	07da      	lsls	r2, r3, #31
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	d4e0      	bmi.n	800ac50 <_fflush_r+0xc>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	059b      	lsls	r3, r3, #22
 800ac92:	d4dd      	bmi.n	800ac50 <_fflush_r+0xc>
 800ac94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac96:	f000 f908 	bl	800aeaa <__retarget_lock_release_recursive>
 800ac9a:	e7d9      	b.n	800ac50 <_fflush_r+0xc>
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <_fflush_r+0x70>)
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d101      	bne.n	800aca6 <_fflush_r+0x62>
 800aca2:	68ac      	ldr	r4, [r5, #8]
 800aca4:	e7df      	b.n	800ac66 <_fflush_r+0x22>
 800aca6:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <_fflush_r+0x74>)
 800aca8:	429c      	cmp	r4, r3
 800acaa:	bf08      	it	eq
 800acac:	68ec      	ldreq	r4, [r5, #12]
 800acae:	e7da      	b.n	800ac66 <_fflush_r+0x22>
 800acb0:	0800b54c 	.word	0x0800b54c
 800acb4:	0800b56c 	.word	0x0800b56c
 800acb8:	0800b52c 	.word	0x0800b52c

0800acbc <std>:
 800acbc:	2300      	movs	r3, #0
 800acbe:	b510      	push	{r4, lr}
 800acc0:	4604      	mov	r4, r0
 800acc2:	e9c0 3300 	strd	r3, r3, [r0]
 800acc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acca:	6083      	str	r3, [r0, #8]
 800accc:	8181      	strh	r1, [r0, #12]
 800acce:	6643      	str	r3, [r0, #100]	; 0x64
 800acd0:	81c2      	strh	r2, [r0, #14]
 800acd2:	6183      	str	r3, [r0, #24]
 800acd4:	4619      	mov	r1, r3
 800acd6:	2208      	movs	r2, #8
 800acd8:	305c      	adds	r0, #92	; 0x5c
 800acda:	f7fd fb5b 	bl	8008394 <memset>
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <std+0x38>)
 800ace0:	6263      	str	r3, [r4, #36]	; 0x24
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <std+0x3c>)
 800ace4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x40>)
 800ace8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x44>)
 800acec:	6224      	str	r4, [r4, #32]
 800acee:	6323      	str	r3, [r4, #48]	; 0x30
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	bf00      	nop
 800acf4:	0800b011 	.word	0x0800b011
 800acf8:	0800b033 	.word	0x0800b033
 800acfc:	0800b06b 	.word	0x0800b06b
 800ad00:	0800b08f 	.word	0x0800b08f

0800ad04 <_cleanup_r>:
 800ad04:	4901      	ldr	r1, [pc, #4]	; (800ad0c <_cleanup_r+0x8>)
 800ad06:	f000 b8af 	b.w	800ae68 <_fwalk_reent>
 800ad0a:	bf00      	nop
 800ad0c:	0800ac45 	.word	0x0800ac45

0800ad10 <__sfmoreglue>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	2268      	movs	r2, #104	; 0x68
 800ad14:	1e4d      	subs	r5, r1, #1
 800ad16:	4355      	muls	r5, r2
 800ad18:	460e      	mov	r6, r1
 800ad1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad1e:	f7ff fa65 	bl	800a1ec <_malloc_r>
 800ad22:	4604      	mov	r4, r0
 800ad24:	b140      	cbz	r0, 800ad38 <__sfmoreglue+0x28>
 800ad26:	2100      	movs	r1, #0
 800ad28:	e9c0 1600 	strd	r1, r6, [r0]
 800ad2c:	300c      	adds	r0, #12
 800ad2e:	60a0      	str	r0, [r4, #8]
 800ad30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad34:	f7fd fb2e 	bl	8008394 <memset>
 800ad38:	4620      	mov	r0, r4
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}

0800ad3c <__sfp_lock_acquire>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sfp_lock_acquire+0x8>)
 800ad3e:	f000 b8b3 	b.w	800aea8 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	2001dd09 	.word	0x2001dd09

0800ad48 <__sfp_lock_release>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__sfp_lock_release+0x8>)
 800ad4a:	f000 b8ae 	b.w	800aeaa <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	2001dd09 	.word	0x2001dd09

0800ad54 <__sinit_lock_acquire>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__sinit_lock_acquire+0x8>)
 800ad56:	f000 b8a7 	b.w	800aea8 <__retarget_lock_acquire_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	2001dd0a 	.word	0x2001dd0a

0800ad60 <__sinit_lock_release>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__sinit_lock_release+0x8>)
 800ad62:	f000 b8a2 	b.w	800aeaa <__retarget_lock_release_recursive>
 800ad66:	bf00      	nop
 800ad68:	2001dd0a 	.word	0x2001dd0a

0800ad6c <__sinit>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f7ff fff0 	bl	800ad54 <__sinit_lock_acquire>
 800ad74:	69a3      	ldr	r3, [r4, #24]
 800ad76:	b11b      	cbz	r3, 800ad80 <__sinit+0x14>
 800ad78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7c:	f7ff bff0 	b.w	800ad60 <__sinit_lock_release>
 800ad80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad84:	6523      	str	r3, [r4, #80]	; 0x50
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <__sinit+0x68>)
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <__sinit+0x6c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	bf04      	itt	eq
 800ad92:	2301      	moveq	r3, #1
 800ad94:	61a3      	streq	r3, [r4, #24]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 f820 	bl	800addc <__sfp>
 800ad9c:	6060      	str	r0, [r4, #4]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f81c 	bl	800addc <__sfp>
 800ada4:	60a0      	str	r0, [r4, #8]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 f818 	bl	800addc <__sfp>
 800adac:	2200      	movs	r2, #0
 800adae:	60e0      	str	r0, [r4, #12]
 800adb0:	2104      	movs	r1, #4
 800adb2:	6860      	ldr	r0, [r4, #4]
 800adb4:	f7ff ff82 	bl	800acbc <std>
 800adb8:	68a0      	ldr	r0, [r4, #8]
 800adba:	2201      	movs	r2, #1
 800adbc:	2109      	movs	r1, #9
 800adbe:	f7ff ff7d 	bl	800acbc <std>
 800adc2:	68e0      	ldr	r0, [r4, #12]
 800adc4:	2202      	movs	r2, #2
 800adc6:	2112      	movs	r1, #18
 800adc8:	f7ff ff78 	bl	800acbc <std>
 800adcc:	2301      	movs	r3, #1
 800adce:	61a3      	str	r3, [r4, #24]
 800add0:	e7d2      	b.n	800ad78 <__sinit+0xc>
 800add2:	bf00      	nop
 800add4:	0800b1b0 	.word	0x0800b1b0
 800add8:	0800ad05 	.word	0x0800ad05

0800addc <__sfp>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	4607      	mov	r7, r0
 800ade0:	f7ff ffac 	bl	800ad3c <__sfp_lock_acquire>
 800ade4:	4b1e      	ldr	r3, [pc, #120]	; (800ae60 <__sfp+0x84>)
 800ade6:	681e      	ldr	r6, [r3, #0]
 800ade8:	69b3      	ldr	r3, [r6, #24]
 800adea:	b913      	cbnz	r3, 800adf2 <__sfp+0x16>
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbd 	bl	800ad6c <__sinit>
 800adf2:	3648      	adds	r6, #72	; 0x48
 800adf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	d503      	bpl.n	800ae04 <__sfp+0x28>
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	b30b      	cbz	r3, 800ae44 <__sfp+0x68>
 800ae00:	6836      	ldr	r6, [r6, #0]
 800ae02:	e7f7      	b.n	800adf4 <__sfp+0x18>
 800ae04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae08:	b9d5      	cbnz	r5, 800ae40 <__sfp+0x64>
 800ae0a:	4b16      	ldr	r3, [pc, #88]	; (800ae64 <__sfp+0x88>)
 800ae0c:	60e3      	str	r3, [r4, #12]
 800ae0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae12:	6665      	str	r5, [r4, #100]	; 0x64
 800ae14:	f000 f847 	bl	800aea6 <__retarget_lock_init_recursive>
 800ae18:	f7ff ff96 	bl	800ad48 <__sfp_lock_release>
 800ae1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae24:	6025      	str	r5, [r4, #0]
 800ae26:	61a5      	str	r5, [r4, #24]
 800ae28:	2208      	movs	r2, #8
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae30:	f7fd fab0 	bl	8008394 <memset>
 800ae34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae40:	3468      	adds	r4, #104	; 0x68
 800ae42:	e7d9      	b.n	800adf8 <__sfp+0x1c>
 800ae44:	2104      	movs	r1, #4
 800ae46:	4638      	mov	r0, r7
 800ae48:	f7ff ff62 	bl	800ad10 <__sfmoreglue>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	6030      	str	r0, [r6, #0]
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1d5      	bne.n	800ae00 <__sfp+0x24>
 800ae54:	f7ff ff78 	bl	800ad48 <__sfp_lock_release>
 800ae58:	230c      	movs	r3, #12
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	e7ee      	b.n	800ae3c <__sfp+0x60>
 800ae5e:	bf00      	nop
 800ae60:	0800b1b0 	.word	0x0800b1b0
 800ae64:	ffff0001 	.word	0xffff0001

0800ae68 <_fwalk_reent>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	4688      	mov	r8, r1
 800ae70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae74:	2700      	movs	r7, #0
 800ae76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae7a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae7e:	d505      	bpl.n	800ae8c <_fwalk_reent+0x24>
 800ae80:	6824      	ldr	r4, [r4, #0]
 800ae82:	2c00      	cmp	r4, #0
 800ae84:	d1f7      	bne.n	800ae76 <_fwalk_reent+0xe>
 800ae86:	4638      	mov	r0, r7
 800ae88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8c:	89ab      	ldrh	r3, [r5, #12]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d907      	bls.n	800aea2 <_fwalk_reent+0x3a>
 800ae92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae96:	3301      	adds	r3, #1
 800ae98:	d003      	beq.n	800aea2 <_fwalk_reent+0x3a>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	47c0      	blx	r8
 800aea0:	4307      	orrs	r7, r0
 800aea2:	3568      	adds	r5, #104	; 0x68
 800aea4:	e7e9      	b.n	800ae7a <_fwalk_reent+0x12>

0800aea6 <__retarget_lock_init_recursive>:
 800aea6:	4770      	bx	lr

0800aea8 <__retarget_lock_acquire_recursive>:
 800aea8:	4770      	bx	lr

0800aeaa <__retarget_lock_release_recursive>:
 800aeaa:	4770      	bx	lr

0800aeac <__swhatbuf_r>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	460e      	mov	r6, r1
 800aeb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	b096      	sub	sp, #88	; 0x58
 800aeb8:	4614      	mov	r4, r2
 800aeba:	461d      	mov	r5, r3
 800aebc:	da08      	bge.n	800aed0 <__swhatbuf_r+0x24>
 800aebe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	602a      	str	r2, [r5, #0]
 800aec6:	061a      	lsls	r2, r3, #24
 800aec8:	d410      	bmi.n	800aeec <__swhatbuf_r+0x40>
 800aeca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aece:	e00e      	b.n	800aeee <__swhatbuf_r+0x42>
 800aed0:	466a      	mov	r2, sp
 800aed2:	f000 f903 	bl	800b0dc <_fstat_r>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	dbf1      	blt.n	800aebe <__swhatbuf_r+0x12>
 800aeda:	9a01      	ldr	r2, [sp, #4]
 800aedc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aee0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aee4:	425a      	negs	r2, r3
 800aee6:	415a      	adcs	r2, r3
 800aee8:	602a      	str	r2, [r5, #0]
 800aeea:	e7ee      	b.n	800aeca <__swhatbuf_r+0x1e>
 800aeec:	2340      	movs	r3, #64	; 0x40
 800aeee:	2000      	movs	r0, #0
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	b016      	add	sp, #88	; 0x58
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aef8 <__smakebuf_r>:
 800aef8:	898b      	ldrh	r3, [r1, #12]
 800aefa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aefc:	079d      	lsls	r5, r3, #30
 800aefe:	4606      	mov	r6, r0
 800af00:	460c      	mov	r4, r1
 800af02:	d507      	bpl.n	800af14 <__smakebuf_r+0x1c>
 800af04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	6123      	str	r3, [r4, #16]
 800af0c:	2301      	movs	r3, #1
 800af0e:	6163      	str	r3, [r4, #20]
 800af10:	b002      	add	sp, #8
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	ab01      	add	r3, sp, #4
 800af16:	466a      	mov	r2, sp
 800af18:	f7ff ffc8 	bl	800aeac <__swhatbuf_r>
 800af1c:	9900      	ldr	r1, [sp, #0]
 800af1e:	4605      	mov	r5, r0
 800af20:	4630      	mov	r0, r6
 800af22:	f7ff f963 	bl	800a1ec <_malloc_r>
 800af26:	b948      	cbnz	r0, 800af3c <__smakebuf_r+0x44>
 800af28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af2c:	059a      	lsls	r2, r3, #22
 800af2e:	d4ef      	bmi.n	800af10 <__smakebuf_r+0x18>
 800af30:	f023 0303 	bic.w	r3, r3, #3
 800af34:	f043 0302 	orr.w	r3, r3, #2
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	e7e3      	b.n	800af04 <__smakebuf_r+0xc>
 800af3c:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <__smakebuf_r+0x7c>)
 800af3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	6020      	str	r0, [r4, #0]
 800af44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	9b00      	ldr	r3, [sp, #0]
 800af4c:	6163      	str	r3, [r4, #20]
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	6120      	str	r0, [r4, #16]
 800af52:	b15b      	cbz	r3, 800af6c <__smakebuf_r+0x74>
 800af54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af58:	4630      	mov	r0, r6
 800af5a:	f000 f8d1 	bl	800b100 <_isatty_r>
 800af5e:	b128      	cbz	r0, 800af6c <__smakebuf_r+0x74>
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	f043 0301 	orr.w	r3, r3, #1
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	89a0      	ldrh	r0, [r4, #12]
 800af6e:	4305      	orrs	r5, r0
 800af70:	81a5      	strh	r5, [r4, #12]
 800af72:	e7cd      	b.n	800af10 <__smakebuf_r+0x18>
 800af74:	0800ad05 	.word	0x0800ad05

0800af78 <_malloc_usable_size_r>:
 800af78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af7c:	1f18      	subs	r0, r3, #4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbc      	itt	lt
 800af82:	580b      	ldrlt	r3, [r1, r0]
 800af84:	18c0      	addlt	r0, r0, r3
 800af86:	4770      	bx	lr

0800af88 <_raise_r>:
 800af88:	291f      	cmp	r1, #31
 800af8a:	b538      	push	{r3, r4, r5, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	d904      	bls.n	800af9c <_raise_r+0x14>
 800af92:	2316      	movs	r3, #22
 800af94:	6003      	str	r3, [r0, #0]
 800af96:	f04f 30ff 	mov.w	r0, #4294967295
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af9e:	b112      	cbz	r2, 800afa6 <_raise_r+0x1e>
 800afa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa4:	b94b      	cbnz	r3, 800afba <_raise_r+0x32>
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f830 	bl	800b00c <_getpid_r>
 800afac:	462a      	mov	r2, r5
 800afae:	4601      	mov	r1, r0
 800afb0:	4620      	mov	r0, r4
 800afb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb6:	f000 b817 	b.w	800afe8 <_kill_r>
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d00a      	beq.n	800afd4 <_raise_r+0x4c>
 800afbe:	1c59      	adds	r1, r3, #1
 800afc0:	d103      	bne.n	800afca <_raise_r+0x42>
 800afc2:	2316      	movs	r3, #22
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	2001      	movs	r0, #1
 800afc8:	e7e7      	b.n	800af9a <_raise_r+0x12>
 800afca:	2400      	movs	r4, #0
 800afcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd0:	4628      	mov	r0, r5
 800afd2:	4798      	blx	r3
 800afd4:	2000      	movs	r0, #0
 800afd6:	e7e0      	b.n	800af9a <_raise_r+0x12>

0800afd8 <raise>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	; (800afe4 <raise+0xc>)
 800afda:	4601      	mov	r1, r0
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	f7ff bfd3 	b.w	800af88 <_raise_r>
 800afe2:	bf00      	nop
 800afe4:	2000000c 	.word	0x2000000c

0800afe8 <_kill_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_kill_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f7 f96f 	bl	80022d8 <_kill>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_kill_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_kill_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	2001dd04 	.word	0x2001dd04

0800b00c <_getpid_r>:
 800b00c:	f7f7 b95c 	b.w	80022c8 <_getpid>

0800b010 <__sread>:
 800b010:	b510      	push	{r4, lr}
 800b012:	460c      	mov	r4, r1
 800b014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b018:	f000 f894 	bl	800b144 <_read_r>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	bfab      	itete	ge
 800b020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b022:	89a3      	ldrhlt	r3, [r4, #12]
 800b024:	181b      	addge	r3, r3, r0
 800b026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b02a:	bfac      	ite	ge
 800b02c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b02e:	81a3      	strhlt	r3, [r4, #12]
 800b030:	bd10      	pop	{r4, pc}

0800b032 <__swrite>:
 800b032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b036:	461f      	mov	r7, r3
 800b038:	898b      	ldrh	r3, [r1, #12]
 800b03a:	05db      	lsls	r3, r3, #23
 800b03c:	4605      	mov	r5, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	4616      	mov	r6, r2
 800b042:	d505      	bpl.n	800b050 <__swrite+0x1e>
 800b044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b048:	2302      	movs	r3, #2
 800b04a:	2200      	movs	r2, #0
 800b04c:	f000 f868 	bl	800b120 <_lseek_r>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	4632      	mov	r2, r6
 800b05e:	463b      	mov	r3, r7
 800b060:	4628      	mov	r0, r5
 800b062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b066:	f000 b817 	b.w	800b098 <_write_r>

0800b06a <__sseek>:
 800b06a:	b510      	push	{r4, lr}
 800b06c:	460c      	mov	r4, r1
 800b06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b072:	f000 f855 	bl	800b120 <_lseek_r>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	bf15      	itete	ne
 800b07c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b07e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b086:	81a3      	strheq	r3, [r4, #12]
 800b088:	bf18      	it	ne
 800b08a:	81a3      	strhne	r3, [r4, #12]
 800b08c:	bd10      	pop	{r4, pc}

0800b08e <__sclose>:
 800b08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b092:	f000 b813 	b.w	800b0bc <_close_r>
	...

0800b098 <_write_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	; (800b0b8 <_write_r+0x20>)
 800b09c:	4604      	mov	r4, r0
 800b09e:	4608      	mov	r0, r1
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	602a      	str	r2, [r5, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f7f7 f94d 	bl	8002346 <_write>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_write_r+0x1e>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_write_r+0x1e>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	2001dd04 	.word	0x2001dd04

0800b0bc <_close_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d06      	ldr	r5, [pc, #24]	; (800b0d8 <_close_r+0x1c>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7f7 f959 	bl	800237e <_close>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_close_r+0x1a>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_close_r+0x1a>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	2001dd04 	.word	0x2001dd04

0800b0dc <_fstat_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	; (800b0fc <_fstat_r+0x20>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f7f7 f954 	bl	8002396 <_fstat>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d102      	bne.n	800b0f8 <_fstat_r+0x1c>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b103      	cbz	r3, 800b0f8 <_fstat_r+0x1c>
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	2001dd04 	.word	0x2001dd04

0800b100 <_isatty_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4d06      	ldr	r5, [pc, #24]	; (800b11c <_isatty_r+0x1c>)
 800b104:	2300      	movs	r3, #0
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	f7f7 f953 	bl	80023b6 <_isatty>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_isatty_r+0x1a>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_isatty_r+0x1a>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	2001dd04 	.word	0x2001dd04

0800b120 <_lseek_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	; (800b140 <_lseek_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7f7 f94c 	bl	80023cc <_lseek>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_lseek_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_lseek_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	2001dd04 	.word	0x2001dd04

0800b144 <_read_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d07      	ldr	r5, [pc, #28]	; (800b164 <_read_r+0x20>)
 800b148:	4604      	mov	r4, r0
 800b14a:	4608      	mov	r0, r1
 800b14c:	4611      	mov	r1, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	602a      	str	r2, [r5, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	f7f7 f8da 	bl	800230c <_read>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_read_r+0x1e>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_read_r+0x1e>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	2001dd04 	.word	0x2001dd04

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
