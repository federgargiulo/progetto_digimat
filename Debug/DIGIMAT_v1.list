
DIGIMAT_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008738  08008738  00018738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b8c  08008b8c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b94  08008b94  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001f4  08008d90  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08008d90  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be0  00000000  00000000  0004324d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00045e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be0  00000000  00000000  00047b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b83  00000000  00000000  00049708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6fa  00000000  00000000  0006e28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e394d  00000000  00000000  00088985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c2d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f40  00000000  00000000  0016c324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008720 	.word	0x08008720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08008720 	.word	0x08008720

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f001 f890 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f840 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f8f6 	bl	80010b8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000ecc:	f000 f88e 	bl	8000fec <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000ed0:	f000 f8c2 	bl	8001058 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



	bus_accelerometro.Init=BSP_I2C1_Init;
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <main+0x68>)
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <main+0x6c>)
 8000ed8:	601a      	str	r2, [r3, #0]
	bus_accelerometro.DeInit=BSP_I2C1_DeInit;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <main+0x68>)
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <main+0x70>)
 8000ede:	605a      	str	r2, [r3, #4]
	bus_accelerometro.ReadReg=BSP_I2C1_ReadReg;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <main+0x68>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <main+0x74>)
 8000ee4:	615a      	str	r2, [r3, #20]
	bus_accelerometro.WriteReg=BSP_I2C1_WriteReg;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <main+0x68>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <main+0x78>)
 8000eea:	611a      	str	r2, [r3, #16]
	bus_accelerometro.Address=LSM6DSL_I2C_ADD_H;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <main+0x68>)
 8000eee:	22d7      	movs	r2, #215	; 0xd7
 8000ef0:	731a      	strb	r2, [r3, #12]


	LSM6DSL_RegisterBusIO(&accelerometro, &bus_accelerometro);
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <main+0x68>)
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <main+0x7c>)
 8000ef6:	f000 fcd1 	bl	800189c <LSM6DSL_RegisterBusIO>
	LSM6DSL_Init(&accelerometro);
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <main+0x7c>)
 8000efc:	f000 fd38 	bl	8001970 <LSM6DSL_Init>
	LSM6DSL_ACC_Enable(&accelerometro);
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <main+0x7c>)
 8000f02:	f000 fd9e 	bl	8001a42 <LSM6DSL_ACC_Enable>

	HAL_UART_Transmit(&huart2, (uint8_t *)start_msg, sizeof(start_msg), 100);
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	2218      	movs	r2, #24
 8000f0a:	490c      	ldr	r1, [pc, #48]	; (8000f3c <main+0x80>)
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <main+0x84>)
 8000f0e:	f004 f827 	bl	8004f60 <HAL_UART_Transmit>

	HAL_TIM_Base_Start_IT(&htim6);
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <main+0x88>)
 8000f14:	f003 fd2e 	bl	8004974 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */




		HAL_Delay(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1c:	f001 f8de 	bl	80020dc <HAL_Delay>
 8000f20:	e7fa      	b.n	8000f18 <main+0x5c>
 8000f22:	bf00      	nop
 8000f24:	200002e0 	.word	0x200002e0
 8000f28:	08001389 	.word	0x08001389
 8000f2c:	08001405 	.word	0x08001405
 8000f30:	080014b9 	.word	0x080014b9
 8000f34:	08001455 	.word	0x08001455
 8000f38:	20000300 	.word	0x20000300
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	2000025c 	.word	0x2000025c
 8000f44:	20000210 	.word	0x20000210

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	; 0x58
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2244      	movs	r2, #68	; 0x44
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fcf6 	bl	8005948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f002 fabd 	bl	80034ec <HAL_PWREx_ControlVoltageScaling>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f78:	f000 f904 	bl	8001184 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f86:	2340      	movs	r3, #64	; 0x40
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f96:	230a      	movs	r3, #10
 8000f98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 faf4 	bl	8003598 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fb6:	f000 f8e5 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fef4 	bl	8003dc0 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fde:	f000 f8d1 	bl	8001184 <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3758      	adds	r7, #88	; 0x58
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_TIM6_Init+0x64>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <MX_TIM6_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_TIM6_Init+0x64>)
 8001004:	2263      	movs	r2, #99	; 0x63
 8001006:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_TIM6_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000-1;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_TIM6_Init+0x64>)
 8001010:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001014:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_TIM6_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_TIM6_Init+0x64>)
 800101e:	f003 fc51 	bl	80048c4 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001028:	f000 f8ac 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_TIM6_Init+0x64>)
 800103a:	f003 feb7 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001044:	f000 f89e 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000210 	.word	0x20000210
 8001054:	40001000 	.word	0x40001000

08001058 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MX_USART2_UART_Init+0x5c>)
 8001060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 8001064:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART2_UART_Init+0x58>)
 800109c:	f003 ff12 	bl	8004ec4 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010a6:	f000 f86d 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000025c 	.word	0x2000025c
 80010b4:	40004400 	.word	0x40004400

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_GPIO_Init+0xc4>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <MX_GPIO_Init+0xc4>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <MX_GPIO_Init+0xc4>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <MX_GPIO_Init+0xc4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <MX_GPIO_Init+0xc4>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_GPIO_Init+0xc4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_GPIO_Init+0xc4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_GPIO_Init+0xc4>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f001 fb5b 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001140:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <MX_GPIO_Init+0xc8>)
 8001152:	f001 f8f9 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001156:	2320      	movs	r3, #32
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f001 f8ea 	bl	8002348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	48000800 	.word	0x48000800

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>
	...

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x44>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x44>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6613      	str	r3, [r2, #96]	; 0x60
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x44>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x44>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x44>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x44>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d113      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2036      	movs	r0, #54	; 0x36
 8001208:	f001 f867 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800120c:	2036      	movs	r0, #54	; 0x36
 800120e:	f001 f880 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40001000 	.word	0x40001000
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a4      	sub	sp, #144	; 0x90
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2268      	movs	r2, #104	; 0x68
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fb7f 	bl	8005948 <memset>
  if(huart->Instance==USART2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_UART_MspInit+0xb0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13a      	bne.n	80012ca <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001254:	2302      	movs	r3, #2
 8001256:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f002 ffd1 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800126c:	f7ff ff8a 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 8001276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_UART_MspInit+0xb4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012a0:	230c      	movs	r3, #12
 80012a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f001 f83f 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3790      	adds	r7, #144	; 0x90
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40021000 	.word	0x40021000

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 feb8 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <TIM6_DAC_IRQHandler+0x40>)
 8001338:	f003 fb78 	bl	8004a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	LSM6DSL_ACC_GetAxes(&accelerometro, &misure_accelerometro);
 800133c:	490d      	ldr	r1, [pc, #52]	; (8001374 <TIM6_DAC_IRQHandler+0x44>)
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <TIM6_DAC_IRQHandler+0x48>)
 8001340:	f000 fbea 	bl	8001b18 <LSM6DSL_ACC_GetAxes>

	sprintf((uint8_t *)buss_da_inviare_su_uart, "Le accelerazioni sono x: %ld y: %ld z: %ld \r \n", misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z);
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <TIM6_DAC_IRQHandler+0x44>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <TIM6_DAC_IRQHandler+0x44>)
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <TIM6_DAC_IRQHandler+0x44>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	460b      	mov	r3, r1
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <TIM6_DAC_IRQHandler+0x4c>)
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <TIM6_DAC_IRQHandler+0x50>)
 8001358:	f004 ff68 	bl	800622c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buss_da_inviare_su_uart, sizeof(buss_da_inviare_su_uart), 100);
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <TIM6_DAC_IRQHandler+0x50>)
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <TIM6_DAC_IRQHandler+0x54>)
 8001364:	f003 fdfc 	bl	8004f60 <HAL_UART_Transmit>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000210 	.word	0x20000210
 8001374:	20000338 	.word	0x20000338
 8001378:	20000300 	.word	0x20000300
 800137c:	08008738 	.word	0x08008738
 8001380:	20000344 	.word	0x20000344
 8001384:	2000025c 	.word	0x2000025c

08001388 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <BSP_I2C1_Init+0x70>)
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <BSP_I2C1_Init+0x74>)
 8001396:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <BSP_I2C1_Init+0x78>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4918      	ldr	r1, [pc, #96]	; (8001400 <BSP_I2C1_Init+0x78>)
 80013a0:	600a      	str	r2, [r1, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d122      	bne.n	80013ec <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <BSP_I2C1_Init+0x70>)
 80013a8:	f001 fd3a 	bl	8002e20 <HAL_I2C_GetState>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d11c      	bne.n	80013ec <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <BSP_I2C1_Init+0x70>)
 80013b4:	f000 f8f6 	bl	80015a4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <BSP_I2C1_Init+0x70>)
 80013c0:	f000 f8ac 	bl	800151c <MX_I2C1_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80013ca:	f06f 0307 	mvn.w	r3, #7
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	e00c      	b.n	80013ec <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <BSP_I2C1_Init+0x70>)
 80013d6:	f001 ffe3 	bl	80033a0 <HAL_I2CEx_ConfigAnalogFilter>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80013e0:	f06f 0307 	mvn.w	r3, #7
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e001      	b.n	80013ec <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200003c4 	.word	0x200003c4
 80013fc:	40005400 	.word	0x40005400
 8001400:	20000418 	.word	0x20000418

08001404 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <BSP_I2C1_DeInit+0x48>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d014      	beq.n	8001440 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <BSP_I2C1_DeInit+0x48>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3b01      	subs	r3, #1
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <BSP_I2C1_DeInit+0x48>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <BSP_I2C1_DeInit+0x48>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <BSP_I2C1_DeInit+0x4c>)
 800142a:	f000 f919 	bl	8001660 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <BSP_I2C1_DeInit+0x4c>)
 8001430:	f001 fa85 	bl	800293e <HAL_I2C_DeInit>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800143a:	f06f 0307 	mvn.w	r3, #7
 800143e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000418 	.word	0x20000418
 8001450:	200003c4 	.word	0x200003c4

08001454 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af04      	add	r7, sp, #16
 800145a:	60ba      	str	r2, [r7, #8]
 800145c:	461a      	mov	r2, r3
 800145e:	4603      	mov	r3, r0
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	460b      	mov	r3, r1
 8001464:	81bb      	strh	r3, [r7, #12]
 8001466:	4613      	mov	r3, r2
 8001468:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800146e:	89ba      	ldrh	r2, [r7, #12]
 8001470:	89f9      	ldrh	r1, [r7, #14]
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <BSP_I2C1_WriteReg+0x60>)
 8001484:	f001 fa9e 	bl	80029c4 <HAL_I2C_Mem_Write>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00c      	beq.n	80014a8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <BSP_I2C1_WriteReg+0x60>)
 8001490:	f001 fcd4 	bl	8002e3c <HAL_I2C_GetError>
 8001494:	4603      	mov	r3, r0
 8001496:	2b04      	cmp	r3, #4
 8001498:	d103      	bne.n	80014a2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800149a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e002      	b.n	80014a8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80014a2:	f06f 0303 	mvn.w	r3, #3
 80014a6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80014a8:	697b      	ldr	r3, [r7, #20]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200003c4 	.word	0x200003c4

080014b8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af04      	add	r7, sp, #16
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	81fb      	strh	r3, [r7, #14]
 80014c6:	460b      	mov	r3, r1
 80014c8:	81bb      	strh	r3, [r7, #12]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80014d2:	89ba      	ldrh	r2, [r7, #12]
 80014d4:	89f9      	ldrh	r1, [r7, #14]
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <BSP_I2C1_ReadReg+0x60>)
 80014e8:	f001 fb80 	bl	8002bec <HAL_I2C_Mem_Read>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <BSP_I2C1_ReadReg+0x60>)
 80014f4:	f001 fca2 	bl	8002e3c <HAL_I2C_GetError>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d103      	bne.n	8001506 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80014fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e002      	b.n	800150c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001506:	f06f 0303 	mvn.w	r3, #3
 800150a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800150c:	697b      	ldr	r3, [r7, #20]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003c4 	.word	0x200003c4

0800151c <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_I2C1_Init+0x80>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x84>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 f95e 	bl	8002820 <HAL_I2C_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 ff15 	bl	80033a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f001 ff57 	bl	8003436 <HAL_I2CEx_ConfigDigitalFilter>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40005400 	.word	0x40005400
 80015a0:	10909cec 	.word	0x10909cec

080015a4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0a4      	sub	sp, #144	; 0x90
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2268      	movs	r2, #104	; 0x68
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f9c7 	bl	8005948 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ba:	2340      	movs	r3, #64	; 0x40
 80015bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fe1e 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <I2C1_MspInit+0xb4>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <I2C1_MspInit+0xb4>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <I2C1_MspInit+0xb4>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80015e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80015fc:	2304      	movs	r3, #4
 80015fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001602:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001606:	4619      	mov	r1, r3
 8001608:	4814      	ldr	r0, [pc, #80]	; (800165c <I2C1_MspInit+0xb8>)
 800160a:	f000 fe9d 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800160e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001612:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001614:	2312      	movs	r3, #18
 8001616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001626:	2304      	movs	r3, #4
 8001628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800162c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001630:	4619      	mov	r1, r3
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <I2C1_MspInit+0xb8>)
 8001634:	f000 fe88 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <I2C1_MspInit+0xb4>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <I2C1_MspInit+0xb4>)
 800163e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001642:	6593      	str	r3, [r2, #88]	; 0x58
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <I2C1_MspInit+0xb4>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001650:	bf00      	nop
 8001652:	3790      	adds	r7, #144	; 0x90
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400

08001660 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <I2C1_MspDeInit+0x30>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <I2C1_MspDeInit+0x30>)
 800166e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <I2C1_MspDeInit+0x34>)
 800167a:	f000 ffdf 	bl	800263c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800167e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <I2C1_MspDeInit+0x34>)
 8001684:	f000 ffda 	bl	800263c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	48000400 	.word	0x48000400

08001698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_kill>:

int _kill(int pid, int sig)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b2:	f004 f91f 	bl	80058f4 <__errno>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2216      	movs	r2, #22
 80016ba:	601a      	str	r2, [r3, #0]
  return -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_exit>:

void _exit (int status)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffe7 	bl	80016a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016da:	e7fe      	b.n	80016da <_exit+0x12>

080016dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ee:	f3af 8000 	nop.w
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
  }

  return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
  }
  return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001776:	605a      	str	r2, [r3, #4]
  return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f004 f884 	bl	80058f4 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20028000 	.word	0x20028000
 8001818:	00000400 	.word	0x00000400
 800181c:	2000041c 	.word	0x2000041c
 8001820:	20000438 	.word	0x20000438

08001824 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopForever+0x6>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LoopForever+0xe>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <LoopForever+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f004 f843 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187a:	f7ff fb1f 	bl	8000ebc <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001880:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800188c:	08008b9c 	.word	0x08008b9c
  ldr r2, =_sbss
 8001890:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001894:	20000434 	.word	0x20000434

08001898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_IRQHandler>
	...

0800189c <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e051      	b.n	800195c <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	7b1a      	ldrb	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <LSM6DSL_RegisterBusIO+0xcc>)
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <LSM6DSL_RegisterBusIO+0xd0>)
 80018fa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e020      	b.n	800195c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4798      	blx	r3
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e016      	b.n	800195c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d112      	bne.n	800195c <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10d      	bne.n	800195c <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001940:	230c      	movs	r3, #12
 8001942:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	461a      	mov	r2, r3
 8001948:	2112      	movs	r1, #18
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f93b 	bl	8001bc6 <LSM6DSL_Write_Reg>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	08001bfd 	.word	0x08001bfd
 800196c:	08001c33 	.word	0x08001c33

08001970 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3320      	adds	r3, #32
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fae3 	bl	8001f4a <lsm6dsl_auto_increment_set>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e054      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3320      	adds	r3, #32
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fa66 	bl	8001e68 <lsm6dsl_block_data_update_set>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e048      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3320      	adds	r3, #32
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 faf1 	bl	8001f96 <lsm6dsl_fifo_mode_set>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e03c      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2204      	movs	r2, #4
 80019c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3320      	adds	r3, #32
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f9d8 	bl	8001d84 <lsm6dsl_xl_data_rate_set>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e02c      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3320      	adds	r3, #32
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f96e 	bl	8001cc8 <lsm6dsl_xl_full_scale_set>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e020      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2204      	movs	r2, #4
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3320      	adds	r3, #32
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fa08 	bl	8001e1c <lsm6dsl_gy_data_rate_set>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e010      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3320      	adds	r3, #32
 8001a1c:	2106      	movs	r1, #6
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f9d6 	bl	8001dd0 <lsm6dsl_gy_full_scale_set>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e004      	b.n	8001a3a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e014      	b.n	8001a82 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f103 0220 	add.w	r2, r3, #32
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f000 f98c 	bl	8001d84 <lsm6dsl_xl_data_rate_set>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e004      	b.n	8001a82 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3320      	adds	r3, #32
 8001a9e:	f107 020b 	add.w	r2, r7, #11
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f935 	bl	8001d14 <lsm6dsl_xl_full_scale_get>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e023      	b.n	8001afe <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d81b      	bhi.n	8001af4 <LSM6DSL_ACC_GetSensitivity+0x68>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001aed 	.word	0x08001aed
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001ae5 	.word	0x08001ae5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001ad8:	601a      	str	r2, [r3, #0]
      break;
 8001ada:	e00f      	b.n	8001afc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001ae0:	601a      	str	r2, [r3, #0]
      break;
 8001ae2:	e00b      	b.n	8001afc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001ae8:	601a      	str	r2, [r3, #0]
      break;
 8001aea:	e007      	b.n	8001afc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001af0:	601a      	str	r2, [r3, #0]
      break;
 8001af2:	e003      	b.n	8001afc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	60fb      	str	r3, [r7, #12]
      break;
 8001afa:	bf00      	nop
  }

  return ret;
 8001afc:	68fb      	ldr	r3, [r7, #12]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	3d79db23 	.word	0x3d79db23
 8001b0c:	3df9db23 	.word	0x3df9db23
 8001b10:	3e79db23 	.word	0x3e79db23
 8001b14:	3ef9db23 	.word	0x3ef9db23

08001b18 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3320      	adds	r3, #32
 8001b2c:	f107 0210 	add.w	r2, r7, #16
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f9be 	bl	8001eb4 <lsm6dsl_acceleration_raw_get>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e03c      	b.n	8001bbe <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff9e 	bl	8001a8c <LSM6DSL_ACC_GetSensitivity>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e030      	b.n	8001bbe <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001b5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b74:	ee17 2a90 	vmov	r2, s15
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b94:	ee17 2a90 	vmov	r2, s15
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001b9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb4:	ee17 2a90 	vmov	r2, s15
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f103 0020 	add.w	r0, r3, #32
 8001bdc:	1cba      	adds	r2, r7, #2
 8001bde:	78f9      	ldrb	r1, [r7, #3]
 8001be0:	2301      	movs	r3, #1
 8001be2:	f000 f859 	bl	8001c98 <lsm6dsl_write_reg>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	e000      	b.n	8001bf4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	72fb      	strb	r3, [r7, #11]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	695c      	ldr	r4, [r3, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	7b1b      	ldrb	r3, [r3, #12]
 8001c1c:	b298      	uxth	r0, r3
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	b299      	uxth	r1, r3
 8001c22:	893b      	ldrh	r3, [r7, #8]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	47a0      	blx	r4
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c32:	b590      	push	{r4, r7, lr}
 8001c34:	b087      	sub	sp, #28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	72fb      	strb	r3, [r7, #11]
 8001c42:	4613      	mov	r3, r2
 8001c44:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	691c      	ldr	r4, [r3, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	7b1b      	ldrb	r3, [r3, #12]
 8001c52:	b298      	uxth	r0, r3
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	b299      	uxth	r1, r3
 8001c58:	893b      	ldrh	r3, [r7, #8]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	47a0      	blx	r4
 8001c5e:	4603      	mov	r3, r0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	460b      	mov	r3, r1
 8001c76:	72fb      	strb	r3, [r7, #11]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685c      	ldr	r4, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	68d8      	ldr	r0, [r3, #12]
 8001c84:	893b      	ldrh	r3, [r7, #8]
 8001c86:	7af9      	ldrb	r1, [r7, #11]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	47a0      	blx	r4
 8001c8c:	6178      	str	r0, [r7, #20]

  return ret;
 8001c8e:	697b      	ldr	r3, [r7, #20]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	72fb      	strb	r3, [r7, #11]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681c      	ldr	r4, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	68d8      	ldr	r0, [r3, #12]
 8001cb4:	893b      	ldrh	r3, [r7, #8]
 8001cb6:	7af9      	ldrb	r1, [r7, #11]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	47a0      	blx	r4
 8001cbc:	6178      	str	r0, [r7, #20]

  return ret;
 8001cbe:	697b      	ldr	r3, [r7, #20]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}

08001cc8 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001cd4:	f107 0208 	add.w	r2, r7, #8
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2110      	movs	r1, #16
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ffc3 	bl	8001c68 <lsm6dsl_read_reg>
 8001ce2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	7a3b      	ldrb	r3, [r7, #8]
 8001cf4:	f362 0383 	bfi	r3, r2, #2, #2
 8001cf8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001cfa:	f107 0208 	add.w	r2, r7, #8
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2110      	movs	r1, #16
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffc8 	bl	8001c98 <lsm6dsl_write_reg>
 8001d08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d1e:	f107 0208 	add.w	r2, r7, #8
 8001d22:	2301      	movs	r3, #1
 8001d24:	2110      	movs	r1, #16
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff9e 	bl	8001c68 <lsm6dsl_read_reg>
 8001d2c:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8001d2e:	7a3b      	ldrb	r3, [r7, #8]
 8001d30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d81a      	bhi.n	8001d70 <lsm6dsl_xl_full_scale_get+0x5c>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001d51 	.word	0x08001d51
 8001d44:	08001d59 	.word	0x08001d59
 8001d48:	08001d61 	.word	0x08001d61
 8001d4c:	08001d69 	.word	0x08001d69
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
      break;
 8001d56:	e00f      	b.n	8001d78 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
      break;
 8001d5e:	e00b      	b.n	8001d78 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2202      	movs	r2, #2
 8001d64:	701a      	strb	r2, [r3, #0]
      break;
 8001d66:	e007      	b.n	8001d78 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	701a      	strb	r2, [r3, #0]
      break;
 8001d6e:	e003      	b.n	8001d78 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2204      	movs	r2, #4
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	bf00      	nop
  }

  return ret;
 8001d78:	68fb      	ldr	r3, [r7, #12]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop

08001d84 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d90:	f107 0208 	add.w	r2, r7, #8
 8001d94:	2301      	movs	r3, #1
 8001d96:	2110      	movs	r1, #16
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff65 	bl	8001c68 <lsm6dsl_read_reg>
 8001d9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10f      	bne.n	8001dc6 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	7a3b      	ldrb	r3, [r7, #8]
 8001db0:	f362 1307 	bfi	r3, r2, #4, #4
 8001db4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001db6:	f107 0208 	add.w	r2, r7, #8
 8001dba:	2301      	movs	r3, #1
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff6a 	bl	8001c98 <lsm6dsl_write_reg>
 8001dc4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001ddc:	f107 0208 	add.w	r2, r7, #8
 8001de0:	2301      	movs	r3, #1
 8001de2:	2111      	movs	r1, #17
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff3f 	bl	8001c68 <lsm6dsl_read_reg>
 8001dea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	7a3b      	ldrb	r3, [r7, #8]
 8001dfc:	f362 0343 	bfi	r3, r2, #1, #3
 8001e00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e02:	f107 0208 	add.w	r2, r7, #8
 8001e06:	2301      	movs	r3, #1
 8001e08:	2111      	movs	r1, #17
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff44 	bl	8001c98 <lsm6dsl_write_reg>
 8001e10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	2111      	movs	r1, #17
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff19 	bl	8001c68 <lsm6dsl_read_reg>
 8001e36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	7a3b      	ldrb	r3, [r7, #8]
 8001e48:	f362 1307 	bfi	r3, r2, #4, #4
 8001e4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e4e:	f107 0208 	add.w	r2, r7, #8
 8001e52:	2301      	movs	r3, #1
 8001e54:	2111      	movs	r1, #17
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff1e 	bl	8001c98 <lsm6dsl_write_reg>
 8001e5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2301      	movs	r3, #1
 8001e7a:	2112      	movs	r1, #18
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fef3 	bl	8001c68 <lsm6dsl_read_reg>
 8001e82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	7a3b      	ldrb	r3, [r7, #8]
 8001e94:	f362 1386 	bfi	r3, r2, #6, #1
 8001e98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e9a:	f107 0208 	add.w	r2, r7, #8
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	2112      	movs	r1, #18
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fef8 	bl	8001c98 <lsm6dsl_write_reg>
 8001ea8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001ebe:	f107 020c 	add.w	r2, r7, #12
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	2128      	movs	r1, #40	; 0x28
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fece 	bl	8001c68 <lsm6dsl_read_reg>
 8001ecc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001ece:	7b7b      	ldrb	r3, [r7, #13]
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	b212      	sxth	r2, r2
 8001ef8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	3302      	adds	r3, #2
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	3302      	adds	r3, #2
 8001f14:	b212      	sxth	r2, r2
 8001f16:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001f18:	7c7a      	ldrb	r2, [r7, #17]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	b212      	sxth	r2, r2
 8001f20:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	7c3b      	ldrb	r3, [r7, #16]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	b212      	sxth	r2, r2
 8001f3e:	801a      	strh	r2, [r3, #0]

  return ret;
 8001f40:	697b      	ldr	r3, [r7, #20]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001f56:	f107 0208 	add.w	r2, r7, #8
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2112      	movs	r1, #18
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fe82 	bl	8001c68 <lsm6dsl_read_reg>
 8001f64:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	7a3b      	ldrb	r3, [r7, #8]
 8001f76:	f362 0382 	bfi	r3, r2, #2, #1
 8001f7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001f7c:	f107 0208 	add.w	r2, r7, #8
 8001f80:	2301      	movs	r3, #1
 8001f82:	2112      	movs	r1, #18
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fe87 	bl	8001c98 <lsm6dsl_write_reg>
 8001f8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8001fa2:	f107 0208 	add.w	r2, r7, #8
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	210a      	movs	r1, #10
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fe5c 	bl	8001c68 <lsm6dsl_read_reg>
 8001fb0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	7a3b      	ldrb	r3, [r7, #8]
 8001fc2:	f362 0302 	bfi	r3, r2, #0, #3
 8001fc6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8001fc8:	f107 0208 	add.w	r2, r7, #8
 8001fcc:	2301      	movs	r3, #1
 8001fce:	210a      	movs	r1, #10
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fe61 	bl	8001c98 <lsm6dsl_write_reg>
 8001fd6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_Init+0x3c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_Init+0x3c>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f000 f962 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002000:	2000      	movs	r0, #0
 8002002:	f000 f80f 	bl	8002024 <HAL_InitTick>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	e001      	b.n	8002016 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002012:	f7ff f8bd 	bl	8001190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002016:	79fb      	ldrb	r3, [r7, #7]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_InitTick+0x70>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_InitTick+0x6c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f96d 	bl	800232e <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d809      	bhi.n	8002074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 f937 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_InitTick+0x74>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e007      	b.n	8002084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e004      	b.n	8002084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e001      	b.n	8002084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000020 	.word	0x20000020
 8002094:	20000018 	.word	0x20000018
 8002098:	2000001c 	.word	0x2000001c

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000020 	.word	0x20000020
 80020c0:	20000420 	.word	0x20000420

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000420 	.word	0x20000420

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000020 	.word	0x20000020

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e154      	b.n	8002602 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8146 	beq.w	80025fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d005      	beq.n	8002388 <HAL_GPIO_Init+0x40>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d130      	bne.n	80023ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023be:	2201      	movs	r2, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 0201 	and.w	r2, r3, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d017      	beq.n	8002426 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d123      	bne.n	800247a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	6939      	ldr	r1, [r7, #16]
 8002476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0203 	and.w	r2, r3, #3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a0 	beq.w	80025fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x2d8>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_GPIO_Init+0x2d8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6613      	str	r3, [r2, #96]	; 0x60
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <HAL_GPIO_Init+0x2d8>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d4:	4a53      	ldr	r2, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x2dc>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024fe:	d019      	beq.n	8002534 <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a49      	ldr	r2, [pc, #292]	; (8002628 <HAL_GPIO_Init+0x2e0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x2e4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00d      	beq.n	800252c <HAL_GPIO_Init+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x1e0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_GPIO_Init+0x2ec>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_GPIO_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e008      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002524:	2307      	movs	r3, #7
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002528:	2303      	movs	r3, #3
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002534:	2300      	movs	r3, #0
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2dc>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002578:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f aea3 	bne.w	8002358 <HAL_GPIO_Init+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	48000400 	.word	0x48000400
 800262c:	48000800 	.word	0x48000800
 8002630:	48000c00 	.word	0x48000c00
 8002634:	48001000 	.word	0x48001000
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800264a:	e0b7      	b.n	80027bc <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800264c:	2201      	movs	r2, #1
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80aa 	beq.w	80027b6 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002662:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <HAL_GPIO_DeInit+0x19c>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800268a:	d019      	beq.n	80026c0 <HAL_GPIO_DeInit+0x84>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a53      	ldr	r2, [pc, #332]	; (80027dc <HAL_GPIO_DeInit+0x1a0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_GPIO_DeInit+0x80>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_GPIO_DeInit+0x1a4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00d      	beq.n	80026b8 <HAL_GPIO_DeInit+0x7c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a51      	ldr	r2, [pc, #324]	; (80027e4 <HAL_GPIO_DeInit+0x1a8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d007      	beq.n	80026b4 <HAL_GPIO_DeInit+0x78>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a50      	ldr	r2, [pc, #320]	; (80027e8 <HAL_GPIO_DeInit+0x1ac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_GPIO_DeInit+0x74>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e008      	b.n	80026c2 <HAL_GPIO_DeInit+0x86>
 80026b0:	2307      	movs	r3, #7
 80026b2:	e006      	b.n	80026c2 <HAL_GPIO_DeInit+0x86>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e004      	b.n	80026c2 <HAL_GPIO_DeInit+0x86>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e002      	b.n	80026c2 <HAL_GPIO_DeInit+0x86>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_GPIO_DeInit+0x86>
 80026c0:	2300      	movs	r3, #0
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	f002 0203 	and.w	r2, r2, #3
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	4093      	lsls	r3, r2
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d132      	bne.n	8002738 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	4944      	ldr	r1, [pc, #272]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4940      	ldr	r1, [pc, #256]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	493d      	ldr	r1, [pc, #244]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	4939      	ldr	r1, [pc, #228]	; (80027ec <HAL_GPIO_DeInit+0x1b0>)
 8002706:	4013      	ands	r3, r2
 8002708:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800271a:	4a2f      	ldr	r2, [pc, #188]	; (80027d8 <HAL_GPIO_DeInit+0x19c>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	43da      	mvns	r2, r3
 800272a:	482b      	ldr	r0, [pc, #172]	; (80027d8 <HAL_GPIO_DeInit+0x19c>)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	400a      	ands	r2, r1
 8002732:	3302      	adds	r3, #2
 8002734:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2103      	movs	r1, #3
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	08d2      	lsrs	r2, r2, #3
 800276c:	4019      	ands	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2103      	movs	r1, #3
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	2101      	movs	r1, #1
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	401a      	ands	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2103      	movs	r1, #3
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	401a      	ands	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3301      	adds	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f47f af41 	bne.w	800264c <HAL_GPIO_DeInit+0x10>
  }
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40010000 	.word	0x40010000
 80027dc:	48000400 	.word	0x48000400
 80027e0:	48000800 	.word	0x48000800
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	48001000 	.word	0x48001000
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002800:	787b      	ldrb	r3, [r7, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800280c:	e002      	b.n	8002814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e081      	b.n	8002936 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8a8 	bl	800299c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	e006      	b.n	80028a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d104      	bne.n	80028ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69d9      	ldr	r1, [r3, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e021      	b.n	8002994 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f821 	bl	80029b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	f040 80f9 	bne.w	8002bde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x34>
 80029f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0ed      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x4e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0e6      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a1a:	f7ff fb53 	bl	80020c4 <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fadd 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0d1      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2221      	movs	r2, #33	; 0x21
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a64:	88f8      	ldrh	r0, [r7, #6]
 8002a66:	893a      	ldrh	r2, [r7, #8]
 8002a68:	8979      	ldrh	r1, [r7, #10]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4603      	mov	r3, r0
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f9ed 	bl	8002e54 <I2C_RequestMemoryWrite>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0a9      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2bff      	cmp	r3, #255	; 0xff
 8002a94:	d90e      	bls.n	8002ab4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	22ff      	movs	r2, #255	; 0xff
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	8979      	ldrh	r1, [r7, #10]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fc45 	bl	800333c <I2C_TransferConfig>
 8002ab2:	e00f      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	8979      	ldrh	r1, [r7, #10]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fc34 	bl	800333c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fac7 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e07b      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d034      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x1c8>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d130      	bne.n	8002b8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	2200      	movs	r2, #0
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa59 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e04d      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2bff      	cmp	r3, #255	; 0xff
 8002b4c:	d90e      	bls.n	8002b6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fbe9 	bl	800333c <I2C_TransferConfig>
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fbd8 	bl	800333c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d19e      	bne.n	8002ad4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 faa6 	bl	80030ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e01a      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_I2C_Mem_Write+0x224>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	fe00e800 	.word	0xfe00e800

08002bec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 80fd 	bne.w	8002e0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_I2C_Mem_Read+0x34>
 8002c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0f1      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Mem_Read+0x4e>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0ea      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c42:	f7ff fa3f 	bl	80020c4 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f9c9 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d5      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2222      	movs	r2, #34	; 0x22
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8c:	88f8      	ldrh	r0, [r7, #6]
 8002c8e:	893a      	ldrh	r2, [r7, #8]
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f92d 	bl	8002efc <I2C_RequestMemoryRead>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ad      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2bff      	cmp	r3, #255	; 0xff
 8002cbc:	d90e      	bls.n	8002cdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	4b52      	ldr	r3, [pc, #328]	; (8002e18 <HAL_I2C_Mem_Read+0x22c>)
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fb31 	bl	800333c <I2C_TransferConfig>
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_I2C_Mem_Read+0x22c>)
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fb20 	bl	800333c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2200      	movs	r2, #0
 8002d04:	2104      	movs	r1, #4
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f970 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07c      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d034      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x1d0>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d130      	bne.n	8002dbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	2200      	movs	r2, #0
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f941 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e04d      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2bff      	cmp	r3, #255	; 0xff
 8002d7c:	d90e      	bls.n	8002d9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	8979      	ldrh	r1, [r7, #10]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fad1 	bl	800333c <I2C_TransferConfig>
 8002d9a:	e00f      	b.n	8002dbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	8979      	ldrh	r1, [r7, #10]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fac0 	bl	800333c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d19a      	bne.n	8002cfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f98e 	bl	80030ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e01a      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_I2C_Mem_Read+0x230>)
 8002dee:	400b      	ands	r3, r1
 8002df0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	80002400 	.word	0x80002400
 8002e1c:	fe00e800 	.word	0xfe00e800

08002e20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <I2C_RequestMemoryWrite+0xa4>)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa5d 	bl	800333c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8f0 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e02c      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea6:	e015      	b.n	8002ed4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	69b9      	ldr	r1, [r7, #24]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8d6 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e012      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f884 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	80002000 	.word	0x80002000

08002efc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <I2C_RequestMemoryRead+0xa4>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fa0a 	bl	800333c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	69b9      	ldr	r1, [r7, #24]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f89d 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e02c      	b.n	8002f96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f4c:	e015      	b.n	8002f7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f883 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e012      	b.n	8002f96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f831 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	80002000 	.word	0x80002000

08002fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d103      	bne.n	8002fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d007      	beq.n	8002fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	619a      	str	r2, [r3, #24]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffc:	e022      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d01e      	beq.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7ff f85d 	bl	80020c4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d113      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00f      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d0cd      	beq.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003078:	e02c      	b.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f870 	bl	8003164 <I2C_IsErrorOccurred>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02a      	b.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d01e      	beq.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7ff f815 	bl	80020c4 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d113      	bne.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d1cb      	bne.n	800307a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f8:	e028      	b.n	800314c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f830 	bl	8003164 <I2C_IsErrorOccurred>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e026      	b.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7fe ffd9 	bl	80020c4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d113      	bne.n	800314c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d1cf      	bne.n	80030fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d075      	beq.n	800327c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2210      	movs	r2, #16
 8003196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003198:	e056      	b.n	8003248 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d052      	beq.n	8003248 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7fe ff8f 	bl	80020c4 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_IsErrorOccurred+0x54>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d147      	bne.n	8003248 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031da:	d12e      	bne.n	800323a <I2C_IsErrorOccurred+0xd6>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e2:	d02a      	beq.n	800323a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d027      	beq.n	800323a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031fa:	f7fe ff63 	bl	80020c4 <HAL_GetTick>
 80031fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003200:	e01b      	b.n	800323a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003202:	f7fe ff5f 	bl	80020c4 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b19      	cmp	r3, #25
 800320e:	d914      	bls.n	800323a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d1dc      	bne.n	8003202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b20      	cmp	r3, #32
 8003254:	d003      	beq.n	800325e <I2C_IsErrorOccurred+0xfa>
 8003256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325a:	2b00      	cmp	r3, #0
 800325c:	d09d      	beq.n	800319a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800325e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2220      	movs	r2, #32
 800326c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01c      	beq.n	800332c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff fe56 	bl	8002fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <I2C_IsErrorOccurred+0x1d4>)
 8003304:	400b      	ands	r3, r1
 8003306:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800332c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	fe00e800 	.word	0xfe00e800

0800333c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	4613      	mov	r3, r2
 800334c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003354:	7a7b      	ldrb	r3, [r7, #9]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	4313      	orrs	r3, r2
 8003366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800336a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	0d5b      	lsrs	r3, r3, #21
 8003376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <I2C_TransferConfig+0x60>)
 800337c:	430b      	orrs	r3, r1
 800337e:	43db      	mvns	r3, r3
 8003380:	ea02 0103 	and.w	r1, r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	03ff63ff 	.word	0x03ff63ff

080033a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d138      	bne.n	8003428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e032      	b.n	800342a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	d139      	bne.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003456:	2302      	movs	r3, #2
 8003458:	e033      	b.n	80034c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2224      	movs	r2, #36	; 0x24
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d130      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fc:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003508:	d038      	beq.n	800357c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2232      	movs	r2, #50	; 0x32
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0c9b      	lsrs	r3, r3, #18
 800352c:	3301      	adds	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003530:	e002      	b.n	8003538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b01      	subs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d102      	bne.n	800354c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f2      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003558:	d110      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e00f      	b.n	800357e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356a:	d007      	beq.n	800357c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003574:	4a05      	ldr	r2, [pc, #20]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800357a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40007000 	.word	0x40007000
 8003590:	20000018 	.word	0x20000018
 8003594:	431bde83 	.word	0x431bde83

08003598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f000 bc02 	b.w	8003db0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ac:	4b96      	ldr	r3, [pc, #600]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b6:	4b94      	ldr	r3, [pc, #592]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80e4 	beq.w	8003796 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4c>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	f040 808b 	bne.w	80036f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	f040 8087 	bne.w	80036f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e4:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x64>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e3d9      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_RCC_OscConfig+0x7e>
 800360c:	4b7e      	ldr	r3, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003614:	e005      	b.n	8003622 <HAL_RCC_OscConfig+0x8a>
 8003616:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003622:	4293      	cmp	r3, r2
 8003624:	d223      	bcs.n	800366e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fd8c 	bl	8004148 <RCC_SetFlashLatencyFromMSIRange>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e3ba      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a72      	ldr	r2, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b70      	ldr	r3, [pc, #448]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	496d      	ldr	r1, [pc, #436]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4b6b      	ldr	r3, [pc, #428]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4968      	ldr	r1, [pc, #416]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	e025      	b.n	80036ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366e:	4b66      	ldr	r3, [pc, #408]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b63      	ldr	r3, [pc, #396]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4960      	ldr	r1, [pc, #384]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	495b      	ldr	r1, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fd4c 	bl	8004148 <RCC_SetFlashLatencyFromMSIRange>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e37a      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ba:	f000 fc81 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b51      	ldr	r3, [pc, #324]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	4950      	ldr	r1, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036cc:	5ccb      	ldrb	r3, [r1, r3]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x278>)
 80036d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036da:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fca0 	bl	8002024 <HAL_InitTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d052      	beq.n	8003794 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	e35e      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d032      	beq.n	8003760 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036fa:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a42      	ldr	r2, [pc, #264]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003706:	f7fe fcdd 	bl	80020c4 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370e:	f7fe fcd9 	bl	80020c4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e347      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800372c:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003732:	f043 0308 	orr.w	r3, r3, #8
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b33      	ldr	r3, [pc, #204]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4930      	ldr	r1, [pc, #192]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800374a:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	492b      	ldr	r1, [pc, #172]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
 800375e:	e01a      	b.n	8003796 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800376c:	f7fe fcaa 	bl	80020c4 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003774:	f7fe fca6 	bl	80020c4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e314      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x1dc>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003794:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d073      	beq.n	800388a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_OscConfig+0x21c>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d10e      	bne.n	80037cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d063      	beq.n	8003888 <HAL_RCC_OscConfig+0x2f0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d15f      	bne.n	8003888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e2f1      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x24c>
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e025      	b.n	8003830 <HAL_RCC_OscConfig+0x298>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ec:	d114      	bne.n	8003818 <HAL_RCC_OscConfig+0x280>
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a05      	ldr	r2, [pc, #20]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a02      	ldr	r2, [pc, #8]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e013      	b.n	8003830 <HAL_RCC_OscConfig+0x298>
 8003808:	40021000 	.word	0x40021000
 800380c:	08008768 	.word	0x08008768
 8003810:	20000018 	.word	0x20000018
 8003814:	2000001c 	.word	0x2000001c
 8003818:	4ba0      	ldr	r3, [pc, #640]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a9f      	ldr	r2, [pc, #636]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b9d      	ldr	r3, [pc, #628]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a9c      	ldr	r2, [pc, #624]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe fc44 	bl	80020c4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fc40 	bl	80020c4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e2ae      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003852:	4b92      	ldr	r3, [pc, #584]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x2a8>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe fc30 	bl	80020c4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fc2c 	bl	80020c4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e29a      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	4b88      	ldr	r3, [pc, #544]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x2d0>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d060      	beq.n	8003958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x310>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d116      	bne.n	80038d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a8:	4b7c      	ldr	r3, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x328>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e277      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	4973      	ldr	r1, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d4:	e040      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d023      	beq.n	8003926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038de:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe fbeb 	bl	80020c4 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe fbe7 	bl	80020c4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e255      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b62      	ldr	r3, [pc, #392]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	495f      	ldr	r1, [pc, #380]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e018      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5c      	ldr	r2, [pc, #368]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800392c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe fbc7 	bl	80020c4 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe fbc3 	bl	80020c4 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e231      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03c      	beq.n	80039de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe fba2 	bl	80020c4 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003984:	f7fe fb9e 	bl	80020c4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e20c      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <HAL_RCC_OscConfig+0x3ec>
 80039a4:	e01b      	b.n	80039de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fe fb85 	bl	80020c4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039be:	f7fe fb81 	bl	80020c4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1ef      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ef      	bne.n	80039be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a6 	beq.w	8003b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a30:	f7fe fb48 	bl	80020c4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fe fb44 	bl	80020c4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1b2      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4d8>
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6e:	e029      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x50c>
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	4b9a      	ldr	r3, [pc, #616]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a99      	ldr	r2, [pc, #612]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab4:	4b96      	ldr	r3, [pc, #600]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a95      	ldr	r2, [pc, #596]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d016      	beq.n	8003afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fafa 	bl	80020c4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fe faf6 	bl	80020c4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e162      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aea:	4b89      	ldr	r3, [pc, #548]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x53c>
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fe fae3 	bl	80020c4 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fe fadf 	bl	80020c4 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e14b      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b18:	4b7d      	ldr	r3, [pc, #500]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ed      	bne.n	8003b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4a77      	ldr	r2, [pc, #476]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d03c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b4c:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b52:	4a6f      	ldr	r2, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fab2 	bl	80020c4 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b64:	f7fe faae 	bl	80020c4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e11c      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b76:	4b66      	ldr	r3, [pc, #408]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ef      	beq.n	8003b64 <HAL_RCC_OscConfig+0x5cc>
 8003b84:	e01b      	b.n	8003bbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b86:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8c:	4a60      	ldr	r2, [pc, #384]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fe fa95 	bl	80020c4 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9e:	f7fe fa91 	bl	80020c4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0ff      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb0:	4b57      	ldr	r3, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ef      	bne.n	8003b9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80f3 	beq.w	8003dae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f040 80c9 	bne.w	8003d64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d12c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d123      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d11b      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d113      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	3b01      	subs	r3, #1
 8003c26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d109      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d06b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d062      	beq.n	8003d0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c46:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0ac      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c62:	f7fe fa2f 	bl	80020c4 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fe fa2b 	bl	80020c4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e099      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7c:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCC_OscConfig+0x77c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ca2:	0212      	lsls	r2, r2, #8
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0552      	lsls	r2, r2, #21
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc2:	06d2      	lsls	r2, r2, #27
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	4912      	ldr	r1, [pc, #72]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce4:	f7fe f9ee 	bl	80020c4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe f9ea 	bl	80020c4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e058      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCC_OscConfig+0x778>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d0a:	e050      	b.n	8003dae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e04f      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d18:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d144      	bne.n	8003dae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d3c:	f7fe f9c2 	bl	80020c4 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fe f9be 	bl	80020c4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e02c      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x7ac>
 8003d62:	e024      	b.n	8003dae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d01f      	beq.n	8003daa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fe f9a5 	bl	80020c4 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fe f9a1 	bl	80020c4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	4905      	ldr	r1, [pc, #20]	; (8003db8 <HAL_RCC_OscConfig+0x820>)
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_OscConfig+0x824>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	60cb      	str	r3, [r1, #12]
 8003da8:	e001      	b.n	8003dae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	feeefffc 	.word	0xfeeefffc

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0e7      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b75      	ldr	r3, [pc, #468]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d910      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	4970      	ldr	r1, [pc, #448]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0cf      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b66      	ldr	r3, [pc, #408]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d908      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b63      	ldr	r3, [pc, #396]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4960      	ldr	r1, [pc, #384]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04c      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e46:	4b5a      	ldr	r3, [pc, #360]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d121      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0a6      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5e:	4b54      	ldr	r3, [pc, #336]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e09a      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e76:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e08e      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e086      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4943      	ldr	r1, [pc, #268]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fe f90c 	bl	80020c4 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fe f908 	bl	80020c4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e06e      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d208      	bcs.n	8003f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	492b      	ldr	r1, [pc, #172]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d210      	bcs.n	8003f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	4923      	ldr	r1, [pc, #140]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_RCC_ClockConfig+0x1ec>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e036      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4918      	ldr	r1, [pc, #96]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4910      	ldr	r1, [pc, #64]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f74:	f000 f824 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1fc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe f843 	bl	8002024 <HAL_InitTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08008768 	.word	0x08008768
 8003fb8:	20000018 	.word	0x20000018
 8003fbc:	2000001c 	.word	0x2000001c

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fce:	4b3e      	ldr	r3, [pc, #248]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d121      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d11e      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ff4:	4b34      	ldr	r3, [pc, #208]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004000:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e005      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004010:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800401c:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10d      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d102      	bne.n	800403e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e004      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d101      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d134      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d003      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0xa6>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d003      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0xac>
 8004064:	e005      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004068:	617b      	str	r3, [r7, #20]
      break;
 800406a:	e005      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800406e:	617b      	str	r3, [r7, #20]
      break;
 8004070:	e002      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	617b      	str	r3, [r7, #20]
      break;
 8004076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	3301      	adds	r3, #1
 8004084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	fb03 f202 	mul.w	r2, r3, r2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	0e5b      	lsrs	r3, r3, #25
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	3301      	adds	r3, #1
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040b8:	69bb      	ldr	r3, [r7, #24]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3724      	adds	r7, #36	; 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08008780 	.word	0x08008780
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	007a1200 	.word	0x007a1200

080040d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCC_GetHCLKFreq+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000018 	.word	0x20000018

080040f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040f4:	f7ff fff0 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4904      	ldr	r1, [pc, #16]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	08008778 	.word	0x08008778

0800411c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004120:	f7ff ffda 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0adb      	lsrs	r3, r3, #11
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4904      	ldr	r1, [pc, #16]	; (8004144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	08008778 	.word	0x08008778

08004148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004160:	f7ff f9b6 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
 8004164:	6178      	str	r0, [r7, #20]
 8004166:	e014      	b.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	4a24      	ldr	r2, [pc, #144]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6593      	str	r3, [r2, #88]	; 0x58
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004180:	f7ff f9a6 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
 8004184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004198:	d10b      	bne.n	80041b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d919      	bls.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2ba0      	cmp	r3, #160	; 0xa0
 80041a4:	d902      	bls.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041a6:	2302      	movs	r3, #2
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	e013      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ac:	2301      	movs	r3, #1
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e010      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d902      	bls.n	80041be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041b8:	2303      	movs	r3, #3
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	e00a      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d102      	bne.n	80041ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c4:	2302      	movs	r3, #2
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	e004      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b70      	cmp	r3, #112	; 0x70
 80041ce:	d101      	bne.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d0:	2301      	movs	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 0207 	bic.w	r2, r3, #7
 80041dc:	4909      	ldr	r1, [pc, #36]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	40022000 	.word	0x40022000

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004210:	2300      	movs	r3, #0
 8004212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004214:	2300      	movs	r3, #0
 8004216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004220:	2b00      	cmp	r3, #0
 8004222:	d031      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800422c:	d01a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800422e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004232:	d814      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800423c:	d10f      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800423e:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4a5c      	ldr	r2, [pc, #368]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800424a:	e00c      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fa44 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800425c:	e003      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	74fb      	strb	r3, [r7, #19]
      break;
 8004262:	e000      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800426c:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	494e      	ldr	r1, [pc, #312]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004282:	e001      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 809e 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00d      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b0:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6593      	str	r3, [r2, #88]	; 0x58
 80042bc:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a39      	ldr	r2, [pc, #228]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d8:	f7fd fef4 	bl	80020c4 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e0:	f7fd fef0 	bl	80020c4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d902      	bls.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	74fb      	strb	r3, [r7, #19]
        break;
 80042f2:	e005      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042f4:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ef      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d15a      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01e      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	429a      	cmp	r2, r3
 8004320:	d019      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800432e:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800434e:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d016      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fd feb0 	bl	80020c4 <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004366:	e00b      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fd feac 	bl	80020c4 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d902      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	74fb      	strb	r3, [r7, #19]
            break;
 800437e:	e006      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ec      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a2:	4904      	ldr	r1, [pc, #16]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	74bb      	strb	r3, [r7, #18]
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c0:	7c7b      	ldrb	r3, [r7, #17]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c6:	4b9e      	ldr	r3, [pc, #632]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	4a9d      	ldr	r2, [pc, #628]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043de:	4b98      	ldr	r3, [pc, #608]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f023 0203 	bic.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4994      	ldr	r1, [pc, #592]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004400:	4b8f      	ldr	r3, [pc, #572]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f023 020c 	bic.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	498c      	ldr	r1, [pc, #560]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004422:	4b87      	ldr	r3, [pc, #540]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	4983      	ldr	r1, [pc, #524]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004444:	4b7e      	ldr	r3, [pc, #504]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	497b      	ldr	r1, [pc, #492]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	4972      	ldr	r1, [pc, #456]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004488:	4b6d      	ldr	r3, [pc, #436]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	496a      	ldr	r1, [pc, #424]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044aa:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	4961      	ldr	r1, [pc, #388]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044cc:	4b5c      	ldr	r3, [pc, #368]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	4959      	ldr	r1, [pc, #356]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ee:	4b54      	ldr	r3, [pc, #336]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	4950      	ldr	r1, [pc, #320]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004510:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	4948      	ldr	r1, [pc, #288]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004532:	4b43      	ldr	r3, [pc, #268]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004538:	f023 0203 	bic.w	r2, r3, #3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	493f      	ldr	r1, [pc, #252]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d028      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004554:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	4937      	ldr	r1, [pc, #220]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004572:	d106      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b32      	ldr	r3, [pc, #200]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a31      	ldr	r2, [pc, #196]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
 8004580:	e011      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458a:	d10c      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f8a4 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d028      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045b2:	4b23      	ldr	r3, [pc, #140]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	491f      	ldr	r1, [pc, #124]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d0:	d106      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045dc:	60d3      	str	r3, [r2, #12]
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e8:	d10c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f875 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d02b      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	4908      	ldr	r1, [pc, #32]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800462e:	d109      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a02      	ldr	r2, [pc, #8]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463a:	60d3      	str	r3, [r2, #12]
 800463c:	e014      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800464c:	d10c      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	2101      	movs	r1, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f843 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01c      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	4916      	ldr	r1, [pc, #88]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2102      	movs	r1, #2
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f820 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	4904      	ldr	r1, [pc, #16]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000

080046e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ee:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d018      	beq.n	800472c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046fa:	4b71      	ldr	r3, [pc, #452]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0203 	and.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d10d      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
       ||
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004712:	4b6b      	ldr	r3, [pc, #428]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
       ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d047      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e044      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d018      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0x86>
 8004734:	2b03      	cmp	r3, #3
 8004736:	d825      	bhi.n	8004784 <RCCEx_PLLSAI1_Config+0xa4>
 8004738:	2b01      	cmp	r3, #1
 800473a:	d002      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0x62>
 800473c:	2b02      	cmp	r3, #2
 800473e:	d009      	beq.n	8004754 <RCCEx_PLLSAI1_Config+0x74>
 8004740:	e020      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d11d      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004752:	e01a      	b.n	800478a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004754:	4b5a      	ldr	r3, [pc, #360]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e013      	b.n	800478e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004766:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004772:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004782:	e006      	b.n	8004792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e004      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004792:	bf00      	nop
    }

    if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10d      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800479a:	4b49      	ldr	r3, [pc, #292]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	430b      	orrs	r3, r1
 80047b0:	4943      	ldr	r1, [pc, #268]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d17c      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047bc:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3f      	ldr	r2, [pc, #252]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fd fc7c 	bl	80020c4 <HAL_GetTick>
 80047cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ce:	e009      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d0:	f7fd fc78 	bl	80020c4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d902      	bls.n	80047e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	73fb      	strb	r3, [r7, #15]
        break;
 80047e2:	e005      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ef      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d15f      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d110      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	0211      	lsls	r1, r2, #8
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68d2      	ldr	r2, [r2, #12]
 8004812:	06d2      	lsls	r2, r2, #27
 8004814:	430a      	orrs	r2, r1
 8004816:	492a      	ldr	r1, [pc, #168]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
 800481c:	e027      	b.n	800486e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d112      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004824:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800482c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6892      	ldr	r2, [r2, #8]
 8004834:	0211      	lsls	r1, r2, #8
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6912      	ldr	r2, [r2, #16]
 800483a:	0852      	lsrs	r2, r2, #1
 800483c:	3a01      	subs	r2, #1
 800483e:	0552      	lsls	r2, r2, #21
 8004840:	430a      	orrs	r2, r1
 8004842:	491f      	ldr	r1, [pc, #124]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
 8004848:	e011      	b.n	800486e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004852:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	0211      	lsls	r1, r2, #8
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6952      	ldr	r2, [r2, #20]
 8004860:	0852      	lsrs	r2, r2, #1
 8004862:	3a01      	subs	r2, #1
 8004864:	0652      	lsls	r2, r2, #25
 8004866:	430a      	orrs	r2, r1
 8004868:	4915      	ldr	r1, [pc, #84]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004878:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fd fc23 	bl	80020c4 <HAL_GetTick>
 800487e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004880:	e009      	b.n	8004896 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004882:	f7fd fc1f 	bl	80020c4 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d902      	bls.n	8004896 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	73fb      	strb	r3, [r7, #15]
          break;
 8004894:	e005      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ef      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e049      	b.n	800496a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fc74 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 f9e4 	bl	8004cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e040      	b.n	8004a0e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_TIM_Base_Start_IT+0xa8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIM_Base_Start_IT+0xac>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_TIM_Base_Start_IT+0xb0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d115      	bne.n	80049f8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <HAL_TIM_Base_Start_IT+0xb4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d015      	beq.n	8004a0a <HAL_TIM_Base_Start_IT+0x96>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d011      	beq.n	8004a0a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	e008      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e000      	b.n	8004a0c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	00010007 	.word	0x00010007

08004a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0202 	mvn.w	r2, #2
 8004a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f90f 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f901 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f912 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0204 	mvn.w	r2, #4
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8e5 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8d7 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8e8 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0208 	mvn.w	r2, #8
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2204      	movs	r2, #4
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8bb 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8ad 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8be 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d122      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d11b      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0210 	mvn.w	r2, #16
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f891 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f883 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f894 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0201 	mvn.w	r2, #1
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f85d 	bl	8004c6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f960 	bl	8004e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	d10e      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d107      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f953 	bl	8004eb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d10e      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f842 	bl	8004cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d10e      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d107      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0220 	mvn.w	r2, #32
 8004c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f913 	bl	8004e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a2e      	ldr	r2, [pc, #184]	; (8004d9c <TIM_Base_SetConfig+0xcc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <TIM_Base_SetConfig+0x28>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0x28>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a2b      	ldr	r2, [pc, #172]	; (8004da0 <TIM_Base_SetConfig+0xd0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0xcc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00f      	beq.n	8004d32 <TIM_Base_SetConfig+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d18:	d00b      	beq.n	8004d32 <TIM_Base_SetConfig+0x62>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a20      	ldr	r2, [pc, #128]	; (8004da0 <TIM_Base_SetConfig+0xd0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <TIM_Base_SetConfig+0x62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <TIM_Base_SetConfig+0xd4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_Base_SetConfig+0x62>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <TIM_Base_SetConfig+0xd8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d108      	bne.n	8004d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <TIM_Base_SetConfig+0xcc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0xb0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <TIM_Base_SetConfig+0xd4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0xb0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <TIM_Base_SetConfig+0xd8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d103      	bne.n	8004d88 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	615a      	str	r2, [r3, #20]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400

08004dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e054      	b.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004df4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10c      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e040      	b.n	8004f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc f99c 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2224      	movs	r2, #36	; 0x24
 8004ef0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8c0 	bl	8005088 <UART_SetConfig>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e022      	b.n	8004f58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fb3a 	bl	8005594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fbc1 	bl	80056d8 <UART_CheckIdleState>
 8004f56:	4603      	mov	r3, r0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	f040 8082 	bne.w	800507e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_UART_Transmit+0x26>
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07a      	b.n	8005080 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Transmit+0x38>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e073      	b.n	8005080 <HAL_UART_Transmit+0x120>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2221      	movs	r2, #33	; 0x21
 8004fac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fae:	f7fd f889 	bl	80020c4 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d108      	bne.n	8004fe0 <HAL_UART_Transmit+0x80>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e003      	b.n	8004fe8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ff0:	e02d      	b.n	800504e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fbb4 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e039      	b.n	8005080 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10b      	bne.n	800502a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	881a      	ldrh	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501e:	b292      	uxth	r2, r2
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	3302      	adds	r3, #2
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e008      	b.n	800503c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b292      	uxth	r2, r2
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3301      	adds	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1cb      	bne.n	8004ff2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	2140      	movs	r1, #64	; 0x40
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fb80 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e005      	b.n	8005080 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800508c:	b08a      	sub	sp, #40	; 0x28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4ba5      	ldr	r3, [pc, #660]	; (800534c <UART_SetConfig+0x2c4>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a9a      	ldr	r2, [pc, #616]	; (8005350 <UART_SetConfig+0x2c8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	4313      	orrs	r3, r2
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a91      	ldr	r2, [pc, #580]	; (8005354 <UART_SetConfig+0x2cc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d126      	bne.n	8005160 <UART_SetConfig+0xd8>
 8005112:	4b91      	ldr	r3, [pc, #580]	; (8005358 <UART_SetConfig+0x2d0>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	2b03      	cmp	r3, #3
 800511e:	d81b      	bhi.n	8005158 <UART_SetConfig+0xd0>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0xa0>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005139 	.word	0x08005139
 800512c:	08005149 	.word	0x08005149
 8005130:	08005141 	.word	0x08005141
 8005134:	08005151 	.word	0x08005151
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e0d6      	b.n	80052ee <UART_SetConfig+0x266>
 8005140:	2302      	movs	r3, #2
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e0d2      	b.n	80052ee <UART_SetConfig+0x266>
 8005148:	2304      	movs	r3, #4
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e0ce      	b.n	80052ee <UART_SetConfig+0x266>
 8005150:	2308      	movs	r3, #8
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e0ca      	b.n	80052ee <UART_SetConfig+0x266>
 8005158:	2310      	movs	r3, #16
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515e:	e0c6      	b.n	80052ee <UART_SetConfig+0x266>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a7d      	ldr	r2, [pc, #500]	; (800535c <UART_SetConfig+0x2d4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d138      	bne.n	80051dc <UART_SetConfig+0x154>
 800516a:	4b7b      	ldr	r3, [pc, #492]	; (8005358 <UART_SetConfig+0x2d0>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d82d      	bhi.n	80051d4 <UART_SetConfig+0x14c>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0xf8>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051cd 	.word	0x080051cd
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e098      	b.n	80052ee <UART_SetConfig+0x266>
 80051bc:	2302      	movs	r3, #2
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e094      	b.n	80052ee <UART_SetConfig+0x266>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e090      	b.n	80052ee <UART_SetConfig+0x266>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e08c      	b.n	80052ee <UART_SetConfig+0x266>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e088      	b.n	80052ee <UART_SetConfig+0x266>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5f      	ldr	r2, [pc, #380]	; (8005360 <UART_SetConfig+0x2d8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d125      	bne.n	8005232 <UART_SetConfig+0x1aa>
 80051e6:	4b5c      	ldr	r3, [pc, #368]	; (8005358 <UART_SetConfig+0x2d0>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d016      	beq.n	8005222 <UART_SetConfig+0x19a>
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d818      	bhi.n	800522a <UART_SetConfig+0x1a2>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d00a      	beq.n	8005212 <UART_SetConfig+0x18a>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d814      	bhi.n	800522a <UART_SetConfig+0x1a2>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <UART_SetConfig+0x182>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d008      	beq.n	800521a <UART_SetConfig+0x192>
 8005208:	e00f      	b.n	800522a <UART_SetConfig+0x1a2>
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005210:	e06d      	b.n	80052ee <UART_SetConfig+0x266>
 8005212:	2302      	movs	r3, #2
 8005214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005218:	e069      	b.n	80052ee <UART_SetConfig+0x266>
 800521a:	2304      	movs	r3, #4
 800521c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005220:	e065      	b.n	80052ee <UART_SetConfig+0x266>
 8005222:	2308      	movs	r3, #8
 8005224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005228:	e061      	b.n	80052ee <UART_SetConfig+0x266>
 800522a:	2310      	movs	r3, #16
 800522c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005230:	e05d      	b.n	80052ee <UART_SetConfig+0x266>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a4b      	ldr	r2, [pc, #300]	; (8005364 <UART_SetConfig+0x2dc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d125      	bne.n	8005288 <UART_SetConfig+0x200>
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <UART_SetConfig+0x2d0>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005246:	2bc0      	cmp	r3, #192	; 0xc0
 8005248:	d016      	beq.n	8005278 <UART_SetConfig+0x1f0>
 800524a:	2bc0      	cmp	r3, #192	; 0xc0
 800524c:	d818      	bhi.n	8005280 <UART_SetConfig+0x1f8>
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d00a      	beq.n	8005268 <UART_SetConfig+0x1e0>
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d814      	bhi.n	8005280 <UART_SetConfig+0x1f8>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <UART_SetConfig+0x1d8>
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d008      	beq.n	8005270 <UART_SetConfig+0x1e8>
 800525e:	e00f      	b.n	8005280 <UART_SetConfig+0x1f8>
 8005260:	2300      	movs	r3, #0
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005266:	e042      	b.n	80052ee <UART_SetConfig+0x266>
 8005268:	2302      	movs	r3, #2
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e03e      	b.n	80052ee <UART_SetConfig+0x266>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e03a      	b.n	80052ee <UART_SetConfig+0x266>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e036      	b.n	80052ee <UART_SetConfig+0x266>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e032      	b.n	80052ee <UART_SetConfig+0x266>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a30      	ldr	r2, [pc, #192]	; (8005350 <UART_SetConfig+0x2c8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d12a      	bne.n	80052e8 <UART_SetConfig+0x260>
 8005292:	4b31      	ldr	r3, [pc, #196]	; (8005358 <UART_SetConfig+0x2d0>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800529c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a0:	d01a      	beq.n	80052d8 <UART_SetConfig+0x250>
 80052a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a6:	d81b      	bhi.n	80052e0 <UART_SetConfig+0x258>
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ac:	d00c      	beq.n	80052c8 <UART_SetConfig+0x240>
 80052ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b2:	d815      	bhi.n	80052e0 <UART_SetConfig+0x258>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <UART_SetConfig+0x238>
 80052b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052bc:	d008      	beq.n	80052d0 <UART_SetConfig+0x248>
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x258>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c6:	e012      	b.n	80052ee <UART_SetConfig+0x266>
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e00e      	b.n	80052ee <UART_SetConfig+0x266>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e00a      	b.n	80052ee <UART_SetConfig+0x266>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e006      	b.n	80052ee <UART_SetConfig+0x266>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e002      	b.n	80052ee <UART_SetConfig+0x266>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a17      	ldr	r2, [pc, #92]	; (8005350 <UART_SetConfig+0x2c8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	f040 808b 	bne.w	8005410 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d834      	bhi.n	800536c <UART_SetConfig+0x2e4>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x280>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	0800536d 	.word	0x0800536d
 8005310:	08005335 	.word	0x08005335
 8005314:	0800536d 	.word	0x0800536d
 8005318:	0800533b 	.word	0x0800533b
 800531c:	0800536d 	.word	0x0800536d
 8005320:	0800536d 	.word	0x0800536d
 8005324:	0800536d 	.word	0x0800536d
 8005328:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fe fee0 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005330:	61f8      	str	r0, [r7, #28]
        break;
 8005332:	e021      	b.n	8005378 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <UART_SetConfig+0x2e0>)
 8005336:	61fb      	str	r3, [r7, #28]
        break;
 8005338:	e01e      	b.n	8005378 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fe fe41 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 800533e:	61f8      	str	r0, [r7, #28]
        break;
 8005340:	e01a      	b.n	8005378 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005346:	61fb      	str	r3, [r7, #28]
        break;
 8005348:	e016      	b.n	8005378 <UART_SetConfig+0x2f0>
 800534a:	bf00      	nop
 800534c:	efff69f3 	.word	0xefff69f3
 8005350:	40008000 	.word	0x40008000
 8005354:	40013800 	.word	0x40013800
 8005358:	40021000 	.word	0x40021000
 800535c:	40004400 	.word	0x40004400
 8005360:	40004800 	.word	0x40004800
 8005364:	40004c00 	.word	0x40004c00
 8005368:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005376:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80fa 	beq.w	8005574 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	429a      	cmp	r2, r3
 800538e:	d305      	bcc.n	800539c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	429a      	cmp	r2, r3
 800539a:	d903      	bls.n	80053a4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053a2:	e0e7      	b.n	8005574 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2200      	movs	r2, #0
 80053a8:	461c      	mov	r4, r3
 80053aa:	4615      	mov	r5, r2
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	022b      	lsls	r3, r5, #8
 80053b6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053ba:	0222      	lsls	r2, r4, #8
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	6849      	ldr	r1, [r1, #4]
 80053c0:	0849      	lsrs	r1, r1, #1
 80053c2:	2000      	movs	r0, #0
 80053c4:	4688      	mov	r8, r1
 80053c6:	4681      	mov	r9, r0
 80053c8:	eb12 0a08 	adds.w	sl, r2, r8
 80053cc:	eb43 0b09 	adc.w	fp, r3, r9
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053de:	4650      	mov	r0, sl
 80053e0:	4659      	mov	r1, fp
 80053e2:	f7fb fbe9 	bl	8000bb8 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4613      	mov	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f4:	d308      	bcc.n	8005408 <UART_SetConfig+0x380>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fc:	d204      	bcs.n	8005408 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	e0b5      	b.n	8005574 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800540e:	e0b1      	b.n	8005574 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005418:	d15d      	bne.n	80054d6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800541a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800541e:	2b08      	cmp	r3, #8
 8005420:	d827      	bhi.n	8005472 <UART_SetConfig+0x3ea>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0x3a0>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800544d 	.word	0x0800544d
 800542c:	08005455 	.word	0x08005455
 8005430:	0800545d 	.word	0x0800545d
 8005434:	08005473 	.word	0x08005473
 8005438:	08005463 	.word	0x08005463
 800543c:	08005473 	.word	0x08005473
 8005440:	08005473 	.word	0x08005473
 8005444:	08005473 	.word	0x08005473
 8005448:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800544c:	f7fe fe50 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005450:	61f8      	str	r0, [r7, #28]
        break;
 8005452:	e014      	b.n	800547e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005454:	f7fe fe62 	bl	800411c <HAL_RCC_GetPCLK2Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e010      	b.n	800547e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545c:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <UART_SetConfig+0x508>)
 800545e:	61fb      	str	r3, [r7, #28]
        break;
 8005460:	e00d      	b.n	800547e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005462:	f7fe fdad 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8005466:	61f8      	str	r0, [r7, #28]
        break;
 8005468:	e009      	b.n	800547e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
        break;
 8005470:	e005      	b.n	800547e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800547c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d077      	beq.n	8005574 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005a      	lsls	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b0f      	cmp	r3, #15
 800549e:	d916      	bls.n	80054ce <UART_SetConfig+0x446>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a6:	d212      	bcs.n	80054ce <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f023 030f 	bic.w	r3, r3, #15
 80054b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	b29a      	uxth	r2, r3
 80054be:	8afb      	ldrh	r3, [r7, #22]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	8afa      	ldrh	r2, [r7, #22]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e052      	b.n	8005574 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054d4:	e04e      	b.n	8005574 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d827      	bhi.n	800552e <UART_SetConfig+0x4a6>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x45c>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	0800552f 	.word	0x0800552f
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	0800552f 	.word	0x0800552f
 8005500:	0800552f 	.word	0x0800552f
 8005504:	08005527 	.word	0x08005527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005508:	f7fe fdf2 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 800550c:	61f8      	str	r0, [r7, #28]
        break;
 800550e:	e014      	b.n	800553a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005510:	f7fe fe04 	bl	800411c <HAL_RCC_GetPCLK2Freq>
 8005514:	61f8      	str	r0, [r7, #28]
        break;
 8005516:	e010      	b.n	800553a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <UART_SetConfig+0x508>)
 800551a:	61fb      	str	r3, [r7, #28]
        break;
 800551c:	e00d      	b.n	800553a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7fe fd4f 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8005522:	61f8      	str	r0, [r7, #28]
        break;
 8005524:	e009      	b.n	800553a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552a:	61fb      	str	r3, [r7, #28]
        break;
 800552c:	e005      	b.n	800553a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005538:	bf00      	nop
    }

    if (pclk != 0U)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d019      	beq.n	8005574 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	085a      	lsrs	r2, r3, #1
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d909      	bls.n	800556e <UART_SetConfig+0x4e6>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005560:	d205      	bcs.n	800556e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	e002      	b.n	8005574 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005580:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005584:	4618      	mov	r0, r3
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558e:	bf00      	nop
 8005590:	00f42400 	.word	0x00f42400

08005594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01a      	beq.n	80056aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005692:	d10a      	bne.n	80056aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e8:	f7fc fcec 	bl	80020c4 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d10e      	bne.n	800571a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f82d 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e023      	b.n	8005762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d10e      	bne.n	8005746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f817 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00d      	b.n	8005762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b09c      	sub	sp, #112	; 0x70
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	e0a5      	b.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	f000 80a1 	beq.w	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fc fc9d 	bl	80020c4 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <UART_WaitOnFlagUntilTimeout+0x32>
 8005796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005798:	2b00      	cmp	r3, #0
 800579a:	d13e      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b0:	667b      	str	r3, [r7, #100]	; 0x64
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e6      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	663b      	str	r3, [r7, #96]	; 0x60
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e067      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d04f      	beq.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005836:	d147      	bne.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005840:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e6      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	613b      	str	r3, [r7, #16]
   return(result);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	66bb      	str	r3, [r7, #104]	; 0x68
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005894:	623a      	str	r2, [r7, #32]
 8005896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e010      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4013      	ands	r3, r2
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	f43f af4a 	beq.w	800577c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3770      	adds	r7, #112	; 0x70
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <__errno>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	; (80058fc <__errno+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000024 	.word	0x20000024

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4d0d      	ldr	r5, [pc, #52]	; (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	; (800593c <__libc_init_array+0x3c>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2600      	movs	r6, #0
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4d0b      	ldr	r5, [pc, #44]	; (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	; (8005944 <__libc_init_array+0x44>)
 8005914:	f002 ff04 	bl	8008720 <_init>
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2600      	movs	r6, #0
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f855 3b04 	ldr.w	r3, [r5], #4
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	08008b94 	.word	0x08008b94
 800593c:	08008b94 	.word	0x08008b94
 8005940:	08008b94 	.word	0x08008b94
 8005944:	08008b98 	.word	0x08008b98

08005948 <memset>:
 8005948:	4402      	add	r2, r0
 800594a:	4603      	mov	r3, r0
 800594c:	4293      	cmp	r3, r2
 800594e:	d100      	bne.n	8005952 <memset+0xa>
 8005950:	4770      	bx	lr
 8005952:	f803 1b01 	strb.w	r1, [r3], #1
 8005956:	e7f9      	b.n	800594c <memset+0x4>

08005958 <__cvt>:
 8005958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	ec55 4b10 	vmov	r4, r5, d0
 8005960:	2d00      	cmp	r5, #0
 8005962:	460e      	mov	r6, r1
 8005964:	4619      	mov	r1, r3
 8005966:	462b      	mov	r3, r5
 8005968:	bfbb      	ittet	lt
 800596a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800596e:	461d      	movlt	r5, r3
 8005970:	2300      	movge	r3, #0
 8005972:	232d      	movlt	r3, #45	; 0x2d
 8005974:	700b      	strb	r3, [r1, #0]
 8005976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005978:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800597c:	4691      	mov	r9, r2
 800597e:	f023 0820 	bic.w	r8, r3, #32
 8005982:	bfbc      	itt	lt
 8005984:	4622      	movlt	r2, r4
 8005986:	4614      	movlt	r4, r2
 8005988:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800598c:	d005      	beq.n	800599a <__cvt+0x42>
 800598e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005992:	d100      	bne.n	8005996 <__cvt+0x3e>
 8005994:	3601      	adds	r6, #1
 8005996:	2102      	movs	r1, #2
 8005998:	e000      	b.n	800599c <__cvt+0x44>
 800599a:	2103      	movs	r1, #3
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	ab02      	add	r3, sp, #8
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	ec45 4b10 	vmov	d0, r4, r5
 80059a8:	4653      	mov	r3, sl
 80059aa:	4632      	mov	r2, r6
 80059ac:	f000 fcec 	bl	8006388 <_dtoa_r>
 80059b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059b4:	4607      	mov	r7, r0
 80059b6:	d102      	bne.n	80059be <__cvt+0x66>
 80059b8:	f019 0f01 	tst.w	r9, #1
 80059bc:	d022      	beq.n	8005a04 <__cvt+0xac>
 80059be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059c2:	eb07 0906 	add.w	r9, r7, r6
 80059c6:	d110      	bne.n	80059ea <__cvt+0x92>
 80059c8:	783b      	ldrb	r3, [r7, #0]
 80059ca:	2b30      	cmp	r3, #48	; 0x30
 80059cc:	d10a      	bne.n	80059e4 <__cvt+0x8c>
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fb f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80059da:	b918      	cbnz	r0, 80059e4 <__cvt+0x8c>
 80059dc:	f1c6 0601 	rsb	r6, r6, #1
 80059e0:	f8ca 6000 	str.w	r6, [sl]
 80059e4:	f8da 3000 	ldr.w	r3, [sl]
 80059e8:	4499      	add	r9, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	2300      	movs	r3, #0
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fb f871 	bl	8000ad8 <__aeabi_dcmpeq>
 80059f6:	b108      	cbz	r0, 80059fc <__cvt+0xa4>
 80059f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80059fc:	2230      	movs	r2, #48	; 0x30
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	454b      	cmp	r3, r9
 8005a02:	d307      	bcc.n	8005a14 <__cvt+0xbc>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a08:	1bdb      	subs	r3, r3, r7
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	b004      	add	sp, #16
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e7f0      	b.n	80059fe <__cvt+0xa6>

08005a1c <__exponent>:
 8005a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	bfb8      	it	lt
 8005a24:	4249      	neglt	r1, r1
 8005a26:	f803 2b02 	strb.w	r2, [r3], #2
 8005a2a:	bfb4      	ite	lt
 8005a2c:	222d      	movlt	r2, #45	; 0x2d
 8005a2e:	222b      	movge	r2, #43	; 0x2b
 8005a30:	2909      	cmp	r1, #9
 8005a32:	7042      	strb	r2, [r0, #1]
 8005a34:	dd2a      	ble.n	8005a8c <__exponent+0x70>
 8005a36:	f10d 0407 	add.w	r4, sp, #7
 8005a3a:	46a4      	mov	ip, r4
 8005a3c:	270a      	movs	r7, #10
 8005a3e:	46a6      	mov	lr, r4
 8005a40:	460a      	mov	r2, r1
 8005a42:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a46:	fb07 1516 	mls	r5, r7, r6, r1
 8005a4a:	3530      	adds	r5, #48	; 0x30
 8005a4c:	2a63      	cmp	r2, #99	; 0x63
 8005a4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a56:	4631      	mov	r1, r6
 8005a58:	dcf1      	bgt.n	8005a3e <__exponent+0x22>
 8005a5a:	3130      	adds	r1, #48	; 0x30
 8005a5c:	f1ae 0502 	sub.w	r5, lr, #2
 8005a60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a64:	1c44      	adds	r4, r0, #1
 8005a66:	4629      	mov	r1, r5
 8005a68:	4561      	cmp	r1, ip
 8005a6a:	d30a      	bcc.n	8005a82 <__exponent+0x66>
 8005a6c:	f10d 0209 	add.w	r2, sp, #9
 8005a70:	eba2 020e 	sub.w	r2, r2, lr
 8005a74:	4565      	cmp	r5, ip
 8005a76:	bf88      	it	hi
 8005a78:	2200      	movhi	r2, #0
 8005a7a:	4413      	add	r3, r2
 8005a7c:	1a18      	subs	r0, r3, r0
 8005a7e:	b003      	add	sp, #12
 8005a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a8a:	e7ed      	b.n	8005a68 <__exponent+0x4c>
 8005a8c:	2330      	movs	r3, #48	; 0x30
 8005a8e:	3130      	adds	r1, #48	; 0x30
 8005a90:	7083      	strb	r3, [r0, #2]
 8005a92:	70c1      	strb	r1, [r0, #3]
 8005a94:	1d03      	adds	r3, r0, #4
 8005a96:	e7f1      	b.n	8005a7c <__exponent+0x60>

08005a98 <_printf_float>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ed2d 8b02 	vpush	{d8}
 8005aa0:	b08d      	sub	sp, #52	; 0x34
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	461f      	mov	r7, r3
 8005aac:	4605      	mov	r5, r0
 8005aae:	f001 fa59 	bl	8006f64 <_localeconv_r>
 8005ab2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	f7fa fb92 	bl	80001e0 <strlen>
 8005abc:	2300      	movs	r3, #0
 8005abe:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005acc:	3307      	adds	r3, #7
 8005ace:	f023 0307 	bic.w	r3, r3, #7
 8005ad2:	f103 0208 	add.w	r2, r3, #8
 8005ad6:	f8c8 2000 	str.w	r2, [r8]
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ae2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ae6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005aea:	9307      	str	r3, [sp, #28]
 8005aec:	f8cd 8018 	str.w	r8, [sp, #24]
 8005af0:	ee08 0a10 	vmov	s16, r0
 8005af4:	4b9f      	ldr	r3, [pc, #636]	; (8005d74 <_printf_float+0x2dc>)
 8005af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	f7fb f81d 	bl	8000b3c <__aeabi_dcmpun>
 8005b02:	bb88      	cbnz	r0, 8005b68 <_printf_float+0xd0>
 8005b04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b08:	4b9a      	ldr	r3, [pc, #616]	; (8005d74 <_printf_float+0x2dc>)
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0e:	f7fa fff7 	bl	8000b00 <__aeabi_dcmple>
 8005b12:	bb48      	cbnz	r0, 8005b68 <_printf_float+0xd0>
 8005b14:	2200      	movs	r2, #0
 8005b16:	2300      	movs	r3, #0
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	f7fa ffe6 	bl	8000aec <__aeabi_dcmplt>
 8005b20:	b110      	cbz	r0, 8005b28 <_printf_float+0x90>
 8005b22:	232d      	movs	r3, #45	; 0x2d
 8005b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b28:	4b93      	ldr	r3, [pc, #588]	; (8005d78 <_printf_float+0x2e0>)
 8005b2a:	4894      	ldr	r0, [pc, #592]	; (8005d7c <_printf_float+0x2e4>)
 8005b2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b30:	bf94      	ite	ls
 8005b32:	4698      	movls	r8, r3
 8005b34:	4680      	movhi	r8, r0
 8005b36:	2303      	movs	r3, #3
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	9b05      	ldr	r3, [sp, #20]
 8005b3c:	f023 0204 	bic.w	r2, r3, #4
 8005b40:	6022      	str	r2, [r4, #0]
 8005b42:	f04f 0900 	mov.w	r9, #0
 8005b46:	9700      	str	r7, [sp, #0]
 8005b48:	4633      	mov	r3, r6
 8005b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 f9d8 	bl	8005f04 <_printf_common>
 8005b54:	3001      	adds	r0, #1
 8005b56:	f040 8090 	bne.w	8005c7a <_printf_float+0x1e2>
 8005b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5e:	b00d      	add	sp, #52	; 0x34
 8005b60:	ecbd 8b02 	vpop	{d8}
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	4649      	mov	r1, r9
 8005b70:	f7fa ffe4 	bl	8000b3c <__aeabi_dcmpun>
 8005b74:	b140      	cbz	r0, 8005b88 <_printf_float+0xf0>
 8005b76:	464b      	mov	r3, r9
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfbc      	itt	lt
 8005b7c:	232d      	movlt	r3, #45	; 0x2d
 8005b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b82:	487f      	ldr	r0, [pc, #508]	; (8005d80 <_printf_float+0x2e8>)
 8005b84:	4b7f      	ldr	r3, [pc, #508]	; (8005d84 <_printf_float+0x2ec>)
 8005b86:	e7d1      	b.n	8005b2c <_printf_float+0x94>
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b8e:	9206      	str	r2, [sp, #24]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	d13f      	bne.n	8005c14 <_printf_float+0x17c>
 8005b94:	2306      	movs	r3, #6
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	9b05      	ldr	r3, [sp, #20]
 8005b9a:	6861      	ldr	r1, [r4, #4]
 8005b9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9303      	str	r3, [sp, #12]
 8005ba4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005baa:	ab09      	add	r3, sp, #36	; 0x24
 8005bac:	ec49 8b10 	vmov	d0, r8, r9
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f7ff fecd 	bl	8005958 <__cvt>
 8005bbe:	9b06      	ldr	r3, [sp, #24]
 8005bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bc2:	2b47      	cmp	r3, #71	; 0x47
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	d108      	bne.n	8005bda <_printf_float+0x142>
 8005bc8:	1cc8      	adds	r0, r1, #3
 8005bca:	db02      	blt.n	8005bd2 <_printf_float+0x13a>
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	dd41      	ble.n	8005c56 <_printf_float+0x1be>
 8005bd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bd6:	fa5f fb8b 	uxtb.w	fp, fp
 8005bda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bde:	d820      	bhi.n	8005c22 <_printf_float+0x18a>
 8005be0:	3901      	subs	r1, #1
 8005be2:	465a      	mov	r2, fp
 8005be4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005be8:	9109      	str	r1, [sp, #36]	; 0x24
 8005bea:	f7ff ff17 	bl	8005a1c <__exponent>
 8005bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf0:	1813      	adds	r3, r2, r0
 8005bf2:	2a01      	cmp	r2, #1
 8005bf4:	4681      	mov	r9, r0
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	dc02      	bgt.n	8005c00 <_printf_float+0x168>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	07d2      	lsls	r2, r2, #31
 8005bfe:	d501      	bpl.n	8005c04 <_printf_float+0x16c>
 8005c00:	3301      	adds	r3, #1
 8005c02:	6123      	str	r3, [r4, #16]
 8005c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d09c      	beq.n	8005b46 <_printf_float+0xae>
 8005c0c:	232d      	movs	r3, #45	; 0x2d
 8005c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c12:	e798      	b.n	8005b46 <_printf_float+0xae>
 8005c14:	9a06      	ldr	r2, [sp, #24]
 8005c16:	2a47      	cmp	r2, #71	; 0x47
 8005c18:	d1be      	bne.n	8005b98 <_printf_float+0x100>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1bc      	bne.n	8005b98 <_printf_float+0x100>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7b9      	b.n	8005b96 <_printf_float+0xfe>
 8005c22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c26:	d118      	bne.n	8005c5a <_printf_float+0x1c2>
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	dd0b      	ble.n	8005c46 <_printf_float+0x1ae>
 8005c2e:	6121      	str	r1, [r4, #16]
 8005c30:	b913      	cbnz	r3, 8005c38 <_printf_float+0x1a0>
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	07d0      	lsls	r0, r2, #31
 8005c36:	d502      	bpl.n	8005c3e <_printf_float+0x1a6>
 8005c38:	3301      	adds	r3, #1
 8005c3a:	440b      	add	r3, r1
 8005c3c:	6123      	str	r3, [r4, #16]
 8005c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c40:	f04f 0900 	mov.w	r9, #0
 8005c44:	e7de      	b.n	8005c04 <_printf_float+0x16c>
 8005c46:	b913      	cbnz	r3, 8005c4e <_printf_float+0x1b6>
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	07d2      	lsls	r2, r2, #31
 8005c4c:	d501      	bpl.n	8005c52 <_printf_float+0x1ba>
 8005c4e:	3302      	adds	r3, #2
 8005c50:	e7f4      	b.n	8005c3c <_printf_float+0x1a4>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e7f2      	b.n	8005c3c <_printf_float+0x1a4>
 8005c56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	db05      	blt.n	8005c6c <_printf_float+0x1d4>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	6121      	str	r1, [r4, #16]
 8005c64:	07d8      	lsls	r0, r3, #31
 8005c66:	d5ea      	bpl.n	8005c3e <_printf_float+0x1a6>
 8005c68:	1c4b      	adds	r3, r1, #1
 8005c6a:	e7e7      	b.n	8005c3c <_printf_float+0x1a4>
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	bfd4      	ite	le
 8005c70:	f1c1 0202 	rsble	r2, r1, #2
 8005c74:	2201      	movgt	r2, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	e7e0      	b.n	8005c3c <_printf_float+0x1a4>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	055a      	lsls	r2, r3, #21
 8005c7e:	d407      	bmi.n	8005c90 <_printf_float+0x1f8>
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	4642      	mov	r2, r8
 8005c84:	4631      	mov	r1, r6
 8005c86:	4628      	mov	r0, r5
 8005c88:	47b8      	blx	r7
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d12c      	bne.n	8005ce8 <_printf_float+0x250>
 8005c8e:	e764      	b.n	8005b5a <_printf_float+0xc2>
 8005c90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c94:	f240 80e0 	bls.w	8005e58 <_printf_float+0x3c0>
 8005c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f7fa ff1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d034      	beq.n	8005d12 <_printf_float+0x27a>
 8005ca8:	4a37      	ldr	r2, [pc, #220]	; (8005d88 <_printf_float+0x2f0>)
 8005caa:	2301      	movs	r3, #1
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af51 	beq.w	8005b5a <_printf_float+0xc2>
 8005cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	db02      	blt.n	8005cc6 <_printf_float+0x22e>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07d8      	lsls	r0, r3, #31
 8005cc4:	d510      	bpl.n	8005ce8 <_printf_float+0x250>
 8005cc6:	ee18 3a10 	vmov	r3, s16
 8005cca:	4652      	mov	r2, sl
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af41 	beq.w	8005b5a <_printf_float+0xc2>
 8005cd8:	f04f 0800 	mov.w	r8, #0
 8005cdc:	f104 091a 	add.w	r9, r4, #26
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	4543      	cmp	r3, r8
 8005ce6:	dc09      	bgt.n	8005cfc <_printf_float+0x264>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	f100 8105 	bmi.w	8005efa <_printf_float+0x462>
 8005cf0:	68e0      	ldr	r0, [r4, #12]
 8005cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf4:	4298      	cmp	r0, r3
 8005cf6:	bfb8      	it	lt
 8005cf8:	4618      	movlt	r0, r3
 8005cfa:	e730      	b.n	8005b5e <_printf_float+0xc6>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	464a      	mov	r2, r9
 8005d00:	4631      	mov	r1, r6
 8005d02:	4628      	mov	r0, r5
 8005d04:	47b8      	blx	r7
 8005d06:	3001      	adds	r0, #1
 8005d08:	f43f af27 	beq.w	8005b5a <_printf_float+0xc2>
 8005d0c:	f108 0801 	add.w	r8, r8, #1
 8005d10:	e7e6      	b.n	8005ce0 <_printf_float+0x248>
 8005d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dc39      	bgt.n	8005d8c <_printf_float+0x2f4>
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <_printf_float+0x2f0>)
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	47b8      	blx	r7
 8005d22:	3001      	adds	r0, #1
 8005d24:	f43f af19 	beq.w	8005b5a <_printf_float+0xc2>
 8005d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d102      	bne.n	8005d36 <_printf_float+0x29e>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	07d9      	lsls	r1, r3, #31
 8005d34:	d5d8      	bpl.n	8005ce8 <_printf_float+0x250>
 8005d36:	ee18 3a10 	vmov	r3, s16
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f af09 	beq.w	8005b5a <_printf_float+0xc2>
 8005d48:	f04f 0900 	mov.w	r9, #0
 8005d4c:	f104 0a1a 	add.w	sl, r4, #26
 8005d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d52:	425b      	negs	r3, r3
 8005d54:	454b      	cmp	r3, r9
 8005d56:	dc01      	bgt.n	8005d5c <_printf_float+0x2c4>
 8005d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5a:	e792      	b.n	8005c82 <_printf_float+0x1ea>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4652      	mov	r2, sl
 8005d60:	4631      	mov	r1, r6
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	f43f aef7 	beq.w	8005b5a <_printf_float+0xc2>
 8005d6c:	f109 0901 	add.w	r9, r9, #1
 8005d70:	e7ee      	b.n	8005d50 <_printf_float+0x2b8>
 8005d72:	bf00      	nop
 8005d74:	7fefffff 	.word	0x7fefffff
 8005d78:	080087b4 	.word	0x080087b4
 8005d7c:	080087b8 	.word	0x080087b8
 8005d80:	080087c0 	.word	0x080087c0
 8005d84:	080087bc 	.word	0x080087bc
 8005d88:	080087c4 	.word	0x080087c4
 8005d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d90:	429a      	cmp	r2, r3
 8005d92:	bfa8      	it	ge
 8005d94:	461a      	movge	r2, r3
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	4691      	mov	r9, r2
 8005d9a:	dc37      	bgt.n	8005e0c <_printf_float+0x374>
 8005d9c:	f04f 0b00 	mov.w	fp, #0
 8005da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005da4:	f104 021a 	add.w	r2, r4, #26
 8005da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005daa:	9305      	str	r3, [sp, #20]
 8005dac:	eba3 0309 	sub.w	r3, r3, r9
 8005db0:	455b      	cmp	r3, fp
 8005db2:	dc33      	bgt.n	8005e1c <_printf_float+0x384>
 8005db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db8:	429a      	cmp	r2, r3
 8005dba:	db3b      	blt.n	8005e34 <_printf_float+0x39c>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d438      	bmi.n	8005e34 <_printf_float+0x39c>
 8005dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc4:	9a05      	ldr	r2, [sp, #20]
 8005dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dc8:	1a9a      	subs	r2, r3, r2
 8005dca:	eba3 0901 	sub.w	r9, r3, r1
 8005dce:	4591      	cmp	r9, r2
 8005dd0:	bfa8      	it	ge
 8005dd2:	4691      	movge	r9, r2
 8005dd4:	f1b9 0f00 	cmp.w	r9, #0
 8005dd8:	dc35      	bgt.n	8005e46 <_printf_float+0x3ae>
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005de2:	f104 0a1a 	add.w	sl, r4, #26
 8005de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dea:	1a9b      	subs	r3, r3, r2
 8005dec:	eba3 0309 	sub.w	r3, r3, r9
 8005df0:	4543      	cmp	r3, r8
 8005df2:	f77f af79 	ble.w	8005ce8 <_printf_float+0x250>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f aeaa 	beq.w	8005b5a <_printf_float+0xc2>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	e7ec      	b.n	8005de6 <_printf_float+0x34e>
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4642      	mov	r2, r8
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	d1c0      	bne.n	8005d9c <_printf_float+0x304>
 8005e1a:	e69e      	b.n	8005b5a <_printf_float+0xc2>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	9205      	str	r2, [sp, #20]
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f ae97 	beq.w	8005b5a <_printf_float+0xc2>
 8005e2c:	9a05      	ldr	r2, [sp, #20]
 8005e2e:	f10b 0b01 	add.w	fp, fp, #1
 8005e32:	e7b9      	b.n	8005da8 <_printf_float+0x310>
 8005e34:	ee18 3a10 	vmov	r3, s16
 8005e38:	4652      	mov	r2, sl
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	d1be      	bne.n	8005dc2 <_printf_float+0x32a>
 8005e44:	e689      	b.n	8005b5a <_printf_float+0xc2>
 8005e46:	9a05      	ldr	r2, [sp, #20]
 8005e48:	464b      	mov	r3, r9
 8005e4a:	4442      	add	r2, r8
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	d1c1      	bne.n	8005dda <_printf_float+0x342>
 8005e56:	e680      	b.n	8005b5a <_printf_float+0xc2>
 8005e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e5a:	2a01      	cmp	r2, #1
 8005e5c:	dc01      	bgt.n	8005e62 <_printf_float+0x3ca>
 8005e5e:	07db      	lsls	r3, r3, #31
 8005e60:	d538      	bpl.n	8005ed4 <_printf_float+0x43c>
 8005e62:	2301      	movs	r3, #1
 8005e64:	4642      	mov	r2, r8
 8005e66:	4631      	mov	r1, r6
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47b8      	blx	r7
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	f43f ae74 	beq.w	8005b5a <_printf_float+0xc2>
 8005e72:	ee18 3a10 	vmov	r3, s16
 8005e76:	4652      	mov	r2, sl
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f ae6b 	beq.w	8005b5a <_printf_float+0xc2>
 8005e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f7fa fe24 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e90:	b9d8      	cbnz	r0, 8005eca <_printf_float+0x432>
 8005e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e94:	f108 0201 	add.w	r2, r8, #1
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d10e      	bne.n	8005ec2 <_printf_float+0x42a>
 8005ea4:	e659      	b.n	8005b5a <_printf_float+0xc2>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f ae52 	beq.w	8005b5a <_printf_float+0xc2>
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4543      	cmp	r3, r8
 8005ec0:	dcf1      	bgt.n	8005ea6 <_printf_float+0x40e>
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ec8:	e6dc      	b.n	8005c84 <_printf_float+0x1ec>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	f104 0a1a 	add.w	sl, r4, #26
 8005ed2:	e7f2      	b.n	8005eba <_printf_float+0x422>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	e7df      	b.n	8005e9a <_printf_float+0x402>
 8005eda:	2301      	movs	r3, #1
 8005edc:	464a      	mov	r2, r9
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae38 	beq.w	8005b5a <_printf_float+0xc2>
 8005eea:	f108 0801 	add.w	r8, r8, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	4543      	cmp	r3, r8
 8005ef6:	dcf0      	bgt.n	8005eda <_printf_float+0x442>
 8005ef8:	e6fa      	b.n	8005cf0 <_printf_float+0x258>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f104 0919 	add.w	r9, r4, #25
 8005f02:	e7f4      	b.n	8005eee <_printf_float+0x456>

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f50:	1e13      	subs	r3, r2, #0
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	68e5      	ldr	r5, [r4, #12]
 8005f6e:	6832      	ldr	r2, [r6, #0]
 8005f70:	f003 0306 	and.w	r3, r3, #6
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	bf08      	it	eq
 8005f78:	1aad      	subeq	r5, r5, r2
 8005f7a:	68a3      	ldr	r3, [r4, #8]
 8005f7c:	6922      	ldr	r2, [r4, #16]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c0      	blx	r8
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	; 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe8:	2f78      	cmp	r7, #120	; 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	; 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d8 	beq.w	80061b2 <_printf_i+0x1d2>
 8006002:	2f58      	cmp	r7, #88	; 0x58
 8006004:	f000 80a3 	beq.w	800614e <_printf_i+0x16e>
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	; (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	08006199 	.word	0x08006199
 8006050:	080060bd 	.word	0x080060bd
 8006054:	0800617b 	.word	0x0800617b
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061bb 	.word	0x080061bb
 8006064:	08006009 	.word	0x08006009
 8006068:	080060bd 	.word	0x080060bd
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	08006183 	.word	0x08006183
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e0a3      	b.n	80061d4 <_printf_i+0x1f4>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	6829      	ldr	r1, [r5, #0]
 8006090:	0606      	lsls	r6, r0, #24
 8006092:	f101 0304 	add.w	r3, r1, #4
 8006096:	d50a      	bpl.n	80060ae <_printf_i+0xce>
 8006098:	680e      	ldr	r6, [r1, #0]
 800609a:	602b      	str	r3, [r5, #0]
 800609c:	2e00      	cmp	r6, #0
 800609e:	da03      	bge.n	80060a8 <_printf_i+0xc8>
 80060a0:	232d      	movs	r3, #45	; 0x2d
 80060a2:	4276      	negs	r6, r6
 80060a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a8:	485e      	ldr	r0, [pc, #376]	; (8006224 <_printf_i+0x244>)
 80060aa:	230a      	movs	r3, #10
 80060ac:	e019      	b.n	80060e2 <_printf_i+0x102>
 80060ae:	680e      	ldr	r6, [r1, #0]
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060b6:	bf18      	it	ne
 80060b8:	b236      	sxthne	r6, r6
 80060ba:	e7ef      	b.n	800609c <_printf_i+0xbc>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	6820      	ldr	r0, [r4, #0]
 80060c0:	1d19      	adds	r1, r3, #4
 80060c2:	6029      	str	r1, [r5, #0]
 80060c4:	0601      	lsls	r1, r0, #24
 80060c6:	d501      	bpl.n	80060cc <_printf_i+0xec>
 80060c8:	681e      	ldr	r6, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <_printf_i+0xf2>
 80060cc:	0646      	lsls	r6, r0, #25
 80060ce:	d5fb      	bpl.n	80060c8 <_printf_i+0xe8>
 80060d0:	881e      	ldrh	r6, [r3, #0]
 80060d2:	4854      	ldr	r0, [pc, #336]	; (8006224 <_printf_i+0x244>)
 80060d4:	2f6f      	cmp	r7, #111	; 0x6f
 80060d6:	bf0c      	ite	eq
 80060d8:	2308      	moveq	r3, #8
 80060da:	230a      	movne	r3, #10
 80060dc:	2100      	movs	r1, #0
 80060de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e2:	6865      	ldr	r5, [r4, #4]
 80060e4:	60a5      	str	r5, [r4, #8]
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	bfa2      	ittt	ge
 80060ea:	6821      	ldrge	r1, [r4, #0]
 80060ec:	f021 0104 	bicge.w	r1, r1, #4
 80060f0:	6021      	strge	r1, [r4, #0]
 80060f2:	b90e      	cbnz	r6, 80060f8 <_printf_i+0x118>
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	d04d      	beq.n	8006194 <_printf_i+0x1b4>
 80060f8:	4615      	mov	r5, r2
 80060fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80060fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006102:	5dc7      	ldrb	r7, [r0, r7]
 8006104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006108:	4637      	mov	r7, r6
 800610a:	42bb      	cmp	r3, r7
 800610c:	460e      	mov	r6, r1
 800610e:	d9f4      	bls.n	80060fa <_printf_i+0x11a>
 8006110:	2b08      	cmp	r3, #8
 8006112:	d10b      	bne.n	800612c <_printf_i+0x14c>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	07de      	lsls	r6, r3, #31
 8006118:	d508      	bpl.n	800612c <_printf_i+0x14c>
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	6861      	ldr	r1, [r4, #4]
 800611e:	4299      	cmp	r1, r3
 8006120:	bfde      	ittt	le
 8006122:	2330      	movle	r3, #48	; 0x30
 8006124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800612c:	1b52      	subs	r2, r2, r5
 800612e:	6122      	str	r2, [r4, #16]
 8006130:	f8cd a000 	str.w	sl, [sp]
 8006134:	464b      	mov	r3, r9
 8006136:	aa03      	add	r2, sp, #12
 8006138:	4621      	mov	r1, r4
 800613a:	4640      	mov	r0, r8
 800613c:	f7ff fee2 	bl	8005f04 <_printf_common>
 8006140:	3001      	adds	r0, #1
 8006142:	d14c      	bne.n	80061de <_printf_i+0x1fe>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	b004      	add	sp, #16
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	4835      	ldr	r0, [pc, #212]	; (8006224 <_printf_i+0x244>)
 8006150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006154:	6829      	ldr	r1, [r5, #0]
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f851 6b04 	ldr.w	r6, [r1], #4
 800615c:	6029      	str	r1, [r5, #0]
 800615e:	061d      	lsls	r5, r3, #24
 8006160:	d514      	bpl.n	800618c <_printf_i+0x1ac>
 8006162:	07df      	lsls	r7, r3, #31
 8006164:	bf44      	itt	mi
 8006166:	f043 0320 	orrmi.w	r3, r3, #32
 800616a:	6023      	strmi	r3, [r4, #0]
 800616c:	b91e      	cbnz	r6, 8006176 <_printf_i+0x196>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	f023 0320 	bic.w	r3, r3, #32
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	2310      	movs	r3, #16
 8006178:	e7b0      	b.n	80060dc <_printf_i+0xfc>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f043 0320 	orr.w	r3, r3, #32
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	2378      	movs	r3, #120	; 0x78
 8006184:	4828      	ldr	r0, [pc, #160]	; (8006228 <_printf_i+0x248>)
 8006186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800618a:	e7e3      	b.n	8006154 <_printf_i+0x174>
 800618c:	0659      	lsls	r1, r3, #25
 800618e:	bf48      	it	mi
 8006190:	b2b6      	uxthmi	r6, r6
 8006192:	e7e6      	b.n	8006162 <_printf_i+0x182>
 8006194:	4615      	mov	r5, r2
 8006196:	e7bb      	b.n	8006110 <_printf_i+0x130>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	6826      	ldr	r6, [r4, #0]
 800619c:	6961      	ldr	r1, [r4, #20]
 800619e:	1d18      	adds	r0, r3, #4
 80061a0:	6028      	str	r0, [r5, #0]
 80061a2:	0635      	lsls	r5, r6, #24
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0x1cc>
 80061a8:	6019      	str	r1, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0x1d2>
 80061ac:	0670      	lsls	r0, r6, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0x1c8>
 80061b0:	8019      	strh	r1, [r3, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	4615      	mov	r5, r2
 80061b8:	e7ba      	b.n	8006130 <_printf_i+0x150>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	1d1a      	adds	r2, r3, #4
 80061be:	602a      	str	r2, [r5, #0]
 80061c0:	681d      	ldr	r5, [r3, #0]
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	2100      	movs	r1, #0
 80061c6:	4628      	mov	r0, r5
 80061c8:	f7fa f812 	bl	80001f0 <memchr>
 80061cc:	b108      	cbz	r0, 80061d2 <_printf_i+0x1f2>
 80061ce:	1b40      	subs	r0, r0, r5
 80061d0:	6060      	str	r0, [r4, #4]
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	2300      	movs	r3, #0
 80061d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061dc:	e7a8      	b.n	8006130 <_printf_i+0x150>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	462a      	mov	r2, r5
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d0ab      	beq.n	8006144 <_printf_i+0x164>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	079b      	lsls	r3, r3, #30
 80061f0:	d413      	bmi.n	800621a <_printf_i+0x23a>
 80061f2:	68e0      	ldr	r0, [r4, #12]
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	4298      	cmp	r0, r3
 80061f8:	bfb8      	it	lt
 80061fa:	4618      	movlt	r0, r3
 80061fc:	e7a4      	b.n	8006148 <_printf_i+0x168>
 80061fe:	2301      	movs	r3, #1
 8006200:	4632      	mov	r2, r6
 8006202:	4649      	mov	r1, r9
 8006204:	4640      	mov	r0, r8
 8006206:	47d0      	blx	sl
 8006208:	3001      	adds	r0, #1
 800620a:	d09b      	beq.n	8006144 <_printf_i+0x164>
 800620c:	3501      	adds	r5, #1
 800620e:	68e3      	ldr	r3, [r4, #12]
 8006210:	9903      	ldr	r1, [sp, #12]
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	42ab      	cmp	r3, r5
 8006216:	dcf2      	bgt.n	80061fe <_printf_i+0x21e>
 8006218:	e7eb      	b.n	80061f2 <_printf_i+0x212>
 800621a:	2500      	movs	r5, #0
 800621c:	f104 0619 	add.w	r6, r4, #25
 8006220:	e7f5      	b.n	800620e <_printf_i+0x22e>
 8006222:	bf00      	nop
 8006224:	080087c6 	.word	0x080087c6
 8006228:	080087d7 	.word	0x080087d7

0800622c <siprintf>:
 800622c:	b40e      	push	{r1, r2, r3}
 800622e:	b500      	push	{lr}
 8006230:	b09c      	sub	sp, #112	; 0x70
 8006232:	ab1d      	add	r3, sp, #116	; 0x74
 8006234:	9002      	str	r0, [sp, #8]
 8006236:	9006      	str	r0, [sp, #24]
 8006238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800623c:	4809      	ldr	r0, [pc, #36]	; (8006264 <siprintf+0x38>)
 800623e:	9107      	str	r1, [sp, #28]
 8006240:	9104      	str	r1, [sp, #16]
 8006242:	4909      	ldr	r1, [pc, #36]	; (8006268 <siprintf+0x3c>)
 8006244:	f853 2b04 	ldr.w	r2, [r3], #4
 8006248:	9105      	str	r1, [sp, #20]
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	a902      	add	r1, sp, #8
 8006250:	f001 fb78 	bl	8007944 <_svfiprintf_r>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	b01c      	add	sp, #112	; 0x70
 800625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006260:	b003      	add	sp, #12
 8006262:	4770      	bx	lr
 8006264:	20000024 	.word	0x20000024
 8006268:	ffff0208 	.word	0xffff0208

0800626c <quorem>:
 800626c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	6903      	ldr	r3, [r0, #16]
 8006272:	690c      	ldr	r4, [r1, #16]
 8006274:	42a3      	cmp	r3, r4
 8006276:	4607      	mov	r7, r0
 8006278:	f2c0 8081 	blt.w	800637e <quorem+0x112>
 800627c:	3c01      	subs	r4, #1
 800627e:	f101 0814 	add.w	r8, r1, #20
 8006282:	f100 0514 	add.w	r5, r0, #20
 8006286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006294:	3301      	adds	r3, #1
 8006296:	429a      	cmp	r2, r3
 8006298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800629c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80062a4:	d331      	bcc.n	800630a <quorem+0x9e>
 80062a6:	f04f 0e00 	mov.w	lr, #0
 80062aa:	4640      	mov	r0, r8
 80062ac:	46ac      	mov	ip, r5
 80062ae:	46f2      	mov	sl, lr
 80062b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80062b4:	b293      	uxth	r3, r2
 80062b6:	fb06 e303 	mla	r3, r6, r3, lr
 80062ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ebaa 0303 	sub.w	r3, sl, r3
 80062c4:	f8dc a000 	ldr.w	sl, [ip]
 80062c8:	0c12      	lsrs	r2, r2, #16
 80062ca:	fa13 f38a 	uxtah	r3, r3, sl
 80062ce:	fb06 e202 	mla	r2, r6, r2, lr
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062da:	b292      	uxth	r2, r2
 80062dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80062e8:	4581      	cmp	r9, r0
 80062ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ee:	f84c 3b04 	str.w	r3, [ip], #4
 80062f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062f6:	d2db      	bcs.n	80062b0 <quorem+0x44>
 80062f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80062fc:	b92b      	cbnz	r3, 800630a <quorem+0x9e>
 80062fe:	9b01      	ldr	r3, [sp, #4]
 8006300:	3b04      	subs	r3, #4
 8006302:	429d      	cmp	r5, r3
 8006304:	461a      	mov	r2, r3
 8006306:	d32e      	bcc.n	8006366 <quorem+0xfa>
 8006308:	613c      	str	r4, [r7, #16]
 800630a:	4638      	mov	r0, r7
 800630c:	f001 f8c6 	bl	800749c <__mcmp>
 8006310:	2800      	cmp	r0, #0
 8006312:	db24      	blt.n	800635e <quorem+0xf2>
 8006314:	3601      	adds	r6, #1
 8006316:	4628      	mov	r0, r5
 8006318:	f04f 0c00 	mov.w	ip, #0
 800631c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006320:	f8d0 e000 	ldr.w	lr, [r0]
 8006324:	b293      	uxth	r3, r2
 8006326:	ebac 0303 	sub.w	r3, ip, r3
 800632a:	0c12      	lsrs	r2, r2, #16
 800632c:	fa13 f38e 	uxtah	r3, r3, lr
 8006330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006338:	b29b      	uxth	r3, r3
 800633a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800633e:	45c1      	cmp	r9, r8
 8006340:	f840 3b04 	str.w	r3, [r0], #4
 8006344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006348:	d2e8      	bcs.n	800631c <quorem+0xb0>
 800634a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800634e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006352:	b922      	cbnz	r2, 800635e <quorem+0xf2>
 8006354:	3b04      	subs	r3, #4
 8006356:	429d      	cmp	r5, r3
 8006358:	461a      	mov	r2, r3
 800635a:	d30a      	bcc.n	8006372 <quorem+0x106>
 800635c:	613c      	str	r4, [r7, #16]
 800635e:	4630      	mov	r0, r6
 8006360:	b003      	add	sp, #12
 8006362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	3b04      	subs	r3, #4
 800636a:	2a00      	cmp	r2, #0
 800636c:	d1cc      	bne.n	8006308 <quorem+0x9c>
 800636e:	3c01      	subs	r4, #1
 8006370:	e7c7      	b.n	8006302 <quorem+0x96>
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	3b04      	subs	r3, #4
 8006376:	2a00      	cmp	r2, #0
 8006378:	d1f0      	bne.n	800635c <quorem+0xf0>
 800637a:	3c01      	subs	r4, #1
 800637c:	e7eb      	b.n	8006356 <quorem+0xea>
 800637e:	2000      	movs	r0, #0
 8006380:	e7ee      	b.n	8006360 <quorem+0xf4>
 8006382:	0000      	movs	r0, r0
 8006384:	0000      	movs	r0, r0
	...

08006388 <_dtoa_r>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	ed2d 8b04 	vpush	{d8-d9}
 8006390:	ec57 6b10 	vmov	r6, r7, d0
 8006394:	b093      	sub	sp, #76	; 0x4c
 8006396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800639c:	9106      	str	r1, [sp, #24]
 800639e:	ee10 aa10 	vmov	sl, s0
 80063a2:	4604      	mov	r4, r0
 80063a4:	9209      	str	r2, [sp, #36]	; 0x24
 80063a6:	930c      	str	r3, [sp, #48]	; 0x30
 80063a8:	46bb      	mov	fp, r7
 80063aa:	b975      	cbnz	r5, 80063ca <_dtoa_r+0x42>
 80063ac:	2010      	movs	r0, #16
 80063ae:	f000 fddd 	bl	8006f6c <malloc>
 80063b2:	4602      	mov	r2, r0
 80063b4:	6260      	str	r0, [r4, #36]	; 0x24
 80063b6:	b920      	cbnz	r0, 80063c2 <_dtoa_r+0x3a>
 80063b8:	4ba7      	ldr	r3, [pc, #668]	; (8006658 <_dtoa_r+0x2d0>)
 80063ba:	21ea      	movs	r1, #234	; 0xea
 80063bc:	48a7      	ldr	r0, [pc, #668]	; (800665c <_dtoa_r+0x2d4>)
 80063be:	f001 fbd1 	bl	8007b64 <__assert_func>
 80063c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063c6:	6005      	str	r5, [r0, #0]
 80063c8:	60c5      	str	r5, [r0, #12]
 80063ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063cc:	6819      	ldr	r1, [r3, #0]
 80063ce:	b151      	cbz	r1, 80063e6 <_dtoa_r+0x5e>
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	604a      	str	r2, [r1, #4]
 80063d4:	2301      	movs	r3, #1
 80063d6:	4093      	lsls	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
 80063da:	4620      	mov	r0, r4
 80063dc:	f000 fe1c 	bl	8007018 <_Bfree>
 80063e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	1e3b      	subs	r3, r7, #0
 80063e8:	bfaa      	itet	ge
 80063ea:	2300      	movge	r3, #0
 80063ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063f0:	f8c8 3000 	strge.w	r3, [r8]
 80063f4:	4b9a      	ldr	r3, [pc, #616]	; (8006660 <_dtoa_r+0x2d8>)
 80063f6:	bfbc      	itt	lt
 80063f8:	2201      	movlt	r2, #1
 80063fa:	f8c8 2000 	strlt.w	r2, [r8]
 80063fe:	ea33 030b 	bics.w	r3, r3, fp
 8006402:	d11b      	bne.n	800643c <_dtoa_r+0xb4>
 8006404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006406:	f242 730f 	movw	r3, #9999	; 0x270f
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006410:	4333      	orrs	r3, r6
 8006412:	f000 8592 	beq.w	8006f3a <_dtoa_r+0xbb2>
 8006416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006418:	b963      	cbnz	r3, 8006434 <_dtoa_r+0xac>
 800641a:	4b92      	ldr	r3, [pc, #584]	; (8006664 <_dtoa_r+0x2dc>)
 800641c:	e022      	b.n	8006464 <_dtoa_r+0xdc>
 800641e:	4b92      	ldr	r3, [pc, #584]	; (8006668 <_dtoa_r+0x2e0>)
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	3308      	adds	r3, #8
 8006424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	9801      	ldr	r0, [sp, #4]
 800642a:	b013      	add	sp, #76	; 0x4c
 800642c:	ecbd 8b04 	vpop	{d8-d9}
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	4b8b      	ldr	r3, [pc, #556]	; (8006664 <_dtoa_r+0x2dc>)
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	3303      	adds	r3, #3
 800643a:	e7f3      	b.n	8006424 <_dtoa_r+0x9c>
 800643c:	2200      	movs	r2, #0
 800643e:	2300      	movs	r3, #0
 8006440:	4650      	mov	r0, sl
 8006442:	4659      	mov	r1, fp
 8006444:	f7fa fb48 	bl	8000ad8 <__aeabi_dcmpeq>
 8006448:	ec4b ab19 	vmov	d9, sl, fp
 800644c:	4680      	mov	r8, r0
 800644e:	b158      	cbz	r0, 8006468 <_dtoa_r+0xe0>
 8006450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006452:	2301      	movs	r3, #1
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 856b 	beq.w	8006f34 <_dtoa_r+0xbac>
 800645e:	4883      	ldr	r0, [pc, #524]	; (800666c <_dtoa_r+0x2e4>)
 8006460:	6018      	str	r0, [r3, #0]
 8006462:	1e43      	subs	r3, r0, #1
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	e7df      	b.n	8006428 <_dtoa_r+0xa0>
 8006468:	ec4b ab10 	vmov	d0, sl, fp
 800646c:	aa10      	add	r2, sp, #64	; 0x40
 800646e:	a911      	add	r1, sp, #68	; 0x44
 8006470:	4620      	mov	r0, r4
 8006472:	f001 f8b9 	bl	80075e8 <__d2b>
 8006476:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800647a:	ee08 0a10 	vmov	s16, r0
 800647e:	2d00      	cmp	r5, #0
 8006480:	f000 8084 	beq.w	800658c <_dtoa_r+0x204>
 8006484:	ee19 3a90 	vmov	r3, s19
 8006488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006490:	4656      	mov	r6, sl
 8006492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800649a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800649e:	4b74      	ldr	r3, [pc, #464]	; (8006670 <_dtoa_r+0x2e8>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7f9 fef7 	bl	8000298 <__aeabi_dsub>
 80064aa:	a365      	add	r3, pc, #404	; (adr r3, 8006640 <_dtoa_r+0x2b8>)
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f7fa f8aa 	bl	8000608 <__aeabi_dmul>
 80064b4:	a364      	add	r3, pc, #400	; (adr r3, 8006648 <_dtoa_r+0x2c0>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7f9 feef 	bl	800029c <__adddf3>
 80064be:	4606      	mov	r6, r0
 80064c0:	4628      	mov	r0, r5
 80064c2:	460f      	mov	r7, r1
 80064c4:	f7fa f836 	bl	8000534 <__aeabi_i2d>
 80064c8:	a361      	add	r3, pc, #388	; (adr r3, 8006650 <_dtoa_r+0x2c8>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7fa f89b 	bl	8000608 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7f9 fedf 	bl	800029c <__adddf3>
 80064de:	4606      	mov	r6, r0
 80064e0:	460f      	mov	r7, r1
 80064e2:	f7fa fb41 	bl	8000b68 <__aeabi_d2iz>
 80064e6:	2200      	movs	r2, #0
 80064e8:	9000      	str	r0, [sp, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	4630      	mov	r0, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	f7fa fafc 	bl	8000aec <__aeabi_dcmplt>
 80064f4:	b150      	cbz	r0, 800650c <_dtoa_r+0x184>
 80064f6:	9800      	ldr	r0, [sp, #0]
 80064f8:	f7fa f81c 	bl	8000534 <__aeabi_i2d>
 80064fc:	4632      	mov	r2, r6
 80064fe:	463b      	mov	r3, r7
 8006500:	f7fa faea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006504:	b910      	cbnz	r0, 800650c <_dtoa_r+0x184>
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	3b01      	subs	r3, #1
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	9b00      	ldr	r3, [sp, #0]
 800650e:	2b16      	cmp	r3, #22
 8006510:	d85a      	bhi.n	80065c8 <_dtoa_r+0x240>
 8006512:	9a00      	ldr	r2, [sp, #0]
 8006514:	4b57      	ldr	r3, [pc, #348]	; (8006674 <_dtoa_r+0x2ec>)
 8006516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	ec51 0b19 	vmov	r0, r1, d9
 8006522:	f7fa fae3 	bl	8000aec <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	d050      	beq.n	80065cc <_dtoa_r+0x244>
 800652a:	9b00      	ldr	r3, [sp, #0]
 800652c:	3b01      	subs	r3, #1
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	930b      	str	r3, [sp, #44]	; 0x2c
 8006534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006536:	1b5d      	subs	r5, r3, r5
 8006538:	1e6b      	subs	r3, r5, #1
 800653a:	9305      	str	r3, [sp, #20]
 800653c:	bf45      	ittet	mi
 800653e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006542:	9304      	strmi	r3, [sp, #16]
 8006544:	2300      	movpl	r3, #0
 8006546:	2300      	movmi	r3, #0
 8006548:	bf4c      	ite	mi
 800654a:	9305      	strmi	r3, [sp, #20]
 800654c:	9304      	strpl	r3, [sp, #16]
 800654e:	9b00      	ldr	r3, [sp, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	db3d      	blt.n	80065d0 <_dtoa_r+0x248>
 8006554:	9b05      	ldr	r3, [sp, #20]
 8006556:	9a00      	ldr	r2, [sp, #0]
 8006558:	920a      	str	r2, [sp, #40]	; 0x28
 800655a:	4413      	add	r3, r2
 800655c:	9305      	str	r3, [sp, #20]
 800655e:	2300      	movs	r3, #0
 8006560:	9307      	str	r3, [sp, #28]
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	2b09      	cmp	r3, #9
 8006566:	f200 8089 	bhi.w	800667c <_dtoa_r+0x2f4>
 800656a:	2b05      	cmp	r3, #5
 800656c:	bfc4      	itt	gt
 800656e:	3b04      	subgt	r3, #4
 8006570:	9306      	strgt	r3, [sp, #24]
 8006572:	9b06      	ldr	r3, [sp, #24]
 8006574:	f1a3 0302 	sub.w	r3, r3, #2
 8006578:	bfcc      	ite	gt
 800657a:	2500      	movgt	r5, #0
 800657c:	2501      	movle	r5, #1
 800657e:	2b03      	cmp	r3, #3
 8006580:	f200 8087 	bhi.w	8006692 <_dtoa_r+0x30a>
 8006584:	e8df f003 	tbb	[pc, r3]
 8006588:	59383a2d 	.word	0x59383a2d
 800658c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006590:	441d      	add	r5, r3
 8006592:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006596:	2b20      	cmp	r3, #32
 8006598:	bfc1      	itttt	gt
 800659a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800659e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80065a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065aa:	bfda      	itte	le
 80065ac:	f1c3 0320 	rsble	r3, r3, #32
 80065b0:	fa06 f003 	lslle.w	r0, r6, r3
 80065b4:	4318      	orrgt	r0, r3
 80065b6:	f7f9 ffad 	bl	8000514 <__aeabi_ui2d>
 80065ba:	2301      	movs	r3, #1
 80065bc:	4606      	mov	r6, r0
 80065be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065c2:	3d01      	subs	r5, #1
 80065c4:	930e      	str	r3, [sp, #56]	; 0x38
 80065c6:	e76a      	b.n	800649e <_dtoa_r+0x116>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7b2      	b.n	8006532 <_dtoa_r+0x1aa>
 80065cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80065ce:	e7b1      	b.n	8006534 <_dtoa_r+0x1ac>
 80065d0:	9b04      	ldr	r3, [sp, #16]
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	4253      	negs	r3, r2
 80065da:	9307      	str	r3, [sp, #28]
 80065dc:	2300      	movs	r3, #0
 80065de:	930a      	str	r3, [sp, #40]	; 0x28
 80065e0:	e7bf      	b.n	8006562 <_dtoa_r+0x1da>
 80065e2:	2300      	movs	r3, #0
 80065e4:	9308      	str	r3, [sp, #32]
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	dc55      	bgt.n	8006698 <_dtoa_r+0x310>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065f2:	461a      	mov	r2, r3
 80065f4:	9209      	str	r2, [sp, #36]	; 0x24
 80065f6:	e00c      	b.n	8006612 <_dtoa_r+0x28a>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e7f3      	b.n	80065e4 <_dtoa_r+0x25c>
 80065fc:	2300      	movs	r3, #0
 80065fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	9b00      	ldr	r3, [sp, #0]
 8006604:	4413      	add	r3, r2
 8006606:	9302      	str	r3, [sp, #8]
 8006608:	3301      	adds	r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	9303      	str	r3, [sp, #12]
 800660e:	bfb8      	it	lt
 8006610:	2301      	movlt	r3, #1
 8006612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006614:	2200      	movs	r2, #0
 8006616:	6042      	str	r2, [r0, #4]
 8006618:	2204      	movs	r2, #4
 800661a:	f102 0614 	add.w	r6, r2, #20
 800661e:	429e      	cmp	r6, r3
 8006620:	6841      	ldr	r1, [r0, #4]
 8006622:	d93d      	bls.n	80066a0 <_dtoa_r+0x318>
 8006624:	4620      	mov	r0, r4
 8006626:	f000 fcb7 	bl	8006f98 <_Balloc>
 800662a:	9001      	str	r0, [sp, #4]
 800662c:	2800      	cmp	r0, #0
 800662e:	d13b      	bne.n	80066a8 <_dtoa_r+0x320>
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <_dtoa_r+0x2f0>)
 8006632:	4602      	mov	r2, r0
 8006634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006638:	e6c0      	b.n	80063bc <_dtoa_r+0x34>
 800663a:	2301      	movs	r3, #1
 800663c:	e7df      	b.n	80065fe <_dtoa_r+0x276>
 800663e:	bf00      	nop
 8006640:	636f4361 	.word	0x636f4361
 8006644:	3fd287a7 	.word	0x3fd287a7
 8006648:	8b60c8b3 	.word	0x8b60c8b3
 800664c:	3fc68a28 	.word	0x3fc68a28
 8006650:	509f79fb 	.word	0x509f79fb
 8006654:	3fd34413 	.word	0x3fd34413
 8006658:	080087f5 	.word	0x080087f5
 800665c:	0800880c 	.word	0x0800880c
 8006660:	7ff00000 	.word	0x7ff00000
 8006664:	080087f1 	.word	0x080087f1
 8006668:	080087e8 	.word	0x080087e8
 800666c:	080087c5 	.word	0x080087c5
 8006670:	3ff80000 	.word	0x3ff80000
 8006674:	08008900 	.word	0x08008900
 8006678:	08008867 	.word	0x08008867
 800667c:	2501      	movs	r5, #1
 800667e:	2300      	movs	r3, #0
 8006680:	9306      	str	r3, [sp, #24]
 8006682:	9508      	str	r5, [sp, #32]
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	2312      	movs	r3, #18
 8006690:	e7b0      	b.n	80065f4 <_dtoa_r+0x26c>
 8006692:	2301      	movs	r3, #1
 8006694:	9308      	str	r3, [sp, #32]
 8006696:	e7f5      	b.n	8006684 <_dtoa_r+0x2fc>
 8006698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800669e:	e7b8      	b.n	8006612 <_dtoa_r+0x28a>
 80066a0:	3101      	adds	r1, #1
 80066a2:	6041      	str	r1, [r0, #4]
 80066a4:	0052      	lsls	r2, r2, #1
 80066a6:	e7b8      	b.n	800661a <_dtoa_r+0x292>
 80066a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066aa:	9a01      	ldr	r2, [sp, #4]
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	2b0e      	cmp	r3, #14
 80066b2:	f200 809d 	bhi.w	80067f0 <_dtoa_r+0x468>
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	f000 809a 	beq.w	80067f0 <_dtoa_r+0x468>
 80066bc:	9b00      	ldr	r3, [sp, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dd32      	ble.n	8006728 <_dtoa_r+0x3a0>
 80066c2:	4ab7      	ldr	r2, [pc, #732]	; (80069a0 <_dtoa_r+0x618>)
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d0:	9b00      	ldr	r3, [sp, #0]
 80066d2:	05d8      	lsls	r0, r3, #23
 80066d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80066d8:	d516      	bpl.n	8006708 <_dtoa_r+0x380>
 80066da:	4bb2      	ldr	r3, [pc, #712]	; (80069a4 <_dtoa_r+0x61c>)
 80066dc:	ec51 0b19 	vmov	r0, r1, d9
 80066e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066e4:	f7fa f8ba 	bl	800085c <__aeabi_ddiv>
 80066e8:	f007 070f 	and.w	r7, r7, #15
 80066ec:	4682      	mov	sl, r0
 80066ee:	468b      	mov	fp, r1
 80066f0:	2503      	movs	r5, #3
 80066f2:	4eac      	ldr	r6, [pc, #688]	; (80069a4 <_dtoa_r+0x61c>)
 80066f4:	b957      	cbnz	r7, 800670c <_dtoa_r+0x384>
 80066f6:	4642      	mov	r2, r8
 80066f8:	464b      	mov	r3, r9
 80066fa:	4650      	mov	r0, sl
 80066fc:	4659      	mov	r1, fp
 80066fe:	f7fa f8ad 	bl	800085c <__aeabi_ddiv>
 8006702:	4682      	mov	sl, r0
 8006704:	468b      	mov	fp, r1
 8006706:	e028      	b.n	800675a <_dtoa_r+0x3d2>
 8006708:	2502      	movs	r5, #2
 800670a:	e7f2      	b.n	80066f2 <_dtoa_r+0x36a>
 800670c:	07f9      	lsls	r1, r7, #31
 800670e:	d508      	bpl.n	8006722 <_dtoa_r+0x39a>
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006718:	f7f9 ff76 	bl	8000608 <__aeabi_dmul>
 800671c:	3501      	adds	r5, #1
 800671e:	4680      	mov	r8, r0
 8006720:	4689      	mov	r9, r1
 8006722:	107f      	asrs	r7, r7, #1
 8006724:	3608      	adds	r6, #8
 8006726:	e7e5      	b.n	80066f4 <_dtoa_r+0x36c>
 8006728:	f000 809b 	beq.w	8006862 <_dtoa_r+0x4da>
 800672c:	9b00      	ldr	r3, [sp, #0]
 800672e:	4f9d      	ldr	r7, [pc, #628]	; (80069a4 <_dtoa_r+0x61c>)
 8006730:	425e      	negs	r6, r3
 8006732:	4b9b      	ldr	r3, [pc, #620]	; (80069a0 <_dtoa_r+0x618>)
 8006734:	f006 020f 	and.w	r2, r6, #15
 8006738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	ec51 0b19 	vmov	r0, r1, d9
 8006744:	f7f9 ff60 	bl	8000608 <__aeabi_dmul>
 8006748:	1136      	asrs	r6, r6, #4
 800674a:	4682      	mov	sl, r0
 800674c:	468b      	mov	fp, r1
 800674e:	2300      	movs	r3, #0
 8006750:	2502      	movs	r5, #2
 8006752:	2e00      	cmp	r6, #0
 8006754:	d17a      	bne.n	800684c <_dtoa_r+0x4c4>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1d3      	bne.n	8006702 <_dtoa_r+0x37a>
 800675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8082 	beq.w	8006866 <_dtoa_r+0x4de>
 8006762:	4b91      	ldr	r3, [pc, #580]	; (80069a8 <_dtoa_r+0x620>)
 8006764:	2200      	movs	r2, #0
 8006766:	4650      	mov	r0, sl
 8006768:	4659      	mov	r1, fp
 800676a:	f7fa f9bf 	bl	8000aec <__aeabi_dcmplt>
 800676e:	2800      	cmp	r0, #0
 8006770:	d079      	beq.n	8006866 <_dtoa_r+0x4de>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d076      	beq.n	8006866 <_dtoa_r+0x4de>
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	dd36      	ble.n	80067ec <_dtoa_r+0x464>
 800677e:	9b00      	ldr	r3, [sp, #0]
 8006780:	4650      	mov	r0, sl
 8006782:	4659      	mov	r1, fp
 8006784:	1e5f      	subs	r7, r3, #1
 8006786:	2200      	movs	r2, #0
 8006788:	4b88      	ldr	r3, [pc, #544]	; (80069ac <_dtoa_r+0x624>)
 800678a:	f7f9 ff3d 	bl	8000608 <__aeabi_dmul>
 800678e:	9e02      	ldr	r6, [sp, #8]
 8006790:	4682      	mov	sl, r0
 8006792:	468b      	mov	fp, r1
 8006794:	3501      	adds	r5, #1
 8006796:	4628      	mov	r0, r5
 8006798:	f7f9 fecc 	bl	8000534 <__aeabi_i2d>
 800679c:	4652      	mov	r2, sl
 800679e:	465b      	mov	r3, fp
 80067a0:	f7f9 ff32 	bl	8000608 <__aeabi_dmul>
 80067a4:	4b82      	ldr	r3, [pc, #520]	; (80069b0 <_dtoa_r+0x628>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	f7f9 fd78 	bl	800029c <__adddf3>
 80067ac:	46d0      	mov	r8, sl
 80067ae:	46d9      	mov	r9, fp
 80067b0:	4682      	mov	sl, r0
 80067b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	d158      	bne.n	800686c <_dtoa_r+0x4e4>
 80067ba:	4b7e      	ldr	r3, [pc, #504]	; (80069b4 <_dtoa_r+0x62c>)
 80067bc:	2200      	movs	r2, #0
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 fd69 	bl	8000298 <__aeabi_dsub>
 80067c6:	4652      	mov	r2, sl
 80067c8:	465b      	mov	r3, fp
 80067ca:	4680      	mov	r8, r0
 80067cc:	4689      	mov	r9, r1
 80067ce:	f7fa f9ab 	bl	8000b28 <__aeabi_dcmpgt>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f040 8295 	bne.w	8006d02 <_dtoa_r+0x97a>
 80067d8:	4652      	mov	r2, sl
 80067da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7fa f983 	bl	8000aec <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f040 8289 	bne.w	8006cfe <_dtoa_r+0x976>
 80067ec:	ec5b ab19 	vmov	sl, fp, d9
 80067f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f2c0 8148 	blt.w	8006a88 <_dtoa_r+0x700>
 80067f8:	9a00      	ldr	r2, [sp, #0]
 80067fa:	2a0e      	cmp	r2, #14
 80067fc:	f300 8144 	bgt.w	8006a88 <_dtoa_r+0x700>
 8006800:	4b67      	ldr	r3, [pc, #412]	; (80069a0 <_dtoa_r+0x618>)
 8006802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006806:	e9d3 8900 	ldrd	r8, r9, [r3]
 800680a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	f280 80d5 	bge.w	80069bc <_dtoa_r+0x634>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f300 80d1 	bgt.w	80069bc <_dtoa_r+0x634>
 800681a:	f040 826f 	bne.w	8006cfc <_dtoa_r+0x974>
 800681e:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <_dtoa_r+0x62c>)
 8006820:	2200      	movs	r2, #0
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	f7f9 feef 	bl	8000608 <__aeabi_dmul>
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	f7fa f971 	bl	8000b14 <__aeabi_dcmpge>
 8006832:	9e03      	ldr	r6, [sp, #12]
 8006834:	4637      	mov	r7, r6
 8006836:	2800      	cmp	r0, #0
 8006838:	f040 8245 	bne.w	8006cc6 <_dtoa_r+0x93e>
 800683c:	9d01      	ldr	r5, [sp, #4]
 800683e:	2331      	movs	r3, #49	; 0x31
 8006840:	f805 3b01 	strb.w	r3, [r5], #1
 8006844:	9b00      	ldr	r3, [sp, #0]
 8006846:	3301      	adds	r3, #1
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	e240      	b.n	8006cce <_dtoa_r+0x946>
 800684c:	07f2      	lsls	r2, r6, #31
 800684e:	d505      	bpl.n	800685c <_dtoa_r+0x4d4>
 8006850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006854:	f7f9 fed8 	bl	8000608 <__aeabi_dmul>
 8006858:	3501      	adds	r5, #1
 800685a:	2301      	movs	r3, #1
 800685c:	1076      	asrs	r6, r6, #1
 800685e:	3708      	adds	r7, #8
 8006860:	e777      	b.n	8006752 <_dtoa_r+0x3ca>
 8006862:	2502      	movs	r5, #2
 8006864:	e779      	b.n	800675a <_dtoa_r+0x3d2>
 8006866:	9f00      	ldr	r7, [sp, #0]
 8006868:	9e03      	ldr	r6, [sp, #12]
 800686a:	e794      	b.n	8006796 <_dtoa_r+0x40e>
 800686c:	9901      	ldr	r1, [sp, #4]
 800686e:	4b4c      	ldr	r3, [pc, #304]	; (80069a0 <_dtoa_r+0x618>)
 8006870:	4431      	add	r1, r6
 8006872:	910d      	str	r1, [sp, #52]	; 0x34
 8006874:	9908      	ldr	r1, [sp, #32]
 8006876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800687a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800687e:	2900      	cmp	r1, #0
 8006880:	d043      	beq.n	800690a <_dtoa_r+0x582>
 8006882:	494d      	ldr	r1, [pc, #308]	; (80069b8 <_dtoa_r+0x630>)
 8006884:	2000      	movs	r0, #0
 8006886:	f7f9 ffe9 	bl	800085c <__aeabi_ddiv>
 800688a:	4652      	mov	r2, sl
 800688c:	465b      	mov	r3, fp
 800688e:	f7f9 fd03 	bl	8000298 <__aeabi_dsub>
 8006892:	9d01      	ldr	r5, [sp, #4]
 8006894:	4682      	mov	sl, r0
 8006896:	468b      	mov	fp, r1
 8006898:	4649      	mov	r1, r9
 800689a:	4640      	mov	r0, r8
 800689c:	f7fa f964 	bl	8000b68 <__aeabi_d2iz>
 80068a0:	4606      	mov	r6, r0
 80068a2:	f7f9 fe47 	bl	8000534 <__aeabi_i2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7f9 fcf3 	bl	8000298 <__aeabi_dsub>
 80068b2:	3630      	adds	r6, #48	; 0x30
 80068b4:	f805 6b01 	strb.w	r6, [r5], #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	465b      	mov	r3, fp
 80068bc:	4680      	mov	r8, r0
 80068be:	4689      	mov	r9, r1
 80068c0:	f7fa f914 	bl	8000aec <__aeabi_dcmplt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d163      	bne.n	8006990 <_dtoa_r+0x608>
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	4936      	ldr	r1, [pc, #216]	; (80069a8 <_dtoa_r+0x620>)
 80068ce:	2000      	movs	r0, #0
 80068d0:	f7f9 fce2 	bl	8000298 <__aeabi_dsub>
 80068d4:	4652      	mov	r2, sl
 80068d6:	465b      	mov	r3, fp
 80068d8:	f7fa f908 	bl	8000aec <__aeabi_dcmplt>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f040 80b5 	bne.w	8006a4c <_dtoa_r+0x6c4>
 80068e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068e4:	429d      	cmp	r5, r3
 80068e6:	d081      	beq.n	80067ec <_dtoa_r+0x464>
 80068e8:	4b30      	ldr	r3, [pc, #192]	; (80069ac <_dtoa_r+0x624>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	4650      	mov	r0, sl
 80068ee:	4659      	mov	r1, fp
 80068f0:	f7f9 fe8a 	bl	8000608 <__aeabi_dmul>
 80068f4:	4b2d      	ldr	r3, [pc, #180]	; (80069ac <_dtoa_r+0x624>)
 80068f6:	4682      	mov	sl, r0
 80068f8:	468b      	mov	fp, r1
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	2200      	movs	r2, #0
 8006900:	f7f9 fe82 	bl	8000608 <__aeabi_dmul>
 8006904:	4680      	mov	r8, r0
 8006906:	4689      	mov	r9, r1
 8006908:	e7c6      	b.n	8006898 <_dtoa_r+0x510>
 800690a:	4650      	mov	r0, sl
 800690c:	4659      	mov	r1, fp
 800690e:	f7f9 fe7b 	bl	8000608 <__aeabi_dmul>
 8006912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006914:	9d01      	ldr	r5, [sp, #4]
 8006916:	930f      	str	r3, [sp, #60]	; 0x3c
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	f7fa f922 	bl	8000b68 <__aeabi_d2iz>
 8006924:	4606      	mov	r6, r0
 8006926:	f7f9 fe05 	bl	8000534 <__aeabi_i2d>
 800692a:	3630      	adds	r6, #48	; 0x30
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4640      	mov	r0, r8
 8006932:	4649      	mov	r1, r9
 8006934:	f7f9 fcb0 	bl	8000298 <__aeabi_dsub>
 8006938:	f805 6b01 	strb.w	r6, [r5], #1
 800693c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800693e:	429d      	cmp	r5, r3
 8006940:	4680      	mov	r8, r0
 8006942:	4689      	mov	r9, r1
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	d124      	bne.n	8006994 <_dtoa_r+0x60c>
 800694a:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <_dtoa_r+0x630>)
 800694c:	4650      	mov	r0, sl
 800694e:	4659      	mov	r1, fp
 8006950:	f7f9 fca4 	bl	800029c <__adddf3>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4640      	mov	r0, r8
 800695a:	4649      	mov	r1, r9
 800695c:	f7fa f8e4 	bl	8000b28 <__aeabi_dcmpgt>
 8006960:	2800      	cmp	r0, #0
 8006962:	d173      	bne.n	8006a4c <_dtoa_r+0x6c4>
 8006964:	4652      	mov	r2, sl
 8006966:	465b      	mov	r3, fp
 8006968:	4913      	ldr	r1, [pc, #76]	; (80069b8 <_dtoa_r+0x630>)
 800696a:	2000      	movs	r0, #0
 800696c:	f7f9 fc94 	bl	8000298 <__aeabi_dsub>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4640      	mov	r0, r8
 8006976:	4649      	mov	r1, r9
 8006978:	f7fa f8b8 	bl	8000aec <__aeabi_dcmplt>
 800697c:	2800      	cmp	r0, #0
 800697e:	f43f af35 	beq.w	80067ec <_dtoa_r+0x464>
 8006982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006984:	1e6b      	subs	r3, r5, #1
 8006986:	930f      	str	r3, [sp, #60]	; 0x3c
 8006988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800698c:	2b30      	cmp	r3, #48	; 0x30
 800698e:	d0f8      	beq.n	8006982 <_dtoa_r+0x5fa>
 8006990:	9700      	str	r7, [sp, #0]
 8006992:	e049      	b.n	8006a28 <_dtoa_r+0x6a0>
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <_dtoa_r+0x624>)
 8006996:	f7f9 fe37 	bl	8000608 <__aeabi_dmul>
 800699a:	4680      	mov	r8, r0
 800699c:	4689      	mov	r9, r1
 800699e:	e7bd      	b.n	800691c <_dtoa_r+0x594>
 80069a0:	08008900 	.word	0x08008900
 80069a4:	080088d8 	.word	0x080088d8
 80069a8:	3ff00000 	.word	0x3ff00000
 80069ac:	40240000 	.word	0x40240000
 80069b0:	401c0000 	.word	0x401c0000
 80069b4:	40140000 	.word	0x40140000
 80069b8:	3fe00000 	.word	0x3fe00000
 80069bc:	9d01      	ldr	r5, [sp, #4]
 80069be:	4656      	mov	r6, sl
 80069c0:	465f      	mov	r7, fp
 80069c2:	4642      	mov	r2, r8
 80069c4:	464b      	mov	r3, r9
 80069c6:	4630      	mov	r0, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7f9 ff47 	bl	800085c <__aeabi_ddiv>
 80069ce:	f7fa f8cb 	bl	8000b68 <__aeabi_d2iz>
 80069d2:	4682      	mov	sl, r0
 80069d4:	f7f9 fdae 	bl	8000534 <__aeabi_i2d>
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	f7f9 fe14 	bl	8000608 <__aeabi_dmul>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069ec:	f7f9 fc54 	bl	8000298 <__aeabi_dsub>
 80069f0:	f805 6b01 	strb.w	r6, [r5], #1
 80069f4:	9e01      	ldr	r6, [sp, #4]
 80069f6:	9f03      	ldr	r7, [sp, #12]
 80069f8:	1bae      	subs	r6, r5, r6
 80069fa:	42b7      	cmp	r7, r6
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	d135      	bne.n	8006a6e <_dtoa_r+0x6e6>
 8006a02:	f7f9 fc4b 	bl	800029c <__adddf3>
 8006a06:	4642      	mov	r2, r8
 8006a08:	464b      	mov	r3, r9
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	f7fa f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8006a12:	b9d0      	cbnz	r0, 8006a4a <_dtoa_r+0x6c2>
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7fa f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a20:	b110      	cbz	r0, 8006a28 <_dtoa_r+0x6a0>
 8006a22:	f01a 0f01 	tst.w	sl, #1
 8006a26:	d110      	bne.n	8006a4a <_dtoa_r+0x6c2>
 8006a28:	4620      	mov	r0, r4
 8006a2a:	ee18 1a10 	vmov	r1, s16
 8006a2e:	f000 faf3 	bl	8007018 <_Bfree>
 8006a32:	2300      	movs	r3, #0
 8006a34:	9800      	ldr	r0, [sp, #0]
 8006a36:	702b      	strb	r3, [r5, #0]
 8006a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	6018      	str	r0, [r3, #0]
 8006a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f43f acf1 	beq.w	8006428 <_dtoa_r+0xa0>
 8006a46:	601d      	str	r5, [r3, #0]
 8006a48:	e4ee      	b.n	8006428 <_dtoa_r+0xa0>
 8006a4a:	9f00      	ldr	r7, [sp, #0]
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	461d      	mov	r5, r3
 8006a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a54:	2a39      	cmp	r2, #57	; 0x39
 8006a56:	d106      	bne.n	8006a66 <_dtoa_r+0x6de>
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d1f7      	bne.n	8006a4e <_dtoa_r+0x6c6>
 8006a5e:	9901      	ldr	r1, [sp, #4]
 8006a60:	2230      	movs	r2, #48	; 0x30
 8006a62:	3701      	adds	r7, #1
 8006a64:	700a      	strb	r2, [r1, #0]
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	3201      	adds	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e790      	b.n	8006990 <_dtoa_r+0x608>
 8006a6e:	4ba6      	ldr	r3, [pc, #664]	; (8006d08 <_dtoa_r+0x980>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	f7f9 fdc9 	bl	8000608 <__aeabi_dmul>
 8006a76:	2200      	movs	r2, #0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	f7fa f82b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d09d      	beq.n	80069c2 <_dtoa_r+0x63a>
 8006a86:	e7cf      	b.n	8006a28 <_dtoa_r+0x6a0>
 8006a88:	9a08      	ldr	r2, [sp, #32]
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	f000 80d7 	beq.w	8006c3e <_dtoa_r+0x8b6>
 8006a90:	9a06      	ldr	r2, [sp, #24]
 8006a92:	2a01      	cmp	r2, #1
 8006a94:	f300 80ba 	bgt.w	8006c0c <_dtoa_r+0x884>
 8006a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	f000 80b2 	beq.w	8006c04 <_dtoa_r+0x87c>
 8006aa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006aa4:	9e07      	ldr	r6, [sp, #28]
 8006aa6:	9d04      	ldr	r5, [sp, #16]
 8006aa8:	9a04      	ldr	r2, [sp, #16]
 8006aaa:	441a      	add	r2, r3
 8006aac:	9204      	str	r2, [sp, #16]
 8006aae:	9a05      	ldr	r2, [sp, #20]
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	441a      	add	r2, r3
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	9205      	str	r2, [sp, #20]
 8006ab8:	f000 fb66 	bl	8007188 <__i2b>
 8006abc:	4607      	mov	r7, r0
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	dd0c      	ble.n	8006adc <_dtoa_r+0x754>
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dd09      	ble.n	8006adc <_dtoa_r+0x754>
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	9a04      	ldr	r2, [sp, #16]
 8006acc:	bfa8      	it	ge
 8006ace:	462b      	movge	r3, r5
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	9204      	str	r2, [sp, #16]
 8006ad4:	9a05      	ldr	r2, [sp, #20]
 8006ad6:	1aed      	subs	r5, r5, r3
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	9b07      	ldr	r3, [sp, #28]
 8006ade:	b31b      	cbz	r3, 8006b28 <_dtoa_r+0x7a0>
 8006ae0:	9b08      	ldr	r3, [sp, #32]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80af 	beq.w	8006c46 <_dtoa_r+0x8be>
 8006ae8:	2e00      	cmp	r6, #0
 8006aea:	dd13      	ble.n	8006b14 <_dtoa_r+0x78c>
 8006aec:	4639      	mov	r1, r7
 8006aee:	4632      	mov	r2, r6
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fc09 	bl	8007308 <__pow5mult>
 8006af6:	ee18 2a10 	vmov	r2, s16
 8006afa:	4601      	mov	r1, r0
 8006afc:	4607      	mov	r7, r0
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fb58 	bl	80071b4 <__multiply>
 8006b04:	ee18 1a10 	vmov	r1, s16
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fa84 	bl	8007018 <_Bfree>
 8006b10:	ee08 8a10 	vmov	s16, r8
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	1b9a      	subs	r2, r3, r6
 8006b18:	d006      	beq.n	8006b28 <_dtoa_r+0x7a0>
 8006b1a:	ee18 1a10 	vmov	r1, s16
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 fbf2 	bl	8007308 <__pow5mult>
 8006b24:	ee08 0a10 	vmov	s16, r0
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fb2c 	bl	8007188 <__i2b>
 8006b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	4606      	mov	r6, r0
 8006b36:	f340 8088 	ble.w	8006c4a <_dtoa_r+0x8c2>
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 fbe2 	bl	8007308 <__pow5mult>
 8006b44:	9b06      	ldr	r3, [sp, #24]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	4606      	mov	r6, r0
 8006b4a:	f340 8081 	ble.w	8006c50 <_dtoa_r+0x8c8>
 8006b4e:	f04f 0800 	mov.w	r8, #0
 8006b52:	6933      	ldr	r3, [r6, #16]
 8006b54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b58:	6918      	ldr	r0, [r3, #16]
 8006b5a:	f000 fac5 	bl	80070e8 <__hi0bits>
 8006b5e:	f1c0 0020 	rsb	r0, r0, #32
 8006b62:	9b05      	ldr	r3, [sp, #20]
 8006b64:	4418      	add	r0, r3
 8006b66:	f010 001f 	ands.w	r0, r0, #31
 8006b6a:	f000 8092 	beq.w	8006c92 <_dtoa_r+0x90a>
 8006b6e:	f1c0 0320 	rsb	r3, r0, #32
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	f340 808a 	ble.w	8006c8c <_dtoa_r+0x904>
 8006b78:	f1c0 001c 	rsb	r0, r0, #28
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	4403      	add	r3, r0
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	4403      	add	r3, r0
 8006b86:	4405      	add	r5, r0
 8006b88:	9305      	str	r3, [sp, #20]
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd07      	ble.n	8006ba0 <_dtoa_r+0x818>
 8006b90:	ee18 1a10 	vmov	r1, s16
 8006b94:	461a      	mov	r2, r3
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fc10 	bl	80073bc <__lshift>
 8006b9c:	ee08 0a10 	vmov	s16, r0
 8006ba0:	9b05      	ldr	r3, [sp, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dd05      	ble.n	8006bb2 <_dtoa_r+0x82a>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fc06 	bl	80073bc <__lshift>
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d06e      	beq.n	8006c96 <_dtoa_r+0x90e>
 8006bb8:	ee18 0a10 	vmov	r0, s16
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	f000 fc6d 	bl	800749c <__mcmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	da67      	bge.n	8006c96 <_dtoa_r+0x90e>
 8006bc6:	9b00      	ldr	r3, [sp, #0]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	ee18 1a10 	vmov	r1, s16
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 fa41 	bl	800705c <__multadd>
 8006bda:	9b08      	ldr	r3, [sp, #32]
 8006bdc:	ee08 0a10 	vmov	s16, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 81b1 	beq.w	8006f48 <_dtoa_r+0xbc0>
 8006be6:	2300      	movs	r3, #0
 8006be8:	4639      	mov	r1, r7
 8006bea:	220a      	movs	r2, #10
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 fa35 	bl	800705c <__multadd>
 8006bf2:	9b02      	ldr	r3, [sp, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	f300 808e 	bgt.w	8006d18 <_dtoa_r+0x990>
 8006bfc:	9b06      	ldr	r3, [sp, #24]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	dc51      	bgt.n	8006ca6 <_dtoa_r+0x91e>
 8006c02:	e089      	b.n	8006d18 <_dtoa_r+0x990>
 8006c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c0a:	e74b      	b.n	8006aa4 <_dtoa_r+0x71c>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	1e5e      	subs	r6, r3, #1
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	42b3      	cmp	r3, r6
 8006c14:	bfbf      	itttt	lt
 8006c16:	9b07      	ldrlt	r3, [sp, #28]
 8006c18:	9607      	strlt	r6, [sp, #28]
 8006c1a:	1af2      	sublt	r2, r6, r3
 8006c1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c1e:	bfb6      	itet	lt
 8006c20:	189b      	addlt	r3, r3, r2
 8006c22:	1b9e      	subge	r6, r3, r6
 8006c24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	bfb8      	it	lt
 8006c2a:	2600      	movlt	r6, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bfb7      	itett	lt
 8006c30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c38:	1a9d      	sublt	r5, r3, r2
 8006c3a:	2300      	movlt	r3, #0
 8006c3c:	e734      	b.n	8006aa8 <_dtoa_r+0x720>
 8006c3e:	9e07      	ldr	r6, [sp, #28]
 8006c40:	9d04      	ldr	r5, [sp, #16]
 8006c42:	9f08      	ldr	r7, [sp, #32]
 8006c44:	e73b      	b.n	8006abe <_dtoa_r+0x736>
 8006c46:	9a07      	ldr	r2, [sp, #28]
 8006c48:	e767      	b.n	8006b1a <_dtoa_r+0x792>
 8006c4a:	9b06      	ldr	r3, [sp, #24]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	dc18      	bgt.n	8006c82 <_dtoa_r+0x8fa>
 8006c50:	f1ba 0f00 	cmp.w	sl, #0
 8006c54:	d115      	bne.n	8006c82 <_dtoa_r+0x8fa>
 8006c56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c5a:	b993      	cbnz	r3, 8006c82 <_dtoa_r+0x8fa>
 8006c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c60:	0d1b      	lsrs	r3, r3, #20
 8006c62:	051b      	lsls	r3, r3, #20
 8006c64:	b183      	cbz	r3, 8006c88 <_dtoa_r+0x900>
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	9b05      	ldr	r3, [sp, #20]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	f04f 0801 	mov.w	r8, #1
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f47f af6a 	bne.w	8006b52 <_dtoa_r+0x7ca>
 8006c7e:	2001      	movs	r0, #1
 8006c80:	e76f      	b.n	8006b62 <_dtoa_r+0x7da>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	e7f6      	b.n	8006c76 <_dtoa_r+0x8ee>
 8006c88:	4698      	mov	r8, r3
 8006c8a:	e7f4      	b.n	8006c76 <_dtoa_r+0x8ee>
 8006c8c:	f43f af7d 	beq.w	8006b8a <_dtoa_r+0x802>
 8006c90:	4618      	mov	r0, r3
 8006c92:	301c      	adds	r0, #28
 8006c94:	e772      	b.n	8006b7c <_dtoa_r+0x7f4>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dc37      	bgt.n	8006d0c <_dtoa_r+0x984>
 8006c9c:	9b06      	ldr	r3, [sp, #24]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	dd34      	ble.n	8006d0c <_dtoa_r+0x984>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	9302      	str	r3, [sp, #8]
 8006ca6:	9b02      	ldr	r3, [sp, #8]
 8006ca8:	b96b      	cbnz	r3, 8006cc6 <_dtoa_r+0x93e>
 8006caa:	4631      	mov	r1, r6
 8006cac:	2205      	movs	r2, #5
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f9d4 	bl	800705c <__multadd>
 8006cb4:	4601      	mov	r1, r0
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	ee18 0a10 	vmov	r0, s16
 8006cbc:	f000 fbee 	bl	800749c <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f73f adbb 	bgt.w	800683c <_dtoa_r+0x4b4>
 8006cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc8:	9d01      	ldr	r5, [sp, #4]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 f99f 	bl	8007018 <_Bfree>
 8006cda:	2f00      	cmp	r7, #0
 8006cdc:	f43f aea4 	beq.w	8006a28 <_dtoa_r+0x6a0>
 8006ce0:	f1b8 0f00 	cmp.w	r8, #0
 8006ce4:	d005      	beq.n	8006cf2 <_dtoa_r+0x96a>
 8006ce6:	45b8      	cmp	r8, r7
 8006ce8:	d003      	beq.n	8006cf2 <_dtoa_r+0x96a>
 8006cea:	4641      	mov	r1, r8
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f993 	bl	8007018 <_Bfree>
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 f98f 	bl	8007018 <_Bfree>
 8006cfa:	e695      	b.n	8006a28 <_dtoa_r+0x6a0>
 8006cfc:	2600      	movs	r6, #0
 8006cfe:	4637      	mov	r7, r6
 8006d00:	e7e1      	b.n	8006cc6 <_dtoa_r+0x93e>
 8006d02:	9700      	str	r7, [sp, #0]
 8006d04:	4637      	mov	r7, r6
 8006d06:	e599      	b.n	800683c <_dtoa_r+0x4b4>
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	9b08      	ldr	r3, [sp, #32]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 80ca 	beq.w	8006ea8 <_dtoa_r+0xb20>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	9302      	str	r3, [sp, #8]
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	dd05      	ble.n	8006d28 <_dtoa_r+0x9a0>
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	462a      	mov	r2, r5
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fb4b 	bl	80073bc <__lshift>
 8006d26:	4607      	mov	r7, r0
 8006d28:	f1b8 0f00 	cmp.w	r8, #0
 8006d2c:	d05b      	beq.n	8006de6 <_dtoa_r+0xa5e>
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 f931 	bl	8006f98 <_Balloc>
 8006d36:	4605      	mov	r5, r0
 8006d38:	b928      	cbnz	r0, 8006d46 <_dtoa_r+0x9be>
 8006d3a:	4b87      	ldr	r3, [pc, #540]	; (8006f58 <_dtoa_r+0xbd0>)
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d42:	f7ff bb3b 	b.w	80063bc <_dtoa_r+0x34>
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	3202      	adds	r2, #2
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	f107 010c 	add.w	r1, r7, #12
 8006d50:	300c      	adds	r0, #12
 8006d52:	f000 f913 	bl	8006f7c <memcpy>
 8006d56:	2201      	movs	r2, #1
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fb2e 	bl	80073bc <__lshift>
 8006d60:	9b01      	ldr	r3, [sp, #4]
 8006d62:	f103 0901 	add.w	r9, r3, #1
 8006d66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	9305      	str	r3, [sp, #20]
 8006d6e:	f00a 0301 	and.w	r3, sl, #1
 8006d72:	46b8      	mov	r8, r7
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	4607      	mov	r7, r0
 8006d78:	4631      	mov	r1, r6
 8006d7a:	ee18 0a10 	vmov	r0, s16
 8006d7e:	f7ff fa75 	bl	800626c <quorem>
 8006d82:	4641      	mov	r1, r8
 8006d84:	9002      	str	r0, [sp, #8]
 8006d86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d8a:	ee18 0a10 	vmov	r0, s16
 8006d8e:	f000 fb85 	bl	800749c <__mcmp>
 8006d92:	463a      	mov	r2, r7
 8006d94:	9003      	str	r0, [sp, #12]
 8006d96:	4631      	mov	r1, r6
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fb9b 	bl	80074d4 <__mdiff>
 8006d9e:	68c2      	ldr	r2, [r0, #12]
 8006da0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006da4:	4605      	mov	r5, r0
 8006da6:	bb02      	cbnz	r2, 8006dea <_dtoa_r+0xa62>
 8006da8:	4601      	mov	r1, r0
 8006daa:	ee18 0a10 	vmov	r0, s16
 8006dae:	f000 fb75 	bl	800749c <__mcmp>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4629      	mov	r1, r5
 8006db6:	4620      	mov	r0, r4
 8006db8:	9207      	str	r2, [sp, #28]
 8006dba:	f000 f92d 	bl	8007018 <_Bfree>
 8006dbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dc2:	ea43 0102 	orr.w	r1, r3, r2
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	464d      	mov	r5, r9
 8006dcc:	d10f      	bne.n	8006dee <_dtoa_r+0xa66>
 8006dce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dd2:	d02a      	beq.n	8006e2a <_dtoa_r+0xaa2>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd02      	ble.n	8006de0 <_dtoa_r+0xa58>
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006de0:	f88b a000 	strb.w	sl, [fp]
 8006de4:	e775      	b.n	8006cd2 <_dtoa_r+0x94a>
 8006de6:	4638      	mov	r0, r7
 8006de8:	e7ba      	b.n	8006d60 <_dtoa_r+0x9d8>
 8006dea:	2201      	movs	r2, #1
 8006dec:	e7e2      	b.n	8006db4 <_dtoa_r+0xa2c>
 8006dee:	9b03      	ldr	r3, [sp, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	db04      	blt.n	8006dfe <_dtoa_r+0xa76>
 8006df4:	9906      	ldr	r1, [sp, #24]
 8006df6:	430b      	orrs	r3, r1
 8006df8:	9904      	ldr	r1, [sp, #16]
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	d122      	bne.n	8006e44 <_dtoa_r+0xabc>
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	ddee      	ble.n	8006de0 <_dtoa_r+0xa58>
 8006e02:	ee18 1a10 	vmov	r1, s16
 8006e06:	2201      	movs	r2, #1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fad7 	bl	80073bc <__lshift>
 8006e0e:	4631      	mov	r1, r6
 8006e10:	ee08 0a10 	vmov	s16, r0
 8006e14:	f000 fb42 	bl	800749c <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dc03      	bgt.n	8006e24 <_dtoa_r+0xa9c>
 8006e1c:	d1e0      	bne.n	8006de0 <_dtoa_r+0xa58>
 8006e1e:	f01a 0f01 	tst.w	sl, #1
 8006e22:	d0dd      	beq.n	8006de0 <_dtoa_r+0xa58>
 8006e24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e28:	d1d7      	bne.n	8006dda <_dtoa_r+0xa52>
 8006e2a:	2339      	movs	r3, #57	; 0x39
 8006e2c:	f88b 3000 	strb.w	r3, [fp]
 8006e30:	462b      	mov	r3, r5
 8006e32:	461d      	mov	r5, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e3a:	2a39      	cmp	r2, #57	; 0x39
 8006e3c:	d071      	beq.n	8006f22 <_dtoa_r+0xb9a>
 8006e3e:	3201      	adds	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	e746      	b.n	8006cd2 <_dtoa_r+0x94a>
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	dd07      	ble.n	8006e58 <_dtoa_r+0xad0>
 8006e48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e4c:	d0ed      	beq.n	8006e2a <_dtoa_r+0xaa2>
 8006e4e:	f10a 0301 	add.w	r3, sl, #1
 8006e52:	f88b 3000 	strb.w	r3, [fp]
 8006e56:	e73c      	b.n	8006cd2 <_dtoa_r+0x94a>
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e5e:	4599      	cmp	r9, r3
 8006e60:	d047      	beq.n	8006ef2 <_dtoa_r+0xb6a>
 8006e62:	ee18 1a10 	vmov	r1, s16
 8006e66:	2300      	movs	r3, #0
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f8f6 	bl	800705c <__multadd>
 8006e70:	45b8      	cmp	r8, r7
 8006e72:	ee08 0a10 	vmov	s16, r0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	f04f 020a 	mov.w	r2, #10
 8006e7e:	4641      	mov	r1, r8
 8006e80:	4620      	mov	r0, r4
 8006e82:	d106      	bne.n	8006e92 <_dtoa_r+0xb0a>
 8006e84:	f000 f8ea 	bl	800705c <__multadd>
 8006e88:	4680      	mov	r8, r0
 8006e8a:	4607      	mov	r7, r0
 8006e8c:	f109 0901 	add.w	r9, r9, #1
 8006e90:	e772      	b.n	8006d78 <_dtoa_r+0x9f0>
 8006e92:	f000 f8e3 	bl	800705c <__multadd>
 8006e96:	4639      	mov	r1, r7
 8006e98:	4680      	mov	r8, r0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 f8dc 	bl	800705c <__multadd>
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	e7f1      	b.n	8006e8c <_dtoa_r+0xb04>
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	9d01      	ldr	r5, [sp, #4]
 8006eae:	ee18 0a10 	vmov	r0, s16
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	f7ff f9da 	bl	800626c <quorem>
 8006eb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	f805 ab01 	strb.w	sl, [r5], #1
 8006ec2:	1aea      	subs	r2, r5, r3
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	dd09      	ble.n	8006ede <_dtoa_r+0xb56>
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2300      	movs	r3, #0
 8006ed0:	220a      	movs	r2, #10
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f8c2 	bl	800705c <__multadd>
 8006ed8:	ee08 0a10 	vmov	s16, r0
 8006edc:	e7e7      	b.n	8006eae <_dtoa_r+0xb26>
 8006ede:	9b02      	ldr	r3, [sp, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bfc8      	it	gt
 8006ee4:	461d      	movgt	r5, r3
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	bfd8      	it	le
 8006eea:	2501      	movle	r5, #1
 8006eec:	441d      	add	r5, r3
 8006eee:	f04f 0800 	mov.w	r8, #0
 8006ef2:	ee18 1a10 	vmov	r1, s16
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fa5f 	bl	80073bc <__lshift>
 8006efe:	4631      	mov	r1, r6
 8006f00:	ee08 0a10 	vmov	s16, r0
 8006f04:	f000 faca 	bl	800749c <__mcmp>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	dc91      	bgt.n	8006e30 <_dtoa_r+0xaa8>
 8006f0c:	d102      	bne.n	8006f14 <_dtoa_r+0xb8c>
 8006f0e:	f01a 0f01 	tst.w	sl, #1
 8006f12:	d18d      	bne.n	8006e30 <_dtoa_r+0xaa8>
 8006f14:	462b      	mov	r3, r5
 8006f16:	461d      	mov	r5, r3
 8006f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f1c:	2a30      	cmp	r2, #48	; 0x30
 8006f1e:	d0fa      	beq.n	8006f16 <_dtoa_r+0xb8e>
 8006f20:	e6d7      	b.n	8006cd2 <_dtoa_r+0x94a>
 8006f22:	9a01      	ldr	r2, [sp, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d184      	bne.n	8006e32 <_dtoa_r+0xaaa>
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	2331      	movs	r3, #49	; 0x31
 8006f30:	7013      	strb	r3, [r2, #0]
 8006f32:	e6ce      	b.n	8006cd2 <_dtoa_r+0x94a>
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <_dtoa_r+0xbd4>)
 8006f36:	f7ff ba95 	b.w	8006464 <_dtoa_r+0xdc>
 8006f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f47f aa6e 	bne.w	800641e <_dtoa_r+0x96>
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <_dtoa_r+0xbd8>)
 8006f44:	f7ff ba8e 	b.w	8006464 <_dtoa_r+0xdc>
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dcae      	bgt.n	8006eac <_dtoa_r+0xb24>
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	f73f aea8 	bgt.w	8006ca6 <_dtoa_r+0x91e>
 8006f56:	e7a9      	b.n	8006eac <_dtoa_r+0xb24>
 8006f58:	08008867 	.word	0x08008867
 8006f5c:	080087c4 	.word	0x080087c4
 8006f60:	080087e8 	.word	0x080087e8

08006f64 <_localeconv_r>:
 8006f64:	4800      	ldr	r0, [pc, #0]	; (8006f68 <_localeconv_r+0x4>)
 8006f66:	4770      	bx	lr
 8006f68:	20000178 	.word	0x20000178

08006f6c <malloc>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <malloc+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f000 bc17 	b.w	80077a4 <_malloc_r>
 8006f76:	bf00      	nop
 8006f78:	20000024 	.word	0x20000024

08006f7c <memcpy>:
 8006f7c:	440a      	add	r2, r1
 8006f7e:	4291      	cmp	r1, r2
 8006f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f84:	d100      	bne.n	8006f88 <memcpy+0xc>
 8006f86:	4770      	bx	lr
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f92:	4291      	cmp	r1, r2
 8006f94:	d1f9      	bne.n	8006f8a <memcpy+0xe>
 8006f96:	bd10      	pop	{r4, pc}

08006f98 <_Balloc>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	b976      	cbnz	r6, 8006fc0 <_Balloc+0x28>
 8006fa2:	2010      	movs	r0, #16
 8006fa4:	f7ff ffe2 	bl	8006f6c <malloc>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6260      	str	r0, [r4, #36]	; 0x24
 8006fac:	b920      	cbnz	r0, 8006fb8 <_Balloc+0x20>
 8006fae:	4b18      	ldr	r3, [pc, #96]	; (8007010 <_Balloc+0x78>)
 8006fb0:	4818      	ldr	r0, [pc, #96]	; (8007014 <_Balloc+0x7c>)
 8006fb2:	2166      	movs	r1, #102	; 0x66
 8006fb4:	f000 fdd6 	bl	8007b64 <__assert_func>
 8006fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fbc:	6006      	str	r6, [r0, #0]
 8006fbe:	60c6      	str	r6, [r0, #12]
 8006fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fc2:	68f3      	ldr	r3, [r6, #12]
 8006fc4:	b183      	cbz	r3, 8006fe8 <_Balloc+0x50>
 8006fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fce:	b9b8      	cbnz	r0, 8007000 <_Balloc+0x68>
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	fa01 f605 	lsl.w	r6, r1, r5
 8006fd6:	1d72      	adds	r2, r6, #5
 8006fd8:	0092      	lsls	r2, r2, #2
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 fb60 	bl	80076a0 <_calloc_r>
 8006fe0:	b160      	cbz	r0, 8006ffc <_Balloc+0x64>
 8006fe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fe6:	e00e      	b.n	8007006 <_Balloc+0x6e>
 8006fe8:	2221      	movs	r2, #33	; 0x21
 8006fea:	2104      	movs	r1, #4
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fb57 	bl	80076a0 <_calloc_r>
 8006ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff4:	60f0      	str	r0, [r6, #12]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e4      	bne.n	8006fc6 <_Balloc+0x2e>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	6802      	ldr	r2, [r0, #0]
 8007002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007006:	2300      	movs	r3, #0
 8007008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800700c:	e7f7      	b.n	8006ffe <_Balloc+0x66>
 800700e:	bf00      	nop
 8007010:	080087f5 	.word	0x080087f5
 8007014:	08008878 	.word	0x08008878

08007018 <_Bfree>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800701c:	4605      	mov	r5, r0
 800701e:	460c      	mov	r4, r1
 8007020:	b976      	cbnz	r6, 8007040 <_Bfree+0x28>
 8007022:	2010      	movs	r0, #16
 8007024:	f7ff ffa2 	bl	8006f6c <malloc>
 8007028:	4602      	mov	r2, r0
 800702a:	6268      	str	r0, [r5, #36]	; 0x24
 800702c:	b920      	cbnz	r0, 8007038 <_Bfree+0x20>
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <_Bfree+0x3c>)
 8007030:	4809      	ldr	r0, [pc, #36]	; (8007058 <_Bfree+0x40>)
 8007032:	218a      	movs	r1, #138	; 0x8a
 8007034:	f000 fd96 	bl	8007b64 <__assert_func>
 8007038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800703c:	6006      	str	r6, [r0, #0]
 800703e:	60c6      	str	r6, [r0, #12]
 8007040:	b13c      	cbz	r4, 8007052 <_Bfree+0x3a>
 8007042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007044:	6862      	ldr	r2, [r4, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800704c:	6021      	str	r1, [r4, #0]
 800704e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	080087f5 	.word	0x080087f5
 8007058:	08008878 	.word	0x08008878

0800705c <__multadd>:
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	690d      	ldr	r5, [r1, #16]
 8007062:	4607      	mov	r7, r0
 8007064:	460c      	mov	r4, r1
 8007066:	461e      	mov	r6, r3
 8007068:	f101 0c14 	add.w	ip, r1, #20
 800706c:	2000      	movs	r0, #0
 800706e:	f8dc 3000 	ldr.w	r3, [ip]
 8007072:	b299      	uxth	r1, r3
 8007074:	fb02 6101 	mla	r1, r2, r1, r6
 8007078:	0c1e      	lsrs	r6, r3, #16
 800707a:	0c0b      	lsrs	r3, r1, #16
 800707c:	fb02 3306 	mla	r3, r2, r6, r3
 8007080:	b289      	uxth	r1, r1
 8007082:	3001      	adds	r0, #1
 8007084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007088:	4285      	cmp	r5, r0
 800708a:	f84c 1b04 	str.w	r1, [ip], #4
 800708e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007092:	dcec      	bgt.n	800706e <__multadd+0x12>
 8007094:	b30e      	cbz	r6, 80070da <__multadd+0x7e>
 8007096:	68a3      	ldr	r3, [r4, #8]
 8007098:	42ab      	cmp	r3, r5
 800709a:	dc19      	bgt.n	80070d0 <__multadd+0x74>
 800709c:	6861      	ldr	r1, [r4, #4]
 800709e:	4638      	mov	r0, r7
 80070a0:	3101      	adds	r1, #1
 80070a2:	f7ff ff79 	bl	8006f98 <_Balloc>
 80070a6:	4680      	mov	r8, r0
 80070a8:	b928      	cbnz	r0, 80070b6 <__multadd+0x5a>
 80070aa:	4602      	mov	r2, r0
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <__multadd+0x84>)
 80070ae:	480d      	ldr	r0, [pc, #52]	; (80070e4 <__multadd+0x88>)
 80070b0:	21b5      	movs	r1, #181	; 0xb5
 80070b2:	f000 fd57 	bl	8007b64 <__assert_func>
 80070b6:	6922      	ldr	r2, [r4, #16]
 80070b8:	3202      	adds	r2, #2
 80070ba:	f104 010c 	add.w	r1, r4, #12
 80070be:	0092      	lsls	r2, r2, #2
 80070c0:	300c      	adds	r0, #12
 80070c2:	f7ff ff5b 	bl	8006f7c <memcpy>
 80070c6:	4621      	mov	r1, r4
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff ffa5 	bl	8007018 <_Bfree>
 80070ce:	4644      	mov	r4, r8
 80070d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070d4:	3501      	adds	r5, #1
 80070d6:	615e      	str	r6, [r3, #20]
 80070d8:	6125      	str	r5, [r4, #16]
 80070da:	4620      	mov	r0, r4
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e0:	08008867 	.word	0x08008867
 80070e4:	08008878 	.word	0x08008878

080070e8 <__hi0bits>:
 80070e8:	0c03      	lsrs	r3, r0, #16
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	b9d3      	cbnz	r3, 8007124 <__hi0bits+0x3c>
 80070ee:	0400      	lsls	r0, r0, #16
 80070f0:	2310      	movs	r3, #16
 80070f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070f6:	bf04      	itt	eq
 80070f8:	0200      	lsleq	r0, r0, #8
 80070fa:	3308      	addeq	r3, #8
 80070fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007100:	bf04      	itt	eq
 8007102:	0100      	lsleq	r0, r0, #4
 8007104:	3304      	addeq	r3, #4
 8007106:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800710a:	bf04      	itt	eq
 800710c:	0080      	lsleq	r0, r0, #2
 800710e:	3302      	addeq	r3, #2
 8007110:	2800      	cmp	r0, #0
 8007112:	db05      	blt.n	8007120 <__hi0bits+0x38>
 8007114:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007118:	f103 0301 	add.w	r3, r3, #1
 800711c:	bf08      	it	eq
 800711e:	2320      	moveq	r3, #32
 8007120:	4618      	mov	r0, r3
 8007122:	4770      	bx	lr
 8007124:	2300      	movs	r3, #0
 8007126:	e7e4      	b.n	80070f2 <__hi0bits+0xa>

08007128 <__lo0bits>:
 8007128:	6803      	ldr	r3, [r0, #0]
 800712a:	f013 0207 	ands.w	r2, r3, #7
 800712e:	4601      	mov	r1, r0
 8007130:	d00b      	beq.n	800714a <__lo0bits+0x22>
 8007132:	07da      	lsls	r2, r3, #31
 8007134:	d423      	bmi.n	800717e <__lo0bits+0x56>
 8007136:	0798      	lsls	r0, r3, #30
 8007138:	bf49      	itett	mi
 800713a:	085b      	lsrmi	r3, r3, #1
 800713c:	089b      	lsrpl	r3, r3, #2
 800713e:	2001      	movmi	r0, #1
 8007140:	600b      	strmi	r3, [r1, #0]
 8007142:	bf5c      	itt	pl
 8007144:	600b      	strpl	r3, [r1, #0]
 8007146:	2002      	movpl	r0, #2
 8007148:	4770      	bx	lr
 800714a:	b298      	uxth	r0, r3
 800714c:	b9a8      	cbnz	r0, 800717a <__lo0bits+0x52>
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	2010      	movs	r0, #16
 8007152:	b2da      	uxtb	r2, r3
 8007154:	b90a      	cbnz	r2, 800715a <__lo0bits+0x32>
 8007156:	3008      	adds	r0, #8
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	071a      	lsls	r2, r3, #28
 800715c:	bf04      	itt	eq
 800715e:	091b      	lsreq	r3, r3, #4
 8007160:	3004      	addeq	r0, #4
 8007162:	079a      	lsls	r2, r3, #30
 8007164:	bf04      	itt	eq
 8007166:	089b      	lsreq	r3, r3, #2
 8007168:	3002      	addeq	r0, #2
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	d403      	bmi.n	8007176 <__lo0bits+0x4e>
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	f100 0001 	add.w	r0, r0, #1
 8007174:	d005      	beq.n	8007182 <__lo0bits+0x5a>
 8007176:	600b      	str	r3, [r1, #0]
 8007178:	4770      	bx	lr
 800717a:	4610      	mov	r0, r2
 800717c:	e7e9      	b.n	8007152 <__lo0bits+0x2a>
 800717e:	2000      	movs	r0, #0
 8007180:	4770      	bx	lr
 8007182:	2020      	movs	r0, #32
 8007184:	4770      	bx	lr
	...

08007188 <__i2b>:
 8007188:	b510      	push	{r4, lr}
 800718a:	460c      	mov	r4, r1
 800718c:	2101      	movs	r1, #1
 800718e:	f7ff ff03 	bl	8006f98 <_Balloc>
 8007192:	4602      	mov	r2, r0
 8007194:	b928      	cbnz	r0, 80071a2 <__i2b+0x1a>
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <__i2b+0x24>)
 8007198:	4805      	ldr	r0, [pc, #20]	; (80071b0 <__i2b+0x28>)
 800719a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800719e:	f000 fce1 	bl	8007b64 <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	6144      	str	r4, [r0, #20]
 80071a6:	6103      	str	r3, [r0, #16]
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop
 80071ac:	08008867 	.word	0x08008867
 80071b0:	08008878 	.word	0x08008878

080071b4 <__multiply>:
 80071b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	4691      	mov	r9, r2
 80071ba:	690a      	ldr	r2, [r1, #16]
 80071bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	bfb8      	it	lt
 80071c4:	460b      	movlt	r3, r1
 80071c6:	460c      	mov	r4, r1
 80071c8:	bfbc      	itt	lt
 80071ca:	464c      	movlt	r4, r9
 80071cc:	4699      	movlt	r9, r3
 80071ce:	6927      	ldr	r7, [r4, #16]
 80071d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071d4:	68a3      	ldr	r3, [r4, #8]
 80071d6:	6861      	ldr	r1, [r4, #4]
 80071d8:	eb07 060a 	add.w	r6, r7, sl
 80071dc:	42b3      	cmp	r3, r6
 80071de:	b085      	sub	sp, #20
 80071e0:	bfb8      	it	lt
 80071e2:	3101      	addlt	r1, #1
 80071e4:	f7ff fed8 	bl	8006f98 <_Balloc>
 80071e8:	b930      	cbnz	r0, 80071f8 <__multiply+0x44>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b44      	ldr	r3, [pc, #272]	; (8007300 <__multiply+0x14c>)
 80071ee:	4845      	ldr	r0, [pc, #276]	; (8007304 <__multiply+0x150>)
 80071f0:	f240 115d 	movw	r1, #349	; 0x15d
 80071f4:	f000 fcb6 	bl	8007b64 <__assert_func>
 80071f8:	f100 0514 	add.w	r5, r0, #20
 80071fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007200:	462b      	mov	r3, r5
 8007202:	2200      	movs	r2, #0
 8007204:	4543      	cmp	r3, r8
 8007206:	d321      	bcc.n	800724c <__multiply+0x98>
 8007208:	f104 0314 	add.w	r3, r4, #20
 800720c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007210:	f109 0314 	add.w	r3, r9, #20
 8007214:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007218:	9202      	str	r2, [sp, #8]
 800721a:	1b3a      	subs	r2, r7, r4
 800721c:	3a15      	subs	r2, #21
 800721e:	f022 0203 	bic.w	r2, r2, #3
 8007222:	3204      	adds	r2, #4
 8007224:	f104 0115 	add.w	r1, r4, #21
 8007228:	428f      	cmp	r7, r1
 800722a:	bf38      	it	cc
 800722c:	2204      	movcc	r2, #4
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9a02      	ldr	r2, [sp, #8]
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d80c      	bhi.n	8007252 <__multiply+0x9e>
 8007238:	2e00      	cmp	r6, #0
 800723a:	dd03      	ble.n	8007244 <__multiply+0x90>
 800723c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007240:	2b00      	cmp	r3, #0
 8007242:	d05a      	beq.n	80072fa <__multiply+0x146>
 8007244:	6106      	str	r6, [r0, #16]
 8007246:	b005      	add	sp, #20
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	f843 2b04 	str.w	r2, [r3], #4
 8007250:	e7d8      	b.n	8007204 <__multiply+0x50>
 8007252:	f8b3 a000 	ldrh.w	sl, [r3]
 8007256:	f1ba 0f00 	cmp.w	sl, #0
 800725a:	d024      	beq.n	80072a6 <__multiply+0xf2>
 800725c:	f104 0e14 	add.w	lr, r4, #20
 8007260:	46a9      	mov	r9, r5
 8007262:	f04f 0c00 	mov.w	ip, #0
 8007266:	f85e 2b04 	ldr.w	r2, [lr], #4
 800726a:	f8d9 1000 	ldr.w	r1, [r9]
 800726e:	fa1f fb82 	uxth.w	fp, r2
 8007272:	b289      	uxth	r1, r1
 8007274:	fb0a 110b 	mla	r1, sl, fp, r1
 8007278:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800727c:	f8d9 2000 	ldr.w	r2, [r9]
 8007280:	4461      	add	r1, ip
 8007282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007286:	fb0a c20b 	mla	r2, sl, fp, ip
 800728a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800728e:	b289      	uxth	r1, r1
 8007290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007294:	4577      	cmp	r7, lr
 8007296:	f849 1b04 	str.w	r1, [r9], #4
 800729a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800729e:	d8e2      	bhi.n	8007266 <__multiply+0xb2>
 80072a0:	9a01      	ldr	r2, [sp, #4]
 80072a2:	f845 c002 	str.w	ip, [r5, r2]
 80072a6:	9a03      	ldr	r2, [sp, #12]
 80072a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072ac:	3304      	adds	r3, #4
 80072ae:	f1b9 0f00 	cmp.w	r9, #0
 80072b2:	d020      	beq.n	80072f6 <__multiply+0x142>
 80072b4:	6829      	ldr	r1, [r5, #0]
 80072b6:	f104 0c14 	add.w	ip, r4, #20
 80072ba:	46ae      	mov	lr, r5
 80072bc:	f04f 0a00 	mov.w	sl, #0
 80072c0:	f8bc b000 	ldrh.w	fp, [ip]
 80072c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072c8:	fb09 220b 	mla	r2, r9, fp, r2
 80072cc:	4492      	add	sl, r2
 80072ce:	b289      	uxth	r1, r1
 80072d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072d4:	f84e 1b04 	str.w	r1, [lr], #4
 80072d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072dc:	f8be 1000 	ldrh.w	r1, [lr]
 80072e0:	0c12      	lsrs	r2, r2, #16
 80072e2:	fb09 1102 	mla	r1, r9, r2, r1
 80072e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072ea:	4567      	cmp	r7, ip
 80072ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072f0:	d8e6      	bhi.n	80072c0 <__multiply+0x10c>
 80072f2:	9a01      	ldr	r2, [sp, #4]
 80072f4:	50a9      	str	r1, [r5, r2]
 80072f6:	3504      	adds	r5, #4
 80072f8:	e79a      	b.n	8007230 <__multiply+0x7c>
 80072fa:	3e01      	subs	r6, #1
 80072fc:	e79c      	b.n	8007238 <__multiply+0x84>
 80072fe:	bf00      	nop
 8007300:	08008867 	.word	0x08008867
 8007304:	08008878 	.word	0x08008878

08007308 <__pow5mult>:
 8007308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800730c:	4615      	mov	r5, r2
 800730e:	f012 0203 	ands.w	r2, r2, #3
 8007312:	4606      	mov	r6, r0
 8007314:	460f      	mov	r7, r1
 8007316:	d007      	beq.n	8007328 <__pow5mult+0x20>
 8007318:	4c25      	ldr	r4, [pc, #148]	; (80073b0 <__pow5mult+0xa8>)
 800731a:	3a01      	subs	r2, #1
 800731c:	2300      	movs	r3, #0
 800731e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007322:	f7ff fe9b 	bl	800705c <__multadd>
 8007326:	4607      	mov	r7, r0
 8007328:	10ad      	asrs	r5, r5, #2
 800732a:	d03d      	beq.n	80073a8 <__pow5mult+0xa0>
 800732c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800732e:	b97c      	cbnz	r4, 8007350 <__pow5mult+0x48>
 8007330:	2010      	movs	r0, #16
 8007332:	f7ff fe1b 	bl	8006f6c <malloc>
 8007336:	4602      	mov	r2, r0
 8007338:	6270      	str	r0, [r6, #36]	; 0x24
 800733a:	b928      	cbnz	r0, 8007348 <__pow5mult+0x40>
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <__pow5mult+0xac>)
 800733e:	481e      	ldr	r0, [pc, #120]	; (80073b8 <__pow5mult+0xb0>)
 8007340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007344:	f000 fc0e 	bl	8007b64 <__assert_func>
 8007348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800734c:	6004      	str	r4, [r0, #0]
 800734e:	60c4      	str	r4, [r0, #12]
 8007350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007358:	b94c      	cbnz	r4, 800736e <__pow5mult+0x66>
 800735a:	f240 2171 	movw	r1, #625	; 0x271
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff12 	bl	8007188 <__i2b>
 8007364:	2300      	movs	r3, #0
 8007366:	f8c8 0008 	str.w	r0, [r8, #8]
 800736a:	4604      	mov	r4, r0
 800736c:	6003      	str	r3, [r0, #0]
 800736e:	f04f 0900 	mov.w	r9, #0
 8007372:	07eb      	lsls	r3, r5, #31
 8007374:	d50a      	bpl.n	800738c <__pow5mult+0x84>
 8007376:	4639      	mov	r1, r7
 8007378:	4622      	mov	r2, r4
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ff1a 	bl	80071b4 <__multiply>
 8007380:	4639      	mov	r1, r7
 8007382:	4680      	mov	r8, r0
 8007384:	4630      	mov	r0, r6
 8007386:	f7ff fe47 	bl	8007018 <_Bfree>
 800738a:	4647      	mov	r7, r8
 800738c:	106d      	asrs	r5, r5, #1
 800738e:	d00b      	beq.n	80073a8 <__pow5mult+0xa0>
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	b938      	cbnz	r0, 80073a4 <__pow5mult+0x9c>
 8007394:	4622      	mov	r2, r4
 8007396:	4621      	mov	r1, r4
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff ff0b 	bl	80071b4 <__multiply>
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	f8c0 9000 	str.w	r9, [r0]
 80073a4:	4604      	mov	r4, r0
 80073a6:	e7e4      	b.n	8007372 <__pow5mult+0x6a>
 80073a8:	4638      	mov	r0, r7
 80073aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ae:	bf00      	nop
 80073b0:	080089c8 	.word	0x080089c8
 80073b4:	080087f5 	.word	0x080087f5
 80073b8:	08008878 	.word	0x08008878

080073bc <__lshift>:
 80073bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	460c      	mov	r4, r1
 80073c2:	6849      	ldr	r1, [r1, #4]
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	4607      	mov	r7, r0
 80073ce:	4691      	mov	r9, r2
 80073d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073d4:	f108 0601 	add.w	r6, r8, #1
 80073d8:	42b3      	cmp	r3, r6
 80073da:	db0b      	blt.n	80073f4 <__lshift+0x38>
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff fddb 	bl	8006f98 <_Balloc>
 80073e2:	4605      	mov	r5, r0
 80073e4:	b948      	cbnz	r0, 80073fa <__lshift+0x3e>
 80073e6:	4602      	mov	r2, r0
 80073e8:	4b2a      	ldr	r3, [pc, #168]	; (8007494 <__lshift+0xd8>)
 80073ea:	482b      	ldr	r0, [pc, #172]	; (8007498 <__lshift+0xdc>)
 80073ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073f0:	f000 fbb8 	bl	8007b64 <__assert_func>
 80073f4:	3101      	adds	r1, #1
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	e7ee      	b.n	80073d8 <__lshift+0x1c>
 80073fa:	2300      	movs	r3, #0
 80073fc:	f100 0114 	add.w	r1, r0, #20
 8007400:	f100 0210 	add.w	r2, r0, #16
 8007404:	4618      	mov	r0, r3
 8007406:	4553      	cmp	r3, sl
 8007408:	db37      	blt.n	800747a <__lshift+0xbe>
 800740a:	6920      	ldr	r0, [r4, #16]
 800740c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007410:	f104 0314 	add.w	r3, r4, #20
 8007414:	f019 091f 	ands.w	r9, r9, #31
 8007418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800741c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007420:	d02f      	beq.n	8007482 <__lshift+0xc6>
 8007422:	f1c9 0e20 	rsb	lr, r9, #32
 8007426:	468a      	mov	sl, r1
 8007428:	f04f 0c00 	mov.w	ip, #0
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	fa02 f209 	lsl.w	r2, r2, r9
 8007432:	ea42 020c 	orr.w	r2, r2, ip
 8007436:	f84a 2b04 	str.w	r2, [sl], #4
 800743a:	f853 2b04 	ldr.w	r2, [r3], #4
 800743e:	4298      	cmp	r0, r3
 8007440:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007444:	d8f2      	bhi.n	800742c <__lshift+0x70>
 8007446:	1b03      	subs	r3, r0, r4
 8007448:	3b15      	subs	r3, #21
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	3304      	adds	r3, #4
 8007450:	f104 0215 	add.w	r2, r4, #21
 8007454:	4290      	cmp	r0, r2
 8007456:	bf38      	it	cc
 8007458:	2304      	movcc	r3, #4
 800745a:	f841 c003 	str.w	ip, [r1, r3]
 800745e:	f1bc 0f00 	cmp.w	ip, #0
 8007462:	d001      	beq.n	8007468 <__lshift+0xac>
 8007464:	f108 0602 	add.w	r6, r8, #2
 8007468:	3e01      	subs	r6, #1
 800746a:	4638      	mov	r0, r7
 800746c:	612e      	str	r6, [r5, #16]
 800746e:	4621      	mov	r1, r4
 8007470:	f7ff fdd2 	bl	8007018 <_Bfree>
 8007474:	4628      	mov	r0, r5
 8007476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747a:	f842 0f04 	str.w	r0, [r2, #4]!
 800747e:	3301      	adds	r3, #1
 8007480:	e7c1      	b.n	8007406 <__lshift+0x4a>
 8007482:	3904      	subs	r1, #4
 8007484:	f853 2b04 	ldr.w	r2, [r3], #4
 8007488:	f841 2f04 	str.w	r2, [r1, #4]!
 800748c:	4298      	cmp	r0, r3
 800748e:	d8f9      	bhi.n	8007484 <__lshift+0xc8>
 8007490:	e7ea      	b.n	8007468 <__lshift+0xac>
 8007492:	bf00      	nop
 8007494:	08008867 	.word	0x08008867
 8007498:	08008878 	.word	0x08008878

0800749c <__mcmp>:
 800749c:	b530      	push	{r4, r5, lr}
 800749e:	6902      	ldr	r2, [r0, #16]
 80074a0:	690c      	ldr	r4, [r1, #16]
 80074a2:	1b12      	subs	r2, r2, r4
 80074a4:	d10e      	bne.n	80074c4 <__mcmp+0x28>
 80074a6:	f100 0314 	add.w	r3, r0, #20
 80074aa:	3114      	adds	r1, #20
 80074ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074bc:	42a5      	cmp	r5, r4
 80074be:	d003      	beq.n	80074c8 <__mcmp+0x2c>
 80074c0:	d305      	bcc.n	80074ce <__mcmp+0x32>
 80074c2:	2201      	movs	r2, #1
 80074c4:	4610      	mov	r0, r2
 80074c6:	bd30      	pop	{r4, r5, pc}
 80074c8:	4283      	cmp	r3, r0
 80074ca:	d3f3      	bcc.n	80074b4 <__mcmp+0x18>
 80074cc:	e7fa      	b.n	80074c4 <__mcmp+0x28>
 80074ce:	f04f 32ff 	mov.w	r2, #4294967295
 80074d2:	e7f7      	b.n	80074c4 <__mcmp+0x28>

080074d4 <__mdiff>:
 80074d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	460c      	mov	r4, r1
 80074da:	4606      	mov	r6, r0
 80074dc:	4611      	mov	r1, r2
 80074de:	4620      	mov	r0, r4
 80074e0:	4690      	mov	r8, r2
 80074e2:	f7ff ffdb 	bl	800749c <__mcmp>
 80074e6:	1e05      	subs	r5, r0, #0
 80074e8:	d110      	bne.n	800750c <__mdiff+0x38>
 80074ea:	4629      	mov	r1, r5
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff fd53 	bl	8006f98 <_Balloc>
 80074f2:	b930      	cbnz	r0, 8007502 <__mdiff+0x2e>
 80074f4:	4b3a      	ldr	r3, [pc, #232]	; (80075e0 <__mdiff+0x10c>)
 80074f6:	4602      	mov	r2, r0
 80074f8:	f240 2132 	movw	r1, #562	; 0x232
 80074fc:	4839      	ldr	r0, [pc, #228]	; (80075e4 <__mdiff+0x110>)
 80074fe:	f000 fb31 	bl	8007b64 <__assert_func>
 8007502:	2301      	movs	r3, #1
 8007504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	bfa4      	itt	ge
 800750e:	4643      	movge	r3, r8
 8007510:	46a0      	movge	r8, r4
 8007512:	4630      	mov	r0, r6
 8007514:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007518:	bfa6      	itte	ge
 800751a:	461c      	movge	r4, r3
 800751c:	2500      	movge	r5, #0
 800751e:	2501      	movlt	r5, #1
 8007520:	f7ff fd3a 	bl	8006f98 <_Balloc>
 8007524:	b920      	cbnz	r0, 8007530 <__mdiff+0x5c>
 8007526:	4b2e      	ldr	r3, [pc, #184]	; (80075e0 <__mdiff+0x10c>)
 8007528:	4602      	mov	r2, r0
 800752a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800752e:	e7e5      	b.n	80074fc <__mdiff+0x28>
 8007530:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007534:	6926      	ldr	r6, [r4, #16]
 8007536:	60c5      	str	r5, [r0, #12]
 8007538:	f104 0914 	add.w	r9, r4, #20
 800753c:	f108 0514 	add.w	r5, r8, #20
 8007540:	f100 0e14 	add.w	lr, r0, #20
 8007544:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007548:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800754c:	f108 0210 	add.w	r2, r8, #16
 8007550:	46f2      	mov	sl, lr
 8007552:	2100      	movs	r1, #0
 8007554:	f859 3b04 	ldr.w	r3, [r9], #4
 8007558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800755c:	fa1f f883 	uxth.w	r8, r3
 8007560:	fa11 f18b 	uxtah	r1, r1, fp
 8007564:	0c1b      	lsrs	r3, r3, #16
 8007566:	eba1 0808 	sub.w	r8, r1, r8
 800756a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800756e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007572:	fa1f f888 	uxth.w	r8, r8
 8007576:	1419      	asrs	r1, r3, #16
 8007578:	454e      	cmp	r6, r9
 800757a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800757e:	f84a 3b04 	str.w	r3, [sl], #4
 8007582:	d8e7      	bhi.n	8007554 <__mdiff+0x80>
 8007584:	1b33      	subs	r3, r6, r4
 8007586:	3b15      	subs	r3, #21
 8007588:	f023 0303 	bic.w	r3, r3, #3
 800758c:	3304      	adds	r3, #4
 800758e:	3415      	adds	r4, #21
 8007590:	42a6      	cmp	r6, r4
 8007592:	bf38      	it	cc
 8007594:	2304      	movcc	r3, #4
 8007596:	441d      	add	r5, r3
 8007598:	4473      	add	r3, lr
 800759a:	469e      	mov	lr, r3
 800759c:	462e      	mov	r6, r5
 800759e:	4566      	cmp	r6, ip
 80075a0:	d30e      	bcc.n	80075c0 <__mdiff+0xec>
 80075a2:	f10c 0203 	add.w	r2, ip, #3
 80075a6:	1b52      	subs	r2, r2, r5
 80075a8:	f022 0203 	bic.w	r2, r2, #3
 80075ac:	3d03      	subs	r5, #3
 80075ae:	45ac      	cmp	ip, r5
 80075b0:	bf38      	it	cc
 80075b2:	2200      	movcc	r2, #0
 80075b4:	441a      	add	r2, r3
 80075b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075ba:	b17b      	cbz	r3, 80075dc <__mdiff+0x108>
 80075bc:	6107      	str	r7, [r0, #16]
 80075be:	e7a3      	b.n	8007508 <__mdiff+0x34>
 80075c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80075c4:	fa11 f288 	uxtah	r2, r1, r8
 80075c8:	1414      	asrs	r4, r2, #16
 80075ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075ce:	b292      	uxth	r2, r2
 80075d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075d4:	f84e 2b04 	str.w	r2, [lr], #4
 80075d8:	1421      	asrs	r1, r4, #16
 80075da:	e7e0      	b.n	800759e <__mdiff+0xca>
 80075dc:	3f01      	subs	r7, #1
 80075de:	e7ea      	b.n	80075b6 <__mdiff+0xe2>
 80075e0:	08008867 	.word	0x08008867
 80075e4:	08008878 	.word	0x08008878

080075e8 <__d2b>:
 80075e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	4689      	mov	r9, r1
 80075ee:	2101      	movs	r1, #1
 80075f0:	ec57 6b10 	vmov	r6, r7, d0
 80075f4:	4690      	mov	r8, r2
 80075f6:	f7ff fccf 	bl	8006f98 <_Balloc>
 80075fa:	4604      	mov	r4, r0
 80075fc:	b930      	cbnz	r0, 800760c <__d2b+0x24>
 80075fe:	4602      	mov	r2, r0
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <__d2b+0xb0>)
 8007602:	4826      	ldr	r0, [pc, #152]	; (800769c <__d2b+0xb4>)
 8007604:	f240 310a 	movw	r1, #778	; 0x30a
 8007608:	f000 faac 	bl	8007b64 <__assert_func>
 800760c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007614:	bb35      	cbnz	r5, 8007664 <__d2b+0x7c>
 8007616:	2e00      	cmp	r6, #0
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	d028      	beq.n	800766e <__d2b+0x86>
 800761c:	4668      	mov	r0, sp
 800761e:	9600      	str	r6, [sp, #0]
 8007620:	f7ff fd82 	bl	8007128 <__lo0bits>
 8007624:	9900      	ldr	r1, [sp, #0]
 8007626:	b300      	cbz	r0, 800766a <__d2b+0x82>
 8007628:	9a01      	ldr	r2, [sp, #4]
 800762a:	f1c0 0320 	rsb	r3, r0, #32
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	430b      	orrs	r3, r1
 8007634:	40c2      	lsrs	r2, r0
 8007636:	6163      	str	r3, [r4, #20]
 8007638:	9201      	str	r2, [sp, #4]
 800763a:	9b01      	ldr	r3, [sp, #4]
 800763c:	61a3      	str	r3, [r4, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	bf14      	ite	ne
 8007642:	2202      	movne	r2, #2
 8007644:	2201      	moveq	r2, #1
 8007646:	6122      	str	r2, [r4, #16]
 8007648:	b1d5      	cbz	r5, 8007680 <__d2b+0x98>
 800764a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800764e:	4405      	add	r5, r0
 8007650:	f8c9 5000 	str.w	r5, [r9]
 8007654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007658:	f8c8 0000 	str.w	r0, [r8]
 800765c:	4620      	mov	r0, r4
 800765e:	b003      	add	sp, #12
 8007660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007668:	e7d5      	b.n	8007616 <__d2b+0x2e>
 800766a:	6161      	str	r1, [r4, #20]
 800766c:	e7e5      	b.n	800763a <__d2b+0x52>
 800766e:	a801      	add	r0, sp, #4
 8007670:	f7ff fd5a 	bl	8007128 <__lo0bits>
 8007674:	9b01      	ldr	r3, [sp, #4]
 8007676:	6163      	str	r3, [r4, #20]
 8007678:	2201      	movs	r2, #1
 800767a:	6122      	str	r2, [r4, #16]
 800767c:	3020      	adds	r0, #32
 800767e:	e7e3      	b.n	8007648 <__d2b+0x60>
 8007680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007688:	f8c9 0000 	str.w	r0, [r9]
 800768c:	6918      	ldr	r0, [r3, #16]
 800768e:	f7ff fd2b 	bl	80070e8 <__hi0bits>
 8007692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007696:	e7df      	b.n	8007658 <__d2b+0x70>
 8007698:	08008867 	.word	0x08008867
 800769c:	08008878 	.word	0x08008878

080076a0 <_calloc_r>:
 80076a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076a2:	fba1 2402 	umull	r2, r4, r1, r2
 80076a6:	b94c      	cbnz	r4, 80076bc <_calloc_r+0x1c>
 80076a8:	4611      	mov	r1, r2
 80076aa:	9201      	str	r2, [sp, #4]
 80076ac:	f000 f87a 	bl	80077a4 <_malloc_r>
 80076b0:	9a01      	ldr	r2, [sp, #4]
 80076b2:	4605      	mov	r5, r0
 80076b4:	b930      	cbnz	r0, 80076c4 <_calloc_r+0x24>
 80076b6:	4628      	mov	r0, r5
 80076b8:	b003      	add	sp, #12
 80076ba:	bd30      	pop	{r4, r5, pc}
 80076bc:	220c      	movs	r2, #12
 80076be:	6002      	str	r2, [r0, #0]
 80076c0:	2500      	movs	r5, #0
 80076c2:	e7f8      	b.n	80076b6 <_calloc_r+0x16>
 80076c4:	4621      	mov	r1, r4
 80076c6:	f7fe f93f 	bl	8005948 <memset>
 80076ca:	e7f4      	b.n	80076b6 <_calloc_r+0x16>

080076cc <_free_r>:
 80076cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ce:	2900      	cmp	r1, #0
 80076d0:	d044      	beq.n	800775c <_free_r+0x90>
 80076d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d6:	9001      	str	r0, [sp, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f1a1 0404 	sub.w	r4, r1, #4
 80076de:	bfb8      	it	lt
 80076e0:	18e4      	addlt	r4, r4, r3
 80076e2:	f000 fa9b 	bl	8007c1c <__malloc_lock>
 80076e6:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <_free_r+0x94>)
 80076e8:	9801      	ldr	r0, [sp, #4]
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	b933      	cbnz	r3, 80076fc <_free_r+0x30>
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	6014      	str	r4, [r2, #0]
 80076f2:	b003      	add	sp, #12
 80076f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076f8:	f000 ba96 	b.w	8007c28 <__malloc_unlock>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d908      	bls.n	8007712 <_free_r+0x46>
 8007700:	6825      	ldr	r5, [r4, #0]
 8007702:	1961      	adds	r1, r4, r5
 8007704:	428b      	cmp	r3, r1
 8007706:	bf01      	itttt	eq
 8007708:	6819      	ldreq	r1, [r3, #0]
 800770a:	685b      	ldreq	r3, [r3, #4]
 800770c:	1949      	addeq	r1, r1, r5
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	e7ed      	b.n	80076ee <_free_r+0x22>
 8007712:	461a      	mov	r2, r3
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	b10b      	cbz	r3, 800771c <_free_r+0x50>
 8007718:	42a3      	cmp	r3, r4
 800771a:	d9fa      	bls.n	8007712 <_free_r+0x46>
 800771c:	6811      	ldr	r1, [r2, #0]
 800771e:	1855      	adds	r5, r2, r1
 8007720:	42a5      	cmp	r5, r4
 8007722:	d10b      	bne.n	800773c <_free_r+0x70>
 8007724:	6824      	ldr	r4, [r4, #0]
 8007726:	4421      	add	r1, r4
 8007728:	1854      	adds	r4, r2, r1
 800772a:	42a3      	cmp	r3, r4
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	d1e0      	bne.n	80076f2 <_free_r+0x26>
 8007730:	681c      	ldr	r4, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	6053      	str	r3, [r2, #4]
 8007736:	4421      	add	r1, r4
 8007738:	6011      	str	r1, [r2, #0]
 800773a:	e7da      	b.n	80076f2 <_free_r+0x26>
 800773c:	d902      	bls.n	8007744 <_free_r+0x78>
 800773e:	230c      	movs	r3, #12
 8007740:	6003      	str	r3, [r0, #0]
 8007742:	e7d6      	b.n	80076f2 <_free_r+0x26>
 8007744:	6825      	ldr	r5, [r4, #0]
 8007746:	1961      	adds	r1, r4, r5
 8007748:	428b      	cmp	r3, r1
 800774a:	bf04      	itt	eq
 800774c:	6819      	ldreq	r1, [r3, #0]
 800774e:	685b      	ldreq	r3, [r3, #4]
 8007750:	6063      	str	r3, [r4, #4]
 8007752:	bf04      	itt	eq
 8007754:	1949      	addeq	r1, r1, r5
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	6054      	str	r4, [r2, #4]
 800775a:	e7ca      	b.n	80076f2 <_free_r+0x26>
 800775c:	b003      	add	sp, #12
 800775e:	bd30      	pop	{r4, r5, pc}
 8007760:	20000424 	.word	0x20000424

08007764 <sbrk_aligned>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4e0e      	ldr	r6, [pc, #56]	; (80077a0 <sbrk_aligned+0x3c>)
 8007768:	460c      	mov	r4, r1
 800776a:	6831      	ldr	r1, [r6, #0]
 800776c:	4605      	mov	r5, r0
 800776e:	b911      	cbnz	r1, 8007776 <sbrk_aligned+0x12>
 8007770:	f000 f9e8 	bl	8007b44 <_sbrk_r>
 8007774:	6030      	str	r0, [r6, #0]
 8007776:	4621      	mov	r1, r4
 8007778:	4628      	mov	r0, r5
 800777a:	f000 f9e3 	bl	8007b44 <_sbrk_r>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d00a      	beq.n	8007798 <sbrk_aligned+0x34>
 8007782:	1cc4      	adds	r4, r0, #3
 8007784:	f024 0403 	bic.w	r4, r4, #3
 8007788:	42a0      	cmp	r0, r4
 800778a:	d007      	beq.n	800779c <sbrk_aligned+0x38>
 800778c:	1a21      	subs	r1, r4, r0
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f9d8 	bl	8007b44 <_sbrk_r>
 8007794:	3001      	adds	r0, #1
 8007796:	d101      	bne.n	800779c <sbrk_aligned+0x38>
 8007798:	f04f 34ff 	mov.w	r4, #4294967295
 800779c:	4620      	mov	r0, r4
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	20000428 	.word	0x20000428

080077a4 <_malloc_r>:
 80077a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a8:	1ccd      	adds	r5, r1, #3
 80077aa:	f025 0503 	bic.w	r5, r5, #3
 80077ae:	3508      	adds	r5, #8
 80077b0:	2d0c      	cmp	r5, #12
 80077b2:	bf38      	it	cc
 80077b4:	250c      	movcc	r5, #12
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	4607      	mov	r7, r0
 80077ba:	db01      	blt.n	80077c0 <_malloc_r+0x1c>
 80077bc:	42a9      	cmp	r1, r5
 80077be:	d905      	bls.n	80077cc <_malloc_r+0x28>
 80077c0:	230c      	movs	r3, #12
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	2600      	movs	r6, #0
 80077c6:	4630      	mov	r0, r6
 80077c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077cc:	4e2e      	ldr	r6, [pc, #184]	; (8007888 <_malloc_r+0xe4>)
 80077ce:	f000 fa25 	bl	8007c1c <__malloc_lock>
 80077d2:	6833      	ldr	r3, [r6, #0]
 80077d4:	461c      	mov	r4, r3
 80077d6:	bb34      	cbnz	r4, 8007826 <_malloc_r+0x82>
 80077d8:	4629      	mov	r1, r5
 80077da:	4638      	mov	r0, r7
 80077dc:	f7ff ffc2 	bl	8007764 <sbrk_aligned>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	4604      	mov	r4, r0
 80077e4:	d14d      	bne.n	8007882 <_malloc_r+0xde>
 80077e6:	6834      	ldr	r4, [r6, #0]
 80077e8:	4626      	mov	r6, r4
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	d140      	bne.n	8007870 <_malloc_r+0xcc>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	4631      	mov	r1, r6
 80077f2:	4638      	mov	r0, r7
 80077f4:	eb04 0803 	add.w	r8, r4, r3
 80077f8:	f000 f9a4 	bl	8007b44 <_sbrk_r>
 80077fc:	4580      	cmp	r8, r0
 80077fe:	d13a      	bne.n	8007876 <_malloc_r+0xd2>
 8007800:	6821      	ldr	r1, [r4, #0]
 8007802:	3503      	adds	r5, #3
 8007804:	1a6d      	subs	r5, r5, r1
 8007806:	f025 0503 	bic.w	r5, r5, #3
 800780a:	3508      	adds	r5, #8
 800780c:	2d0c      	cmp	r5, #12
 800780e:	bf38      	it	cc
 8007810:	250c      	movcc	r5, #12
 8007812:	4629      	mov	r1, r5
 8007814:	4638      	mov	r0, r7
 8007816:	f7ff ffa5 	bl	8007764 <sbrk_aligned>
 800781a:	3001      	adds	r0, #1
 800781c:	d02b      	beq.n	8007876 <_malloc_r+0xd2>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	442b      	add	r3, r5
 8007822:	6023      	str	r3, [r4, #0]
 8007824:	e00e      	b.n	8007844 <_malloc_r+0xa0>
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	1b52      	subs	r2, r2, r5
 800782a:	d41e      	bmi.n	800786a <_malloc_r+0xc6>
 800782c:	2a0b      	cmp	r2, #11
 800782e:	d916      	bls.n	800785e <_malloc_r+0xba>
 8007830:	1961      	adds	r1, r4, r5
 8007832:	42a3      	cmp	r3, r4
 8007834:	6025      	str	r5, [r4, #0]
 8007836:	bf18      	it	ne
 8007838:	6059      	strne	r1, [r3, #4]
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	bf08      	it	eq
 800783e:	6031      	streq	r1, [r6, #0]
 8007840:	5162      	str	r2, [r4, r5]
 8007842:	604b      	str	r3, [r1, #4]
 8007844:	4638      	mov	r0, r7
 8007846:	f104 060b 	add.w	r6, r4, #11
 800784a:	f000 f9ed 	bl	8007c28 <__malloc_unlock>
 800784e:	f026 0607 	bic.w	r6, r6, #7
 8007852:	1d23      	adds	r3, r4, #4
 8007854:	1af2      	subs	r2, r6, r3
 8007856:	d0b6      	beq.n	80077c6 <_malloc_r+0x22>
 8007858:	1b9b      	subs	r3, r3, r6
 800785a:	50a3      	str	r3, [r4, r2]
 800785c:	e7b3      	b.n	80077c6 <_malloc_r+0x22>
 800785e:	6862      	ldr	r2, [r4, #4]
 8007860:	42a3      	cmp	r3, r4
 8007862:	bf0c      	ite	eq
 8007864:	6032      	streq	r2, [r6, #0]
 8007866:	605a      	strne	r2, [r3, #4]
 8007868:	e7ec      	b.n	8007844 <_malloc_r+0xa0>
 800786a:	4623      	mov	r3, r4
 800786c:	6864      	ldr	r4, [r4, #4]
 800786e:	e7b2      	b.n	80077d6 <_malloc_r+0x32>
 8007870:	4634      	mov	r4, r6
 8007872:	6876      	ldr	r6, [r6, #4]
 8007874:	e7b9      	b.n	80077ea <_malloc_r+0x46>
 8007876:	230c      	movs	r3, #12
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4638      	mov	r0, r7
 800787c:	f000 f9d4 	bl	8007c28 <__malloc_unlock>
 8007880:	e7a1      	b.n	80077c6 <_malloc_r+0x22>
 8007882:	6025      	str	r5, [r4, #0]
 8007884:	e7de      	b.n	8007844 <_malloc_r+0xa0>
 8007886:	bf00      	nop
 8007888:	20000424 	.word	0x20000424

0800788c <__ssputs_r>:
 800788c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	688e      	ldr	r6, [r1, #8]
 8007892:	429e      	cmp	r6, r3
 8007894:	4682      	mov	sl, r0
 8007896:	460c      	mov	r4, r1
 8007898:	4690      	mov	r8, r2
 800789a:	461f      	mov	r7, r3
 800789c:	d838      	bhi.n	8007910 <__ssputs_r+0x84>
 800789e:	898a      	ldrh	r2, [r1, #12]
 80078a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078a4:	d032      	beq.n	800790c <__ssputs_r+0x80>
 80078a6:	6825      	ldr	r5, [r4, #0]
 80078a8:	6909      	ldr	r1, [r1, #16]
 80078aa:	eba5 0901 	sub.w	r9, r5, r1
 80078ae:	6965      	ldr	r5, [r4, #20]
 80078b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078b8:	3301      	adds	r3, #1
 80078ba:	444b      	add	r3, r9
 80078bc:	106d      	asrs	r5, r5, #1
 80078be:	429d      	cmp	r5, r3
 80078c0:	bf38      	it	cc
 80078c2:	461d      	movcc	r5, r3
 80078c4:	0553      	lsls	r3, r2, #21
 80078c6:	d531      	bpl.n	800792c <__ssputs_r+0xa0>
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7ff ff6b 	bl	80077a4 <_malloc_r>
 80078ce:	4606      	mov	r6, r0
 80078d0:	b950      	cbnz	r0, 80078e8 <__ssputs_r+0x5c>
 80078d2:	230c      	movs	r3, #12
 80078d4:	f8ca 3000 	str.w	r3, [sl]
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e8:	6921      	ldr	r1, [r4, #16]
 80078ea:	464a      	mov	r2, r9
 80078ec:	f7ff fb46 	bl	8006f7c <memcpy>
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	6126      	str	r6, [r4, #16]
 80078fe:	6165      	str	r5, [r4, #20]
 8007900:	444e      	add	r6, r9
 8007902:	eba5 0509 	sub.w	r5, r5, r9
 8007906:	6026      	str	r6, [r4, #0]
 8007908:	60a5      	str	r5, [r4, #8]
 800790a:	463e      	mov	r6, r7
 800790c:	42be      	cmp	r6, r7
 800790e:	d900      	bls.n	8007912 <__ssputs_r+0x86>
 8007910:	463e      	mov	r6, r7
 8007912:	6820      	ldr	r0, [r4, #0]
 8007914:	4632      	mov	r2, r6
 8007916:	4641      	mov	r1, r8
 8007918:	f000 f966 	bl	8007be8 <memmove>
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	1b9b      	subs	r3, r3, r6
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	4433      	add	r3, r6
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	2000      	movs	r0, #0
 800792a:	e7db      	b.n	80078e4 <__ssputs_r+0x58>
 800792c:	462a      	mov	r2, r5
 800792e:	f000 f981 	bl	8007c34 <_realloc_r>
 8007932:	4606      	mov	r6, r0
 8007934:	2800      	cmp	r0, #0
 8007936:	d1e1      	bne.n	80078fc <__ssputs_r+0x70>
 8007938:	6921      	ldr	r1, [r4, #16]
 800793a:	4650      	mov	r0, sl
 800793c:	f7ff fec6 	bl	80076cc <_free_r>
 8007940:	e7c7      	b.n	80078d2 <__ssputs_r+0x46>
	...

08007944 <_svfiprintf_r>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	4698      	mov	r8, r3
 800794a:	898b      	ldrh	r3, [r1, #12]
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	b09d      	sub	sp, #116	; 0x74
 8007950:	4607      	mov	r7, r0
 8007952:	460d      	mov	r5, r1
 8007954:	4614      	mov	r4, r2
 8007956:	d50e      	bpl.n	8007976 <_svfiprintf_r+0x32>
 8007958:	690b      	ldr	r3, [r1, #16]
 800795a:	b963      	cbnz	r3, 8007976 <_svfiprintf_r+0x32>
 800795c:	2140      	movs	r1, #64	; 0x40
 800795e:	f7ff ff21 	bl	80077a4 <_malloc_r>
 8007962:	6028      	str	r0, [r5, #0]
 8007964:	6128      	str	r0, [r5, #16]
 8007966:	b920      	cbnz	r0, 8007972 <_svfiprintf_r+0x2e>
 8007968:	230c      	movs	r3, #12
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	e0d1      	b.n	8007b16 <_svfiprintf_r+0x1d2>
 8007972:	2340      	movs	r3, #64	; 0x40
 8007974:	616b      	str	r3, [r5, #20]
 8007976:	2300      	movs	r3, #0
 8007978:	9309      	str	r3, [sp, #36]	; 0x24
 800797a:	2320      	movs	r3, #32
 800797c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007980:	f8cd 800c 	str.w	r8, [sp, #12]
 8007984:	2330      	movs	r3, #48	; 0x30
 8007986:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b30 <_svfiprintf_r+0x1ec>
 800798a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800798e:	f04f 0901 	mov.w	r9, #1
 8007992:	4623      	mov	r3, r4
 8007994:	469a      	mov	sl, r3
 8007996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800799a:	b10a      	cbz	r2, 80079a0 <_svfiprintf_r+0x5c>
 800799c:	2a25      	cmp	r2, #37	; 0x25
 800799e:	d1f9      	bne.n	8007994 <_svfiprintf_r+0x50>
 80079a0:	ebba 0b04 	subs.w	fp, sl, r4
 80079a4:	d00b      	beq.n	80079be <_svfiprintf_r+0x7a>
 80079a6:	465b      	mov	r3, fp
 80079a8:	4622      	mov	r2, r4
 80079aa:	4629      	mov	r1, r5
 80079ac:	4638      	mov	r0, r7
 80079ae:	f7ff ff6d 	bl	800788c <__ssputs_r>
 80079b2:	3001      	adds	r0, #1
 80079b4:	f000 80aa 	beq.w	8007b0c <_svfiprintf_r+0x1c8>
 80079b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ba:	445a      	add	r2, fp
 80079bc:	9209      	str	r2, [sp, #36]	; 0x24
 80079be:	f89a 3000 	ldrb.w	r3, [sl]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80a2 	beq.w	8007b0c <_svfiprintf_r+0x1c8>
 80079c8:	2300      	movs	r3, #0
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295
 80079ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079d2:	f10a 0a01 	add.w	sl, sl, #1
 80079d6:	9304      	str	r3, [sp, #16]
 80079d8:	9307      	str	r3, [sp, #28]
 80079da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079de:	931a      	str	r3, [sp, #104]	; 0x68
 80079e0:	4654      	mov	r4, sl
 80079e2:	2205      	movs	r2, #5
 80079e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e8:	4851      	ldr	r0, [pc, #324]	; (8007b30 <_svfiprintf_r+0x1ec>)
 80079ea:	f7f8 fc01 	bl	80001f0 <memchr>
 80079ee:	9a04      	ldr	r2, [sp, #16]
 80079f0:	b9d8      	cbnz	r0, 8007a2a <_svfiprintf_r+0xe6>
 80079f2:	06d0      	lsls	r0, r2, #27
 80079f4:	bf44      	itt	mi
 80079f6:	2320      	movmi	r3, #32
 80079f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079fc:	0711      	lsls	r1, r2, #28
 80079fe:	bf44      	itt	mi
 8007a00:	232b      	movmi	r3, #43	; 0x2b
 8007a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a06:	f89a 3000 	ldrb.w	r3, [sl]
 8007a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0c:	d015      	beq.n	8007a3a <_svfiprintf_r+0xf6>
 8007a0e:	9a07      	ldr	r2, [sp, #28]
 8007a10:	4654      	mov	r4, sl
 8007a12:	2000      	movs	r0, #0
 8007a14:	f04f 0c0a 	mov.w	ip, #10
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a1e:	3b30      	subs	r3, #48	; 0x30
 8007a20:	2b09      	cmp	r3, #9
 8007a22:	d94e      	bls.n	8007ac2 <_svfiprintf_r+0x17e>
 8007a24:	b1b0      	cbz	r0, 8007a54 <_svfiprintf_r+0x110>
 8007a26:	9207      	str	r2, [sp, #28]
 8007a28:	e014      	b.n	8007a54 <_svfiprintf_r+0x110>
 8007a2a:	eba0 0308 	sub.w	r3, r0, r8
 8007a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a32:	4313      	orrs	r3, r2
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	46a2      	mov	sl, r4
 8007a38:	e7d2      	b.n	80079e0 <_svfiprintf_r+0x9c>
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	1d19      	adds	r1, r3, #4
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	9103      	str	r1, [sp, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfbb      	ittet	lt
 8007a46:	425b      	neglt	r3, r3
 8007a48:	f042 0202 	orrlt.w	r2, r2, #2
 8007a4c:	9307      	strge	r3, [sp, #28]
 8007a4e:	9307      	strlt	r3, [sp, #28]
 8007a50:	bfb8      	it	lt
 8007a52:	9204      	strlt	r2, [sp, #16]
 8007a54:	7823      	ldrb	r3, [r4, #0]
 8007a56:	2b2e      	cmp	r3, #46	; 0x2e
 8007a58:	d10c      	bne.n	8007a74 <_svfiprintf_r+0x130>
 8007a5a:	7863      	ldrb	r3, [r4, #1]
 8007a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a5e:	d135      	bne.n	8007acc <_svfiprintf_r+0x188>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	1d1a      	adds	r2, r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	9203      	str	r2, [sp, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfb8      	it	lt
 8007a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a70:	3402      	adds	r4, #2
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b40 <_svfiprintf_r+0x1fc>
 8007a78:	7821      	ldrb	r1, [r4, #0]
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	4650      	mov	r0, sl
 8007a7e:	f7f8 fbb7 	bl	80001f0 <memchr>
 8007a82:	b140      	cbz	r0, 8007a96 <_svfiprintf_r+0x152>
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	eba0 000a 	sub.w	r0, r0, sl
 8007a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	4303      	orrs	r3, r0
 8007a92:	3401      	adds	r4, #1
 8007a94:	9304      	str	r3, [sp, #16]
 8007a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9a:	4826      	ldr	r0, [pc, #152]	; (8007b34 <_svfiprintf_r+0x1f0>)
 8007a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa0:	2206      	movs	r2, #6
 8007aa2:	f7f8 fba5 	bl	80001f0 <memchr>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d038      	beq.n	8007b1c <_svfiprintf_r+0x1d8>
 8007aaa:	4b23      	ldr	r3, [pc, #140]	; (8007b38 <_svfiprintf_r+0x1f4>)
 8007aac:	bb1b      	cbnz	r3, 8007af6 <_svfiprintf_r+0x1b2>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	3307      	adds	r3, #7
 8007ab2:	f023 0307 	bic.w	r3, r3, #7
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	9303      	str	r3, [sp, #12]
 8007aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abc:	4433      	add	r3, r6
 8007abe:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac0:	e767      	b.n	8007992 <_svfiprintf_r+0x4e>
 8007ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	2001      	movs	r0, #1
 8007aca:	e7a5      	b.n	8007a18 <_svfiprintf_r+0xd4>
 8007acc:	2300      	movs	r3, #0
 8007ace:	3401      	adds	r4, #1
 8007ad0:	9305      	str	r3, [sp, #20]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f04f 0c0a 	mov.w	ip, #10
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ade:	3a30      	subs	r2, #48	; 0x30
 8007ae0:	2a09      	cmp	r2, #9
 8007ae2:	d903      	bls.n	8007aec <_svfiprintf_r+0x1a8>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0c5      	beq.n	8007a74 <_svfiprintf_r+0x130>
 8007ae8:	9105      	str	r1, [sp, #20]
 8007aea:	e7c3      	b.n	8007a74 <_svfiprintf_r+0x130>
 8007aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8007af0:	4604      	mov	r4, r0
 8007af2:	2301      	movs	r3, #1
 8007af4:	e7f0      	b.n	8007ad8 <_svfiprintf_r+0x194>
 8007af6:	ab03      	add	r3, sp, #12
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	462a      	mov	r2, r5
 8007afc:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <_svfiprintf_r+0x1f8>)
 8007afe:	a904      	add	r1, sp, #16
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7fd ffc9 	bl	8005a98 <_printf_float>
 8007b06:	1c42      	adds	r2, r0, #1
 8007b08:	4606      	mov	r6, r0
 8007b0a:	d1d6      	bne.n	8007aba <_svfiprintf_r+0x176>
 8007b0c:	89ab      	ldrh	r3, [r5, #12]
 8007b0e:	065b      	lsls	r3, r3, #25
 8007b10:	f53f af2c 	bmi.w	800796c <_svfiprintf_r+0x28>
 8007b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b16:	b01d      	add	sp, #116	; 0x74
 8007b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1c:	ab03      	add	r3, sp, #12
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	462a      	mov	r2, r5
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <_svfiprintf_r+0x1f8>)
 8007b24:	a904      	add	r1, sp, #16
 8007b26:	4638      	mov	r0, r7
 8007b28:	f7fe fa5a 	bl	8005fe0 <_printf_i>
 8007b2c:	e7eb      	b.n	8007b06 <_svfiprintf_r+0x1c2>
 8007b2e:	bf00      	nop
 8007b30:	080089d4 	.word	0x080089d4
 8007b34:	080089de 	.word	0x080089de
 8007b38:	08005a99 	.word	0x08005a99
 8007b3c:	0800788d 	.word	0x0800788d
 8007b40:	080089da 	.word	0x080089da

08007b44 <_sbrk_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d06      	ldr	r5, [pc, #24]	; (8007b60 <_sbrk_r+0x1c>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	f7f9 fe32 	bl	80017b8 <_sbrk>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_sbrk_r+0x1a>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_sbrk_r+0x1a>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	2000042c 	.word	0x2000042c

08007b64 <__assert_func>:
 8007b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b66:	4614      	mov	r4, r2
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <__assert_func+0x2c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	68d8      	ldr	r0, [r3, #12]
 8007b72:	b14c      	cbz	r4, 8007b88 <__assert_func+0x24>
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <__assert_func+0x30>)
 8007b76:	9100      	str	r1, [sp, #0]
 8007b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b7c:	4906      	ldr	r1, [pc, #24]	; (8007b98 <__assert_func+0x34>)
 8007b7e:	462b      	mov	r3, r5
 8007b80:	f000 f80e 	bl	8007ba0 <fiprintf>
 8007b84:	f000 faac 	bl	80080e0 <abort>
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <__assert_func+0x38>)
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	e7f3      	b.n	8007b76 <__assert_func+0x12>
 8007b8e:	bf00      	nop
 8007b90:	20000024 	.word	0x20000024
 8007b94:	080089e5 	.word	0x080089e5
 8007b98:	080089f2 	.word	0x080089f2
 8007b9c:	08008a20 	.word	0x08008a20

08007ba0 <fiprintf>:
 8007ba0:	b40e      	push	{r1, r2, r3}
 8007ba2:	b503      	push	{r0, r1, lr}
 8007ba4:	4601      	mov	r1, r0
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <fiprintf+0x20>)
 8007baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bae:	6800      	ldr	r0, [r0, #0]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	f000 f897 	bl	8007ce4 <_vfiprintf_r>
 8007bb6:	b002      	add	sp, #8
 8007bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bbc:	b003      	add	sp, #12
 8007bbe:	4770      	bx	lr
 8007bc0:	20000024 	.word	0x20000024

08007bc4 <__ascii_mbtowc>:
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	b901      	cbnz	r1, 8007bca <__ascii_mbtowc+0x6>
 8007bc8:	a901      	add	r1, sp, #4
 8007bca:	b142      	cbz	r2, 8007bde <__ascii_mbtowc+0x1a>
 8007bcc:	b14b      	cbz	r3, 8007be2 <__ascii_mbtowc+0x1e>
 8007bce:	7813      	ldrb	r3, [r2, #0]
 8007bd0:	600b      	str	r3, [r1, #0]
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	1e10      	subs	r0, r2, #0
 8007bd6:	bf18      	it	ne
 8007bd8:	2001      	movne	r0, #1
 8007bda:	b002      	add	sp, #8
 8007bdc:	4770      	bx	lr
 8007bde:	4610      	mov	r0, r2
 8007be0:	e7fb      	b.n	8007bda <__ascii_mbtowc+0x16>
 8007be2:	f06f 0001 	mvn.w	r0, #1
 8007be6:	e7f8      	b.n	8007bda <__ascii_mbtowc+0x16>

08007be8 <memmove>:
 8007be8:	4288      	cmp	r0, r1
 8007bea:	b510      	push	{r4, lr}
 8007bec:	eb01 0402 	add.w	r4, r1, r2
 8007bf0:	d902      	bls.n	8007bf8 <memmove+0x10>
 8007bf2:	4284      	cmp	r4, r0
 8007bf4:	4623      	mov	r3, r4
 8007bf6:	d807      	bhi.n	8007c08 <memmove+0x20>
 8007bf8:	1e43      	subs	r3, r0, #1
 8007bfa:	42a1      	cmp	r1, r4
 8007bfc:	d008      	beq.n	8007c10 <memmove+0x28>
 8007bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c06:	e7f8      	b.n	8007bfa <memmove+0x12>
 8007c08:	4402      	add	r2, r0
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	428a      	cmp	r2, r1
 8007c0e:	d100      	bne.n	8007c12 <memmove+0x2a>
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c1a:	e7f7      	b.n	8007c0c <memmove+0x24>

08007c1c <__malloc_lock>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	; (8007c24 <__malloc_lock+0x8>)
 8007c1e:	f000 bc1f 	b.w	8008460 <__retarget_lock_acquire_recursive>
 8007c22:	bf00      	nop
 8007c24:	20000430 	.word	0x20000430

08007c28 <__malloc_unlock>:
 8007c28:	4801      	ldr	r0, [pc, #4]	; (8007c30 <__malloc_unlock+0x8>)
 8007c2a:	f000 bc1a 	b.w	8008462 <__retarget_lock_release_recursive>
 8007c2e:	bf00      	nop
 8007c30:	20000430 	.word	0x20000430

08007c34 <_realloc_r>:
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4614      	mov	r4, r2
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	b921      	cbnz	r1, 8007c4a <_realloc_r+0x16>
 8007c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c44:	4611      	mov	r1, r2
 8007c46:	f7ff bdad 	b.w	80077a4 <_malloc_r>
 8007c4a:	b92a      	cbnz	r2, 8007c58 <_realloc_r+0x24>
 8007c4c:	f7ff fd3e 	bl	80076cc <_free_r>
 8007c50:	4625      	mov	r5, r4
 8007c52:	4628      	mov	r0, r5
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	f000 fc6a 	bl	8008530 <_malloc_usable_size_r>
 8007c5c:	4284      	cmp	r4, r0
 8007c5e:	4607      	mov	r7, r0
 8007c60:	d802      	bhi.n	8007c68 <_realloc_r+0x34>
 8007c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c66:	d812      	bhi.n	8007c8e <_realloc_r+0x5a>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	f7ff fd9a 	bl	80077a4 <_malloc_r>
 8007c70:	4605      	mov	r5, r0
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d0ed      	beq.n	8007c52 <_realloc_r+0x1e>
 8007c76:	42bc      	cmp	r4, r7
 8007c78:	4622      	mov	r2, r4
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	bf28      	it	cs
 8007c7e:	463a      	movcs	r2, r7
 8007c80:	f7ff f97c 	bl	8006f7c <memcpy>
 8007c84:	4631      	mov	r1, r6
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff fd20 	bl	80076cc <_free_r>
 8007c8c:	e7e1      	b.n	8007c52 <_realloc_r+0x1e>
 8007c8e:	4635      	mov	r5, r6
 8007c90:	e7df      	b.n	8007c52 <_realloc_r+0x1e>

08007c92 <__sfputc_r>:
 8007c92:	6893      	ldr	r3, [r2, #8]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	b410      	push	{r4}
 8007c9a:	6093      	str	r3, [r2, #8]
 8007c9c:	da08      	bge.n	8007cb0 <__sfputc_r+0x1e>
 8007c9e:	6994      	ldr	r4, [r2, #24]
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	db01      	blt.n	8007ca8 <__sfputc_r+0x16>
 8007ca4:	290a      	cmp	r1, #10
 8007ca6:	d103      	bne.n	8007cb0 <__sfputc_r+0x1e>
 8007ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cac:	f000 b94a 	b.w	8007f44 <__swbuf_r>
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	1c58      	adds	r0, r3, #1
 8007cb4:	6010      	str	r0, [r2, #0]
 8007cb6:	7019      	strb	r1, [r3, #0]
 8007cb8:	4608      	mov	r0, r1
 8007cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <__sfputs_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	18d5      	adds	r5, r2, r3
 8007cca:	42ac      	cmp	r4, r5
 8007ccc:	d101      	bne.n	8007cd2 <__sfputs_r+0x12>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	e007      	b.n	8007ce2 <__sfputs_r+0x22>
 8007cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd6:	463a      	mov	r2, r7
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7ff ffda 	bl	8007c92 <__sfputc_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d1f3      	bne.n	8007cca <__sfputs_r+0xa>
 8007ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ce4 <_vfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	460d      	mov	r5, r1
 8007cea:	b09d      	sub	sp, #116	; 0x74
 8007cec:	4614      	mov	r4, r2
 8007cee:	4698      	mov	r8, r3
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	b118      	cbz	r0, 8007cfc <_vfiprintf_r+0x18>
 8007cf4:	6983      	ldr	r3, [r0, #24]
 8007cf6:	b90b      	cbnz	r3, 8007cfc <_vfiprintf_r+0x18>
 8007cf8:	f000 fb14 	bl	8008324 <__sinit>
 8007cfc:	4b89      	ldr	r3, [pc, #548]	; (8007f24 <_vfiprintf_r+0x240>)
 8007cfe:	429d      	cmp	r5, r3
 8007d00:	d11b      	bne.n	8007d3a <_vfiprintf_r+0x56>
 8007d02:	6875      	ldr	r5, [r6, #4]
 8007d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d06:	07d9      	lsls	r1, r3, #31
 8007d08:	d405      	bmi.n	8007d16 <_vfiprintf_r+0x32>
 8007d0a:	89ab      	ldrh	r3, [r5, #12]
 8007d0c:	059a      	lsls	r2, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_vfiprintf_r+0x32>
 8007d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d12:	f000 fba5 	bl	8008460 <__retarget_lock_acquire_recursive>
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	071b      	lsls	r3, r3, #28
 8007d1a:	d501      	bpl.n	8007d20 <_vfiprintf_r+0x3c>
 8007d1c:	692b      	ldr	r3, [r5, #16]
 8007d1e:	b9eb      	cbnz	r3, 8007d5c <_vfiprintf_r+0x78>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4630      	mov	r0, r6
 8007d24:	f000 f96e 	bl	8008004 <__swsetup_r>
 8007d28:	b1c0      	cbz	r0, 8007d5c <_vfiprintf_r+0x78>
 8007d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d2c:	07dc      	lsls	r4, r3, #31
 8007d2e:	d50e      	bpl.n	8007d4e <_vfiprintf_r+0x6a>
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	b01d      	add	sp, #116	; 0x74
 8007d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3a:	4b7b      	ldr	r3, [pc, #492]	; (8007f28 <_vfiprintf_r+0x244>)
 8007d3c:	429d      	cmp	r5, r3
 8007d3e:	d101      	bne.n	8007d44 <_vfiprintf_r+0x60>
 8007d40:	68b5      	ldr	r5, [r6, #8]
 8007d42:	e7df      	b.n	8007d04 <_vfiprintf_r+0x20>
 8007d44:	4b79      	ldr	r3, [pc, #484]	; (8007f2c <_vfiprintf_r+0x248>)
 8007d46:	429d      	cmp	r5, r3
 8007d48:	bf08      	it	eq
 8007d4a:	68f5      	ldreq	r5, [r6, #12]
 8007d4c:	e7da      	b.n	8007d04 <_vfiprintf_r+0x20>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	0598      	lsls	r0, r3, #22
 8007d52:	d4ed      	bmi.n	8007d30 <_vfiprintf_r+0x4c>
 8007d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d56:	f000 fb84 	bl	8008462 <__retarget_lock_release_recursive>
 8007d5a:	e7e9      	b.n	8007d30 <_vfiprintf_r+0x4c>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d60:	2320      	movs	r3, #32
 8007d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d6a:	2330      	movs	r3, #48	; 0x30
 8007d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f30 <_vfiprintf_r+0x24c>
 8007d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d74:	f04f 0901 	mov.w	r9, #1
 8007d78:	4623      	mov	r3, r4
 8007d7a:	469a      	mov	sl, r3
 8007d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d80:	b10a      	cbz	r2, 8007d86 <_vfiprintf_r+0xa2>
 8007d82:	2a25      	cmp	r2, #37	; 0x25
 8007d84:	d1f9      	bne.n	8007d7a <_vfiprintf_r+0x96>
 8007d86:	ebba 0b04 	subs.w	fp, sl, r4
 8007d8a:	d00b      	beq.n	8007da4 <_vfiprintf_r+0xc0>
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	4622      	mov	r2, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7ff ff94 	bl	8007cc0 <__sfputs_r>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f000 80aa 	beq.w	8007ef2 <_vfiprintf_r+0x20e>
 8007d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da0:	445a      	add	r2, fp
 8007da2:	9209      	str	r2, [sp, #36]	; 0x24
 8007da4:	f89a 3000 	ldrb.w	r3, [sl]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80a2 	beq.w	8007ef2 <_vfiprintf_r+0x20e>
 8007dae:	2300      	movs	r3, #0
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db8:	f10a 0a01 	add.w	sl, sl, #1
 8007dbc:	9304      	str	r3, [sp, #16]
 8007dbe:	9307      	str	r3, [sp, #28]
 8007dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8007dc6:	4654      	mov	r4, sl
 8007dc8:	2205      	movs	r2, #5
 8007dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dce:	4858      	ldr	r0, [pc, #352]	; (8007f30 <_vfiprintf_r+0x24c>)
 8007dd0:	f7f8 fa0e 	bl	80001f0 <memchr>
 8007dd4:	9a04      	ldr	r2, [sp, #16]
 8007dd6:	b9d8      	cbnz	r0, 8007e10 <_vfiprintf_r+0x12c>
 8007dd8:	06d1      	lsls	r1, r2, #27
 8007dda:	bf44      	itt	mi
 8007ddc:	2320      	movmi	r3, #32
 8007dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de2:	0713      	lsls	r3, r2, #28
 8007de4:	bf44      	itt	mi
 8007de6:	232b      	movmi	r3, #43	; 0x2b
 8007de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dec:	f89a 3000 	ldrb.w	r3, [sl]
 8007df0:	2b2a      	cmp	r3, #42	; 0x2a
 8007df2:	d015      	beq.n	8007e20 <_vfiprintf_r+0x13c>
 8007df4:	9a07      	ldr	r2, [sp, #28]
 8007df6:	4654      	mov	r4, sl
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f04f 0c0a 	mov.w	ip, #10
 8007dfe:	4621      	mov	r1, r4
 8007e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e04:	3b30      	subs	r3, #48	; 0x30
 8007e06:	2b09      	cmp	r3, #9
 8007e08:	d94e      	bls.n	8007ea8 <_vfiprintf_r+0x1c4>
 8007e0a:	b1b0      	cbz	r0, 8007e3a <_vfiprintf_r+0x156>
 8007e0c:	9207      	str	r2, [sp, #28]
 8007e0e:	e014      	b.n	8007e3a <_vfiprintf_r+0x156>
 8007e10:	eba0 0308 	sub.w	r3, r0, r8
 8007e14:	fa09 f303 	lsl.w	r3, r9, r3
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	46a2      	mov	sl, r4
 8007e1e:	e7d2      	b.n	8007dc6 <_vfiprintf_r+0xe2>
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	1d19      	adds	r1, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	9103      	str	r1, [sp, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfbb      	ittet	lt
 8007e2c:	425b      	neglt	r3, r3
 8007e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e32:	9307      	strge	r3, [sp, #28]
 8007e34:	9307      	strlt	r3, [sp, #28]
 8007e36:	bfb8      	it	lt
 8007e38:	9204      	strlt	r2, [sp, #16]
 8007e3a:	7823      	ldrb	r3, [r4, #0]
 8007e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e3e:	d10c      	bne.n	8007e5a <_vfiprintf_r+0x176>
 8007e40:	7863      	ldrb	r3, [r4, #1]
 8007e42:	2b2a      	cmp	r3, #42	; 0x2a
 8007e44:	d135      	bne.n	8007eb2 <_vfiprintf_r+0x1ce>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	1d1a      	adds	r2, r3, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	9203      	str	r2, [sp, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bfb8      	it	lt
 8007e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e56:	3402      	adds	r4, #2
 8007e58:	9305      	str	r3, [sp, #20]
 8007e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f40 <_vfiprintf_r+0x25c>
 8007e5e:	7821      	ldrb	r1, [r4, #0]
 8007e60:	2203      	movs	r2, #3
 8007e62:	4650      	mov	r0, sl
 8007e64:	f7f8 f9c4 	bl	80001f0 <memchr>
 8007e68:	b140      	cbz	r0, 8007e7c <_vfiprintf_r+0x198>
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	eba0 000a 	sub.w	r0, r0, sl
 8007e70:	fa03 f000 	lsl.w	r0, r3, r0
 8007e74:	9b04      	ldr	r3, [sp, #16]
 8007e76:	4303      	orrs	r3, r0
 8007e78:	3401      	adds	r4, #1
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e80:	482c      	ldr	r0, [pc, #176]	; (8007f34 <_vfiprintf_r+0x250>)
 8007e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e86:	2206      	movs	r2, #6
 8007e88:	f7f8 f9b2 	bl	80001f0 <memchr>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d03f      	beq.n	8007f10 <_vfiprintf_r+0x22c>
 8007e90:	4b29      	ldr	r3, [pc, #164]	; (8007f38 <_vfiprintf_r+0x254>)
 8007e92:	bb1b      	cbnz	r3, 8007edc <_vfiprintf_r+0x1f8>
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	3307      	adds	r3, #7
 8007e98:	f023 0307 	bic.w	r3, r3, #7
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	9303      	str	r3, [sp, #12]
 8007ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea2:	443b      	add	r3, r7
 8007ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea6:	e767      	b.n	8007d78 <_vfiprintf_r+0x94>
 8007ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eac:	460c      	mov	r4, r1
 8007eae:	2001      	movs	r0, #1
 8007eb0:	e7a5      	b.n	8007dfe <_vfiprintf_r+0x11a>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	3401      	adds	r4, #1
 8007eb6:	9305      	str	r3, [sp, #20]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f04f 0c0a 	mov.w	ip, #10
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ec4:	3a30      	subs	r2, #48	; 0x30
 8007ec6:	2a09      	cmp	r2, #9
 8007ec8:	d903      	bls.n	8007ed2 <_vfiprintf_r+0x1ee>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0c5      	beq.n	8007e5a <_vfiprintf_r+0x176>
 8007ece:	9105      	str	r1, [sp, #20]
 8007ed0:	e7c3      	b.n	8007e5a <_vfiprintf_r+0x176>
 8007ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e7f0      	b.n	8007ebe <_vfiprintf_r+0x1da>
 8007edc:	ab03      	add	r3, sp, #12
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	4b16      	ldr	r3, [pc, #88]	; (8007f3c <_vfiprintf_r+0x258>)
 8007ee4:	a904      	add	r1, sp, #16
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7fd fdd6 	bl	8005a98 <_printf_float>
 8007eec:	4607      	mov	r7, r0
 8007eee:	1c78      	adds	r0, r7, #1
 8007ef0:	d1d6      	bne.n	8007ea0 <_vfiprintf_r+0x1bc>
 8007ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ef4:	07d9      	lsls	r1, r3, #31
 8007ef6:	d405      	bmi.n	8007f04 <_vfiprintf_r+0x220>
 8007ef8:	89ab      	ldrh	r3, [r5, #12]
 8007efa:	059a      	lsls	r2, r3, #22
 8007efc:	d402      	bmi.n	8007f04 <_vfiprintf_r+0x220>
 8007efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f00:	f000 faaf 	bl	8008462 <__retarget_lock_release_recursive>
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	065b      	lsls	r3, r3, #25
 8007f08:	f53f af12 	bmi.w	8007d30 <_vfiprintf_r+0x4c>
 8007f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f0e:	e711      	b.n	8007d34 <_vfiprintf_r+0x50>
 8007f10:	ab03      	add	r3, sp, #12
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	462a      	mov	r2, r5
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <_vfiprintf_r+0x258>)
 8007f18:	a904      	add	r1, sp, #16
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7fe f860 	bl	8005fe0 <_printf_i>
 8007f20:	e7e4      	b.n	8007eec <_vfiprintf_r+0x208>
 8007f22:	bf00      	nop
 8007f24:	08008b4c 	.word	0x08008b4c
 8007f28:	08008b6c 	.word	0x08008b6c
 8007f2c:	08008b2c 	.word	0x08008b2c
 8007f30:	080089d4 	.word	0x080089d4
 8007f34:	080089de 	.word	0x080089de
 8007f38:	08005a99 	.word	0x08005a99
 8007f3c:	08007cc1 	.word	0x08007cc1
 8007f40:	080089da 	.word	0x080089da

08007f44 <__swbuf_r>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	460e      	mov	r6, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	b118      	cbz	r0, 8007f56 <__swbuf_r+0x12>
 8007f4e:	6983      	ldr	r3, [r0, #24]
 8007f50:	b90b      	cbnz	r3, 8007f56 <__swbuf_r+0x12>
 8007f52:	f000 f9e7 	bl	8008324 <__sinit>
 8007f56:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <__swbuf_r+0x98>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d12b      	bne.n	8007fb4 <__swbuf_r+0x70>
 8007f5c:	686c      	ldr	r4, [r5, #4]
 8007f5e:	69a3      	ldr	r3, [r4, #24]
 8007f60:	60a3      	str	r3, [r4, #8]
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	071a      	lsls	r2, r3, #28
 8007f66:	d52f      	bpl.n	8007fc8 <__swbuf_r+0x84>
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	b36b      	cbz	r3, 8007fc8 <__swbuf_r+0x84>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	6820      	ldr	r0, [r4, #0]
 8007f70:	1ac0      	subs	r0, r0, r3
 8007f72:	6963      	ldr	r3, [r4, #20]
 8007f74:	b2f6      	uxtb	r6, r6
 8007f76:	4283      	cmp	r3, r0
 8007f78:	4637      	mov	r7, r6
 8007f7a:	dc04      	bgt.n	8007f86 <__swbuf_r+0x42>
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f000 f93c 	bl	80081fc <_fflush_r>
 8007f84:	bb30      	cbnz	r0, 8007fd4 <__swbuf_r+0x90>
 8007f86:	68a3      	ldr	r3, [r4, #8]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	6022      	str	r2, [r4, #0]
 8007f92:	701e      	strb	r6, [r3, #0]
 8007f94:	6963      	ldr	r3, [r4, #20]
 8007f96:	3001      	adds	r0, #1
 8007f98:	4283      	cmp	r3, r0
 8007f9a:	d004      	beq.n	8007fa6 <__swbuf_r+0x62>
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	07db      	lsls	r3, r3, #31
 8007fa0:	d506      	bpl.n	8007fb0 <__swbuf_r+0x6c>
 8007fa2:	2e0a      	cmp	r6, #10
 8007fa4:	d104      	bne.n	8007fb0 <__swbuf_r+0x6c>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f000 f927 	bl	80081fc <_fflush_r>
 8007fae:	b988      	cbnz	r0, 8007fd4 <__swbuf_r+0x90>
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <__swbuf_r+0x9c>)
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d101      	bne.n	8007fbe <__swbuf_r+0x7a>
 8007fba:	68ac      	ldr	r4, [r5, #8]
 8007fbc:	e7cf      	b.n	8007f5e <__swbuf_r+0x1a>
 8007fbe:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <__swbuf_r+0xa0>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	bf08      	it	eq
 8007fc4:	68ec      	ldreq	r4, [r5, #12]
 8007fc6:	e7ca      	b.n	8007f5e <__swbuf_r+0x1a>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 f81a 	bl	8008004 <__swsetup_r>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d0cb      	beq.n	8007f6c <__swbuf_r+0x28>
 8007fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8007fd8:	e7ea      	b.n	8007fb0 <__swbuf_r+0x6c>
 8007fda:	bf00      	nop
 8007fdc:	08008b4c 	.word	0x08008b4c
 8007fe0:	08008b6c 	.word	0x08008b6c
 8007fe4:	08008b2c 	.word	0x08008b2c

08007fe8 <__ascii_wctomb>:
 8007fe8:	b149      	cbz	r1, 8007ffe <__ascii_wctomb+0x16>
 8007fea:	2aff      	cmp	r2, #255	; 0xff
 8007fec:	bf85      	ittet	hi
 8007fee:	238a      	movhi	r3, #138	; 0x8a
 8007ff0:	6003      	strhi	r3, [r0, #0]
 8007ff2:	700a      	strbls	r2, [r1, #0]
 8007ff4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ff8:	bf98      	it	ls
 8007ffa:	2001      	movls	r0, #1
 8007ffc:	4770      	bx	lr
 8007ffe:	4608      	mov	r0, r1
 8008000:	4770      	bx	lr
	...

08008004 <__swsetup_r>:
 8008004:	4b32      	ldr	r3, [pc, #200]	; (80080d0 <__swsetup_r+0xcc>)
 8008006:	b570      	push	{r4, r5, r6, lr}
 8008008:	681d      	ldr	r5, [r3, #0]
 800800a:	4606      	mov	r6, r0
 800800c:	460c      	mov	r4, r1
 800800e:	b125      	cbz	r5, 800801a <__swsetup_r+0x16>
 8008010:	69ab      	ldr	r3, [r5, #24]
 8008012:	b913      	cbnz	r3, 800801a <__swsetup_r+0x16>
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f985 	bl	8008324 <__sinit>
 800801a:	4b2e      	ldr	r3, [pc, #184]	; (80080d4 <__swsetup_r+0xd0>)
 800801c:	429c      	cmp	r4, r3
 800801e:	d10f      	bne.n	8008040 <__swsetup_r+0x3c>
 8008020:	686c      	ldr	r4, [r5, #4]
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008028:	0719      	lsls	r1, r3, #28
 800802a:	d42c      	bmi.n	8008086 <__swsetup_r+0x82>
 800802c:	06dd      	lsls	r5, r3, #27
 800802e:	d411      	bmi.n	8008054 <__swsetup_r+0x50>
 8008030:	2309      	movs	r3, #9
 8008032:	6033      	str	r3, [r6, #0]
 8008034:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	e03e      	b.n	80080be <__swsetup_r+0xba>
 8008040:	4b25      	ldr	r3, [pc, #148]	; (80080d8 <__swsetup_r+0xd4>)
 8008042:	429c      	cmp	r4, r3
 8008044:	d101      	bne.n	800804a <__swsetup_r+0x46>
 8008046:	68ac      	ldr	r4, [r5, #8]
 8008048:	e7eb      	b.n	8008022 <__swsetup_r+0x1e>
 800804a:	4b24      	ldr	r3, [pc, #144]	; (80080dc <__swsetup_r+0xd8>)
 800804c:	429c      	cmp	r4, r3
 800804e:	bf08      	it	eq
 8008050:	68ec      	ldreq	r4, [r5, #12]
 8008052:	e7e6      	b.n	8008022 <__swsetup_r+0x1e>
 8008054:	0758      	lsls	r0, r3, #29
 8008056:	d512      	bpl.n	800807e <__swsetup_r+0x7a>
 8008058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800805a:	b141      	cbz	r1, 800806e <__swsetup_r+0x6a>
 800805c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008060:	4299      	cmp	r1, r3
 8008062:	d002      	beq.n	800806a <__swsetup_r+0x66>
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff fb31 	bl	80076cc <_free_r>
 800806a:	2300      	movs	r3, #0
 800806c:	6363      	str	r3, [r4, #52]	; 0x34
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	2300      	movs	r3, #0
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f043 0308 	orr.w	r3, r3, #8
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	b94b      	cbnz	r3, 800809e <__swsetup_r+0x9a>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008094:	d003      	beq.n	800809e <__swsetup_r+0x9a>
 8008096:	4621      	mov	r1, r4
 8008098:	4630      	mov	r0, r6
 800809a:	f000 fa09 	bl	80084b0 <__smakebuf_r>
 800809e:	89a0      	ldrh	r0, [r4, #12]
 80080a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080a4:	f010 0301 	ands.w	r3, r0, #1
 80080a8:	d00a      	beq.n	80080c0 <__swsetup_r+0xbc>
 80080aa:	2300      	movs	r3, #0
 80080ac:	60a3      	str	r3, [r4, #8]
 80080ae:	6963      	ldr	r3, [r4, #20]
 80080b0:	425b      	negs	r3, r3
 80080b2:	61a3      	str	r3, [r4, #24]
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	b943      	cbnz	r3, 80080ca <__swsetup_r+0xc6>
 80080b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080bc:	d1ba      	bne.n	8008034 <__swsetup_r+0x30>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	0781      	lsls	r1, r0, #30
 80080c2:	bf58      	it	pl
 80080c4:	6963      	ldrpl	r3, [r4, #20]
 80080c6:	60a3      	str	r3, [r4, #8]
 80080c8:	e7f4      	b.n	80080b4 <__swsetup_r+0xb0>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e7f7      	b.n	80080be <__swsetup_r+0xba>
 80080ce:	bf00      	nop
 80080d0:	20000024 	.word	0x20000024
 80080d4:	08008b4c 	.word	0x08008b4c
 80080d8:	08008b6c 	.word	0x08008b6c
 80080dc:	08008b2c 	.word	0x08008b2c

080080e0 <abort>:
 80080e0:	b508      	push	{r3, lr}
 80080e2:	2006      	movs	r0, #6
 80080e4:	f000 fa54 	bl	8008590 <raise>
 80080e8:	2001      	movs	r0, #1
 80080ea:	f7f9 faed 	bl	80016c8 <_exit>
	...

080080f0 <__sflush_r>:
 80080f0:	898a      	ldrh	r2, [r1, #12]
 80080f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f6:	4605      	mov	r5, r0
 80080f8:	0710      	lsls	r0, r2, #28
 80080fa:	460c      	mov	r4, r1
 80080fc:	d458      	bmi.n	80081b0 <__sflush_r+0xc0>
 80080fe:	684b      	ldr	r3, [r1, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc05      	bgt.n	8008110 <__sflush_r+0x20>
 8008104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	dc02      	bgt.n	8008110 <__sflush_r+0x20>
 800810a:	2000      	movs	r0, #0
 800810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008112:	2e00      	cmp	r6, #0
 8008114:	d0f9      	beq.n	800810a <__sflush_r+0x1a>
 8008116:	2300      	movs	r3, #0
 8008118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800811c:	682f      	ldr	r7, [r5, #0]
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	d032      	beq.n	8008188 <__sflush_r+0x98>
 8008122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	075a      	lsls	r2, r3, #29
 8008128:	d505      	bpl.n	8008136 <__sflush_r+0x46>
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	1ac0      	subs	r0, r0, r3
 800812e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008130:	b10b      	cbz	r3, 8008136 <__sflush_r+0x46>
 8008132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008134:	1ac0      	subs	r0, r0, r3
 8008136:	2300      	movs	r3, #0
 8008138:	4602      	mov	r2, r0
 800813a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800813c:	6a21      	ldr	r1, [r4, #32]
 800813e:	4628      	mov	r0, r5
 8008140:	47b0      	blx	r6
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	d106      	bne.n	8008156 <__sflush_r+0x66>
 8008148:	6829      	ldr	r1, [r5, #0]
 800814a:	291d      	cmp	r1, #29
 800814c:	d82c      	bhi.n	80081a8 <__sflush_r+0xb8>
 800814e:	4a2a      	ldr	r2, [pc, #168]	; (80081f8 <__sflush_r+0x108>)
 8008150:	40ca      	lsrs	r2, r1
 8008152:	07d6      	lsls	r6, r2, #31
 8008154:	d528      	bpl.n	80081a8 <__sflush_r+0xb8>
 8008156:	2200      	movs	r2, #0
 8008158:	6062      	str	r2, [r4, #4]
 800815a:	04d9      	lsls	r1, r3, #19
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	6022      	str	r2, [r4, #0]
 8008160:	d504      	bpl.n	800816c <__sflush_r+0x7c>
 8008162:	1c42      	adds	r2, r0, #1
 8008164:	d101      	bne.n	800816a <__sflush_r+0x7a>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b903      	cbnz	r3, 800816c <__sflush_r+0x7c>
 800816a:	6560      	str	r0, [r4, #84]	; 0x54
 800816c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800816e:	602f      	str	r7, [r5, #0]
 8008170:	2900      	cmp	r1, #0
 8008172:	d0ca      	beq.n	800810a <__sflush_r+0x1a>
 8008174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008178:	4299      	cmp	r1, r3
 800817a:	d002      	beq.n	8008182 <__sflush_r+0x92>
 800817c:	4628      	mov	r0, r5
 800817e:	f7ff faa5 	bl	80076cc <_free_r>
 8008182:	2000      	movs	r0, #0
 8008184:	6360      	str	r0, [r4, #52]	; 0x34
 8008186:	e7c1      	b.n	800810c <__sflush_r+0x1c>
 8008188:	6a21      	ldr	r1, [r4, #32]
 800818a:	2301      	movs	r3, #1
 800818c:	4628      	mov	r0, r5
 800818e:	47b0      	blx	r6
 8008190:	1c41      	adds	r1, r0, #1
 8008192:	d1c7      	bne.n	8008124 <__sflush_r+0x34>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0c4      	beq.n	8008124 <__sflush_r+0x34>
 800819a:	2b1d      	cmp	r3, #29
 800819c:	d001      	beq.n	80081a2 <__sflush_r+0xb2>
 800819e:	2b16      	cmp	r3, #22
 80081a0:	d101      	bne.n	80081a6 <__sflush_r+0xb6>
 80081a2:	602f      	str	r7, [r5, #0]
 80081a4:	e7b1      	b.n	800810a <__sflush_r+0x1a>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	e7ad      	b.n	800810c <__sflush_r+0x1c>
 80081b0:	690f      	ldr	r7, [r1, #16]
 80081b2:	2f00      	cmp	r7, #0
 80081b4:	d0a9      	beq.n	800810a <__sflush_r+0x1a>
 80081b6:	0793      	lsls	r3, r2, #30
 80081b8:	680e      	ldr	r6, [r1, #0]
 80081ba:	bf08      	it	eq
 80081bc:	694b      	ldreq	r3, [r1, #20]
 80081be:	600f      	str	r7, [r1, #0]
 80081c0:	bf18      	it	ne
 80081c2:	2300      	movne	r3, #0
 80081c4:	eba6 0807 	sub.w	r8, r6, r7
 80081c8:	608b      	str	r3, [r1, #8]
 80081ca:	f1b8 0f00 	cmp.w	r8, #0
 80081ce:	dd9c      	ble.n	800810a <__sflush_r+0x1a>
 80081d0:	6a21      	ldr	r1, [r4, #32]
 80081d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081d4:	4643      	mov	r3, r8
 80081d6:	463a      	mov	r2, r7
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	2800      	cmp	r0, #0
 80081de:	dc06      	bgt.n	80081ee <__sflush_r+0xfe>
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e6:	81a3      	strh	r3, [r4, #12]
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e78e      	b.n	800810c <__sflush_r+0x1c>
 80081ee:	4407      	add	r7, r0
 80081f0:	eba8 0800 	sub.w	r8, r8, r0
 80081f4:	e7e9      	b.n	80081ca <__sflush_r+0xda>
 80081f6:	bf00      	nop
 80081f8:	20400001 	.word	0x20400001

080081fc <_fflush_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	690b      	ldr	r3, [r1, #16]
 8008200:	4605      	mov	r5, r0
 8008202:	460c      	mov	r4, r1
 8008204:	b913      	cbnz	r3, 800820c <_fflush_r+0x10>
 8008206:	2500      	movs	r5, #0
 8008208:	4628      	mov	r0, r5
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	b118      	cbz	r0, 8008216 <_fflush_r+0x1a>
 800820e:	6983      	ldr	r3, [r0, #24]
 8008210:	b90b      	cbnz	r3, 8008216 <_fflush_r+0x1a>
 8008212:	f000 f887 	bl	8008324 <__sinit>
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <_fflush_r+0x6c>)
 8008218:	429c      	cmp	r4, r3
 800821a:	d11b      	bne.n	8008254 <_fflush_r+0x58>
 800821c:	686c      	ldr	r4, [r5, #4]
 800821e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0ef      	beq.n	8008206 <_fflush_r+0xa>
 8008226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008228:	07d0      	lsls	r0, r2, #31
 800822a:	d404      	bmi.n	8008236 <_fflush_r+0x3a>
 800822c:	0599      	lsls	r1, r3, #22
 800822e:	d402      	bmi.n	8008236 <_fflush_r+0x3a>
 8008230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008232:	f000 f915 	bl	8008460 <__retarget_lock_acquire_recursive>
 8008236:	4628      	mov	r0, r5
 8008238:	4621      	mov	r1, r4
 800823a:	f7ff ff59 	bl	80080f0 <__sflush_r>
 800823e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008240:	07da      	lsls	r2, r3, #31
 8008242:	4605      	mov	r5, r0
 8008244:	d4e0      	bmi.n	8008208 <_fflush_r+0xc>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	059b      	lsls	r3, r3, #22
 800824a:	d4dd      	bmi.n	8008208 <_fflush_r+0xc>
 800824c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824e:	f000 f908 	bl	8008462 <__retarget_lock_release_recursive>
 8008252:	e7d9      	b.n	8008208 <_fflush_r+0xc>
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <_fflush_r+0x70>)
 8008256:	429c      	cmp	r4, r3
 8008258:	d101      	bne.n	800825e <_fflush_r+0x62>
 800825a:	68ac      	ldr	r4, [r5, #8]
 800825c:	e7df      	b.n	800821e <_fflush_r+0x22>
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <_fflush_r+0x74>)
 8008260:	429c      	cmp	r4, r3
 8008262:	bf08      	it	eq
 8008264:	68ec      	ldreq	r4, [r5, #12]
 8008266:	e7da      	b.n	800821e <_fflush_r+0x22>
 8008268:	08008b4c 	.word	0x08008b4c
 800826c:	08008b6c 	.word	0x08008b6c
 8008270:	08008b2c 	.word	0x08008b2c

08008274 <std>:
 8008274:	2300      	movs	r3, #0
 8008276:	b510      	push	{r4, lr}
 8008278:	4604      	mov	r4, r0
 800827a:	e9c0 3300 	strd	r3, r3, [r0]
 800827e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008282:	6083      	str	r3, [r0, #8]
 8008284:	8181      	strh	r1, [r0, #12]
 8008286:	6643      	str	r3, [r0, #100]	; 0x64
 8008288:	81c2      	strh	r2, [r0, #14]
 800828a:	6183      	str	r3, [r0, #24]
 800828c:	4619      	mov	r1, r3
 800828e:	2208      	movs	r2, #8
 8008290:	305c      	adds	r0, #92	; 0x5c
 8008292:	f7fd fb59 	bl	8005948 <memset>
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <std+0x38>)
 8008298:	6263      	str	r3, [r4, #36]	; 0x24
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <std+0x3c>)
 800829c:	62a3      	str	r3, [r4, #40]	; 0x28
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <std+0x40>)
 80082a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <std+0x44>)
 80082a4:	6224      	str	r4, [r4, #32]
 80082a6:	6323      	str	r3, [r4, #48]	; 0x30
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	080085c9 	.word	0x080085c9
 80082b0:	080085eb 	.word	0x080085eb
 80082b4:	08008623 	.word	0x08008623
 80082b8:	08008647 	.word	0x08008647

080082bc <_cleanup_r>:
 80082bc:	4901      	ldr	r1, [pc, #4]	; (80082c4 <_cleanup_r+0x8>)
 80082be:	f000 b8af 	b.w	8008420 <_fwalk_reent>
 80082c2:	bf00      	nop
 80082c4:	080081fd 	.word	0x080081fd

080082c8 <__sfmoreglue>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	2268      	movs	r2, #104	; 0x68
 80082cc:	1e4d      	subs	r5, r1, #1
 80082ce:	4355      	muls	r5, r2
 80082d0:	460e      	mov	r6, r1
 80082d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082d6:	f7ff fa65 	bl	80077a4 <_malloc_r>
 80082da:	4604      	mov	r4, r0
 80082dc:	b140      	cbz	r0, 80082f0 <__sfmoreglue+0x28>
 80082de:	2100      	movs	r1, #0
 80082e0:	e9c0 1600 	strd	r1, r6, [r0]
 80082e4:	300c      	adds	r0, #12
 80082e6:	60a0      	str	r0, [r4, #8]
 80082e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082ec:	f7fd fb2c 	bl	8005948 <memset>
 80082f0:	4620      	mov	r0, r4
 80082f2:	bd70      	pop	{r4, r5, r6, pc}

080082f4 <__sfp_lock_acquire>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__sfp_lock_acquire+0x8>)
 80082f6:	f000 b8b3 	b.w	8008460 <__retarget_lock_acquire_recursive>
 80082fa:	bf00      	nop
 80082fc:	20000431 	.word	0x20000431

08008300 <__sfp_lock_release>:
 8008300:	4801      	ldr	r0, [pc, #4]	; (8008308 <__sfp_lock_release+0x8>)
 8008302:	f000 b8ae 	b.w	8008462 <__retarget_lock_release_recursive>
 8008306:	bf00      	nop
 8008308:	20000431 	.word	0x20000431

0800830c <__sinit_lock_acquire>:
 800830c:	4801      	ldr	r0, [pc, #4]	; (8008314 <__sinit_lock_acquire+0x8>)
 800830e:	f000 b8a7 	b.w	8008460 <__retarget_lock_acquire_recursive>
 8008312:	bf00      	nop
 8008314:	20000432 	.word	0x20000432

08008318 <__sinit_lock_release>:
 8008318:	4801      	ldr	r0, [pc, #4]	; (8008320 <__sinit_lock_release+0x8>)
 800831a:	f000 b8a2 	b.w	8008462 <__retarget_lock_release_recursive>
 800831e:	bf00      	nop
 8008320:	20000432 	.word	0x20000432

08008324 <__sinit>:
 8008324:	b510      	push	{r4, lr}
 8008326:	4604      	mov	r4, r0
 8008328:	f7ff fff0 	bl	800830c <__sinit_lock_acquire>
 800832c:	69a3      	ldr	r3, [r4, #24]
 800832e:	b11b      	cbz	r3, 8008338 <__sinit+0x14>
 8008330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008334:	f7ff bff0 	b.w	8008318 <__sinit_lock_release>
 8008338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800833c:	6523      	str	r3, [r4, #80]	; 0x50
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <__sinit+0x68>)
 8008340:	4a13      	ldr	r2, [pc, #76]	; (8008390 <__sinit+0x6c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	62a2      	str	r2, [r4, #40]	; 0x28
 8008346:	42a3      	cmp	r3, r4
 8008348:	bf04      	itt	eq
 800834a:	2301      	moveq	r3, #1
 800834c:	61a3      	streq	r3, [r4, #24]
 800834e:	4620      	mov	r0, r4
 8008350:	f000 f820 	bl	8008394 <__sfp>
 8008354:	6060      	str	r0, [r4, #4]
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f81c 	bl	8008394 <__sfp>
 800835c:	60a0      	str	r0, [r4, #8]
 800835e:	4620      	mov	r0, r4
 8008360:	f000 f818 	bl	8008394 <__sfp>
 8008364:	2200      	movs	r2, #0
 8008366:	60e0      	str	r0, [r4, #12]
 8008368:	2104      	movs	r1, #4
 800836a:	6860      	ldr	r0, [r4, #4]
 800836c:	f7ff ff82 	bl	8008274 <std>
 8008370:	68a0      	ldr	r0, [r4, #8]
 8008372:	2201      	movs	r2, #1
 8008374:	2109      	movs	r1, #9
 8008376:	f7ff ff7d 	bl	8008274 <std>
 800837a:	68e0      	ldr	r0, [r4, #12]
 800837c:	2202      	movs	r2, #2
 800837e:	2112      	movs	r1, #18
 8008380:	f7ff ff78 	bl	8008274 <std>
 8008384:	2301      	movs	r3, #1
 8008386:	61a3      	str	r3, [r4, #24]
 8008388:	e7d2      	b.n	8008330 <__sinit+0xc>
 800838a:	bf00      	nop
 800838c:	080087b0 	.word	0x080087b0
 8008390:	080082bd 	.word	0x080082bd

08008394 <__sfp>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	4607      	mov	r7, r0
 8008398:	f7ff ffac 	bl	80082f4 <__sfp_lock_acquire>
 800839c:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <__sfp+0x84>)
 800839e:	681e      	ldr	r6, [r3, #0]
 80083a0:	69b3      	ldr	r3, [r6, #24]
 80083a2:	b913      	cbnz	r3, 80083aa <__sfp+0x16>
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff ffbd 	bl	8008324 <__sinit>
 80083aa:	3648      	adds	r6, #72	; 0x48
 80083ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	d503      	bpl.n	80083bc <__sfp+0x28>
 80083b4:	6833      	ldr	r3, [r6, #0]
 80083b6:	b30b      	cbz	r3, 80083fc <__sfp+0x68>
 80083b8:	6836      	ldr	r6, [r6, #0]
 80083ba:	e7f7      	b.n	80083ac <__sfp+0x18>
 80083bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083c0:	b9d5      	cbnz	r5, 80083f8 <__sfp+0x64>
 80083c2:	4b16      	ldr	r3, [pc, #88]	; (800841c <__sfp+0x88>)
 80083c4:	60e3      	str	r3, [r4, #12]
 80083c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083ca:	6665      	str	r5, [r4, #100]	; 0x64
 80083cc:	f000 f847 	bl	800845e <__retarget_lock_init_recursive>
 80083d0:	f7ff ff96 	bl	8008300 <__sfp_lock_release>
 80083d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083dc:	6025      	str	r5, [r4, #0]
 80083de:	61a5      	str	r5, [r4, #24]
 80083e0:	2208      	movs	r2, #8
 80083e2:	4629      	mov	r1, r5
 80083e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083e8:	f7fd faae 	bl	8005948 <memset>
 80083ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083f4:	4620      	mov	r0, r4
 80083f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f8:	3468      	adds	r4, #104	; 0x68
 80083fa:	e7d9      	b.n	80083b0 <__sfp+0x1c>
 80083fc:	2104      	movs	r1, #4
 80083fe:	4638      	mov	r0, r7
 8008400:	f7ff ff62 	bl	80082c8 <__sfmoreglue>
 8008404:	4604      	mov	r4, r0
 8008406:	6030      	str	r0, [r6, #0]
 8008408:	2800      	cmp	r0, #0
 800840a:	d1d5      	bne.n	80083b8 <__sfp+0x24>
 800840c:	f7ff ff78 	bl	8008300 <__sfp_lock_release>
 8008410:	230c      	movs	r3, #12
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	e7ee      	b.n	80083f4 <__sfp+0x60>
 8008416:	bf00      	nop
 8008418:	080087b0 	.word	0x080087b0
 800841c:	ffff0001 	.word	0xffff0001

08008420 <_fwalk_reent>:
 8008420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008424:	4606      	mov	r6, r0
 8008426:	4688      	mov	r8, r1
 8008428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800842c:	2700      	movs	r7, #0
 800842e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008432:	f1b9 0901 	subs.w	r9, r9, #1
 8008436:	d505      	bpl.n	8008444 <_fwalk_reent+0x24>
 8008438:	6824      	ldr	r4, [r4, #0]
 800843a:	2c00      	cmp	r4, #0
 800843c:	d1f7      	bne.n	800842e <_fwalk_reent+0xe>
 800843e:	4638      	mov	r0, r7
 8008440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008444:	89ab      	ldrh	r3, [r5, #12]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d907      	bls.n	800845a <_fwalk_reent+0x3a>
 800844a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800844e:	3301      	adds	r3, #1
 8008450:	d003      	beq.n	800845a <_fwalk_reent+0x3a>
 8008452:	4629      	mov	r1, r5
 8008454:	4630      	mov	r0, r6
 8008456:	47c0      	blx	r8
 8008458:	4307      	orrs	r7, r0
 800845a:	3568      	adds	r5, #104	; 0x68
 800845c:	e7e9      	b.n	8008432 <_fwalk_reent+0x12>

0800845e <__retarget_lock_init_recursive>:
 800845e:	4770      	bx	lr

08008460 <__retarget_lock_acquire_recursive>:
 8008460:	4770      	bx	lr

08008462 <__retarget_lock_release_recursive>:
 8008462:	4770      	bx	lr

08008464 <__swhatbuf_r>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	460e      	mov	r6, r1
 8008468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846c:	2900      	cmp	r1, #0
 800846e:	b096      	sub	sp, #88	; 0x58
 8008470:	4614      	mov	r4, r2
 8008472:	461d      	mov	r5, r3
 8008474:	da08      	bge.n	8008488 <__swhatbuf_r+0x24>
 8008476:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	061a      	lsls	r2, r3, #24
 8008480:	d410      	bmi.n	80084a4 <__swhatbuf_r+0x40>
 8008482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008486:	e00e      	b.n	80084a6 <__swhatbuf_r+0x42>
 8008488:	466a      	mov	r2, sp
 800848a:	f000 f903 	bl	8008694 <_fstat_r>
 800848e:	2800      	cmp	r0, #0
 8008490:	dbf1      	blt.n	8008476 <__swhatbuf_r+0x12>
 8008492:	9a01      	ldr	r2, [sp, #4]
 8008494:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008498:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800849c:	425a      	negs	r2, r3
 800849e:	415a      	adcs	r2, r3
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	e7ee      	b.n	8008482 <__swhatbuf_r+0x1e>
 80084a4:	2340      	movs	r3, #64	; 0x40
 80084a6:	2000      	movs	r0, #0
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	b016      	add	sp, #88	; 0x58
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080084b0 <__smakebuf_r>:
 80084b0:	898b      	ldrh	r3, [r1, #12]
 80084b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084b4:	079d      	lsls	r5, r3, #30
 80084b6:	4606      	mov	r6, r0
 80084b8:	460c      	mov	r4, r1
 80084ba:	d507      	bpl.n	80084cc <__smakebuf_r+0x1c>
 80084bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	2301      	movs	r3, #1
 80084c6:	6163      	str	r3, [r4, #20]
 80084c8:	b002      	add	sp, #8
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	ab01      	add	r3, sp, #4
 80084ce:	466a      	mov	r2, sp
 80084d0:	f7ff ffc8 	bl	8008464 <__swhatbuf_r>
 80084d4:	9900      	ldr	r1, [sp, #0]
 80084d6:	4605      	mov	r5, r0
 80084d8:	4630      	mov	r0, r6
 80084da:	f7ff f963 	bl	80077a4 <_malloc_r>
 80084de:	b948      	cbnz	r0, 80084f4 <__smakebuf_r+0x44>
 80084e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e4:	059a      	lsls	r2, r3, #22
 80084e6:	d4ef      	bmi.n	80084c8 <__smakebuf_r+0x18>
 80084e8:	f023 0303 	bic.w	r3, r3, #3
 80084ec:	f043 0302 	orr.w	r3, r3, #2
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	e7e3      	b.n	80084bc <__smakebuf_r+0xc>
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <__smakebuf_r+0x7c>)
 80084f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	6020      	str	r0, [r4, #0]
 80084fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	9b00      	ldr	r3, [sp, #0]
 8008504:	6163      	str	r3, [r4, #20]
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	6120      	str	r0, [r4, #16]
 800850a:	b15b      	cbz	r3, 8008524 <__smakebuf_r+0x74>
 800850c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008510:	4630      	mov	r0, r6
 8008512:	f000 f8d1 	bl	80086b8 <_isatty_r>
 8008516:	b128      	cbz	r0, 8008524 <__smakebuf_r+0x74>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	89a0      	ldrh	r0, [r4, #12]
 8008526:	4305      	orrs	r5, r0
 8008528:	81a5      	strh	r5, [r4, #12]
 800852a:	e7cd      	b.n	80084c8 <__smakebuf_r+0x18>
 800852c:	080082bd 	.word	0x080082bd

08008530 <_malloc_usable_size_r>:
 8008530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008534:	1f18      	subs	r0, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfbc      	itt	lt
 800853a:	580b      	ldrlt	r3, [r1, r0]
 800853c:	18c0      	addlt	r0, r0, r3
 800853e:	4770      	bx	lr

08008540 <_raise_r>:
 8008540:	291f      	cmp	r1, #31
 8008542:	b538      	push	{r3, r4, r5, lr}
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	d904      	bls.n	8008554 <_raise_r+0x14>
 800854a:	2316      	movs	r3, #22
 800854c:	6003      	str	r3, [r0, #0]
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008556:	b112      	cbz	r2, 800855e <_raise_r+0x1e>
 8008558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800855c:	b94b      	cbnz	r3, 8008572 <_raise_r+0x32>
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f830 	bl	80085c4 <_getpid_r>
 8008564:	462a      	mov	r2, r5
 8008566:	4601      	mov	r1, r0
 8008568:	4620      	mov	r0, r4
 800856a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800856e:	f000 b817 	b.w	80085a0 <_kill_r>
 8008572:	2b01      	cmp	r3, #1
 8008574:	d00a      	beq.n	800858c <_raise_r+0x4c>
 8008576:	1c59      	adds	r1, r3, #1
 8008578:	d103      	bne.n	8008582 <_raise_r+0x42>
 800857a:	2316      	movs	r3, #22
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	2001      	movs	r0, #1
 8008580:	e7e7      	b.n	8008552 <_raise_r+0x12>
 8008582:	2400      	movs	r4, #0
 8008584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008588:	4628      	mov	r0, r5
 800858a:	4798      	blx	r3
 800858c:	2000      	movs	r0, #0
 800858e:	e7e0      	b.n	8008552 <_raise_r+0x12>

08008590 <raise>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <raise+0xc>)
 8008592:	4601      	mov	r1, r0
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f7ff bfd3 	b.w	8008540 <_raise_r>
 800859a:	bf00      	nop
 800859c:	20000024 	.word	0x20000024

080085a0 <_kill_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	; (80085c0 <_kill_r+0x20>)
 80085a4:	2300      	movs	r3, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	4611      	mov	r1, r2
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	f7f9 f87b 	bl	80016a8 <_kill>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d102      	bne.n	80085bc <_kill_r+0x1c>
 80085b6:	682b      	ldr	r3, [r5, #0]
 80085b8:	b103      	cbz	r3, 80085bc <_kill_r+0x1c>
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	bd38      	pop	{r3, r4, r5, pc}
 80085be:	bf00      	nop
 80085c0:	2000042c 	.word	0x2000042c

080085c4 <_getpid_r>:
 80085c4:	f7f9 b868 	b.w	8001698 <_getpid>

080085c8 <__sread>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	460c      	mov	r4, r1
 80085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d0:	f000 f894 	bl	80086fc <_read_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	bfab      	itete	ge
 80085d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085da:	89a3      	ldrhlt	r3, [r4, #12]
 80085dc:	181b      	addge	r3, r3, r0
 80085de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085e2:	bfac      	ite	ge
 80085e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085e6:	81a3      	strhlt	r3, [r4, #12]
 80085e8:	bd10      	pop	{r4, pc}

080085ea <__swrite>:
 80085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	461f      	mov	r7, r3
 80085f0:	898b      	ldrh	r3, [r1, #12]
 80085f2:	05db      	lsls	r3, r3, #23
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	4616      	mov	r6, r2
 80085fa:	d505      	bpl.n	8008608 <__swrite+0x1e>
 80085fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008600:	2302      	movs	r3, #2
 8008602:	2200      	movs	r2, #0
 8008604:	f000 f868 	bl	80086d8 <_lseek_r>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800860e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	4628      	mov	r0, r5
 800861a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800861e:	f000 b817 	b.w	8008650 <_write_r>

08008622 <__sseek>:
 8008622:	b510      	push	{r4, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862a:	f000 f855 	bl	80086d8 <_lseek_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	bf15      	itete	ne
 8008634:	6560      	strne	r0, [r4, #84]	; 0x54
 8008636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800863a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800863e:	81a3      	strheq	r3, [r4, #12]
 8008640:	bf18      	it	ne
 8008642:	81a3      	strhne	r3, [r4, #12]
 8008644:	bd10      	pop	{r4, pc}

08008646 <__sclose>:
 8008646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864a:	f000 b813 	b.w	8008674 <_close_r>
	...

08008650 <_write_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_write_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7f9 f859 	bl	8001716 <_write>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_write_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_write_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	2000042c 	.word	0x2000042c

08008674 <_close_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d06      	ldr	r5, [pc, #24]	; (8008690 <_close_r+0x1c>)
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	f7f9 f865 	bl	800174e <_close>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_close_r+0x1a>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_close_r+0x1a>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	2000042c 	.word	0x2000042c

08008694 <_fstat_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	; (80086b4 <_fstat_r+0x20>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	4611      	mov	r1, r2
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f7f9 f860 	bl	8001766 <_fstat>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d102      	bne.n	80086b0 <_fstat_r+0x1c>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b103      	cbz	r3, 80086b0 <_fstat_r+0x1c>
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	bf00      	nop
 80086b4:	2000042c 	.word	0x2000042c

080086b8 <_isatty_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	; (80086d4 <_isatty_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7f9 f85f 	bl	8001786 <_isatty>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_isatty_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_isatty_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	2000042c 	.word	0x2000042c

080086d8 <_lseek_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	; (80086f8 <_lseek_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f7f9 f858 	bl	800179c <_lseek>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_lseek_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_lseek_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	2000042c 	.word	0x2000042c

080086fc <_read_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_read_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7f8 ffe6 	bl	80016dc <_read>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_read_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_read_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	2000042c 	.word	0x2000042c

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
