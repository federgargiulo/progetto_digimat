
Tesi_di_Alessandra_v1.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800bdb8  0800bdb8  0001bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1c4  0800c1c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1c4  0800c1c4  0001c1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1cc  0800c1cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1d0  0800c1d0  0001c1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000647c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000665c  2000665c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdf1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000380f  00000000  00000000  00040001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  00043810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a60  00000000  00000000  000453c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e192  00000000  00000000  00046e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ead8  00000000  00000000  00074fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114a8c  00000000  00000000  00093a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8516  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008884  00000000  00000000  001a8568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bda0 	.word	0x0800bda0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800bda0 	.word	0x0800bda0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <Custom_IIS3DWB_ReadReg_Func>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t Custom_IIS3DWB_ReadReg_Func(uint16_t indirizzo, uint16_t DevAddress, uint8_t *pData, uint16_t Size){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60ba      	str	r2, [r7, #8]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	81fb      	strh	r3, [r7, #14]
 8000eea:	460b      	mov	r3, r1
 8000eec:	81bb      	strh	r3, [r7, #12]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]


	HAL_StatusTypeDef ret;
	uint8_t devaddress_8bit= DevAddress&0x00FF;
 8000ef2:	89bb      	ldrh	r3, [r7, #12]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2104      	movs	r1, #4
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <Custom_IIS3DWB_ReadReg_Func+0x68>)
 8000efe:	f003 fb09 	bl	8004514 <HAL_GPIO_WritePin>
	devaddress_8bit|=0x80;
 8000f02:	7dbb      	ldrb	r3, [r7, #22]
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	75bb      	strb	r3, [r7, #22]
	ret=HAL_SPI_Transmit(&hspi1, &devaddress_8bit, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 8000f0c:	f107 0116 	add.w	r1, r7, #22
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <Custom_IIS3DWB_ReadReg_Func+0x6c>)
 8000f16:	f005 fb65 	bl	80065e4 <HAL_SPI_Transmit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	75fb      	strb	r3, [r7, #23]
	ret=HAL_SPI_Receive(&hspi1, pData, Size, 1000);			//Ricevo Registro
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <Custom_IIS3DWB_ReadReg_Func+0x6c>)
 8000f28:	f005 fc98 	bl	800685c <HAL_SPI_Receive>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8000f30:	2201      	movs	r2, #1
 8000f32:	2104      	movs	r1, #4
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <Custom_IIS3DWB_ReadReg_Func+0x68>)
 8000f36:	f003 faed 	bl	8004514 <HAL_GPIO_WritePin>
	return ret;
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021800 	.word	0x40021800
 8000f48:	200065ec 	.word	0x200065ec

08000f4c <Custom_IIS3DWB_WriteReg_Func>:


int32_t Custom_IIS3DWB_WriteReg_Func (uint16_t indirizzo, uint16_t DevAddress, uint8_t *pData, uint16_t Size){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60ba      	str	r2, [r7, #8]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	81fb      	strh	r3, [r7, #14]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	81bb      	strh	r3, [r7, #12]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef ret;
	uint8_t devaddress_8bit= DevAddress&0x00FF;
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <Custom_IIS3DWB_WriteReg_Func+0x58>)
 8000f6e:	f003 fad1 	bl	8004514 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &devaddress_8bit, 1, 100);
 8000f72:	f107 0116 	add.w	r1, r7, #22
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	2201      	movs	r2, #1
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <Custom_IIS3DWB_WriteReg_Func+0x5c>)
 8000f7c:	f005 fb32 	bl	80065e4 <HAL_SPI_Transmit>
	ret=HAL_SPI_Transmit(&hspi1, pData, Size, 100);
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <Custom_IIS3DWB_WriteReg_Func+0x5c>)
 8000f88:	f005 fb2c 	bl	80065e4 <HAL_SPI_Transmit>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2104      	movs	r1, #4
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <Custom_IIS3DWB_WriteReg_Func+0x58>)
 8000f96:	f003 fabd 	bl	8004514 <HAL_GPIO_WritePin>
	return ret;
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	200065ec 	.word	0x200065ec

08000fac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb2:	f002 f827 	bl	8003004 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fb6:	f000 f8c7 	bl	8001148 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fba:	f000 fc27 	bl	800180c <MX_GPIO_Init>
	MX_DMA_Init();
 8000fbe:	f000 fbc7 	bl	8001750 <MX_DMA_Init>
	MX_ADC3_Init();
 8000fc2:	f000 f935 	bl	8001230 <MX_ADC3_Init>
	MX_I2C1_Init();
 8000fc6:	f000 f985 	bl	80012d4 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000fca:	f000 f9b1 	bl	8001330 <MX_I2C2_Init>
	MX_I2S2_Init();
 8000fce:	f000 f9dd 	bl	800138c <MX_I2S2_Init>
	MX_RTC_Init();
 8000fd2:	f000 fa09 	bl	80013e8 <MX_RTC_Init>
	MX_SPI4_Init();
 8000fd6:	f000 fa61 	bl	800149c <MX_SPI4_Init>
	MX_TIM3_Init();
 8000fda:	f000 fa95 	bl	8001508 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000fde:	f000 fb15 	bl	800160c <MX_TIM4_Init>
	MX_UART5_Init();
 8000fe2:	f000 fb61 	bl	80016a8 <MX_UART5_Init>
	MX_USART2_UART_Init();
 8000fe6:	f000 fb89 	bl	80016fc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	contatore_campioni=0;
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <main+0x158>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

	bus_vibrometro.Init=BSP_SPI1_Init;
 8000ff0:	4b45      	ldr	r3, [pc, #276]	; (8001108 <main+0x15c>)
 8000ff2:	4a46      	ldr	r2, [pc, #280]	; (800110c <main+0x160>)
 8000ff4:	601a      	str	r2, [r3, #0]
	bus_vibrometro.DeInit=BSP_SPI1_DeInit;
 8000ff6:	4b44      	ldr	r3, [pc, #272]	; (8001108 <main+0x15c>)
 8000ff8:	4a45      	ldr	r2, [pc, #276]	; (8001110 <main+0x164>)
 8000ffa:	605a      	str	r2, [r3, #4]
	bus_vibrometro.BusType=1;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <main+0x15c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	609a      	str	r2, [r3, #8]
	bus_vibrometro.ReadReg=Custom_IIS3DWB_ReadReg_Func;
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <main+0x15c>)
 8001004:	4a43      	ldr	r2, [pc, #268]	; (8001114 <main+0x168>)
 8001006:	615a      	str	r2, [r3, #20]
	//	bus_vibrometro.ReadReg=IIS3DWB_Read_Reg;
	bus_vibrometro.WriteReg=Custom_IIS3DWB_WriteReg_Func;
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <main+0x15c>)
 800100a:	4a43      	ldr	r2, [pc, #268]	; (8001118 <main+0x16c>)
 800100c:	611a      	str	r2, [r3, #16]
	//	bus_vibrometro.WriteReg=IIS3DWB_Write_Reg;
	//	bus_vibrometro.ReadReg=BSP_I2C1_ReadReg;
	//	bus_vibrometro.WriteReg=BSP_I2C1_WriteReg;
	//	bus_vibrometro.Address=LSM303AGR_I2C_ADD_XL;
	IIS3DWB_RegisterBusIO(&vibration_sensor, &bus_vibrometro);
 800100e:	493e      	ldr	r1, [pc, #248]	; (8001108 <main+0x15c>)
 8001010:	4842      	ldr	r0, [pc, #264]	; (800111c <main+0x170>)
 8001012:	f001 fb51 	bl	80026b8 <IIS3DWB_RegisterBusIO>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2104      	movs	r1, #4
 800101a:	4841      	ldr	r0, [pc, #260]	; (8001120 <main+0x174>)
 800101c:	f003 fa7a 	bl	8004514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 8001020:	2200      	movs	r2, #0
 8001022:	2104      	movs	r1, #4
 8001024:	483e      	ldr	r0, [pc, #248]	; (8001120 <main+0x174>)
 8001026:	f003 fa75 	bl	8004514 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, registro_whoami, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	2201      	movs	r2, #1
 800102e:	493d      	ldr	r1, [pc, #244]	; (8001124 <main+0x178>)
 8001030:	483d      	ldr	r0, [pc, #244]	; (8001128 <main+0x17c>)
 8001032:	f005 fad7 	bl	80065e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, whoami, 1, 100);			//Ricevo Registro
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	2201      	movs	r2, #1
 800103a:	493c      	ldr	r1, [pc, #240]	; (800112c <main+0x180>)
 800103c:	483a      	ldr	r0, [pc, #232]	; (8001128 <main+0x17c>)
 800103e:	f005 fc0d 	bl	800685c <HAL_SPI_Receive>
	//	HAL_SPI_TransmitReceive(&hspi1, registro_whoami, whoami, 2, 100);
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001042:	2201      	movs	r2, #1
 8001044:	2104      	movs	r1, #4
 8001046:	4836      	ldr	r0, [pc, #216]	; (8001120 <main+0x174>)
 8001048:	f003 fa64 	bl	8004514 <HAL_GPIO_WritePin>



	if(IIS3DWB_Init(&vibration_sensor) ==HAL_OK){
 800104c:	4833      	ldr	r0, [pc, #204]	; (800111c <main+0x170>)
 800104e:	f001 fb7d 	bl	800274c <IIS3DWB_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10b      	bne.n	8001070 <main+0xc4>
		IIS3DWB_ACC_SetOutputDataRate(&vibration_sensor, 6000);
 8001058:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001130 <main+0x184>
 800105c:	482f      	ldr	r0, [pc, #188]	; (800111c <main+0x170>)
 800105e:	f001 fc55 	bl	800290c <IIS3DWB_ACC_SetOutputDataRate>
		IIS3DWB_ACC_SetFullScale(&vibration_sensor, IIS3DWB_16g);
 8001062:	2101      	movs	r1, #1
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <main+0x170>)
 8001066:	f001 fc76 	bl	8002956 <IIS3DWB_ACC_SetFullScale>
		IIS3DWB_ACC_Enable(&vibration_sensor);
 800106a:	482c      	ldr	r0, [pc, #176]	; (800111c <main+0x170>)
 800106c:	f001 fbcd 	bl	800280a <IIS3DWB_ACC_Enable>

	}

	HAL_TIM_Base_Start_IT(&htim4);
 8001070:	4830      	ldr	r0, [pc, #192]	; (8001134 <main+0x188>)
 8001072:	f006 f835 	bl	80070e0 <HAL_TIM_Base_Start_IT>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if(contatore_campioni>DIM){
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <main+0x158>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800107e:	ddfa      	ble.n	8001076 <main+0xca>

			HAL_TIM_Base_Stop_IT(&htim4);
 8001080:	482c      	ldr	r0, [pc, #176]	; (8001134 <main+0x188>)
 8001082:	f006 f89d 	bl	80071c0 <HAL_TIM_Base_Stop_IT>

			for(int i=0; i<DIM; i++){
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	e029      	b.n	80010e0 <main+0x134>
				sprintf((char *)buffer, "%ld,%ld,%ld\r\n",misure[i].x, misure[i].y, misure[i].z);
 800108c:	492a      	ldr	r1, [pc, #168]	; (8001138 <main+0x18c>)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	4826      	ldr	r0, [pc, #152]	; (8001138 <main+0x18c>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4403      	add	r3, r0
 80010aa:	3304      	adds	r3, #4
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	4c22      	ldr	r4, [pc, #136]	; (8001138 <main+0x18c>)
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4423      	add	r3, r4
 80010bc:	3308      	adds	r3, #8
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	491d      	ldr	r1, [pc, #116]	; (800113c <main+0x190>)
 80010c8:	481d      	ldr	r0, [pc, #116]	; (8001140 <main+0x194>)
 80010ca:	f008 fbef 	bl	80098ac <siprintf>
				HAL_UART_Transmit(&huart5, &buffer, sizeof(buffer), 100);
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2264      	movs	r2, #100	; 0x64
 80010d2:	491b      	ldr	r1, [pc, #108]	; (8001140 <main+0x194>)
 80010d4:	481b      	ldr	r0, [pc, #108]	; (8001144 <main+0x198>)
 80010d6:	f006 ff86 	bl	8007fe6 <HAL_UART_Transmit>
			for(int i=0; i<DIM; i++){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3301      	adds	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010e6:	dbd1      	blt.n	800108c <main+0xe0>


			}

			if(IIS3DWB_ACC_Disable(&vibration_sensor) ==HAL_OK){
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <main+0x170>)
 80010ea:	f001 fba4 	bl	8002836 <IIS3DWB_ACC_Disable>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1c0      	bne.n	8001076 <main+0xca>
				IIS3DWB_DeInit(&vibration_sensor);
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <main+0x170>)
 80010f6:	f001 fb72 	bl	80027de <IIS3DWB_DeInit>

				contatore_campioni=0;
 80010fa:	4b02      	ldr	r3, [pc, #8]	; (8001104 <main+0x158>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
		if(contatore_campioni>DIM){
 8001100:	e7b9      	b.n	8001076 <main+0xca>
 8001102:	bf00      	nop
 8001104:	2000657c 	.word	0x2000657c
 8001108:	2000655c 	.word	0x2000655c
 800110c:	08002df1 	.word	0x08002df1
 8001110:	08002e51 	.word	0x08002e51
 8001114:	08000edd 	.word	0x08000edd
 8001118:	08000f4d 	.word	0x08000f4d
 800111c:	20000764 	.word	0x20000764
 8001120:	40021800 	.word	0x40021800
 8001124:	20000000 	.word	0x20000000
 8001128:	200065ec 	.word	0x200065ec
 800112c:	200065e4 	.word	0x200065e4
 8001130:	45bb8000 	.word	0x45bb8000
 8001134:	20000514 	.word	0x20000514
 8001138:	2000079c 	.word	0x2000079c
 800113c:	0800bdb8 	.word	0x0800bdb8
 8001140:	20006580 	.word	0x20006580
 8001144:	2000055c 	.word	0x2000055c

08001148 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2234      	movs	r2, #52	; 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f007 ff36 	bl	8008fc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <SystemClock_Config+0xe0>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <SystemClock_Config+0xe0>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <SystemClock_Config+0xe0>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <SystemClock_Config+0xe4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <SystemClock_Config+0xe4>)
 8001192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <SystemClock_Config+0xe4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80011a4:	2305      	movs	r3, #5
 80011a6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 12;
 80011bc:	230c      	movs	r3, #12
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80011c0:	23b4      	movs	r3, #180	; 0xb4
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c8:	2304      	movs	r3, #4
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fc9b 	bl	8005b10 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80011e0:	f000 fc36 	bl	8001a50 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011e4:	f003 ffc8 	bl	8005178 <HAL_PWREx_EnableOverDrive>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 80011ee:	f000 fc2f 	bl	8001a50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	230f      	movs	r3, #15
 80011f4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f6:	2302      	movs	r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001202:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2105      	movs	r1, #5
 8001210:	4618      	mov	r0, r3
 8001212:	f004 f801 	bl	8005218 <HAL_RCC_ClockConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0xd8>
	{
		Error_Handler();
 800121c:	f000 fc18 	bl	8001a50 <Error_Handler>
	}
}
 8001220:	bf00      	nop
 8001222:	3750      	adds	r7, #80	; 0x50
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <MX_ADC3_Init+0x9c>)
 8001246:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_ADC3_Init+0x98>)
 800124a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800124e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_ADC3_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_ADC3_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <MX_ADC3_Init+0xa0>)
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_ADC3_Init+0x98>)
 800127e:	2201      	movs	r2, #1
 8001280:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_ADC3_Init+0x98>)
 800128c:	2201      	movs	r2, #1
 800128e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_ADC3_Init+0x98>)
 8001292:	f001 ff29 	bl	80030e8 <HAL_ADC_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800129c:	f000 fbd8 	bl	8001a50 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 80012a0:	230e      	movs	r3, #14
 80012a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_ADC3_Init+0x98>)
 80012b2:	f001 ff5d 	bl	8003170 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80012bc:	f000 fbc8 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001fc 	.word	0x200001fc
 80012cc:	40012200 	.word	0x40012200
 80012d0:	0f000001 	.word	0x0f000001

080012d4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_I2C1_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_I2C1_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0x1F;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_I2C1_Init+0x50>)
 80012ec:	221f      	movs	r2, #31
 80012ee:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_I2C1_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_I2C1_Init+0x50>)
 8001312:	f003 f93d 	bl	8004590 <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800131c:	f000 fb98 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000244 	.word	0x20000244
 8001328:	40005400 	.word	0x40005400
 800132c:	00061a80 	.word	0x00061a80

08001330 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_I2C2_Init+0x50>)
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <MX_I2C2_Init+0x54>)
 8001338:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_I2C2_Init+0x50>)
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <MX_I2C2_Init+0x58>)
 800133e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_I2C2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0x1E;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_I2C2_Init+0x50>)
 8001348:	221e      	movs	r2, #30
 800134a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_I2C2_Init+0x50>)
 800134e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001352:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_I2C2_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_I2C2_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_I2C2_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_I2C2_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_I2C2_Init+0x50>)
 800136e:	f003 f90f 	bl	8004590 <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001378:	f000 fb6a 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000298 	.word	0x20000298
 8001384:	40005800 	.word	0x40005800
 8001388:	00061a80 	.word	0x00061a80

0800138c <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_I2S2_Init+0x54>)
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <MX_I2S2_Init+0x58>)
 8001394:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_I2S2_Init+0x54>)
 8001398:	f44f 7240 	mov.w	r2, #768	; 0x300
 800139c:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013a0:	2210      	movs	r2, #16
 80013a2:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013b2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80013b6:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_I2S2_Init+0x54>)
 80013cc:	f003 fa24 	bl	8004818 <HAL_I2S_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 80013d6:	f000 fb3b 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002ec 	.word	0x200002ec
 80013e4:	40003800 	.word	0x40003800

080013e8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <MX_RTC_Init+0xac>)
 8001402:	4a25      	ldr	r2, [pc, #148]	; (8001498 <MX_RTC_Init+0xb0>)
 8001404:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_RTC_Init+0xac>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_RTC_Init+0xac>)
 800140e:	227f      	movs	r2, #127	; 0x7f
 8001410:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_RTC_Init+0xac>)
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_RTC_Init+0xac>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_RTC_Init+0xac>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_RTC_Init+0xac>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800142a:	481a      	ldr	r0, [pc, #104]	; (8001494 <MX_RTC_Init+0xac>)
 800142c:	f004 fdf4 	bl	8006018 <HAL_RTC_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_RTC_Init+0x52>
	{
		Error_Handler();
 8001436:	f000 fb0b 	bl	8001a50 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800143a:	2300      	movs	r3, #0
 800143c:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800143e:	2300      	movs	r3, #0
 8001440:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001442:	2300      	movs	r3, #0
 8001444:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	480f      	ldr	r0, [pc, #60]	; (8001494 <MX_RTC_Init+0xac>)
 8001456:	f004 fe55 	bl	8006104 <HAL_RTC_SetTime>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 8001460:	f000 faf6 	bl	8001a50 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001464:	2301      	movs	r3, #1
 8001466:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001468:	2301      	movs	r3, #1
 800146a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 800146c:	2301      	movs	r3, #1
 800146e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001470:	2300      	movs	r3, #0
 8001472:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	2201      	movs	r2, #1
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_RTC_Init+0xac>)
 800147c:	f004 fedc 	bl	8006238 <HAL_RTC_SetDate>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 8001486:	f000 fae3 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000394 	.word	0x20000394
 8001498:	40002800 	.word	0x40002800

0800149c <MX_SPI4_Init>:
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_SPI4_Init+0x64>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <MX_SPI4_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SPI4_Init+0x64>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_SPI4_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SPI4_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_SPI4_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPI4_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SPI4_Init+0x64>)
 80014c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014cc:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPI4_Init+0x64>)
 80014d0:	2218      	movs	r2, #24
 80014d2:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_SPI4_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPI4_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_SPI4_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 10;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPI4_Init+0x64>)
 80014e8:	220a      	movs	r2, #10
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_SPI4_Init+0x64>)
 80014ee:	f004 ffc8 	bl	8006482 <HAL_SPI_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPI4_Init+0x60>
	{
		Error_Handler();
 80014f8:	f000 faaa 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200003b4 	.word	0x200003b4
 8001504:	40013400 	.word	0x40013400

08001508 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <MX_TIM3_Init+0xfc>)
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <MX_TIM3_Init+0x100>)
 800153c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <MX_TIM3_Init+0xfc>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <MX_TIM3_Init+0xfc>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <MX_TIM3_Init+0xfc>)
 800154c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001550:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <MX_TIM3_Init+0xfc>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <MX_TIM3_Init+0xfc>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800155e:	4829      	ldr	r0, [pc, #164]	; (8001604 <MX_TIM3_Init+0xfc>)
 8001560:	f005 fd6e 	bl	8007040 <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 800156a:	f000 fa71 	bl	8001a50 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001578:	4619      	mov	r1, r3
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_TIM3_Init+0xfc>)
 800157c:	f006 f872 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 8001586:	f000 fa63 	bl	8001a50 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <MX_TIM3_Init+0xfc>)
 800158c:	f005 fe47 	bl	800721e <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 8001596:	f000 fa5b 	bl	8001a50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	4619      	mov	r1, r3
 80015a8:	4816      	ldr	r0, [pc, #88]	; (8001604 <MX_TIM3_Init+0xfc>)
 80015aa:	f006 fc3f 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 80015b4:	f000 fa4c 	bl	8001a50 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2208      	movs	r2, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_TIM3_Init+0xfc>)
 80015d0:	f005 ff86 	bl	80074e0 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 80015da:	f000 fa39 	bl	8001a50 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	220c      	movs	r2, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <MX_TIM3_Init+0xfc>)
 80015e6:	f005 ff7b 	bl	80074e0 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 80015f0:	f000 fa2e 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <MX_TIM3_Init+0xfc>)
 80015f6:	f000 fcfb 	bl	8001ff0 <HAL_TIM_MspPostInit>

}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	; 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200004cc 	.word	0x200004cc
 8001608:	40000400 	.word	0x40000400

0800160c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM4_Init+0x94>)
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <MX_TIM4_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 90-1;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001630:	2259      	movs	r2, #89	; 0x59
 8001632:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 500-1;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM4_Init+0x94>)
 800163c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001640:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM4_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001650:	f005 fcf6 	bl	8007040 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 800165a:	f000 f9f9 	bl	8001a50 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM4_Init+0x94>)
 800166c:	f005 fffa 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 8001676:	f000 f9eb 	bl	8001a50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001688:	f006 fbd0 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 8001692:	f000 f9dd 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000514 	.word	0x20000514
 80016a4:	40000800 	.word	0x40000800

080016a8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_UART5_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 230400;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016b4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80016b8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_UART5_Init+0x4c>)
 80016e0:	f006 fc34 	bl	8007f4c <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_UART5_Init+0x46>
	{
		Error_Handler();
 80016ea:	f000 f9b1 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000055c 	.word	0x2000055c
 80016f8:	40005000 	.word	0x40005000

080016fc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_USART2_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001708:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800170c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART2_UART_Init+0x4c>)
 8001734:	f006 fc0a 	bl	8007f4c <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800173e:	f000 f987 	bl	8001a50 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200005a0 	.word	0x200005a0
 800174c:	40004400 	.word	0x40004400

08001750 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_DMA_Init+0xb8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <MX_DMA_Init+0xb8>)
 8001760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_DMA_Init+0xb8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_DMA_Init+0xb8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a23      	ldr	r2, [pc, #140]	; (8001808 <MX_DMA_Init+0xb8>)
 800177c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_DMA_Init+0xb8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2102      	movs	r1, #2
 8001792:	200b      	movs	r0, #11
 8001794:	f001 fff5 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001798:	200b      	movs	r0, #11
 800179a:	f002 f80e 	bl	80037ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2106      	movs	r1, #6
 80017a2:	200e      	movs	r0, #14
 80017a4:	f001 ffed 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017a8:	200e      	movs	r0, #14
 80017aa:	f002 f806 	bl	80037ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2102      	movs	r1, #2
 80017b2:	2010      	movs	r0, #16
 80017b4:	f001 ffe5 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017b8:	2010      	movs	r0, #16
 80017ba:	f001 fffe 	bl	80037ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 2, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2102      	movs	r1, #2
 80017c2:	2011      	movs	r0, #17
 80017c4:	f001 ffdd 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017c8:	2011      	movs	r0, #17
 80017ca:	f001 fff6 	bl	80037ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 2, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2102      	movs	r1, #2
 80017d2:	202f      	movs	r0, #47	; 0x2f
 80017d4:	f001 ffd5 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80017d8:	202f      	movs	r0, #47	; 0x2f
 80017da:	f001 ffee 	bl	80037ba <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2107      	movs	r1, #7
 80017e2:	2038      	movs	r0, #56	; 0x38
 80017e4:	f001 ffcd 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017e8:	2038      	movs	r0, #56	; 0x38
 80017ea:	f001 ffe6 	bl	80037ba <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 7, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2107      	movs	r1, #7
 80017f2:	2039      	movs	r0, #57	; 0x39
 80017f4:	f001 ffc5 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017f8:	2039      	movs	r0, #57	; 0x39
 80017fa:	f001 ffde 	bl	80037ba <HAL_NVIC_EnableIRQ>

}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08e      	sub	sp, #56	; 0x38
 8001810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
 8001826:	4b84      	ldr	r3, [pc, #528]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a83      	ldr	r2, [pc, #524]	; (8001a38 <MX_GPIO_Init+0x22c>)
 800182c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a7c      	ldr	r2, [pc, #496]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <MX_GPIO_Init+0x22c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <MX_GPIO_Init+0x22c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b6c      	ldr	r3, [pc, #432]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <MX_GPIO_Init+0x22c>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a59      	ldr	r2, [pc, #356]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <MX_GPIO_Init+0x22c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <MX_GPIO_Init+0x22c>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <MX_GPIO_Init+0x22c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, MEM_W_Pin|MEM_HOLD_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2160      	movs	r1, #96	; 0x60
 8001922:	4846      	ldr	r0, [pc, #280]	; (8001a3c <MX_GPIO_Init+0x230>)
 8001924:	f002 fdf6 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2120      	movs	r1, #32
 800192c:	4844      	ldr	r0, [pc, #272]	; (8001a40 <MX_GPIO_Init+0x234>)
 800192e:	f002 fdf1 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MEM_CS_GPIO_Port, MEM_CS_Pin, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	2110      	movs	r1, #16
 8001936:	4841      	ldr	r0, [pc, #260]	; (8001a3c <MX_GPIO_Init+0x230>)
 8001938:	f002 fdec 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2104      	movs	r1, #4
 8001940:	4840      	ldr	r0, [pc, #256]	; (8001a44 <MX_GPIO_Init+0x238>)
 8001942:	f002 fde7 	bl	8004514 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PRESS_DRDY_Pin HUM_TEMP_DRDY_Pin */
	GPIO_InitStruct.Pin = PRESS_DRDY_Pin|HUM_TEMP_DRDY_Pin;
 8001946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	483a      	ldr	r0, [pc, #232]	; (8001a44 <MX_GPIO_Init+0x238>)
 800195c:	f002 fb22 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : MEM_W_Pin MEM_HOLD_Pin */
	GPIO_InitStruct.Pin = MEM_W_Pin|MEM_HOLD_Pin;
 8001960:	2360      	movs	r3, #96	; 0x60
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196c:	2302      	movs	r3, #2
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	4831      	ldr	r0, [pc, #196]	; (8001a3c <MX_GPIO_Init+0x230>)
 8001978:	f002 fb14 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_LED_Pin */
	GPIO_InitStruct.Pin = USER_LED_Pin;
 800197c:	2320      	movs	r3, #32
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	482b      	ldr	r0, [pc, #172]	; (8001a40 <MX_GPIO_Init+0x234>)
 8001994:	f002 fb06 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEM_CS_Pin */
	GPIO_InitStruct.Pin = MEM_CS_Pin;
 8001998:	2310      	movs	r3, #16
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2302      	movs	r3, #2
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4823      	ldr	r0, [pc, #140]	; (8001a3c <MX_GPIO_Init+0x230>)
 80019b0:	f002 faf8 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ACC_INT2_Pin ACC_INT1_Pin */
	GPIO_InitStruct.Pin = ACC_INT2_Pin|ACC_INT1_Pin;
 80019b4:	2318      	movs	r3, #24
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	4619      	mov	r1, r3
 80019c8:	481e      	ldr	r0, [pc, #120]	; (8001a44 <MX_GPIO_Init+0x238>)
 80019ca:	f002 faeb 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACC_CS_Pin */
	GPIO_InitStruct.Pin = ACC_CS_Pin;
 80019ce:	2304      	movs	r3, #4
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	4817      	ldr	r0, [pc, #92]	; (8001a44 <MX_GPIO_Init+0x238>)
 80019e6:	f002 fadd 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMBALERT_Pin */
	GPIO_InitStruct.Pin = SMBALERT_Pin;
 80019ea:	2304      	movs	r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SMBALERT_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_GPIO_Init+0x23c>)
 80019fe:	f002 fad1 	bl	8003fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : IOLINK_OL_Pin IOLINK_EN_DIAG_Pin */
	GPIO_InitStruct.Pin = IOLINK_OL_Pin|IOLINK_EN_DIAG_Pin;
 8001a02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_GPIO_Init+0x240>)
 8001a1a:	f002 fac3 	bl	8003fa4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2106      	movs	r1, #6
 8001a22:	2017      	movs	r0, #23
 8001a24:	f001 fead 	bl	8003782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a28:	2017      	movs	r0, #23
 8001a2a:	f001 fec6 	bl	80037ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a2e:	bf00      	nop
 8001a30:	3738      	adds	r7, #56	; 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021000 	.word	0x40021000

08001a50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_ADC_MspInit+0x7c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d127      	bne.n	8001b1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_ADC_MspInit+0x80>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <HAL_ADC_MspInit+0x80>)
 8001ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_ADC_MspInit+0x80>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_ADC_MspInit+0x80>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_ADC_MspInit+0x80>)
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_ADC_MspInit+0x80>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    */
    GPIO_InitStruct.Pin = AUX_IO_Pin;
 8001b06:	2310      	movs	r3, #16
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUX_IO_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_ADC_MspInit+0x84>)
 8001b1a:	f002 fa43 	bl	8003fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40012200 	.word	0x40012200
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021400 	.word	0x40021400

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <HAL_I2C_MspInit+0xe8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12d      	bne.n	8001bb2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = ENV_SD_Pin|ENV_CK_Pin;
 8001b72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b84:	2304      	movs	r3, #4
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4825      	ldr	r0, [pc, #148]	; (8001c24 <HAL_I2C_MspInit+0xf0>)
 8001b90:	f002 fa08 	bl	8003fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bb0:	e030      	b.n	8001c14 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_I2C_MspInit+0xf4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d12b      	bne.n	8001c14 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SMBDATA_Pin|SMBCLK_Pin;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001be8:	2304      	movs	r3, #4
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <HAL_I2C_MspInit+0xf8>)
 8001bf4:	f002 f9d6 	bl	8003fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001c02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_I2C_MspInit+0xec>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40005800 	.word	0x40005800
 8001c2c:	40021400 	.word	0x40021400

08001c30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b098      	sub	sp, #96	; 0x60
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	223c      	movs	r2, #60	; 0x3c
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 f9b9 	bl	8008fc8 <memset>
  if(hi2s->Instance==SPI2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3a      	ldr	r2, [pc, #232]	; (8001d44 <HAL_I2S_MspInit+0x114>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d16c      	bne.n	8001d3a <HAL_I2S_MspInit+0x10a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c64:	23c0      	movs	r3, #192	; 0xc0
 8001c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fcb1 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001c7c:	f7ff fee8 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_I2S_MspInit+0x118>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_I2S_MspInit+0x118>)
 8001c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_I2S_MspInit+0x118>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_I2S_MspInit+0x118>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <HAL_I2S_MspInit+0x118>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_I2S_MspInit+0x118>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PI3     ------> I2S2_SD
    PI1     ------> I2S2_CK
    PI0     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = MIC_SD_Pin|MIC_CK_Pin|GPIO_PIN_0;
 8001cb8:	230b      	movs	r3, #11
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ccc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481e      	ldr	r0, [pc, #120]	; (8001d4c <HAL_I2S_MspInit+0x11c>)
 8001cd4:	f002 f966 	bl	8003fa4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_I2S_MspInit+0x124>)
 8001cdc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d16:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d1e:	480c      	ldr	r0, [pc, #48]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d20:	f001 fd66 	bl	80037f0 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2S_MspInit+0xfe>
    {
      Error_Handler();
 8001d2a:	f7ff fe91 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_I2S_MspInit+0x120>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3760      	adds	r7, #96	; 0x60
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40003800 	.word	0x40003800
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	20000334 	.word	0x20000334
 8001d54:	40026058 	.word	0x40026058

08001d58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b092      	sub	sp, #72	; 0x48
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	223c      	movs	r2, #60	; 0x3c
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f007 f92d 	bl	8008fc8 <memset>
  if(hrtc->Instance==RTC)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_RTC_MspInit+0x4c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d111      	bne.n	8001d9c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fc26 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d92:	f7ff fe5d 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <HAL_RTC_MspInit+0x50>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3748      	adds	r7, #72	; 0x48
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40002800 	.word	0x40002800
 8001da8:	42470e3c 	.word	0x42470e3c

08001dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_SPI_MspInit+0x15c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	f040 8098 	bne.w	8001f00 <HAL_SPI_MspInit+0x154>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_SPI_MspInit+0x160>)
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_SPI_MspInit+0x160>)
 8001dda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dde:	6453      	str	r3, [r2, #68]	; 0x44
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_SPI_MspInit+0x160>)
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_SPI_MspInit+0x160>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4a45      	ldr	r2, [pc, #276]	; (8001f0c <HAL_SPI_MspInit+0x160>)
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfc:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_SPI_MspInit+0x160>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    PE2     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = MEM_SO_Pin|MEM_SI_Pin;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	483b      	ldr	r0, [pc, #236]	; (8001f10 <HAL_SPI_MspInit+0x164>)
 8001e24:	f002 f8be 	bl	8003fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MEM_CK_Pin;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e38:	2305      	movs	r3, #5
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MEM_CK_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4833      	ldr	r0, [pc, #204]	; (8001f10 <HAL_SPI_MspInit+0x164>)
 8001e44:	f002 f8ae 	bl	8003fa4 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e4a:	4a33      	ldr	r2, [pc, #204]	; (8001f18 <HAL_SPI_MspInit+0x16c>)
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e54:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001e88:	4822      	ldr	r0, [pc, #136]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e8a:	f001 fcb1 	bl	80037f0 <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8001e94:	f7ff fddc 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001e9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_SPI_MspInit+0x168>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_SPI_MspInit+0x174>)
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001eac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec4:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ee6:	f001 fc83 	bl	80037f0 <HAL_DMA_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001ef0:	f7ff fdae 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001ef8:	649a      	str	r2, [r3, #72]	; 0x48
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_SPI_MspInit+0x170>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40013400 	.word	0x40013400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	2000040c 	.word	0x2000040c
 8001f18:	40026410 	.word	0x40026410
 8001f1c:	2000046c 	.word	0x2000046c
 8001f20:	40026428 	.word	0x40026428

08001f24 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_SPI_MspDeInit+0x44>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d113      	bne.n	8001f5e <HAL_SPI_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_SPI_MspDeInit+0x48>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_SPI_MspDeInit+0x48>)
 8001f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    PE2     ------> SPI4_SCK
    */
    HAL_GPIO_DeInit(GPIOE, MEM_SO_Pin|MEM_SI_Pin|MEM_CK_Pin);
 8001f42:	2164      	movs	r1, #100	; 0x64
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <HAL_SPI_MspDeInit+0x4c>)
 8001f46:	f002 f9d9 	bl	80042fc <HAL_GPIO_DeInit>

    /* SPI4 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fcfc 	bl	800394c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 fcf7 	bl	800394c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40013400 	.word	0x40013400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_TIM_Base_MspInit+0x70>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_TIM_Base_MspInit+0x74>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_TIM_Base_MspInit+0x74>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_TIM_Base_MspInit+0x74>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fa2:	e01a      	b.n	8001fda <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_TIM_Base_MspInit+0x78>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d115      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_TIM_Base_MspInit+0x74>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_TIM_Base_MspInit+0x74>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_TIM_Base_MspInit+0x74>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201e      	movs	r0, #30
 8001fd0:	f001 fbd7 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fd4:	201e      	movs	r0, #30
 8001fd6:	f001 fbf0 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40000800 	.word	0x40000800

08001ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <HAL_TIM_MspPostInit+0x68>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d11d      	bne.n	800204e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_TIM_MspPostInit+0x6c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_TIM_MspPostInit+0x6c>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_TIM_MspPostInit+0x6c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PB1_Pin|PB0_Pin;
 800202e:	2303      	movs	r3, #3
 8002030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800203e:	2302      	movs	r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_TIM_MspPostInit+0x70>)
 800204a:	f001 ffab 	bl	8003fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40000400 	.word	0x40000400
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <HAL_UART_MspInit+0x184>)
 8002082:	4293      	cmp	r3, r2
 8002084:	f040 80c0 	bne.w	8002208 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_UART_MspInit+0x188>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_UART_MspInit+0x188>)
 8002092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b54      	ldr	r3, [pc, #336]	; (80021ec <HAL_UART_MspInit+0x188>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_UART_MspInit+0x188>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_UART_MspInit+0x188>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_UART_MspInit+0x188>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_UART_MspInit+0x188>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4a48      	ldr	r2, [pc, #288]	; (80021ec <HAL_UART_MspInit+0x188>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_UART_MspInit+0x188>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = COM_TX_Pin;
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020ee:	2308      	movs	r3, #8
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COM_TX_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	483d      	ldr	r0, [pc, #244]	; (80021f0 <HAL_UART_MspInit+0x18c>)
 80020fa:	f001 ff53 	bl	8003fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COM_RX_Pin;
 80020fe:	2304      	movs	r3, #4
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800210e:	2308      	movs	r3, #8
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COM_RX_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4836      	ldr	r0, [pc, #216]	; (80021f4 <HAL_UART_MspInit+0x190>)
 800211a:	f001 ff43 	bl	8003fa4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800211e:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_UART_MspInit+0x198>)
 8002122:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_UART_MspInit+0x194>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_UART_MspInit+0x194>)
 800213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HAL_UART_MspInit+0x194>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_UART_MspInit+0x194>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800215e:	4826      	ldr	r0, [pc, #152]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002160:	f001 fb46 	bl	80037f0 <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800216a:	f7ff fc71 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
 8002174:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_UART_MspInit+0x194>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_UART_MspInit+0x19c>)
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <HAL_UART_MspInit+0x1a0>)
 800217e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_UART_MspInit+0x19c>)
 8002182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002186:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_UART_MspInit+0x19c>)
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_UART_MspInit+0x19c>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_UART_MspInit+0x19c>)
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_UART_MspInit+0x19c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80021ba:	4811      	ldr	r0, [pc, #68]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021bc:	f001 fb18 	bl	80037f0 <HAL_DMA_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80021c6:	f7ff fc43 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_UART_MspInit+0x19c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2035      	movs	r0, #53	; 0x35
 80021dc:	f001 fad1 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80021e0:	2035      	movs	r0, #53	; 0x35
 80021e2:	f001 faea 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e6:	e0a5      	b.n	8002334 <HAL_UART_MspInit+0x2d0>
 80021e8:	40005000 	.word	0x40005000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	200005e4 	.word	0x200005e4
 80021fc:	40026010 	.word	0x40026010
 8002200:	20000644 	.word	0x20000644
 8002204:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4b      	ldr	r2, [pc, #300]	; (800233c <HAL_UART_MspInit+0x2d8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f040 8090 	bne.w	8002334 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_UART_MspInit+0x2dc>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_UART_MspInit+0x2dc>)
 800221e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_UART_MspInit+0x2dc>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_UART_MspInit+0x2dc>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a41      	ldr	r2, [pc, #260]	; (8002340 <HAL_UART_MspInit+0x2dc>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_UART_MspInit+0x2dc>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IOLINK_COM_TX_Pin|IOLINK_COM_RX_Pin;
 800224c:	230c      	movs	r3, #12
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800225c:	2307      	movs	r3, #7
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	4837      	ldr	r0, [pc, #220]	; (8002344 <HAL_UART_MspInit+0x2e0>)
 8002268:	f001 fe9c 	bl	8003fa4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 800226e:	4a37      	ldr	r2, [pc, #220]	; (800234c <HAL_UART_MspInit+0x2e8>)
 8002270:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 8002274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002278:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227a:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 8002288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a0:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a6:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022ac:	4826      	ldr	r0, [pc, #152]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 80022ae:	f001 fa9f 	bl	80037f0 <HAL_DMA_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_UART_MspInit+0x258>
      Error_Handler();
 80022b8:	f7ff fbca 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
 80022c2:	4a21      	ldr	r2, [pc, #132]	; (8002348 <HAL_UART_MspInit+0x2e4>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022ca:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_UART_MspInit+0x2f0>)
 80022cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 8002304:	2200      	movs	r2, #0
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 800230a:	f001 fa71 	bl	80037f0 <HAL_DMA_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002314:	f7ff fb9c 	bl	8001a50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 800231c:	635a      	str	r2, [r3, #52]	; 0x34
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_UART_MspInit+0x2ec>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2102      	movs	r1, #2
 8002328:	2026      	movs	r0, #38	; 0x26
 800232a:	f001 fa2a 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800232e:	2026      	movs	r0, #38	; 0x26
 8002330:	f001 fa43 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8002334:	bf00      	nop
 8002336:	3730      	adds	r7, #48	; 0x30
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40004400 	.word	0x40004400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	200006a4 	.word	0x200006a4
 800234c:	40026088 	.word	0x40026088
 8002350:	20000704 	.word	0x20000704
 8002354:	400260a0 	.word	0x400260a0

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800235c:	e7fe      	b.n	800235c <NMI_Handler+0x4>

0800235e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <HardFault_Handler+0x4>

08002364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <MemManage_Handler+0x4>

0800236a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <UsageFault_Handler+0x4>

08002376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a4:	f000 fe80 	bl	80030a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Stream0_IRQHandler+0x10>)
 80023b2:	f001 fbbb 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200005e4 	.word	0x200005e4

080023c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Stream3_IRQHandler+0x10>)
 80023c6:	f001 fbb1 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000334 	.word	0x20000334

080023d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA1_Stream5_IRQHandler+0x10>)
 80023da:	f001 fba7 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200006a4 	.word	0x200006a4

080023e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA1_Stream6_IRQHandler+0x10>)
 80023ee:	f001 fb9d 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000704 	.word	0x20000704

080023fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOLINK_EN_DIAG_Pin);
 8002400:	2080      	movs	r0, #128	; 0x80
 8002402:	f002 f8a1 	bl	8004548 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IOLINK_OL_Pin);
 8002406:	f44f 7080 	mov.w	r0, #256	; 0x100
 800240a:	f002 f89d 	bl	8004548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <TIM4_IRQHandler+0x2c>)
 800241a:	f004 ff59 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  IIS3DWB_ACC_GetAxes(&vibration_sensor, &misure[contatore_campioni++]);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <TIM4_IRQHandler+0x30>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	1c53      	adds	r3, r2, #1
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <TIM4_IRQHandler+0x30>)
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4a05      	ldr	r2, [pc, #20]	; (8002448 <TIM4_IRQHandler+0x34>)
 8002432:	4413      	add	r3, r2
 8002434:	4619      	mov	r1, r3
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <TIM4_IRQHandler+0x38>)
 8002438:	f000 fab5 	bl	80029a6 <IIS3DWB_ACC_GetAxes>
//  sprintf((char *)buffer, "msg\r\n");
//  HAL_UART_Transmit(&huart5, &buffer, sizeof(buffer), 100);
  /* USER CODE END TIM4_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000514 	.word	0x20000514
 8002444:	2000657c 	.word	0x2000657c
 8002448:	2000079c 	.word	0x2000079c
 800244c:	20000764 	.word	0x20000764

08002450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <USART2_IRQHandler+0x10>)
 8002456:	f005 fe59 	bl	800810c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200005a0 	.word	0x200005a0

08002464 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Stream7_IRQHandler+0x10>)
 800246a:	f001 fb5f 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000644 	.word	0x20000644

08002478 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <UART5_IRQHandler+0x10>)
 800247e:	f005 fe45 	bl	800810c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000055c 	.word	0x2000055c

0800248c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA2_Stream0_IRQHandler+0x10>)
 8002492:	f001 fb4b 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000040c 	.word	0x2000040c

080024a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA2_Stream1_IRQHandler+0x10>)
 80024a6:	f001 fb41 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000046c 	.word	0x2000046c

080024b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_kill>:

int _kill(int pid, int sig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ce:	f006 fd51 	bl	8008f74 <__errno>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2216      	movs	r2, #22
 80024d6:	601a      	str	r2, [r3, #0]
  return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_exit>:

void _exit (int status)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe7 	bl	80024c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024f6:	e7fe      	b.n	80024f6 <_exit+0x12>

080024f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e00a      	b.n	8002520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800250a:	f3af 8000 	nop.w
 800250e:	4601      	mov	r1, r0
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	60ba      	str	r2, [r7, #8]
 8002516:	b2ca      	uxtb	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf0      	blt.n	800250a <_read+0x12>
  }

  return len;
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e009      	b.n	8002558 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	dbf1      	blt.n	8002544 <_write+0x12>
  }
  return len;
 8002560:	687b      	ldr	r3, [r7, #4]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <_close>:

int _close(int file)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002592:	605a      	str	r2, [r3, #4]
  return 0;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <_isatty>:

int _isatty(int file)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f006 fcb6 	bl	8008f74 <__errno>
 8002608:	4603      	mov	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20050000 	.word	0x20050000
 8002634:	00000400 	.word	0x00000400
 8002638:	200065e8 	.word	0x200065e8
 800263c:	20006660 	.word	0x20006660

08002640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <SystemInit+0x20>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <SystemInit+0x20>)
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800266a:	490e      	ldr	r1, [pc, #56]	; (80026a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800266c:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002680:	4c0b      	ldr	r4, [pc, #44]	; (80026b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800268e:	f7ff ffd7 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f006 fc75 	bl	8008f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7fe fc89 	bl	8000fac <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800269c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80026a8:	0800c1d4 	.word	0x0800c1d4
  ldr r2, =_sbss
 80026ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80026b0:	2000665c 	.word	0x2000665c

080026b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC_IRQHandler>
	...

080026b8 <IIS3DWB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_RegisterBusIO(IIS3DWB_Object_t *pObj, IIS3DWB_IO_t *pIO)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <IIS3DWB_RegisterBusIO+0x18>
  {
    ret = IIS3DWB_ERROR;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e034      	b.n	800273a <IIS3DWB_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	7b1a      	ldrb	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <IIS3DWB_RegisterBusIO+0x8c>)
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <IIS3DWB_RegisterBusIO+0x90>)
 8002712:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <IIS3DWB_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4798      	blx	r3
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	e002      	b.n	800273a <IIS3DWB_RegisterBusIO+0x82>
    }
    else
    {
      ret = IIS3DWB_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08002a55 	.word	0x08002a55
 8002748:	08002a8b 	.word	0x08002a8b

0800274c <IIS3DWB_Init>:
 * @brief  Initialize the IIS3DWB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_Init(IIS3DWB_Object_t *pObj)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Reset all the configuration registers in order to set correctly */
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3320      	adds	r3, #32
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fad5 	bl	8002d0a <iis3dwb_reset_set>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <IIS3DWB_Init+0x20>
  {
    return IIS3DWB_ERROR;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e034      	b.n	80027d6 <IIS3DWB_Init+0x8a>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis3dwb_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3320      	adds	r3, #32
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f000 faef 	bl	8002d56 <iis3dwb_auto_increment_set>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <IIS3DWB_Init+0x38>
  {
    return IIS3DWB_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e028      	b.n	80027d6 <IIS3DWB_Init+0x8a>
  }

  /* Enable BDU */
  if (iis3dwb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3320      	adds	r3, #32
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fa4c 	bl	8002c28 <iis3dwb_block_data_update_set>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <IIS3DWB_Init+0x50>
  {
    return IIS3DWB_ERROR;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	e01c      	b.n	80027d6 <IIS3DWB_Init+0x8a>
  }

  /* FIFO mode selection */
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), IIS3DWB_BYPASS_MODE) != IIS3DWB_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3320      	adds	r3, #32
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fafd 	bl	8002da2 <iis3dwb_fifo_mode_set>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <IIS3DWB_Init+0x68>
  {
    return IIS3DWB_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e010      	b.n	80027d6 <IIS3DWB_Init+0x8a>
  }

  /* Full scale selection. */
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), IIS3DWB_2g) != IIS3DWB_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3320      	adds	r3, #32
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f9b0 	bl	8002b20 <iis3dwb_xl_full_scale_set>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <IIS3DWB_Init+0x80>
  {
    return IIS3DWB_ERROR;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e004      	b.n	80027d6 <IIS3DWB_Init+0x8a>
  }

  pObj->is_initialized = 1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS3DWB_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <IIS3DWB_DeInit>:
 * @brief  Deinitialize the IIS3DWB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_DeInit(IIS3DWB_Object_t *pObj)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS3DWB_ACC_Disable(pObj) != IIS3DWB_OK)
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f825 	bl	8002836 <IIS3DWB_ACC_Disable>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <IIS3DWB_DeInit+0x1a>
  {
    return IIS3DWB_ERROR;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e004      	b.n	8002802 <IIS3DWB_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS3DWB_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <IIS3DWB_ACC_Enable>:
 * @brief  Enable the IIS3DWB accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Enable(IIS3DWB_Object_t *pObj)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <IIS3DWB_ACC_Enable+0x16>
  {
    return IIS3DWB_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e004      	b.n	800282a <IIS3DWB_ACC_Enable+0x20>
  }

  pObj->acc_is_enabled = 1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS3DWB_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <IIS3DWB_ACC_Disable>:
 * @brief  Disable the IIS3DWB accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Disable(IIS3DWB_Object_t *pObj)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <IIS3DWB_ACC_Disable+0x16>
  {
    return IIS3DWB_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e010      	b.n	800286e <IIS3DWB_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3320      	adds	r3, #32
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f9c2 	bl	8002bdc <iis3dwb_xl_data_rate_set>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <IIS3DWB_ACC_Disable+0x2e>
  {
    return IIS3DWB_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e004      	b.n	800286e <IIS3DWB_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS3DWB_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <IIS3DWB_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_GetSensitivity(IIS3DWB_Object_t *pObj, float *Sensitivity)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS3DWB_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  iis3dwb_fs_xl_t full_scale;
  
  /* Read actual full scale selection from sensor. */
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3320      	adds	r3, #32
 800288a:	f107 020b 	add.w	r2, r7, #11
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f96b 	bl	8002b6c <iis3dwb_xl_full_scale_get>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <IIS3DWB_ACC_GetSensitivity+0x2a>
  {
    return IIS3DWB_ERROR;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	e026      	b.n	80028f0 <IIS3DWB_ACC_GetSensitivity+0x78>
  }
  
  switch (full_scale)
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d81b      	bhi.n	80028e0 <IIS3DWB_ACC_GetSensitivity+0x68>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <IIS3DWB_ACC_GetSensitivity+0x38>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028d9 	.word	0x080028d9
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028d1 	.word	0x080028d1
  {
  case IIS3DWB_2g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <IIS3DWB_ACC_GetSensitivity+0x80>)
 80028c4:	601a      	str	r2, [r3, #0]
    break;
 80028c6:	e012      	b.n	80028ee <IIS3DWB_ACC_GetSensitivity+0x76>
    
  case IIS3DWB_4g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <IIS3DWB_ACC_GetSensitivity+0x84>)
 80028cc:	601a      	str	r2, [r3, #0]
    break;
 80028ce:	e00e      	b.n	80028ee <IIS3DWB_ACC_GetSensitivity+0x76>
    
  case IIS3DWB_8g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <IIS3DWB_ACC_GetSensitivity+0x88>)
 80028d4:	601a      	str	r2, [r3, #0]
    break;
 80028d6:	e00a      	b.n	80028ee <IIS3DWB_ACC_GetSensitivity+0x76>
    
  case IIS3DWB_16g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <IIS3DWB_ACC_GetSensitivity+0x8c>)
 80028dc:	601a      	str	r2, [r3, #0]
    break;
 80028de:	e006      	b.n	80028ee <IIS3DWB_ACC_GetSensitivity+0x76>
    
  default:
    *Sensitivity = -1.0f;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <IIS3DWB_ACC_GetSensitivity+0x90>)
 80028e4:	601a      	str	r2, [r3, #0]
    ret = IIS3DWB_ERROR;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	60fb      	str	r3, [r7, #12]
    break;
 80028ec:	bf00      	nop
  }
  
  return ret;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	3d79db23 	.word	0x3d79db23
 80028fc:	3df9db23 	.word	0x3df9db23
 8002900:	3e79db23 	.word	0x3e79db23
 8002904:	3ef9db23 	.word	0x3ef9db23
 8002908:	bf800000 	.word	0xbf800000

0800290c <IIS3DWB_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_SetOutputDataRate(IIS3DWB_Object_t *pObj, float Odr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	ed87 0a00 	vstr	s0, [r7]
  iis3dwb_odr_xl_t new_odr;

  new_odr = (Odr <=    1.0f) ? IIS3DWB_XL_ODR_OFF             
          :                    IIS3DWB_XL_ODR_26k7Hz;
 8002918:	edd7 7a00 	vldr	s15, [r7]
 800291c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	d801      	bhi.n	800292e <IIS3DWB_ACC_SetOutputDataRate+0x22>
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <IIS3DWB_ACC_SetOutputDataRate+0x24>
 800292e:	2305      	movs	r3, #5
  new_odr = (Odr <=    1.0f) ? IIS3DWB_XL_ODR_OFF             
 8002930:	73fb      	strb	r3, [r7, #15]
                               
  /* Output data rate selection. */
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3320      	adds	r3, #32
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f94e 	bl	8002bdc <iis3dwb_xl_data_rate_set>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <IIS3DWB_ACC_SetOutputDataRate+0x40>
  {
    return IIS3DWB_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e000      	b.n	800294e <IIS3DWB_ACC_SetOutputDataRate+0x42>
  }
  
  return IIS3DWB_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <IIS3DWB_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_SetFullScale(IIS3DWB_Object_t *pObj, int32_t FullScale)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  iis3dwb_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS3DWB_2g
         : (FullScale <= 4) ? IIS3DWB_4g
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b02      	cmp	r3, #2
 8002964:	dd0b      	ble.n	800297e <IIS3DWB_ACC_SetFullScale+0x28>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b04      	cmp	r3, #4
 800296a:	dd06      	ble.n	800297a <IIS3DWB_ACC_SetFullScale+0x24>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b08      	cmp	r3, #8
 8002970:	dc01      	bgt.n	8002976 <IIS3DWB_ACC_SetFullScale+0x20>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <IIS3DWB_ACC_SetFullScale+0x2a>
 8002976:	2301      	movs	r3, #1
 8002978:	e002      	b.n	8002980 <IIS3DWB_ACC_SetFullScale+0x2a>
 800297a:	2302      	movs	r3, #2
 800297c:	e000      	b.n	8002980 <IIS3DWB_ACC_SetFullScale+0x2a>
 800297e:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS3DWB_2g
 8002980:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? IIS3DWB_8g
         :                    IIS3DWB_16g;

  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), new_fs) != IIS3DWB_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3320      	adds	r3, #32
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f8c8 	bl	8002b20 <iis3dwb_xl_full_scale_set>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <IIS3DWB_ACC_SetFullScale+0x46>
  {
    return IIS3DWB_ERROR;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e000      	b.n	800299e <IIS3DWB_ACC_SetFullScale+0x48>
  }

  return IIS3DWB_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <IIS3DWB_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_GetAxes(IIS3DWB_Object_t *pObj, IIS3DWB_Axes_t *Acceleration)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  iis3dwb_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3320      	adds	r3, #32
 80029ba:	f107 0210 	add.w	r2, r7, #16
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f957 	bl	8002c74 <iis3dwb_acceleration_raw_get>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <IIS3DWB_ACC_GetAxes+0x2c>
  {
    return IIS3DWB_ERROR;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	e03c      	b.n	8002a4c <IIS3DWB_ACC_GetAxes+0xa6>
  }

  /* Get IIS3DWB actual sensitivity. */
  if (IIS3DWB_ACC_GetSensitivity(pObj, &sensitivity) != IIS3DWB_OK)
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff4d 	bl	8002878 <IIS3DWB_ACC_GetSensitivity>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <IIS3DWB_ACC_GetAxes+0x44>
  {
    return IIS3DWB_ERROR;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	e030      	b.n	8002a4c <IIS3DWB_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80029ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a02:	ee17 2a90 	vmov	r2, s15
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002a0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a22:	ee17 2a90 	vmov	r2, s15
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002a2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a42:	ee17 2a90 	vmov	r2, s15
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	609a      	str	r2, [r3, #8]

  return IIS3DWB_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	460b      	mov	r3, r1
 8002a62:	72fb      	strb	r3, [r7, #11]
 8002a64:	4613      	mov	r3, r2
 8002a66:	813b      	strh	r3, [r7, #8]
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	695c      	ldr	r4, [r3, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	7b1b      	ldrb	r3, [r3, #12]
 8002a74:	b298      	uxth	r0, r3
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	b299      	uxth	r1, r3
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	47a0      	blx	r4
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a8a:	b590      	push	{r4, r7, lr}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	461a      	mov	r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	72fb      	strb	r3, [r7, #11]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	813b      	strh	r3, [r7, #8]
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	691c      	ldr	r4, [r3, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	7b1b      	ldrb	r3, [r3, #12]
 8002aaa:	b298      	uxth	r0, r3
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	47a0      	blx	r4
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <iis3dwb_read_reg>:
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	72fb      	strb	r3, [r7, #11]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685c      	ldr	r4, [r3, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68d8      	ldr	r0, [r3, #12]
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	7af9      	ldrb	r1, [r7, #11]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	47a0      	blx	r4
 8002ae4:	6178      	str	r0, [r7, #20]

  return ret;
 8002ae6:	697b      	ldr	r3, [r7, #20]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd90      	pop	{r4, r7, pc}

08002af0 <iis3dwb_write_reg>:
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	72fb      	strb	r3, [r7, #11]
 8002b00:	4613      	mov	r3, r2
 8002b02:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681c      	ldr	r4, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68d8      	ldr	r0, [r3, #12]
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	7af9      	ldrb	r1, [r7, #11]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	47a0      	blx	r4
 8002b14:	6178      	str	r0, [r7, #20]

  return ret;
 8002b16:	697b      	ldr	r3, [r7, #20]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}

08002b20 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002b2c:	f107 0208 	add.w	r2, r7, #8
 8002b30:	2301      	movs	r3, #1
 8002b32:	2110      	movs	r1, #16
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffc3 	bl	8002ac0 <iis3dwb_read_reg>
 8002b3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10f      	bne.n	8002b62 <iis3dwb_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	7a3b      	ldrb	r3, [r7, #8]
 8002b4c:	f362 0383 	bfi	r3, r2, #2, #2
 8002b50:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8002b52:	f107 0208 	add.w	r2, r7, #8
 8002b56:	2301      	movs	r3, #1
 8002b58:	2110      	movs	r1, #16
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ffc8 	bl	8002af0 <iis3dwb_write_reg>
 8002b60:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <iis3dwb_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t *val)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002b76:	f107 0208 	add.w	r2, r7, #8
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ff9e 	bl	8002ac0 <iis3dwb_read_reg>
 8002b84:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8002b86:	7a3b      	ldrb	r3, [r7, #8]
 8002b88:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d81a      	bhi.n	8002bc8 <iis3dwb_xl_full_scale_get+0x5c>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <iis3dwb_xl_full_scale_get+0x2c>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bb1 	.word	0x08002bb1
 8002ba0:	08002bb9 	.word	0x08002bb9
 8002ba4:	08002bc1 	.word	0x08002bc1
  {
    case IIS3DWB_2g:
      *val = IIS3DWB_2g;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
      break;
 8002bae:	e00f      	b.n	8002bd0 <iis3dwb_xl_full_scale_get+0x64>

    case IIS3DWB_16g:
      *val = IIS3DWB_16g;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
      break;
 8002bb6:	e00b      	b.n	8002bd0 <iis3dwb_xl_full_scale_get+0x64>

    case IIS3DWB_4g:
      *val = IIS3DWB_4g;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	701a      	strb	r2, [r3, #0]
      break;
 8002bbe:	e007      	b.n	8002bd0 <iis3dwb_xl_full_scale_get+0x64>

    case IIS3DWB_8g:
      *val = IIS3DWB_8g;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	701a      	strb	r2, [r3, #0]
      break;
 8002bc6:	e003      	b.n	8002bd0 <iis3dwb_xl_full_scale_get+0x64>

    default:
      *val = IIS3DWB_2g;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
      break;
 8002bce:	bf00      	nop
  }

  return ret;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop

08002bdc <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002be8:	f107 0208 	add.w	r2, r7, #8
 8002bec:	2301      	movs	r3, #1
 8002bee:	2110      	movs	r1, #16
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff65 	bl	8002ac0 <iis3dwb_read_reg>
 8002bf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <iis3dwb_xl_data_rate_set+0x42>
  {
    ctrl1_xl.xl_en = (uint8_t)val;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	7a3b      	ldrb	r3, [r7, #8]
 8002c08:	f362 1347 	bfi	r3, r2, #5, #3
 8002c0c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8002c0e:	f107 0208 	add.w	r2, r7, #8
 8002c12:	2301      	movs	r3, #1
 8002c14:	2110      	movs	r1, #16
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff6a 	bl	8002af0 <iis3dwb_write_reg>
 8002c1c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002c34:	f107 0208 	add.w	r2, r7, #8
 8002c38:	2301      	movs	r3, #1
 8002c3a:	2112      	movs	r1, #18
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff3f 	bl	8002ac0 <iis3dwb_read_reg>
 8002c42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <iis3dwb_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	7a3b      	ldrb	r3, [r7, #8]
 8002c54:	f362 1386 	bfi	r3, r2, #6, #1
 8002c58:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002c5a:	f107 0208 	add.w	r2, r7, #8
 8002c5e:	2301      	movs	r3, #1
 8002c60:	2112      	movs	r1, #18
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff44 	bl	8002af0 <iis3dwb_write_reg>
 8002c68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <iis3dwb_acceleration_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
 8002c7e:	f107 020c 	add.w	r2, r7, #12
 8002c82:	2306      	movs	r3, #6
 8002c84:	2128      	movs	r1, #40	; 0x28
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff1a 	bl	8002ac0 <iis3dwb_read_reg>
 8002c8c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c8e:	7b7b      	ldrb	r3, [r7, #13]
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	b212      	sxth	r2, r2
 8002cb8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	7bbb      	ldrb	r3, [r7, #14]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	b212      	sxth	r2, r2
 8002cd6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002cd8:	7c7a      	ldrb	r2, [r7, #17]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	b212      	sxth	r2, r2
 8002ce0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	7c3b      	ldrb	r3, [r7, #16]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	b212      	sxth	r2, r2
 8002cfe:	801a      	strh	r2, [r3, #0]

  return ret;
 8002d00:	697b      	ldr	r3, [r7, #20]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d16:	f107 0208 	add.w	r2, r7, #8
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2112      	movs	r1, #18
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fece 	bl	8002ac0 <iis3dwb_read_reg>
 8002d24:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <iis3dwb_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	7a3b      	ldrb	r3, [r7, #8]
 8002d36:	f362 0300 	bfi	r3, r2, #0, #1
 8002d3a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	2301      	movs	r3, #1
 8002d42:	2112      	movs	r1, #18
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fed3 	bl	8002af0 <iis3dwb_write_reg>
 8002d4a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <iis3dwb_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	2301      	movs	r3, #1
 8002d68:	2112      	movs	r1, #18
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fea8 	bl	8002ac0 <iis3dwb_read_reg>
 8002d70:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10f      	bne.n	8002d98 <iis3dwb_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	7a3b      	ldrb	r3, [r7, #8]
 8002d82:	f362 0382 	bfi	r3, r2, #2, #1
 8002d86:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d88:	f107 0208 	add.w	r2, r7, #8
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2112      	movs	r1, #18
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff fead 	bl	8002af0 <iis3dwb_write_reg>
 8002d96:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8002dae:	f107 0208 	add.w	r2, r7, #8
 8002db2:	2301      	movs	r3, #1
 8002db4:	210a      	movs	r1, #10
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fe82 	bl	8002ac0 <iis3dwb_read_reg>
 8002dbc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10f      	bne.n	8002de4 <iis3dwb_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	7a3b      	ldrb	r3, [r7, #8]
 8002dce:	f362 0302 	bfi	r3, r2, #0, #3
 8002dd2:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8002dd4:	f107 0208 	add.w	r2, r7, #8
 8002dd8:	2301      	movs	r3, #1
 8002dda:	210a      	movs	r1, #10
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fe87 	bl	8002af0 <iis3dwb_write_reg>
 8002de2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <BSP_SPI1_Init+0x54>)
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <BSP_SPI1_Init+0x58>)
 8002dfe:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <BSP_SPI1_Init+0x5c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4911      	ldr	r1, [pc, #68]	; (8002e4c <BSP_SPI1_Init+0x5c>)
 8002e08:	600a      	str	r2, [r1, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d114      	bne.n	8002e38 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <BSP_SPI1_Init+0x54>)
 8002e10:	f003 ffd7 	bl	8006dc2 <HAL_SPI_GetState>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8002e1a:	480a      	ldr	r0, [pc, #40]	; (8002e44 <BSP_SPI1_Init+0x54>)
 8002e1c:	f000 f87c 	bl	8002f18 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002e26:	4807      	ldr	r0, [pc, #28]	; (8002e44 <BSP_SPI1_Init+0x54>)
 8002e28:	f000 f83a 	bl	8002ea0 <MX_SPI1_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002e32:	f06f 0307 	mvn.w	r3, #7
 8002e36:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002e38:	687b      	ldr	r3, [r7, #4]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200065ec 	.word	0x200065ec
 8002e48:	40013000 	.word	0x40013000
 8002e4c:	20006644 	.word	0x20006644

08002e50 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8002e56:	f06f 0307 	mvn.w	r3, #7
 8002e5a:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <BSP_SPI1_DeInit+0x48>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <BSP_SPI1_DeInit+0x48>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <BSP_SPI1_DeInit+0x48>)
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <BSP_SPI1_DeInit+0x48>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 8002e76:	4809      	ldr	r0, [pc, #36]	; (8002e9c <BSP_SPI1_DeInit+0x4c>)
 8002e78:	f000 f8a6 	bl	8002fc8 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8002e7c:	4807      	ldr	r0, [pc, #28]	; (8002e9c <BSP_SPI1_DeInit+0x4c>)
 8002e7e:	f003 fb89 	bl	8006594 <HAL_SPI_DeInit>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002e8c:	687b      	ldr	r3, [r7, #4]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20006644 	.word	0x20006644
 8002e9c:	200065ec 	.word	0x200065ec

08002ea0 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <MX_SPI1_Init+0x74>)
 8002eb0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eb8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed8:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2218      	movs	r2, #24
 8002ede:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	220a      	movs	r2, #10
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f003 fac2 	bl	8006482 <HAL_SPI_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40013000 	.word	0x40013000

08002f18 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <SPI1_MspInit+0xa8>)
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <SPI1_MspInit+0xa8>)
 8002f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <SPI1_MspInit+0xa8>)
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <SPI1_MspInit+0xa8>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <SPI1_MspInit+0xa8>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <SPI1_MspInit+0xa8>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f60:	2301      	movs	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002f68:	2305      	movs	r3, #5
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4619      	mov	r1, r3
 8002f72:	4814      	ldr	r0, [pc, #80]	; (8002fc4 <SPI1_MspInit+0xac>)
 8002f74:	f001 f816 	bl	8003fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f80:	2301      	movs	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002f88:	2305      	movs	r3, #5
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4619      	mov	r1, r3
 8002f92:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <SPI1_MspInit+0xac>)
 8002f94:	f001 f806 	bl	8003fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002f98:	2310      	movs	r3, #16
 8002f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002fa8:	2305      	movs	r3, #5
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <SPI1_MspInit+0xac>)
 8002fb4:	f000 fff6 	bl	8003fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	3728      	adds	r7, #40	; 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020400 	.word	0x40020400

08002fc8 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <SPI1_MspDeInit+0x34>)
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <SPI1_MspDeInit+0x34>)
 8002fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fda:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8002fdc:	2108      	movs	r1, #8
 8002fde:	4808      	ldr	r0, [pc, #32]	; (8003000 <SPI1_MspDeInit+0x38>)
 8002fe0:	f001 f98c 	bl	80042fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	4806      	ldr	r0, [pc, #24]	; (8003000 <SPI1_MspDeInit+0x38>)
 8002fe8:	f001 f988 	bl	80042fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8002fec:	2110      	movs	r1, #16
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <SPI1_MspDeInit+0x38>)
 8002ff0:	f001 f984 	bl	80042fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020400 	.word	0x40020400

08003004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_Init+0x40>)
 800300e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_Init+0x40>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x40>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 fb9d 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	2000      	movs	r0, #0
 8003034:	f000 f808 	bl	8003048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7fe fd10 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_InitTick+0x54>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_InitTick+0x58>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800305e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fbb5 	bl	80037d6 <HAL_SYSTICK_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00e      	b.n	8003094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d80a      	bhi.n	8003092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307c:	2200      	movs	r2, #0
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f000 fb7d 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <HAL_InitTick+0x5c>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000004 	.word	0x20000004
 80030a0:	2000000c 	.word	0x2000000c
 80030a4:	20000008 	.word	0x20000008

080030a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_IncTick+0x20>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x24>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <HAL_IncTick+0x24>)
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	2000000c 	.word	0x2000000c
 80030cc:	20006648 	.word	0x20006648

080030d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return uwTick;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_GetTick+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20006648 	.word	0x20006648

080030e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e033      	b.n	8003166 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fcd0 	bl	8001aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800312e:	f023 0302 	bic.w	r3, r3, #2
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f94a 	bl	80033d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
 8003156:	e001      	b.n	800315c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1c>
 8003188:	2302      	movs	r3, #2
 800318a:	e113      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x244>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b09      	cmp	r3, #9
 800319a:	d925      	bls.n	80031e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	3b1e      	subs	r3, #30
 80031b2:	2207      	movs	r2, #7
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68d9      	ldr	r1, [r3, #12]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	4603      	mov	r3, r0
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4403      	add	r3, r0
 80031da:	3b1e      	subs	r3, #30
 80031dc:	409a      	lsls	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	e022      	b.n	800322e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6919      	ldr	r1, [r3, #16]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	2207      	movs	r2, #7
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6919      	ldr	r1, [r3, #16]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	4618      	mov	r0, r3
 800321e:	4603      	mov	r3, r0
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4403      	add	r3, r0
 8003224:	409a      	lsls	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d824      	bhi.n	8003280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b05      	subs	r3, #5
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	400a      	ands	r2, r1
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b05      	subs	r3, #5
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	635a      	str	r2, [r3, #52]	; 0x34
 800327e:	e04c      	b.n	800331a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d824      	bhi.n	80032d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	3b23      	subs	r3, #35	; 0x23
 800329a:	221f      	movs	r2, #31
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43da      	mvns	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	400a      	ands	r2, r1
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	3b23      	subs	r3, #35	; 0x23
 80032c4:	fa00 f203 	lsl.w	r2, r0, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
 80032d0:	e023      	b.n	800331a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3b41      	subs	r3, #65	; 0x41
 80032e4:	221f      	movs	r2, #31
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	400a      	ands	r2, r1
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4618      	mov	r0, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	3b41      	subs	r3, #65	; 0x41
 800330e:	fa00 f203 	lsl.w	r2, r0, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_ADC_ConfigChannel+0x250>)
 800331c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a28      	ldr	r2, [pc, #160]	; (80033c4 <HAL_ADC_ConfigChannel+0x254>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10f      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x1d8>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b12      	cmp	r3, #18
 800332e:	d10b      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_ADC_ConfigChannel+0x254>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d12b      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x23a>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_ADC_ConfigChannel+0x258>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <HAL_ADC_ConfigChannel+0x1f4>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b11      	cmp	r3, #17
 8003362:	d122      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_ADC_ConfigChannel+0x258>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d111      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_ADC_ConfigChannel+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_ADC_ConfigChannel+0x260>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	0c9a      	lsrs	r2, r3, #18
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800339c:	e002      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f9      	bne.n	800339e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012300 	.word	0x40012300
 80033c4:	40012000 	.word	0x40012000
 80033c8:	10000012 	.word	0x10000012
 80033cc:	20000004 	.word	0x20000004
 80033d0:	431bde83 	.word	0x431bde83

080033d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <ADC_Init+0x1f0>)
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800342c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	4a58      	ldr	r2, [pc, #352]	; (80035c8 <ADC_Init+0x1f4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800347a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800349c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6899      	ldr	r1, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e00f      	b.n	80034d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0202 	bic.w	r2, r2, #2
 80034e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e1b      	ldrb	r3, [r3, #24]
 80034ec:	005a      	lsls	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01b      	beq.n	8003538 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800351e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	3b01      	subs	r3, #1
 800352c:	035a      	lsls	r2, r3, #13
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e007      	b.n	8003548 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003546:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	3b01      	subs	r3, #1
 8003564:	051a      	lsls	r2, r3, #20
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800357c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800358a:	025a      	lsls	r2, r3, #9
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6899      	ldr	r1, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	029a      	lsls	r2, r3, #10
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40012300 	.word	0x40012300
 80035c8:	0f000001 	.word	0x0f000001

080035cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e8:	4013      	ands	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fe:	4a04      	ldr	r2, [pc, #16]	; (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	60d3      	str	r3, [r2, #12]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <__NVIC_GetPriorityGrouping+0x18>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 0307 	and.w	r3, r3, #7
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	2b00      	cmp	r3, #0
 8003640:	db0b      	blt.n	800365a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	f003 021f 	and.w	r2, r3, #31
 8003648:	4907      	ldr	r1, [pc, #28]	; (8003668 <__NVIC_EnableIRQ+0x38>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2001      	movs	r0, #1
 8003652:	fa00 f202 	lsl.w	r2, r0, r2
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	; (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	; (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	; 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff8e 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff29 	bl	80035cc <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff3e 	bl	8003614 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff8e 	bl	80036c0 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5d 	bl	800366c <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff31 	bl	8003630 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7ff fc68 	bl	80030d0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e099      	b.n	8003940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382c:	e00f      	b.n	800384e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800382e:	f7ff fc4f 	bl	80030d0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b05      	cmp	r3, #5
 800383a:	d908      	bls.n	800384e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2203      	movs	r2, #3
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e078      	b.n	8003940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e8      	bne.n	800382e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4b38      	ldr	r3, [pc, #224]	; (8003948 <HAL_DMA_Init+0x158>)
 8003868:	4013      	ands	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d107      	bne.n	80038b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	4313      	orrs	r3, r2
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d117      	bne.n	8003912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fad9 	bl	8003eac <DMA_CheckFifoParam>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800390e:	2301      	movs	r3, #1
 8003910:	e016      	b.n	8003940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa90 	bl	8003e40 <DMA_CalcBaseAndBitshift>
 8003920:	4603      	mov	r3, r0
 8003922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	223f      	movs	r2, #63	; 0x3f
 800392a:	409a      	lsls	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	f010803f 	.word	0xf010803f

0800394c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e050      	b.n	8003a00 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d101      	bne.n	800396e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	e048      	b.n	8003a00 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2221      	movs	r2, #33	; 0x21
 80039ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa46 	bl	8003e40 <DMA_CalcBaseAndBitshift>
 80039b4:	4603      	mov	r3, r0
 80039b6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	223f      	movs	r2, #63	; 0x3f
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a16:	f7ff fb5b 	bl	80030d0 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d008      	beq.n	8003a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e052      	b.n	8003ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0216 	bic.w	r2, r2, #22
 8003a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_DMA_Abort+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0208 	bic.w	r2, r2, #8
 8003a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8a:	e013      	b.n	8003ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8c:	f7ff fb20 	bl	80030d0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d90c      	bls.n	8003ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e015      	b.n	8003ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e4      	bne.n	8003a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	223f      	movs	r2, #63	; 0x3f
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00c      	b.n	8003b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2205      	movs	r2, #5
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b38:	4b8e      	ldr	r3, [pc, #568]	; (8003d74 <HAL_DMA_IRQHandler+0x248>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a8e      	ldr	r2, [pc, #568]	; (8003d78 <HAL_DMA_IRQHandler+0x24c>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2208      	movs	r2, #8
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01a      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	2208      	movs	r2, #8
 8003b86:	409a      	lsls	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2201      	movs	r2, #1
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f043 0204 	orr.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	2210      	movs	r2, #16
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d043      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03c      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	2210      	movs	r2, #16
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d024      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
 8003c5a:	e01f      	b.n	8003c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e016      	b.n	8003c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0208 	bic.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 808f 	beq.w	8003dcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8087 	beq.w	8003dcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d136      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0216 	bic.w	r2, r2, #22
 8003ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x1da>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	223f      	movs	r2, #63	; 0x3f
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d07e      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
        }
        return;
 8003d42:	e079      	b.n	8003e38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d031      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
 8003d70:	e02c      	b.n	8003dcc <HAL_DMA_IRQHandler+0x2a0>
 8003d72:	bf00      	nop
 8003d74:	20000004 	.word	0x20000004
 8003d78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d023      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
 8003d8c:	e01e      	b.n	8003dcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0210 	bic.w	r2, r2, #16
 8003daa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d032      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2205      	movs	r2, #5
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d307      	bcc.n	8003e14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f2      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x2cc>
 8003e12:	e000      	b.n	8003e16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
 8003e36:	e000      	b.n	8003e3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e38:	bf00      	nop
    }
  }
}
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	3b10      	subs	r3, #16
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d909      	bls.n	8003e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e80:	e007      	b.n	8003e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	aaaaaaab 	.word	0xaaaaaaab
 8003ea8:	0800bde0 	.word	0x0800bde0

08003eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11f      	bne.n	8003f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d856      	bhi.n	8003f7a <DMA_CheckFifoParam+0xce>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <DMA_CheckFifoParam+0x28>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef7 	.word	0x08003ef7
 8003edc:	08003ee5 	.word	0x08003ee5
 8003ee0:	08003f7b 	.word	0x08003f7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d046      	beq.n	8003f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef4:	e043      	b.n	8003f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003efe:	d140      	bne.n	8003f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f04:	e03d      	b.n	8003f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	d121      	bne.n	8003f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d837      	bhi.n	8003f86 <DMA_CheckFifoParam+0xda>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <DMA_CheckFifoParam+0x70>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f33 	.word	0x08003f33
 8003f24:	08003f2d 	.word	0x08003f2d
 8003f28:	08003f45 	.word	0x08003f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e030      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d025      	beq.n	8003f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f42:	e022      	b.n	8003f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f4c:	d11f      	bne.n	8003f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f52:	e01c      	b.n	8003f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d903      	bls.n	8003f62 <DMA_CheckFifoParam+0xb6>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d003      	beq.n	8003f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f60:	e018      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      break;
 8003f66:	e015      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e00b      	b.n	8003f92 <DMA_CheckFifoParam+0xe6>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e00a      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e008      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      break;
 8003f82:	bf00      	nop
 8003f84:	e006      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      break;
 8003f86:	bf00      	nop
 8003f88:	e004      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <DMA_CheckFifoParam+0xe8>
      break;
 8003f92:	bf00      	nop
    }
  } 
  
  return status; 
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop

08003fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e177      	b.n	80042b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	f040 8166 	bne.w	80042aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d005      	beq.n	8003ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d130      	bne.n	8004058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 0201 	and.w	r2, r3, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b03      	cmp	r3, #3
 8004062:	d017      	beq.n	8004094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	2203      	movs	r2, #3
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d123      	bne.n	80040e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	08da      	lsrs	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3208      	adds	r2, #8
 80040a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	220f      	movs	r2, #15
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	08da      	lsrs	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3208      	adds	r2, #8
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0203 	and.w	r2, r3, #3
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80c0 	beq.w	80042aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <HAL_GPIO_Init+0x324>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	4a65      	ldr	r2, [pc, #404]	; (80042c8 <HAL_GPIO_Init+0x324>)
 8004134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004138:	6453      	str	r3, [r2, #68]	; 0x44
 800413a:	4b63      	ldr	r3, [pc, #396]	; (80042c8 <HAL_GPIO_Init+0x324>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004146:	4a61      	ldr	r2, [pc, #388]	; (80042cc <HAL_GPIO_Init+0x328>)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	3302      	adds	r3, #2
 800414e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	220f      	movs	r2, #15
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a58      	ldr	r2, [pc, #352]	; (80042d0 <HAL_GPIO_Init+0x32c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d037      	beq.n	80041e2 <HAL_GPIO_Init+0x23e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a57      	ldr	r2, [pc, #348]	; (80042d4 <HAL_GPIO_Init+0x330>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d031      	beq.n	80041de <HAL_GPIO_Init+0x23a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a56      	ldr	r2, [pc, #344]	; (80042d8 <HAL_GPIO_Init+0x334>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02b      	beq.n	80041da <HAL_GPIO_Init+0x236>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a55      	ldr	r2, [pc, #340]	; (80042dc <HAL_GPIO_Init+0x338>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d025      	beq.n	80041d6 <HAL_GPIO_Init+0x232>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a54      	ldr	r2, [pc, #336]	; (80042e0 <HAL_GPIO_Init+0x33c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01f      	beq.n	80041d2 <HAL_GPIO_Init+0x22e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a53      	ldr	r2, [pc, #332]	; (80042e4 <HAL_GPIO_Init+0x340>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d019      	beq.n	80041ce <HAL_GPIO_Init+0x22a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_GPIO_Init+0x344>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_Init+0x226>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a51      	ldr	r2, [pc, #324]	; (80042ec <HAL_GPIO_Init+0x348>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00d      	beq.n	80041c6 <HAL_GPIO_Init+0x222>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a50      	ldr	r2, [pc, #320]	; (80042f0 <HAL_GPIO_Init+0x34c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <HAL_GPIO_Init+0x21e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4f      	ldr	r2, [pc, #316]	; (80042f4 <HAL_GPIO_Init+0x350>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d101      	bne.n	80041be <HAL_GPIO_Init+0x21a>
 80041ba:	2309      	movs	r3, #9
 80041bc:	e012      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041be:	230a      	movs	r3, #10
 80041c0:	e010      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041c2:	2308      	movs	r3, #8
 80041c4:	e00e      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041c6:	2307      	movs	r3, #7
 80041c8:	e00c      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041ca:	2306      	movs	r3, #6
 80041cc:	e00a      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041ce:	2305      	movs	r3, #5
 80041d0:	e008      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041d2:	2304      	movs	r3, #4
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041d6:	2303      	movs	r3, #3
 80041d8:	e004      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041da:	2302      	movs	r3, #2
 80041dc:	e002      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_GPIO_Init+0x240>
 80041e2:	2300      	movs	r3, #0
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f002 0203 	and.w	r2, r2, #3
 80041ea:	0092      	lsls	r2, r2, #2
 80041ec:	4093      	lsls	r3, r2
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f4:	4935      	ldr	r1, [pc, #212]	; (80042cc <HAL_GPIO_Init+0x328>)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_GPIO_Init+0x354>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004226:	4a34      	ldr	r2, [pc, #208]	; (80042f8 <HAL_GPIO_Init+0x354>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800422c:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <HAL_GPIO_Init+0x354>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004250:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <HAL_GPIO_Init+0x354>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <HAL_GPIO_Init+0x354>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800427a:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_GPIO_Init+0x354>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_GPIO_Init+0x354>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <HAL_GPIO_Init+0x354>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	f67f ae84 	bls.w	8003fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40013800 	.word	0x40013800
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40020400 	.word	0x40020400
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020c00 	.word	0x40020c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40021400 	.word	0x40021400
 80042e8:	40021800 	.word	0x40021800
 80042ec:	40021c00 	.word	0x40021c00
 80042f0:	40022000 	.word	0x40022000
 80042f4:	40022400 	.word	0x40022400
 80042f8:	40013c00 	.word	0x40013c00

080042fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e0d9      	b.n	80044cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004318:	2201      	movs	r2, #1
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	429a      	cmp	r2, r3
 8004330:	f040 80c9 	bne.w	80044c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004334:	4a6b      	ldr	r2, [pc, #428]	; (80044e4 <HAL_GPIO_DeInit+0x1e8>)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3302      	adds	r3, #2
 800433c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004340:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	220f      	movs	r2, #15
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a63      	ldr	r2, [pc, #396]	; (80044e8 <HAL_GPIO_DeInit+0x1ec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d037      	beq.n	80043ce <HAL_GPIO_DeInit+0xd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a62      	ldr	r2, [pc, #392]	; (80044ec <HAL_GPIO_DeInit+0x1f0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_GPIO_DeInit+0xce>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a61      	ldr	r2, [pc, #388]	; (80044f0 <HAL_GPIO_DeInit+0x1f4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <HAL_GPIO_DeInit+0xca>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a60      	ldr	r2, [pc, #384]	; (80044f4 <HAL_GPIO_DeInit+0x1f8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d025      	beq.n	80043c2 <HAL_GPIO_DeInit+0xc6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a5f      	ldr	r2, [pc, #380]	; (80044f8 <HAL_GPIO_DeInit+0x1fc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <HAL_GPIO_DeInit+0xc2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a5e      	ldr	r2, [pc, #376]	; (80044fc <HAL_GPIO_DeInit+0x200>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_GPIO_DeInit+0xbe>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a5d      	ldr	r2, [pc, #372]	; (8004500 <HAL_GPIO_DeInit+0x204>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_DeInit+0xba>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a5c      	ldr	r2, [pc, #368]	; (8004504 <HAL_GPIO_DeInit+0x208>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00d      	beq.n	80043b2 <HAL_GPIO_DeInit+0xb6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a5b      	ldr	r2, [pc, #364]	; (8004508 <HAL_GPIO_DeInit+0x20c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_GPIO_DeInit+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a5a      	ldr	r2, [pc, #360]	; (800450c <HAL_GPIO_DeInit+0x210>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_GPIO_DeInit+0xae>
 80043a6:	2309      	movs	r3, #9
 80043a8:	e012      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043aa:	230a      	movs	r3, #10
 80043ac:	e010      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043ae:	2308      	movs	r3, #8
 80043b0:	e00e      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043b2:	2307      	movs	r3, #7
 80043b4:	e00c      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043b6:	2306      	movs	r3, #6
 80043b8:	e00a      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043ba:	2305      	movs	r3, #5
 80043bc:	e008      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043be:	2304      	movs	r3, #4
 80043c0:	e006      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043c2:	2303      	movs	r3, #3
 80043c4:	e004      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e002      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_GPIO_DeInit+0xd4>
 80043ce:	2300      	movs	r3, #0
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	f002 0203 	and.w	r2, r2, #3
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	4093      	lsls	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d132      	bne.n	8004446 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043e0:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	4949      	ldr	r1, [pc, #292]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80043ee:	4b48      	ldr	r3, [pc, #288]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	4946      	ldr	r1, [pc, #280]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43db      	mvns	r3, r3
 8004404:	4942      	ldr	r1, [pc, #264]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 8004406:	4013      	ands	r3, r2
 8004408:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43db      	mvns	r3, r3
 8004412:	493f      	ldr	r1, [pc, #252]	; (8004510 <HAL_GPIO_DeInit+0x214>)
 8004414:	4013      	ands	r3, r2
 8004416:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004428:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <HAL_GPIO_DeInit+0x1e8>)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	3302      	adds	r3, #2
 8004430:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	43da      	mvns	r2, r3
 8004438:	482a      	ldr	r0, [pc, #168]	; (80044e4 <HAL_GPIO_DeInit+0x1e8>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	400a      	ands	r2, r1
 8004440:	3302      	adds	r3, #2
 8004442:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2103      	movs	r1, #3
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	401a      	ands	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	08da      	lsrs	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3208      	adds	r2, #8
 8004464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	08d2      	lsrs	r2, r2, #3
 800447c:	4019      	ands	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2103      	movs	r1, #3
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	2101      	movs	r1, #1
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	2103      	movs	r1, #3
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	401a      	ands	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	3301      	adds	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b0f      	cmp	r3, #15
 80044d0:	f67f af22 	bls.w	8004318 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40013800 	.word	0x40013800
 80044e8:	40020000 	.word	0x40020000
 80044ec:	40020400 	.word	0x40020400
 80044f0:	40020800 	.word	0x40020800
 80044f4:	40020c00 	.word	0x40020c00
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40021400 	.word	0x40021400
 8004500:	40021800 	.word	0x40021800
 8004504:	40021c00 	.word	0x40021c00
 8004508:	40022000 	.word	0x40022000
 800450c:	40022400 	.word	0x40022400
 8004510:	40013c00 	.word	0x40013c00

08004514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
 8004520:	4613      	mov	r3, r2
 8004522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004524:	787b      	ldrb	r3, [r7, #1]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004530:	e003      	b.n	800453a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004532:	887b      	ldrh	r3, [r7, #2]
 8004534:	041a      	lsls	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	619a      	str	r2, [r3, #24]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800455e:	4a05      	ldr	r2, [pc, #20]	; (8004574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f806 	bl	8004578 <HAL_GPIO_EXTI_Callback>
  }
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40013c00 	.word	0x40013c00

08004578 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e12b      	b.n	80047fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fabc 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2224      	movs	r2, #36	; 0x24
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045f4:	f000 ffc8 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4a81      	ldr	r2, [pc, #516]	; (8004804 <HAL_I2C_Init+0x274>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d807      	bhi.n	8004614 <HAL_I2C_Init+0x84>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <HAL_I2C_Init+0x278>)
 8004608:	4293      	cmp	r3, r2
 800460a:	bf94      	ite	ls
 800460c:	2301      	movls	r3, #1
 800460e:	2300      	movhi	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e006      	b.n	8004622 <HAL_I2C_Init+0x92>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a7d      	ldr	r2, [pc, #500]	; (800480c <HAL_I2C_Init+0x27c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	bf94      	ite	ls
 800461c:	2301      	movls	r3, #1
 800461e:	2300      	movhi	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0e7      	b.n	80047fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a78      	ldr	r2, [pc, #480]	; (8004810 <HAL_I2C_Init+0x280>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0c9b      	lsrs	r3, r3, #18
 8004634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a6a      	ldr	r2, [pc, #424]	; (8004804 <HAL_I2C_Init+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d802      	bhi.n	8004664 <HAL_I2C_Init+0xd4>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3301      	adds	r3, #1
 8004662:	e009      	b.n	8004678 <HAL_I2C_Init+0xe8>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	4a69      	ldr	r2, [pc, #420]	; (8004814 <HAL_I2C_Init+0x284>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	099b      	lsrs	r3, r3, #6
 8004676:	3301      	adds	r3, #1
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	430b      	orrs	r3, r1
 800467e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800468a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	495c      	ldr	r1, [pc, #368]	; (8004804 <HAL_I2C_Init+0x274>)
 8004694:	428b      	cmp	r3, r1
 8004696:	d819      	bhi.n	80046cc <HAL_I2C_Init+0x13c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e59      	subs	r1, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046ac:	400b      	ands	r3, r1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_I2C_Init+0x138>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1e59      	subs	r1, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	e051      	b.n	800476c <HAL_I2C_Init+0x1dc>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e04f      	b.n	800476c <HAL_I2C_Init+0x1dc>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d111      	bne.n	80046f8 <HAL_I2C_Init+0x168>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1e58      	subs	r0, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e012      	b.n	800471e <HAL_I2C_Init+0x18e>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1e58      	subs	r0, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	0099      	lsls	r1, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	fbb0 f3f3 	udiv	r3, r0, r3
 800470e:	3301      	adds	r3, #1
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Init+0x196>
 8004722:	2301      	movs	r3, #1
 8004724:	e022      	b.n	800476c <HAL_I2C_Init+0x1dc>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <HAL_I2C_Init+0x1bc>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1e58      	subs	r0, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	440b      	add	r3, r1
 800473c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	e00f      	b.n	800476c <HAL_I2C_Init+0x1dc>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	6809      	ldr	r1, [r1, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800479a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6911      	ldr	r1, [r2, #16]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	4311      	orrs	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	000186a0 	.word	0x000186a0
 8004808:	001e847f 	.word	0x001e847f
 800480c:	003d08ff 	.word	0x003d08ff
 8004810:	431bde83 	.word	0x431bde83
 8004814:	10624dd3 	.word	0x10624dd3

08004818 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e138      	b.n	8004a9c <HAL_I2S_Init+0x284>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a98      	ldr	r2, [pc, #608]	; (8004aa4 <HAL_I2S_Init+0x28c>)
 8004842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fd f9f3 	bl	8001c30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004860:	f023 030f 	bic.w	r3, r3, #15
 8004864:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2202      	movs	r2, #2
 800486c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d060      	beq.n	8004938 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800487e:	2310      	movs	r3, #16
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e001      	b.n	8004888 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004884:	2320      	movs	r3, #32
 8004886:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b20      	cmp	r3, #32
 800488e:	d802      	bhi.n	8004896 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004896:	2001      	movs	r0, #1
 8004898:	f001 f8dc 	bl	8005a54 <HAL_RCCEx_GetPeriphCLKFreq>
 800489c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a6:	d125      	bne.n	80048f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	3305      	adds	r3, #5
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e01f      	b.n	8004912 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	3305      	adds	r3, #5
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e00e      	b.n	8004912 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	3305      	adds	r3, #5
 8004910:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a64      	ldr	r2, [pc, #400]	; (8004aa8 <HAL_I2S_Init+0x290>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e003      	b.n	8004940 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004938:	2302      	movs	r3, #2
 800493a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d902      	bls.n	800494c <HAL_I2S_Init+0x134>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2bff      	cmp	r3, #255	; 0xff
 800494a:	d907      	bls.n	800495c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e09f      	b.n	8004a9c <HAL_I2S_Init+0x284>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	430a      	orrs	r2, r1
 800496e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800497a:	f023 030f 	bic.w	r3, r3, #15
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6851      	ldr	r1, [r2, #4]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68d2      	ldr	r2, [r2, #12]
 800498c:	4311      	orrs	r1, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6992      	ldr	r2, [r2, #24]
 8004992:	430a      	orrs	r2, r1
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800499e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b30      	cmp	r3, #48	; 0x30
 80049a6:	d003      	beq.n	80049b0 <HAL_I2S_Init+0x198>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2bb0      	cmp	r3, #176	; 0xb0
 80049ae:	d107      	bne.n	80049c0 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d161      	bne.n	8004a8c <HAL_I2S_Init+0x274>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a38      	ldr	r2, [pc, #224]	; (8004aac <HAL_I2S_Init+0x294>)
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a37      	ldr	r2, [pc, #220]	; (8004ab0 <HAL_I2S_Init+0x298>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d101      	bne.n	80049dc <HAL_I2S_Init+0x1c4>
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <HAL_I2S_Init+0x29c>)
 80049da:	e001      	b.n	80049e0 <HAL_I2S_Init+0x1c8>
 80049dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	4932      	ldr	r1, [pc, #200]	; (8004ab0 <HAL_I2S_Init+0x298>)
 80049e8:	428a      	cmp	r2, r1
 80049ea:	d101      	bne.n	80049f0 <HAL_I2S_Init+0x1d8>
 80049ec:	4a31      	ldr	r2, [pc, #196]	; (8004ab4 <HAL_I2S_Init+0x29c>)
 80049ee:	e001      	b.n	80049f4 <HAL_I2S_Init+0x1dc>
 80049f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80049f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049f8:	f023 030f 	bic.w	r3, r3, #15
 80049fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <HAL_I2S_Init+0x298>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <HAL_I2S_Init+0x1f4>
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <HAL_I2S_Init+0x29c>)
 8004a0a:	e001      	b.n	8004a10 <HAL_I2S_Init+0x1f8>
 8004a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a10:	2202      	movs	r2, #2
 8004a12:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <HAL_I2S_Init+0x298>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2S_Init+0x20a>
 8004a1e:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <HAL_I2S_Init+0x29c>)
 8004a20:	e001      	b.n	8004a26 <HAL_I2S_Init+0x20e>
 8004a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d003      	beq.n	8004a3c <HAL_I2S_Init+0x224>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <HAL_I2S_Init+0x22c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e001      	b.n	8004a48 <HAL_I2S_Init+0x230>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a52:	4313      	orrs	r3, r2
 8004a54:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a66:	4313      	orrs	r3, r2
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a74:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <HAL_I2S_Init+0x298>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <HAL_I2S_Init+0x26c>
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_I2S_Init+0x29c>)
 8004a82:	e001      	b.n	8004a88 <HAL_I2S_Init+0x270>
 8004a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a88:	897a      	ldrh	r2, [r7, #10]
 8004a8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	08004baf 	.word	0x08004baf
 8004aa8:	cccccccd 	.word	0xcccccccd
 8004aac:	08004cc5 	.word	0x08004cc5
 8004ab0:	40003800 	.word	0x40003800
 8004ab4:	40003400 	.word	0x40003400

08004ab8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	881a      	ldrh	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10e      	bne.n	8004b48 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b38:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ffb8 	bl	8004ab8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	b292      	uxth	r2, r2
 8004b64:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	1c9a      	adds	r2, r3, #2
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10e      	bne.n	8004ba6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff93 	bl	8004acc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d13a      	bne.n	8004c40 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d109      	bne.n	8004be8 <I2S_IRQHandler+0x3a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d102      	bne.n	8004be8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ffb4 	bl	8004b50 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d126      	bne.n	8004c40 <I2S_IRQHandler+0x92>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d11f      	bne.n	8004c40 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f043 0202 	orr.w	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff ff50 	bl	8004ae0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d136      	bne.n	8004cba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d109      	bne.n	8004c6a <I2S_IRQHandler+0xbc>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d102      	bne.n	8004c6a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff45 	bl	8004af4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d122      	bne.n	8004cba <I2S_IRQHandler+0x10c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d11b      	bne.n	8004cba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c90:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	f043 0204 	orr.w	r2, r3, #4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff13 	bl	8004ae0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a92      	ldr	r2, [pc, #584]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004cde:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ce0:	e001      	b.n	8004ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a8b      	ldr	r2, [pc, #556]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004cfc:	4b8a      	ldr	r3, [pc, #552]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cfe:	e001      	b.n	8004d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d004      	beq.n	8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 8099 	bne.w	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d107      	bne.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f925 	bl	8004f80 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f9c8 	bl	80050e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d13a      	bne.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d035      	beq.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6e      	ldr	r2, [pc, #440]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d70:	e001      	b.n	8004d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4969      	ldr	r1, [pc, #420]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	d101      	bne.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004d82:	4b69      	ldr	r3, [pc, #420]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d84:	e001      	b.n	8004d8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d8e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f043 0202 	orr.w	r2, r3, #2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fe88 	bl	8004ae0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	f040 80c3 	bne.w	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80bd 	beq.w	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004df6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a49      	ldr	r2, [pc, #292]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e04:	e001      	b.n	8004e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4944      	ldr	r1, [pc, #272]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e12:	428b      	cmp	r3, r1
 8004e14:	d101      	bne.n	8004e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e16:	4b44      	ldr	r3, [pc, #272]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e18:	e001      	b.n	8004e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e22:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fe4a 	bl	8004ae0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e4c:	e089      	b.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d107      	bne.n	8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8be 	bl	8004fe4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d107      	bne.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f8fd 	bl	800507c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d12f      	bne.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d02a      	beq.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ea4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb2:	e001      	b.n	8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4919      	ldr	r1, [pc, #100]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ec6:	e001      	b.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ed0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fdfa 	bl	8004ae0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d136      	bne.n	8004f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d031      	beq.n	8004f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f0c:	e001      	b.n	8004f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4902      	ldr	r1, [pc, #8]	; (8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f1a:	428b      	cmp	r3, r1
 8004f1c:	d106      	bne.n	8004f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004f1e:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f20:	e006      	b.n	8004f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004f22:	bf00      	nop
 8004f24:	40003800 	.word	0x40003800
 8004f28:	40003400 	.word	0x40003400
 8004f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f34:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fdc0 	bl	8004ae0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f60:	e000      	b.n	8004f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f62:	bf00      	nop
}
 8004f64:	bf00      	nop
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	1c99      	adds	r1, r3, #2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6251      	str	r1, [r2, #36]	; 0x24
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d113      	bne.n	8004fda <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ffc9 	bl	8004f6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c99      	adds	r1, r3, #2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ff6:	8819      	ldrh	r1, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <I2SEx_TxISR_I2SExt+0x90>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <I2SEx_TxISR_I2SExt+0x22>
 8005002:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <I2SEx_TxISR_I2SExt+0x94>)
 8005004:	e001      	b.n	800500a <I2SEx_TxISR_I2SExt+0x26>
 8005006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800500a:	460a      	mov	r2, r1
 800500c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d121      	bne.n	800506a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <I2SEx_TxISR_I2SExt+0x90>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d101      	bne.n	8005034 <I2SEx_TxISR_I2SExt+0x50>
 8005030:	4b11      	ldr	r3, [pc, #68]	; (8005078 <I2SEx_TxISR_I2SExt+0x94>)
 8005032:	e001      	b.n	8005038 <I2SEx_TxISR_I2SExt+0x54>
 8005034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	490d      	ldr	r1, [pc, #52]	; (8005074 <I2SEx_TxISR_I2SExt+0x90>)
 8005040:	428b      	cmp	r3, r1
 8005042:	d101      	bne.n	8005048 <I2SEx_TxISR_I2SExt+0x64>
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <I2SEx_TxISR_I2SExt+0x94>)
 8005046:	e001      	b.n	800504c <I2SEx_TxISR_I2SExt+0x68>
 8005048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800504c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005050:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff81 	bl	8004f6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40003800 	.word	0x40003800
 8005078:	40003400 	.word	0x40003400

0800507c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68d8      	ldr	r0, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	1c99      	adds	r1, r3, #2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005094:	b282      	uxth	r2, r0
 8005096:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d113      	bne.n	80050d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ff4a 	bl	8004f6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <I2SEx_RxISR_I2SExt+0x90>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <I2SEx_RxISR_I2SExt+0x16>
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <I2SEx_RxISR_I2SExt+0x94>)
 80050f4:	e001      	b.n	80050fa <I2SEx_RxISR_I2SExt+0x1a>
 80050f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050fa:	68d8      	ldr	r0, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	1c99      	adds	r1, r3, #2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005106:	b282      	uxth	r2, r0
 8005108:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d121      	bne.n	8005166 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <I2SEx_RxISR_I2SExt+0x90>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d101      	bne.n	8005130 <I2SEx_RxISR_I2SExt+0x50>
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <I2SEx_RxISR_I2SExt+0x94>)
 800512e:	e001      	b.n	8005134 <I2SEx_RxISR_I2SExt+0x54>
 8005130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	490d      	ldr	r1, [pc, #52]	; (8005170 <I2SEx_RxISR_I2SExt+0x90>)
 800513c:	428b      	cmp	r3, r1
 800513e:	d101      	bne.n	8005144 <I2SEx_RxISR_I2SExt+0x64>
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <I2SEx_RxISR_I2SExt+0x94>)
 8005142:	e001      	b.n	8005148 <I2SEx_RxISR_I2SExt+0x68>
 8005144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005148:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800514c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff03 	bl	8004f6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40003800 	.word	0x40003800
 8005174:	40003400 	.word	0x40003400

08005178 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_PWREx_EnableOverDrive+0x90>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_PWREx_EnableOverDrive+0x90>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_PWREx_EnableOverDrive+0x90>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_PWREx_EnableOverDrive+0x94>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a4:	f7fd ff94 	bl	80030d0 <HAL_GetTick>
 80051a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051aa:	e009      	b.n	80051c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051ac:	f7fd ff90 	bl	80030d0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ba:	d901      	bls.n	80051c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e01f      	b.n	8005200 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051c0:	4b13      	ldr	r3, [pc, #76]	; (8005210 <HAL_PWREx_EnableOverDrive+0x98>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d1ee      	bne.n	80051ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d4:	f7fd ff7c 	bl	80030d0 <HAL_GetTick>
 80051d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051da:	e009      	b.n	80051f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051dc:	f7fd ff78 	bl	80030d0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ea:	d901      	bls.n	80051f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e007      	b.n	8005200 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <HAL_PWREx_EnableOverDrive+0x98>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fc:	d1ee      	bne.n	80051dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	420e0040 	.word	0x420e0040
 8005210:	40007000 	.word	0x40007000
 8005214:	420e0044 	.word	0x420e0044

08005218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0cc      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800522c:	4b68      	ldr	r3, [pc, #416]	; (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d90c      	bls.n	8005254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b65      	ldr	r3, [pc, #404]	; (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b63      	ldr	r3, [pc, #396]	; (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0b8      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800526c:	4b59      	ldr	r3, [pc, #356]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a58      	ldr	r2, [pc, #352]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005284:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a52      	ldr	r2, [pc, #328]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800528e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b50      	ldr	r3, [pc, #320]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	494d      	ldr	r1, [pc, #308]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d044      	beq.n	8005338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d119      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e07f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b3f      	ldr	r3, [pc, #252]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e6:	4b3b      	ldr	r3, [pc, #236]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e067      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 0203 	bic.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4934      	ldr	r1, [pc, #208]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005308:	f7fd fee2 	bl	80030d0 <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530e:	e00a      	b.n	8005326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005310:	f7fd fede 	bl	80030d0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f241 3288 	movw	r2, #5000	; 0x1388
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e04f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 020c 	and.w	r2, r3, #12
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	429a      	cmp	r2, r3
 8005336:	d1eb      	bne.n	8005310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005338:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d20c      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e032      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800536c:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4916      	ldr	r1, [pc, #88]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	490e      	ldr	r1, [pc, #56]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800539e:	f000 f821 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	490a      	ldr	r1, [pc, #40]	; (80053d8 <HAL_RCC_ClockConfig+0x1c0>)
 80053b0:	5ccb      	ldrb	r3, [r1, r3]
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <HAL_RCC_ClockConfig+0x1c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fe42 	bl	8003048 <HAL_InitTick>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023c00 	.word	0x40023c00
 80053d4:	40023800 	.word	0x40023800
 80053d8:	0800bdc8 	.word	0x0800bdc8
 80053dc:	20000004 	.word	0x20000004
 80053e0:	20000008 	.word	0x20000008

080053e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e8:	b090      	sub	sp, #64	; 0x40
 80053ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
 80053f0:	2300      	movs	r3, #0
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f4:	2300      	movs	r3, #0
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053fc:	4b59      	ldr	r3, [pc, #356]	; (8005564 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	d00d      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x40>
 8005408:	2b08      	cmp	r3, #8
 800540a:	f200 80a1 	bhi.w	8005550 <HAL_RCC_GetSysClockFreq+0x16c>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0x34>
 8005412:	2b04      	cmp	r3, #4
 8005414:	d003      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x3a>
 8005416:	e09b      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005418:	4b53      	ldr	r3, [pc, #332]	; (8005568 <HAL_RCC_GetSysClockFreq+0x184>)
 800541a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800541c:	e09b      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800541e:	4b53      	ldr	r3, [pc, #332]	; (800556c <HAL_RCC_GetSysClockFreq+0x188>)
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005422:	e098      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005424:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <HAL_RCC_GetSysClockFreq+0x180>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800542e:	4b4d      	ldr	r3, [pc, #308]	; (8005564 <HAL_RCC_GetSysClockFreq+0x180>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d028      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543a:	4b4a      	ldr	r3, [pc, #296]	; (8005564 <HAL_RCC_GetSysClockFreq+0x180>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	2200      	movs	r2, #0
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	627a      	str	r2, [r7, #36]	; 0x24
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800544c:	2100      	movs	r1, #0
 800544e:	4b47      	ldr	r3, [pc, #284]	; (800556c <HAL_RCC_GetSysClockFreq+0x188>)
 8005450:	fb03 f201 	mul.w	r2, r3, r1
 8005454:	2300      	movs	r3, #0
 8005456:	fb00 f303 	mul.w	r3, r0, r3
 800545a:	4413      	add	r3, r2
 800545c:	4a43      	ldr	r2, [pc, #268]	; (800556c <HAL_RCC_GetSysClockFreq+0x188>)
 800545e:	fba0 1202 	umull	r1, r2, r0, r2
 8005462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005464:	460a      	mov	r2, r1
 8005466:	62ba      	str	r2, [r7, #40]	; 0x28
 8005468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546a:	4413      	add	r3, r2
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	2200      	movs	r2, #0
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	61fa      	str	r2, [r7, #28]
 8005476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800547a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800547e:	f7fb fbab 	bl	8000bd8 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4613      	mov	r3, r2
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548a:	e053      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800548c:	4b35      	ldr	r3, [pc, #212]	; (8005564 <HAL_RCC_GetSysClockFreq+0x180>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	2200      	movs	r2, #0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	617a      	str	r2, [r7, #20]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800549e:	f04f 0b00 	mov.w	fp, #0
 80054a2:	4652      	mov	r2, sl
 80054a4:	465b      	mov	r3, fp
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	0159      	lsls	r1, r3, #5
 80054b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b4:	0150      	lsls	r0, r2, #5
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	ebb2 080a 	subs.w	r8, r2, sl
 80054be:	eb63 090b 	sbc.w	r9, r3, fp
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054d6:	ebb2 0408 	subs.w	r4, r2, r8
 80054da:	eb63 0509 	sbc.w	r5, r3, r9
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	00eb      	lsls	r3, r5, #3
 80054e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ec:	00e2      	lsls	r2, r4, #3
 80054ee:	4614      	mov	r4, r2
 80054f0:	461d      	mov	r5, r3
 80054f2:	eb14 030a 	adds.w	r3, r4, sl
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	eb45 030b 	adc.w	r3, r5, fp
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800550a:	4629      	mov	r1, r5
 800550c:	028b      	lsls	r3, r1, #10
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005514:	4621      	mov	r1, r4
 8005516:	028a      	lsls	r2, r1, #10
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	2200      	movs	r2, #0
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	60fa      	str	r2, [r7, #12]
 8005524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005528:	f7fb fb56 	bl	8000bd8 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_GetSysClockFreq+0x180>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	3301      	adds	r3, #1
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800554e:	e002      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetSysClockFreq+0x184>)
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005558:	4618      	mov	r0, r3
 800555a:	3740      	adds	r7, #64	; 0x40
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800
 8005568:	00f42400 	.word	0x00f42400
 800556c:	016e3600 	.word	0x016e3600

08005570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005574:	4b03      	ldr	r3, [pc, #12]	; (8005584 <HAL_RCC_GetHCLKFreq+0x14>)
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000004 	.word	0x20000004

08005588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800558c:	f7ff fff0 	bl	8005570 <HAL_RCC_GetHCLKFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	0a9b      	lsrs	r3, r3, #10
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	4903      	ldr	r1, [pc, #12]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800559e:	5ccb      	ldrb	r3, [r1, r3]
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40023800 	.word	0x40023800
 80055ac:	0800bdd8 	.word	0x0800bdd8

080055b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055b4:	f7ff ffdc 	bl	8005570 <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	0b5b      	lsrs	r3, r3, #13
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4903      	ldr	r1, [pc, #12]	; (80055d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40023800 	.word	0x40023800
 80055d4:	0800bdd8 	.word	0x0800bdd8

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005600:	4b66      	ldr	r3, [pc, #408]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005606:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560e:	4963      	ldr	r1, [pc, #396]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005622:	4b5e      	ldr	r3, [pc, #376]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005628:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	495a      	ldr	r1, [pc, #360]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005658:	2b00      	cmp	r3, #0
 800565a:	d075      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005662:	f7fd fd35 	bl	80030d0 <HAL_GetTick>
 8005666:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005668:	e008      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800566a:	f7fd fd31 	bl	80030d0 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e1dc      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800567c:	4b47      	ldr	r3, [pc, #284]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f0      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	019a      	lsls	r2, r3, #6
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	071b      	lsls	r3, r3, #28
 80056a0:	493e      	ldr	r1, [pc, #248]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056b4:	4b39      	ldr	r3, [pc, #228]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ba:	0f1b      	lsrs	r3, r3, #28
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	019a      	lsls	r2, r3, #6
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	431a      	orrs	r2, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	4931      	ldr	r1, [pc, #196]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e2:	f023 021f 	bic.w	r2, r3, #31
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	492b      	ldr	r1, [pc, #172]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	019a      	lsls	r2, r3, #6
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	061b      	lsls	r3, r3, #24
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	071b      	lsls	r3, r3, #28
 8005714:	4921      	ldr	r1, [pc, #132]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800571c:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005722:	f7fd fcd5 	bl	80030d0 <HAL_GetTick>
 8005726:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005728:	e008      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800572a:	f7fd fcd1 	bl	80030d0 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e17c      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800573c:	4b17      	ldr	r3, [pc, #92]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d112      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80ce 	beq.w	800590a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005776:	f040 80c8 	bne.w	800590a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005780:	f7fd fca6 	bl	80030d0 <HAL_GetTick>
 8005784:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005786:	e00f      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005788:	f7fd fca2 	bl	80030d0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d908      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e14d      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	42470068 	.word	0x42470068
 80057a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a8:	4ba5      	ldr	r3, [pc, #660]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b4:	d0e8      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d02e      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80057c2:	4b9f      	ldr	r3, [pc, #636]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	3301      	adds	r3, #1
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057d4:	4b9a      	ldr	r3, [pc, #616]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	019a      	lsls	r2, r3, #6
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	3b01      	subs	r3, #1
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	071b      	lsls	r3, r3, #28
 80057fe:	4990      	ldr	r1, [pc, #576]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005806:	4b8e      	ldr	r3, [pc, #568]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	3b01      	subs	r3, #1
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	4989      	ldr	r1, [pc, #548]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d02c      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	0c1b      	lsrs	r3, r3, #16
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	3301      	adds	r3, #1
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800583e:	4b80      	ldr	r3, [pc, #512]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	0e1b      	lsrs	r3, r3, #24
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	019a      	lsls	r2, r3, #6
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	3b01      	subs	r3, #1
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	071b      	lsls	r3, r3, #28
 8005868:	4975      	ldr	r1, [pc, #468]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	4970      	ldr	r1, [pc, #448]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d024      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589a:	d11f      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800589c:	4b68      	ldr	r3, [pc, #416]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	0e1b      	lsrs	r3, r3, #24
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058aa:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	0f1b      	lsrs	r3, r3, #28
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	019a      	lsls	r2, r3, #6
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	3b01      	subs	r3, #1
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	431a      	orrs	r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	071b      	lsls	r3, r3, #28
 80058d4:	495a      	ldr	r1, [pc, #360]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058dc:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058e2:	f7fd fbf5 	bl	80030d0 <HAL_GetTick>
 80058e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058e8:	e008      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058ea:	f7fd fbf1 	bl	80030d0 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e09c      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005908:	d1ef      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8083 	beq.w	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	4b48      	ldr	r3, [pc, #288]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	4a47      	ldr	r2, [pc, #284]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	6413      	str	r3, [r2, #64]	; 0x40
 8005928:	4b45      	ldr	r3, [pc, #276]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005934:	4b44      	ldr	r3, [pc, #272]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a43      	ldr	r2, [pc, #268]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800593a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005940:	f7fd fbc6 	bl	80030d0 <HAL_GetTick>
 8005944:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005946:	e008      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005948:	f7fd fbc2 	bl	80030d0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e06d      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800595a:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02f      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	d028      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005984:	4b2e      	ldr	r3, [pc, #184]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800598e:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005994:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800599a:	4a29      	ldr	r2, [pc, #164]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d114      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fd fb90 	bl	80030d0 <HAL_GetTick>
 80059b0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b2:	e00a      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b4:	f7fd fb8c 	bl	80030d0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e035      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ca:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0ee      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f8:	4911      	ldr	r1, [pc, #68]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
 80059fe:	e005      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4a0e      	ldr	r2, [pc, #56]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a0a:	6093      	str	r3, [r2, #8]
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a18:	4909      	ldr	r1, [pc, #36]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d004      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8005a32:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470070 	.word	0x42470070
 8005a48:	40007000 	.word	0x40007000
 8005a4c:	42470e40 	.word	0x42470e40
 8005a50:	424711e0 	.word	0x424711e0

08005a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d13e      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a72:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12f      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a88:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a8a:	617b      	str	r3, [r7, #20]
          break;
 8005a8c:	e02f      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9a:	d108      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	e007      	b.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab6:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad8:	0f1b      	lsrs	r3, r3, #28
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]
          break;
 8005ae6:	e002      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
          break;
 8005aec:	bf00      	nop
        }
      }
      break;
 8005aee:	bf00      	nop
    }
  }
  return frequency;
 8005af0:	697b      	ldr	r3, [r7, #20]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	00bb8000 	.word	0x00bb8000
 8005b08:	016e3600 	.word	0x016e3600
 8005b0c:	00f42400 	.word	0x00f42400

08005b10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e273      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d075      	beq.n	8005c1a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b2e:	4b88      	ldr	r3, [pc, #544]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d00c      	beq.n	8005b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3a:	4b85      	ldr	r3, [pc, #532]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d112      	bne.n	8005b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b46:	4b82      	ldr	r3, [pc, #520]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b52:	d10b      	bne.n	8005b6c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b54:	4b7e      	ldr	r3, [pc, #504]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d05b      	beq.n	8005c18 <HAL_RCC_OscConfig+0x108>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d157      	bne.n	8005c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e24e      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d106      	bne.n	8005b84 <HAL_RCC_OscConfig+0x74>
 8005b76:	4b76      	ldr	r3, [pc, #472]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a75      	ldr	r2, [pc, #468]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e01d      	b.n	8005bc0 <HAL_RCC_OscConfig+0xb0>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x98>
 8005b8e:	4b70      	ldr	r3, [pc, #448]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6f      	ldr	r2, [pc, #444]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	4b6d      	ldr	r3, [pc, #436]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a6c      	ldr	r2, [pc, #432]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCC_OscConfig+0xb0>
 8005ba8:	4b69      	ldr	r3, [pc, #420]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a68      	ldr	r2, [pc, #416]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	4b66      	ldr	r3, [pc, #408]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fd fa82 	bl	80030d0 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd0:	f7fd fa7e 	bl	80030d0 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	; 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e213      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be2:	4b5b      	ldr	r3, [pc, #364]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0xc0>
 8005bee:	e014      	b.n	8005c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fd fa6e 	bl	80030d0 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf8:	f7fd fa6a 	bl	80030d0 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e1ff      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0a:	4b51      	ldr	r3, [pc, #324]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0xe8>
 8005c16:	e000      	b.n	8005c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d063      	beq.n	8005cee <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c26:	4b4a      	ldr	r3, [pc, #296]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 030c 	and.w	r3, r3, #12
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c32:	4b47      	ldr	r3, [pc, #284]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d11c      	bne.n	8005c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3e:	4b44      	ldr	r3, [pc, #272]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d116      	bne.n	8005c78 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c4a:	4b41      	ldr	r3, [pc, #260]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_RCC_OscConfig+0x152>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d001      	beq.n	8005c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e1d3      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c62:	4b3b      	ldr	r3, [pc, #236]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4937      	ldr	r1, [pc, #220]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c76:	e03a      	b.n	8005cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d020      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c80:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <HAL_RCC_OscConfig+0x244>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fd fa23 	bl	80030d0 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8e:	f7fd fa1f 	bl	80030d0 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e1b4      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca0:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cac:	4b28      	ldr	r3, [pc, #160]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4925      	ldr	r1, [pc, #148]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	600b      	str	r3, [r1, #0]
 8005cc0:	e015      	b.n	8005cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc2:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <HAL_RCC_OscConfig+0x244>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fd fa02 	bl	80030d0 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd0:	f7fd f9fe 	bl	80030d0 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e193      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d036      	beq.n	8005d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_RCC_OscConfig+0x248>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fd f9e2 	bl	80030d0 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d10:	f7fd f9de 	bl	80030d0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e173      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_RCC_OscConfig+0x240>)
 8005d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0x200>
 8005d2e:	e01b      	b.n	8005d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <HAL_RCC_OscConfig+0x248>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fd f9cb 	bl	80030d0 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d3c:	e00e      	b.n	8005d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d3e:	f7fd f9c7 	bl	80030d0 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d907      	bls.n	8005d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e15c      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
 8005d50:	40023800 	.word	0x40023800
 8005d54:	42470000 	.word	0x42470000
 8005d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5c:	4b8a      	ldr	r3, [pc, #552]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ea      	bne.n	8005d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8097 	beq.w	8005ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7a:	4b83      	ldr	r3, [pc, #524]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10f      	bne.n	8005da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	4b7f      	ldr	r3, [pc, #508]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	4a7e      	ldr	r2, [pc, #504]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	6413      	str	r3, [r2, #64]	; 0x40
 8005d96:	4b7c      	ldr	r3, [pc, #496]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da6:	4b79      	ldr	r3, [pc, #484]	; (8005f8c <HAL_RCC_OscConfig+0x47c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db2:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <HAL_RCC_OscConfig+0x47c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a75      	ldr	r2, [pc, #468]	; (8005f8c <HAL_RCC_OscConfig+0x47c>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7fd f987 	bl	80030d0 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7fd f983 	bl	80030d0 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e118      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd8:	4b6c      	ldr	r3, [pc, #432]	; (8005f8c <HAL_RCC_OscConfig+0x47c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x2ea>
 8005dec:	4b66      	ldr	r3, [pc, #408]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	4a65      	ldr	r2, [pc, #404]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6713      	str	r3, [r2, #112]	; 0x70
 8005df8:	e01c      	b.n	8005e34 <HAL_RCC_OscConfig+0x324>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x30c>
 8005e02:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a60      	ldr	r2, [pc, #384]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e08:	f043 0304 	orr.w	r3, r3, #4
 8005e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0e:	4b5e      	ldr	r3, [pc, #376]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a5d      	ldr	r2, [pc, #372]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCC_OscConfig+0x324>
 8005e1c:	4b5a      	ldr	r3, [pc, #360]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	4a59      	ldr	r2, [pc, #356]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	6713      	str	r3, [r2, #112]	; 0x70
 8005e28:	4b57      	ldr	r3, [pc, #348]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	4a56      	ldr	r2, [pc, #344]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e2e:	f023 0304 	bic.w	r3, r3, #4
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d015      	beq.n	8005e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3c:	f7fd f948 	bl	80030d0 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e42:	e00a      	b.n	8005e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e44:	f7fd f944 	bl	80030d0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e0d7      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5a:	4b4b      	ldr	r3, [pc, #300]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0ee      	beq.n	8005e44 <HAL_RCC_OscConfig+0x334>
 8005e66:	e014      	b.n	8005e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e68:	f7fd f932 	bl	80030d0 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7fd f92e 	bl	80030d0 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e0c1      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e86:	4b40      	ldr	r3, [pc, #256]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ee      	bne.n	8005e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e98:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	4a3a      	ldr	r2, [pc, #232]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80ad 	beq.w	8006008 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eae:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d060      	beq.n	8005f7c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d145      	bne.n	8005f4e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec2:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <HAL_RCC_OscConfig+0x480>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fd f902 	bl	80030d0 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fd f8fe 	bl	80030d0 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e093      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee2:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	019b      	lsls	r3, r3, #6
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	3b01      	subs	r3, #1
 8005f08:	041b      	lsls	r3, r3, #16
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	061b      	lsls	r3, r3, #24
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	071b      	lsls	r3, r3, #28
 8005f1a:	491b      	ldr	r1, [pc, #108]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_RCC_OscConfig+0x480>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fd f8d3 	bl	80030d0 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fd f8cf 	bl	80030d0 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e064      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x41e>
 8005f4c:	e05c      	b.n	8006008 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4e:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <HAL_RCC_OscConfig+0x480>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fd f8bc 	bl	80030d0 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7fd f8b8 	bl	80030d0 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e04d      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCC_OscConfig+0x478>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x44c>
 8005f7a:	e045      	b.n	8006008 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d107      	bne.n	8005f94 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e040      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	40007000 	.word	0x40007000
 8005f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f94:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d030      	beq.n	8006004 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d129      	bne.n	8006004 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d122      	bne.n	8006004 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d119      	bne.n	8006004 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d10f      	bne.n	8006004 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d107      	bne.n	8006004 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800

08006018 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e066      	b.n	80060fc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7f5b      	ldrb	r3, [r3, #29]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fb fe8a 	bl	8001d58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	22ca      	movs	r2, #202	; 0xca
 8006050:	625a      	str	r2, [r3, #36]	; 0x24
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2253      	movs	r2, #83	; 0x53
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f998 	bl	8006390 <RTC_EnterInitMode>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d12c      	bne.n	80060c4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6899      	ldr	r1, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68d2      	ldr	r2, [r2, #12]
 80060a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6919      	ldr	r1, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	041a      	lsls	r2, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f99f 	bl	80063fe <RTC_ExitInitMode>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d113      	bne.n	80060f2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	22ff      	movs	r2, #255	; 0xff
 80060f8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	7f1b      	ldrb	r3, [r3, #28]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_RTC_SetTime+0x1c>
 800611c:	2302      	movs	r3, #2
 800611e:	e087      	b.n	8006230 <HAL_RTC_SetTime+0x12c>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2202      	movs	r2, #2
 800612a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d126      	bne.n	8006180 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f97c 	bl	8006448 <RTC_ByteToBcd2>
 8006150:	4603      	mov	r3, r0
 8006152:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f975 	bl	8006448 <RTC_ByteToBcd2>
 800615e:	4603      	mov	r3, r0
 8006160:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006162:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	789b      	ldrb	r3, [r3, #2]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f96d 	bl	8006448 <RTC_ByteToBcd2>
 800616e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006170:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	78db      	ldrb	r3, [r3, #3]
 8006178:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e018      	b.n	80061b2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061a0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80061a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	78db      	ldrb	r3, [r3, #3]
 80061ac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	22ca      	movs	r2, #202	; 0xca
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2253      	movs	r2, #83	; 0x53
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f8e4 	bl	8006390 <RTC_EnterInitMode>
 80061c8:	4603      	mov	r3, r0
 80061ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d120      	bne.n	8006214 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6899      	ldr	r1, [r3, #8]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f8f7 	bl	80063fe <RTC_ExitInitMode>
 8006210:	4603      	mov	r3, r0
 8006212:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006214:	7cfb      	ldrb	r3, [r7, #19]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]

  return status;
 800622e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006230:	4618      	mov	r0, r3
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd90      	pop	{r4, r7, pc}

08006238 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	7f1b      	ldrb	r3, [r3, #28]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_RTC_SetDate+0x1c>
 8006250:	2302      	movs	r3, #2
 8006252:	e071      	b.n	8006338 <HAL_RTC_SetDate+0x100>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2202      	movs	r2, #2
 800625e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10e      	bne.n	8006284 <HAL_RTC_SetDate+0x4c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	b2db      	uxtb	r3, r3
 800627c:	330a      	adds	r3, #10
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11c      	bne.n	80062c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	78db      	ldrb	r3, [r3, #3]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f8da 	bl	8006448 <RTC_ByteToBcd2>
 8006294:	4603      	mov	r3, r0
 8006296:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 f8d3 	bl	8006448 <RTC_ByteToBcd2>
 80062a2:	4603      	mov	r3, r0
 80062a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	789b      	ldrb	r3, [r3, #2]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f8cb 	bl	8006448 <RTC_ByteToBcd2>
 80062b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e00e      	b.n	80062e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	78db      	ldrb	r3, [r3, #3]
 80062c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	22ca      	movs	r2, #202	; 0xca
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2253      	movs	r2, #83	; 0x53
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f84c 	bl	8006390 <RTC_EnterInitMode>
 80062f8:	4603      	mov	r3, r0
 80062fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10c      	bne.n	800631c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800630c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006310:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f873 	bl	80063fe <RTC_ExitInitMode>
 8006318:	4603      	mov	r3, r0
 800631a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	771a      	strb	r2, [r3, #28]

  return status;
 8006336:	7cfb      	ldrb	r3, [r7, #19]
}
 8006338:	4618      	mov	r0, r3
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}

08006340 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800635a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800635c:	f7fc feb8 	bl	80030d0 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006362:	e009      	b.n	8006378 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006364:	f7fc feb4 	bl	80030d0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006372:	d901      	bls.n	8006378 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e007      	b.n	8006388 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0ee      	beq.n	8006364 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d122      	bne.n	80063f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063be:	f7fc fe87 	bl	80030d0 <HAL_GetTick>
 80063c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063c4:	e00c      	b.n	80063e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063c6:	f7fc fe83 	bl	80030d0 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d4:	d904      	bls.n	80063e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2204      	movs	r2, #4
 80063da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <RTC_EnterInitMode+0x64>
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d1e8      	bne.n	80063c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006418:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ff89 	bl	8006340 <HAL_RTC_WaitForSynchro>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006456:	e005      	b.n	8006464 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	3301      	adds	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	3b0a      	subs	r3, #10
 8006462:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b09      	cmp	r3, #9
 8006468:	d8f6      	bhi.n	8006458 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	b2da      	uxtb	r2, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	4313      	orrs	r3, r2
 8006474:	b2db      	uxtb	r3, r3
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e07b      	b.n	800658c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d108      	bne.n	80064ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a4:	d009      	beq.n	80064ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	61da      	str	r2, [r3, #28]
 80064ac:	e005      	b.n	80064ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fb fc69 	bl	8001dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	ea42 0103 	orr.w	r1, r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	f003 0104 	and.w	r1, r3, #4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	f003 0210 	and.w	r2, r3, #16
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69da      	ldr	r2, [r3, #28]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800657a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e01a      	b.n	80065dc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb fcb0 	bl	8001f24 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_SPI_Transmit+0x22>
 8006602:	2302      	movs	r3, #2
 8006604:	e126      	b.n	8006854 <HAL_SPI_Transmit+0x270>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800660e:	f7fc fd5f 	bl	80030d0 <HAL_GetTick>
 8006612:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d002      	beq.n	800662a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006624:	2302      	movs	r3, #2
 8006626:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006628:	e10b      	b.n	8006842 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_SPI_Transmit+0x52>
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	77fb      	strb	r3, [r7, #31]
    goto error;
 800663a:	e102      	b.n	8006842 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2203      	movs	r2, #3
 8006640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006682:	d10f      	bne.n	80066a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d007      	beq.n	80066c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ca:	d14b      	bne.n	8006764 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_Transmit+0xf6>
 80066d4:	8afb      	ldrh	r3, [r7, #22]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d13e      	bne.n	8006758 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066fe:	e02b      	b.n	8006758 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d112      	bne.n	8006734 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	881a      	ldrh	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	1c9a      	adds	r2, r3, #2
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	86da      	strh	r2, [r3, #54]	; 0x36
 8006732:	e011      	b.n	8006758 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006734:	f7fc fccc 	bl	80030d0 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d803      	bhi.n	800674c <HAL_SPI_Transmit+0x168>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d102      	bne.n	8006752 <HAL_SPI_Transmit+0x16e>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006756:	e074      	b.n	8006842 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1ce      	bne.n	8006700 <HAL_SPI_Transmit+0x11c>
 8006762:	e04c      	b.n	80067fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_Transmit+0x18e>
 800676c:	8afb      	ldrh	r3, [r7, #22]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d140      	bne.n	80067f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006798:	e02c      	b.n	80067f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d113      	bne.n	80067d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80067ce:	e011      	b.n	80067f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d0:	f7fc fc7e 	bl	80030d0 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d803      	bhi.n	80067e8 <HAL_SPI_Transmit+0x204>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d102      	bne.n	80067ee <HAL_SPI_Transmit+0x20a>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067f2:	e026      	b.n	8006842 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1cd      	bne.n	800679a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fbda 	bl	8006fbc <SPI_EndRxTxTransaction>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800681c:	2300      	movs	r3, #0
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e000      	b.n	8006842 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006840:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006852:	7ffb      	ldrb	r3, [r7, #31]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006878:	d112      	bne.n	80068a0 <HAL_SPI_Receive+0x44>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2204      	movs	r2, #4
 8006886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f8f1 	bl	8006a7e <HAL_SPI_TransmitReceive>
 800689c:	4603      	mov	r3, r0
 800689e:	e0ea      	b.n	8006a76 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_SPI_Receive+0x52>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0e3      	b.n	8006a76 <HAL_SPI_Receive+0x21a>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b6:	f7fc fc0b 	bl	80030d0 <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d002      	beq.n	80068ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
 80068ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068cc:	e0ca      	b.n	8006a64 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <HAL_SPI_Receive+0x7e>
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068de:	e0c1      	b.n	8006a64 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	88fa      	ldrh	r2, [r7, #6]
 80068fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006926:	d10f      	bne.n	8006948 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006946:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d007      	beq.n	8006966 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006964:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d162      	bne.n	8006a34 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800696e:	e02e      	b.n	80069ce <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b01      	cmp	r3, #1
 800697c:	d115      	bne.n	80069aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f103 020c 	add.w	r2, r3, #12
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069a8:	e011      	b.n	80069ce <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069aa:	f7fc fb91 	bl	80030d0 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d803      	bhi.n	80069c2 <HAL_SPI_Receive+0x166>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d102      	bne.n	80069c8 <HAL_SPI_Receive+0x16c>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069cc:	e04a      	b.n	8006a64 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1cb      	bne.n	8006970 <HAL_SPI_Receive+0x114>
 80069d8:	e031      	b.n	8006a3e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d113      	bne.n	8006a10 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	b292      	uxth	r2, r2
 80069f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a0e:	e011      	b.n	8006a34 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a10:	f7fc fb5e 	bl	80030d0 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d803      	bhi.n	8006a28 <HAL_SPI_Receive+0x1cc>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a26:	d102      	bne.n	8006a2e <HAL_SPI_Receive+0x1d2>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a32:	e017      	b.n	8006a64 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1cd      	bne.n	80069da <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fa54 	bl	8006ef0 <SPI_EndRxTransaction>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	75fb      	strb	r3, [r7, #23]
 8006a60:	e000      	b.n	8006a64 <HAL_SPI_Receive+0x208>
  }

error :
 8006a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b08c      	sub	sp, #48	; 0x30
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_SPI_TransmitReceive+0x26>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e18a      	b.n	8006dba <HAL_SPI_TransmitReceive+0x33c>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aac:	f7fc fb10 	bl	80030d0 <HAL_GetTick>
 8006ab0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ac2:	887b      	ldrh	r3, [r7, #2]
 8006ac4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d00f      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x70>
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad4:	d107      	bne.n	8006ae6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <HAL_SPI_TransmitReceive+0x68>
 8006ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d003      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006aec:	e15b      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x82>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x82>
 8006afa:	887b      	ldrh	r3, [r7, #2]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b06:	e14e      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d003      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2205      	movs	r2, #5
 8006b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	887a      	ldrh	r2, [r7, #2]
 8006b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	887a      	ldrh	r2, [r7, #2]
 8006b32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	887a      	ldrh	r2, [r7, #2]
 8006b3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	887a      	ldrh	r2, [r7, #2]
 8006b44:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d007      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b78:	d178      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_SPI_TransmitReceive+0x10a>
 8006b82:	8b7b      	ldrh	r3, [r7, #26]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d166      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	881a      	ldrh	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	1c9a      	adds	r2, r3, #2
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bac:	e053      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d11b      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x176>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x176>
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d113      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	881a      	ldrh	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d119      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x1b8>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d014      	beq.n	8006c36 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	b292      	uxth	r2, r2
 8006c18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c32:	2301      	movs	r3, #1
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c36:	f7fc fa4b 	bl	80030d0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d807      	bhi.n	8006c56 <HAL_SPI_TransmitReceive+0x1d8>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d003      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c54:	e0a7      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1a6      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x130>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1a1      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x130>
 8006c6a:	e07c      	b.n	8006d66 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <HAL_SPI_TransmitReceive+0x1fc>
 8006c74:	8b7b      	ldrh	r3, [r7, #26]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d16b      	bne.n	8006d52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ca0:	e057      	b.n	8006d52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d11c      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x26c>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d017      	beq.n	8006cea <HAL_SPI_TransmitReceive+0x26c>
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d114      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	7812      	ldrb	r2, [r2, #0]
 8006ccc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d119      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x2ae>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d014      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d2c:	f7fc f9d0 	bl	80030d0 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d803      	bhi.n	8006d44 <HAL_SPI_TransmitReceive+0x2c6>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x2cc>
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d103      	bne.n	8006d52 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d50:	e029      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1a2      	bne.n	8006ca2 <HAL_SPI_TransmitReceive+0x224>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d19d      	bne.n	8006ca2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f926 	bl	8006fbc <SPI_EndRxTxTransaction>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d82:	e010      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	e000      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006da4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3730      	adds	r7, #48	; 0x30
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dd0:	b2db      	uxtb	r3, r3
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df0:	f7fc f96e 	bl	80030d0 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e00:	f7fc f966 	bl	80030d0 <HAL_GetTick>
 8006e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e06:	4b39      	ldr	r3, [pc, #228]	; (8006eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	015b      	lsls	r3, r3, #5
 8006e0c:	0d1b      	lsrs	r3, r3, #20
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e16:	e054      	b.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d050      	beq.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e20:	f7fc f956 	bl	80030d0 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d902      	bls.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d13d      	bne.n	8006eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4e:	d111      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e58:	d004      	beq.n	8006e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e62:	d107      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7c:	d10f      	bne.n	8006e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e017      	b.n	8006ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d19b      	bne.n	8006e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000004 	.word	0x20000004

08006ef0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f04:	d111      	bne.n	8006f2a <SPI_EndRxTransaction+0x3a>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0e:	d004      	beq.n	8006f1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	d107      	bne.n	8006f2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f32:	d12a      	bne.n	8006f8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3c:	d012      	beq.n	8006f64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff ff49 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02d      	beq.n	8006fb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e026      	b.n	8006fb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff ff36 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01a      	beq.n	8006fb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e013      	b.n	8006fb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2101      	movs	r1, #1
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff ff23 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e000      	b.n	8006fb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <SPI_EndRxTxTransaction+0x7c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	; (800703c <SPI_EndRxTxTransaction+0x80>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	0d5b      	lsrs	r3, r3, #21
 8006fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
 8006fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe6:	d112      	bne.n	800700e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fef4 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e00f      	b.n	800702e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	3b01      	subs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d0f2      	beq.n	800700e <SPI_EndRxTxTransaction+0x52>
 8007028:	e000      	b.n	800702c <SPI_EndRxTxTransaction+0x70>
        break;
 800702a:	bf00      	nop
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000004 	.word	0x20000004
 800703c:	165e9f81 	.word	0x165e9f81

08007040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e041      	b.n	80070d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa ff84 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f000 fbea 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d001      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e04e      	b.n	8007196 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a23      	ldr	r2, [pc, #140]	; (80071a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007122:	d01d      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1e      	ldr	r2, [pc, #120]	; (80071ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1c      	ldr	r2, [pc, #112]	; (80071b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1b      	ldr	r2, [pc, #108]	; (80071b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a18      	ldr	r2, [pc, #96]	; (80071bc <HAL_TIM_Base_Start_IT+0xdc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d111      	bne.n	8007184 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d010      	beq.n	8007194 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007182:	e007      	b.n	8007194 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40010400 	.word	0x40010400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40001800 	.word	0x40001800

080071c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	f241 1311 	movw	r3, #4369	; 0x1111
 80071e2:	4013      	ands	r3, r2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10f      	bne.n	8007208 <HAL_TIM_Base_Stop_IT+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	f240 4344 	movw	r3, #1092	; 0x444
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <HAL_TIM_Base_Stop_IT+0x48>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e041      	b.n	80072b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f839 	bl	80072bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f000 fafb 	bl	8007858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d122      	bne.n	800732c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d11b      	bne.n	800732c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0202 	mvn.w	r2, #2
 80072fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa81 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa73 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa84 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b04      	cmp	r3, #4
 8007338:	d122      	bne.n	8007380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b04      	cmp	r3, #4
 8007346:	d11b      	bne.n	8007380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0204 	mvn.w	r2, #4
 8007350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa57 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 800736c:	e005      	b.n	800737a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa49 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fa5a 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b08      	cmp	r3, #8
 800738c:	d122      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b08      	cmp	r3, #8
 800739a:	d11b      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0208 	mvn.w	r2, #8
 80073a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa2d 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 80073c0:	e005      	b.n	80073ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa1f 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa30 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b10      	cmp	r3, #16
 80073e0:	d122      	bne.n	8007428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0210 	mvn.w	r2, #16
 80073f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2208      	movs	r2, #8
 80073fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa03 	bl	800781a <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f9f5 	bl	8007806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa06 	bl	800782e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10e      	bne.n	8007454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d107      	bne.n	8007454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0201 	mvn.w	r2, #1
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9cf 	bl	80077f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	2b80      	cmp	r3, #128	; 0x80
 8007460:	d10e      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746c:	2b80      	cmp	r3, #128	; 0x80
 800746e:	d107      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fd5c 	bl	8007f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d10e      	bne.n	80074ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b40      	cmp	r3, #64	; 0x40
 800749a:	d107      	bne.n	80074ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9cb 	bl	8007842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d10e      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d107      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0220 	mvn.w	r2, #32
 80074d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fd26 	bl	8007f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e0ae      	b.n	800765c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b0c      	cmp	r3, #12
 800750a:	f200 809f 	bhi.w	800764c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007549 	.word	0x08007549
 8007518:	0800764d 	.word	0x0800764d
 800751c:	0800764d 	.word	0x0800764d
 8007520:	0800764d 	.word	0x0800764d
 8007524:	08007589 	.word	0x08007589
 8007528:	0800764d 	.word	0x0800764d
 800752c:	0800764d 	.word	0x0800764d
 8007530:	0800764d 	.word	0x0800764d
 8007534:	080075cb 	.word	0x080075cb
 8007538:	0800764d 	.word	0x0800764d
 800753c:	0800764d 	.word	0x0800764d
 8007540:	0800764d 	.word	0x0800764d
 8007544:	0800760b 	.word	0x0800760b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fa22 	bl	8007998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6999      	ldr	r1, [r3, #24]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	619a      	str	r2, [r3, #24]
      break;
 8007586:	e064      	b.n	8007652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fa72 	bl	8007a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6999      	ldr	r1, [r3, #24]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	021a      	lsls	r2, r3, #8
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	619a      	str	r2, [r3, #24]
      break;
 80075c8:	e043      	b.n	8007652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fac7 	bl	8007b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0208 	orr.w	r2, r2, #8
 80075e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0204 	bic.w	r2, r2, #4
 80075f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69d9      	ldr	r1, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	61da      	str	r2, [r3, #28]
      break;
 8007608:	e023      	b.n	8007652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fb1b 	bl	8007c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69d9      	ldr	r1, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	021a      	lsls	r2, r3, #8
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	61da      	str	r2, [r3, #28]
      break;
 800764a:	e002      	b.n	8007652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
      break;
 8007650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIM_ConfigClockSource+0x1c>
 800767c:	2302      	movs	r3, #2
 800767e:	e0b4      	b.n	80077ea <HAL_TIM_ConfigClockSource+0x186>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800769e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b8:	d03e      	beq.n	8007738 <HAL_TIM_ConfigClockSource+0xd4>
 80076ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076be:	f200 8087 	bhi.w	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c6:	f000 8086 	beq.w	80077d6 <HAL_TIM_ConfigClockSource+0x172>
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ce:	d87f      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076d0:	2b70      	cmp	r3, #112	; 0x70
 80076d2:	d01a      	beq.n	800770a <HAL_TIM_ConfigClockSource+0xa6>
 80076d4:	2b70      	cmp	r3, #112	; 0x70
 80076d6:	d87b      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b60      	cmp	r3, #96	; 0x60
 80076da:	d050      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x11a>
 80076dc:	2b60      	cmp	r3, #96	; 0x60
 80076de:	d877      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076e0:	2b50      	cmp	r3, #80	; 0x50
 80076e2:	d03c      	beq.n	800775e <HAL_TIM_ConfigClockSource+0xfa>
 80076e4:	2b50      	cmp	r3, #80	; 0x50
 80076e6:	d873      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d058      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x13a>
 80076ec:	2b40      	cmp	r3, #64	; 0x40
 80076ee:	d86f      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b30      	cmp	r3, #48	; 0x30
 80076f2:	d064      	beq.n	80077be <HAL_TIM_ConfigClockSource+0x15a>
 80076f4:	2b30      	cmp	r3, #48	; 0x30
 80076f6:	d86b      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d060      	beq.n	80077be <HAL_TIM_ConfigClockSource+0x15a>
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d867      	bhi.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b00      	cmp	r3, #0
 8007702:	d05c      	beq.n	80077be <HAL_TIM_ConfigClockSource+0x15a>
 8007704:	2b10      	cmp	r3, #16
 8007706:	d05a      	beq.n	80077be <HAL_TIM_ConfigClockSource+0x15a>
 8007708:	e062      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6899      	ldr	r1, [r3, #8]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f000 fb67 	bl	8007dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800772c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	609a      	str	r2, [r3, #8]
      break;
 8007736:	e04f      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	6899      	ldr	r1, [r3, #8]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f000 fb50 	bl	8007dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800775a:	609a      	str	r2, [r3, #8]
      break;
 800775c:	e03c      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6859      	ldr	r1, [r3, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	461a      	mov	r2, r3
 800776c:	f000 fac4 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2150      	movs	r1, #80	; 0x50
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fb1d 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 800777c:	e02c      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6859      	ldr	r1, [r3, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	461a      	mov	r2, r3
 800778c:	f000 fae3 	bl	8007d56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2160      	movs	r1, #96	; 0x60
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fb0d 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 800779c:	e01c      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6859      	ldr	r1, [r3, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	461a      	mov	r2, r3
 80077ac:	f000 faa4 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2140      	movs	r1, #64	; 0x40
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fafd 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 80077bc:	e00c      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f000 faf4 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 80077ce:	e003      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
      break;
 80077d4:	e000      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
	...

08007858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a40      	ldr	r2, [pc, #256]	; (800796c <TIM_Base_SetConfig+0x114>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d013      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d00f      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3d      	ldr	r2, [pc, #244]	; (8007970 <TIM_Base_SetConfig+0x118>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00b      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a3c      	ldr	r2, [pc, #240]	; (8007974 <TIM_Base_SetConfig+0x11c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a3b      	ldr	r2, [pc, #236]	; (8007978 <TIM_Base_SetConfig+0x120>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3a      	ldr	r2, [pc, #232]	; (800797c <TIM_Base_SetConfig+0x124>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d108      	bne.n	80078aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a2f      	ldr	r2, [pc, #188]	; (800796c <TIM_Base_SetConfig+0x114>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d02b      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b8:	d027      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2c      	ldr	r2, [pc, #176]	; (8007970 <TIM_Base_SetConfig+0x118>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d023      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2b      	ldr	r2, [pc, #172]	; (8007974 <TIM_Base_SetConfig+0x11c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01f      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2a      	ldr	r2, [pc, #168]	; (8007978 <TIM_Base_SetConfig+0x120>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01b      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a29      	ldr	r2, [pc, #164]	; (800797c <TIM_Base_SetConfig+0x124>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d017      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a28      	ldr	r2, [pc, #160]	; (8007980 <TIM_Base_SetConfig+0x128>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a27      	ldr	r2, [pc, #156]	; (8007984 <TIM_Base_SetConfig+0x12c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a26      	ldr	r2, [pc, #152]	; (8007988 <TIM_Base_SetConfig+0x130>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a25      	ldr	r2, [pc, #148]	; (800798c <TIM_Base_SetConfig+0x134>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a24      	ldr	r2, [pc, #144]	; (8007990 <TIM_Base_SetConfig+0x138>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a23      	ldr	r2, [pc, #140]	; (8007994 <TIM_Base_SetConfig+0x13c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a0a      	ldr	r2, [pc, #40]	; (800796c <TIM_Base_SetConfig+0x114>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_Base_SetConfig+0xf8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a0c      	ldr	r2, [pc, #48]	; (800797c <TIM_Base_SetConfig+0x124>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d103      	bne.n	8007958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	615a      	str	r2, [r3, #20]
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	40000c00 	.word	0x40000c00
 800797c:	40010400 	.word	0x40010400
 8007980:	40014000 	.word	0x40014000
 8007984:	40014400 	.word	0x40014400
 8007988:	40014800 	.word	0x40014800
 800798c:	40001800 	.word	0x40001800
 8007990:	40001c00 	.word	0x40001c00
 8007994:	40002000 	.word	0x40002000

08007998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f023 0201 	bic.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f023 0302 	bic.w	r3, r3, #2
 80079e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <TIM_OC1_SetConfig+0xd8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d003      	beq.n	80079fc <TIM_OC1_SetConfig+0x64>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <TIM_OC1_SetConfig+0xdc>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d10c      	bne.n	8007a16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 0308 	bic.w	r3, r3, #8
 8007a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f023 0304 	bic.w	r3, r3, #4
 8007a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <TIM_OC1_SetConfig+0xd8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_OC1_SetConfig+0x8e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a14      	ldr	r2, [pc, #80]	; (8007a74 <TIM_OC1_SetConfig+0xdc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d111      	bne.n	8007a4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	621a      	str	r2, [r3, #32]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40010400 	.word	0x40010400

08007a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	f023 0210 	bic.w	r2, r3, #16
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f023 0320 	bic.w	r3, r3, #32
 8007ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a22      	ldr	r2, [pc, #136]	; (8007b5c <TIM_OC2_SetConfig+0xe4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_OC2_SetConfig+0x68>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a21      	ldr	r2, [pc, #132]	; (8007b60 <TIM_OC2_SetConfig+0xe8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10d      	bne.n	8007afc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <TIM_OC2_SetConfig+0xe4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_OC2_SetConfig+0x94>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a16      	ldr	r2, [pc, #88]	; (8007b60 <TIM_OC2_SetConfig+0xe8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d113      	bne.n	8007b34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	40010400 	.word	0x40010400

08007b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0303 	bic.w	r3, r3, #3
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <TIM_OC3_SetConfig+0xe0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_OC3_SetConfig+0x66>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a20      	ldr	r2, [pc, #128]	; (8007c48 <TIM_OC3_SetConfig+0xe4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10d      	bne.n	8007be6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <TIM_OC3_SetConfig+0xe0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_OC3_SetConfig+0x92>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <TIM_OC3_SetConfig+0xe4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d113      	bne.n	8007c1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40010400 	.word	0x40010400

08007c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	031b      	lsls	r3, r3, #12
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a12      	ldr	r2, [pc, #72]	; (8007cf0 <TIM_OC4_SetConfig+0xa4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_OC4_SetConfig+0x68>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a11      	ldr	r2, [pc, #68]	; (8007cf4 <TIM_OC4_SetConfig+0xa8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d109      	bne.n	8007cc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	019b      	lsls	r3, r3, #6
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	621a      	str	r2, [r3, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40010400 	.word	0x40010400

08007cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0201 	bic.w	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 030a 	bic.w	r3, r3, #10
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f023 0210 	bic.w	r2, r3, #16
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	031b      	lsls	r3, r3, #12
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f043 0307 	orr.w	r3, r3, #7
 8007dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	021a      	lsls	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	609a      	str	r2, [r3, #8]
}
 8007e20:	bf00      	nop
 8007e22:	371c      	adds	r7, #28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e05a      	b.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a21      	ldr	r2, [pc, #132]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d022      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d01d      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1d      	ldr	r2, [pc, #116]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d018      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00e      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d009      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a15      	ldr	r2, [pc, #84]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d10c      	bne.n	8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	40010000 	.word	0x40010000
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	40010400 	.word	0x40010400
 8007f1c:	40014000 	.word	0x40014000
 8007f20:	40001800 	.word	0x40001800

08007f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e03f      	b.n	8007fde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fa f876 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2224      	movs	r2, #36	; 0x24
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fd7b 	bl	8008a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695a      	ldr	r2, [r3, #20]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b08a      	sub	sp, #40	; 0x28
 8007fea:	af02      	add	r7, sp, #8
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	603b      	str	r3, [r7, #0]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b20      	cmp	r3, #32
 8008004:	d17c      	bne.n	8008100 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HAL_UART_Transmit+0x2c>
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e075      	b.n	8008102 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_UART_Transmit+0x3e>
 8008020:	2302      	movs	r3, #2
 8008022:	e06e      	b.n	8008102 <HAL_UART_Transmit+0x11c>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2221      	movs	r2, #33	; 0x21
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800803a:	f7fb f849 	bl	80030d0 <HAL_GetTick>
 800803e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	88fa      	ldrh	r2, [r7, #6]
 8008044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	88fa      	ldrh	r2, [r7, #6]
 800804a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008054:	d108      	bne.n	8008068 <HAL_UART_Transmit+0x82>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	e003      	b.n	8008070 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008078:	e02a      	b.n	80080d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2200      	movs	r2, #0
 8008082:	2180      	movs	r1, #128	; 0x80
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 faf9 	bl	800867c <UART_WaitOnFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e036      	b.n	8008102 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	3302      	adds	r3, #2
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e007      	b.n	80080c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3301      	adds	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1cf      	bne.n	800807a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2140      	movs	r1, #64	; 0x40
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fac9 	bl	800867c <UART_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e000      	b.n	8008102 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b0ba      	sub	sp, #232	; 0xe8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008138:	2300      	movs	r3, #0
 800813a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800814a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10f      	bne.n	8008172 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <HAL_UART_IRQHandler+0x66>
 800815e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fbd3 	bl	8008916 <UART_Receive_IT>
      return;
 8008170:	e256      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80de 	beq.w	8008338 <HAL_UART_IRQHandler+0x22c>
 800817c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80d1 	beq.w	8008338 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <HAL_UART_IRQHandler+0xae>
 80081a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f043 0201 	orr.w	r2, r3, #1
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <HAL_UART_IRQHandler+0xd2>
 80081c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f043 0202 	orr.w	r2, r3, #2
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_UART_IRQHandler+0xf6>
 80081ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f043 0204 	orr.w	r2, r3, #4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d011      	beq.n	8008232 <HAL_UART_IRQHandler+0x126>
 800820e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800821a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f043 0208 	orr.w	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 81ed 	beq.w	8008616 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800823c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d008      	beq.n	800825a <HAL_UART_IRQHandler+0x14e>
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb5e 	bl	8008916 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d103      	bne.n	8008286 <HAL_UART_IRQHandler+0x17a>
 800827e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d04f      	beq.n	8008326 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa66 	bl	8008758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d141      	bne.n	800831e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3314      	adds	r3, #20
 80082c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1d9      	bne.n	800829a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d013      	beq.n	8008316 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	4a7d      	ldr	r2, [pc, #500]	; (80084e8 <HAL_UART_IRQHandler+0x3dc>)
 80082f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fb fbf4 	bl	8003ae8 <HAL_DMA_Abort_IT>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d016      	beq.n	8008334 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	e00e      	b.n	8008334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f99a 	bl	8008650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	e00a      	b.n	8008334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f996 	bl	8008650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008324:	e006      	b.n	8008334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f992 	bl	8008650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008332:	e170      	b.n	8008616 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	bf00      	nop
    return;
 8008336:	e16e      	b.n	8008616 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	2b01      	cmp	r3, #1
 800833e:	f040 814a 	bne.w	80085d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8143 	beq.w	80085d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 813c 	beq.w	80085d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	f040 80b4 	bne.w	80084ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8140 	beq.w	800861a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800839e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083a2:	429a      	cmp	r2, r3
 80083a4:	f080 8139 	bcs.w	800861a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	f000 8088 	beq.w	80084ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	330c      	adds	r3, #12
 80083c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1d9      	bne.n	80083be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3314      	adds	r3, #20
 8008410:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800841a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3314      	adds	r3, #20
 800842a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800842e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008432:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e1      	bne.n	800840a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3314      	adds	r3, #20
 800844c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800846a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800846c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e3      	bne.n	8008446 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800849c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800849e:	f023 0310 	bic.w	r3, r3, #16
 80084a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80084b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e3      	bne.n	800848c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fb fa9d 	bl	8003a08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8c0 	bl	8008664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084e4:	e099      	b.n	800861a <HAL_UART_IRQHandler+0x50e>
 80084e6:	bf00      	nop
 80084e8:	0800881f 	.word	0x0800881f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 808b 	beq.w	800861e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8086 	beq.w	800861e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	330c      	adds	r3, #12
 8008518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330c      	adds	r3, #12
 8008532:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008536:	647a      	str	r2, [r7, #68]	; 0x44
 8008538:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800853c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e3      	bne.n	8008512 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3314      	adds	r3, #20
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	623b      	str	r3, [r7, #32]
   return(result);
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800856e:	633a      	str	r2, [r7, #48]	; 0x30
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e3      	bne.n	800854a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	330c      	adds	r3, #12
 80085b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085b4:	61fa      	str	r2, [r7, #28]
 80085b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	69b9      	ldr	r1, [r7, #24]
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	617b      	str	r3, [r7, #20]
   return(result);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e3      	bne.n	8008590 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f848 	bl	8008664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085d4:	e023      	b.n	800861e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <HAL_UART_IRQHandler+0x4ea>
 80085e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f929 	bl	8008846 <UART_Transmit_IT>
    return;
 80085f4:	e014      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00e      	beq.n	8008620 <HAL_UART_IRQHandler+0x514>
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d008      	beq.n	8008620 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f969 	bl	80088e6 <UART_EndTransmit_IT>
    return;
 8008614:	e004      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
    return;
 8008616:	bf00      	nop
 8008618:	e002      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
      return;
 800861a:	bf00      	nop
 800861c:	e000      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
      return;
 800861e:	bf00      	nop
  }
}
 8008620:	37e8      	adds	r7, #232	; 0xe8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop

08008628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b090      	sub	sp, #64	; 0x40
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868c:	e050      	b.n	8008730 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800868e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d04c      	beq.n	8008730 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <UART_WaitOnFlagUntilTimeout+0x30>
 800869c:	f7fa fd18 	bl	80030d0 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d241      	bcs.n	8008730 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	330c      	adds	r3, #12
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086cc:	637a      	str	r2, [r7, #52]	; 0x34
 80086ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e5      	bne.n	80086ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3314      	adds	r3, #20
 80086e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	613b      	str	r3, [r7, #16]
   return(result);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3314      	adds	r3, #20
 80086fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008700:	623a      	str	r2, [r7, #32]
 8008702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	69f9      	ldr	r1, [r7, #28]
 8008706:	6a3a      	ldr	r2, [r7, #32]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	61bb      	str	r3, [r7, #24]
   return(result);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2220      	movs	r2, #32
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e00f      	b.n	8008750 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4013      	ands	r3, r2
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	429a      	cmp	r2, r3
 800873e:	bf0c      	ite	eq
 8008740:	2301      	moveq	r3, #1
 8008742:	2300      	movne	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	429a      	cmp	r2, r3
 800874c:	d09f      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3740      	adds	r7, #64	; 0x40
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b095      	sub	sp, #84	; 0x54
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	330c      	adds	r3, #12
 800877e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008780:	643a      	str	r2, [r7, #64]	; 0x40
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e5      	bne.n	8008760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3314      	adds	r3, #20
 800879a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f023 0301 	bic.w	r3, r3, #1
 80087aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3314      	adds	r3, #20
 80087b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e5      	bne.n	8008794 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d119      	bne.n	8008804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	330c      	adds	r3, #12
 80087d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f023 0310 	bic.w	r3, r3, #16
 80087e6:	647b      	str	r3, [r7, #68]	; 0x44
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f0:	61ba      	str	r2, [r7, #24]
 80087f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6979      	ldr	r1, [r7, #20]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	613b      	str	r3, [r7, #16]
   return(result);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008812:	bf00      	nop
 8008814:	3754      	adds	r7, #84	; 0x54
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff ff09 	bl	8008650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008846:	b480      	push	{r7}
 8008848:	b085      	sub	sp, #20
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b21      	cmp	r3, #33	; 0x21
 8008858:	d13e      	bne.n	80088d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008862:	d114      	bne.n	800888e <UART_Transmit_IT+0x48>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d110      	bne.n	800888e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008880:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	1c9a      	adds	r2, r3, #2
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	621a      	str	r2, [r3, #32]
 800888c:	e008      	b.n	80088a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	1c59      	adds	r1, r3, #1
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6211      	str	r1, [r2, #32]
 8008898:	781a      	ldrb	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4619      	mov	r1, r3
 80088ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10f      	bne.n	80088d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e000      	b.n	80088da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088d8:	2302      	movs	r3, #2
  }
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fe8e 	bl	8008628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b08c      	sub	sp, #48	; 0x30
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b22      	cmp	r3, #34	; 0x22
 8008928:	f040 80ab 	bne.w	8008a82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008934:	d117      	bne.n	8008966 <UART_Receive_IT+0x50>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d113      	bne.n	8008966 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008954:	b29a      	uxth	r2, r3
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	1c9a      	adds	r2, r3, #2
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	629a      	str	r2, [r3, #40]	; 0x28
 8008964:	e026      	b.n	80089b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800896c:	2300      	movs	r3, #0
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008978:	d007      	beq.n	800898a <UART_Receive_IT+0x74>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <UART_Receive_IT+0x82>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e008      	b.n	80089aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29b      	uxth	r3, r3
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4619      	mov	r1, r3
 80089c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d15a      	bne.n	8008a7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0220 	bic.w	r2, r2, #32
 80089d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d135      	bne.n	8008a74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f023 0310 	bic.w	r3, r3, #16
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	623a      	str	r2, [r7, #32]
 8008a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	69f9      	ldr	r1, [r7, #28]
 8008a34:	6a3a      	ldr	r2, [r7, #32]
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e5      	bne.n	8008a0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d10a      	bne.n	8008a66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fdf9 	bl	8008664 <HAL_UARTEx_RxEventCallback>
 8008a72:	e002      	b.n	8008a7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff fde1 	bl	800863c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e002      	b.n	8008a84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e000      	b.n	8008a84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3730      	adds	r7, #48	; 0x30
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a90:	b0c0      	sub	sp, #256	; 0x100
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	68d9      	ldr	r1, [r3, #12]
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	ea40 0301 	orr.w	r3, r0, r1
 8008ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ae4:	f021 010c 	bic.w	r1, r1, #12
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008af2:	430b      	orrs	r3, r1
 8008af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b06:	6999      	ldr	r1, [r3, #24]
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	ea40 0301 	orr.w	r3, r0, r1
 8008b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b8f      	ldr	r3, [pc, #572]	; (8008d58 <UART_SetConfig+0x2cc>)
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d005      	beq.n	8008b2c <UART_SetConfig+0xa0>
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	4b8d      	ldr	r3, [pc, #564]	; (8008d5c <UART_SetConfig+0x2d0>)
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d104      	bne.n	8008b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b2c:	f7fc fd40 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 8008b30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b34:	e003      	b.n	8008b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b36:	f7fc fd27 	bl	8005588 <HAL_RCC_GetPCLK1Freq>
 8008b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b48:	f040 810c 	bne.w	8008d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	1891      	adds	r1, r2, r2
 8008b64:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b66:	415b      	adcs	r3, r3
 8008b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b6e:	4621      	mov	r1, r4
 8008b70:	eb12 0801 	adds.w	r8, r2, r1
 8008b74:	4629      	mov	r1, r5
 8008b76:	eb43 0901 	adc.w	r9, r3, r1
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b8e:	4690      	mov	r8, r2
 8008b90:	4699      	mov	r9, r3
 8008b92:	4623      	mov	r3, r4
 8008b94:	eb18 0303 	adds.w	r3, r8, r3
 8008b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	eb49 0303 	adc.w	r3, r9, r3
 8008ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bba:	460b      	mov	r3, r1
 8008bbc:	18db      	adds	r3, r3, r3
 8008bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	eb42 0303 	adc.w	r3, r2, r3
 8008bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bd0:	f7f8 f802 	bl	8000bd8 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4b61      	ldr	r3, [pc, #388]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008bda:	fba3 2302 	umull	r2, r3, r3, r2
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	011c      	lsls	r4, r3, #4
 8008be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	1891      	adds	r1, r2, r2
 8008bfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bfc:	415b      	adcs	r3, r3
 8008bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c04:	4641      	mov	r1, r8
 8008c06:	eb12 0a01 	adds.w	sl, r2, r1
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c24:	4692      	mov	sl, r2
 8008c26:	469b      	mov	fp, r3
 8008c28:	4643      	mov	r3, r8
 8008c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c32:	464b      	mov	r3, r9
 8008c34:	eb4b 0303 	adc.w	r3, fp, r3
 8008c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c50:	460b      	mov	r3, r1
 8008c52:	18db      	adds	r3, r3, r3
 8008c54:	643b      	str	r3, [r7, #64]	; 0x40
 8008c56:	4613      	mov	r3, r2
 8008c58:	eb42 0303 	adc.w	r3, r2, r3
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c66:	f7f7 ffb7 	bl	8000bd8 <__aeabi_uldivmod>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4b3b      	ldr	r3, [pc, #236]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008c72:	fba3 2301 	umull	r2, r3, r3, r1
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	2264      	movs	r2, #100	; 0x64
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	1acb      	subs	r3, r1, r3
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c86:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008c88:	fba3 2302 	umull	r2, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c94:	441c      	add	r4, r3
 8008c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ca8:	4642      	mov	r2, r8
 8008caa:	464b      	mov	r3, r9
 8008cac:	1891      	adds	r1, r2, r2
 8008cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cb0:	415b      	adcs	r3, r3
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cb8:	4641      	mov	r1, r8
 8008cba:	1851      	adds	r1, r2, r1
 8008cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	414b      	adcs	r3, r1
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	00cb      	lsls	r3, r1, #3
 8008cd4:	4651      	mov	r1, sl
 8008cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cda:	4651      	mov	r1, sl
 8008cdc:	00ca      	lsls	r2, r1, #3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	189b      	adds	r3, r3, r2
 8008ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cec:	464b      	mov	r3, r9
 8008cee:	460a      	mov	r2, r1
 8008cf0:	eb42 0303 	adc.w	r3, r2, r3
 8008cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	18db      	adds	r3, r3, r3
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d12:	4613      	mov	r3, r2
 8008d14:	eb42 0303 	adc.w	r3, r2, r3
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d22:	f7f7 ff59 	bl	8000bd8 <__aeabi_uldivmod>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	2164      	movs	r1, #100	; 0x64
 8008d34:	fb01 f303 	mul.w	r3, r1, r3
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	3332      	adds	r3, #50	; 0x32
 8008d3e:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008d40:	fba2 2303 	umull	r2, r3, r2, r3
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	f003 0207 	and.w	r2, r3, #7
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4422      	add	r2, r4
 8008d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d54:	e105      	b.n	8008f62 <UART_SetConfig+0x4d6>
 8008d56:	bf00      	nop
 8008d58:	40011000 	.word	0x40011000
 8008d5c:	40011400 	.word	0x40011400
 8008d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	1891      	adds	r1, r2, r2
 8008d7c:	6239      	str	r1, [r7, #32]
 8008d7e:	415b      	adcs	r3, r3
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
 8008d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d86:	4641      	mov	r1, r8
 8008d88:	1854      	adds	r4, r2, r1
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	eb43 0501 	adc.w	r5, r3, r1
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	00eb      	lsls	r3, r5, #3
 8008d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d9e:	00e2      	lsls	r2, r4, #3
 8008da0:	4614      	mov	r4, r2
 8008da2:	461d      	mov	r5, r3
 8008da4:	4643      	mov	r3, r8
 8008da6:	18e3      	adds	r3, r4, r3
 8008da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dac:	464b      	mov	r3, r9
 8008dae:	eb45 0303 	adc.w	r3, r5, r3
 8008db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	008b      	lsls	r3, r1, #2
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ddc:	4621      	mov	r1, r4
 8008dde:	008a      	lsls	r2, r1, #2
 8008de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008de4:	f7f7 fef8 	bl	8000bd8 <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4b60      	ldr	r3, [pc, #384]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008dee:	fba3 2302 	umull	r2, r3, r3, r2
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	011c      	lsls	r4, r3, #4
 8008df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	1891      	adds	r1, r2, r2
 8008e0e:	61b9      	str	r1, [r7, #24]
 8008e10:	415b      	adcs	r3, r3
 8008e12:	61fb      	str	r3, [r7, #28]
 8008e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e18:	4641      	mov	r1, r8
 8008e1a:	1851      	adds	r1, r2, r1
 8008e1c:	6139      	str	r1, [r7, #16]
 8008e1e:	4649      	mov	r1, r9
 8008e20:	414b      	adcs	r3, r1
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e30:	4659      	mov	r1, fp
 8008e32:	00cb      	lsls	r3, r1, #3
 8008e34:	4651      	mov	r1, sl
 8008e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e3a:	4651      	mov	r1, sl
 8008e3c:	00ca      	lsls	r2, r1, #3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	4603      	mov	r3, r0
 8008e44:	4642      	mov	r2, r8
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	460a      	mov	r2, r1
 8008e50:	eb42 0303 	adc.w	r3, r2, r3
 8008e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e70:	4649      	mov	r1, r9
 8008e72:	008b      	lsls	r3, r1, #2
 8008e74:	4641      	mov	r1, r8
 8008e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	008a      	lsls	r2, r1, #2
 8008e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e82:	f7f7 fea9 	bl	8000bd8 <__aeabi_uldivmod>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4b39      	ldr	r3, [pc, #228]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	2164      	movs	r1, #100	; 0x64
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	3332      	adds	r3, #50	; 0x32
 8008e9e:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eaa:	441c      	add	r4, r3
 8008eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8008eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8008eb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008eba:	4642      	mov	r2, r8
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	1891      	adds	r1, r2, r2
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	415b      	adcs	r3, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eca:	4641      	mov	r1, r8
 8008ecc:	1851      	adds	r1, r2, r1
 8008ece:	6039      	str	r1, [r7, #0]
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	414b      	adcs	r3, r1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	00cb      	lsls	r3, r1, #3
 8008ee6:	4651      	mov	r1, sl
 8008ee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eec:	4651      	mov	r1, sl
 8008eee:	00ca      	lsls	r2, r1, #3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	189b      	adds	r3, r3, r2
 8008efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008efc:	464b      	mov	r3, r9
 8008efe:	460a      	mov	r2, r1
 8008f00:	eb42 0303 	adc.w	r3, r2, r3
 8008f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f10:	667a      	str	r2, [r7, #100]	; 0x64
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f1e:	4649      	mov	r1, r9
 8008f20:	008b      	lsls	r3, r1, #2
 8008f22:	4641      	mov	r1, r8
 8008f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f28:	4641      	mov	r1, r8
 8008f2a:	008a      	lsls	r2, r1, #2
 8008f2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f30:	f7f7 fe52 	bl	8000bd8 <__aeabi_uldivmod>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	2164      	movs	r1, #100	; 0x64
 8008f42:	fb01 f303 	mul.w	r3, r1, r3
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	3332      	adds	r3, #50	; 0x32
 8008f4c:	4a08      	ldr	r2, [pc, #32]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4422      	add	r2, r4
 8008f60:	609a      	str	r2, [r3, #8]
}
 8008f62:	bf00      	nop
 8008f64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f6e:	bf00      	nop
 8008f70:	51eb851f 	.word	0x51eb851f

08008f74 <__errno>:
 8008f74:	4b01      	ldr	r3, [pc, #4]	; (8008f7c <__errno+0x8>)
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	20000010 	.word	0x20000010

08008f80 <__libc_init_array>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4d0d      	ldr	r5, [pc, #52]	; (8008fb8 <__libc_init_array+0x38>)
 8008f84:	4c0d      	ldr	r4, [pc, #52]	; (8008fbc <__libc_init_array+0x3c>)
 8008f86:	1b64      	subs	r4, r4, r5
 8008f88:	10a4      	asrs	r4, r4, #2
 8008f8a:	2600      	movs	r6, #0
 8008f8c:	42a6      	cmp	r6, r4
 8008f8e:	d109      	bne.n	8008fa4 <__libc_init_array+0x24>
 8008f90:	4d0b      	ldr	r5, [pc, #44]	; (8008fc0 <__libc_init_array+0x40>)
 8008f92:	4c0c      	ldr	r4, [pc, #48]	; (8008fc4 <__libc_init_array+0x44>)
 8008f94:	f002 ff04 	bl	800bda0 <_init>
 8008f98:	1b64      	subs	r4, r4, r5
 8008f9a:	10a4      	asrs	r4, r4, #2
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	42a6      	cmp	r6, r4
 8008fa0:	d105      	bne.n	8008fae <__libc_init_array+0x2e>
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa8:	4798      	blx	r3
 8008faa:	3601      	adds	r6, #1
 8008fac:	e7ee      	b.n	8008f8c <__libc_init_array+0xc>
 8008fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb2:	4798      	blx	r3
 8008fb4:	3601      	adds	r6, #1
 8008fb6:	e7f2      	b.n	8008f9e <__libc_init_array+0x1e>
 8008fb8:	0800c1cc 	.word	0x0800c1cc
 8008fbc:	0800c1cc 	.word	0x0800c1cc
 8008fc0:	0800c1cc 	.word	0x0800c1cc
 8008fc4:	0800c1d0 	.word	0x0800c1d0

08008fc8 <memset>:
 8008fc8:	4402      	add	r2, r0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d100      	bne.n	8008fd2 <memset+0xa>
 8008fd0:	4770      	bx	lr
 8008fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd6:	e7f9      	b.n	8008fcc <memset+0x4>

08008fd8 <__cvt>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	ec55 4b10 	vmov	r4, r5, d0
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	bfbb      	ittet	lt
 8008fea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fee:	461d      	movlt	r5, r3
 8008ff0:	2300      	movge	r3, #0
 8008ff2:	232d      	movlt	r3, #45	; 0x2d
 8008ff4:	700b      	strb	r3, [r1, #0]
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ffc:	4691      	mov	r9, r2
 8008ffe:	f023 0820 	bic.w	r8, r3, #32
 8009002:	bfbc      	itt	lt
 8009004:	4622      	movlt	r2, r4
 8009006:	4614      	movlt	r4, r2
 8009008:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800900c:	d005      	beq.n	800901a <__cvt+0x42>
 800900e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009012:	d100      	bne.n	8009016 <__cvt+0x3e>
 8009014:	3601      	adds	r6, #1
 8009016:	2102      	movs	r1, #2
 8009018:	e000      	b.n	800901c <__cvt+0x44>
 800901a:	2103      	movs	r1, #3
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	ab02      	add	r3, sp, #8
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	ec45 4b10 	vmov	d0, r4, r5
 8009028:	4653      	mov	r3, sl
 800902a:	4632      	mov	r2, r6
 800902c:	f000 fcec 	bl	8009a08 <_dtoa_r>
 8009030:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009034:	4607      	mov	r7, r0
 8009036:	d102      	bne.n	800903e <__cvt+0x66>
 8009038:	f019 0f01 	tst.w	r9, #1
 800903c:	d022      	beq.n	8009084 <__cvt+0xac>
 800903e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009042:	eb07 0906 	add.w	r9, r7, r6
 8009046:	d110      	bne.n	800906a <__cvt+0x92>
 8009048:	783b      	ldrb	r3, [r7, #0]
 800904a:	2b30      	cmp	r3, #48	; 0x30
 800904c:	d10a      	bne.n	8009064 <__cvt+0x8c>
 800904e:	2200      	movs	r2, #0
 8009050:	2300      	movs	r3, #0
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	f7f7 fd4f 	bl	8000af8 <__aeabi_dcmpeq>
 800905a:	b918      	cbnz	r0, 8009064 <__cvt+0x8c>
 800905c:	f1c6 0601 	rsb	r6, r6, #1
 8009060:	f8ca 6000 	str.w	r6, [sl]
 8009064:	f8da 3000 	ldr.w	r3, [sl]
 8009068:	4499      	add	r9, r3
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	4620      	mov	r0, r4
 8009070:	4629      	mov	r1, r5
 8009072:	f7f7 fd41 	bl	8000af8 <__aeabi_dcmpeq>
 8009076:	b108      	cbz	r0, 800907c <__cvt+0xa4>
 8009078:	f8cd 900c 	str.w	r9, [sp, #12]
 800907c:	2230      	movs	r2, #48	; 0x30
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	454b      	cmp	r3, r9
 8009082:	d307      	bcc.n	8009094 <__cvt+0xbc>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009088:	1bdb      	subs	r3, r3, r7
 800908a:	4638      	mov	r0, r7
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	b004      	add	sp, #16
 8009090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009094:	1c59      	adds	r1, r3, #1
 8009096:	9103      	str	r1, [sp, #12]
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	e7f0      	b.n	800907e <__cvt+0xa6>

0800909c <__exponent>:
 800909c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909e:	4603      	mov	r3, r0
 80090a0:	2900      	cmp	r1, #0
 80090a2:	bfb8      	it	lt
 80090a4:	4249      	neglt	r1, r1
 80090a6:	f803 2b02 	strb.w	r2, [r3], #2
 80090aa:	bfb4      	ite	lt
 80090ac:	222d      	movlt	r2, #45	; 0x2d
 80090ae:	222b      	movge	r2, #43	; 0x2b
 80090b0:	2909      	cmp	r1, #9
 80090b2:	7042      	strb	r2, [r0, #1]
 80090b4:	dd2a      	ble.n	800910c <__exponent+0x70>
 80090b6:	f10d 0407 	add.w	r4, sp, #7
 80090ba:	46a4      	mov	ip, r4
 80090bc:	270a      	movs	r7, #10
 80090be:	46a6      	mov	lr, r4
 80090c0:	460a      	mov	r2, r1
 80090c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80090c6:	fb07 1516 	mls	r5, r7, r6, r1
 80090ca:	3530      	adds	r5, #48	; 0x30
 80090cc:	2a63      	cmp	r2, #99	; 0x63
 80090ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80090d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090d6:	4631      	mov	r1, r6
 80090d8:	dcf1      	bgt.n	80090be <__exponent+0x22>
 80090da:	3130      	adds	r1, #48	; 0x30
 80090dc:	f1ae 0502 	sub.w	r5, lr, #2
 80090e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090e4:	1c44      	adds	r4, r0, #1
 80090e6:	4629      	mov	r1, r5
 80090e8:	4561      	cmp	r1, ip
 80090ea:	d30a      	bcc.n	8009102 <__exponent+0x66>
 80090ec:	f10d 0209 	add.w	r2, sp, #9
 80090f0:	eba2 020e 	sub.w	r2, r2, lr
 80090f4:	4565      	cmp	r5, ip
 80090f6:	bf88      	it	hi
 80090f8:	2200      	movhi	r2, #0
 80090fa:	4413      	add	r3, r2
 80090fc:	1a18      	subs	r0, r3, r0
 80090fe:	b003      	add	sp, #12
 8009100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009106:	f804 2f01 	strb.w	r2, [r4, #1]!
 800910a:	e7ed      	b.n	80090e8 <__exponent+0x4c>
 800910c:	2330      	movs	r3, #48	; 0x30
 800910e:	3130      	adds	r1, #48	; 0x30
 8009110:	7083      	strb	r3, [r0, #2]
 8009112:	70c1      	strb	r1, [r0, #3]
 8009114:	1d03      	adds	r3, r0, #4
 8009116:	e7f1      	b.n	80090fc <__exponent+0x60>

08009118 <_printf_float>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	ed2d 8b02 	vpush	{d8}
 8009120:	b08d      	sub	sp, #52	; 0x34
 8009122:	460c      	mov	r4, r1
 8009124:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009128:	4616      	mov	r6, r2
 800912a:	461f      	mov	r7, r3
 800912c:	4605      	mov	r5, r0
 800912e:	f001 fa59 	bl	800a5e4 <_localeconv_r>
 8009132:	f8d0 a000 	ldr.w	sl, [r0]
 8009136:	4650      	mov	r0, sl
 8009138:	f7f7 f862 	bl	8000200 <strlen>
 800913c:	2300      	movs	r3, #0
 800913e:	930a      	str	r3, [sp, #40]	; 0x28
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	f8d8 3000 	ldr.w	r3, [r8]
 8009148:	f894 b018 	ldrb.w	fp, [r4, #24]
 800914c:	3307      	adds	r3, #7
 800914e:	f023 0307 	bic.w	r3, r3, #7
 8009152:	f103 0208 	add.w	r2, r3, #8
 8009156:	f8c8 2000 	str.w	r2, [r8]
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009162:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009170:	ee08 0a10 	vmov	s16, r0
 8009174:	4b9f      	ldr	r3, [pc, #636]	; (80093f4 <_printf_float+0x2dc>)
 8009176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917a:	f04f 32ff 	mov.w	r2, #4294967295
 800917e:	f7f7 fced 	bl	8000b5c <__aeabi_dcmpun>
 8009182:	bb88      	cbnz	r0, 80091e8 <_printf_float+0xd0>
 8009184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009188:	4b9a      	ldr	r3, [pc, #616]	; (80093f4 <_printf_float+0x2dc>)
 800918a:	f04f 32ff 	mov.w	r2, #4294967295
 800918e:	f7f7 fcc7 	bl	8000b20 <__aeabi_dcmple>
 8009192:	bb48      	cbnz	r0, 80091e8 <_printf_float+0xd0>
 8009194:	2200      	movs	r2, #0
 8009196:	2300      	movs	r3, #0
 8009198:	4640      	mov	r0, r8
 800919a:	4649      	mov	r1, r9
 800919c:	f7f7 fcb6 	bl	8000b0c <__aeabi_dcmplt>
 80091a0:	b110      	cbz	r0, 80091a8 <_printf_float+0x90>
 80091a2:	232d      	movs	r3, #45	; 0x2d
 80091a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091a8:	4b93      	ldr	r3, [pc, #588]	; (80093f8 <_printf_float+0x2e0>)
 80091aa:	4894      	ldr	r0, [pc, #592]	; (80093fc <_printf_float+0x2e4>)
 80091ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091b0:	bf94      	ite	ls
 80091b2:	4698      	movls	r8, r3
 80091b4:	4680      	movhi	r8, r0
 80091b6:	2303      	movs	r3, #3
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	9b05      	ldr	r3, [sp, #20]
 80091bc:	f023 0204 	bic.w	r2, r3, #4
 80091c0:	6022      	str	r2, [r4, #0]
 80091c2:	f04f 0900 	mov.w	r9, #0
 80091c6:	9700      	str	r7, [sp, #0]
 80091c8:	4633      	mov	r3, r6
 80091ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80091cc:	4621      	mov	r1, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 f9d8 	bl	8009584 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	f040 8090 	bne.w	80092fa <_printf_float+0x1e2>
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
 80091de:	b00d      	add	sp, #52	; 0x34
 80091e0:	ecbd 8b02 	vpop	{d8}
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	4640      	mov	r0, r8
 80091ee:	4649      	mov	r1, r9
 80091f0:	f7f7 fcb4 	bl	8000b5c <__aeabi_dcmpun>
 80091f4:	b140      	cbz	r0, 8009208 <_printf_float+0xf0>
 80091f6:	464b      	mov	r3, r9
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bfbc      	itt	lt
 80091fc:	232d      	movlt	r3, #45	; 0x2d
 80091fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009202:	487f      	ldr	r0, [pc, #508]	; (8009400 <_printf_float+0x2e8>)
 8009204:	4b7f      	ldr	r3, [pc, #508]	; (8009404 <_printf_float+0x2ec>)
 8009206:	e7d1      	b.n	80091ac <_printf_float+0x94>
 8009208:	6863      	ldr	r3, [r4, #4]
 800920a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800920e:	9206      	str	r2, [sp, #24]
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	d13f      	bne.n	8009294 <_printf_float+0x17c>
 8009214:	2306      	movs	r3, #6
 8009216:	6063      	str	r3, [r4, #4]
 8009218:	9b05      	ldr	r3, [sp, #20]
 800921a:	6861      	ldr	r1, [r4, #4]
 800921c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009220:	2300      	movs	r3, #0
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	ab0a      	add	r3, sp, #40	; 0x28
 8009226:	e9cd b301 	strd	fp, r3, [sp, #4]
 800922a:	ab09      	add	r3, sp, #36	; 0x24
 800922c:	ec49 8b10 	vmov	d0, r8, r9
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009238:	4628      	mov	r0, r5
 800923a:	f7ff fecd 	bl	8008fd8 <__cvt>
 800923e:	9b06      	ldr	r3, [sp, #24]
 8009240:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009242:	2b47      	cmp	r3, #71	; 0x47
 8009244:	4680      	mov	r8, r0
 8009246:	d108      	bne.n	800925a <_printf_float+0x142>
 8009248:	1cc8      	adds	r0, r1, #3
 800924a:	db02      	blt.n	8009252 <_printf_float+0x13a>
 800924c:	6863      	ldr	r3, [r4, #4]
 800924e:	4299      	cmp	r1, r3
 8009250:	dd41      	ble.n	80092d6 <_printf_float+0x1be>
 8009252:	f1ab 0b02 	sub.w	fp, fp, #2
 8009256:	fa5f fb8b 	uxtb.w	fp, fp
 800925a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800925e:	d820      	bhi.n	80092a2 <_printf_float+0x18a>
 8009260:	3901      	subs	r1, #1
 8009262:	465a      	mov	r2, fp
 8009264:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009268:	9109      	str	r1, [sp, #36]	; 0x24
 800926a:	f7ff ff17 	bl	800909c <__exponent>
 800926e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009270:	1813      	adds	r3, r2, r0
 8009272:	2a01      	cmp	r2, #1
 8009274:	4681      	mov	r9, r0
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	dc02      	bgt.n	8009280 <_printf_float+0x168>
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	07d2      	lsls	r2, r2, #31
 800927e:	d501      	bpl.n	8009284 <_printf_float+0x16c>
 8009280:	3301      	adds	r3, #1
 8009282:	6123      	str	r3, [r4, #16]
 8009284:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009288:	2b00      	cmp	r3, #0
 800928a:	d09c      	beq.n	80091c6 <_printf_float+0xae>
 800928c:	232d      	movs	r3, #45	; 0x2d
 800928e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009292:	e798      	b.n	80091c6 <_printf_float+0xae>
 8009294:	9a06      	ldr	r2, [sp, #24]
 8009296:	2a47      	cmp	r2, #71	; 0x47
 8009298:	d1be      	bne.n	8009218 <_printf_float+0x100>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1bc      	bne.n	8009218 <_printf_float+0x100>
 800929e:	2301      	movs	r3, #1
 80092a0:	e7b9      	b.n	8009216 <_printf_float+0xfe>
 80092a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092a6:	d118      	bne.n	80092da <_printf_float+0x1c2>
 80092a8:	2900      	cmp	r1, #0
 80092aa:	6863      	ldr	r3, [r4, #4]
 80092ac:	dd0b      	ble.n	80092c6 <_printf_float+0x1ae>
 80092ae:	6121      	str	r1, [r4, #16]
 80092b0:	b913      	cbnz	r3, 80092b8 <_printf_float+0x1a0>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	07d0      	lsls	r0, r2, #31
 80092b6:	d502      	bpl.n	80092be <_printf_float+0x1a6>
 80092b8:	3301      	adds	r3, #1
 80092ba:	440b      	add	r3, r1
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	65a1      	str	r1, [r4, #88]	; 0x58
 80092c0:	f04f 0900 	mov.w	r9, #0
 80092c4:	e7de      	b.n	8009284 <_printf_float+0x16c>
 80092c6:	b913      	cbnz	r3, 80092ce <_printf_float+0x1b6>
 80092c8:	6822      	ldr	r2, [r4, #0]
 80092ca:	07d2      	lsls	r2, r2, #31
 80092cc:	d501      	bpl.n	80092d2 <_printf_float+0x1ba>
 80092ce:	3302      	adds	r3, #2
 80092d0:	e7f4      	b.n	80092bc <_printf_float+0x1a4>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7f2      	b.n	80092bc <_printf_float+0x1a4>
 80092d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092dc:	4299      	cmp	r1, r3
 80092de:	db05      	blt.n	80092ec <_printf_float+0x1d4>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	6121      	str	r1, [r4, #16]
 80092e4:	07d8      	lsls	r0, r3, #31
 80092e6:	d5ea      	bpl.n	80092be <_printf_float+0x1a6>
 80092e8:	1c4b      	adds	r3, r1, #1
 80092ea:	e7e7      	b.n	80092bc <_printf_float+0x1a4>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	bfd4      	ite	le
 80092f0:	f1c1 0202 	rsble	r2, r1, #2
 80092f4:	2201      	movgt	r2, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	e7e0      	b.n	80092bc <_printf_float+0x1a4>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	055a      	lsls	r2, r3, #21
 80092fe:	d407      	bmi.n	8009310 <_printf_float+0x1f8>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	4642      	mov	r2, r8
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	d12c      	bne.n	8009368 <_printf_float+0x250>
 800930e:	e764      	b.n	80091da <_printf_float+0xc2>
 8009310:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009314:	f240 80e0 	bls.w	80094d8 <_printf_float+0x3c0>
 8009318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800931c:	2200      	movs	r2, #0
 800931e:	2300      	movs	r3, #0
 8009320:	f7f7 fbea 	bl	8000af8 <__aeabi_dcmpeq>
 8009324:	2800      	cmp	r0, #0
 8009326:	d034      	beq.n	8009392 <_printf_float+0x27a>
 8009328:	4a37      	ldr	r2, [pc, #220]	; (8009408 <_printf_float+0x2f0>)
 800932a:	2301      	movs	r3, #1
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af51 	beq.w	80091da <_printf_float+0xc2>
 8009338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800933c:	429a      	cmp	r2, r3
 800933e:	db02      	blt.n	8009346 <_printf_float+0x22e>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	07d8      	lsls	r0, r3, #31
 8009344:	d510      	bpl.n	8009368 <_printf_float+0x250>
 8009346:	ee18 3a10 	vmov	r3, s16
 800934a:	4652      	mov	r2, sl
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af41 	beq.w	80091da <_printf_float+0xc2>
 8009358:	f04f 0800 	mov.w	r8, #0
 800935c:	f104 091a 	add.w	r9, r4, #26
 8009360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009362:	3b01      	subs	r3, #1
 8009364:	4543      	cmp	r3, r8
 8009366:	dc09      	bgt.n	800937c <_printf_float+0x264>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	079b      	lsls	r3, r3, #30
 800936c:	f100 8105 	bmi.w	800957a <_printf_float+0x462>
 8009370:	68e0      	ldr	r0, [r4, #12]
 8009372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009374:	4298      	cmp	r0, r3
 8009376:	bfb8      	it	lt
 8009378:	4618      	movlt	r0, r3
 800937a:	e730      	b.n	80091de <_printf_float+0xc6>
 800937c:	2301      	movs	r3, #1
 800937e:	464a      	mov	r2, r9
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af27 	beq.w	80091da <_printf_float+0xc2>
 800938c:	f108 0801 	add.w	r8, r8, #1
 8009390:	e7e6      	b.n	8009360 <_printf_float+0x248>
 8009392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	dc39      	bgt.n	800940c <_printf_float+0x2f4>
 8009398:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <_printf_float+0x2f0>)
 800939a:	2301      	movs	r3, #1
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af19 	beq.w	80091da <_printf_float+0xc2>
 80093a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ac:	4313      	orrs	r3, r2
 80093ae:	d102      	bne.n	80093b6 <_printf_float+0x29e>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	07d9      	lsls	r1, r3, #31
 80093b4:	d5d8      	bpl.n	8009368 <_printf_float+0x250>
 80093b6:	ee18 3a10 	vmov	r3, s16
 80093ba:	4652      	mov	r2, sl
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f af09 	beq.w	80091da <_printf_float+0xc2>
 80093c8:	f04f 0900 	mov.w	r9, #0
 80093cc:	f104 0a1a 	add.w	sl, r4, #26
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	425b      	negs	r3, r3
 80093d4:	454b      	cmp	r3, r9
 80093d6:	dc01      	bgt.n	80093dc <_printf_float+0x2c4>
 80093d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093da:	e792      	b.n	8009302 <_printf_float+0x1ea>
 80093dc:	2301      	movs	r3, #1
 80093de:	4652      	mov	r2, sl
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	f43f aef7 	beq.w	80091da <_printf_float+0xc2>
 80093ec:	f109 0901 	add.w	r9, r9, #1
 80093f0:	e7ee      	b.n	80093d0 <_printf_float+0x2b8>
 80093f2:	bf00      	nop
 80093f4:	7fefffff 	.word	0x7fefffff
 80093f8:	0800bdec 	.word	0x0800bdec
 80093fc:	0800bdf0 	.word	0x0800bdf0
 8009400:	0800bdf8 	.word	0x0800bdf8
 8009404:	0800bdf4 	.word	0x0800bdf4
 8009408:	0800bdfc 	.word	0x0800bdfc
 800940c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800940e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009410:	429a      	cmp	r2, r3
 8009412:	bfa8      	it	ge
 8009414:	461a      	movge	r2, r3
 8009416:	2a00      	cmp	r2, #0
 8009418:	4691      	mov	r9, r2
 800941a:	dc37      	bgt.n	800948c <_printf_float+0x374>
 800941c:	f04f 0b00 	mov.w	fp, #0
 8009420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009424:	f104 021a 	add.w	r2, r4, #26
 8009428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	eba3 0309 	sub.w	r3, r3, r9
 8009430:	455b      	cmp	r3, fp
 8009432:	dc33      	bgt.n	800949c <_printf_float+0x384>
 8009434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009438:	429a      	cmp	r2, r3
 800943a:	db3b      	blt.n	80094b4 <_printf_float+0x39c>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	07da      	lsls	r2, r3, #31
 8009440:	d438      	bmi.n	80094b4 <_printf_float+0x39c>
 8009442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009444:	9a05      	ldr	r2, [sp, #20]
 8009446:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009448:	1a9a      	subs	r2, r3, r2
 800944a:	eba3 0901 	sub.w	r9, r3, r1
 800944e:	4591      	cmp	r9, r2
 8009450:	bfa8      	it	ge
 8009452:	4691      	movge	r9, r2
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	dc35      	bgt.n	80094c6 <_printf_float+0x3ae>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009462:	f104 0a1a 	add.w	sl, r4, #26
 8009466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	eba3 0309 	sub.w	r3, r3, r9
 8009470:	4543      	cmp	r3, r8
 8009472:	f77f af79 	ble.w	8009368 <_printf_float+0x250>
 8009476:	2301      	movs	r3, #1
 8009478:	4652      	mov	r2, sl
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f aeaa 	beq.w	80091da <_printf_float+0xc2>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	e7ec      	b.n	8009466 <_printf_float+0x34e>
 800948c:	4613      	mov	r3, r2
 800948e:	4631      	mov	r1, r6
 8009490:	4642      	mov	r2, r8
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	d1c0      	bne.n	800941c <_printf_float+0x304>
 800949a:	e69e      	b.n	80091da <_printf_float+0xc2>
 800949c:	2301      	movs	r3, #1
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	9205      	str	r2, [sp, #20]
 80094a4:	47b8      	blx	r7
 80094a6:	3001      	adds	r0, #1
 80094a8:	f43f ae97 	beq.w	80091da <_printf_float+0xc2>
 80094ac:	9a05      	ldr	r2, [sp, #20]
 80094ae:	f10b 0b01 	add.w	fp, fp, #1
 80094b2:	e7b9      	b.n	8009428 <_printf_float+0x310>
 80094b4:	ee18 3a10 	vmov	r3, s16
 80094b8:	4652      	mov	r2, sl
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	d1be      	bne.n	8009442 <_printf_float+0x32a>
 80094c4:	e689      	b.n	80091da <_printf_float+0xc2>
 80094c6:	9a05      	ldr	r2, [sp, #20]
 80094c8:	464b      	mov	r3, r9
 80094ca:	4442      	add	r2, r8
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	d1c1      	bne.n	800945a <_printf_float+0x342>
 80094d6:	e680      	b.n	80091da <_printf_float+0xc2>
 80094d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094da:	2a01      	cmp	r2, #1
 80094dc:	dc01      	bgt.n	80094e2 <_printf_float+0x3ca>
 80094de:	07db      	lsls	r3, r3, #31
 80094e0:	d538      	bpl.n	8009554 <_printf_float+0x43c>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4642      	mov	r2, r8
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f ae74 	beq.w	80091da <_printf_float+0xc2>
 80094f2:	ee18 3a10 	vmov	r3, s16
 80094f6:	4652      	mov	r2, sl
 80094f8:	4631      	mov	r1, r6
 80094fa:	4628      	mov	r0, r5
 80094fc:	47b8      	blx	r7
 80094fe:	3001      	adds	r0, #1
 8009500:	f43f ae6b 	beq.w	80091da <_printf_float+0xc2>
 8009504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009508:	2200      	movs	r2, #0
 800950a:	2300      	movs	r3, #0
 800950c:	f7f7 faf4 	bl	8000af8 <__aeabi_dcmpeq>
 8009510:	b9d8      	cbnz	r0, 800954a <_printf_float+0x432>
 8009512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009514:	f108 0201 	add.w	r2, r8, #1
 8009518:	3b01      	subs	r3, #1
 800951a:	4631      	mov	r1, r6
 800951c:	4628      	mov	r0, r5
 800951e:	47b8      	blx	r7
 8009520:	3001      	adds	r0, #1
 8009522:	d10e      	bne.n	8009542 <_printf_float+0x42a>
 8009524:	e659      	b.n	80091da <_printf_float+0xc2>
 8009526:	2301      	movs	r3, #1
 8009528:	4652      	mov	r2, sl
 800952a:	4631      	mov	r1, r6
 800952c:	4628      	mov	r0, r5
 800952e:	47b8      	blx	r7
 8009530:	3001      	adds	r0, #1
 8009532:	f43f ae52 	beq.w	80091da <_printf_float+0xc2>
 8009536:	f108 0801 	add.w	r8, r8, #1
 800953a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800953c:	3b01      	subs	r3, #1
 800953e:	4543      	cmp	r3, r8
 8009540:	dcf1      	bgt.n	8009526 <_printf_float+0x40e>
 8009542:	464b      	mov	r3, r9
 8009544:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009548:	e6dc      	b.n	8009304 <_printf_float+0x1ec>
 800954a:	f04f 0800 	mov.w	r8, #0
 800954e:	f104 0a1a 	add.w	sl, r4, #26
 8009552:	e7f2      	b.n	800953a <_printf_float+0x422>
 8009554:	2301      	movs	r3, #1
 8009556:	4642      	mov	r2, r8
 8009558:	e7df      	b.n	800951a <_printf_float+0x402>
 800955a:	2301      	movs	r3, #1
 800955c:	464a      	mov	r2, r9
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	f43f ae38 	beq.w	80091da <_printf_float+0xc2>
 800956a:	f108 0801 	add.w	r8, r8, #1
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009572:	1a5b      	subs	r3, r3, r1
 8009574:	4543      	cmp	r3, r8
 8009576:	dcf0      	bgt.n	800955a <_printf_float+0x442>
 8009578:	e6fa      	b.n	8009370 <_printf_float+0x258>
 800957a:	f04f 0800 	mov.w	r8, #0
 800957e:	f104 0919 	add.w	r9, r4, #25
 8009582:	e7f4      	b.n	800956e <_printf_float+0x456>

08009584 <_printf_common>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	4616      	mov	r6, r2
 800958a:	4699      	mov	r9, r3
 800958c:	688a      	ldr	r2, [r1, #8]
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009594:	4293      	cmp	r3, r2
 8009596:	bfb8      	it	lt
 8009598:	4613      	movlt	r3, r2
 800959a:	6033      	str	r3, [r6, #0]
 800959c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095a0:	4607      	mov	r7, r0
 80095a2:	460c      	mov	r4, r1
 80095a4:	b10a      	cbz	r2, 80095aa <_printf_common+0x26>
 80095a6:	3301      	adds	r3, #1
 80095a8:	6033      	str	r3, [r6, #0]
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	0699      	lsls	r1, r3, #26
 80095ae:	bf42      	ittt	mi
 80095b0:	6833      	ldrmi	r3, [r6, #0]
 80095b2:	3302      	addmi	r3, #2
 80095b4:	6033      	strmi	r3, [r6, #0]
 80095b6:	6825      	ldr	r5, [r4, #0]
 80095b8:	f015 0506 	ands.w	r5, r5, #6
 80095bc:	d106      	bne.n	80095cc <_printf_common+0x48>
 80095be:	f104 0a19 	add.w	sl, r4, #25
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	6832      	ldr	r2, [r6, #0]
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dc26      	bgt.n	800961a <_printf_common+0x96>
 80095cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095d0:	1e13      	subs	r3, r2, #0
 80095d2:	6822      	ldr	r2, [r4, #0]
 80095d4:	bf18      	it	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	0692      	lsls	r2, r2, #26
 80095da:	d42b      	bmi.n	8009634 <_printf_common+0xb0>
 80095dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095e0:	4649      	mov	r1, r9
 80095e2:	4638      	mov	r0, r7
 80095e4:	47c0      	blx	r8
 80095e6:	3001      	adds	r0, #1
 80095e8:	d01e      	beq.n	8009628 <_printf_common+0xa4>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	68e5      	ldr	r5, [r4, #12]
 80095ee:	6832      	ldr	r2, [r6, #0]
 80095f0:	f003 0306 	and.w	r3, r3, #6
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	bf08      	it	eq
 80095f8:	1aad      	subeq	r5, r5, r2
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	6922      	ldr	r2, [r4, #16]
 80095fe:	bf0c      	ite	eq
 8009600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009604:	2500      	movne	r5, #0
 8009606:	4293      	cmp	r3, r2
 8009608:	bfc4      	itt	gt
 800960a:	1a9b      	subgt	r3, r3, r2
 800960c:	18ed      	addgt	r5, r5, r3
 800960e:	2600      	movs	r6, #0
 8009610:	341a      	adds	r4, #26
 8009612:	42b5      	cmp	r5, r6
 8009614:	d11a      	bne.n	800964c <_printf_common+0xc8>
 8009616:	2000      	movs	r0, #0
 8009618:	e008      	b.n	800962c <_printf_common+0xa8>
 800961a:	2301      	movs	r3, #1
 800961c:	4652      	mov	r2, sl
 800961e:	4649      	mov	r1, r9
 8009620:	4638      	mov	r0, r7
 8009622:	47c0      	blx	r8
 8009624:	3001      	adds	r0, #1
 8009626:	d103      	bne.n	8009630 <_printf_common+0xac>
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009630:	3501      	adds	r5, #1
 8009632:	e7c6      	b.n	80095c2 <_printf_common+0x3e>
 8009634:	18e1      	adds	r1, r4, r3
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	2030      	movs	r0, #48	; 0x30
 800963a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800963e:	4422      	add	r2, r4
 8009640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009648:	3302      	adds	r3, #2
 800964a:	e7c7      	b.n	80095dc <_printf_common+0x58>
 800964c:	2301      	movs	r3, #1
 800964e:	4622      	mov	r2, r4
 8009650:	4649      	mov	r1, r9
 8009652:	4638      	mov	r0, r7
 8009654:	47c0      	blx	r8
 8009656:	3001      	adds	r0, #1
 8009658:	d0e6      	beq.n	8009628 <_printf_common+0xa4>
 800965a:	3601      	adds	r6, #1
 800965c:	e7d9      	b.n	8009612 <_printf_common+0x8e>
	...

08009660 <_printf_i>:
 8009660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009664:	7e0f      	ldrb	r7, [r1, #24]
 8009666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009668:	2f78      	cmp	r7, #120	; 0x78
 800966a:	4691      	mov	r9, r2
 800966c:	4680      	mov	r8, r0
 800966e:	460c      	mov	r4, r1
 8009670:	469a      	mov	sl, r3
 8009672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009676:	d807      	bhi.n	8009688 <_printf_i+0x28>
 8009678:	2f62      	cmp	r7, #98	; 0x62
 800967a:	d80a      	bhi.n	8009692 <_printf_i+0x32>
 800967c:	2f00      	cmp	r7, #0
 800967e:	f000 80d8 	beq.w	8009832 <_printf_i+0x1d2>
 8009682:	2f58      	cmp	r7, #88	; 0x58
 8009684:	f000 80a3 	beq.w	80097ce <_printf_i+0x16e>
 8009688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800968c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009690:	e03a      	b.n	8009708 <_printf_i+0xa8>
 8009692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009696:	2b15      	cmp	r3, #21
 8009698:	d8f6      	bhi.n	8009688 <_printf_i+0x28>
 800969a:	a101      	add	r1, pc, #4	; (adr r1, 80096a0 <_printf_i+0x40>)
 800969c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096a0:	080096f9 	.word	0x080096f9
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	08009689 	.word	0x08009689
 80096ac:	08009689 	.word	0x08009689
 80096b0:	08009689 	.word	0x08009689
 80096b4:	08009689 	.word	0x08009689
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	08009689 	.word	0x08009689
 80096c0:	08009689 	.word	0x08009689
 80096c4:	08009689 	.word	0x08009689
 80096c8:	08009689 	.word	0x08009689
 80096cc:	08009819 	.word	0x08009819
 80096d0:	0800973d 	.word	0x0800973d
 80096d4:	080097fb 	.word	0x080097fb
 80096d8:	08009689 	.word	0x08009689
 80096dc:	08009689 	.word	0x08009689
 80096e0:	0800983b 	.word	0x0800983b
 80096e4:	08009689 	.word	0x08009689
 80096e8:	0800973d 	.word	0x0800973d
 80096ec:	08009689 	.word	0x08009689
 80096f0:	08009689 	.word	0x08009689
 80096f4:	08009803 	.word	0x08009803
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	1d1a      	adds	r2, r3, #4
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	602a      	str	r2, [r5, #0]
 8009700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009708:	2301      	movs	r3, #1
 800970a:	e0a3      	b.n	8009854 <_printf_i+0x1f4>
 800970c:	6820      	ldr	r0, [r4, #0]
 800970e:	6829      	ldr	r1, [r5, #0]
 8009710:	0606      	lsls	r6, r0, #24
 8009712:	f101 0304 	add.w	r3, r1, #4
 8009716:	d50a      	bpl.n	800972e <_printf_i+0xce>
 8009718:	680e      	ldr	r6, [r1, #0]
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	2e00      	cmp	r6, #0
 800971e:	da03      	bge.n	8009728 <_printf_i+0xc8>
 8009720:	232d      	movs	r3, #45	; 0x2d
 8009722:	4276      	negs	r6, r6
 8009724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009728:	485e      	ldr	r0, [pc, #376]	; (80098a4 <_printf_i+0x244>)
 800972a:	230a      	movs	r3, #10
 800972c:	e019      	b.n	8009762 <_printf_i+0x102>
 800972e:	680e      	ldr	r6, [r1, #0]
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009736:	bf18      	it	ne
 8009738:	b236      	sxthne	r6, r6
 800973a:	e7ef      	b.n	800971c <_printf_i+0xbc>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	6820      	ldr	r0, [r4, #0]
 8009740:	1d19      	adds	r1, r3, #4
 8009742:	6029      	str	r1, [r5, #0]
 8009744:	0601      	lsls	r1, r0, #24
 8009746:	d501      	bpl.n	800974c <_printf_i+0xec>
 8009748:	681e      	ldr	r6, [r3, #0]
 800974a:	e002      	b.n	8009752 <_printf_i+0xf2>
 800974c:	0646      	lsls	r6, r0, #25
 800974e:	d5fb      	bpl.n	8009748 <_printf_i+0xe8>
 8009750:	881e      	ldrh	r6, [r3, #0]
 8009752:	4854      	ldr	r0, [pc, #336]	; (80098a4 <_printf_i+0x244>)
 8009754:	2f6f      	cmp	r7, #111	; 0x6f
 8009756:	bf0c      	ite	eq
 8009758:	2308      	moveq	r3, #8
 800975a:	230a      	movne	r3, #10
 800975c:	2100      	movs	r1, #0
 800975e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009762:	6865      	ldr	r5, [r4, #4]
 8009764:	60a5      	str	r5, [r4, #8]
 8009766:	2d00      	cmp	r5, #0
 8009768:	bfa2      	ittt	ge
 800976a:	6821      	ldrge	r1, [r4, #0]
 800976c:	f021 0104 	bicge.w	r1, r1, #4
 8009770:	6021      	strge	r1, [r4, #0]
 8009772:	b90e      	cbnz	r6, 8009778 <_printf_i+0x118>
 8009774:	2d00      	cmp	r5, #0
 8009776:	d04d      	beq.n	8009814 <_printf_i+0x1b4>
 8009778:	4615      	mov	r5, r2
 800977a:	fbb6 f1f3 	udiv	r1, r6, r3
 800977e:	fb03 6711 	mls	r7, r3, r1, r6
 8009782:	5dc7      	ldrb	r7, [r0, r7]
 8009784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009788:	4637      	mov	r7, r6
 800978a:	42bb      	cmp	r3, r7
 800978c:	460e      	mov	r6, r1
 800978e:	d9f4      	bls.n	800977a <_printf_i+0x11a>
 8009790:	2b08      	cmp	r3, #8
 8009792:	d10b      	bne.n	80097ac <_printf_i+0x14c>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	07de      	lsls	r6, r3, #31
 8009798:	d508      	bpl.n	80097ac <_printf_i+0x14c>
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	6861      	ldr	r1, [r4, #4]
 800979e:	4299      	cmp	r1, r3
 80097a0:	bfde      	ittt	le
 80097a2:	2330      	movle	r3, #48	; 0x30
 80097a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097ac:	1b52      	subs	r2, r2, r5
 80097ae:	6122      	str	r2, [r4, #16]
 80097b0:	f8cd a000 	str.w	sl, [sp]
 80097b4:	464b      	mov	r3, r9
 80097b6:	aa03      	add	r2, sp, #12
 80097b8:	4621      	mov	r1, r4
 80097ba:	4640      	mov	r0, r8
 80097bc:	f7ff fee2 	bl	8009584 <_printf_common>
 80097c0:	3001      	adds	r0, #1
 80097c2:	d14c      	bne.n	800985e <_printf_i+0x1fe>
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	b004      	add	sp, #16
 80097ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ce:	4835      	ldr	r0, [pc, #212]	; (80098a4 <_printf_i+0x244>)
 80097d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097d4:	6829      	ldr	r1, [r5, #0]
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097dc:	6029      	str	r1, [r5, #0]
 80097de:	061d      	lsls	r5, r3, #24
 80097e0:	d514      	bpl.n	800980c <_printf_i+0x1ac>
 80097e2:	07df      	lsls	r7, r3, #31
 80097e4:	bf44      	itt	mi
 80097e6:	f043 0320 	orrmi.w	r3, r3, #32
 80097ea:	6023      	strmi	r3, [r4, #0]
 80097ec:	b91e      	cbnz	r6, 80097f6 <_printf_i+0x196>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	f023 0320 	bic.w	r3, r3, #32
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	2310      	movs	r3, #16
 80097f8:	e7b0      	b.n	800975c <_printf_i+0xfc>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f043 0320 	orr.w	r3, r3, #32
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	2378      	movs	r3, #120	; 0x78
 8009804:	4828      	ldr	r0, [pc, #160]	; (80098a8 <_printf_i+0x248>)
 8009806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800980a:	e7e3      	b.n	80097d4 <_printf_i+0x174>
 800980c:	0659      	lsls	r1, r3, #25
 800980e:	bf48      	it	mi
 8009810:	b2b6      	uxthmi	r6, r6
 8009812:	e7e6      	b.n	80097e2 <_printf_i+0x182>
 8009814:	4615      	mov	r5, r2
 8009816:	e7bb      	b.n	8009790 <_printf_i+0x130>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	6826      	ldr	r6, [r4, #0]
 800981c:	6961      	ldr	r1, [r4, #20]
 800981e:	1d18      	adds	r0, r3, #4
 8009820:	6028      	str	r0, [r5, #0]
 8009822:	0635      	lsls	r5, r6, #24
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	d501      	bpl.n	800982c <_printf_i+0x1cc>
 8009828:	6019      	str	r1, [r3, #0]
 800982a:	e002      	b.n	8009832 <_printf_i+0x1d2>
 800982c:	0670      	lsls	r0, r6, #25
 800982e:	d5fb      	bpl.n	8009828 <_printf_i+0x1c8>
 8009830:	8019      	strh	r1, [r3, #0]
 8009832:	2300      	movs	r3, #0
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	4615      	mov	r5, r2
 8009838:	e7ba      	b.n	80097b0 <_printf_i+0x150>
 800983a:	682b      	ldr	r3, [r5, #0]
 800983c:	1d1a      	adds	r2, r3, #4
 800983e:	602a      	str	r2, [r5, #0]
 8009840:	681d      	ldr	r5, [r3, #0]
 8009842:	6862      	ldr	r2, [r4, #4]
 8009844:	2100      	movs	r1, #0
 8009846:	4628      	mov	r0, r5
 8009848:	f7f6 fce2 	bl	8000210 <memchr>
 800984c:	b108      	cbz	r0, 8009852 <_printf_i+0x1f2>
 800984e:	1b40      	subs	r0, r0, r5
 8009850:	6060      	str	r0, [r4, #4]
 8009852:	6863      	ldr	r3, [r4, #4]
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	2300      	movs	r3, #0
 8009858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800985c:	e7a8      	b.n	80097b0 <_printf_i+0x150>
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	462a      	mov	r2, r5
 8009862:	4649      	mov	r1, r9
 8009864:	4640      	mov	r0, r8
 8009866:	47d0      	blx	sl
 8009868:	3001      	adds	r0, #1
 800986a:	d0ab      	beq.n	80097c4 <_printf_i+0x164>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	079b      	lsls	r3, r3, #30
 8009870:	d413      	bmi.n	800989a <_printf_i+0x23a>
 8009872:	68e0      	ldr	r0, [r4, #12]
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	4298      	cmp	r0, r3
 8009878:	bfb8      	it	lt
 800987a:	4618      	movlt	r0, r3
 800987c:	e7a4      	b.n	80097c8 <_printf_i+0x168>
 800987e:	2301      	movs	r3, #1
 8009880:	4632      	mov	r2, r6
 8009882:	4649      	mov	r1, r9
 8009884:	4640      	mov	r0, r8
 8009886:	47d0      	blx	sl
 8009888:	3001      	adds	r0, #1
 800988a:	d09b      	beq.n	80097c4 <_printf_i+0x164>
 800988c:	3501      	adds	r5, #1
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	9903      	ldr	r1, [sp, #12]
 8009892:	1a5b      	subs	r3, r3, r1
 8009894:	42ab      	cmp	r3, r5
 8009896:	dcf2      	bgt.n	800987e <_printf_i+0x21e>
 8009898:	e7eb      	b.n	8009872 <_printf_i+0x212>
 800989a:	2500      	movs	r5, #0
 800989c:	f104 0619 	add.w	r6, r4, #25
 80098a0:	e7f5      	b.n	800988e <_printf_i+0x22e>
 80098a2:	bf00      	nop
 80098a4:	0800bdfe 	.word	0x0800bdfe
 80098a8:	0800be0f 	.word	0x0800be0f

080098ac <siprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b500      	push	{lr}
 80098b0:	b09c      	sub	sp, #112	; 0x70
 80098b2:	ab1d      	add	r3, sp, #116	; 0x74
 80098b4:	9002      	str	r0, [sp, #8]
 80098b6:	9006      	str	r0, [sp, #24]
 80098b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098bc:	4809      	ldr	r0, [pc, #36]	; (80098e4 <siprintf+0x38>)
 80098be:	9107      	str	r1, [sp, #28]
 80098c0:	9104      	str	r1, [sp, #16]
 80098c2:	4909      	ldr	r1, [pc, #36]	; (80098e8 <siprintf+0x3c>)
 80098c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c8:	9105      	str	r1, [sp, #20]
 80098ca:	6800      	ldr	r0, [r0, #0]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	a902      	add	r1, sp, #8
 80098d0:	f001 fb78 	bl	800afc4 <_svfiprintf_r>
 80098d4:	9b02      	ldr	r3, [sp, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	b01c      	add	sp, #112	; 0x70
 80098dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e0:	b003      	add	sp, #12
 80098e2:	4770      	bx	lr
 80098e4:	20000010 	.word	0x20000010
 80098e8:	ffff0208 	.word	0xffff0208

080098ec <quorem>:
 80098ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	6903      	ldr	r3, [r0, #16]
 80098f2:	690c      	ldr	r4, [r1, #16]
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	4607      	mov	r7, r0
 80098f8:	f2c0 8081 	blt.w	80099fe <quorem+0x112>
 80098fc:	3c01      	subs	r4, #1
 80098fe:	f101 0814 	add.w	r8, r1, #20
 8009902:	f100 0514 	add.w	r5, r0, #20
 8009906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009914:	3301      	adds	r3, #1
 8009916:	429a      	cmp	r2, r3
 8009918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800991c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009920:	fbb2 f6f3 	udiv	r6, r2, r3
 8009924:	d331      	bcc.n	800998a <quorem+0x9e>
 8009926:	f04f 0e00 	mov.w	lr, #0
 800992a:	4640      	mov	r0, r8
 800992c:	46ac      	mov	ip, r5
 800992e:	46f2      	mov	sl, lr
 8009930:	f850 2b04 	ldr.w	r2, [r0], #4
 8009934:	b293      	uxth	r3, r2
 8009936:	fb06 e303 	mla	r3, r6, r3, lr
 800993a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800993e:	b29b      	uxth	r3, r3
 8009940:	ebaa 0303 	sub.w	r3, sl, r3
 8009944:	f8dc a000 	ldr.w	sl, [ip]
 8009948:	0c12      	lsrs	r2, r2, #16
 800994a:	fa13 f38a 	uxtah	r3, r3, sl
 800994e:	fb06 e202 	mla	r2, r6, r2, lr
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	9b00      	ldr	r3, [sp, #0]
 8009956:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800995a:	b292      	uxth	r2, r2
 800995c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009964:	f8bd 3000 	ldrh.w	r3, [sp]
 8009968:	4581      	cmp	r9, r0
 800996a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800996e:	f84c 3b04 	str.w	r3, [ip], #4
 8009972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009976:	d2db      	bcs.n	8009930 <quorem+0x44>
 8009978:	f855 300b 	ldr.w	r3, [r5, fp]
 800997c:	b92b      	cbnz	r3, 800998a <quorem+0x9e>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	3b04      	subs	r3, #4
 8009982:	429d      	cmp	r5, r3
 8009984:	461a      	mov	r2, r3
 8009986:	d32e      	bcc.n	80099e6 <quorem+0xfa>
 8009988:	613c      	str	r4, [r7, #16]
 800998a:	4638      	mov	r0, r7
 800998c:	f001 f8c6 	bl	800ab1c <__mcmp>
 8009990:	2800      	cmp	r0, #0
 8009992:	db24      	blt.n	80099de <quorem+0xf2>
 8009994:	3601      	adds	r6, #1
 8009996:	4628      	mov	r0, r5
 8009998:	f04f 0c00 	mov.w	ip, #0
 800999c:	f858 2b04 	ldr.w	r2, [r8], #4
 80099a0:	f8d0 e000 	ldr.w	lr, [r0]
 80099a4:	b293      	uxth	r3, r2
 80099a6:	ebac 0303 	sub.w	r3, ip, r3
 80099aa:	0c12      	lsrs	r2, r2, #16
 80099ac:	fa13 f38e 	uxtah	r3, r3, lr
 80099b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099be:	45c1      	cmp	r9, r8
 80099c0:	f840 3b04 	str.w	r3, [r0], #4
 80099c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099c8:	d2e8      	bcs.n	800999c <quorem+0xb0>
 80099ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099d2:	b922      	cbnz	r2, 80099de <quorem+0xf2>
 80099d4:	3b04      	subs	r3, #4
 80099d6:	429d      	cmp	r5, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	d30a      	bcc.n	80099f2 <quorem+0x106>
 80099dc:	613c      	str	r4, [r7, #16]
 80099de:	4630      	mov	r0, r6
 80099e0:	b003      	add	sp, #12
 80099e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e6:	6812      	ldr	r2, [r2, #0]
 80099e8:	3b04      	subs	r3, #4
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	d1cc      	bne.n	8009988 <quorem+0x9c>
 80099ee:	3c01      	subs	r4, #1
 80099f0:	e7c7      	b.n	8009982 <quorem+0x96>
 80099f2:	6812      	ldr	r2, [r2, #0]
 80099f4:	3b04      	subs	r3, #4
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	d1f0      	bne.n	80099dc <quorem+0xf0>
 80099fa:	3c01      	subs	r4, #1
 80099fc:	e7eb      	b.n	80099d6 <quorem+0xea>
 80099fe:	2000      	movs	r0, #0
 8009a00:	e7ee      	b.n	80099e0 <quorem+0xf4>
 8009a02:	0000      	movs	r0, r0
 8009a04:	0000      	movs	r0, r0
	...

08009a08 <_dtoa_r>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	ed2d 8b04 	vpush	{d8-d9}
 8009a10:	ec57 6b10 	vmov	r6, r7, d0
 8009a14:	b093      	sub	sp, #76	; 0x4c
 8009a16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a1c:	9106      	str	r1, [sp, #24]
 8009a1e:	ee10 aa10 	vmov	sl, s0
 8009a22:	4604      	mov	r4, r0
 8009a24:	9209      	str	r2, [sp, #36]	; 0x24
 8009a26:	930c      	str	r3, [sp, #48]	; 0x30
 8009a28:	46bb      	mov	fp, r7
 8009a2a:	b975      	cbnz	r5, 8009a4a <_dtoa_r+0x42>
 8009a2c:	2010      	movs	r0, #16
 8009a2e:	f000 fddd 	bl	800a5ec <malloc>
 8009a32:	4602      	mov	r2, r0
 8009a34:	6260      	str	r0, [r4, #36]	; 0x24
 8009a36:	b920      	cbnz	r0, 8009a42 <_dtoa_r+0x3a>
 8009a38:	4ba7      	ldr	r3, [pc, #668]	; (8009cd8 <_dtoa_r+0x2d0>)
 8009a3a:	21ea      	movs	r1, #234	; 0xea
 8009a3c:	48a7      	ldr	r0, [pc, #668]	; (8009cdc <_dtoa_r+0x2d4>)
 8009a3e:	f001 fbd1 	bl	800b1e4 <__assert_func>
 8009a42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a46:	6005      	str	r5, [r0, #0]
 8009a48:	60c5      	str	r5, [r0, #12]
 8009a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a4c:	6819      	ldr	r1, [r3, #0]
 8009a4e:	b151      	cbz	r1, 8009a66 <_dtoa_r+0x5e>
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	604a      	str	r2, [r1, #4]
 8009a54:	2301      	movs	r3, #1
 8009a56:	4093      	lsls	r3, r2
 8009a58:	608b      	str	r3, [r1, #8]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 fe1c 	bl	800a698 <_Bfree>
 8009a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	1e3b      	subs	r3, r7, #0
 8009a68:	bfaa      	itet	ge
 8009a6a:	2300      	movge	r3, #0
 8009a6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a70:	f8c8 3000 	strge.w	r3, [r8]
 8009a74:	4b9a      	ldr	r3, [pc, #616]	; (8009ce0 <_dtoa_r+0x2d8>)
 8009a76:	bfbc      	itt	lt
 8009a78:	2201      	movlt	r2, #1
 8009a7a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a7e:	ea33 030b 	bics.w	r3, r3, fp
 8009a82:	d11b      	bne.n	8009abc <_dtoa_r+0xb4>
 8009a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a90:	4333      	orrs	r3, r6
 8009a92:	f000 8592 	beq.w	800a5ba <_dtoa_r+0xbb2>
 8009a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a98:	b963      	cbnz	r3, 8009ab4 <_dtoa_r+0xac>
 8009a9a:	4b92      	ldr	r3, [pc, #584]	; (8009ce4 <_dtoa_r+0x2dc>)
 8009a9c:	e022      	b.n	8009ae4 <_dtoa_r+0xdc>
 8009a9e:	4b92      	ldr	r3, [pc, #584]	; (8009ce8 <_dtoa_r+0x2e0>)
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	9801      	ldr	r0, [sp, #4]
 8009aaa:	b013      	add	sp, #76	; 0x4c
 8009aac:	ecbd 8b04 	vpop	{d8-d9}
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	4b8b      	ldr	r3, [pc, #556]	; (8009ce4 <_dtoa_r+0x2dc>)
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	3303      	adds	r3, #3
 8009aba:	e7f3      	b.n	8009aa4 <_dtoa_r+0x9c>
 8009abc:	2200      	movs	r2, #0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	f7f7 f818 	bl	8000af8 <__aeabi_dcmpeq>
 8009ac8:	ec4b ab19 	vmov	d9, sl, fp
 8009acc:	4680      	mov	r8, r0
 8009ace:	b158      	cbz	r0, 8009ae8 <_dtoa_r+0xe0>
 8009ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 856b 	beq.w	800a5b4 <_dtoa_r+0xbac>
 8009ade:	4883      	ldr	r0, [pc, #524]	; (8009cec <_dtoa_r+0x2e4>)
 8009ae0:	6018      	str	r0, [r3, #0]
 8009ae2:	1e43      	subs	r3, r0, #1
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	e7df      	b.n	8009aa8 <_dtoa_r+0xa0>
 8009ae8:	ec4b ab10 	vmov	d0, sl, fp
 8009aec:	aa10      	add	r2, sp, #64	; 0x40
 8009aee:	a911      	add	r1, sp, #68	; 0x44
 8009af0:	4620      	mov	r0, r4
 8009af2:	f001 f8b9 	bl	800ac68 <__d2b>
 8009af6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009afa:	ee08 0a10 	vmov	s16, r0
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	f000 8084 	beq.w	8009c0c <_dtoa_r+0x204>
 8009b04:	ee19 3a90 	vmov	r3, s19
 8009b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b10:	4656      	mov	r6, sl
 8009b12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b1e:	4b74      	ldr	r3, [pc, #464]	; (8009cf0 <_dtoa_r+0x2e8>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fbc7 	bl	80002b8 <__aeabi_dsub>
 8009b2a:	a365      	add	r3, pc, #404	; (adr r3, 8009cc0 <_dtoa_r+0x2b8>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fd7a 	bl	8000628 <__aeabi_dmul>
 8009b34:	a364      	add	r3, pc, #400	; (adr r3, 8009cc8 <_dtoa_r+0x2c0>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fbbf 	bl	80002bc <__adddf3>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	4628      	mov	r0, r5
 8009b42:	460f      	mov	r7, r1
 8009b44:	f7f6 fd06 	bl	8000554 <__aeabi_i2d>
 8009b48:	a361      	add	r3, pc, #388	; (adr r3, 8009cd0 <_dtoa_r+0x2c8>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 fd6b 	bl	8000628 <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4630      	mov	r0, r6
 8009b58:	4639      	mov	r1, r7
 8009b5a:	f7f6 fbaf 	bl	80002bc <__adddf3>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	f7f7 f811 	bl	8000b88 <__aeabi_d2iz>
 8009b66:	2200      	movs	r2, #0
 8009b68:	9000      	str	r0, [sp, #0]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 ffcc 	bl	8000b0c <__aeabi_dcmplt>
 8009b74:	b150      	cbz	r0, 8009b8c <_dtoa_r+0x184>
 8009b76:	9800      	ldr	r0, [sp, #0]
 8009b78:	f7f6 fcec 	bl	8000554 <__aeabi_i2d>
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	463b      	mov	r3, r7
 8009b80:	f7f6 ffba 	bl	8000af8 <__aeabi_dcmpeq>
 8009b84:	b910      	cbnz	r0, 8009b8c <_dtoa_r+0x184>
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	2b16      	cmp	r3, #22
 8009b90:	d85a      	bhi.n	8009c48 <_dtoa_r+0x240>
 8009b92:	9a00      	ldr	r2, [sp, #0]
 8009b94:	4b57      	ldr	r3, [pc, #348]	; (8009cf4 <_dtoa_r+0x2ec>)
 8009b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	ec51 0b19 	vmov	r0, r1, d9
 8009ba2:	f7f6 ffb3 	bl	8000b0c <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d050      	beq.n	8009c4c <_dtoa_r+0x244>
 8009baa:	9b00      	ldr	r3, [sp, #0]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bb6:	1b5d      	subs	r5, r3, r5
 8009bb8:	1e6b      	subs	r3, r5, #1
 8009bba:	9305      	str	r3, [sp, #20]
 8009bbc:	bf45      	ittet	mi
 8009bbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009bc2:	9304      	strmi	r3, [sp, #16]
 8009bc4:	2300      	movpl	r3, #0
 8009bc6:	2300      	movmi	r3, #0
 8009bc8:	bf4c      	ite	mi
 8009bca:	9305      	strmi	r3, [sp, #20]
 8009bcc:	9304      	strpl	r3, [sp, #16]
 8009bce:	9b00      	ldr	r3, [sp, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db3d      	blt.n	8009c50 <_dtoa_r+0x248>
 8009bd4:	9b05      	ldr	r3, [sp, #20]
 8009bd6:	9a00      	ldr	r2, [sp, #0]
 8009bd8:	920a      	str	r2, [sp, #40]	; 0x28
 8009bda:	4413      	add	r3, r2
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	2300      	movs	r3, #0
 8009be0:	9307      	str	r3, [sp, #28]
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	2b09      	cmp	r3, #9
 8009be6:	f200 8089 	bhi.w	8009cfc <_dtoa_r+0x2f4>
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	bfc4      	itt	gt
 8009bee:	3b04      	subgt	r3, #4
 8009bf0:	9306      	strgt	r3, [sp, #24]
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	f1a3 0302 	sub.w	r3, r3, #2
 8009bf8:	bfcc      	ite	gt
 8009bfa:	2500      	movgt	r5, #0
 8009bfc:	2501      	movle	r5, #1
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	f200 8087 	bhi.w	8009d12 <_dtoa_r+0x30a>
 8009c04:	e8df f003 	tbb	[pc, r3]
 8009c08:	59383a2d 	.word	0x59383a2d
 8009c0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c10:	441d      	add	r5, r3
 8009c12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	bfc1      	itttt	gt
 8009c1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c22:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c2a:	bfda      	itte	le
 8009c2c:	f1c3 0320 	rsble	r3, r3, #32
 8009c30:	fa06 f003 	lslle.w	r0, r6, r3
 8009c34:	4318      	orrgt	r0, r3
 8009c36:	f7f6 fc7d 	bl	8000534 <__aeabi_ui2d>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c42:	3d01      	subs	r5, #1
 8009c44:	930e      	str	r3, [sp, #56]	; 0x38
 8009c46:	e76a      	b.n	8009b1e <_dtoa_r+0x116>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7b2      	b.n	8009bb2 <_dtoa_r+0x1aa>
 8009c4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c4e:	e7b1      	b.n	8009bb4 <_dtoa_r+0x1ac>
 8009c50:	9b04      	ldr	r3, [sp, #16]
 8009c52:	9a00      	ldr	r2, [sp, #0]
 8009c54:	1a9b      	subs	r3, r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	4253      	negs	r3, r2
 8009c5a:	9307      	str	r3, [sp, #28]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c60:	e7bf      	b.n	8009be2 <_dtoa_r+0x1da>
 8009c62:	2300      	movs	r3, #0
 8009c64:	9308      	str	r3, [sp, #32]
 8009c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	dc55      	bgt.n	8009d18 <_dtoa_r+0x310>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c72:	461a      	mov	r2, r3
 8009c74:	9209      	str	r2, [sp, #36]	; 0x24
 8009c76:	e00c      	b.n	8009c92 <_dtoa_r+0x28a>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e7f3      	b.n	8009c64 <_dtoa_r+0x25c>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c80:	9308      	str	r3, [sp, #32]
 8009c82:	9b00      	ldr	r3, [sp, #0]
 8009c84:	4413      	add	r3, r2
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	bfb8      	it	lt
 8009c90:	2301      	movlt	r3, #1
 8009c92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c94:	2200      	movs	r2, #0
 8009c96:	6042      	str	r2, [r0, #4]
 8009c98:	2204      	movs	r2, #4
 8009c9a:	f102 0614 	add.w	r6, r2, #20
 8009c9e:	429e      	cmp	r6, r3
 8009ca0:	6841      	ldr	r1, [r0, #4]
 8009ca2:	d93d      	bls.n	8009d20 <_dtoa_r+0x318>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 fcb7 	bl	800a618 <_Balloc>
 8009caa:	9001      	str	r0, [sp, #4]
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d13b      	bne.n	8009d28 <_dtoa_r+0x320>
 8009cb0:	4b11      	ldr	r3, [pc, #68]	; (8009cf8 <_dtoa_r+0x2f0>)
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cb8:	e6c0      	b.n	8009a3c <_dtoa_r+0x34>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7df      	b.n	8009c7e <_dtoa_r+0x276>
 8009cbe:	bf00      	nop
 8009cc0:	636f4361 	.word	0x636f4361
 8009cc4:	3fd287a7 	.word	0x3fd287a7
 8009cc8:	8b60c8b3 	.word	0x8b60c8b3
 8009ccc:	3fc68a28 	.word	0x3fc68a28
 8009cd0:	509f79fb 	.word	0x509f79fb
 8009cd4:	3fd34413 	.word	0x3fd34413
 8009cd8:	0800be2d 	.word	0x0800be2d
 8009cdc:	0800be44 	.word	0x0800be44
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	0800be29 	.word	0x0800be29
 8009ce8:	0800be20 	.word	0x0800be20
 8009cec:	0800bdfd 	.word	0x0800bdfd
 8009cf0:	3ff80000 	.word	0x3ff80000
 8009cf4:	0800bf38 	.word	0x0800bf38
 8009cf8:	0800be9f 	.word	0x0800be9f
 8009cfc:	2501      	movs	r5, #1
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9306      	str	r3, [sp, #24]
 8009d02:	9508      	str	r5, [sp, #32]
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2312      	movs	r3, #18
 8009d10:	e7b0      	b.n	8009c74 <_dtoa_r+0x26c>
 8009d12:	2301      	movs	r3, #1
 8009d14:	9308      	str	r3, [sp, #32]
 8009d16:	e7f5      	b.n	8009d04 <_dtoa_r+0x2fc>
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d1e:	e7b8      	b.n	8009c92 <_dtoa_r+0x28a>
 8009d20:	3101      	adds	r1, #1
 8009d22:	6041      	str	r1, [r0, #4]
 8009d24:	0052      	lsls	r2, r2, #1
 8009d26:	e7b8      	b.n	8009c9a <_dtoa_r+0x292>
 8009d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d2a:	9a01      	ldr	r2, [sp, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	2b0e      	cmp	r3, #14
 8009d32:	f200 809d 	bhi.w	8009e70 <_dtoa_r+0x468>
 8009d36:	2d00      	cmp	r5, #0
 8009d38:	f000 809a 	beq.w	8009e70 <_dtoa_r+0x468>
 8009d3c:	9b00      	ldr	r3, [sp, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd32      	ble.n	8009da8 <_dtoa_r+0x3a0>
 8009d42:	4ab7      	ldr	r2, [pc, #732]	; (800a020 <_dtoa_r+0x618>)
 8009d44:	f003 030f 	and.w	r3, r3, #15
 8009d48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d50:	9b00      	ldr	r3, [sp, #0]
 8009d52:	05d8      	lsls	r0, r3, #23
 8009d54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d58:	d516      	bpl.n	8009d88 <_dtoa_r+0x380>
 8009d5a:	4bb2      	ldr	r3, [pc, #712]	; (800a024 <_dtoa_r+0x61c>)
 8009d5c:	ec51 0b19 	vmov	r0, r1, d9
 8009d60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d64:	f7f6 fd8a 	bl	800087c <__aeabi_ddiv>
 8009d68:	f007 070f 	and.w	r7, r7, #15
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	468b      	mov	fp, r1
 8009d70:	2503      	movs	r5, #3
 8009d72:	4eac      	ldr	r6, [pc, #688]	; (800a024 <_dtoa_r+0x61c>)
 8009d74:	b957      	cbnz	r7, 8009d8c <_dtoa_r+0x384>
 8009d76:	4642      	mov	r2, r8
 8009d78:	464b      	mov	r3, r9
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	4659      	mov	r1, fp
 8009d7e:	f7f6 fd7d 	bl	800087c <__aeabi_ddiv>
 8009d82:	4682      	mov	sl, r0
 8009d84:	468b      	mov	fp, r1
 8009d86:	e028      	b.n	8009dda <_dtoa_r+0x3d2>
 8009d88:	2502      	movs	r5, #2
 8009d8a:	e7f2      	b.n	8009d72 <_dtoa_r+0x36a>
 8009d8c:	07f9      	lsls	r1, r7, #31
 8009d8e:	d508      	bpl.n	8009da2 <_dtoa_r+0x39a>
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d98:	f7f6 fc46 	bl	8000628 <__aeabi_dmul>
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	4680      	mov	r8, r0
 8009da0:	4689      	mov	r9, r1
 8009da2:	107f      	asrs	r7, r7, #1
 8009da4:	3608      	adds	r6, #8
 8009da6:	e7e5      	b.n	8009d74 <_dtoa_r+0x36c>
 8009da8:	f000 809b 	beq.w	8009ee2 <_dtoa_r+0x4da>
 8009dac:	9b00      	ldr	r3, [sp, #0]
 8009dae:	4f9d      	ldr	r7, [pc, #628]	; (800a024 <_dtoa_r+0x61c>)
 8009db0:	425e      	negs	r6, r3
 8009db2:	4b9b      	ldr	r3, [pc, #620]	; (800a020 <_dtoa_r+0x618>)
 8009db4:	f006 020f 	and.w	r2, r6, #15
 8009db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	ec51 0b19 	vmov	r0, r1, d9
 8009dc4:	f7f6 fc30 	bl	8000628 <__aeabi_dmul>
 8009dc8:	1136      	asrs	r6, r6, #4
 8009dca:	4682      	mov	sl, r0
 8009dcc:	468b      	mov	fp, r1
 8009dce:	2300      	movs	r3, #0
 8009dd0:	2502      	movs	r5, #2
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d17a      	bne.n	8009ecc <_dtoa_r+0x4c4>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1d3      	bne.n	8009d82 <_dtoa_r+0x37a>
 8009dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 8082 	beq.w	8009ee6 <_dtoa_r+0x4de>
 8009de2:	4b91      	ldr	r3, [pc, #580]	; (800a028 <_dtoa_r+0x620>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	4650      	mov	r0, sl
 8009de8:	4659      	mov	r1, fp
 8009dea:	f7f6 fe8f 	bl	8000b0c <__aeabi_dcmplt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d079      	beq.n	8009ee6 <_dtoa_r+0x4de>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d076      	beq.n	8009ee6 <_dtoa_r+0x4de>
 8009df8:	9b02      	ldr	r3, [sp, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd36      	ble.n	8009e6c <_dtoa_r+0x464>
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	4650      	mov	r0, sl
 8009e02:	4659      	mov	r1, fp
 8009e04:	1e5f      	subs	r7, r3, #1
 8009e06:	2200      	movs	r2, #0
 8009e08:	4b88      	ldr	r3, [pc, #544]	; (800a02c <_dtoa_r+0x624>)
 8009e0a:	f7f6 fc0d 	bl	8000628 <__aeabi_dmul>
 8009e0e:	9e02      	ldr	r6, [sp, #8]
 8009e10:	4682      	mov	sl, r0
 8009e12:	468b      	mov	fp, r1
 8009e14:	3501      	adds	r5, #1
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7f6 fb9c 	bl	8000554 <__aeabi_i2d>
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	465b      	mov	r3, fp
 8009e20:	f7f6 fc02 	bl	8000628 <__aeabi_dmul>
 8009e24:	4b82      	ldr	r3, [pc, #520]	; (800a030 <_dtoa_r+0x628>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	f7f6 fa48 	bl	80002bc <__adddf3>
 8009e2c:	46d0      	mov	r8, sl
 8009e2e:	46d9      	mov	r9, fp
 8009e30:	4682      	mov	sl, r0
 8009e32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	d158      	bne.n	8009eec <_dtoa_r+0x4e4>
 8009e3a:	4b7e      	ldr	r3, [pc, #504]	; (800a034 <_dtoa_r+0x62c>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 fa39 	bl	80002b8 <__aeabi_dsub>
 8009e46:	4652      	mov	r2, sl
 8009e48:	465b      	mov	r3, fp
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	4689      	mov	r9, r1
 8009e4e:	f7f6 fe7b 	bl	8000b48 <__aeabi_dcmpgt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f040 8295 	bne.w	800a382 <_dtoa_r+0x97a>
 8009e58:	4652      	mov	r2, sl
 8009e5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e5e:	4640      	mov	r0, r8
 8009e60:	4649      	mov	r1, r9
 8009e62:	f7f6 fe53 	bl	8000b0c <__aeabi_dcmplt>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f040 8289 	bne.w	800a37e <_dtoa_r+0x976>
 8009e6c:	ec5b ab19 	vmov	sl, fp, d9
 8009e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f2c0 8148 	blt.w	800a108 <_dtoa_r+0x700>
 8009e78:	9a00      	ldr	r2, [sp, #0]
 8009e7a:	2a0e      	cmp	r2, #14
 8009e7c:	f300 8144 	bgt.w	800a108 <_dtoa_r+0x700>
 8009e80:	4b67      	ldr	r3, [pc, #412]	; (800a020 <_dtoa_r+0x618>)
 8009e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f280 80d5 	bge.w	800a03c <_dtoa_r+0x634>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f300 80d1 	bgt.w	800a03c <_dtoa_r+0x634>
 8009e9a:	f040 826f 	bne.w	800a37c <_dtoa_r+0x974>
 8009e9e:	4b65      	ldr	r3, [pc, #404]	; (800a034 <_dtoa_r+0x62c>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	f7f6 fbbf 	bl	8000628 <__aeabi_dmul>
 8009eaa:	4652      	mov	r2, sl
 8009eac:	465b      	mov	r3, fp
 8009eae:	f7f6 fe41 	bl	8000b34 <__aeabi_dcmpge>
 8009eb2:	9e03      	ldr	r6, [sp, #12]
 8009eb4:	4637      	mov	r7, r6
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f040 8245 	bne.w	800a346 <_dtoa_r+0x93e>
 8009ebc:	9d01      	ldr	r5, [sp, #4]
 8009ebe:	2331      	movs	r3, #49	; 0x31
 8009ec0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ec4:	9b00      	ldr	r3, [sp, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	e240      	b.n	800a34e <_dtoa_r+0x946>
 8009ecc:	07f2      	lsls	r2, r6, #31
 8009ece:	d505      	bpl.n	8009edc <_dtoa_r+0x4d4>
 8009ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed4:	f7f6 fba8 	bl	8000628 <__aeabi_dmul>
 8009ed8:	3501      	adds	r5, #1
 8009eda:	2301      	movs	r3, #1
 8009edc:	1076      	asrs	r6, r6, #1
 8009ede:	3708      	adds	r7, #8
 8009ee0:	e777      	b.n	8009dd2 <_dtoa_r+0x3ca>
 8009ee2:	2502      	movs	r5, #2
 8009ee4:	e779      	b.n	8009dda <_dtoa_r+0x3d2>
 8009ee6:	9f00      	ldr	r7, [sp, #0]
 8009ee8:	9e03      	ldr	r6, [sp, #12]
 8009eea:	e794      	b.n	8009e16 <_dtoa_r+0x40e>
 8009eec:	9901      	ldr	r1, [sp, #4]
 8009eee:	4b4c      	ldr	r3, [pc, #304]	; (800a020 <_dtoa_r+0x618>)
 8009ef0:	4431      	add	r1, r6
 8009ef2:	910d      	str	r1, [sp, #52]	; 0x34
 8009ef4:	9908      	ldr	r1, [sp, #32]
 8009ef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009efe:	2900      	cmp	r1, #0
 8009f00:	d043      	beq.n	8009f8a <_dtoa_r+0x582>
 8009f02:	494d      	ldr	r1, [pc, #308]	; (800a038 <_dtoa_r+0x630>)
 8009f04:	2000      	movs	r0, #0
 8009f06:	f7f6 fcb9 	bl	800087c <__aeabi_ddiv>
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	465b      	mov	r3, fp
 8009f0e:	f7f6 f9d3 	bl	80002b8 <__aeabi_dsub>
 8009f12:	9d01      	ldr	r5, [sp, #4]
 8009f14:	4682      	mov	sl, r0
 8009f16:	468b      	mov	fp, r1
 8009f18:	4649      	mov	r1, r9
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7f6 fe34 	bl	8000b88 <__aeabi_d2iz>
 8009f20:	4606      	mov	r6, r0
 8009f22:	f7f6 fb17 	bl	8000554 <__aeabi_i2d>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	f7f6 f9c3 	bl	80002b8 <__aeabi_dsub>
 8009f32:	3630      	adds	r6, #48	; 0x30
 8009f34:	f805 6b01 	strb.w	r6, [r5], #1
 8009f38:	4652      	mov	r2, sl
 8009f3a:	465b      	mov	r3, fp
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	4689      	mov	r9, r1
 8009f40:	f7f6 fde4 	bl	8000b0c <__aeabi_dcmplt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d163      	bne.n	800a010 <_dtoa_r+0x608>
 8009f48:	4642      	mov	r2, r8
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	4936      	ldr	r1, [pc, #216]	; (800a028 <_dtoa_r+0x620>)
 8009f4e:	2000      	movs	r0, #0
 8009f50:	f7f6 f9b2 	bl	80002b8 <__aeabi_dsub>
 8009f54:	4652      	mov	r2, sl
 8009f56:	465b      	mov	r3, fp
 8009f58:	f7f6 fdd8 	bl	8000b0c <__aeabi_dcmplt>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f040 80b5 	bne.w	800a0cc <_dtoa_r+0x6c4>
 8009f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f64:	429d      	cmp	r5, r3
 8009f66:	d081      	beq.n	8009e6c <_dtoa_r+0x464>
 8009f68:	4b30      	ldr	r3, [pc, #192]	; (800a02c <_dtoa_r+0x624>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	4659      	mov	r1, fp
 8009f70:	f7f6 fb5a 	bl	8000628 <__aeabi_dmul>
 8009f74:	4b2d      	ldr	r3, [pc, #180]	; (800a02c <_dtoa_r+0x624>)
 8009f76:	4682      	mov	sl, r0
 8009f78:	468b      	mov	fp, r1
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f7f6 fb52 	bl	8000628 <__aeabi_dmul>
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	e7c6      	b.n	8009f18 <_dtoa_r+0x510>
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	f7f6 fb4b 	bl	8000628 <__aeabi_dmul>
 8009f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f94:	9d01      	ldr	r5, [sp, #4]
 8009f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f98:	4682      	mov	sl, r0
 8009f9a:	468b      	mov	fp, r1
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	f7f6 fdf2 	bl	8000b88 <__aeabi_d2iz>
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	f7f6 fad5 	bl	8000554 <__aeabi_i2d>
 8009faa:	3630      	adds	r6, #48	; 0x30
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 f980 	bl	80002b8 <__aeabi_dsub>
 8009fb8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	4689      	mov	r9, r1
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	d124      	bne.n	800a014 <_dtoa_r+0x60c>
 8009fca:	4b1b      	ldr	r3, [pc, #108]	; (800a038 <_dtoa_r+0x630>)
 8009fcc:	4650      	mov	r0, sl
 8009fce:	4659      	mov	r1, fp
 8009fd0:	f7f6 f974 	bl	80002bc <__adddf3>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 fdb4 	bl	8000b48 <__aeabi_dcmpgt>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d173      	bne.n	800a0cc <_dtoa_r+0x6c4>
 8009fe4:	4652      	mov	r2, sl
 8009fe6:	465b      	mov	r3, fp
 8009fe8:	4913      	ldr	r1, [pc, #76]	; (800a038 <_dtoa_r+0x630>)
 8009fea:	2000      	movs	r0, #0
 8009fec:	f7f6 f964 	bl	80002b8 <__aeabi_dsub>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	f7f6 fd88 	bl	8000b0c <__aeabi_dcmplt>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	f43f af35 	beq.w	8009e6c <_dtoa_r+0x464>
 800a002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a004:	1e6b      	subs	r3, r5, #1
 800a006:	930f      	str	r3, [sp, #60]	; 0x3c
 800a008:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a00c:	2b30      	cmp	r3, #48	; 0x30
 800a00e:	d0f8      	beq.n	800a002 <_dtoa_r+0x5fa>
 800a010:	9700      	str	r7, [sp, #0]
 800a012:	e049      	b.n	800a0a8 <_dtoa_r+0x6a0>
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <_dtoa_r+0x624>)
 800a016:	f7f6 fb07 	bl	8000628 <__aeabi_dmul>
 800a01a:	4680      	mov	r8, r0
 800a01c:	4689      	mov	r9, r1
 800a01e:	e7bd      	b.n	8009f9c <_dtoa_r+0x594>
 800a020:	0800bf38 	.word	0x0800bf38
 800a024:	0800bf10 	.word	0x0800bf10
 800a028:	3ff00000 	.word	0x3ff00000
 800a02c:	40240000 	.word	0x40240000
 800a030:	401c0000 	.word	0x401c0000
 800a034:	40140000 	.word	0x40140000
 800a038:	3fe00000 	.word	0x3fe00000
 800a03c:	9d01      	ldr	r5, [sp, #4]
 800a03e:	4656      	mov	r6, sl
 800a040:	465f      	mov	r7, fp
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 fc17 	bl	800087c <__aeabi_ddiv>
 800a04e:	f7f6 fd9b 	bl	8000b88 <__aeabi_d2iz>
 800a052:	4682      	mov	sl, r0
 800a054:	f7f6 fa7e 	bl	8000554 <__aeabi_i2d>
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	f7f6 fae4 	bl	8000628 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a06c:	f7f6 f924 	bl	80002b8 <__aeabi_dsub>
 800a070:	f805 6b01 	strb.w	r6, [r5], #1
 800a074:	9e01      	ldr	r6, [sp, #4]
 800a076:	9f03      	ldr	r7, [sp, #12]
 800a078:	1bae      	subs	r6, r5, r6
 800a07a:	42b7      	cmp	r7, r6
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	d135      	bne.n	800a0ee <_dtoa_r+0x6e6>
 800a082:	f7f6 f91b 	bl	80002bc <__adddf3>
 800a086:	4642      	mov	r2, r8
 800a088:	464b      	mov	r3, r9
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	f7f6 fd5b 	bl	8000b48 <__aeabi_dcmpgt>
 800a092:	b9d0      	cbnz	r0, 800a0ca <_dtoa_r+0x6c2>
 800a094:	4642      	mov	r2, r8
 800a096:	464b      	mov	r3, r9
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7f6 fd2c 	bl	8000af8 <__aeabi_dcmpeq>
 800a0a0:	b110      	cbz	r0, 800a0a8 <_dtoa_r+0x6a0>
 800a0a2:	f01a 0f01 	tst.w	sl, #1
 800a0a6:	d110      	bne.n	800a0ca <_dtoa_r+0x6c2>
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	ee18 1a10 	vmov	r1, s16
 800a0ae:	f000 faf3 	bl	800a698 <_Bfree>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9800      	ldr	r0, [sp, #0]
 800a0b6:	702b      	strb	r3, [r5, #0]
 800a0b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	6018      	str	r0, [r3, #0]
 800a0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f43f acf1 	beq.w	8009aa8 <_dtoa_r+0xa0>
 800a0c6:	601d      	str	r5, [r3, #0]
 800a0c8:	e4ee      	b.n	8009aa8 <_dtoa_r+0xa0>
 800a0ca:	9f00      	ldr	r7, [sp, #0]
 800a0cc:	462b      	mov	r3, r5
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0d4:	2a39      	cmp	r2, #57	; 0x39
 800a0d6:	d106      	bne.n	800a0e6 <_dtoa_r+0x6de>
 800a0d8:	9a01      	ldr	r2, [sp, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d1f7      	bne.n	800a0ce <_dtoa_r+0x6c6>
 800a0de:	9901      	ldr	r1, [sp, #4]
 800a0e0:	2230      	movs	r2, #48	; 0x30
 800a0e2:	3701      	adds	r7, #1
 800a0e4:	700a      	strb	r2, [r1, #0]
 800a0e6:	781a      	ldrb	r2, [r3, #0]
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	701a      	strb	r2, [r3, #0]
 800a0ec:	e790      	b.n	800a010 <_dtoa_r+0x608>
 800a0ee:	4ba6      	ldr	r3, [pc, #664]	; (800a388 <_dtoa_r+0x980>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f7f6 fa99 	bl	8000628 <__aeabi_dmul>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	f7f6 fcfb 	bl	8000af8 <__aeabi_dcmpeq>
 800a102:	2800      	cmp	r0, #0
 800a104:	d09d      	beq.n	800a042 <_dtoa_r+0x63a>
 800a106:	e7cf      	b.n	800a0a8 <_dtoa_r+0x6a0>
 800a108:	9a08      	ldr	r2, [sp, #32]
 800a10a:	2a00      	cmp	r2, #0
 800a10c:	f000 80d7 	beq.w	800a2be <_dtoa_r+0x8b6>
 800a110:	9a06      	ldr	r2, [sp, #24]
 800a112:	2a01      	cmp	r2, #1
 800a114:	f300 80ba 	bgt.w	800a28c <_dtoa_r+0x884>
 800a118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	f000 80b2 	beq.w	800a284 <_dtoa_r+0x87c>
 800a120:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a124:	9e07      	ldr	r6, [sp, #28]
 800a126:	9d04      	ldr	r5, [sp, #16]
 800a128:	9a04      	ldr	r2, [sp, #16]
 800a12a:	441a      	add	r2, r3
 800a12c:	9204      	str	r2, [sp, #16]
 800a12e:	9a05      	ldr	r2, [sp, #20]
 800a130:	2101      	movs	r1, #1
 800a132:	441a      	add	r2, r3
 800a134:	4620      	mov	r0, r4
 800a136:	9205      	str	r2, [sp, #20]
 800a138:	f000 fb66 	bl	800a808 <__i2b>
 800a13c:	4607      	mov	r7, r0
 800a13e:	2d00      	cmp	r5, #0
 800a140:	dd0c      	ble.n	800a15c <_dtoa_r+0x754>
 800a142:	9b05      	ldr	r3, [sp, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd09      	ble.n	800a15c <_dtoa_r+0x754>
 800a148:	42ab      	cmp	r3, r5
 800a14a:	9a04      	ldr	r2, [sp, #16]
 800a14c:	bfa8      	it	ge
 800a14e:	462b      	movge	r3, r5
 800a150:	1ad2      	subs	r2, r2, r3
 800a152:	9204      	str	r2, [sp, #16]
 800a154:	9a05      	ldr	r2, [sp, #20]
 800a156:	1aed      	subs	r5, r5, r3
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	9b07      	ldr	r3, [sp, #28]
 800a15e:	b31b      	cbz	r3, 800a1a8 <_dtoa_r+0x7a0>
 800a160:	9b08      	ldr	r3, [sp, #32]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 80af 	beq.w	800a2c6 <_dtoa_r+0x8be>
 800a168:	2e00      	cmp	r6, #0
 800a16a:	dd13      	ble.n	800a194 <_dtoa_r+0x78c>
 800a16c:	4639      	mov	r1, r7
 800a16e:	4632      	mov	r2, r6
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fc09 	bl	800a988 <__pow5mult>
 800a176:	ee18 2a10 	vmov	r2, s16
 800a17a:	4601      	mov	r1, r0
 800a17c:	4607      	mov	r7, r0
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fb58 	bl	800a834 <__multiply>
 800a184:	ee18 1a10 	vmov	r1, s16
 800a188:	4680      	mov	r8, r0
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fa84 	bl	800a698 <_Bfree>
 800a190:	ee08 8a10 	vmov	s16, r8
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	1b9a      	subs	r2, r3, r6
 800a198:	d006      	beq.n	800a1a8 <_dtoa_r+0x7a0>
 800a19a:	ee18 1a10 	vmov	r1, s16
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fbf2 	bl	800a988 <__pow5mult>
 800a1a4:	ee08 0a10 	vmov	s16, r0
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fb2c 	bl	800a808 <__i2b>
 800a1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	f340 8088 	ble.w	800a2ca <_dtoa_r+0x8c2>
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	4601      	mov	r1, r0
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 fbe2 	bl	800a988 <__pow5mult>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	f340 8081 	ble.w	800a2d0 <_dtoa_r+0x8c8>
 800a1ce:	f04f 0800 	mov.w	r8, #0
 800a1d2:	6933      	ldr	r3, [r6, #16]
 800a1d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1d8:	6918      	ldr	r0, [r3, #16]
 800a1da:	f000 fac5 	bl	800a768 <__hi0bits>
 800a1de:	f1c0 0020 	rsb	r0, r0, #32
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	4418      	add	r0, r3
 800a1e6:	f010 001f 	ands.w	r0, r0, #31
 800a1ea:	f000 8092 	beq.w	800a312 <_dtoa_r+0x90a>
 800a1ee:	f1c0 0320 	rsb	r3, r0, #32
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	f340 808a 	ble.w	800a30c <_dtoa_r+0x904>
 800a1f8:	f1c0 001c 	rsb	r0, r0, #28
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	4403      	add	r3, r0
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	9b05      	ldr	r3, [sp, #20]
 800a204:	4403      	add	r3, r0
 800a206:	4405      	add	r5, r0
 800a208:	9305      	str	r3, [sp, #20]
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd07      	ble.n	800a220 <_dtoa_r+0x818>
 800a210:	ee18 1a10 	vmov	r1, s16
 800a214:	461a      	mov	r2, r3
 800a216:	4620      	mov	r0, r4
 800a218:	f000 fc10 	bl	800aa3c <__lshift>
 800a21c:	ee08 0a10 	vmov	s16, r0
 800a220:	9b05      	ldr	r3, [sp, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dd05      	ble.n	800a232 <_dtoa_r+0x82a>
 800a226:	4631      	mov	r1, r6
 800a228:	461a      	mov	r2, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fc06 	bl	800aa3c <__lshift>
 800a230:	4606      	mov	r6, r0
 800a232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d06e      	beq.n	800a316 <_dtoa_r+0x90e>
 800a238:	ee18 0a10 	vmov	r0, s16
 800a23c:	4631      	mov	r1, r6
 800a23e:	f000 fc6d 	bl	800ab1c <__mcmp>
 800a242:	2800      	cmp	r0, #0
 800a244:	da67      	bge.n	800a316 <_dtoa_r+0x90e>
 800a246:	9b00      	ldr	r3, [sp, #0]
 800a248:	3b01      	subs	r3, #1
 800a24a:	ee18 1a10 	vmov	r1, s16
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	220a      	movs	r2, #10
 800a252:	2300      	movs	r3, #0
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fa41 	bl	800a6dc <__multadd>
 800a25a:	9b08      	ldr	r3, [sp, #32]
 800a25c:	ee08 0a10 	vmov	s16, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 81b1 	beq.w	800a5c8 <_dtoa_r+0xbc0>
 800a266:	2300      	movs	r3, #0
 800a268:	4639      	mov	r1, r7
 800a26a:	220a      	movs	r2, #10
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fa35 	bl	800a6dc <__multadd>
 800a272:	9b02      	ldr	r3, [sp, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	4607      	mov	r7, r0
 800a278:	f300 808e 	bgt.w	800a398 <_dtoa_r+0x990>
 800a27c:	9b06      	ldr	r3, [sp, #24]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	dc51      	bgt.n	800a326 <_dtoa_r+0x91e>
 800a282:	e089      	b.n	800a398 <_dtoa_r+0x990>
 800a284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a28a:	e74b      	b.n	800a124 <_dtoa_r+0x71c>
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	1e5e      	subs	r6, r3, #1
 800a290:	9b07      	ldr	r3, [sp, #28]
 800a292:	42b3      	cmp	r3, r6
 800a294:	bfbf      	itttt	lt
 800a296:	9b07      	ldrlt	r3, [sp, #28]
 800a298:	9607      	strlt	r6, [sp, #28]
 800a29a:	1af2      	sublt	r2, r6, r3
 800a29c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a29e:	bfb6      	itet	lt
 800a2a0:	189b      	addlt	r3, r3, r2
 800a2a2:	1b9e      	subge	r6, r3, r6
 800a2a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	bfb8      	it	lt
 800a2aa:	2600      	movlt	r6, #0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bfb7      	itett	lt
 800a2b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2b8:	1a9d      	sublt	r5, r3, r2
 800a2ba:	2300      	movlt	r3, #0
 800a2bc:	e734      	b.n	800a128 <_dtoa_r+0x720>
 800a2be:	9e07      	ldr	r6, [sp, #28]
 800a2c0:	9d04      	ldr	r5, [sp, #16]
 800a2c2:	9f08      	ldr	r7, [sp, #32]
 800a2c4:	e73b      	b.n	800a13e <_dtoa_r+0x736>
 800a2c6:	9a07      	ldr	r2, [sp, #28]
 800a2c8:	e767      	b.n	800a19a <_dtoa_r+0x792>
 800a2ca:	9b06      	ldr	r3, [sp, #24]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	dc18      	bgt.n	800a302 <_dtoa_r+0x8fa>
 800a2d0:	f1ba 0f00 	cmp.w	sl, #0
 800a2d4:	d115      	bne.n	800a302 <_dtoa_r+0x8fa>
 800a2d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2da:	b993      	cbnz	r3, 800a302 <_dtoa_r+0x8fa>
 800a2dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2e0:	0d1b      	lsrs	r3, r3, #20
 800a2e2:	051b      	lsls	r3, r3, #20
 800a2e4:	b183      	cbz	r3, 800a308 <_dtoa_r+0x900>
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	9b05      	ldr	r3, [sp, #20]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	9305      	str	r3, [sp, #20]
 800a2f2:	f04f 0801 	mov.w	r8, #1
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f47f af6a 	bne.w	800a1d2 <_dtoa_r+0x7ca>
 800a2fe:	2001      	movs	r0, #1
 800a300:	e76f      	b.n	800a1e2 <_dtoa_r+0x7da>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	e7f6      	b.n	800a2f6 <_dtoa_r+0x8ee>
 800a308:	4698      	mov	r8, r3
 800a30a:	e7f4      	b.n	800a2f6 <_dtoa_r+0x8ee>
 800a30c:	f43f af7d 	beq.w	800a20a <_dtoa_r+0x802>
 800a310:	4618      	mov	r0, r3
 800a312:	301c      	adds	r0, #28
 800a314:	e772      	b.n	800a1fc <_dtoa_r+0x7f4>
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dc37      	bgt.n	800a38c <_dtoa_r+0x984>
 800a31c:	9b06      	ldr	r3, [sp, #24]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	dd34      	ble.n	800a38c <_dtoa_r+0x984>
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	9302      	str	r3, [sp, #8]
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	b96b      	cbnz	r3, 800a346 <_dtoa_r+0x93e>
 800a32a:	4631      	mov	r1, r6
 800a32c:	2205      	movs	r2, #5
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 f9d4 	bl	800a6dc <__multadd>
 800a334:	4601      	mov	r1, r0
 800a336:	4606      	mov	r6, r0
 800a338:	ee18 0a10 	vmov	r0, s16
 800a33c:	f000 fbee 	bl	800ab1c <__mcmp>
 800a340:	2800      	cmp	r0, #0
 800a342:	f73f adbb 	bgt.w	8009ebc <_dtoa_r+0x4b4>
 800a346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a348:	9d01      	ldr	r5, [sp, #4]
 800a34a:	43db      	mvns	r3, r3
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	f04f 0800 	mov.w	r8, #0
 800a352:	4631      	mov	r1, r6
 800a354:	4620      	mov	r0, r4
 800a356:	f000 f99f 	bl	800a698 <_Bfree>
 800a35a:	2f00      	cmp	r7, #0
 800a35c:	f43f aea4 	beq.w	800a0a8 <_dtoa_r+0x6a0>
 800a360:	f1b8 0f00 	cmp.w	r8, #0
 800a364:	d005      	beq.n	800a372 <_dtoa_r+0x96a>
 800a366:	45b8      	cmp	r8, r7
 800a368:	d003      	beq.n	800a372 <_dtoa_r+0x96a>
 800a36a:	4641      	mov	r1, r8
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f993 	bl	800a698 <_Bfree>
 800a372:	4639      	mov	r1, r7
 800a374:	4620      	mov	r0, r4
 800a376:	f000 f98f 	bl	800a698 <_Bfree>
 800a37a:	e695      	b.n	800a0a8 <_dtoa_r+0x6a0>
 800a37c:	2600      	movs	r6, #0
 800a37e:	4637      	mov	r7, r6
 800a380:	e7e1      	b.n	800a346 <_dtoa_r+0x93e>
 800a382:	9700      	str	r7, [sp, #0]
 800a384:	4637      	mov	r7, r6
 800a386:	e599      	b.n	8009ebc <_dtoa_r+0x4b4>
 800a388:	40240000 	.word	0x40240000
 800a38c:	9b08      	ldr	r3, [sp, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80ca 	beq.w	800a528 <_dtoa_r+0xb20>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	2d00      	cmp	r5, #0
 800a39a:	dd05      	ble.n	800a3a8 <_dtoa_r+0x9a0>
 800a39c:	4639      	mov	r1, r7
 800a39e:	462a      	mov	r2, r5
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fb4b 	bl	800aa3c <__lshift>
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	f1b8 0f00 	cmp.w	r8, #0
 800a3ac:	d05b      	beq.n	800a466 <_dtoa_r+0xa5e>
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 f931 	bl	800a618 <_Balloc>
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b928      	cbnz	r0, 800a3c6 <_dtoa_r+0x9be>
 800a3ba:	4b87      	ldr	r3, [pc, #540]	; (800a5d8 <_dtoa_r+0xbd0>)
 800a3bc:	4602      	mov	r2, r0
 800a3be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3c2:	f7ff bb3b 	b.w	8009a3c <_dtoa_r+0x34>
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	3202      	adds	r2, #2
 800a3ca:	0092      	lsls	r2, r2, #2
 800a3cc:	f107 010c 	add.w	r1, r7, #12
 800a3d0:	300c      	adds	r0, #12
 800a3d2:	f000 f913 	bl	800a5fc <memcpy>
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fb2e 	bl	800aa3c <__lshift>
 800a3e0:	9b01      	ldr	r3, [sp, #4]
 800a3e2:	f103 0901 	add.w	r9, r3, #1
 800a3e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	f00a 0301 	and.w	r3, sl, #1
 800a3f2:	46b8      	mov	r8, r7
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	ee18 0a10 	vmov	r0, s16
 800a3fe:	f7ff fa75 	bl	80098ec <quorem>
 800a402:	4641      	mov	r1, r8
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a40a:	ee18 0a10 	vmov	r0, s16
 800a40e:	f000 fb85 	bl	800ab1c <__mcmp>
 800a412:	463a      	mov	r2, r7
 800a414:	9003      	str	r0, [sp, #12]
 800a416:	4631      	mov	r1, r6
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 fb9b 	bl	800ab54 <__mdiff>
 800a41e:	68c2      	ldr	r2, [r0, #12]
 800a420:	f109 3bff 	add.w	fp, r9, #4294967295
 800a424:	4605      	mov	r5, r0
 800a426:	bb02      	cbnz	r2, 800a46a <_dtoa_r+0xa62>
 800a428:	4601      	mov	r1, r0
 800a42a:	ee18 0a10 	vmov	r0, s16
 800a42e:	f000 fb75 	bl	800ab1c <__mcmp>
 800a432:	4602      	mov	r2, r0
 800a434:	4629      	mov	r1, r5
 800a436:	4620      	mov	r0, r4
 800a438:	9207      	str	r2, [sp, #28]
 800a43a:	f000 f92d 	bl	800a698 <_Bfree>
 800a43e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a442:	ea43 0102 	orr.w	r1, r3, r2
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	430b      	orrs	r3, r1
 800a44a:	464d      	mov	r5, r9
 800a44c:	d10f      	bne.n	800a46e <_dtoa_r+0xa66>
 800a44e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a452:	d02a      	beq.n	800a4aa <_dtoa_r+0xaa2>
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	dd02      	ble.n	800a460 <_dtoa_r+0xa58>
 800a45a:	9b02      	ldr	r3, [sp, #8]
 800a45c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a460:	f88b a000 	strb.w	sl, [fp]
 800a464:	e775      	b.n	800a352 <_dtoa_r+0x94a>
 800a466:	4638      	mov	r0, r7
 800a468:	e7ba      	b.n	800a3e0 <_dtoa_r+0x9d8>
 800a46a:	2201      	movs	r2, #1
 800a46c:	e7e2      	b.n	800a434 <_dtoa_r+0xa2c>
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	db04      	blt.n	800a47e <_dtoa_r+0xa76>
 800a474:	9906      	ldr	r1, [sp, #24]
 800a476:	430b      	orrs	r3, r1
 800a478:	9904      	ldr	r1, [sp, #16]
 800a47a:	430b      	orrs	r3, r1
 800a47c:	d122      	bne.n	800a4c4 <_dtoa_r+0xabc>
 800a47e:	2a00      	cmp	r2, #0
 800a480:	ddee      	ble.n	800a460 <_dtoa_r+0xa58>
 800a482:	ee18 1a10 	vmov	r1, s16
 800a486:	2201      	movs	r2, #1
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fad7 	bl	800aa3c <__lshift>
 800a48e:	4631      	mov	r1, r6
 800a490:	ee08 0a10 	vmov	s16, r0
 800a494:	f000 fb42 	bl	800ab1c <__mcmp>
 800a498:	2800      	cmp	r0, #0
 800a49a:	dc03      	bgt.n	800a4a4 <_dtoa_r+0xa9c>
 800a49c:	d1e0      	bne.n	800a460 <_dtoa_r+0xa58>
 800a49e:	f01a 0f01 	tst.w	sl, #1
 800a4a2:	d0dd      	beq.n	800a460 <_dtoa_r+0xa58>
 800a4a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4a8:	d1d7      	bne.n	800a45a <_dtoa_r+0xa52>
 800a4aa:	2339      	movs	r3, #57	; 0x39
 800a4ac:	f88b 3000 	strb.w	r3, [fp]
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	461d      	mov	r5, r3
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ba:	2a39      	cmp	r2, #57	; 0x39
 800a4bc:	d071      	beq.n	800a5a2 <_dtoa_r+0xb9a>
 800a4be:	3201      	adds	r2, #1
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	e746      	b.n	800a352 <_dtoa_r+0x94a>
 800a4c4:	2a00      	cmp	r2, #0
 800a4c6:	dd07      	ble.n	800a4d8 <_dtoa_r+0xad0>
 800a4c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4cc:	d0ed      	beq.n	800a4aa <_dtoa_r+0xaa2>
 800a4ce:	f10a 0301 	add.w	r3, sl, #1
 800a4d2:	f88b 3000 	strb.w	r3, [fp]
 800a4d6:	e73c      	b.n	800a352 <_dtoa_r+0x94a>
 800a4d8:	9b05      	ldr	r3, [sp, #20]
 800a4da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4de:	4599      	cmp	r9, r3
 800a4e0:	d047      	beq.n	800a572 <_dtoa_r+0xb6a>
 800a4e2:	ee18 1a10 	vmov	r1, s16
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 f8f6 	bl	800a6dc <__multadd>
 800a4f0:	45b8      	cmp	r8, r7
 800a4f2:	ee08 0a10 	vmov	s16, r0
 800a4f6:	f04f 0300 	mov.w	r3, #0
 800a4fa:	f04f 020a 	mov.w	r2, #10
 800a4fe:	4641      	mov	r1, r8
 800a500:	4620      	mov	r0, r4
 800a502:	d106      	bne.n	800a512 <_dtoa_r+0xb0a>
 800a504:	f000 f8ea 	bl	800a6dc <__multadd>
 800a508:	4680      	mov	r8, r0
 800a50a:	4607      	mov	r7, r0
 800a50c:	f109 0901 	add.w	r9, r9, #1
 800a510:	e772      	b.n	800a3f8 <_dtoa_r+0x9f0>
 800a512:	f000 f8e3 	bl	800a6dc <__multadd>
 800a516:	4639      	mov	r1, r7
 800a518:	4680      	mov	r8, r0
 800a51a:	2300      	movs	r3, #0
 800a51c:	220a      	movs	r2, #10
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 f8dc 	bl	800a6dc <__multadd>
 800a524:	4607      	mov	r7, r0
 800a526:	e7f1      	b.n	800a50c <_dtoa_r+0xb04>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	9302      	str	r3, [sp, #8]
 800a52c:	9d01      	ldr	r5, [sp, #4]
 800a52e:	ee18 0a10 	vmov	r0, s16
 800a532:	4631      	mov	r1, r6
 800a534:	f7ff f9da 	bl	80098ec <quorem>
 800a538:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a53c:	9b01      	ldr	r3, [sp, #4]
 800a53e:	f805 ab01 	strb.w	sl, [r5], #1
 800a542:	1aea      	subs	r2, r5, r3
 800a544:	9b02      	ldr	r3, [sp, #8]
 800a546:	4293      	cmp	r3, r2
 800a548:	dd09      	ble.n	800a55e <_dtoa_r+0xb56>
 800a54a:	ee18 1a10 	vmov	r1, s16
 800a54e:	2300      	movs	r3, #0
 800a550:	220a      	movs	r2, #10
 800a552:	4620      	mov	r0, r4
 800a554:	f000 f8c2 	bl	800a6dc <__multadd>
 800a558:	ee08 0a10 	vmov	s16, r0
 800a55c:	e7e7      	b.n	800a52e <_dtoa_r+0xb26>
 800a55e:	9b02      	ldr	r3, [sp, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	bfc8      	it	gt
 800a564:	461d      	movgt	r5, r3
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	bfd8      	it	le
 800a56a:	2501      	movle	r5, #1
 800a56c:	441d      	add	r5, r3
 800a56e:	f04f 0800 	mov.w	r8, #0
 800a572:	ee18 1a10 	vmov	r1, s16
 800a576:	2201      	movs	r2, #1
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fa5f 	bl	800aa3c <__lshift>
 800a57e:	4631      	mov	r1, r6
 800a580:	ee08 0a10 	vmov	s16, r0
 800a584:	f000 faca 	bl	800ab1c <__mcmp>
 800a588:	2800      	cmp	r0, #0
 800a58a:	dc91      	bgt.n	800a4b0 <_dtoa_r+0xaa8>
 800a58c:	d102      	bne.n	800a594 <_dtoa_r+0xb8c>
 800a58e:	f01a 0f01 	tst.w	sl, #1
 800a592:	d18d      	bne.n	800a4b0 <_dtoa_r+0xaa8>
 800a594:	462b      	mov	r3, r5
 800a596:	461d      	mov	r5, r3
 800a598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a59c:	2a30      	cmp	r2, #48	; 0x30
 800a59e:	d0fa      	beq.n	800a596 <_dtoa_r+0xb8e>
 800a5a0:	e6d7      	b.n	800a352 <_dtoa_r+0x94a>
 800a5a2:	9a01      	ldr	r2, [sp, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d184      	bne.n	800a4b2 <_dtoa_r+0xaaa>
 800a5a8:	9b00      	ldr	r3, [sp, #0]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	2331      	movs	r3, #49	; 0x31
 800a5b0:	7013      	strb	r3, [r2, #0]
 800a5b2:	e6ce      	b.n	800a352 <_dtoa_r+0x94a>
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <_dtoa_r+0xbd4>)
 800a5b6:	f7ff ba95 	b.w	8009ae4 <_dtoa_r+0xdc>
 800a5ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f47f aa6e 	bne.w	8009a9e <_dtoa_r+0x96>
 800a5c2:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <_dtoa_r+0xbd8>)
 800a5c4:	f7ff ba8e 	b.w	8009ae4 <_dtoa_r+0xdc>
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dcae      	bgt.n	800a52c <_dtoa_r+0xb24>
 800a5ce:	9b06      	ldr	r3, [sp, #24]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	f73f aea8 	bgt.w	800a326 <_dtoa_r+0x91e>
 800a5d6:	e7a9      	b.n	800a52c <_dtoa_r+0xb24>
 800a5d8:	0800be9f 	.word	0x0800be9f
 800a5dc:	0800bdfc 	.word	0x0800bdfc
 800a5e0:	0800be20 	.word	0x0800be20

0800a5e4 <_localeconv_r>:
 800a5e4:	4800      	ldr	r0, [pc, #0]	; (800a5e8 <_localeconv_r+0x4>)
 800a5e6:	4770      	bx	lr
 800a5e8:	20000164 	.word	0x20000164

0800a5ec <malloc>:
 800a5ec:	4b02      	ldr	r3, [pc, #8]	; (800a5f8 <malloc+0xc>)
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	f000 bc17 	b.w	800ae24 <_malloc_r>
 800a5f6:	bf00      	nop
 800a5f8:	20000010 	.word	0x20000010

0800a5fc <memcpy>:
 800a5fc:	440a      	add	r2, r1
 800a5fe:	4291      	cmp	r1, r2
 800a600:	f100 33ff 	add.w	r3, r0, #4294967295
 800a604:	d100      	bne.n	800a608 <memcpy+0xc>
 800a606:	4770      	bx	lr
 800a608:	b510      	push	{r4, lr}
 800a60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a612:	4291      	cmp	r1, r2
 800a614:	d1f9      	bne.n	800a60a <memcpy+0xe>
 800a616:	bd10      	pop	{r4, pc}

0800a618 <_Balloc>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	b976      	cbnz	r6, 800a640 <_Balloc+0x28>
 800a622:	2010      	movs	r0, #16
 800a624:	f7ff ffe2 	bl	800a5ec <malloc>
 800a628:	4602      	mov	r2, r0
 800a62a:	6260      	str	r0, [r4, #36]	; 0x24
 800a62c:	b920      	cbnz	r0, 800a638 <_Balloc+0x20>
 800a62e:	4b18      	ldr	r3, [pc, #96]	; (800a690 <_Balloc+0x78>)
 800a630:	4818      	ldr	r0, [pc, #96]	; (800a694 <_Balloc+0x7c>)
 800a632:	2166      	movs	r1, #102	; 0x66
 800a634:	f000 fdd6 	bl	800b1e4 <__assert_func>
 800a638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a63c:	6006      	str	r6, [r0, #0]
 800a63e:	60c6      	str	r6, [r0, #12]
 800a640:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a642:	68f3      	ldr	r3, [r6, #12]
 800a644:	b183      	cbz	r3, 800a668 <_Balloc+0x50>
 800a646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a64e:	b9b8      	cbnz	r0, 800a680 <_Balloc+0x68>
 800a650:	2101      	movs	r1, #1
 800a652:	fa01 f605 	lsl.w	r6, r1, r5
 800a656:	1d72      	adds	r2, r6, #5
 800a658:	0092      	lsls	r2, r2, #2
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fb60 	bl	800ad20 <_calloc_r>
 800a660:	b160      	cbz	r0, 800a67c <_Balloc+0x64>
 800a662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a666:	e00e      	b.n	800a686 <_Balloc+0x6e>
 800a668:	2221      	movs	r2, #33	; 0x21
 800a66a:	2104      	movs	r1, #4
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fb57 	bl	800ad20 <_calloc_r>
 800a672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a674:	60f0      	str	r0, [r6, #12]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e4      	bne.n	800a646 <_Balloc+0x2e>
 800a67c:	2000      	movs	r0, #0
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	6802      	ldr	r2, [r0, #0]
 800a682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a686:	2300      	movs	r3, #0
 800a688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a68c:	e7f7      	b.n	800a67e <_Balloc+0x66>
 800a68e:	bf00      	nop
 800a690:	0800be2d 	.word	0x0800be2d
 800a694:	0800beb0 	.word	0x0800beb0

0800a698 <_Bfree>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a69c:	4605      	mov	r5, r0
 800a69e:	460c      	mov	r4, r1
 800a6a0:	b976      	cbnz	r6, 800a6c0 <_Bfree+0x28>
 800a6a2:	2010      	movs	r0, #16
 800a6a4:	f7ff ffa2 	bl	800a5ec <malloc>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6268      	str	r0, [r5, #36]	; 0x24
 800a6ac:	b920      	cbnz	r0, 800a6b8 <_Bfree+0x20>
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <_Bfree+0x3c>)
 800a6b0:	4809      	ldr	r0, [pc, #36]	; (800a6d8 <_Bfree+0x40>)
 800a6b2:	218a      	movs	r1, #138	; 0x8a
 800a6b4:	f000 fd96 	bl	800b1e4 <__assert_func>
 800a6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6bc:	6006      	str	r6, [r0, #0]
 800a6be:	60c6      	str	r6, [r0, #12]
 800a6c0:	b13c      	cbz	r4, 800a6d2 <_Bfree+0x3a>
 800a6c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6c4:	6862      	ldr	r2, [r4, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6cc:	6021      	str	r1, [r4, #0]
 800a6ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	0800be2d 	.word	0x0800be2d
 800a6d8:	0800beb0 	.word	0x0800beb0

0800a6dc <__multadd>:
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	690d      	ldr	r5, [r1, #16]
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	461e      	mov	r6, r3
 800a6e8:	f101 0c14 	add.w	ip, r1, #20
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a6f2:	b299      	uxth	r1, r3
 800a6f4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6f8:	0c1e      	lsrs	r6, r3, #16
 800a6fa:	0c0b      	lsrs	r3, r1, #16
 800a6fc:	fb02 3306 	mla	r3, r2, r6, r3
 800a700:	b289      	uxth	r1, r1
 800a702:	3001      	adds	r0, #1
 800a704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a708:	4285      	cmp	r5, r0
 800a70a:	f84c 1b04 	str.w	r1, [ip], #4
 800a70e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a712:	dcec      	bgt.n	800a6ee <__multadd+0x12>
 800a714:	b30e      	cbz	r6, 800a75a <__multadd+0x7e>
 800a716:	68a3      	ldr	r3, [r4, #8]
 800a718:	42ab      	cmp	r3, r5
 800a71a:	dc19      	bgt.n	800a750 <__multadd+0x74>
 800a71c:	6861      	ldr	r1, [r4, #4]
 800a71e:	4638      	mov	r0, r7
 800a720:	3101      	adds	r1, #1
 800a722:	f7ff ff79 	bl	800a618 <_Balloc>
 800a726:	4680      	mov	r8, r0
 800a728:	b928      	cbnz	r0, 800a736 <__multadd+0x5a>
 800a72a:	4602      	mov	r2, r0
 800a72c:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <__multadd+0x84>)
 800a72e:	480d      	ldr	r0, [pc, #52]	; (800a764 <__multadd+0x88>)
 800a730:	21b5      	movs	r1, #181	; 0xb5
 800a732:	f000 fd57 	bl	800b1e4 <__assert_func>
 800a736:	6922      	ldr	r2, [r4, #16]
 800a738:	3202      	adds	r2, #2
 800a73a:	f104 010c 	add.w	r1, r4, #12
 800a73e:	0092      	lsls	r2, r2, #2
 800a740:	300c      	adds	r0, #12
 800a742:	f7ff ff5b 	bl	800a5fc <memcpy>
 800a746:	4621      	mov	r1, r4
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff ffa5 	bl	800a698 <_Bfree>
 800a74e:	4644      	mov	r4, r8
 800a750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a754:	3501      	adds	r5, #1
 800a756:	615e      	str	r6, [r3, #20]
 800a758:	6125      	str	r5, [r4, #16]
 800a75a:	4620      	mov	r0, r4
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	0800be9f 	.word	0x0800be9f
 800a764:	0800beb0 	.word	0x0800beb0

0800a768 <__hi0bits>:
 800a768:	0c03      	lsrs	r3, r0, #16
 800a76a:	041b      	lsls	r3, r3, #16
 800a76c:	b9d3      	cbnz	r3, 800a7a4 <__hi0bits+0x3c>
 800a76e:	0400      	lsls	r0, r0, #16
 800a770:	2310      	movs	r3, #16
 800a772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a776:	bf04      	itt	eq
 800a778:	0200      	lsleq	r0, r0, #8
 800a77a:	3308      	addeq	r3, #8
 800a77c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a780:	bf04      	itt	eq
 800a782:	0100      	lsleq	r0, r0, #4
 800a784:	3304      	addeq	r3, #4
 800a786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a78a:	bf04      	itt	eq
 800a78c:	0080      	lsleq	r0, r0, #2
 800a78e:	3302      	addeq	r3, #2
 800a790:	2800      	cmp	r0, #0
 800a792:	db05      	blt.n	800a7a0 <__hi0bits+0x38>
 800a794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a798:	f103 0301 	add.w	r3, r3, #1
 800a79c:	bf08      	it	eq
 800a79e:	2320      	moveq	r3, #32
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	4770      	bx	lr
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	e7e4      	b.n	800a772 <__hi0bits+0xa>

0800a7a8 <__lo0bits>:
 800a7a8:	6803      	ldr	r3, [r0, #0]
 800a7aa:	f013 0207 	ands.w	r2, r3, #7
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	d00b      	beq.n	800a7ca <__lo0bits+0x22>
 800a7b2:	07da      	lsls	r2, r3, #31
 800a7b4:	d423      	bmi.n	800a7fe <__lo0bits+0x56>
 800a7b6:	0798      	lsls	r0, r3, #30
 800a7b8:	bf49      	itett	mi
 800a7ba:	085b      	lsrmi	r3, r3, #1
 800a7bc:	089b      	lsrpl	r3, r3, #2
 800a7be:	2001      	movmi	r0, #1
 800a7c0:	600b      	strmi	r3, [r1, #0]
 800a7c2:	bf5c      	itt	pl
 800a7c4:	600b      	strpl	r3, [r1, #0]
 800a7c6:	2002      	movpl	r0, #2
 800a7c8:	4770      	bx	lr
 800a7ca:	b298      	uxth	r0, r3
 800a7cc:	b9a8      	cbnz	r0, 800a7fa <__lo0bits+0x52>
 800a7ce:	0c1b      	lsrs	r3, r3, #16
 800a7d0:	2010      	movs	r0, #16
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	b90a      	cbnz	r2, 800a7da <__lo0bits+0x32>
 800a7d6:	3008      	adds	r0, #8
 800a7d8:	0a1b      	lsrs	r3, r3, #8
 800a7da:	071a      	lsls	r2, r3, #28
 800a7dc:	bf04      	itt	eq
 800a7de:	091b      	lsreq	r3, r3, #4
 800a7e0:	3004      	addeq	r0, #4
 800a7e2:	079a      	lsls	r2, r3, #30
 800a7e4:	bf04      	itt	eq
 800a7e6:	089b      	lsreq	r3, r3, #2
 800a7e8:	3002      	addeq	r0, #2
 800a7ea:	07da      	lsls	r2, r3, #31
 800a7ec:	d403      	bmi.n	800a7f6 <__lo0bits+0x4e>
 800a7ee:	085b      	lsrs	r3, r3, #1
 800a7f0:	f100 0001 	add.w	r0, r0, #1
 800a7f4:	d005      	beq.n	800a802 <__lo0bits+0x5a>
 800a7f6:	600b      	str	r3, [r1, #0]
 800a7f8:	4770      	bx	lr
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	e7e9      	b.n	800a7d2 <__lo0bits+0x2a>
 800a7fe:	2000      	movs	r0, #0
 800a800:	4770      	bx	lr
 800a802:	2020      	movs	r0, #32
 800a804:	4770      	bx	lr
	...

0800a808 <__i2b>:
 800a808:	b510      	push	{r4, lr}
 800a80a:	460c      	mov	r4, r1
 800a80c:	2101      	movs	r1, #1
 800a80e:	f7ff ff03 	bl	800a618 <_Balloc>
 800a812:	4602      	mov	r2, r0
 800a814:	b928      	cbnz	r0, 800a822 <__i2b+0x1a>
 800a816:	4b05      	ldr	r3, [pc, #20]	; (800a82c <__i2b+0x24>)
 800a818:	4805      	ldr	r0, [pc, #20]	; (800a830 <__i2b+0x28>)
 800a81a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a81e:	f000 fce1 	bl	800b1e4 <__assert_func>
 800a822:	2301      	movs	r3, #1
 800a824:	6144      	str	r4, [r0, #20]
 800a826:	6103      	str	r3, [r0, #16]
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	bf00      	nop
 800a82c:	0800be9f 	.word	0x0800be9f
 800a830:	0800beb0 	.word	0x0800beb0

0800a834 <__multiply>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4691      	mov	r9, r2
 800a83a:	690a      	ldr	r2, [r1, #16]
 800a83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a840:	429a      	cmp	r2, r3
 800a842:	bfb8      	it	lt
 800a844:	460b      	movlt	r3, r1
 800a846:	460c      	mov	r4, r1
 800a848:	bfbc      	itt	lt
 800a84a:	464c      	movlt	r4, r9
 800a84c:	4699      	movlt	r9, r3
 800a84e:	6927      	ldr	r7, [r4, #16]
 800a850:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a854:	68a3      	ldr	r3, [r4, #8]
 800a856:	6861      	ldr	r1, [r4, #4]
 800a858:	eb07 060a 	add.w	r6, r7, sl
 800a85c:	42b3      	cmp	r3, r6
 800a85e:	b085      	sub	sp, #20
 800a860:	bfb8      	it	lt
 800a862:	3101      	addlt	r1, #1
 800a864:	f7ff fed8 	bl	800a618 <_Balloc>
 800a868:	b930      	cbnz	r0, 800a878 <__multiply+0x44>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b44      	ldr	r3, [pc, #272]	; (800a980 <__multiply+0x14c>)
 800a86e:	4845      	ldr	r0, [pc, #276]	; (800a984 <__multiply+0x150>)
 800a870:	f240 115d 	movw	r1, #349	; 0x15d
 800a874:	f000 fcb6 	bl	800b1e4 <__assert_func>
 800a878:	f100 0514 	add.w	r5, r0, #20
 800a87c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a880:	462b      	mov	r3, r5
 800a882:	2200      	movs	r2, #0
 800a884:	4543      	cmp	r3, r8
 800a886:	d321      	bcc.n	800a8cc <__multiply+0x98>
 800a888:	f104 0314 	add.w	r3, r4, #20
 800a88c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a890:	f109 0314 	add.w	r3, r9, #20
 800a894:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a898:	9202      	str	r2, [sp, #8]
 800a89a:	1b3a      	subs	r2, r7, r4
 800a89c:	3a15      	subs	r2, #21
 800a89e:	f022 0203 	bic.w	r2, r2, #3
 800a8a2:	3204      	adds	r2, #4
 800a8a4:	f104 0115 	add.w	r1, r4, #21
 800a8a8:	428f      	cmp	r7, r1
 800a8aa:	bf38      	it	cc
 800a8ac:	2204      	movcc	r2, #4
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	9a02      	ldr	r2, [sp, #8]
 800a8b2:	9303      	str	r3, [sp, #12]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d80c      	bhi.n	800a8d2 <__multiply+0x9e>
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	dd03      	ble.n	800a8c4 <__multiply+0x90>
 800a8bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05a      	beq.n	800a97a <__multiply+0x146>
 800a8c4:	6106      	str	r6, [r0, #16]
 800a8c6:	b005      	add	sp, #20
 800a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8cc:	f843 2b04 	str.w	r2, [r3], #4
 800a8d0:	e7d8      	b.n	800a884 <__multiply+0x50>
 800a8d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8d6:	f1ba 0f00 	cmp.w	sl, #0
 800a8da:	d024      	beq.n	800a926 <__multiply+0xf2>
 800a8dc:	f104 0e14 	add.w	lr, r4, #20
 800a8e0:	46a9      	mov	r9, r5
 800a8e2:	f04f 0c00 	mov.w	ip, #0
 800a8e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8ea:	f8d9 1000 	ldr.w	r1, [r9]
 800a8ee:	fa1f fb82 	uxth.w	fp, r2
 800a8f2:	b289      	uxth	r1, r1
 800a8f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a900:	4461      	add	r1, ip
 800a902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a906:	fb0a c20b 	mla	r2, sl, fp, ip
 800a90a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a90e:	b289      	uxth	r1, r1
 800a910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a914:	4577      	cmp	r7, lr
 800a916:	f849 1b04 	str.w	r1, [r9], #4
 800a91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a91e:	d8e2      	bhi.n	800a8e6 <__multiply+0xb2>
 800a920:	9a01      	ldr	r2, [sp, #4]
 800a922:	f845 c002 	str.w	ip, [r5, r2]
 800a926:	9a03      	ldr	r2, [sp, #12]
 800a928:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a92c:	3304      	adds	r3, #4
 800a92e:	f1b9 0f00 	cmp.w	r9, #0
 800a932:	d020      	beq.n	800a976 <__multiply+0x142>
 800a934:	6829      	ldr	r1, [r5, #0]
 800a936:	f104 0c14 	add.w	ip, r4, #20
 800a93a:	46ae      	mov	lr, r5
 800a93c:	f04f 0a00 	mov.w	sl, #0
 800a940:	f8bc b000 	ldrh.w	fp, [ip]
 800a944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a948:	fb09 220b 	mla	r2, r9, fp, r2
 800a94c:	4492      	add	sl, r2
 800a94e:	b289      	uxth	r1, r1
 800a950:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a954:	f84e 1b04 	str.w	r1, [lr], #4
 800a958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a95c:	f8be 1000 	ldrh.w	r1, [lr]
 800a960:	0c12      	lsrs	r2, r2, #16
 800a962:	fb09 1102 	mla	r1, r9, r2, r1
 800a966:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a96a:	4567      	cmp	r7, ip
 800a96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a970:	d8e6      	bhi.n	800a940 <__multiply+0x10c>
 800a972:	9a01      	ldr	r2, [sp, #4]
 800a974:	50a9      	str	r1, [r5, r2]
 800a976:	3504      	adds	r5, #4
 800a978:	e79a      	b.n	800a8b0 <__multiply+0x7c>
 800a97a:	3e01      	subs	r6, #1
 800a97c:	e79c      	b.n	800a8b8 <__multiply+0x84>
 800a97e:	bf00      	nop
 800a980:	0800be9f 	.word	0x0800be9f
 800a984:	0800beb0 	.word	0x0800beb0

0800a988 <__pow5mult>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	4615      	mov	r5, r2
 800a98e:	f012 0203 	ands.w	r2, r2, #3
 800a992:	4606      	mov	r6, r0
 800a994:	460f      	mov	r7, r1
 800a996:	d007      	beq.n	800a9a8 <__pow5mult+0x20>
 800a998:	4c25      	ldr	r4, [pc, #148]	; (800aa30 <__pow5mult+0xa8>)
 800a99a:	3a01      	subs	r2, #1
 800a99c:	2300      	movs	r3, #0
 800a99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9a2:	f7ff fe9b 	bl	800a6dc <__multadd>
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	10ad      	asrs	r5, r5, #2
 800a9aa:	d03d      	beq.n	800aa28 <__pow5mult+0xa0>
 800a9ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9ae:	b97c      	cbnz	r4, 800a9d0 <__pow5mult+0x48>
 800a9b0:	2010      	movs	r0, #16
 800a9b2:	f7ff fe1b 	bl	800a5ec <malloc>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6270      	str	r0, [r6, #36]	; 0x24
 800a9ba:	b928      	cbnz	r0, 800a9c8 <__pow5mult+0x40>
 800a9bc:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <__pow5mult+0xac>)
 800a9be:	481e      	ldr	r0, [pc, #120]	; (800aa38 <__pow5mult+0xb0>)
 800a9c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9c4:	f000 fc0e 	bl	800b1e4 <__assert_func>
 800a9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9cc:	6004      	str	r4, [r0, #0]
 800a9ce:	60c4      	str	r4, [r0, #12]
 800a9d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9d8:	b94c      	cbnz	r4, 800a9ee <__pow5mult+0x66>
 800a9da:	f240 2171 	movw	r1, #625	; 0x271
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7ff ff12 	bl	800a808 <__i2b>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	6003      	str	r3, [r0, #0]
 800a9ee:	f04f 0900 	mov.w	r9, #0
 800a9f2:	07eb      	lsls	r3, r5, #31
 800a9f4:	d50a      	bpl.n	800aa0c <__pow5mult+0x84>
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f7ff ff1a 	bl	800a834 <__multiply>
 800aa00:	4639      	mov	r1, r7
 800aa02:	4680      	mov	r8, r0
 800aa04:	4630      	mov	r0, r6
 800aa06:	f7ff fe47 	bl	800a698 <_Bfree>
 800aa0a:	4647      	mov	r7, r8
 800aa0c:	106d      	asrs	r5, r5, #1
 800aa0e:	d00b      	beq.n	800aa28 <__pow5mult+0xa0>
 800aa10:	6820      	ldr	r0, [r4, #0]
 800aa12:	b938      	cbnz	r0, 800aa24 <__pow5mult+0x9c>
 800aa14:	4622      	mov	r2, r4
 800aa16:	4621      	mov	r1, r4
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff ff0b 	bl	800a834 <__multiply>
 800aa1e:	6020      	str	r0, [r4, #0]
 800aa20:	f8c0 9000 	str.w	r9, [r0]
 800aa24:	4604      	mov	r4, r0
 800aa26:	e7e4      	b.n	800a9f2 <__pow5mult+0x6a>
 800aa28:	4638      	mov	r0, r7
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	bf00      	nop
 800aa30:	0800c000 	.word	0x0800c000
 800aa34:	0800be2d 	.word	0x0800be2d
 800aa38:	0800beb0 	.word	0x0800beb0

0800aa3c <__lshift>:
 800aa3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa40:	460c      	mov	r4, r1
 800aa42:	6849      	ldr	r1, [r1, #4]
 800aa44:	6923      	ldr	r3, [r4, #16]
 800aa46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	4691      	mov	r9, r2
 800aa50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa54:	f108 0601 	add.w	r6, r8, #1
 800aa58:	42b3      	cmp	r3, r6
 800aa5a:	db0b      	blt.n	800aa74 <__lshift+0x38>
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f7ff fddb 	bl	800a618 <_Balloc>
 800aa62:	4605      	mov	r5, r0
 800aa64:	b948      	cbnz	r0, 800aa7a <__lshift+0x3e>
 800aa66:	4602      	mov	r2, r0
 800aa68:	4b2a      	ldr	r3, [pc, #168]	; (800ab14 <__lshift+0xd8>)
 800aa6a:	482b      	ldr	r0, [pc, #172]	; (800ab18 <__lshift+0xdc>)
 800aa6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa70:	f000 fbb8 	bl	800b1e4 <__assert_func>
 800aa74:	3101      	adds	r1, #1
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	e7ee      	b.n	800aa58 <__lshift+0x1c>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f100 0114 	add.w	r1, r0, #20
 800aa80:	f100 0210 	add.w	r2, r0, #16
 800aa84:	4618      	mov	r0, r3
 800aa86:	4553      	cmp	r3, sl
 800aa88:	db37      	blt.n	800aafa <__lshift+0xbe>
 800aa8a:	6920      	ldr	r0, [r4, #16]
 800aa8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa90:	f104 0314 	add.w	r3, r4, #20
 800aa94:	f019 091f 	ands.w	r9, r9, #31
 800aa98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aaa0:	d02f      	beq.n	800ab02 <__lshift+0xc6>
 800aaa2:	f1c9 0e20 	rsb	lr, r9, #32
 800aaa6:	468a      	mov	sl, r1
 800aaa8:	f04f 0c00 	mov.w	ip, #0
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	fa02 f209 	lsl.w	r2, r2, r9
 800aab2:	ea42 020c 	orr.w	r2, r2, ip
 800aab6:	f84a 2b04 	str.w	r2, [sl], #4
 800aaba:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabe:	4298      	cmp	r0, r3
 800aac0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aac4:	d8f2      	bhi.n	800aaac <__lshift+0x70>
 800aac6:	1b03      	subs	r3, r0, r4
 800aac8:	3b15      	subs	r3, #21
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	3304      	adds	r3, #4
 800aad0:	f104 0215 	add.w	r2, r4, #21
 800aad4:	4290      	cmp	r0, r2
 800aad6:	bf38      	it	cc
 800aad8:	2304      	movcc	r3, #4
 800aada:	f841 c003 	str.w	ip, [r1, r3]
 800aade:	f1bc 0f00 	cmp.w	ip, #0
 800aae2:	d001      	beq.n	800aae8 <__lshift+0xac>
 800aae4:	f108 0602 	add.w	r6, r8, #2
 800aae8:	3e01      	subs	r6, #1
 800aaea:	4638      	mov	r0, r7
 800aaec:	612e      	str	r6, [r5, #16]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7ff fdd2 	bl	800a698 <_Bfree>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aafe:	3301      	adds	r3, #1
 800ab00:	e7c1      	b.n	800aa86 <__lshift+0x4a>
 800ab02:	3904      	subs	r1, #4
 800ab04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab0c:	4298      	cmp	r0, r3
 800ab0e:	d8f9      	bhi.n	800ab04 <__lshift+0xc8>
 800ab10:	e7ea      	b.n	800aae8 <__lshift+0xac>
 800ab12:	bf00      	nop
 800ab14:	0800be9f 	.word	0x0800be9f
 800ab18:	0800beb0 	.word	0x0800beb0

0800ab1c <__mcmp>:
 800ab1c:	b530      	push	{r4, r5, lr}
 800ab1e:	6902      	ldr	r2, [r0, #16]
 800ab20:	690c      	ldr	r4, [r1, #16]
 800ab22:	1b12      	subs	r2, r2, r4
 800ab24:	d10e      	bne.n	800ab44 <__mcmp+0x28>
 800ab26:	f100 0314 	add.w	r3, r0, #20
 800ab2a:	3114      	adds	r1, #20
 800ab2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab3c:	42a5      	cmp	r5, r4
 800ab3e:	d003      	beq.n	800ab48 <__mcmp+0x2c>
 800ab40:	d305      	bcc.n	800ab4e <__mcmp+0x32>
 800ab42:	2201      	movs	r2, #1
 800ab44:	4610      	mov	r0, r2
 800ab46:	bd30      	pop	{r4, r5, pc}
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	d3f3      	bcc.n	800ab34 <__mcmp+0x18>
 800ab4c:	e7fa      	b.n	800ab44 <__mcmp+0x28>
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab52:	e7f7      	b.n	800ab44 <__mcmp+0x28>

0800ab54 <__mdiff>:
 800ab54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4690      	mov	r8, r2
 800ab62:	f7ff ffdb 	bl	800ab1c <__mcmp>
 800ab66:	1e05      	subs	r5, r0, #0
 800ab68:	d110      	bne.n	800ab8c <__mdiff+0x38>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fd53 	bl	800a618 <_Balloc>
 800ab72:	b930      	cbnz	r0, 800ab82 <__mdiff+0x2e>
 800ab74:	4b3a      	ldr	r3, [pc, #232]	; (800ac60 <__mdiff+0x10c>)
 800ab76:	4602      	mov	r2, r0
 800ab78:	f240 2132 	movw	r1, #562	; 0x232
 800ab7c:	4839      	ldr	r0, [pc, #228]	; (800ac64 <__mdiff+0x110>)
 800ab7e:	f000 fb31 	bl	800b1e4 <__assert_func>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	bfa4      	itt	ge
 800ab8e:	4643      	movge	r3, r8
 800ab90:	46a0      	movge	r8, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab98:	bfa6      	itte	ge
 800ab9a:	461c      	movge	r4, r3
 800ab9c:	2500      	movge	r5, #0
 800ab9e:	2501      	movlt	r5, #1
 800aba0:	f7ff fd3a 	bl	800a618 <_Balloc>
 800aba4:	b920      	cbnz	r0, 800abb0 <__mdiff+0x5c>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__mdiff+0x10c>)
 800aba8:	4602      	mov	r2, r0
 800abaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abae:	e7e5      	b.n	800ab7c <__mdiff+0x28>
 800abb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abb4:	6926      	ldr	r6, [r4, #16]
 800abb6:	60c5      	str	r5, [r0, #12]
 800abb8:	f104 0914 	add.w	r9, r4, #20
 800abbc:	f108 0514 	add.w	r5, r8, #20
 800abc0:	f100 0e14 	add.w	lr, r0, #20
 800abc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abcc:	f108 0210 	add.w	r2, r8, #16
 800abd0:	46f2      	mov	sl, lr
 800abd2:	2100      	movs	r1, #0
 800abd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abdc:	fa1f f883 	uxth.w	r8, r3
 800abe0:	fa11 f18b 	uxtah	r1, r1, fp
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	eba1 0808 	sub.w	r8, r1, r8
 800abea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abf2:	fa1f f888 	uxth.w	r8, r8
 800abf6:	1419      	asrs	r1, r3, #16
 800abf8:	454e      	cmp	r6, r9
 800abfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abfe:	f84a 3b04 	str.w	r3, [sl], #4
 800ac02:	d8e7      	bhi.n	800abd4 <__mdiff+0x80>
 800ac04:	1b33      	subs	r3, r6, r4
 800ac06:	3b15      	subs	r3, #21
 800ac08:	f023 0303 	bic.w	r3, r3, #3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	3415      	adds	r4, #21
 800ac10:	42a6      	cmp	r6, r4
 800ac12:	bf38      	it	cc
 800ac14:	2304      	movcc	r3, #4
 800ac16:	441d      	add	r5, r3
 800ac18:	4473      	add	r3, lr
 800ac1a:	469e      	mov	lr, r3
 800ac1c:	462e      	mov	r6, r5
 800ac1e:	4566      	cmp	r6, ip
 800ac20:	d30e      	bcc.n	800ac40 <__mdiff+0xec>
 800ac22:	f10c 0203 	add.w	r2, ip, #3
 800ac26:	1b52      	subs	r2, r2, r5
 800ac28:	f022 0203 	bic.w	r2, r2, #3
 800ac2c:	3d03      	subs	r5, #3
 800ac2e:	45ac      	cmp	ip, r5
 800ac30:	bf38      	it	cc
 800ac32:	2200      	movcc	r2, #0
 800ac34:	441a      	add	r2, r3
 800ac36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac3a:	b17b      	cbz	r3, 800ac5c <__mdiff+0x108>
 800ac3c:	6107      	str	r7, [r0, #16]
 800ac3e:	e7a3      	b.n	800ab88 <__mdiff+0x34>
 800ac40:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac44:	fa11 f288 	uxtah	r2, r1, r8
 800ac48:	1414      	asrs	r4, r2, #16
 800ac4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac4e:	b292      	uxth	r2, r2
 800ac50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac54:	f84e 2b04 	str.w	r2, [lr], #4
 800ac58:	1421      	asrs	r1, r4, #16
 800ac5a:	e7e0      	b.n	800ac1e <__mdiff+0xca>
 800ac5c:	3f01      	subs	r7, #1
 800ac5e:	e7ea      	b.n	800ac36 <__mdiff+0xe2>
 800ac60:	0800be9f 	.word	0x0800be9f
 800ac64:	0800beb0 	.word	0x0800beb0

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec57 6b10 	vmov	r6, r7, d0
 800ac74:	4690      	mov	r8, r2
 800ac76:	f7ff fccf 	bl	800a618 <_Balloc>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <__d2b+0x24>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b25      	ldr	r3, [pc, #148]	; (800ad18 <__d2b+0xb0>)
 800ac82:	4826      	ldr	r0, [pc, #152]	; (800ad1c <__d2b+0xb4>)
 800ac84:	f240 310a 	movw	r1, #778	; 0x30a
 800ac88:	f000 faac 	bl	800b1e4 <__assert_func>
 800ac8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac94:	bb35      	cbnz	r5, 800ace4 <__d2b+0x7c>
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	d028      	beq.n	800acee <__d2b+0x86>
 800ac9c:	4668      	mov	r0, sp
 800ac9e:	9600      	str	r6, [sp, #0]
 800aca0:	f7ff fd82 	bl	800a7a8 <__lo0bits>
 800aca4:	9900      	ldr	r1, [sp, #0]
 800aca6:	b300      	cbz	r0, 800acea <__d2b+0x82>
 800aca8:	9a01      	ldr	r2, [sp, #4]
 800acaa:	f1c0 0320 	rsb	r3, r0, #32
 800acae:	fa02 f303 	lsl.w	r3, r2, r3
 800acb2:	430b      	orrs	r3, r1
 800acb4:	40c2      	lsrs	r2, r0
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	9201      	str	r2, [sp, #4]
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	61a3      	str	r3, [r4, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf14      	ite	ne
 800acc2:	2202      	movne	r2, #2
 800acc4:	2201      	moveq	r2, #1
 800acc6:	6122      	str	r2, [r4, #16]
 800acc8:	b1d5      	cbz	r5, 800ad00 <__d2b+0x98>
 800acca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acce:	4405      	add	r5, r0
 800acd0:	f8c9 5000 	str.w	r5, [r9]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acd8:	f8c8 0000 	str.w	r0, [r8]
 800acdc:	4620      	mov	r0, r4
 800acde:	b003      	add	sp, #12
 800ace0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace8:	e7d5      	b.n	800ac96 <__d2b+0x2e>
 800acea:	6161      	str	r1, [r4, #20]
 800acec:	e7e5      	b.n	800acba <__d2b+0x52>
 800acee:	a801      	add	r0, sp, #4
 800acf0:	f7ff fd5a 	bl	800a7a8 <__lo0bits>
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	6163      	str	r3, [r4, #20]
 800acf8:	2201      	movs	r2, #1
 800acfa:	6122      	str	r2, [r4, #16]
 800acfc:	3020      	adds	r0, #32
 800acfe:	e7e3      	b.n	800acc8 <__d2b+0x60>
 800ad00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad08:	f8c9 0000 	str.w	r0, [r9]
 800ad0c:	6918      	ldr	r0, [r3, #16]
 800ad0e:	f7ff fd2b 	bl	800a768 <__hi0bits>
 800ad12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad16:	e7df      	b.n	800acd8 <__d2b+0x70>
 800ad18:	0800be9f 	.word	0x0800be9f
 800ad1c:	0800beb0 	.word	0x0800beb0

0800ad20 <_calloc_r>:
 800ad20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad22:	fba1 2402 	umull	r2, r4, r1, r2
 800ad26:	b94c      	cbnz	r4, 800ad3c <_calloc_r+0x1c>
 800ad28:	4611      	mov	r1, r2
 800ad2a:	9201      	str	r2, [sp, #4]
 800ad2c:	f000 f87a 	bl	800ae24 <_malloc_r>
 800ad30:	9a01      	ldr	r2, [sp, #4]
 800ad32:	4605      	mov	r5, r0
 800ad34:	b930      	cbnz	r0, 800ad44 <_calloc_r+0x24>
 800ad36:	4628      	mov	r0, r5
 800ad38:	b003      	add	sp, #12
 800ad3a:	bd30      	pop	{r4, r5, pc}
 800ad3c:	220c      	movs	r2, #12
 800ad3e:	6002      	str	r2, [r0, #0]
 800ad40:	2500      	movs	r5, #0
 800ad42:	e7f8      	b.n	800ad36 <_calloc_r+0x16>
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7fe f93f 	bl	8008fc8 <memset>
 800ad4a:	e7f4      	b.n	800ad36 <_calloc_r+0x16>

0800ad4c <_free_r>:
 800ad4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	d044      	beq.n	800addc <_free_r+0x90>
 800ad52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad56:	9001      	str	r0, [sp, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad5e:	bfb8      	it	lt
 800ad60:	18e4      	addlt	r4, r4, r3
 800ad62:	f000 fa9b 	bl	800b29c <__malloc_lock>
 800ad66:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <_free_r+0x94>)
 800ad68:	9801      	ldr	r0, [sp, #4]
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	b933      	cbnz	r3, 800ad7c <_free_r+0x30>
 800ad6e:	6063      	str	r3, [r4, #4]
 800ad70:	6014      	str	r4, [r2, #0]
 800ad72:	b003      	add	sp, #12
 800ad74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad78:	f000 ba96 	b.w	800b2a8 <__malloc_unlock>
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d908      	bls.n	800ad92 <_free_r+0x46>
 800ad80:	6825      	ldr	r5, [r4, #0]
 800ad82:	1961      	adds	r1, r4, r5
 800ad84:	428b      	cmp	r3, r1
 800ad86:	bf01      	itttt	eq
 800ad88:	6819      	ldreq	r1, [r3, #0]
 800ad8a:	685b      	ldreq	r3, [r3, #4]
 800ad8c:	1949      	addeq	r1, r1, r5
 800ad8e:	6021      	streq	r1, [r4, #0]
 800ad90:	e7ed      	b.n	800ad6e <_free_r+0x22>
 800ad92:	461a      	mov	r2, r3
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	b10b      	cbz	r3, 800ad9c <_free_r+0x50>
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	d9fa      	bls.n	800ad92 <_free_r+0x46>
 800ad9c:	6811      	ldr	r1, [r2, #0]
 800ad9e:	1855      	adds	r5, r2, r1
 800ada0:	42a5      	cmp	r5, r4
 800ada2:	d10b      	bne.n	800adbc <_free_r+0x70>
 800ada4:	6824      	ldr	r4, [r4, #0]
 800ada6:	4421      	add	r1, r4
 800ada8:	1854      	adds	r4, r2, r1
 800adaa:	42a3      	cmp	r3, r4
 800adac:	6011      	str	r1, [r2, #0]
 800adae:	d1e0      	bne.n	800ad72 <_free_r+0x26>
 800adb0:	681c      	ldr	r4, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	6053      	str	r3, [r2, #4]
 800adb6:	4421      	add	r1, r4
 800adb8:	6011      	str	r1, [r2, #0]
 800adba:	e7da      	b.n	800ad72 <_free_r+0x26>
 800adbc:	d902      	bls.n	800adc4 <_free_r+0x78>
 800adbe:	230c      	movs	r3, #12
 800adc0:	6003      	str	r3, [r0, #0]
 800adc2:	e7d6      	b.n	800ad72 <_free_r+0x26>
 800adc4:	6825      	ldr	r5, [r4, #0]
 800adc6:	1961      	adds	r1, r4, r5
 800adc8:	428b      	cmp	r3, r1
 800adca:	bf04      	itt	eq
 800adcc:	6819      	ldreq	r1, [r3, #0]
 800adce:	685b      	ldreq	r3, [r3, #4]
 800add0:	6063      	str	r3, [r4, #4]
 800add2:	bf04      	itt	eq
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	6054      	str	r4, [r2, #4]
 800adda:	e7ca      	b.n	800ad72 <_free_r+0x26>
 800addc:	b003      	add	sp, #12
 800adde:	bd30      	pop	{r4, r5, pc}
 800ade0:	2000664c 	.word	0x2000664c

0800ade4 <sbrk_aligned>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	4e0e      	ldr	r6, [pc, #56]	; (800ae20 <sbrk_aligned+0x3c>)
 800ade8:	460c      	mov	r4, r1
 800adea:	6831      	ldr	r1, [r6, #0]
 800adec:	4605      	mov	r5, r0
 800adee:	b911      	cbnz	r1, 800adf6 <sbrk_aligned+0x12>
 800adf0:	f000 f9e8 	bl	800b1c4 <_sbrk_r>
 800adf4:	6030      	str	r0, [r6, #0]
 800adf6:	4621      	mov	r1, r4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 f9e3 	bl	800b1c4 <_sbrk_r>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d00a      	beq.n	800ae18 <sbrk_aligned+0x34>
 800ae02:	1cc4      	adds	r4, r0, #3
 800ae04:	f024 0403 	bic.w	r4, r4, #3
 800ae08:	42a0      	cmp	r0, r4
 800ae0a:	d007      	beq.n	800ae1c <sbrk_aligned+0x38>
 800ae0c:	1a21      	subs	r1, r4, r0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 f9d8 	bl	800b1c4 <_sbrk_r>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d101      	bne.n	800ae1c <sbrk_aligned+0x38>
 800ae18:	f04f 34ff 	mov.w	r4, #4294967295
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	20006650 	.word	0x20006650

0800ae24 <_malloc_r>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	1ccd      	adds	r5, r1, #3
 800ae2a:	f025 0503 	bic.w	r5, r5, #3
 800ae2e:	3508      	adds	r5, #8
 800ae30:	2d0c      	cmp	r5, #12
 800ae32:	bf38      	it	cc
 800ae34:	250c      	movcc	r5, #12
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	4607      	mov	r7, r0
 800ae3a:	db01      	blt.n	800ae40 <_malloc_r+0x1c>
 800ae3c:	42a9      	cmp	r1, r5
 800ae3e:	d905      	bls.n	800ae4c <_malloc_r+0x28>
 800ae40:	230c      	movs	r3, #12
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	2600      	movs	r6, #0
 800ae46:	4630      	mov	r0, r6
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	4e2e      	ldr	r6, [pc, #184]	; (800af08 <_malloc_r+0xe4>)
 800ae4e:	f000 fa25 	bl	800b29c <__malloc_lock>
 800ae52:	6833      	ldr	r3, [r6, #0]
 800ae54:	461c      	mov	r4, r3
 800ae56:	bb34      	cbnz	r4, 800aea6 <_malloc_r+0x82>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f7ff ffc2 	bl	800ade4 <sbrk_aligned>
 800ae60:	1c43      	adds	r3, r0, #1
 800ae62:	4604      	mov	r4, r0
 800ae64:	d14d      	bne.n	800af02 <_malloc_r+0xde>
 800ae66:	6834      	ldr	r4, [r6, #0]
 800ae68:	4626      	mov	r6, r4
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	d140      	bne.n	800aef0 <_malloc_r+0xcc>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	4631      	mov	r1, r6
 800ae72:	4638      	mov	r0, r7
 800ae74:	eb04 0803 	add.w	r8, r4, r3
 800ae78:	f000 f9a4 	bl	800b1c4 <_sbrk_r>
 800ae7c:	4580      	cmp	r8, r0
 800ae7e:	d13a      	bne.n	800aef6 <_malloc_r+0xd2>
 800ae80:	6821      	ldr	r1, [r4, #0]
 800ae82:	3503      	adds	r5, #3
 800ae84:	1a6d      	subs	r5, r5, r1
 800ae86:	f025 0503 	bic.w	r5, r5, #3
 800ae8a:	3508      	adds	r5, #8
 800ae8c:	2d0c      	cmp	r5, #12
 800ae8e:	bf38      	it	cc
 800ae90:	250c      	movcc	r5, #12
 800ae92:	4629      	mov	r1, r5
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7ff ffa5 	bl	800ade4 <sbrk_aligned>
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d02b      	beq.n	800aef6 <_malloc_r+0xd2>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	442b      	add	r3, r5
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	e00e      	b.n	800aec4 <_malloc_r+0xa0>
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	1b52      	subs	r2, r2, r5
 800aeaa:	d41e      	bmi.n	800aeea <_malloc_r+0xc6>
 800aeac:	2a0b      	cmp	r2, #11
 800aeae:	d916      	bls.n	800aede <_malloc_r+0xba>
 800aeb0:	1961      	adds	r1, r4, r5
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	6025      	str	r5, [r4, #0]
 800aeb6:	bf18      	it	ne
 800aeb8:	6059      	strne	r1, [r3, #4]
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	bf08      	it	eq
 800aebe:	6031      	streq	r1, [r6, #0]
 800aec0:	5162      	str	r2, [r4, r5]
 800aec2:	604b      	str	r3, [r1, #4]
 800aec4:	4638      	mov	r0, r7
 800aec6:	f104 060b 	add.w	r6, r4, #11
 800aeca:	f000 f9ed 	bl	800b2a8 <__malloc_unlock>
 800aece:	f026 0607 	bic.w	r6, r6, #7
 800aed2:	1d23      	adds	r3, r4, #4
 800aed4:	1af2      	subs	r2, r6, r3
 800aed6:	d0b6      	beq.n	800ae46 <_malloc_r+0x22>
 800aed8:	1b9b      	subs	r3, r3, r6
 800aeda:	50a3      	str	r3, [r4, r2]
 800aedc:	e7b3      	b.n	800ae46 <_malloc_r+0x22>
 800aede:	6862      	ldr	r2, [r4, #4]
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	bf0c      	ite	eq
 800aee4:	6032      	streq	r2, [r6, #0]
 800aee6:	605a      	strne	r2, [r3, #4]
 800aee8:	e7ec      	b.n	800aec4 <_malloc_r+0xa0>
 800aeea:	4623      	mov	r3, r4
 800aeec:	6864      	ldr	r4, [r4, #4]
 800aeee:	e7b2      	b.n	800ae56 <_malloc_r+0x32>
 800aef0:	4634      	mov	r4, r6
 800aef2:	6876      	ldr	r6, [r6, #4]
 800aef4:	e7b9      	b.n	800ae6a <_malloc_r+0x46>
 800aef6:	230c      	movs	r3, #12
 800aef8:	603b      	str	r3, [r7, #0]
 800aefa:	4638      	mov	r0, r7
 800aefc:	f000 f9d4 	bl	800b2a8 <__malloc_unlock>
 800af00:	e7a1      	b.n	800ae46 <_malloc_r+0x22>
 800af02:	6025      	str	r5, [r4, #0]
 800af04:	e7de      	b.n	800aec4 <_malloc_r+0xa0>
 800af06:	bf00      	nop
 800af08:	2000664c 	.word	0x2000664c

0800af0c <__ssputs_r>:
 800af0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af10:	688e      	ldr	r6, [r1, #8]
 800af12:	429e      	cmp	r6, r3
 800af14:	4682      	mov	sl, r0
 800af16:	460c      	mov	r4, r1
 800af18:	4690      	mov	r8, r2
 800af1a:	461f      	mov	r7, r3
 800af1c:	d838      	bhi.n	800af90 <__ssputs_r+0x84>
 800af1e:	898a      	ldrh	r2, [r1, #12]
 800af20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af24:	d032      	beq.n	800af8c <__ssputs_r+0x80>
 800af26:	6825      	ldr	r5, [r4, #0]
 800af28:	6909      	ldr	r1, [r1, #16]
 800af2a:	eba5 0901 	sub.w	r9, r5, r1
 800af2e:	6965      	ldr	r5, [r4, #20]
 800af30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af38:	3301      	adds	r3, #1
 800af3a:	444b      	add	r3, r9
 800af3c:	106d      	asrs	r5, r5, #1
 800af3e:	429d      	cmp	r5, r3
 800af40:	bf38      	it	cc
 800af42:	461d      	movcc	r5, r3
 800af44:	0553      	lsls	r3, r2, #21
 800af46:	d531      	bpl.n	800afac <__ssputs_r+0xa0>
 800af48:	4629      	mov	r1, r5
 800af4a:	f7ff ff6b 	bl	800ae24 <_malloc_r>
 800af4e:	4606      	mov	r6, r0
 800af50:	b950      	cbnz	r0, 800af68 <__ssputs_r+0x5c>
 800af52:	230c      	movs	r3, #12
 800af54:	f8ca 3000 	str.w	r3, [sl]
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	f04f 30ff 	mov.w	r0, #4294967295
 800af64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af68:	6921      	ldr	r1, [r4, #16]
 800af6a:	464a      	mov	r2, r9
 800af6c:	f7ff fb46 	bl	800a5fc <memcpy>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	6126      	str	r6, [r4, #16]
 800af7e:	6165      	str	r5, [r4, #20]
 800af80:	444e      	add	r6, r9
 800af82:	eba5 0509 	sub.w	r5, r5, r9
 800af86:	6026      	str	r6, [r4, #0]
 800af88:	60a5      	str	r5, [r4, #8]
 800af8a:	463e      	mov	r6, r7
 800af8c:	42be      	cmp	r6, r7
 800af8e:	d900      	bls.n	800af92 <__ssputs_r+0x86>
 800af90:	463e      	mov	r6, r7
 800af92:	6820      	ldr	r0, [r4, #0]
 800af94:	4632      	mov	r2, r6
 800af96:	4641      	mov	r1, r8
 800af98:	f000 f966 	bl	800b268 <memmove>
 800af9c:	68a3      	ldr	r3, [r4, #8]
 800af9e:	1b9b      	subs	r3, r3, r6
 800afa0:	60a3      	str	r3, [r4, #8]
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	4433      	add	r3, r6
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	2000      	movs	r0, #0
 800afaa:	e7db      	b.n	800af64 <__ssputs_r+0x58>
 800afac:	462a      	mov	r2, r5
 800afae:	f000 f981 	bl	800b2b4 <_realloc_r>
 800afb2:	4606      	mov	r6, r0
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d1e1      	bne.n	800af7c <__ssputs_r+0x70>
 800afb8:	6921      	ldr	r1, [r4, #16]
 800afba:	4650      	mov	r0, sl
 800afbc:	f7ff fec6 	bl	800ad4c <_free_r>
 800afc0:	e7c7      	b.n	800af52 <__ssputs_r+0x46>
	...

0800afc4 <_svfiprintf_r>:
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	4698      	mov	r8, r3
 800afca:	898b      	ldrh	r3, [r1, #12]
 800afcc:	061b      	lsls	r3, r3, #24
 800afce:	b09d      	sub	sp, #116	; 0x74
 800afd0:	4607      	mov	r7, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	4614      	mov	r4, r2
 800afd6:	d50e      	bpl.n	800aff6 <_svfiprintf_r+0x32>
 800afd8:	690b      	ldr	r3, [r1, #16]
 800afda:	b963      	cbnz	r3, 800aff6 <_svfiprintf_r+0x32>
 800afdc:	2140      	movs	r1, #64	; 0x40
 800afde:	f7ff ff21 	bl	800ae24 <_malloc_r>
 800afe2:	6028      	str	r0, [r5, #0]
 800afe4:	6128      	str	r0, [r5, #16]
 800afe6:	b920      	cbnz	r0, 800aff2 <_svfiprintf_r+0x2e>
 800afe8:	230c      	movs	r3, #12
 800afea:	603b      	str	r3, [r7, #0]
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	e0d1      	b.n	800b196 <_svfiprintf_r+0x1d2>
 800aff2:	2340      	movs	r3, #64	; 0x40
 800aff4:	616b      	str	r3, [r5, #20]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9309      	str	r3, [sp, #36]	; 0x24
 800affa:	2320      	movs	r3, #32
 800affc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b000:	f8cd 800c 	str.w	r8, [sp, #12]
 800b004:	2330      	movs	r3, #48	; 0x30
 800b006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1b0 <_svfiprintf_r+0x1ec>
 800b00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b00e:	f04f 0901 	mov.w	r9, #1
 800b012:	4623      	mov	r3, r4
 800b014:	469a      	mov	sl, r3
 800b016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b01a:	b10a      	cbz	r2, 800b020 <_svfiprintf_r+0x5c>
 800b01c:	2a25      	cmp	r2, #37	; 0x25
 800b01e:	d1f9      	bne.n	800b014 <_svfiprintf_r+0x50>
 800b020:	ebba 0b04 	subs.w	fp, sl, r4
 800b024:	d00b      	beq.n	800b03e <_svfiprintf_r+0x7a>
 800b026:	465b      	mov	r3, fp
 800b028:	4622      	mov	r2, r4
 800b02a:	4629      	mov	r1, r5
 800b02c:	4638      	mov	r0, r7
 800b02e:	f7ff ff6d 	bl	800af0c <__ssputs_r>
 800b032:	3001      	adds	r0, #1
 800b034:	f000 80aa 	beq.w	800b18c <_svfiprintf_r+0x1c8>
 800b038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b03a:	445a      	add	r2, fp
 800b03c:	9209      	str	r2, [sp, #36]	; 0x24
 800b03e:	f89a 3000 	ldrb.w	r3, [sl]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 80a2 	beq.w	800b18c <_svfiprintf_r+0x1c8>
 800b048:	2300      	movs	r3, #0
 800b04a:	f04f 32ff 	mov.w	r2, #4294967295
 800b04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b052:	f10a 0a01 	add.w	sl, sl, #1
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	9307      	str	r3, [sp, #28]
 800b05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b05e:	931a      	str	r3, [sp, #104]	; 0x68
 800b060:	4654      	mov	r4, sl
 800b062:	2205      	movs	r2, #5
 800b064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b068:	4851      	ldr	r0, [pc, #324]	; (800b1b0 <_svfiprintf_r+0x1ec>)
 800b06a:	f7f5 f8d1 	bl	8000210 <memchr>
 800b06e:	9a04      	ldr	r2, [sp, #16]
 800b070:	b9d8      	cbnz	r0, 800b0aa <_svfiprintf_r+0xe6>
 800b072:	06d0      	lsls	r0, r2, #27
 800b074:	bf44      	itt	mi
 800b076:	2320      	movmi	r3, #32
 800b078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b07c:	0711      	lsls	r1, r2, #28
 800b07e:	bf44      	itt	mi
 800b080:	232b      	movmi	r3, #43	; 0x2b
 800b082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b086:	f89a 3000 	ldrb.w	r3, [sl]
 800b08a:	2b2a      	cmp	r3, #42	; 0x2a
 800b08c:	d015      	beq.n	800b0ba <_svfiprintf_r+0xf6>
 800b08e:	9a07      	ldr	r2, [sp, #28]
 800b090:	4654      	mov	r4, sl
 800b092:	2000      	movs	r0, #0
 800b094:	f04f 0c0a 	mov.w	ip, #10
 800b098:	4621      	mov	r1, r4
 800b09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b09e:	3b30      	subs	r3, #48	; 0x30
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d94e      	bls.n	800b142 <_svfiprintf_r+0x17e>
 800b0a4:	b1b0      	cbz	r0, 800b0d4 <_svfiprintf_r+0x110>
 800b0a6:	9207      	str	r2, [sp, #28]
 800b0a8:	e014      	b.n	800b0d4 <_svfiprintf_r+0x110>
 800b0aa:	eba0 0308 	sub.w	r3, r0, r8
 800b0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	46a2      	mov	sl, r4
 800b0b8:	e7d2      	b.n	800b060 <_svfiprintf_r+0x9c>
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	1d19      	adds	r1, r3, #4
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	9103      	str	r1, [sp, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bfbb      	ittet	lt
 800b0c6:	425b      	neglt	r3, r3
 800b0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b0cc:	9307      	strge	r3, [sp, #28]
 800b0ce:	9307      	strlt	r3, [sp, #28]
 800b0d0:	bfb8      	it	lt
 800b0d2:	9204      	strlt	r2, [sp, #16]
 800b0d4:	7823      	ldrb	r3, [r4, #0]
 800b0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0d8:	d10c      	bne.n	800b0f4 <_svfiprintf_r+0x130>
 800b0da:	7863      	ldrb	r3, [r4, #1]
 800b0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b0de:	d135      	bne.n	800b14c <_svfiprintf_r+0x188>
 800b0e0:	9b03      	ldr	r3, [sp, #12]
 800b0e2:	1d1a      	adds	r2, r3, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	9203      	str	r2, [sp, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	bfb8      	it	lt
 800b0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0f0:	3402      	adds	r4, #2
 800b0f2:	9305      	str	r3, [sp, #20]
 800b0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1c0 <_svfiprintf_r+0x1fc>
 800b0f8:	7821      	ldrb	r1, [r4, #0]
 800b0fa:	2203      	movs	r2, #3
 800b0fc:	4650      	mov	r0, sl
 800b0fe:	f7f5 f887 	bl	8000210 <memchr>
 800b102:	b140      	cbz	r0, 800b116 <_svfiprintf_r+0x152>
 800b104:	2340      	movs	r3, #64	; 0x40
 800b106:	eba0 000a 	sub.w	r0, r0, sl
 800b10a:	fa03 f000 	lsl.w	r0, r3, r0
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	4303      	orrs	r3, r0
 800b112:	3401      	adds	r4, #1
 800b114:	9304      	str	r3, [sp, #16]
 800b116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11a:	4826      	ldr	r0, [pc, #152]	; (800b1b4 <_svfiprintf_r+0x1f0>)
 800b11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b120:	2206      	movs	r2, #6
 800b122:	f7f5 f875 	bl	8000210 <memchr>
 800b126:	2800      	cmp	r0, #0
 800b128:	d038      	beq.n	800b19c <_svfiprintf_r+0x1d8>
 800b12a:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <_svfiprintf_r+0x1f4>)
 800b12c:	bb1b      	cbnz	r3, 800b176 <_svfiprintf_r+0x1b2>
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	3307      	adds	r3, #7
 800b132:	f023 0307 	bic.w	r3, r3, #7
 800b136:	3308      	adds	r3, #8
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13c:	4433      	add	r3, r6
 800b13e:	9309      	str	r3, [sp, #36]	; 0x24
 800b140:	e767      	b.n	800b012 <_svfiprintf_r+0x4e>
 800b142:	fb0c 3202 	mla	r2, ip, r2, r3
 800b146:	460c      	mov	r4, r1
 800b148:	2001      	movs	r0, #1
 800b14a:	e7a5      	b.n	800b098 <_svfiprintf_r+0xd4>
 800b14c:	2300      	movs	r3, #0
 800b14e:	3401      	adds	r4, #1
 800b150:	9305      	str	r3, [sp, #20]
 800b152:	4619      	mov	r1, r3
 800b154:	f04f 0c0a 	mov.w	ip, #10
 800b158:	4620      	mov	r0, r4
 800b15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b15e:	3a30      	subs	r2, #48	; 0x30
 800b160:	2a09      	cmp	r2, #9
 800b162:	d903      	bls.n	800b16c <_svfiprintf_r+0x1a8>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0c5      	beq.n	800b0f4 <_svfiprintf_r+0x130>
 800b168:	9105      	str	r1, [sp, #20]
 800b16a:	e7c3      	b.n	800b0f4 <_svfiprintf_r+0x130>
 800b16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b170:	4604      	mov	r4, r0
 800b172:	2301      	movs	r3, #1
 800b174:	e7f0      	b.n	800b158 <_svfiprintf_r+0x194>
 800b176:	ab03      	add	r3, sp, #12
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	462a      	mov	r2, r5
 800b17c:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <_svfiprintf_r+0x1f8>)
 800b17e:	a904      	add	r1, sp, #16
 800b180:	4638      	mov	r0, r7
 800b182:	f7fd ffc9 	bl	8009118 <_printf_float>
 800b186:	1c42      	adds	r2, r0, #1
 800b188:	4606      	mov	r6, r0
 800b18a:	d1d6      	bne.n	800b13a <_svfiprintf_r+0x176>
 800b18c:	89ab      	ldrh	r3, [r5, #12]
 800b18e:	065b      	lsls	r3, r3, #25
 800b190:	f53f af2c 	bmi.w	800afec <_svfiprintf_r+0x28>
 800b194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b196:	b01d      	add	sp, #116	; 0x74
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	ab03      	add	r3, sp, #12
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	462a      	mov	r2, r5
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <_svfiprintf_r+0x1f8>)
 800b1a4:	a904      	add	r1, sp, #16
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f7fe fa5a 	bl	8009660 <_printf_i>
 800b1ac:	e7eb      	b.n	800b186 <_svfiprintf_r+0x1c2>
 800b1ae:	bf00      	nop
 800b1b0:	0800c00c 	.word	0x0800c00c
 800b1b4:	0800c016 	.word	0x0800c016
 800b1b8:	08009119 	.word	0x08009119
 800b1bc:	0800af0d 	.word	0x0800af0d
 800b1c0:	0800c012 	.word	0x0800c012

0800b1c4 <_sbrk_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d06      	ldr	r5, [pc, #24]	; (800b1e0 <_sbrk_r+0x1c>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	f7f7 fa00 	bl	80025d4 <_sbrk>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d102      	bne.n	800b1de <_sbrk_r+0x1a>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	b103      	cbz	r3, 800b1de <_sbrk_r+0x1a>
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	20006654 	.word	0x20006654

0800b1e4 <__assert_func>:
 800b1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1e6:	4614      	mov	r4, r2
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	4b09      	ldr	r3, [pc, #36]	; (800b210 <__assert_func+0x2c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	68d8      	ldr	r0, [r3, #12]
 800b1f2:	b14c      	cbz	r4, 800b208 <__assert_func+0x24>
 800b1f4:	4b07      	ldr	r3, [pc, #28]	; (800b214 <__assert_func+0x30>)
 800b1f6:	9100      	str	r1, [sp, #0]
 800b1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1fc:	4906      	ldr	r1, [pc, #24]	; (800b218 <__assert_func+0x34>)
 800b1fe:	462b      	mov	r3, r5
 800b200:	f000 f80e 	bl	800b220 <fiprintf>
 800b204:	f000 faac 	bl	800b760 <abort>
 800b208:	4b04      	ldr	r3, [pc, #16]	; (800b21c <__assert_func+0x38>)
 800b20a:	461c      	mov	r4, r3
 800b20c:	e7f3      	b.n	800b1f6 <__assert_func+0x12>
 800b20e:	bf00      	nop
 800b210:	20000010 	.word	0x20000010
 800b214:	0800c01d 	.word	0x0800c01d
 800b218:	0800c02a 	.word	0x0800c02a
 800b21c:	0800c058 	.word	0x0800c058

0800b220 <fiprintf>:
 800b220:	b40e      	push	{r1, r2, r3}
 800b222:	b503      	push	{r0, r1, lr}
 800b224:	4601      	mov	r1, r0
 800b226:	ab03      	add	r3, sp, #12
 800b228:	4805      	ldr	r0, [pc, #20]	; (800b240 <fiprintf+0x20>)
 800b22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22e:	6800      	ldr	r0, [r0, #0]
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	f000 f897 	bl	800b364 <_vfiprintf_r>
 800b236:	b002      	add	sp, #8
 800b238:	f85d eb04 	ldr.w	lr, [sp], #4
 800b23c:	b003      	add	sp, #12
 800b23e:	4770      	bx	lr
 800b240:	20000010 	.word	0x20000010

0800b244 <__ascii_mbtowc>:
 800b244:	b082      	sub	sp, #8
 800b246:	b901      	cbnz	r1, 800b24a <__ascii_mbtowc+0x6>
 800b248:	a901      	add	r1, sp, #4
 800b24a:	b142      	cbz	r2, 800b25e <__ascii_mbtowc+0x1a>
 800b24c:	b14b      	cbz	r3, 800b262 <__ascii_mbtowc+0x1e>
 800b24e:	7813      	ldrb	r3, [r2, #0]
 800b250:	600b      	str	r3, [r1, #0]
 800b252:	7812      	ldrb	r2, [r2, #0]
 800b254:	1e10      	subs	r0, r2, #0
 800b256:	bf18      	it	ne
 800b258:	2001      	movne	r0, #1
 800b25a:	b002      	add	sp, #8
 800b25c:	4770      	bx	lr
 800b25e:	4610      	mov	r0, r2
 800b260:	e7fb      	b.n	800b25a <__ascii_mbtowc+0x16>
 800b262:	f06f 0001 	mvn.w	r0, #1
 800b266:	e7f8      	b.n	800b25a <__ascii_mbtowc+0x16>

0800b268 <memmove>:
 800b268:	4288      	cmp	r0, r1
 800b26a:	b510      	push	{r4, lr}
 800b26c:	eb01 0402 	add.w	r4, r1, r2
 800b270:	d902      	bls.n	800b278 <memmove+0x10>
 800b272:	4284      	cmp	r4, r0
 800b274:	4623      	mov	r3, r4
 800b276:	d807      	bhi.n	800b288 <memmove+0x20>
 800b278:	1e43      	subs	r3, r0, #1
 800b27a:	42a1      	cmp	r1, r4
 800b27c:	d008      	beq.n	800b290 <memmove+0x28>
 800b27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b286:	e7f8      	b.n	800b27a <memmove+0x12>
 800b288:	4402      	add	r2, r0
 800b28a:	4601      	mov	r1, r0
 800b28c:	428a      	cmp	r2, r1
 800b28e:	d100      	bne.n	800b292 <memmove+0x2a>
 800b290:	bd10      	pop	{r4, pc}
 800b292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b29a:	e7f7      	b.n	800b28c <memmove+0x24>

0800b29c <__malloc_lock>:
 800b29c:	4801      	ldr	r0, [pc, #4]	; (800b2a4 <__malloc_lock+0x8>)
 800b29e:	f000 bc1f 	b.w	800bae0 <__retarget_lock_acquire_recursive>
 800b2a2:	bf00      	nop
 800b2a4:	20006658 	.word	0x20006658

0800b2a8 <__malloc_unlock>:
 800b2a8:	4801      	ldr	r0, [pc, #4]	; (800b2b0 <__malloc_unlock+0x8>)
 800b2aa:	f000 bc1a 	b.w	800bae2 <__retarget_lock_release_recursive>
 800b2ae:	bf00      	nop
 800b2b0:	20006658 	.word	0x20006658

0800b2b4 <_realloc_r>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	4614      	mov	r4, r2
 800b2bc:	460e      	mov	r6, r1
 800b2be:	b921      	cbnz	r1, 800b2ca <_realloc_r+0x16>
 800b2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	f7ff bdad 	b.w	800ae24 <_malloc_r>
 800b2ca:	b92a      	cbnz	r2, 800b2d8 <_realloc_r+0x24>
 800b2cc:	f7ff fd3e 	bl	800ad4c <_free_r>
 800b2d0:	4625      	mov	r5, r4
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	f000 fc6a 	bl	800bbb0 <_malloc_usable_size_r>
 800b2dc:	4284      	cmp	r4, r0
 800b2de:	4607      	mov	r7, r0
 800b2e0:	d802      	bhi.n	800b2e8 <_realloc_r+0x34>
 800b2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2e6:	d812      	bhi.n	800b30e <_realloc_r+0x5a>
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	f7ff fd9a 	bl	800ae24 <_malloc_r>
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0ed      	beq.n	800b2d2 <_realloc_r+0x1e>
 800b2f6:	42bc      	cmp	r4, r7
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	bf28      	it	cs
 800b2fe:	463a      	movcs	r2, r7
 800b300:	f7ff f97c 	bl	800a5fc <memcpy>
 800b304:	4631      	mov	r1, r6
 800b306:	4640      	mov	r0, r8
 800b308:	f7ff fd20 	bl	800ad4c <_free_r>
 800b30c:	e7e1      	b.n	800b2d2 <_realloc_r+0x1e>
 800b30e:	4635      	mov	r5, r6
 800b310:	e7df      	b.n	800b2d2 <_realloc_r+0x1e>

0800b312 <__sfputc_r>:
 800b312:	6893      	ldr	r3, [r2, #8]
 800b314:	3b01      	subs	r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	b410      	push	{r4}
 800b31a:	6093      	str	r3, [r2, #8]
 800b31c:	da08      	bge.n	800b330 <__sfputc_r+0x1e>
 800b31e:	6994      	ldr	r4, [r2, #24]
 800b320:	42a3      	cmp	r3, r4
 800b322:	db01      	blt.n	800b328 <__sfputc_r+0x16>
 800b324:	290a      	cmp	r1, #10
 800b326:	d103      	bne.n	800b330 <__sfputc_r+0x1e>
 800b328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b32c:	f000 b94a 	b.w	800b5c4 <__swbuf_r>
 800b330:	6813      	ldr	r3, [r2, #0]
 800b332:	1c58      	adds	r0, r3, #1
 800b334:	6010      	str	r0, [r2, #0]
 800b336:	7019      	strb	r1, [r3, #0]
 800b338:	4608      	mov	r0, r1
 800b33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <__sfputs_r>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	4614      	mov	r4, r2
 800b348:	18d5      	adds	r5, r2, r3
 800b34a:	42ac      	cmp	r4, r5
 800b34c:	d101      	bne.n	800b352 <__sfputs_r+0x12>
 800b34e:	2000      	movs	r0, #0
 800b350:	e007      	b.n	800b362 <__sfputs_r+0x22>
 800b352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b356:	463a      	mov	r2, r7
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff ffda 	bl	800b312 <__sfputc_r>
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	d1f3      	bne.n	800b34a <__sfputs_r+0xa>
 800b362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b364 <_vfiprintf_r>:
 800b364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b368:	460d      	mov	r5, r1
 800b36a:	b09d      	sub	sp, #116	; 0x74
 800b36c:	4614      	mov	r4, r2
 800b36e:	4698      	mov	r8, r3
 800b370:	4606      	mov	r6, r0
 800b372:	b118      	cbz	r0, 800b37c <_vfiprintf_r+0x18>
 800b374:	6983      	ldr	r3, [r0, #24]
 800b376:	b90b      	cbnz	r3, 800b37c <_vfiprintf_r+0x18>
 800b378:	f000 fb14 	bl	800b9a4 <__sinit>
 800b37c:	4b89      	ldr	r3, [pc, #548]	; (800b5a4 <_vfiprintf_r+0x240>)
 800b37e:	429d      	cmp	r5, r3
 800b380:	d11b      	bne.n	800b3ba <_vfiprintf_r+0x56>
 800b382:	6875      	ldr	r5, [r6, #4]
 800b384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b386:	07d9      	lsls	r1, r3, #31
 800b388:	d405      	bmi.n	800b396 <_vfiprintf_r+0x32>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	059a      	lsls	r2, r3, #22
 800b38e:	d402      	bmi.n	800b396 <_vfiprintf_r+0x32>
 800b390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b392:	f000 fba5 	bl	800bae0 <__retarget_lock_acquire_recursive>
 800b396:	89ab      	ldrh	r3, [r5, #12]
 800b398:	071b      	lsls	r3, r3, #28
 800b39a:	d501      	bpl.n	800b3a0 <_vfiprintf_r+0x3c>
 800b39c:	692b      	ldr	r3, [r5, #16]
 800b39e:	b9eb      	cbnz	r3, 800b3dc <_vfiprintf_r+0x78>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f000 f96e 	bl	800b684 <__swsetup_r>
 800b3a8:	b1c0      	cbz	r0, 800b3dc <_vfiprintf_r+0x78>
 800b3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ac:	07dc      	lsls	r4, r3, #31
 800b3ae:	d50e      	bpl.n	800b3ce <_vfiprintf_r+0x6a>
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b4:	b01d      	add	sp, #116	; 0x74
 800b3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ba:	4b7b      	ldr	r3, [pc, #492]	; (800b5a8 <_vfiprintf_r+0x244>)
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	d101      	bne.n	800b3c4 <_vfiprintf_r+0x60>
 800b3c0:	68b5      	ldr	r5, [r6, #8]
 800b3c2:	e7df      	b.n	800b384 <_vfiprintf_r+0x20>
 800b3c4:	4b79      	ldr	r3, [pc, #484]	; (800b5ac <_vfiprintf_r+0x248>)
 800b3c6:	429d      	cmp	r5, r3
 800b3c8:	bf08      	it	eq
 800b3ca:	68f5      	ldreq	r5, [r6, #12]
 800b3cc:	e7da      	b.n	800b384 <_vfiprintf_r+0x20>
 800b3ce:	89ab      	ldrh	r3, [r5, #12]
 800b3d0:	0598      	lsls	r0, r3, #22
 800b3d2:	d4ed      	bmi.n	800b3b0 <_vfiprintf_r+0x4c>
 800b3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3d6:	f000 fb84 	bl	800bae2 <__retarget_lock_release_recursive>
 800b3da:	e7e9      	b.n	800b3b0 <_vfiprintf_r+0x4c>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e0:	2320      	movs	r3, #32
 800b3e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ea:	2330      	movs	r3, #48	; 0x30
 800b3ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5b0 <_vfiprintf_r+0x24c>
 800b3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3f4:	f04f 0901 	mov.w	r9, #1
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	469a      	mov	sl, r3
 800b3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b400:	b10a      	cbz	r2, 800b406 <_vfiprintf_r+0xa2>
 800b402:	2a25      	cmp	r2, #37	; 0x25
 800b404:	d1f9      	bne.n	800b3fa <_vfiprintf_r+0x96>
 800b406:	ebba 0b04 	subs.w	fp, sl, r4
 800b40a:	d00b      	beq.n	800b424 <_vfiprintf_r+0xc0>
 800b40c:	465b      	mov	r3, fp
 800b40e:	4622      	mov	r2, r4
 800b410:	4629      	mov	r1, r5
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff ff94 	bl	800b340 <__sfputs_r>
 800b418:	3001      	adds	r0, #1
 800b41a:	f000 80aa 	beq.w	800b572 <_vfiprintf_r+0x20e>
 800b41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b420:	445a      	add	r2, fp
 800b422:	9209      	str	r2, [sp, #36]	; 0x24
 800b424:	f89a 3000 	ldrb.w	r3, [sl]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 80a2 	beq.w	800b572 <_vfiprintf_r+0x20e>
 800b42e:	2300      	movs	r3, #0
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b438:	f10a 0a01 	add.w	sl, sl, #1
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	9307      	str	r3, [sp, #28]
 800b440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b444:	931a      	str	r3, [sp, #104]	; 0x68
 800b446:	4654      	mov	r4, sl
 800b448:	2205      	movs	r2, #5
 800b44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44e:	4858      	ldr	r0, [pc, #352]	; (800b5b0 <_vfiprintf_r+0x24c>)
 800b450:	f7f4 fede 	bl	8000210 <memchr>
 800b454:	9a04      	ldr	r2, [sp, #16]
 800b456:	b9d8      	cbnz	r0, 800b490 <_vfiprintf_r+0x12c>
 800b458:	06d1      	lsls	r1, r2, #27
 800b45a:	bf44      	itt	mi
 800b45c:	2320      	movmi	r3, #32
 800b45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b462:	0713      	lsls	r3, r2, #28
 800b464:	bf44      	itt	mi
 800b466:	232b      	movmi	r3, #43	; 0x2b
 800b468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b46c:	f89a 3000 	ldrb.w	r3, [sl]
 800b470:	2b2a      	cmp	r3, #42	; 0x2a
 800b472:	d015      	beq.n	800b4a0 <_vfiprintf_r+0x13c>
 800b474:	9a07      	ldr	r2, [sp, #28]
 800b476:	4654      	mov	r4, sl
 800b478:	2000      	movs	r0, #0
 800b47a:	f04f 0c0a 	mov.w	ip, #10
 800b47e:	4621      	mov	r1, r4
 800b480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b484:	3b30      	subs	r3, #48	; 0x30
 800b486:	2b09      	cmp	r3, #9
 800b488:	d94e      	bls.n	800b528 <_vfiprintf_r+0x1c4>
 800b48a:	b1b0      	cbz	r0, 800b4ba <_vfiprintf_r+0x156>
 800b48c:	9207      	str	r2, [sp, #28]
 800b48e:	e014      	b.n	800b4ba <_vfiprintf_r+0x156>
 800b490:	eba0 0308 	sub.w	r3, r0, r8
 800b494:	fa09 f303 	lsl.w	r3, r9, r3
 800b498:	4313      	orrs	r3, r2
 800b49a:	9304      	str	r3, [sp, #16]
 800b49c:	46a2      	mov	sl, r4
 800b49e:	e7d2      	b.n	800b446 <_vfiprintf_r+0xe2>
 800b4a0:	9b03      	ldr	r3, [sp, #12]
 800b4a2:	1d19      	adds	r1, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	9103      	str	r1, [sp, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	bfbb      	ittet	lt
 800b4ac:	425b      	neglt	r3, r3
 800b4ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b4b2:	9307      	strge	r3, [sp, #28]
 800b4b4:	9307      	strlt	r3, [sp, #28]
 800b4b6:	bfb8      	it	lt
 800b4b8:	9204      	strlt	r2, [sp, #16]
 800b4ba:	7823      	ldrb	r3, [r4, #0]
 800b4bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b4be:	d10c      	bne.n	800b4da <_vfiprintf_r+0x176>
 800b4c0:	7863      	ldrb	r3, [r4, #1]
 800b4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4c4:	d135      	bne.n	800b532 <_vfiprintf_r+0x1ce>
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	9203      	str	r2, [sp, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	bfb8      	it	lt
 800b4d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4d6:	3402      	adds	r4, #2
 800b4d8:	9305      	str	r3, [sp, #20]
 800b4da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5c0 <_vfiprintf_r+0x25c>
 800b4de:	7821      	ldrb	r1, [r4, #0]
 800b4e0:	2203      	movs	r2, #3
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	f7f4 fe94 	bl	8000210 <memchr>
 800b4e8:	b140      	cbz	r0, 800b4fc <_vfiprintf_r+0x198>
 800b4ea:	2340      	movs	r3, #64	; 0x40
 800b4ec:	eba0 000a 	sub.w	r0, r0, sl
 800b4f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4f4:	9b04      	ldr	r3, [sp, #16]
 800b4f6:	4303      	orrs	r3, r0
 800b4f8:	3401      	adds	r4, #1
 800b4fa:	9304      	str	r3, [sp, #16]
 800b4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b500:	482c      	ldr	r0, [pc, #176]	; (800b5b4 <_vfiprintf_r+0x250>)
 800b502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b506:	2206      	movs	r2, #6
 800b508:	f7f4 fe82 	bl	8000210 <memchr>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d03f      	beq.n	800b590 <_vfiprintf_r+0x22c>
 800b510:	4b29      	ldr	r3, [pc, #164]	; (800b5b8 <_vfiprintf_r+0x254>)
 800b512:	bb1b      	cbnz	r3, 800b55c <_vfiprintf_r+0x1f8>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	3307      	adds	r3, #7
 800b518:	f023 0307 	bic.w	r3, r3, #7
 800b51c:	3308      	adds	r3, #8
 800b51e:	9303      	str	r3, [sp, #12]
 800b520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b522:	443b      	add	r3, r7
 800b524:	9309      	str	r3, [sp, #36]	; 0x24
 800b526:	e767      	b.n	800b3f8 <_vfiprintf_r+0x94>
 800b528:	fb0c 3202 	mla	r2, ip, r2, r3
 800b52c:	460c      	mov	r4, r1
 800b52e:	2001      	movs	r0, #1
 800b530:	e7a5      	b.n	800b47e <_vfiprintf_r+0x11a>
 800b532:	2300      	movs	r3, #0
 800b534:	3401      	adds	r4, #1
 800b536:	9305      	str	r3, [sp, #20]
 800b538:	4619      	mov	r1, r3
 800b53a:	f04f 0c0a 	mov.w	ip, #10
 800b53e:	4620      	mov	r0, r4
 800b540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b544:	3a30      	subs	r2, #48	; 0x30
 800b546:	2a09      	cmp	r2, #9
 800b548:	d903      	bls.n	800b552 <_vfiprintf_r+0x1ee>
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0c5      	beq.n	800b4da <_vfiprintf_r+0x176>
 800b54e:	9105      	str	r1, [sp, #20]
 800b550:	e7c3      	b.n	800b4da <_vfiprintf_r+0x176>
 800b552:	fb0c 2101 	mla	r1, ip, r1, r2
 800b556:	4604      	mov	r4, r0
 800b558:	2301      	movs	r3, #1
 800b55a:	e7f0      	b.n	800b53e <_vfiprintf_r+0x1da>
 800b55c:	ab03      	add	r3, sp, #12
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	462a      	mov	r2, r5
 800b562:	4b16      	ldr	r3, [pc, #88]	; (800b5bc <_vfiprintf_r+0x258>)
 800b564:	a904      	add	r1, sp, #16
 800b566:	4630      	mov	r0, r6
 800b568:	f7fd fdd6 	bl	8009118 <_printf_float>
 800b56c:	4607      	mov	r7, r0
 800b56e:	1c78      	adds	r0, r7, #1
 800b570:	d1d6      	bne.n	800b520 <_vfiprintf_r+0x1bc>
 800b572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b574:	07d9      	lsls	r1, r3, #31
 800b576:	d405      	bmi.n	800b584 <_vfiprintf_r+0x220>
 800b578:	89ab      	ldrh	r3, [r5, #12]
 800b57a:	059a      	lsls	r2, r3, #22
 800b57c:	d402      	bmi.n	800b584 <_vfiprintf_r+0x220>
 800b57e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b580:	f000 faaf 	bl	800bae2 <__retarget_lock_release_recursive>
 800b584:	89ab      	ldrh	r3, [r5, #12]
 800b586:	065b      	lsls	r3, r3, #25
 800b588:	f53f af12 	bmi.w	800b3b0 <_vfiprintf_r+0x4c>
 800b58c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b58e:	e711      	b.n	800b3b4 <_vfiprintf_r+0x50>
 800b590:	ab03      	add	r3, sp, #12
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	462a      	mov	r2, r5
 800b596:	4b09      	ldr	r3, [pc, #36]	; (800b5bc <_vfiprintf_r+0x258>)
 800b598:	a904      	add	r1, sp, #16
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7fe f860 	bl	8009660 <_printf_i>
 800b5a0:	e7e4      	b.n	800b56c <_vfiprintf_r+0x208>
 800b5a2:	bf00      	nop
 800b5a4:	0800c184 	.word	0x0800c184
 800b5a8:	0800c1a4 	.word	0x0800c1a4
 800b5ac:	0800c164 	.word	0x0800c164
 800b5b0:	0800c00c 	.word	0x0800c00c
 800b5b4:	0800c016 	.word	0x0800c016
 800b5b8:	08009119 	.word	0x08009119
 800b5bc:	0800b341 	.word	0x0800b341
 800b5c0:	0800c012 	.word	0x0800c012

0800b5c4 <__swbuf_r>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	460e      	mov	r6, r1
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	b118      	cbz	r0, 800b5d6 <__swbuf_r+0x12>
 800b5ce:	6983      	ldr	r3, [r0, #24]
 800b5d0:	b90b      	cbnz	r3, 800b5d6 <__swbuf_r+0x12>
 800b5d2:	f000 f9e7 	bl	800b9a4 <__sinit>
 800b5d6:	4b21      	ldr	r3, [pc, #132]	; (800b65c <__swbuf_r+0x98>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d12b      	bne.n	800b634 <__swbuf_r+0x70>
 800b5dc:	686c      	ldr	r4, [r5, #4]
 800b5de:	69a3      	ldr	r3, [r4, #24]
 800b5e0:	60a3      	str	r3, [r4, #8]
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	071a      	lsls	r2, r3, #28
 800b5e6:	d52f      	bpl.n	800b648 <__swbuf_r+0x84>
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	b36b      	cbz	r3, 800b648 <__swbuf_r+0x84>
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	6820      	ldr	r0, [r4, #0]
 800b5f0:	1ac0      	subs	r0, r0, r3
 800b5f2:	6963      	ldr	r3, [r4, #20]
 800b5f4:	b2f6      	uxtb	r6, r6
 800b5f6:	4283      	cmp	r3, r0
 800b5f8:	4637      	mov	r7, r6
 800b5fa:	dc04      	bgt.n	800b606 <__swbuf_r+0x42>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 f93c 	bl	800b87c <_fflush_r>
 800b604:	bb30      	cbnz	r0, 800b654 <__swbuf_r+0x90>
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	3b01      	subs	r3, #1
 800b60a:	60a3      	str	r3, [r4, #8]
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	6022      	str	r2, [r4, #0]
 800b612:	701e      	strb	r6, [r3, #0]
 800b614:	6963      	ldr	r3, [r4, #20]
 800b616:	3001      	adds	r0, #1
 800b618:	4283      	cmp	r3, r0
 800b61a:	d004      	beq.n	800b626 <__swbuf_r+0x62>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	07db      	lsls	r3, r3, #31
 800b620:	d506      	bpl.n	800b630 <__swbuf_r+0x6c>
 800b622:	2e0a      	cmp	r6, #10
 800b624:	d104      	bne.n	800b630 <__swbuf_r+0x6c>
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	f000 f927 	bl	800b87c <_fflush_r>
 800b62e:	b988      	cbnz	r0, 800b654 <__swbuf_r+0x90>
 800b630:	4638      	mov	r0, r7
 800b632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b634:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <__swbuf_r+0x9c>)
 800b636:	429c      	cmp	r4, r3
 800b638:	d101      	bne.n	800b63e <__swbuf_r+0x7a>
 800b63a:	68ac      	ldr	r4, [r5, #8]
 800b63c:	e7cf      	b.n	800b5de <__swbuf_r+0x1a>
 800b63e:	4b09      	ldr	r3, [pc, #36]	; (800b664 <__swbuf_r+0xa0>)
 800b640:	429c      	cmp	r4, r3
 800b642:	bf08      	it	eq
 800b644:	68ec      	ldreq	r4, [r5, #12]
 800b646:	e7ca      	b.n	800b5de <__swbuf_r+0x1a>
 800b648:	4621      	mov	r1, r4
 800b64a:	4628      	mov	r0, r5
 800b64c:	f000 f81a 	bl	800b684 <__swsetup_r>
 800b650:	2800      	cmp	r0, #0
 800b652:	d0cb      	beq.n	800b5ec <__swbuf_r+0x28>
 800b654:	f04f 37ff 	mov.w	r7, #4294967295
 800b658:	e7ea      	b.n	800b630 <__swbuf_r+0x6c>
 800b65a:	bf00      	nop
 800b65c:	0800c184 	.word	0x0800c184
 800b660:	0800c1a4 	.word	0x0800c1a4
 800b664:	0800c164 	.word	0x0800c164

0800b668 <__ascii_wctomb>:
 800b668:	b149      	cbz	r1, 800b67e <__ascii_wctomb+0x16>
 800b66a:	2aff      	cmp	r2, #255	; 0xff
 800b66c:	bf85      	ittet	hi
 800b66e:	238a      	movhi	r3, #138	; 0x8a
 800b670:	6003      	strhi	r3, [r0, #0]
 800b672:	700a      	strbls	r2, [r1, #0]
 800b674:	f04f 30ff 	movhi.w	r0, #4294967295
 800b678:	bf98      	it	ls
 800b67a:	2001      	movls	r0, #1
 800b67c:	4770      	bx	lr
 800b67e:	4608      	mov	r0, r1
 800b680:	4770      	bx	lr
	...

0800b684 <__swsetup_r>:
 800b684:	4b32      	ldr	r3, [pc, #200]	; (800b750 <__swsetup_r+0xcc>)
 800b686:	b570      	push	{r4, r5, r6, lr}
 800b688:	681d      	ldr	r5, [r3, #0]
 800b68a:	4606      	mov	r6, r0
 800b68c:	460c      	mov	r4, r1
 800b68e:	b125      	cbz	r5, 800b69a <__swsetup_r+0x16>
 800b690:	69ab      	ldr	r3, [r5, #24]
 800b692:	b913      	cbnz	r3, 800b69a <__swsetup_r+0x16>
 800b694:	4628      	mov	r0, r5
 800b696:	f000 f985 	bl	800b9a4 <__sinit>
 800b69a:	4b2e      	ldr	r3, [pc, #184]	; (800b754 <__swsetup_r+0xd0>)
 800b69c:	429c      	cmp	r4, r3
 800b69e:	d10f      	bne.n	800b6c0 <__swsetup_r+0x3c>
 800b6a0:	686c      	ldr	r4, [r5, #4]
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6a8:	0719      	lsls	r1, r3, #28
 800b6aa:	d42c      	bmi.n	800b706 <__swsetup_r+0x82>
 800b6ac:	06dd      	lsls	r5, r3, #27
 800b6ae:	d411      	bmi.n	800b6d4 <__swsetup_r+0x50>
 800b6b0:	2309      	movs	r3, #9
 800b6b2:	6033      	str	r3, [r6, #0]
 800b6b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b6be:	e03e      	b.n	800b73e <__swsetup_r+0xba>
 800b6c0:	4b25      	ldr	r3, [pc, #148]	; (800b758 <__swsetup_r+0xd4>)
 800b6c2:	429c      	cmp	r4, r3
 800b6c4:	d101      	bne.n	800b6ca <__swsetup_r+0x46>
 800b6c6:	68ac      	ldr	r4, [r5, #8]
 800b6c8:	e7eb      	b.n	800b6a2 <__swsetup_r+0x1e>
 800b6ca:	4b24      	ldr	r3, [pc, #144]	; (800b75c <__swsetup_r+0xd8>)
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	bf08      	it	eq
 800b6d0:	68ec      	ldreq	r4, [r5, #12]
 800b6d2:	e7e6      	b.n	800b6a2 <__swsetup_r+0x1e>
 800b6d4:	0758      	lsls	r0, r3, #29
 800b6d6:	d512      	bpl.n	800b6fe <__swsetup_r+0x7a>
 800b6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6da:	b141      	cbz	r1, 800b6ee <__swsetup_r+0x6a>
 800b6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6e0:	4299      	cmp	r1, r3
 800b6e2:	d002      	beq.n	800b6ea <__swsetup_r+0x66>
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff fb31 	bl	800ad4c <_free_r>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6f4:	81a3      	strh	r3, [r4, #12]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	f043 0308 	orr.w	r3, r3, #8
 800b704:	81a3      	strh	r3, [r4, #12]
 800b706:	6923      	ldr	r3, [r4, #16]
 800b708:	b94b      	cbnz	r3, 800b71e <__swsetup_r+0x9a>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b714:	d003      	beq.n	800b71e <__swsetup_r+0x9a>
 800b716:	4621      	mov	r1, r4
 800b718:	4630      	mov	r0, r6
 800b71a:	f000 fa09 	bl	800bb30 <__smakebuf_r>
 800b71e:	89a0      	ldrh	r0, [r4, #12]
 800b720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b724:	f010 0301 	ands.w	r3, r0, #1
 800b728:	d00a      	beq.n	800b740 <__swsetup_r+0xbc>
 800b72a:	2300      	movs	r3, #0
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	6963      	ldr	r3, [r4, #20]
 800b730:	425b      	negs	r3, r3
 800b732:	61a3      	str	r3, [r4, #24]
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	b943      	cbnz	r3, 800b74a <__swsetup_r+0xc6>
 800b738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b73c:	d1ba      	bne.n	800b6b4 <__swsetup_r+0x30>
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	0781      	lsls	r1, r0, #30
 800b742:	bf58      	it	pl
 800b744:	6963      	ldrpl	r3, [r4, #20]
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	e7f4      	b.n	800b734 <__swsetup_r+0xb0>
 800b74a:	2000      	movs	r0, #0
 800b74c:	e7f7      	b.n	800b73e <__swsetup_r+0xba>
 800b74e:	bf00      	nop
 800b750:	20000010 	.word	0x20000010
 800b754:	0800c184 	.word	0x0800c184
 800b758:	0800c1a4 	.word	0x0800c1a4
 800b75c:	0800c164 	.word	0x0800c164

0800b760 <abort>:
 800b760:	b508      	push	{r3, lr}
 800b762:	2006      	movs	r0, #6
 800b764:	f000 fa54 	bl	800bc10 <raise>
 800b768:	2001      	movs	r0, #1
 800b76a:	f7f6 febb 	bl	80024e4 <_exit>
	...

0800b770 <__sflush_r>:
 800b770:	898a      	ldrh	r2, [r1, #12]
 800b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b776:	4605      	mov	r5, r0
 800b778:	0710      	lsls	r0, r2, #28
 800b77a:	460c      	mov	r4, r1
 800b77c:	d458      	bmi.n	800b830 <__sflush_r+0xc0>
 800b77e:	684b      	ldr	r3, [r1, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc05      	bgt.n	800b790 <__sflush_r+0x20>
 800b784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b786:	2b00      	cmp	r3, #0
 800b788:	dc02      	bgt.n	800b790 <__sflush_r+0x20>
 800b78a:	2000      	movs	r0, #0
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b792:	2e00      	cmp	r6, #0
 800b794:	d0f9      	beq.n	800b78a <__sflush_r+0x1a>
 800b796:	2300      	movs	r3, #0
 800b798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b79c:	682f      	ldr	r7, [r5, #0]
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	d032      	beq.n	800b808 <__sflush_r+0x98>
 800b7a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	075a      	lsls	r2, r3, #29
 800b7a8:	d505      	bpl.n	800b7b6 <__sflush_r+0x46>
 800b7aa:	6863      	ldr	r3, [r4, #4]
 800b7ac:	1ac0      	subs	r0, r0, r3
 800b7ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7b0:	b10b      	cbz	r3, 800b7b6 <__sflush_r+0x46>
 800b7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7b4:	1ac0      	subs	r0, r0, r3
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7bc:	6a21      	ldr	r1, [r4, #32]
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b0      	blx	r6
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	d106      	bne.n	800b7d6 <__sflush_r+0x66>
 800b7c8:	6829      	ldr	r1, [r5, #0]
 800b7ca:	291d      	cmp	r1, #29
 800b7cc:	d82c      	bhi.n	800b828 <__sflush_r+0xb8>
 800b7ce:	4a2a      	ldr	r2, [pc, #168]	; (800b878 <__sflush_r+0x108>)
 800b7d0:	40ca      	lsrs	r2, r1
 800b7d2:	07d6      	lsls	r6, r2, #31
 800b7d4:	d528      	bpl.n	800b828 <__sflush_r+0xb8>
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	6062      	str	r2, [r4, #4]
 800b7da:	04d9      	lsls	r1, r3, #19
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	6022      	str	r2, [r4, #0]
 800b7e0:	d504      	bpl.n	800b7ec <__sflush_r+0x7c>
 800b7e2:	1c42      	adds	r2, r0, #1
 800b7e4:	d101      	bne.n	800b7ea <__sflush_r+0x7a>
 800b7e6:	682b      	ldr	r3, [r5, #0]
 800b7e8:	b903      	cbnz	r3, 800b7ec <__sflush_r+0x7c>
 800b7ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ee:	602f      	str	r7, [r5, #0]
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	d0ca      	beq.n	800b78a <__sflush_r+0x1a>
 800b7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f8:	4299      	cmp	r1, r3
 800b7fa:	d002      	beq.n	800b802 <__sflush_r+0x92>
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	f7ff faa5 	bl	800ad4c <_free_r>
 800b802:	2000      	movs	r0, #0
 800b804:	6360      	str	r0, [r4, #52]	; 0x34
 800b806:	e7c1      	b.n	800b78c <__sflush_r+0x1c>
 800b808:	6a21      	ldr	r1, [r4, #32]
 800b80a:	2301      	movs	r3, #1
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	1c41      	adds	r1, r0, #1
 800b812:	d1c7      	bne.n	800b7a4 <__sflush_r+0x34>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0c4      	beq.n	800b7a4 <__sflush_r+0x34>
 800b81a:	2b1d      	cmp	r3, #29
 800b81c:	d001      	beq.n	800b822 <__sflush_r+0xb2>
 800b81e:	2b16      	cmp	r3, #22
 800b820:	d101      	bne.n	800b826 <__sflush_r+0xb6>
 800b822:	602f      	str	r7, [r5, #0]
 800b824:	e7b1      	b.n	800b78a <__sflush_r+0x1a>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	e7ad      	b.n	800b78c <__sflush_r+0x1c>
 800b830:	690f      	ldr	r7, [r1, #16]
 800b832:	2f00      	cmp	r7, #0
 800b834:	d0a9      	beq.n	800b78a <__sflush_r+0x1a>
 800b836:	0793      	lsls	r3, r2, #30
 800b838:	680e      	ldr	r6, [r1, #0]
 800b83a:	bf08      	it	eq
 800b83c:	694b      	ldreq	r3, [r1, #20]
 800b83e:	600f      	str	r7, [r1, #0]
 800b840:	bf18      	it	ne
 800b842:	2300      	movne	r3, #0
 800b844:	eba6 0807 	sub.w	r8, r6, r7
 800b848:	608b      	str	r3, [r1, #8]
 800b84a:	f1b8 0f00 	cmp.w	r8, #0
 800b84e:	dd9c      	ble.n	800b78a <__sflush_r+0x1a>
 800b850:	6a21      	ldr	r1, [r4, #32]
 800b852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b854:	4643      	mov	r3, r8
 800b856:	463a      	mov	r2, r7
 800b858:	4628      	mov	r0, r5
 800b85a:	47b0      	blx	r6
 800b85c:	2800      	cmp	r0, #0
 800b85e:	dc06      	bgt.n	800b86e <__sflush_r+0xfe>
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	f04f 30ff 	mov.w	r0, #4294967295
 800b86c:	e78e      	b.n	800b78c <__sflush_r+0x1c>
 800b86e:	4407      	add	r7, r0
 800b870:	eba8 0800 	sub.w	r8, r8, r0
 800b874:	e7e9      	b.n	800b84a <__sflush_r+0xda>
 800b876:	bf00      	nop
 800b878:	20400001 	.word	0x20400001

0800b87c <_fflush_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	690b      	ldr	r3, [r1, #16]
 800b880:	4605      	mov	r5, r0
 800b882:	460c      	mov	r4, r1
 800b884:	b913      	cbnz	r3, 800b88c <_fflush_r+0x10>
 800b886:	2500      	movs	r5, #0
 800b888:	4628      	mov	r0, r5
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	b118      	cbz	r0, 800b896 <_fflush_r+0x1a>
 800b88e:	6983      	ldr	r3, [r0, #24]
 800b890:	b90b      	cbnz	r3, 800b896 <_fflush_r+0x1a>
 800b892:	f000 f887 	bl	800b9a4 <__sinit>
 800b896:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <_fflush_r+0x6c>)
 800b898:	429c      	cmp	r4, r3
 800b89a:	d11b      	bne.n	800b8d4 <_fflush_r+0x58>
 800b89c:	686c      	ldr	r4, [r5, #4]
 800b89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0ef      	beq.n	800b886 <_fflush_r+0xa>
 800b8a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8a8:	07d0      	lsls	r0, r2, #31
 800b8aa:	d404      	bmi.n	800b8b6 <_fflush_r+0x3a>
 800b8ac:	0599      	lsls	r1, r3, #22
 800b8ae:	d402      	bmi.n	800b8b6 <_fflush_r+0x3a>
 800b8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8b2:	f000 f915 	bl	800bae0 <__retarget_lock_acquire_recursive>
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	f7ff ff59 	bl	800b770 <__sflush_r>
 800b8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8c0:	07da      	lsls	r2, r3, #31
 800b8c2:	4605      	mov	r5, r0
 800b8c4:	d4e0      	bmi.n	800b888 <_fflush_r+0xc>
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	059b      	lsls	r3, r3, #22
 800b8ca:	d4dd      	bmi.n	800b888 <_fflush_r+0xc>
 800b8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ce:	f000 f908 	bl	800bae2 <__retarget_lock_release_recursive>
 800b8d2:	e7d9      	b.n	800b888 <_fflush_r+0xc>
 800b8d4:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <_fflush_r+0x70>)
 800b8d6:	429c      	cmp	r4, r3
 800b8d8:	d101      	bne.n	800b8de <_fflush_r+0x62>
 800b8da:	68ac      	ldr	r4, [r5, #8]
 800b8dc:	e7df      	b.n	800b89e <_fflush_r+0x22>
 800b8de:	4b04      	ldr	r3, [pc, #16]	; (800b8f0 <_fflush_r+0x74>)
 800b8e0:	429c      	cmp	r4, r3
 800b8e2:	bf08      	it	eq
 800b8e4:	68ec      	ldreq	r4, [r5, #12]
 800b8e6:	e7da      	b.n	800b89e <_fflush_r+0x22>
 800b8e8:	0800c184 	.word	0x0800c184
 800b8ec:	0800c1a4 	.word	0x0800c1a4
 800b8f0:	0800c164 	.word	0x0800c164

0800b8f4 <std>:
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	b510      	push	{r4, lr}
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b8fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b902:	6083      	str	r3, [r0, #8]
 800b904:	8181      	strh	r1, [r0, #12]
 800b906:	6643      	str	r3, [r0, #100]	; 0x64
 800b908:	81c2      	strh	r2, [r0, #14]
 800b90a:	6183      	str	r3, [r0, #24]
 800b90c:	4619      	mov	r1, r3
 800b90e:	2208      	movs	r2, #8
 800b910:	305c      	adds	r0, #92	; 0x5c
 800b912:	f7fd fb59 	bl	8008fc8 <memset>
 800b916:	4b05      	ldr	r3, [pc, #20]	; (800b92c <std+0x38>)
 800b918:	6263      	str	r3, [r4, #36]	; 0x24
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <std+0x3c>)
 800b91c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b91e:	4b05      	ldr	r3, [pc, #20]	; (800b934 <std+0x40>)
 800b920:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b922:	4b05      	ldr	r3, [pc, #20]	; (800b938 <std+0x44>)
 800b924:	6224      	str	r4, [r4, #32]
 800b926:	6323      	str	r3, [r4, #48]	; 0x30
 800b928:	bd10      	pop	{r4, pc}
 800b92a:	bf00      	nop
 800b92c:	0800bc49 	.word	0x0800bc49
 800b930:	0800bc6b 	.word	0x0800bc6b
 800b934:	0800bca3 	.word	0x0800bca3
 800b938:	0800bcc7 	.word	0x0800bcc7

0800b93c <_cleanup_r>:
 800b93c:	4901      	ldr	r1, [pc, #4]	; (800b944 <_cleanup_r+0x8>)
 800b93e:	f000 b8af 	b.w	800baa0 <_fwalk_reent>
 800b942:	bf00      	nop
 800b944:	0800b87d 	.word	0x0800b87d

0800b948 <__sfmoreglue>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	2268      	movs	r2, #104	; 0x68
 800b94c:	1e4d      	subs	r5, r1, #1
 800b94e:	4355      	muls	r5, r2
 800b950:	460e      	mov	r6, r1
 800b952:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b956:	f7ff fa65 	bl	800ae24 <_malloc_r>
 800b95a:	4604      	mov	r4, r0
 800b95c:	b140      	cbz	r0, 800b970 <__sfmoreglue+0x28>
 800b95e:	2100      	movs	r1, #0
 800b960:	e9c0 1600 	strd	r1, r6, [r0]
 800b964:	300c      	adds	r0, #12
 800b966:	60a0      	str	r0, [r4, #8]
 800b968:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b96c:	f7fd fb2c 	bl	8008fc8 <memset>
 800b970:	4620      	mov	r0, r4
 800b972:	bd70      	pop	{r4, r5, r6, pc}

0800b974 <__sfp_lock_acquire>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__sfp_lock_acquire+0x8>)
 800b976:	f000 b8b3 	b.w	800bae0 <__retarget_lock_acquire_recursive>
 800b97a:	bf00      	nop
 800b97c:	20006659 	.word	0x20006659

0800b980 <__sfp_lock_release>:
 800b980:	4801      	ldr	r0, [pc, #4]	; (800b988 <__sfp_lock_release+0x8>)
 800b982:	f000 b8ae 	b.w	800bae2 <__retarget_lock_release_recursive>
 800b986:	bf00      	nop
 800b988:	20006659 	.word	0x20006659

0800b98c <__sinit_lock_acquire>:
 800b98c:	4801      	ldr	r0, [pc, #4]	; (800b994 <__sinit_lock_acquire+0x8>)
 800b98e:	f000 b8a7 	b.w	800bae0 <__retarget_lock_acquire_recursive>
 800b992:	bf00      	nop
 800b994:	2000665a 	.word	0x2000665a

0800b998 <__sinit_lock_release>:
 800b998:	4801      	ldr	r0, [pc, #4]	; (800b9a0 <__sinit_lock_release+0x8>)
 800b99a:	f000 b8a2 	b.w	800bae2 <__retarget_lock_release_recursive>
 800b99e:	bf00      	nop
 800b9a0:	2000665a 	.word	0x2000665a

0800b9a4 <__sinit>:
 800b9a4:	b510      	push	{r4, lr}
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	f7ff fff0 	bl	800b98c <__sinit_lock_acquire>
 800b9ac:	69a3      	ldr	r3, [r4, #24]
 800b9ae:	b11b      	cbz	r3, 800b9b8 <__sinit+0x14>
 800b9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b4:	f7ff bff0 	b.w	800b998 <__sinit_lock_release>
 800b9b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b9be:	4b13      	ldr	r3, [pc, #76]	; (800ba0c <__sinit+0x68>)
 800b9c0:	4a13      	ldr	r2, [pc, #76]	; (800ba10 <__sinit+0x6c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9c6:	42a3      	cmp	r3, r4
 800b9c8:	bf04      	itt	eq
 800b9ca:	2301      	moveq	r3, #1
 800b9cc:	61a3      	streq	r3, [r4, #24]
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 f820 	bl	800ba14 <__sfp>
 800b9d4:	6060      	str	r0, [r4, #4]
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f000 f81c 	bl	800ba14 <__sfp>
 800b9dc:	60a0      	str	r0, [r4, #8]
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 f818 	bl	800ba14 <__sfp>
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	60e0      	str	r0, [r4, #12]
 800b9e8:	2104      	movs	r1, #4
 800b9ea:	6860      	ldr	r0, [r4, #4]
 800b9ec:	f7ff ff82 	bl	800b8f4 <std>
 800b9f0:	68a0      	ldr	r0, [r4, #8]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	2109      	movs	r1, #9
 800b9f6:	f7ff ff7d 	bl	800b8f4 <std>
 800b9fa:	68e0      	ldr	r0, [r4, #12]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	2112      	movs	r1, #18
 800ba00:	f7ff ff78 	bl	800b8f4 <std>
 800ba04:	2301      	movs	r3, #1
 800ba06:	61a3      	str	r3, [r4, #24]
 800ba08:	e7d2      	b.n	800b9b0 <__sinit+0xc>
 800ba0a:	bf00      	nop
 800ba0c:	0800bde8 	.word	0x0800bde8
 800ba10:	0800b93d 	.word	0x0800b93d

0800ba14 <__sfp>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	4607      	mov	r7, r0
 800ba18:	f7ff ffac 	bl	800b974 <__sfp_lock_acquire>
 800ba1c:	4b1e      	ldr	r3, [pc, #120]	; (800ba98 <__sfp+0x84>)
 800ba1e:	681e      	ldr	r6, [r3, #0]
 800ba20:	69b3      	ldr	r3, [r6, #24]
 800ba22:	b913      	cbnz	r3, 800ba2a <__sfp+0x16>
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff ffbd 	bl	800b9a4 <__sinit>
 800ba2a:	3648      	adds	r6, #72	; 0x48
 800ba2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	d503      	bpl.n	800ba3c <__sfp+0x28>
 800ba34:	6833      	ldr	r3, [r6, #0]
 800ba36:	b30b      	cbz	r3, 800ba7c <__sfp+0x68>
 800ba38:	6836      	ldr	r6, [r6, #0]
 800ba3a:	e7f7      	b.n	800ba2c <__sfp+0x18>
 800ba3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba40:	b9d5      	cbnz	r5, 800ba78 <__sfp+0x64>
 800ba42:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <__sfp+0x88>)
 800ba44:	60e3      	str	r3, [r4, #12]
 800ba46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ba4c:	f000 f847 	bl	800bade <__retarget_lock_init_recursive>
 800ba50:	f7ff ff96 	bl	800b980 <__sfp_lock_release>
 800ba54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba5c:	6025      	str	r5, [r4, #0]
 800ba5e:	61a5      	str	r5, [r4, #24]
 800ba60:	2208      	movs	r2, #8
 800ba62:	4629      	mov	r1, r5
 800ba64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba68:	f7fd faae 	bl	8008fc8 <memset>
 800ba6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba74:	4620      	mov	r0, r4
 800ba76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba78:	3468      	adds	r4, #104	; 0x68
 800ba7a:	e7d9      	b.n	800ba30 <__sfp+0x1c>
 800ba7c:	2104      	movs	r1, #4
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f7ff ff62 	bl	800b948 <__sfmoreglue>
 800ba84:	4604      	mov	r4, r0
 800ba86:	6030      	str	r0, [r6, #0]
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d1d5      	bne.n	800ba38 <__sfp+0x24>
 800ba8c:	f7ff ff78 	bl	800b980 <__sfp_lock_release>
 800ba90:	230c      	movs	r3, #12
 800ba92:	603b      	str	r3, [r7, #0]
 800ba94:	e7ee      	b.n	800ba74 <__sfp+0x60>
 800ba96:	bf00      	nop
 800ba98:	0800bde8 	.word	0x0800bde8
 800ba9c:	ffff0001 	.word	0xffff0001

0800baa0 <_fwalk_reent>:
 800baa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa4:	4606      	mov	r6, r0
 800baa6:	4688      	mov	r8, r1
 800baa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800baac:	2700      	movs	r7, #0
 800baae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bab2:	f1b9 0901 	subs.w	r9, r9, #1
 800bab6:	d505      	bpl.n	800bac4 <_fwalk_reent+0x24>
 800bab8:	6824      	ldr	r4, [r4, #0]
 800baba:	2c00      	cmp	r4, #0
 800babc:	d1f7      	bne.n	800baae <_fwalk_reent+0xe>
 800babe:	4638      	mov	r0, r7
 800bac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac4:	89ab      	ldrh	r3, [r5, #12]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d907      	bls.n	800bada <_fwalk_reent+0x3a>
 800baca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bace:	3301      	adds	r3, #1
 800bad0:	d003      	beq.n	800bada <_fwalk_reent+0x3a>
 800bad2:	4629      	mov	r1, r5
 800bad4:	4630      	mov	r0, r6
 800bad6:	47c0      	blx	r8
 800bad8:	4307      	orrs	r7, r0
 800bada:	3568      	adds	r5, #104	; 0x68
 800badc:	e7e9      	b.n	800bab2 <_fwalk_reent+0x12>

0800bade <__retarget_lock_init_recursive>:
 800bade:	4770      	bx	lr

0800bae0 <__retarget_lock_acquire_recursive>:
 800bae0:	4770      	bx	lr

0800bae2 <__retarget_lock_release_recursive>:
 800bae2:	4770      	bx	lr

0800bae4 <__swhatbuf_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	460e      	mov	r6, r1
 800bae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baec:	2900      	cmp	r1, #0
 800baee:	b096      	sub	sp, #88	; 0x58
 800baf0:	4614      	mov	r4, r2
 800baf2:	461d      	mov	r5, r3
 800baf4:	da08      	bge.n	800bb08 <__swhatbuf_r+0x24>
 800baf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	061a      	lsls	r2, r3, #24
 800bb00:	d410      	bmi.n	800bb24 <__swhatbuf_r+0x40>
 800bb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb06:	e00e      	b.n	800bb26 <__swhatbuf_r+0x42>
 800bb08:	466a      	mov	r2, sp
 800bb0a:	f000 f903 	bl	800bd14 <_fstat_r>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	dbf1      	blt.n	800baf6 <__swhatbuf_r+0x12>
 800bb12:	9a01      	ldr	r2, [sp, #4]
 800bb14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb1c:	425a      	negs	r2, r3
 800bb1e:	415a      	adcs	r2, r3
 800bb20:	602a      	str	r2, [r5, #0]
 800bb22:	e7ee      	b.n	800bb02 <__swhatbuf_r+0x1e>
 800bb24:	2340      	movs	r3, #64	; 0x40
 800bb26:	2000      	movs	r0, #0
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	b016      	add	sp, #88	; 0x58
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb30 <__smakebuf_r>:
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb34:	079d      	lsls	r5, r3, #30
 800bb36:	4606      	mov	r6, r0
 800bb38:	460c      	mov	r4, r1
 800bb3a:	d507      	bpl.n	800bb4c <__smakebuf_r+0x1c>
 800bb3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	2301      	movs	r3, #1
 800bb46:	6163      	str	r3, [r4, #20]
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
 800bb4c:	ab01      	add	r3, sp, #4
 800bb4e:	466a      	mov	r2, sp
 800bb50:	f7ff ffc8 	bl	800bae4 <__swhatbuf_r>
 800bb54:	9900      	ldr	r1, [sp, #0]
 800bb56:	4605      	mov	r5, r0
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7ff f963 	bl	800ae24 <_malloc_r>
 800bb5e:	b948      	cbnz	r0, 800bb74 <__smakebuf_r+0x44>
 800bb60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d4ef      	bmi.n	800bb48 <__smakebuf_r+0x18>
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	f043 0302 	orr.w	r3, r3, #2
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	e7e3      	b.n	800bb3c <__smakebuf_r+0xc>
 800bb74:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <__smakebuf_r+0x7c>)
 800bb76:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	6163      	str	r3, [r4, #20]
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	6120      	str	r0, [r4, #16]
 800bb8a:	b15b      	cbz	r3, 800bba4 <__smakebuf_r+0x74>
 800bb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb90:	4630      	mov	r0, r6
 800bb92:	f000 f8d1 	bl	800bd38 <_isatty_r>
 800bb96:	b128      	cbz	r0, 800bba4 <__smakebuf_r+0x74>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	89a0      	ldrh	r0, [r4, #12]
 800bba6:	4305      	orrs	r5, r0
 800bba8:	81a5      	strh	r5, [r4, #12]
 800bbaa:	e7cd      	b.n	800bb48 <__smakebuf_r+0x18>
 800bbac:	0800b93d 	.word	0x0800b93d

0800bbb0 <_malloc_usable_size_r>:
 800bbb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb4:	1f18      	subs	r0, r3, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	bfbc      	itt	lt
 800bbba:	580b      	ldrlt	r3, [r1, r0]
 800bbbc:	18c0      	addlt	r0, r0, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_raise_r>:
 800bbc0:	291f      	cmp	r1, #31
 800bbc2:	b538      	push	{r3, r4, r5, lr}
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	d904      	bls.n	800bbd4 <_raise_r+0x14>
 800bbca:	2316      	movs	r3, #22
 800bbcc:	6003      	str	r3, [r0, #0]
 800bbce:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbd6:	b112      	cbz	r2, 800bbde <_raise_r+0x1e>
 800bbd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbdc:	b94b      	cbnz	r3, 800bbf2 <_raise_r+0x32>
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 f830 	bl	800bc44 <_getpid_r>
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	4620      	mov	r0, r4
 800bbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbee:	f000 b817 	b.w	800bc20 <_kill_r>
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d00a      	beq.n	800bc0c <_raise_r+0x4c>
 800bbf6:	1c59      	adds	r1, r3, #1
 800bbf8:	d103      	bne.n	800bc02 <_raise_r+0x42>
 800bbfa:	2316      	movs	r3, #22
 800bbfc:	6003      	str	r3, [r0, #0]
 800bbfe:	2001      	movs	r0, #1
 800bc00:	e7e7      	b.n	800bbd2 <_raise_r+0x12>
 800bc02:	2400      	movs	r4, #0
 800bc04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc08:	4628      	mov	r0, r5
 800bc0a:	4798      	blx	r3
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	e7e0      	b.n	800bbd2 <_raise_r+0x12>

0800bc10 <raise>:
 800bc10:	4b02      	ldr	r3, [pc, #8]	; (800bc1c <raise+0xc>)
 800bc12:	4601      	mov	r1, r0
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	f7ff bfd3 	b.w	800bbc0 <_raise_r>
 800bc1a:	bf00      	nop
 800bc1c:	20000010 	.word	0x20000010

0800bc20 <_kill_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	; (800bc40 <_kill_r+0x20>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	f7f6 fc49 	bl	80024c4 <_kill>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	d102      	bne.n	800bc3c <_kill_r+0x1c>
 800bc36:	682b      	ldr	r3, [r5, #0]
 800bc38:	b103      	cbz	r3, 800bc3c <_kill_r+0x1c>
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	bd38      	pop	{r3, r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	20006654 	.word	0x20006654

0800bc44 <_getpid_r>:
 800bc44:	f7f6 bc36 	b.w	80024b4 <_getpid>

0800bc48 <__sread>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc50:	f000 f894 	bl	800bd7c <_read_r>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	bfab      	itete	ge
 800bc58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc5c:	181b      	addge	r3, r3, r0
 800bc5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc62:	bfac      	ite	ge
 800bc64:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc66:	81a3      	strhlt	r3, [r4, #12]
 800bc68:	bd10      	pop	{r4, pc}

0800bc6a <__swrite>:
 800bc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6e:	461f      	mov	r7, r3
 800bc70:	898b      	ldrh	r3, [r1, #12]
 800bc72:	05db      	lsls	r3, r3, #23
 800bc74:	4605      	mov	r5, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4616      	mov	r6, r2
 800bc7a:	d505      	bpl.n	800bc88 <__swrite+0x1e>
 800bc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc80:	2302      	movs	r3, #2
 800bc82:	2200      	movs	r2, #0
 800bc84:	f000 f868 	bl	800bd58 <_lseek_r>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	4632      	mov	r2, r6
 800bc96:	463b      	mov	r3, r7
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	f000 b817 	b.w	800bcd0 <_write_r>

0800bca2 <__sseek>:
 800bca2:	b510      	push	{r4, lr}
 800bca4:	460c      	mov	r4, r1
 800bca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcaa:	f000 f855 	bl	800bd58 <_lseek_r>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	bf15      	itete	ne
 800bcb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcbe:	81a3      	strheq	r3, [r4, #12]
 800bcc0:	bf18      	it	ne
 800bcc2:	81a3      	strhne	r3, [r4, #12]
 800bcc4:	bd10      	pop	{r4, pc}

0800bcc6 <__sclose>:
 800bcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcca:	f000 b813 	b.w	800bcf4 <_close_r>
	...

0800bcd0 <_write_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	; (800bcf0 <_write_r+0x20>)
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	4611      	mov	r1, r2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	602a      	str	r2, [r5, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f7f6 fc27 	bl	8002532 <_write>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_write_r+0x1e>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_write_r+0x1e>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	20006654 	.word	0x20006654

0800bcf4 <_close_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d06      	ldr	r5, [pc, #24]	; (800bd10 <_close_r+0x1c>)
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	602b      	str	r3, [r5, #0]
 800bd00:	f7f6 fc33 	bl	800256a <_close>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_close_r+0x1a>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_close_r+0x1a>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20006654 	.word	0x20006654

0800bd14 <_fstat_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d07      	ldr	r5, [pc, #28]	; (800bd34 <_fstat_r+0x20>)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	4611      	mov	r1, r2
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	f7f6 fc2e 	bl	8002582 <_fstat>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	d102      	bne.n	800bd30 <_fstat_r+0x1c>
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	b103      	cbz	r3, 800bd30 <_fstat_r+0x1c>
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	bd38      	pop	{r3, r4, r5, pc}
 800bd32:	bf00      	nop
 800bd34:	20006654 	.word	0x20006654

0800bd38 <_isatty_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d06      	ldr	r5, [pc, #24]	; (800bd54 <_isatty_r+0x1c>)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4604      	mov	r4, r0
 800bd40:	4608      	mov	r0, r1
 800bd42:	602b      	str	r3, [r5, #0]
 800bd44:	f7f6 fc2d 	bl	80025a2 <_isatty>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_isatty_r+0x1a>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_isatty_r+0x1a>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20006654 	.word	0x20006654

0800bd58 <_lseek_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4d07      	ldr	r5, [pc, #28]	; (800bd78 <_lseek_r+0x20>)
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	4608      	mov	r0, r1
 800bd60:	4611      	mov	r1, r2
 800bd62:	2200      	movs	r2, #0
 800bd64:	602a      	str	r2, [r5, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	f7f6 fc26 	bl	80025b8 <_lseek>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d102      	bne.n	800bd76 <_lseek_r+0x1e>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	b103      	cbz	r3, 800bd76 <_lseek_r+0x1e>
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
 800bd78:	20006654 	.word	0x20006654

0800bd7c <_read_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	; (800bd9c <_read_r+0x20>)
 800bd80:	4604      	mov	r4, r0
 800bd82:	4608      	mov	r0, r1
 800bd84:	4611      	mov	r1, r2
 800bd86:	2200      	movs	r2, #0
 800bd88:	602a      	str	r2, [r5, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	f7f6 fbb4 	bl	80024f8 <_read>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_read_r+0x1e>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_read_r+0x1e>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	20006654 	.word	0x20006654

0800bda0 <_init>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	bf00      	nop
 800bda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda6:	bc08      	pop	{r3}
 800bda8:	469e      	mov	lr, r3
 800bdaa:	4770      	bx	lr

0800bdac <_fini>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	bf00      	nop
 800bdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb2:	bc08      	pop	{r3}
 800bdb4:	469e      	mov	lr, r3
 800bdb6:	4770      	bx	lr
