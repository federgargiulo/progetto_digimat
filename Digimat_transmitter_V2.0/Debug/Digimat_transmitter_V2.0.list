
Digimat_transmitter_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08011e60  08011e60  00021e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012474  08012474  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08012474  08012474  00022474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801247c  0801247c  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801247c  0801247c  0002247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012480  08012480  00022480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08012484  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000370  080127f4  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  080127f4  00030ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000449b3  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c15  00000000  00000000  00074d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003710  00000000  00000000  0007a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000034f8  00000000  00000000  0007e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f916  00000000  00000000  00081570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003176b  00000000  00000000  000a0e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af2fb  00000000  00000000  000d25f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001818ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001001c  00000000  00000000  0018193c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011e44 	.word	0x08011e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	08011e44 	.word	0x08011e44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_BlueNRG_MS_Init>:
	PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000ec2:	4a73      	ldr	r2, [pc, #460]	; (8001090 <MX_BlueNRG_MS_Init+0x1d4>)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ecc:	6018      	str	r0, [r3, #0]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	8019      	strh	r1, [r3, #0]
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000ed2:	4a70      	ldr	r2, [pc, #448]	; (8001094 <MX_BlueNRG_MS_Init+0x1d8>)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000edc:	6018      	str	r0, [r3, #0]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 8000ee2:	f000 f8fd 	bl	80010e0 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f009 f8dc 	bl	800a0a4 <BSP_PB_GetState>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b69      	ldr	r3, [pc, #420]	; (8001098 <MX_BlueNRG_MS_Init+0x1dc>)
 8000ef2:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4869      	ldr	r0, [pc, #420]	; (800109c <MX_BlueNRG_MS_Init+0x1e0>)
 8000ef8:	f00d fc84 	bl	800e804 <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8000efc:	1cba      	adds	r2, r7, #2
 8000efe:	1d7b      	adds	r3, r7, #5
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00d faf2 	bl	800e4ec <getBlueNRGVersion>
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
	 * command after reset otherwise it will fail.
	 */
	hci_reset();
 8000f08:	f00d fb34 	bl	800e574 <hci_reset>

	HAL_Delay(100);
 8000f0c:	2064      	movs	r0, #100	; 0x64
 8000f0e:	f009 fa6d 	bl	800a3ec <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	4619      	mov	r1, r3
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4861      	ldr	r0, [pc, #388]	; (80010a0 <MX_BlueNRG_MS_Init+0x1e4>)
 8000f1c:	f00e fed6 	bl	800fccc <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	2b30      	cmp	r3, #48	; 0x30
 8000f24:	d902      	bls.n	8000f2c <MX_BlueNRG_MS_Init+0x70>
		bnrg_expansion_board = IDB05A1;
 8000f26:	4b5f      	ldr	r3, [pc, #380]	; (80010a4 <MX_BlueNRG_MS_Init+0x1e8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
	}

	if (BLE_Role == CLIENT) {
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <MX_BlueNRG_MS_Init+0x1ec>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <MX_BlueNRG_MS_Init+0x8c>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	f107 021c 	add.w	r2, r7, #28
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	6018      	str	r0, [r3, #0]
 8000f42:	3304      	adds	r3, #4
 8000f44:	8019      	strh	r1, [r3, #0]
 8000f46:	e008      	b.n	8000f5a <MX_BlueNRG_MS_Init+0x9e>
	} else {
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	f107 0214 	add.w	r2, r7, #20
 8000f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f54:	6018      	str	r0, [r3, #0]
 8000f56:	3304      	adds	r3, #4
 8000f58:	8019      	strh	r1, [r3, #0]
	}

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2106      	movs	r1, #6
 8000f62:	2000      	movs	r0, #0
 8000f64:	f00d fa2c 	bl	800e3c0 <aci_hal_write_config_data>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
			CONFIG_DATA_PUBADDR_LEN,
			bdaddr);
	if (ret) {
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <MX_BlueNRG_MS_Init+0xbe>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f74:	484d      	ldr	r0, [pc, #308]	; (80010ac <MX_BlueNRG_MS_Init+0x1f0>)
 8000f76:	f00e fea9 	bl	800fccc <iprintf>
	}

	ret = aci_gatt_init();
 8000f7a:	f00c fecc 	bl	800dd16 <aci_gatt_init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	if (ret) {
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <MX_BlueNRG_MS_Init+0xd2>
		printf("GATT_Init failed.\n");
 8000f88:	4849      	ldr	r0, [pc, #292]	; (80010b0 <MX_BlueNRG_MS_Init+0x1f4>)
 8000f8a:	f00e ff3b 	bl	800fe04 <puts>
	}

	if (BLE_Role == SERVER) {
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_BlueNRG_MS_Init+0x1ec>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d11e      	bne.n	8000fd4 <MX_BlueNRG_MS_Init+0x118>
		if (bnrg_expansion_board == IDB05A1) {
 8000f96:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <MX_BlueNRG_MS_Init+0x1e8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d10f      	bne.n	8000fbe <MX_BlueNRG_MS_Init+0x102>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000f9e:	f107 020a 	add.w	r2, r7, #10
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4613      	mov	r3, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f00c fc80 	bl	800d8b8 <aci_gap_init_IDB05A1>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	e028      	b.n	8001010 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	f107 010a 	add.w	r1, r7, #10
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f00c fcc5 	bl	800d958 <aci_gap_init_IDB04A1>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd2:	e01d      	b.n	8001010 <MX_BlueNRG_MS_Init+0x154>
		}
	}
	else {
		if (bnrg_expansion_board == IDB05A1) {
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <MX_BlueNRG_MS_Init+0x1e8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10f      	bne.n	8000ffc <MX_BlueNRG_MS_Init+0x140>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fdc:	f107 020a 	add.w	r2, r7, #10
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	2207      	movs	r2, #7
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2004      	movs	r0, #4
 8000ff2:	f00c fc61 	bl	800d8b8 <aci_gap_init_IDB05A1>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	e009      	b.n	8001010 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	f107 0208 	add.w	r2, r7, #8
 8001002:	f107 010a 	add.w	r1, r7, #10
 8001006:	2003      	movs	r0, #3
 8001008:	f00c fca6 	bl	800d958 <aci_gap_init_IDB04A1>
 800100c:	4603      	mov	r3, r0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	if (ret != BLE_STATUS_SUCCESS) {
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <MX_BlueNRG_MS_Init+0x160>
		printf("GAP_Init failed.\n");
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <MX_BlueNRG_MS_Init+0x1f8>)
 8001018:	f00e fef4 	bl	800fe04 <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800101c:	2301      	movs	r3, #1
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <MX_BlueNRG_MS_Init+0x1fc>)
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2300      	movs	r3, #0
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2310      	movs	r3, #16
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2307      	movs	r3, #7
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00c fdc4 	bl	800dbc0 <aci_gap_set_auth_requirement>
 8001038:	4603      	mov	r3, r0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
			7,
			16,
			USE_FIXED_PIN_FOR_PAIRING,
			123456,
			BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <MX_BlueNRG_MS_Init+0x18c>
		printf("BLE Stack Initialized.\n");
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <MX_BlueNRG_MS_Init+0x200>)
 8001044:	f00e fede 	bl	800fe04 <puts>
	}

	if (BLE_Role == SERVER) {
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_BlueNRG_MS_Init+0x1ec>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d111      	bne.n	8001074 <MX_BlueNRG_MS_Init+0x1b8>
		printf("SERVER: BLE Stack Initialized\n");
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <MX_BlueNRG_MS_Init+0x204>)
 8001052:	f00e fed7 	bl	800fe04 <puts>
		ret = Add_Sample_Service();
 8001056:	f000 f929 	bl	80012ac <Add_Sample_Service>
 800105a:	4603      	mov	r3, r0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

		if (ret == BLE_STATUS_SUCCESS)
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <MX_BlueNRG_MS_Init+0x1b0>
			printf("Service added successfully.\n");
 8001064:	4817      	ldr	r0, [pc, #92]	; (80010c4 <MX_BlueNRG_MS_Init+0x208>)
 8001066:	f00e fecd 	bl	800fe04 <puts>
 800106a:	e006      	b.n	800107a <MX_BlueNRG_MS_Init+0x1be>
		else
			printf("Error while adding service.\n");
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <MX_BlueNRG_MS_Init+0x20c>)
 800106e:	f00e fec9 	bl	800fe04 <puts>
 8001072:	e002      	b.n	800107a <MX_BlueNRG_MS_Init+0x1be>

	} else {
		printf("CLIENT: BLE Stack Initialized\n");
 8001074:	4815      	ldr	r0, [pc, #84]	; (80010cc <MX_BlueNRG_MS_Init+0x210>)
 8001076:	f00e fec5 	bl	800fe04 <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 800107a:	2104      	movs	r1, #4
 800107c:	2001      	movs	r0, #1
 800107e:	f00d fa04 	bl	800e48a <aci_hal_set_tx_power_level>
 8001082:	4603      	mov	r3, r0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	08011f4c 	.word	0x08011f4c
 8001094:	08011f54 	.word	0x08011f54
 8001098:	20000000 	.word	0x20000000
 800109c:	08001755 	.word	0x08001755
 80010a0:	08011e60 	.word	0x08011e60
 80010a4:	2000038c 	.word	0x2000038c
 80010a8:	2000038e 	.word	0x2000038e
 80010ac:	08011e74 	.word	0x08011e74
 80010b0:	08011e94 	.word	0x08011e94
 80010b4:	08011ea8 	.word	0x08011ea8
 80010b8:	0001e240 	.word	0x0001e240
 80010bc:	08011ebc 	.word	0x08011ebc
 80010c0:	08011ed4 	.word	0x08011ed4
 80010c4:	08011ef4 	.word	0x08011ef4
 80010c8:	08011f10 	.word	0x08011f10
 80010cc:	08011f2c 	.word	0x08011f2c

080010d0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	/* USER CODE END BlueNRG_MS_Process_PreTreatment */

	User_Process();
 80010d4:	f000 f812 	bl	80010fc <User_Process>
	hci_user_evt_proc();
 80010d8:	f00d fd10 	bl	800eafc <hci_user_evt_proc>

	/* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

	/* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010e4:	2101      	movs	r1, #1
 80010e6:	2000      	movs	r0, #0
 80010e8:	f008 ff88 	bl	8009ffc <BSP_PB_Init>
	BSP_LED_Init(LED2);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f008 feef 	bl	8009ed0 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f009 f838 	bl	800a168 <BSP_COM_Init>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	b08f      	sub	sp, #60	; 0x3c
 8001100:	af06      	add	r7, sp, #24
	if (set_connectable)
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <User_Process+0x158>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <User_Process+0x28>
	{
		/* Establish connection with remote device */
		Make_Connection();
 800110c:	f000 f940 	bl	8001390 <Make_Connection>
		set_connectable = FALSE;
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <User_Process+0x158>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8001116:	2000      	movs	r0, #0
 8001118:	f008 ffc4 	bl	800a0a4 <BSP_PB_GetState>
 800111c:	4603      	mov	r3, r0
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <User_Process+0x15c>)
 8001122:	701a      	strb	r2, [r3, #0]
	}

	if (BLE_Role == CLIENT)
 8001124:	4b4d      	ldr	r3, [pc, #308]	; (800125c <User_Process+0x160>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d12e      	bne.n	800118a <User_Process+0x8e>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 800112c:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <User_Process+0x164>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <User_Process+0x48>
 8001134:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <User_Process+0x168>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <User_Process+0x48>
			startReadTXCharHandle();
 800113e:	f000 f991 	bl	8001464 <startReadTXCharHandle>
 8001142:	e00a      	b.n	800115a <User_Process+0x5e>
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 8001144:	4b46      	ldr	r3, [pc, #280]	; (8001260 <User_Process+0x164>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <User_Process+0x5e>
 800114c:	4b46      	ldr	r3, [pc, #280]	; (8001268 <User_Process+0x16c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <User_Process+0x5e>
			startReadRXCharHandle();
 8001156:	f000 f9ab 	bl	80014b0 <startReadRXCharHandle>
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <User_Process+0x164>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d013      	beq.n	800118a <User_Process+0x8e>
 8001162:	4b40      	ldr	r3, [pc, #256]	; (8001264 <User_Process+0x168>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <User_Process+0x8e>
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <User_Process+0x16c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <User_Process+0x8e>
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <User_Process+0x170>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d104      	bne.n	800118a <User_Process+0x8e>
		{
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8001180:	2000      	movs	r0, #0
 8001182:	f008 fecd 	bl	8009f20 <BSP_LED_Off>
			enableNotification();
 8001186:	f000 fa0f 	bl	80015a8 <enableNotification>
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed || acquisizione_da_inviare)
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <User_Process+0x174>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <User_Process+0xa0>
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <User_Process+0x178>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d057      	beq.n	800124c <User_Process+0x150>
	{
		/* Debouncing */
		HAL_Delay(50);
 800119c:	2032      	movs	r0, #50	; 0x32
 800119e:	f009 f925 	bl	800a3ec <HAL_Delay>

		/* Wait until the User Button is released */
		while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 80011a2:	bf00      	nop
 80011a4:	2000      	movs	r0, #0
 80011a6:	f008 ff7d 	bl	800a0a4 <BSP_PB_GetState>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <User_Process+0x15c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	429a      	cmp	r2, r3
 80011be:	d0f1      	beq.n	80011a4 <User_Process+0xa8>

		/* Debouncing */
		HAL_Delay(50);
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f009 f913 	bl	800a3ec <HAL_Delay>
//			//BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
//			/* If uncommented be sure the BSP_LED_Init(LED2)
//			 * is called in main().
//			 * E.g. it can be enabled for debugging. */
//		}
		if (connected && notification_enabled)
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <User_Process+0x164>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d032      	beq.n	8001234 <User_Process+0x138>
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <User_Process+0x170>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d02d      	beq.n	8001234 <User_Process+0x138>
			{
				uint8_t data[20];
				sprintf((char *)data, "%ld,%ld,%ld,%f,%f#",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z,misure_temperatura,misure_umidita);
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <User_Process+0x17c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <User_Process+0x17c>)
 80011e0:	6859      	ldr	r1, [r3, #4]
 80011e2:	6039      	str	r1, [r7, #0]
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <User_Process+0x17c>)
 80011e6:	689e      	ldr	r6, [r3, #8]
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <User_Process+0x180>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <User_Process+0x184>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9ac 	bl	8000558 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	f107 000c 	add.w	r0, r7, #12
 8001208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800120c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001210:	9600      	str	r6, [sp, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	491b      	ldr	r1, [pc, #108]	; (8001284 <User_Process+0x188>)
 8001218:	f00e fe0c 	bl	800fe34 <siprintf>
				sendData(data, sizeof(data));
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2114      	movs	r1, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f990 	bl	8001548 <sendData>
//				sprintf((char *)data, ",%f\r\n", misure_temperatura);
//				sendData(data, sizeof(data));
				contatore_invii++;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <User_Process+0x18c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <User_Process+0x18c>)
 8001232:	701a      	strb	r2, [r3, #0]
			}

		/* Reset the User Button flag */
		user_button_pressed = 0;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <User_Process+0x174>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
		acquisizione_da_inviare=0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <User_Process+0x178>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		/*RESET SISTEMA A 30 INVII, CIRCA 30 SECONDI */
		if(contatore_invii>30) HAL_NVIC_SystemReset();
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <User_Process+0x18c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b1e      	cmp	r3, #30
 8001246:	d901      	bls.n	800124c <User_Process+0x150>
 8001248:	f009 fa0f 	bl	800a66a <HAL_NVIC_SystemReset>
//		sprintf((char *)data, "%ld,%ld,%ld,%f",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z, misure_temperatura);
//		sendData(data, sizeof(data));
//	}
//#endif
	/* USER CODE END DIGIMAT CODE */
}
 800124c:	bf00      	nop
 800124e:	3724      	adds	r7, #36	; 0x24
 8001250:	46bd      	mov	sp, r7
 8001252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001254:	20000001 	.word	0x20000001
 8001258:	20000000 	.word	0x20000000
 800125c:	2000038e 	.word	0x2000038e
 8001260:	20000390 	.word	0x20000390
 8001264:	20000399 	.word	0x20000399
 8001268:	2000039a 	.word	0x2000039a
 800126c:	20000396 	.word	0x20000396
 8001270:	2000038d 	.word	0x2000038d
 8001274:	2000050c 	.word	0x2000050c
 8001278:	200004f8 	.word	0x200004f8
 800127c:	20000504 	.word	0x20000504
 8001280:	20000508 	.word	0x20000508
 8001284:	08011f5c 	.word	0x08011f5c
 8001288:	2000038f 	.word	0x2000038f

0800128c <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	/* Set the User Button flag */
	user_button_pressed = 1;
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <BSP_PB_Callback+0x1c>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	2000038d 	.word	0x2000038d

080012ac <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b095      	sub	sp, #84	; 0x54
 80012b0:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <Add_Sample_Service+0xcc>)
 80012b4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <Add_Sample_Service+0xd0>)
 80012c0:	f107 0414 	add.w	r4, r7, #20
 80012c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <Add_Sample_Service+0xd4>)
 80012cc:	1d3c      	adds	r4, r7, #4
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80012d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <Add_Sample_Service+0xd8>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2307      	movs	r3, #7
 80012de:	2201      	movs	r2, #1
 80012e0:	2002      	movs	r0, #2
 80012e2:	f00c fd3b 	bl	800dd5c <aci_gatt_add_serv>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d136      	bne.n	8001362 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <Add_Sample_Service+0xd8>)
 80012f6:	8818      	ldrh	r0, [r3, #0]
 80012f8:	f107 0214 	add.w	r2, r7, #20
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <Add_Sample_Service+0xdc>)
 80012fe:	9305      	str	r3, [sp, #20]
 8001300:	2301      	movs	r3, #1
 8001302:	9304      	str	r3, [sp, #16]
 8001304:	2310      	movs	r3, #16
 8001306:	9303      	str	r3, [sp, #12]
 8001308:	2300      	movs	r3, #0
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2300      	movs	r3, #0
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2310      	movs	r3, #16
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2314      	movs	r3, #20
 8001316:	2102      	movs	r1, #2
 8001318:	f00c fda9 	bl	800de6e <aci_gatt_add_char>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001326:	2b00      	cmp	r3, #0
 8001328:	d11d      	bne.n	8001366 <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <Add_Sample_Service+0xd8>)
 800132c:	8818      	ldrh	r0, [r3, #0]
 800132e:	1d3a      	adds	r2, r7, #4
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <Add_Sample_Service+0xe0>)
 8001332:	9305      	str	r3, [sp, #20]
 8001334:	2301      	movs	r3, #1
 8001336:	9304      	str	r3, [sp, #16]
 8001338:	2310      	movs	r3, #16
 800133a:	9303      	str	r3, [sp, #12]
 800133c:	2301      	movs	r3, #1
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	230c      	movs	r3, #12
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2314      	movs	r3, #20
 800134a:	2102      	movs	r1, #2
 800134c:	f00c fd8f 	bl	800de6e <aci_gatt_add_char>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 800135e:	2300      	movs	r3, #0
 8001360:	e005      	b.n	800136e <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001362:	bf00      	nop
 8001364:	e002      	b.n	800136c <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001366:	bf00      	nop
 8001368:	e000      	b.n	800136c <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800136a:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 800136c:	2347      	movs	r3, #71	; 0x47
}
 800136e:	4618      	mov	r0, r3
 8001370:	373c      	adds	r7, #60	; 0x3c
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	08011f70 	.word	0x08011f70
 800137c:	08011f80 	.word	0x08011f80
 8001380:	08011f90 	.word	0x08011f90
 8001384:	200003a0 	.word	0x200003a0
 8001388:	200003a2 	.word	0x200003a2
 800138c:	200003a4 	.word	0x200003a4

08001390 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08f      	sub	sp, #60	; 0x3c
 8001394:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <Make_Connection+0xc0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d132      	bne.n	8001404 <Make_Connection+0x74>

    printf("Client Create Connection\n");
 800139e:	482d      	ldr	r0, [pc, #180]	; (8001454 <Make_Connection+0xc4>)
 80013a0:	f00e fd30 	bl	800fe04 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80013a4:	4a2c      	ldr	r2, [pc, #176]	; (8001458 <Make_Connection+0xc8>)
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ae:	6018      	str	r0, [r3, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 80013b4:	2000      	movs	r0, #0
 80013b6:	f008 fd9d 	bl	8009ef4 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c2:	9206      	str	r2, [sp, #24]
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	9205      	str	r2, [sp, #20]
 80013ca:	223c      	movs	r2, #60	; 0x3c
 80013cc:	9204      	str	r2, [sp, #16]
 80013ce:	2200      	movs	r2, #0
 80013d0:	9203      	str	r2, [sp, #12]
 80013d2:	2228      	movs	r2, #40	; 0x28
 80013d4:	9202      	str	r2, [sp, #8]
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	9200      	str	r2, [sp, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013e8:	f00c fc41 	bl	800dc6e <aci_gap_create_connection>
 80013ec:	4603      	mov	r3, r0
 80013ee:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d027      	beq.n	8001446 <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 80013f6:	4819      	ldr	r0, [pc, #100]	; (800145c <Make_Connection+0xcc>)
 80013f8:	f00e fd04 	bl	800fe04 <puts>
      HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	; 0x64
 80013fe:	f008 fff5 	bl	800a3ec <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8001402:	e020      	b.n	8001446 <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <Make_Connection+0xd0>)
 8001406:	463c      	mov	r4, r7
 8001408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140a:	c407      	stmia	r4!, {r0, r1, r2}
 800140c:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 800140e:	2100      	movs	r1, #0
 8001410:	2000      	movs	r0, #0
 8001412:	f00d f91b 	bl	800e64c <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8001416:	2300      	movs	r3, #0
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	2300      	movs	r3, #0
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	2300      	movs	r3, #0
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	2300      	movs	r3, #0
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	463b      	mov	r3, r7
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	230d      	movs	r3, #13
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143c:	2000      	movs	r0, #0
 800143e:	f00c fad5 	bl	800d9ec <aci_gap_set_discoverable>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	2000038e 	.word	0x2000038e
 8001454:	08011fa0 	.word	0x08011fa0
 8001458:	08011fe0 	.word	0x08011fe0
 800145c:	08011fbc 	.word	0x08011fbc
 8001460:	08011fe8 	.word	0x08011fe8

08001464 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b087      	sub	sp, #28
 8001468:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <startReadTXCharHandle+0x40>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d112      	bne.n	800149a <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <startReadTXCharHandle+0x44>)
 8001476:	463c      	mov	r4, r7
 8001478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <startReadTXCharHandle+0x48>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b298      	uxth	r0, r3
 8001484:	463b      	mov	r3, r7
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148e:	2101      	movs	r1, #1
 8001490:	f00c fe48 	bl	800e124 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <startReadTXCharHandle+0x40>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
  }
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000397 	.word	0x20000397
 80014a8:	08011f80 	.word	0x08011f80
 80014ac:	20000394 	.word	0x20000394

080014b0 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <startReadRXCharHandle+0x40>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <startReadRXCharHandle+0x44>)
 80014c2:	463c      	mov	r4, r7
 80014c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <startReadRXCharHandle+0x48>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	b298      	uxth	r0, r3
 80014d0:	463b      	mov	r3, r7
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2302      	movs	r3, #2
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	2101      	movs	r1, #1
 80014dc:	f00c fe22 	bl	800e124 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <startReadRXCharHandle+0x40>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
  }
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000398 	.word	0x20000398
 80014f4:	08011f90 	.word	0x08011f90
 80014f8:	20000394 	.word	0x20000394

080014fc <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8001508:	2000      	movs	r0, #0
 800150a:	f008 fd1f 	bl	8009f4c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e009      	b.n	8001528 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f00e fbed 	bl	800fcfc <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <receiveData+0x18>
  }
  fflush(stdout);
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <receiveData+0x48>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4618      	mov	r0, r3
 8001538:	f00d fd38 	bl	800efac <fflush>
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200001a0 	.word	0x200001a0

08001548 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af02      	add	r7, sp, #8
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <sendData+0x4c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10b      	bne.n	8001574 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <sendData+0x50>)
 800155e:	8818      	ldrh	r0, [r3, #0]
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <sendData+0x54>)
 8001562:	8819      	ldrh	r1, [r3, #0]
 8001564:	78fa      	ldrb	r2, [r7, #3]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4613      	mov	r3, r2
 800156c:	2200      	movs	r2, #0
 800156e:	f00c fd49 	bl	800e004 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8001572:	e00a      	b.n	800158a <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <sendData+0x58>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b298      	uxth	r0, r3
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <sendData+0x5c>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	b299      	uxth	r1, r3
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f00c fed6 	bl	800e336 <aci_gatt_write_without_response>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000038e 	.word	0x2000038e
 8001598:	200003a0 	.word	0x200003a0
 800159c:	200003a2 	.word	0x200003a2
 80015a0:	20000394 	.word	0x20000394
 80015a4:	2000039e 	.word	0x2000039e

080015a8 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 80015ae:	2301      	movs	r3, #1
 80015b0:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 80015b2:	f008 ff0f 	bl	800a3d4 <HAL_GetTick>
 80015b6:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80015b8:	e008      	b.n	80015cc <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80015ba:	f008 ff0b 	bl	800a3d4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d80e      	bhi.n	80015ea <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <enableNotification+0x54>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b298      	uxth	r0, r3
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <enableNotification+0x58>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	3302      	adds	r3, #2
 80015d8:	b299      	uxth	r1, r3
 80015da:	463b      	mov	r3, r7
 80015dc:	2202      	movs	r2, #2
 80015de:	f00c fe2f 	bl	800e240 <aci_gatt_write_charac_descriptor>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b46      	cmp	r3, #70	; 0x46
 80015e6:	d0e8      	beq.n	80015ba <enableNotification+0x12>
 80015e8:	e000      	b.n	80015ec <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80015ea:	bf00      	nop
  }
  notification_enabled = TRUE;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <enableNotification+0x5c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000394 	.word	0x20000394
 8001600:	2000039c 	.word	0x2000039c
 8001604:	20000396 	.word	0x20000396

08001608 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	603a      	str	r2, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	460b      	mov	r3, r1
 8001616:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <Attribute_Modified_CB+0x4c>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	429a      	cmp	r2, r3
 8001622:	d105      	bne.n	8001630 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8001624:	797b      	ldrb	r3, [r7, #5]
 8001626:	4619      	mov	r1, r3
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7ff ff67 	bl	80014fc <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 800162e:	e00c      	b.n	800164a <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8001630:	88fa      	ldrh	r2, [r7, #6]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <Attribute_Modified_CB+0x50>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	3302      	adds	r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <Attribute_Modified_CB+0x54>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003a4 	.word	0x200003a4
 8001658:	200003a2 	.word	0x200003a2
 800165c:	20000396 	.word	0x20000396

08001660 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <GAP_ConnectionComplete_CB+0x54>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001672:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <GAP_ConnectionComplete_CB+0x58>)
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8001678:	4810      	ldr	r0, [pc, #64]	; (80016bc <GAP_ConnectionComplete_CB+0x5c>)
 800167a:	f00e fb27 	bl	800fccc <iprintf>
  for(int i = 5; i > 0; i--){
 800167e:	2305      	movs	r3, #5
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e00a      	b.n	800169a <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <GAP_ConnectionComplete_CB+0x60>)
 8001690:	f00e fb1c 	bl	800fccc <iprintf>
  for(int i = 5; i > 0; i--){
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	dcf1      	bgt.n	8001684 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <GAP_ConnectionComplete_CB+0x64>)
 80016a8:	f00e fb10 	bl	800fccc <iprintf>
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000390 	.word	0x20000390
 80016b8:	20000394 	.word	0x20000394
 80016bc:	08011ff8 	.word	0x08011ff8
 80016c0:	08012010 	.word	0x08012010
 80016c4:	08012018 	.word	0x08012018

080016c8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  connected = FALSE;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <GAP_DisconnectionComplete_CB+0x38>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <GAP_DisconnectionComplete_CB+0x3c>)
 80016d4:	f00e fb96 	bl	800fe04 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <GAP_DisconnectionComplete_CB+0x40>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <GAP_DisconnectionComplete_CB+0x44>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <GAP_DisconnectionComplete_CB+0x48>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <GAP_DisconnectionComplete_CB+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <GAP_DisconnectionComplete_CB+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <GAP_DisconnectionComplete_CB+0x54>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000390 	.word	0x20000390
 8001704:	08012020 	.word	0x08012020
 8001708:	20000001 	.word	0x20000001
 800170c:	20000396 	.word	0x20000396
 8001710:	20000397 	.word	0x20000397
 8001714:	20000398 	.word	0x20000398
 8001718:	20000399 	.word	0x20000399
 800171c:	2000039a 	.word	0x2000039a

08001720 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	603a      	str	r2, [r7, #0]
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	460b      	mov	r3, r1
 800172e:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <GATT_Notification_CB+0x30>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	429a      	cmp	r2, r3
 800173a:	d104      	bne.n	8001746 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 800173c:	797b      	ldrb	r3, [r7, #5]
 800173e:	4619      	mov	r1, r3
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff fedb 	bl	80014fc <receiveData>
  }
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000039c 	.word	0x2000039c

08001754 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	3301      	adds	r3, #1
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b04      	cmp	r3, #4
 800176c:	f040 80e2 	bne.w	8001934 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2bff      	cmp	r3, #255	; 0xff
 8001776:	d021      	beq.n	80017bc <user_notify+0x68>
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	f300 80e0 	bgt.w	800193e <user_notify+0x1ea>
 800177e:	2b05      	cmp	r3, #5
 8001780:	d002      	beq.n	8001788 <user_notify+0x34>
 8001782:	2b3e      	cmp	r3, #62	; 0x3e
 8001784:	d003      	beq.n	800178e <user_notify+0x3a>
 8001786:	e0da      	b.n	800193e <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001788:	f7ff ff9e 	bl	80016c8 <GAP_DisconnectionComplete_CB>
    }
    break;
 800178c:	e0d7      	b.n	800193e <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	3302      	adds	r3, #2
 8001792:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	f040 80cd 	bne.w	8001938 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1d5a      	adds	r2, r3, #5
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	4610      	mov	r0, r2
 80017b4:	f7ff ff54 	bl	8001660 <GAP_ConnectionComplete_CB>
        }
        break;
 80017b8:	bf00      	nop
      }
    }
    break;
 80017ba:	e0bd      	b.n	8001938 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	3302      	adds	r3, #2
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 80017cc:	2b11      	cmp	r3, #17
 80017ce:	f200 80b5 	bhi.w	800193c <user_notify+0x1e8>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <user_notify+0x84>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	08001821 	.word	0x08001821
 80017dc:	0800193d 	.word	0x0800193d
 80017e0:	0800193d 	.word	0x0800193d
 80017e4:	0800193d 	.word	0x0800193d
 80017e8:	0800193d 	.word	0x0800193d
 80017ec:	0800193d 	.word	0x0800193d
 80017f0:	0800193d 	.word	0x0800193d
 80017f4:	0800193d 	.word	0x0800193d
 80017f8:	0800193d 	.word	0x0800193d
 80017fc:	0800193d 	.word	0x0800193d
 8001800:	0800193d 	.word	0x0800193d
 8001804:	0800193d 	.word	0x0800193d
 8001808:	0800193d 	.word	0x0800193d
 800180c:	0800193d 	.word	0x0800193d
 8001810:	08001861 	.word	0x08001861
 8001814:	080018ed 	.word	0x080018ed
 8001818:	0800193d 	.word	0x0800193d
 800181c:	08001883 	.word	0x08001883

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8001820:	4b48      	ldr	r3, [pc, #288]	; (8001944 <user_notify+0x1f0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10d      	bne.n	8001844 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	3302      	adds	r3, #2
 800182c:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	885b      	ldrh	r3, [r3, #2]
 8001832:	b298      	uxth	r0, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	7919      	ldrb	r1, [r3, #4]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3307      	adds	r3, #7
 800183c:	461a      	mov	r2, r3
 800183e:	f7ff fee3 	bl	8001608 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8001842:	e076      	b.n	8001932 <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3302      	adds	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	885b      	ldrh	r3, [r3, #2]
 800184e:	b298      	uxth	r0, r3
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	7919      	ldrb	r1, [r3, #4]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3305      	adds	r3, #5
 8001858:	461a      	mov	r2, r3
 800185a:	f7ff fed5 	bl	8001608 <Attribute_Modified_CB>
        break;
 800185e:	e068      	b.n	8001932 <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	3302      	adds	r3, #2
 8001864:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800186c:	b298      	uxth	r0, r3
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	789b      	ldrb	r3, [r3, #2]
 8001872:	3b02      	subs	r3, #2
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3305      	adds	r3, #5
 800187a:	461a      	mov	r2, r3
 800187c:	f7ff ff50 	bl	8001720 <GATT_Notification_CB>
        }
        break;
 8001880:	e057      	b.n	8001932 <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <user_notify+0x1f4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d150      	bne.n	800192c <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3302      	adds	r3, #2
 800188e:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <user_notify+0x1f8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d011      	beq.n	80018be <user_notify+0x16a>
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <user_notify+0x1fc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10c      	bne.n	80018be <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <user_notify+0x200>)
 80018ae:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <user_notify+0x200>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4828      	ldr	r0, [pc, #160]	; (8001958 <user_notify+0x204>)
 80018b8:	f00e fa08 	bl	800fccc <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 80018bc:	e036      	b.n	800192c <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <user_notify+0x208>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d031      	beq.n	800192c <user_notify+0x1d8>
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <user_notify+0x20c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12c      	bne.n	800192c <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <user_notify+0x210>)
 80018dc:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <user_notify+0x210>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4820      	ldr	r0, [pc, #128]	; (8001968 <user_notify+0x214>)
 80018e6:	f00e f9f1 	bl	800fccc <iprintf>
        break;
 80018ea:	e01f      	b.n	800192c <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <user_notify+0x1f4>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d11d      	bne.n	8001930 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <user_notify+0x1f8>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <user_notify+0x1bc>
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <user_notify+0x1fc>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <user_notify+0x1fc>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 800190e:	e00f      	b.n	8001930 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <user_notify+0x208>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <user_notify+0x1dc>
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <user_notify+0x20c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <user_notify+0x20c>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
        break;
 800192a:	e001      	b.n	8001930 <user_notify+0x1dc>
        break;
 800192c:	bf00      	nop
 800192e:	e005      	b.n	800193c <user_notify+0x1e8>
        break;
 8001930:	bf00      	nop
      }
    }
    break;
 8001932:	e003      	b.n	800193c <user_notify+0x1e8>
    return;
 8001934:	bf00      	nop
 8001936:	e002      	b.n	800193e <user_notify+0x1ea>
    break;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <user_notify+0x1ea>
    break;
 800193c:	bf00      	nop
  }
}
 800193e:	3730      	adds	r7, #48	; 0x30
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000038c 	.word	0x2000038c
 8001948:	2000038e 	.word	0x2000038e
 800194c:	20000397 	.word	0x20000397
 8001950:	20000399 	.word	0x20000399
 8001954:	2000039c 	.word	0x2000039c
 8001958:	08012030 	.word	0x08012030
 800195c:	20000398 	.word	0x20000398
 8001960:	2000039a 	.word	0x2000039a
 8001964:	2000039e 	.word	0x2000039e
 8001968:	08012048 	.word	0x08012048

0800196c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HCI_TL_SPI_Init+0x88>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HCI_TL_SPI_Init+0x88>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HCI_TL_SPI_Init+0x88>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001990:	2301      	movs	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	4619      	mov	r1, r3
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <HCI_TL_SPI_Init+0x8c>)
 80019a6:	f008 fec3 	bl	800a730 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80019aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <HCI_TL_SPI_Init+0x8c>)
 80019c4:	f008 feb4 	bl	800a730 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80019c8:	2302      	movs	r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <HCI_TL_SPI_Init+0x8c>)
 80019e0:	f008 fea6 	bl	800a730 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80019e4:	f000 fb48 	bl	8002078 <BSP_SPI1_Init>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000

080019fc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001a00:	2101      	movs	r1, #1
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <HCI_TL_SPI_DeInit+0x24>)
 8001a04:	f009 f818 	bl	800aa38 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HCI_TL_SPI_DeInit+0x24>)
 8001a0c:	f009 f814 	bl	800aa38 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <HCI_TL_SPI_DeInit+0x24>)
 8001a16:	f009 f80f 	bl	800aa38 <HAL_GPIO_DeInit>
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020000 	.word	0x40020000

08001a24 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <HCI_TL_SPI_Reset+0x38>)
 8001a2e:	f009 f8ff 	bl	800ac30 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a38:	4808      	ldr	r0, [pc, #32]	; (8001a5c <HCI_TL_SPI_Reset+0x38>)
 8001a3a:	f009 f8f9 	bl	800ac30 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001a3e:	2005      	movs	r0, #5
 8001a40:	f008 fcd4 	bl	800a3ec <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <HCI_TL_SPI_Reset+0x38>)
 8001a4c:	f009 f8f0 	bl	800ac30 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001a50:	2005      	movs	r0, #5
 8001a52:	f008 fccb 	bl	800a3ec <HAL_Delay>
  return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40020000 	.word	0x40020000

08001a60 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001a70:	23ff      	movs	r3, #255	; 0xff
 8001a72:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HCI_TL_SPI_Receive+0xac>)
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a7e:	6018      	str	r0, [r3, #0]
 8001a80:	3304      	adds	r3, #4
 8001a82:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2102      	movs	r1, #2
 8001a88:	4821      	ldr	r0, [pc, #132]	; (8001b10 <HCI_TL_SPI_Receive+0xb0>)
 8001a8a:	f009 f8d1 	bl	800ac30 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001a8e:	f107 010c 	add.w	r1, r7, #12
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2205      	movs	r2, #5
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fb1d 	bl	80020d8 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001a9e:	7b3b      	ldrb	r3, [r7, #12]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d129      	bne.n	8001af8 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001aa4:	7c3b      	ldrb	r3, [r7, #16]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001ab4:	8bfb      	ldrh	r3, [r7, #30]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01e      	beq.n	8001af8 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001aba:	8bfa      	ldrh	r2, [r7, #30]
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d901      	bls.n	8001ac6 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	777b      	strb	r3, [r7, #29]
 8001aca:	e010      	b.n	8001aee <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001acc:	f107 011b 	add.w	r1, r7, #27
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fafe 	bl	80020d8 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001adc:	7f7b      	ldrb	r3, [r7, #29]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	7efa      	ldrb	r2, [r7, #27]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001ae8:	7f7b      	ldrb	r3, [r7, #29]
 8001aea:	3301      	adds	r3, #1
 8001aec:	777b      	strb	r3, [r7, #29]
 8001aee:	7f7b      	ldrb	r3, [r7, #29]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8bfa      	ldrh	r2, [r7, #30]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8e9      	bhi.n	8001acc <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2102      	movs	r1, #2
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <HCI_TL_SPI_Receive+0xb0>)
 8001afe:	f009 f897 	bl	800ac30 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001b02:	7f7b      	ldrb	r3, [r7, #29]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	08012060 	.word	0x08012060
 8001b10:	40020000 	.word	0x40020000

08001b14 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HCI_TL_SPI_Send+0x9c>)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2a:	6018      	str	r0, [r3, #0]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f008 fc50 	bl	800a3d4 <HAL_GetTick>
 8001b34:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	481d      	ldr	r0, [pc, #116]	; (8001bb4 <HCI_TL_SPI_Send+0xa0>)
 8001b40:	f009 f876 	bl	800ac30 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001b44:	f107 0108 	add.w	r1, r7, #8
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fac2 	bl	80020d8 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8001b54:	7a3b      	ldrb	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d10f      	bne.n	8001b7a <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001b5a:	7a7b      	ldrb	r3, [r7, #9]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d806      	bhi.n	8001b72 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4913      	ldr	r1, [pc, #76]	; (8001bb8 <HCI_TL_SPI_Send+0xa4>)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fab4 	bl	80020d8 <BSP_SPI1_SendRecv>
 8001b70:	e006      	b.n	8001b80 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001b72:	f06f 0301 	mvn.w	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e002      	b.n	8001b80 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2102      	movs	r1, #2
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HCI_TL_SPI_Send+0xa0>)
 8001b86:	f009 f853 	bl	800ac30 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001b8a:	f008 fc23 	bl	800a3d4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d903      	bls.n	8001ba0 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8001b98:	f06f 0302 	mvn.w	r3, #2
 8001b9c:	61fb      	str	r3, [r7, #28]
      break;
 8001b9e:	e002      	b.n	8001ba6 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	dbc7      	blt.n	8001b36 <HCI_TL_SPI_Send+0x22>

  return result;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	08012068 	.word	0x08012068
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	200003b0 	.word	0x200003b0

08001bbc <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <IsDataAvailable+0x1c>)
 8001bc4:	f009 f81c 	bl	800ac00 <HAL_GPIO_ReadPin>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020000 	.word	0x40020000

08001bdc <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <hci_tl_lowlevel_init+0x54>)
 8001be4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <hci_tl_lowlevel_init+0x58>)
 8001be8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <hci_tl_lowlevel_init+0x5c>)
 8001bec:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <hci_tl_lowlevel_init+0x60>)
 8001bf0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <hci_tl_lowlevel_init+0x64>)
 8001bf4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <hci_tl_lowlevel_init+0x68>)
 8001bf8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00c fe43 	bl	800e888 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001c02:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001c06:	4810      	ldr	r0, [pc, #64]	; (8001c48 <hci_tl_lowlevel_init+0x6c>)
 8001c08:	f008 fd59 	bl	800a6be <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001c0c:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <hci_tl_lowlevel_init+0x70>)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <hci_tl_lowlevel_init+0x6c>)
 8001c12:	f008 fd3a 	bl	800a68a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2006      	movs	r0, #6
 8001c1c:	f008 fcfb 	bl	800a616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c20:	2006      	movs	r0, #6
 8001c22:	f008 fd14 	bl	800a64e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001c26:	bf00      	nop
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0800196d 	.word	0x0800196d
 8001c34:	080019fd 	.word	0x080019fd
 8001c38:	08001b15 	.word	0x08001b15
 8001c3c:	08001a61 	.word	0x08001a61
 8001c40:	08001a25 	.word	0x08001a25
 8001c44:	08002295 	.word	0x08002295
 8001c48:	200003a8 	.word	0x200003a8
 8001c4c:	08001c51 	.word	0x08001c51

08001c50 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001c54:	e005      	b.n	8001c62 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001c56:	2000      	movs	r0, #0
 8001c58:	f00c ff7c 	bl	800eb54 <hci_notify_asynch_evt>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001c62:	f7ff ffab 	bl	8001bbc <IsDataAvailable>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f4      	bne.n	8001c56 <hci_tl_lowlevel_isr+0x6>
 8001c6c:	e000      	b.n	8001c70 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001c6e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f008 fb46 	bl	800a308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f84c 	bl	8001d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c80:	f000 f8da 	bl	8001e38 <MX_GPIO_Init>
  MX_TIM10_Init();
 8001c84:	f000 f8b4 	bl	8001df0 <MX_TIM10_Init>
  MX_BlueNRG_MS_Init();
 8001c88:	f7ff f918 	bl	8000ebc <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f007 fd8c 	bl	80097ac <IKS01A3_MOTION_SENSOR_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <main+0x2e>
	  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f007 fe81 	bl	80099a4 <IKS01A3_MOTION_SENSOR_Enable>
  }
  if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE)==HAL_OK){
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f007 f9e5 	bl	8009074 <IKS01A3_ENV_SENSOR_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d103      	bne.n	8001cb8 <main+0x44>
		  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f007 fada 	bl	800926c <IKS01A3_ENV_SENSOR_Enable>
  }
  if(IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY)==HAL_OK){
 8001cb8:	2104      	movs	r1, #4
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f007 f9da 	bl	8009074 <IKS01A3_ENV_SENSOR_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <main+0x5a>
		  IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f007 facf 	bl	800926c <IKS01A3_ENV_SENSOR_Enable>
  }
  HAL_Delay(1500);
 8001cce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001cd2:	f008 fb8b 	bl	800a3ec <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim10);
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <main+0x94>)
 8001cd8:	f00a fff2 	bl	800ccc0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001cdc:	f7ff f9f8 	bl	80010d0 <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <main+0x98>)
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f007 fe9f 	bl	8009a28 <IKS01A3_MOTION_SENSOR_GetAxes>

   IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &misure_temperatura);
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <main+0x9c>)
 8001cec:	2101      	movs	r1, #1
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f007 fafe 	bl	80092f0 <IKS01A3_ENV_SENSOR_GetValue>
   IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &misure_umidita);
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <main+0xa0>)
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f007 faf9 	bl	80092f0 <IKS01A3_ENV_SENSOR_GetValue>
   HAL_Delay(1);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f008 fb74 	bl	800a3ec <HAL_Delay>
  MX_BlueNRG_MS_Process();
 8001d04:	e7ea      	b.n	8001cdc <main+0x68>
 8001d06:	bf00      	nop
 8001d08:	200004b0 	.word	0x200004b0
 8001d0c:	200004f8 	.word	0x200004f8
 8001d10:	20000504 	.word	0x20000504
 8001d14:	20000508 	.word	0x20000508

08001d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b094      	sub	sp, #80	; 0x50
 8001d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2230      	movs	r2, #48	; 0x30
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00d fa7d 	bl	800f226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <SystemClock_Config+0xd0>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <SystemClock_Config+0xd0>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <SystemClock_Config+0xd0>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <SystemClock_Config+0xd4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <SystemClock_Config+0xd4>)
 8001d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <SystemClock_Config+0xd4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d80:	2310      	movs	r3, #16
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d84:	2302      	movs	r3, #2
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d96:	2304      	movs	r3, #4
 8001d98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4618      	mov	r0, r3
 8001da4:	f009 ff96 	bl	800bcd4 <HAL_RCC_OscConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001dae:	f000 f8c1 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db2:	230f      	movs	r3, #15
 8001db4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00a f9f8 	bl	800c1c4 <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dda:	f000 f8ab 	bl	8001f34 <Error_Handler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3750      	adds	r7, #80	; 0x50
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000

08001df0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <MX_TIM10_Init+0x44>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001dfc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001e00:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001e0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e0e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_TIM10_Init+0x40>)
 8001e1e:	f00a feff 	bl	800cc20 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001e28:	f000 f884 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200004b0 	.word	0x200004b0
 8001e34:	40014400 	.word	0x40014400

08001e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <MX_GPIO_Init+0xf4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f240 3102 	movw	r1, #770	; 0x302
 8001ec4:	481a      	ldr	r0, [pc, #104]	; (8001f30 <MX_GPIO_Init+0xf8>)
 8001ec6:	f008 feb3 	bl	800ac30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ece:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <MX_GPIO_Init+0xf8>)
 8001ee0:	f008 fc26 	bl	800a730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001ee4:	f240 3302 	movw	r3, #770	; 0x302
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <MX_GPIO_Init+0xf8>)
 8001efe:	f008 fc17 	bl	800a730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	2006      	movs	r0, #6
 8001f08:	f008 fb85 	bl	800a616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f008 fb9e 	bl	800a64e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2028      	movs	r0, #40	; 0x28
 8001f18:	f008 fb7d 	bl	800a616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f1c:	2028      	movs	r0, #40	; 0x28
 8001f1e:	f008 fb96 	bl	800a64e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f008 fb3e 	bl	800a600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_TIM_Base_MspInit+0x48>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d115      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_TIM_Base_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_TIM_Base_MspInit+0x4c>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_TIM_Base_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2019      	movs	r0, #25
 8001fc4:	f008 fb27 	bl	800a616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fc8:	2019      	movs	r0, #25
 8001fca:	f008 fb40 	bl	800a64e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40014400 	.word	0x40014400
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f008 f9be 	bl	800a3ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <EXTI0_IRQHandler+0x10>)
 800203a:	f008 fb55 	bl	800a6e8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200003a8 	.word	0x200003a8

08002048 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800204e:	f00a fe99 	bl	800cd84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	acquisizione_da_inviare=1;
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200004b0 	.word	0x200004b0
 8002060:	2000050c 	.word	0x2000050c

08002064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <EXTI15_10_IRQHandler+0x10>)
 800206a:	f008 fb3d 	bl	800a6e8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000018c 	.word	0x2000018c

08002078 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <BSP_SPI1_Init+0x54>)
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <BSP_SPI1_Init+0x58>)
 8002086:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <BSP_SPI1_Init+0x5c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4911      	ldr	r1, [pc, #68]	; (80020d4 <BSP_SPI1_Init+0x5c>)
 8002090:	600a      	str	r2, [r1, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d114      	bne.n	80020c0 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002096:	480d      	ldr	r0, [pc, #52]	; (80020cc <BSP_SPI1_Init+0x54>)
 8002098:	f00a fce9 	bl	800ca6e <HAL_SPI_GetState>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80020a2:	480a      	ldr	r0, [pc, #40]	; (80020cc <BSP_SPI1_Init+0x54>)
 80020a4:	f000 f93a 	bl	800231c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <BSP_SPI1_Init+0x54>)
 80020b0:	f000 f8f8 	bl	80022a4 <MX_SPI1_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80020ba:	f06f 0307 	mvn.w	r3, #7
 80020be:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000510 	.word	0x20000510
 80020d0:	40013000 	.word	0x40013000
 80020d4:	200005bc 	.word	0x200005bc

080020d8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	4807      	ldr	r0, [pc, #28]	; (8002114 <BSP_SPI1_SendRecv+0x3c>)
 80020f8:	f00a fb17 	bl	800c72a <HAL_SPI_TransmitReceive>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002102:	f06f 0305 	mvn.w	r3, #5
 8002106:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002108:	697b      	ldr	r3, [r7, #20]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000510 	.word	0x20000510

08002118 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <BSP_I2C1_Init+0x58>)
 8002124:	4a13      	ldr	r2, [pc, #76]	; (8002174 <BSP_I2C1_Init+0x5c>)
 8002126:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <BSP_I2C1_Init+0x60>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	4912      	ldr	r1, [pc, #72]	; (8002178 <BSP_I2C1_Init+0x60>)
 8002130:	600a      	str	r2, [r1, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d117      	bne.n	8002166 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002136:	480e      	ldr	r0, [pc, #56]	; (8002170 <BSP_I2C1_Init+0x58>)
 8002138:	f009 fa56 	bl	800b5e8 <HAL_I2C_GetState>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d111      	bne.n	8002166 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002142:	480b      	ldr	r0, [pc, #44]	; (8002170 <BSP_I2C1_Init+0x58>)
 8002144:	f000 f986 	bl	8002454 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <BSP_I2C1_Init+0x58>)
 8002150:	f000 f94c 	bl	80023ec <MX_I2C1_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800215a:	f06f 0307 	mvn.w	r3, #7
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	e001      	b.n	8002166 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000568 	.word	0x20000568
 8002174:	40005400 	.word	0x40005400
 8002178:	200005c0 	.word	0x200005c0

0800217c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <BSP_I2C1_DeInit+0x48>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d014      	beq.n	80021b8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <BSP_I2C1_DeInit+0x48>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3b01      	subs	r3, #1
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <BSP_I2C1_DeInit+0x48>)
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <BSP_I2C1_DeInit+0x48>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <BSP_I2C1_DeInit+0x4c>)
 80021a2:	f000 f9a1 	bl	80024e8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80021a6:	4808      	ldr	r0, [pc, #32]	; (80021c8 <BSP_I2C1_DeInit+0x4c>)
 80021a8:	f008 feba 	bl	800af20 <HAL_I2C_DeInit>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80021b2:	f06f 0307 	mvn.w	r3, #7
 80021b6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200005c0 	.word	0x200005c0
 80021c8:	20000568 	.word	0x20000568

080021cc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af04      	add	r7, sp, #16
 80021d2:	60ba      	str	r2, [r7, #8]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	81fb      	strh	r3, [r7, #14]
 80021da:	460b      	mov	r3, r1
 80021dc:	81bb      	strh	r3, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80021e6:	89ba      	ldrh	r2, [r7, #12]
 80021e8:	89f9      	ldrh	r1, [r7, #14]
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2301      	movs	r3, #1
 80021fa:	480c      	ldr	r0, [pc, #48]	; (800222c <BSP_I2C1_WriteReg+0x60>)
 80021fc:	f008 fed4 	bl	800afa8 <HAL_I2C_Mem_Write>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00c      	beq.n	8002220 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002206:	4809      	ldr	r0, [pc, #36]	; (800222c <BSP_I2C1_WriteReg+0x60>)
 8002208:	f009 f9fc 	bl	800b604 <HAL_I2C_GetError>
 800220c:	4603      	mov	r3, r0
 800220e:	2b04      	cmp	r3, #4
 8002210:	d103      	bne.n	800221a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002212:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	e002      	b.n	8002220 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800221a:	f06f 0303 	mvn.w	r3, #3
 800221e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002220:	697b      	ldr	r3, [r7, #20]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000568 	.word	0x20000568

08002230 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af04      	add	r7, sp, #16
 8002236:	60ba      	str	r2, [r7, #8]
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	81fb      	strh	r3, [r7, #14]
 800223e:	460b      	mov	r3, r1
 8002240:	81bb      	strh	r3, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800224a:	89ba      	ldrh	r2, [r7, #12]
 800224c:	89f9      	ldrh	r1, [r7, #14]
 800224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2301      	movs	r3, #1
 800225e:	480c      	ldr	r0, [pc, #48]	; (8002290 <BSP_I2C1_ReadReg+0x60>)
 8002260:	f008 ff9c 	bl	800b19c <HAL_I2C_Mem_Read>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800226a:	4809      	ldr	r0, [pc, #36]	; (8002290 <BSP_I2C1_ReadReg+0x60>)
 800226c:	f009 f9ca 	bl	800b604 <HAL_I2C_GetError>
 8002270:	4603      	mov	r3, r0
 8002272:	2b04      	cmp	r3, #4
 8002274:	d103      	bne.n	800227e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002276:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e002      	b.n	8002284 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800227e:	f06f 0303 	mvn.w	r3, #3
 8002282:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002284:	697b      	ldr	r3, [r7, #20]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000568 	.word	0x20000568

08002294 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002298:	f008 f89c 	bl	800a3d4 <HAL_GetTick>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <MX_SPI1_Init+0x74>)
 80022b4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022bc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022dc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2218      	movs	r2, #24
 80022e2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	220a      	movs	r2, #10
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f00a f981 	bl	800c604 <HAL_SPI_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40013000 	.word	0x40013000

0800231c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <SPI1_MspInit+0xc4>)
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	4a2c      	ldr	r2, [pc, #176]	; (80023e0 <SPI1_MspInit+0xc4>)
 800232e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002332:	6453      	str	r3, [r2, #68]	; 0x44
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <SPI1_MspInit+0xc4>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <SPI1_MspInit+0xc4>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <SPI1_MspInit+0xc4>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <SPI1_MspInit+0xc4>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <SPI1_MspInit+0xc4>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <SPI1_MspInit+0xc4>)
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	6313      	str	r3, [r2, #48]	; 0x30
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <SPI1_MspInit+0xc4>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002378:	2340      	movs	r3, #64	; 0x40
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002388:	2305      	movs	r3, #5
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <SPI1_MspInit+0xc8>)
 8002394:	f008 f9cc 	bl	800a730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80023a8:	2305      	movs	r3, #5
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	480c      	ldr	r0, [pc, #48]	; (80023e4 <SPI1_MspInit+0xc8>)
 80023b4:	f008 f9bc 	bl	800a730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80023b8:	2308      	movs	r3, #8
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80023c8:	2305      	movs	r3, #5
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <SPI1_MspInit+0xcc>)
 80023d4:	f008 f9ac 	bl	800a730 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400

080023ec <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <MX_I2C1_Init+0x60>)
 80023fc:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <MX_I2C1_Init+0x64>)
 8002402:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002416:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f008 fc31 	bl	800ac98 <HAL_I2C_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40005400 	.word	0x40005400
 8002450:	00061a80 	.word	0x00061a80

08002454 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <I2C1_MspInit+0x8c>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <I2C1_MspInit+0x8c>)
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <I2C1_MspInit+0x8c>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247e:	2312      	movs	r3, #18
 8002480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800248a:	2304      	movs	r3, #4
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4813      	ldr	r0, [pc, #76]	; (80024e4 <I2C1_MspInit+0x90>)
 8002496:	f008 f94b 	bl	800a730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800249a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80024ac:	2304      	movs	r3, #4
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	480b      	ldr	r0, [pc, #44]	; (80024e4 <I2C1_MspInit+0x90>)
 80024b8:	f008 f93a 	bl	800a730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <I2C1_MspInit+0x8c>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <I2C1_MspInit+0x8c>)
 80024c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <I2C1_MspInit+0x8c>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020400 	.word	0x40020400

080024e8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <I2C1_MspDeInit+0x30>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a08      	ldr	r2, [pc, #32]	; (8002518 <I2C1_MspDeInit+0x30>)
 80024f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80024fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002500:	4806      	ldr	r0, [pc, #24]	; (800251c <I2C1_MspDeInit+0x34>)
 8002502:	f008 fa99 	bl	800aa38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250a:	4804      	ldr	r0, [pc, #16]	; (800251c <I2C1_MspDeInit+0x34>)
 800250c:	f008 fa94 	bl	800aa38 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_kill>:

int _kill(int pid, int sig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800253a:	f00c fc6f 	bl	800ee1c <__errno>
 800253e:	4603      	mov	r3, r0
 8002540:	2216      	movs	r2, #22
 8002542:	601a      	str	r2, [r3, #0]
  return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_exit>:

void _exit (int status)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffe7 	bl	8002530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002562:	e7fe      	b.n	8002562 <_exit+0x12>

08002564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00a      	b.n	800258c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002576:	f3af 8000 	nop.w
 800257a:	4601      	mov	r1, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf0      	blt.n	8002576 <_read+0x12>
  }

  return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e009      	b.n	80025c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f007 fe41 	bl	800a240 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf1      	blt.n	80025b0 <_write+0x12>
  }
  return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_close>:

int _close(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_isatty>:

int _isatty(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f00c fbd4 	bl	800ee1c <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20018000 	.word	0x20018000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	200005c4 	.word	0x200005c4
 80026a8:	20000ae8 	.word	0x20000ae8

080026ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <SystemInit+0x20>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <SystemInit+0x20>)
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d4:	480d      	ldr	r0, [pc, #52]	; (800270c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026d6:	490e      	ldr	r1, [pc, #56]	; (8002710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026ec:	4c0b      	ldr	r4, [pc, #44]	; (800271c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026fa:	f7ff ffd7 	bl	80026ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f00c fd5d 	bl	800f1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7ff fab7 	bl	8001c74 <main>
  bx  lr    
 8002706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002708:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002714:	08012484 	.word	0x08012484
  ldr r2, =_sbss
 8002718:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 800271c:	20000ae8 	.word	0x20000ae8

08002720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC_IRQHandler>
	...

08002724 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d103      	bne.n	800273c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e034      	b.n	80027a6 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7b1a      	ldrb	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HTS221_RegisterBusIO+0x8c>)
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HTS221_RegisterBusIO+0x90>)
 800277e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4798      	blx	r3
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	e002      	b.n	80027a6 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	08002de3 	.word	0x08002de3
 80027b4:	08002e45 	.word	0x08002e45

080027b8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 faa4 	bl	8002d18 <HTS221_Initialize>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	e004      	b.n	80027e6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d111      	bne.n	8002824 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f878 	bl	80028f6 <HTS221_HUM_Disable>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e00d      	b.n	800282e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f95f 	bl	8002ad6 <HTS221_TEMP_Disable>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e004      	b.n	800282e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3320      	adds	r3, #32
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fc28 	bl	800309c <hts221_device_id_get>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e000      	b.n	800285a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HTS221_GetCapabilities+0x44>)
 800288a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <HTS221_GetCapabilities+0x44>)
 8002890:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	41480000 	.word	0x41480000

080028ac <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e015      	b.n	80028ee <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3320      	adds	r3, #32
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fbf3 	bl	80030be <hts221_power_on_set>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e004      	b.n	80028ee <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e015      	b.n	8002938 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3320      	adds	r3, #32
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fbce 	bl	80030be <hts221_power_on_set>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	e004      	b.n	8002938 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f96f 	bl	8002c30 <HTS221_GetOutputDataRate>
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002968:	ed97 0a00 	vldr	s0, [r7]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f9a3 	bl	8002cb8 <HTS221_SetOutputDataRate>
 8002972:	4603      	mov	r3, r0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3320      	adds	r3, #32
 800298a:	f107 020c 	add.w	r2, r7, #12
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fc58 	bl	8003246 <hts221_hum_adc_point_0_get>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
 80029a0:	e06b      	b.n	8002a7a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f103 0220 	add.w	r2, r3, #32
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	3304      	adds	r3, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 fbaa 	bl	800310a <hts221_hum_rh_point_0_get>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e05b      	b.n	8002a7a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f103 0220 	add.w	r2, r3, #32
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	3308      	adds	r3, #8
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f000 fc5c 	bl	800328e <hts221_hum_adc_point_1_get>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e04b      	b.n	8002a7a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f103 0220 	add.w	r2, r3, #32
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	330c      	adds	r3, #12
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fba8 	bl	8003146 <hts221_hum_rh_point_1_get>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	e03b      	b.n	8002a7a <HTS221_HUM_GetHumidity+0xfe>
 8002a02:	2300      	movs	r3, #0
 8002a04:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3320      	adds	r3, #32
 8002a0a:	f107 021c 	add.w	r2, r7, #28
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fafd 	bl	8003010 <hts221_humidity_raw_get>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	e02b      	b.n	8002a7a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002a22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	eeb0 0a67 	vmov.f32	s0, s15
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f99a 	bl	8002d70 <Linear_Interpolation>
 8002a3c:	eef0 7a40 	vmov.f32	s15, s0
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d503      	bpl.n	8002a5e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a84 <HTS221_HUM_GetHumidity+0x108>
 8002a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	dd02      	ble.n	8002a78 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HTS221_HUM_GetHumidity+0x10c>)
 8002a76:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	42c80000 	.word	0x42c80000
 8002a88:	42c80000 	.word	0x42c80000

08002a8c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e015      	b.n	8002ace <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3320      	adds	r3, #32
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb03 	bl	80030be <hts221_power_on_set>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e004      	b.n	8002ace <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e015      	b.n	8002b18 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3320      	adds	r3, #32
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fade 	bl	80030be <hts221_power_on_set>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	e004      	b.n	8002b18 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f87f 	bl	8002c30 <HTS221_GetOutputDataRate>
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002b48:	ed97 0a00 	vldr	s0, [r7]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8b3 	bl	8002cb8 <HTS221_SetOutputDataRate>
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3320      	adds	r3, #32
 8002b6a:	f107 020c 	add.w	r2, r7, #12
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fbb0 	bl	80032d6 <hts221_temp_adc_point_0_get>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	e052      	b.n	8002c28 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f103 0220 	add.w	r2, r3, #32
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f000 faf6 	bl	8003182 <hts221_temp_deg_point_0_get>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	e042      	b.n	8002c28 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0220 	add.w	r2, r3, #32
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	3308      	adds	r3, #8
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 fbb4 	bl	800331e <hts221_temp_adc_point_1_get>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e032      	b.n	8002c28 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f103 0220 	add.w	r2, r3, #32
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	330c      	adds	r3, #12
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f000 fb07 	bl	80031e4 <hts221_temp_deg_point_1_get>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002be0:	e022      	b.n	8002c28 <HTS221_TEMP_GetTemperature+0xcc>
 8002be2:	2300      	movs	r3, #0
 8002be4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3320      	adds	r3, #32
 8002bea:	f107 021c 	add.w	r2, r7, #28
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fa30 	bl	8003056 <hts221_temperature_raw_get>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	e012      	b.n	8002c28 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002c02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	eeb0 0a67 	vmov.f32	s0, s15
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f8aa 	bl	8002d70 <Linear_Interpolation>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3320      	adds	r3, #32
 8002c42:	f107 020b 	add.w	r2, r7, #11
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f983 	bl	8002f54 <hts221_data_rate_get>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	e025      	b.n	8002ca6 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d81d      	bhi.n	8002c9c <HTS221_GetOutputDataRate+0x6c>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HTS221_GetOutputDataRate+0x38>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c83 	.word	0x08002c83
 8002c70:	08002c8d 	.word	0x08002c8d
 8002c74:	08002c95 	.word	0x08002c95
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
      break;
 8002c80:	e010      	b.n	8002ca4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c88:	601a      	str	r2, [r3, #0]
      break;
 8002c8a:	e00b      	b.n	8002ca4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HTS221_GetOutputDataRate+0x80>)
 8002c90:	601a      	str	r2, [r3, #0]
      break;
 8002c92:	e007      	b.n	8002ca4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HTS221_GetOutputDataRate+0x84>)
 8002c98:	601a      	str	r2, [r3, #0]
      break;
 8002c9a:	e003      	b.n	8002ca4 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	60fb      	str	r3, [r7, #12]
      break;
 8002ca2:	bf00      	nop
  }

  return ret;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40e00000 	.word	0x40e00000
 8002cb4:	41480000 	.word	0x41480000

08002cb8 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002cc4:	edd7 7a00 	vldr	s15, [r7]
 8002cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d801      	bhi.n	8002cda <HTS221_SetOutputDataRate+0x22>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00b      	b.n	8002cf2 <HTS221_SetOutputDataRate+0x3a>
 8002cda:	edd7 7a00 	vldr	s15, [r7]
 8002cde:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	d801      	bhi.n	8002cf0 <HTS221_SetOutputDataRate+0x38>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e000      	b.n	8002cf2 <HTS221_SetOutputDataRate+0x3a>
 8002cf0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002cf2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3320      	adds	r3, #32
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f902 	bl	8002f06 <hts221_data_rate_set>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	e000      	b.n	8002d10 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3320      	adds	r3, #32
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f9c9 	bl	80030be <hts221_power_on_set>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	e017      	b.n	8002d68 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f940 	bl	8002fc4 <hts221_block_data_update_set>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e00b      	b.n	8002d68 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002d50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ffaf 	bl	8002cb8 <HTS221_SetOutputDataRate>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e000      	b.n	8002d68 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d8c:	edd7 7a00 	vldr	s15, [r7]
 8002d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	ed93 6a00 	vldr	s12, [r3]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edd3 7a03 	vldr	s15, [r3, #12]
 8002db0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002db4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	edd3 6a02 	vldr	s13, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dcc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002dd0:	eef0 7a66 	vmov.f32	s15, s13
}
 8002dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	461a      	mov	r2, r3
 8002dee:	460b      	mov	r3, r1
 8002df0:	72fb      	strb	r3, [r7, #11]
 8002df2:	4613      	mov	r3, r2
 8002df4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10e      	bne.n	8002e20 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	695c      	ldr	r4, [r3, #20]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	7b1b      	ldrb	r3, [r3, #12]
 8002e0a:	b298      	uxth	r0, r3
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	b299      	uxth	r1, r3
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	47a0      	blx	r4
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	e00d      	b.n	8002e3c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	695c      	ldr	r4, [r3, #20]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	7b1b      	ldrb	r3, [r3, #12]
 8002e28:	b298      	uxth	r0, r3
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	b299      	uxth	r1, r3
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	47a0      	blx	r4
 8002e3a:	4603      	mov	r3, r0
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	72fb      	strb	r3, [r7, #11]
 8002e54:	4613      	mov	r3, r2
 8002e56:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10e      	bne.n	8002e82 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	691c      	ldr	r4, [r3, #16]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	7b1b      	ldrb	r3, [r3, #12]
 8002e6c:	b298      	uxth	r0, r3
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	b299      	uxth	r1, r3
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	47a0      	blx	r4
 8002e7e:	4603      	mov	r3, r0
 8002e80:	e00d      	b.n	8002e9e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	691c      	ldr	r4, [r3, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	7b1b      	ldrb	r3, [r3, #12]
 8002e8a:	b298      	uxth	r0, r3
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	b299      	uxth	r1, r3
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	47a0      	blx	r4
 8002e9c:	4603      	mov	r3, r0
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}

08002ea6 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b087      	sub	sp, #28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	72fb      	strb	r3, [r7, #11]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685c      	ldr	r4, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68d8      	ldr	r0, [r3, #12]
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	7af9      	ldrb	r1, [r7, #11]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	47a0      	blx	r4
 8002eca:	6178      	str	r0, [r7, #20]

  return ret;
 8002ecc:	697b      	ldr	r3, [r7, #20]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002ed6:	b590      	push	{r4, r7, lr}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	72fb      	strb	r3, [r7, #11]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681c      	ldr	r4, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68d8      	ldr	r0, [r3, #12]
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	7af9      	ldrb	r1, [r7, #11]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	47a0      	blx	r4
 8002efa:	6178      	str	r0, [r7, #20]

  return ret;
 8002efc:	697b      	ldr	r3, [r7, #20]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}

08002f06 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002f12:	f107 0208 	add.w	r2, r7, #8
 8002f16:	2301      	movs	r3, #1
 8002f18:	2120      	movs	r1, #32
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffc3 	bl	8002ea6 <hts221_read_reg>
 8002f20:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10f      	bne.n	8002f48 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	7a3b      	ldrb	r3, [r7, #8]
 8002f32:	f362 0301 	bfi	r3, r2, #0, #2
 8002f36:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002f38:	f107 0208 	add.w	r2, r7, #8
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	2120      	movs	r1, #32
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffc8 	bl	8002ed6 <hts221_write_reg>
 8002f46:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002f5e:	f107 0208 	add.w	r2, r7, #8
 8002f62:	2301      	movs	r3, #1
 8002f64:	2120      	movs	r1, #32
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff9d 	bl	8002ea6 <hts221_read_reg>
 8002f6c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8002f6e:	7a3b      	ldrb	r3, [r7, #8]
 8002f70:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d81a      	bhi.n	8002fb0 <hts221_data_rate_get+0x5c>
 8002f7a:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <hts221_data_rate_get+0x2c>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002f91 	.word	0x08002f91
 8002f84:	08002f99 	.word	0x08002f99
 8002f88:	08002fa1 	.word	0x08002fa1
 8002f8c:	08002fa9 	.word	0x08002fa9
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
      break;
 8002f96:	e00f      	b.n	8002fb8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
      break;
 8002f9e:	e00b      	b.n	8002fb8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
      break;
 8002fa6:	e007      	b.n	8002fb8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2203      	movs	r2, #3
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e003      	b.n	8002fb8 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	701a      	strb	r2, [r3, #0]
      break;
 8002fb6:	bf00      	nop
  }

  return ret;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop

08002fc4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002fd0:	f107 0208 	add.w	r2, r7, #8
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff64 	bl	8002ea6 <hts221_read_reg>
 8002fde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	7a3b      	ldrb	r3, [r7, #8]
 8002ff0:	f362 0382 	bfi	r3, r2, #2, #1
 8002ff4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002ff6:	f107 0208 	add.w	r2, r7, #8
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	2120      	movs	r1, #32
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ff69 	bl	8002ed6 <hts221_write_reg>
 8003004:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800301a:	f107 0208 	add.w	r2, r7, #8
 800301e:	2302      	movs	r3, #2
 8003020:	2128      	movs	r1, #40	; 0x28
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff3f 	bl	8002ea6 <hts221_read_reg>
 8003028:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	b21a      	sxth	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003038:	b29b      	uxth	r3, r3
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	b29a      	uxth	r2, r3
 800303e:	7a3b      	ldrb	r3, [r7, #8]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4413      	add	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	b21a      	sxth	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	801a      	strh	r2, [r3, #0]

  return ret;
 800304c:	68fb      	ldr	r3, [r7, #12]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003060:	f107 0208 	add.w	r2, r7, #8
 8003064:	2302      	movs	r3, #2
 8003066:	212a      	movs	r1, #42	; 0x2a
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff1c 	bl	8002ea6 <hts221_read_reg>
 800306e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003070:	7a7b      	ldrb	r3, [r7, #9]
 8003072:	b21a      	sxth	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	b29b      	uxth	r3, r3
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	b29a      	uxth	r2, r3
 8003084:	7a3b      	ldrb	r3, [r7, #8]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4413      	add	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	b21a      	sxth	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	801a      	strh	r2, [r3, #0]

  return ret;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80030a6:	2301      	movs	r3, #1
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	210f      	movs	r1, #15
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fefa 	bl	8002ea6 <hts221_read_reg>
 80030b2:	60f8      	str	r0, [r7, #12]

  return ret;
 80030b4:	68fb      	ldr	r3, [r7, #12]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80030ca:	f107 0208 	add.w	r2, r7, #8
 80030ce:	2301      	movs	r3, #1
 80030d0:	2120      	movs	r1, #32
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fee7 	bl	8002ea6 <hts221_read_reg>
 80030d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	7a3b      	ldrb	r3, [r7, #8]
 80030ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80030ee:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80030f0:	f107 0208 	add.w	r2, r7, #8
 80030f4:	2301      	movs	r3, #1
 80030f6:	2120      	movs	r1, #32
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff feec 	bl	8002ed6 <hts221_write_reg>
 80030fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003114:	f107 020b 	add.w	r2, r7, #11
 8003118:	2301      	movs	r3, #1
 800311a:	2130      	movs	r1, #48	; 0x30
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fec2 	bl	8002ea6 <hts221_read_reg>
 8003122:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003150:	f107 020b 	add.w	r2, r7, #11
 8003154:	2301      	movs	r3, #1
 8003156:	2131      	movs	r1, #49	; 0x31
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fea4 	bl	8002ea6 <hts221_read_reg>
 800315e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003160:	7afb      	ldrb	r3, [r7, #11]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800316a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800316e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003178:	68fb      	ldr	r3, [r7, #12]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800318c:	f107 020f 	add.w	r2, r7, #15
 8003190:	2301      	movs	r3, #1
 8003192:	2132      	movs	r1, #50	; 0x32
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fe86 	bl	8002ea6 <hts221_read_reg>
 800319a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11b      	bne.n	80031da <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80031a2:	f107 0210 	add.w	r2, r7, #16
 80031a6:	2301      	movs	r3, #1
 80031a8:	2135      	movs	r1, #53	; 0x35
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fe7b 	bl	8002ea6 <hts221_read_reg>
 80031b0:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80031b2:	7c3b      	ldrb	r3, [r7, #16]
 80031b4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	4413      	add	r3, r2
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031cc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80031d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80031da:	697b      	ldr	r3, [r7, #20]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80031ee:	f107 020f 	add.w	r2, r7, #15
 80031f2:	2301      	movs	r3, #1
 80031f4:	2133      	movs	r1, #51	; 0x33
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fe55 	bl	8002ea6 <hts221_read_reg>
 80031fc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11b      	bne.n	800323c <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003204:	f107 0210 	add.w	r2, r7, #16
 8003208:	2301      	movs	r3, #1
 800320a:	2135      	movs	r1, #53	; 0x35
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fe4a 	bl	8002ea6 <hts221_read_reg>
 8003212:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003214:	7c3b      	ldrb	r3, [r7, #16]
 8003216:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800321a:	b2db      	uxtb	r3, r3
 800321c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	4413      	add	r3, r2
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800322e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800323c:	697b      	ldr	r3, [r7, #20]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003250:	f107 0208 	add.w	r2, r7, #8
 8003254:	2302      	movs	r3, #2
 8003256:	2136      	movs	r1, #54	; 0x36
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fe24 	bl	8002ea6 <hts221_read_reg>
 800325e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003260:	7a7b      	ldrb	r3, [r7, #9]
 8003262:	b29b      	uxth	r3, r3
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b29a      	uxth	r2, r3
 8003268:	7a3b      	ldrb	r3, [r7, #8]
 800326a:	b29b      	uxth	r3, r3
 800326c:	4413      	add	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003272:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003284:	68fb      	ldr	r3, [r7, #12]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003298:	f107 0208 	add.w	r2, r7, #8
 800329c:	2302      	movs	r3, #2
 800329e:	213a      	movs	r1, #58	; 0x3a
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fe00 	bl	8002ea6 <hts221_read_reg>
 80032a6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80032a8:	7a7b      	ldrb	r3, [r7, #9]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	7a3b      	ldrb	r3, [r7, #8]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80032ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80032cc:	68fb      	ldr	r3, [r7, #12]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80032e0:	f107 0208 	add.w	r2, r7, #8
 80032e4:	2302      	movs	r3, #2
 80032e6:	213c      	movs	r1, #60	; 0x3c
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fddc 	bl	8002ea6 <hts221_read_reg>
 80032ee:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80032f0:	7a7b      	ldrb	r3, [r7, #9]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	7a3b      	ldrb	r3, [r7, #8]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003302:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003328:	f107 0208 	add.w	r2, r7, #8
 800332c:	2302      	movs	r3, #2
 800332e:	213e      	movs	r1, #62	; 0x3e
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fdb8 	bl	8002ea6 <hts221_read_reg>
 8003336:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003338:	7a7b      	ldrb	r3, [r7, #9]
 800333a:	b29b      	uxth	r3, r3
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	b29a      	uxth	r2, r3
 8003340:	7a3b      	ldrb	r3, [r7, #8]
 8003342:	b29b      	uxth	r3, r3
 8003344:	4413      	add	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800334a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800335c:	68fb      	ldr	r3, [r7, #12]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e051      	b.n	8003428 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	7b1a      	ldrb	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <LIS2DW12_RegisterBusIO+0xcc>)
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <LIS2DW12_RegisterBusIO+0xd0>)
 80033c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e020      	b.n	8003428 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4798      	blx	r3
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e016      	b.n	8003428 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d112      	bne.n	8003428 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 800340c:	2305      	movs	r3, #5
 800340e:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	461a      	mov	r2, r3
 8003414:	2121      	movs	r1, #33	; 0x21
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fd87 	bl	8003f2a <LIS2DW12_Write_Reg>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	080042bd 	.word	0x080042bd
 8003438:	080042f3 	.word	0x080042f3

0800343c <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3320      	adds	r3, #32
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fa94 	bl	8004978 <lis2dw12_auto_increment_set>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e04b      	b.n	80034f4 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3320      	adds	r3, #32
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f9a8 	bl	80047b8 <lis2dw12_block_data_update_set>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	e03f      	b.n	80034f4 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3320      	adds	r3, #32
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 faa2 	bl	80049c4 <lis2dw12_fifo_mode_set>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	e033      	b.n	80034f4 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3320      	adds	r3, #32
 8003490:	2104      	movs	r1, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ff78 	bl	8004388 <lis2dw12_power_mode_set>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	e027      	b.n	80034f4 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <LIS2DW12_Init+0xc0>)
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3320      	adds	r3, #32
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 f869 	bl	8004598 <lis2dw12_data_rate_set>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	e010      	b.n	80034f4 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3320      	adds	r3, #32
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f993 	bl	8004804 <lis2dw12_full_scale_set>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	e004      	b.n	80034f4 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	42c80000 	.word	0x42c80000

08003500 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f888 	bl	800361e <LIS2DW12_ACC_Disable>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e010      	b.n	800353c <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f001 f9fe 	bl	8004956 <lis2dw12_device_id_get>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	e000      	b.n	8003568 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <LIS2DW12_GetCapabilities+0x58>)
 80035b0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	44c80000 	.word	0x44c80000

080035cc <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e019      	b.n	8003616 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035f4:	461a      	mov	r2, r3
 80035f6:	eeb0 0a67 	vmov.f32	s0, s15
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fcb0 	bl	8003f60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e004      	b.n	8003616 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e010      	b.n	8003656 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3320      	adds	r3, #32
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f000 ffac 	bl	8004598 <lis2dw12_data_rate_set>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
 800364a:	e004      	b.n	8003656 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3320      	adds	r3, #32
 8003672:	f107 020b 	add.w	r2, r7, #11
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f001 f8e9 	bl	8004850 <lis2dw12_full_scale_get>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	e0a0      	b.n	80037cc <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3320      	adds	r3, #32
 800368e:	f107 020a 	add.w	r2, r7, #10
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fec5 	bl	8004424 <lis2dw12_power_mode_get>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
 80036a4:	e092      	b.n	80037cc <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 80036a6:	7abb      	ldrb	r3, [r7, #10]
 80036a8:	2b1b      	cmp	r3, #27
 80036aa:	f200 8087 	bhi.w	80037bc <LIS2DW12_ACC_GetSensitivity+0x15c>
 80036ae:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <LIS2DW12_ACC_GetSensitivity+0x54>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	08003725 	.word	0x08003725
 80036b8:	08003771 	.word	0x08003771
 80036bc:	08003771 	.word	0x08003771
 80036c0:	08003771 	.word	0x08003771
 80036c4:	08003771 	.word	0x08003771
 80036c8:	080037bd 	.word	0x080037bd
 80036cc:	080037bd 	.word	0x080037bd
 80036d0:	080037bd 	.word	0x080037bd
 80036d4:	08003725 	.word	0x08003725
 80036d8:	08003771 	.word	0x08003771
 80036dc:	08003771 	.word	0x08003771
 80036e0:	08003771 	.word	0x08003771
 80036e4:	080037bd 	.word	0x080037bd
 80036e8:	080037bd 	.word	0x080037bd
 80036ec:	080037bd 	.word	0x080037bd
 80036f0:	080037bd 	.word	0x080037bd
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003771 	.word	0x08003771
 80036fc:	08003771 	.word	0x08003771
 8003700:	08003771 	.word	0x08003771
 8003704:	08003771 	.word	0x08003771
 8003708:	080037bd 	.word	0x080037bd
 800370c:	080037bd 	.word	0x080037bd
 8003710:	080037bd 	.word	0x080037bd
 8003714:	08003725 	.word	0x08003725
 8003718:	08003771 	.word	0x08003771
 800371c:	08003771 	.word	0x08003771
 8003720:	08003771 	.word	0x08003771
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d81a      	bhi.n	8003760 <LIS2DW12_ACC_GetSensitivity+0x100>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003741 	.word	0x08003741
 8003734:	08003749 	.word	0x08003749
 8003738:	08003751 	.word	0x08003751
 800373c:	08003759 	.word	0x08003759
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003744:	601a      	str	r2, [r3, #0]
          break;
 8003746:	e012      	b.n	800376e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <LIS2DW12_ACC_GetSensitivity+0x178>)
 800374c:	601a      	str	r2, [r3, #0]
          break;
 800374e:	e00e      	b.n	800376e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4a22      	ldr	r2, [pc, #136]	; (80037dc <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8003754:	601a      	str	r2, [r3, #0]
          break;
 8003756:	e00a      	b.n	800376e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <LIS2DW12_ACC_GetSensitivity+0x180>)
 800375c:	601a      	str	r2, [r3, #0]
          break;
 800375e:	e006      	b.n	800376e <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003764:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	60fb      	str	r3, [r7, #12]
          break;
 800376c:	bf00      	nop
      }
      break;
 800376e:	e02c      	b.n	80037ca <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003770:	7afb      	ldrb	r3, [r7, #11]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d81a      	bhi.n	80037ac <LIS2DW12_ACC_GetSensitivity+0x14c>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003795 	.word	0x08003795
 8003784:	0800379d 	.word	0x0800379d
 8003788:	080037a5 	.word	0x080037a5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8003790:	601a      	str	r2, [r3, #0]
          break;
 8003792:	e012      	b.n	80037ba <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8003798:	601a      	str	r2, [r3, #0]
          break;
 800379a:	e00e      	b.n	80037ba <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80037a0:	601a      	str	r2, [r3, #0]
          break;
 80037a2:	e00a      	b.n	80037ba <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80037a8:	601a      	str	r2, [r3, #0]
          break;
 80037aa:	e006      	b.n	80037ba <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80037b0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	60fb      	str	r3, [r7, #12]
          break;
 80037b8:	bf00      	nop
      }
      break;
 80037ba:	e006      	b.n	80037ca <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80037c0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	60fb      	str	r3, [r7, #12]
      break;
 80037c8:	bf00      	nop
  }

  return ret;
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	3f79db23 	.word	0x3f79db23
 80037d8:	3ff9db23 	.word	0x3ff9db23
 80037dc:	4079db23 	.word	0x4079db23
 80037e0:	40f9db23 	.word	0x40f9db23
 80037e4:	bf800000 	.word	0xbf800000
 80037e8:	3e79db23 	.word	0x3e79db23
 80037ec:	3ef9db23 	.word	0x3ef9db23

080037f0 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3320      	adds	r3, #32
 8003802:	f107 020b 	add.w	r2, r7, #11
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ff0b 	bl	8004624 <lis2dw12_data_rate_get>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	e1d4      	b.n	8003bc4 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3320      	adds	r3, #32
 800381e:	f107 020a 	add.w	r2, r7, #10
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fdfd 	bl	8004424 <lis2dw12_power_mode_get>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	e1c6      	b.n	8003bc4 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8003836:	7afb      	ldrb	r3, [r7, #11]
 8003838:	2b32      	cmp	r3, #50	; 0x32
 800383a:	f200 81bb 	bhi.w	8003bb4 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003911 	.word	0x08003911
 8003848:	0800391b 	.word	0x0800391b
 800384c:	080039b9 	.word	0x080039b9
 8003850:	080039c1 	.word	0x080039c1
 8003854:	080039c9 	.word	0x080039c9
 8003858:	080039d1 	.word	0x080039d1
 800385c:	080039d9 	.word	0x080039d9
 8003860:	080039e1 	.word	0x080039e1
 8003864:	08003a7d 	.word	0x08003a7d
 8003868:	08003b19 	.word	0x08003b19
 800386c:	08003bb5 	.word	0x08003bb5
 8003870:	08003bb5 	.word	0x08003bb5
 8003874:	08003bb5 	.word	0x08003bb5
 8003878:	08003bb5 	.word	0x08003bb5
 800387c:	08003bb5 	.word	0x08003bb5
 8003880:	08003bb5 	.word	0x08003bb5
 8003884:	08003bb5 	.word	0x08003bb5
 8003888:	08003bb5 	.word	0x08003bb5
 800388c:	08003911 	.word	0x08003911
 8003890:	08003bb5 	.word	0x08003bb5
 8003894:	08003bb5 	.word	0x08003bb5
 8003898:	08003bb5 	.word	0x08003bb5
 800389c:	08003bb5 	.word	0x08003bb5
 80038a0:	08003bb5 	.word	0x08003bb5
 80038a4:	08003bb5 	.word	0x08003bb5
 80038a8:	08003bb5 	.word	0x08003bb5
 80038ac:	08003bb5 	.word	0x08003bb5
 80038b0:	08003bb5 	.word	0x08003bb5
 80038b4:	08003bb5 	.word	0x08003bb5
 80038b8:	08003bb5 	.word	0x08003bb5
 80038bc:	08003bb5 	.word	0x08003bb5
 80038c0:	08003bb5 	.word	0x08003bb5
 80038c4:	08003bb5 	.word	0x08003bb5
 80038c8:	08003bb5 	.word	0x08003bb5
 80038cc:	08003bb5 	.word	0x08003bb5
 80038d0:	08003bb5 	.word	0x08003bb5
 80038d4:	08003bb5 	.word	0x08003bb5
 80038d8:	08003bb5 	.word	0x08003bb5
 80038dc:	08003bb5 	.word	0x08003bb5
 80038e0:	08003bb5 	.word	0x08003bb5
 80038e4:	08003bb5 	.word	0x08003bb5
 80038e8:	08003bb5 	.word	0x08003bb5
 80038ec:	08003bb5 	.word	0x08003bb5
 80038f0:	08003bb5 	.word	0x08003bb5
 80038f4:	08003bb5 	.word	0x08003bb5
 80038f8:	08003bb5 	.word	0x08003bb5
 80038fc:	08003bb5 	.word	0x08003bb5
 8003900:	08003bb5 	.word	0x08003bb5
 8003904:	08003bb5 	.word	0x08003bb5
 8003908:	08003bb5 	.word	0x08003bb5
 800390c:	08003911 	.word	0x08003911
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
      break;
 8003918:	e153      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800391a:	7abb      	ldrb	r3, [r7, #10]
 800391c:	2b1b      	cmp	r3, #27
 800391e:	d843      	bhi.n	80039a8 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	080039a1 	.word	0x080039a1
 800392c:	080039a1 	.word	0x080039a1
 8003930:	080039a1 	.word	0x080039a1
 8003934:	080039a1 	.word	0x080039a1
 8003938:	08003999 	.word	0x08003999
 800393c:	080039a9 	.word	0x080039a9
 8003940:	080039a9 	.word	0x080039a9
 8003944:	080039a9 	.word	0x080039a9
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039a1 	.word	0x080039a1
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039a1 	.word	0x080039a1
 8003958:	080039a9 	.word	0x080039a9
 800395c:	080039a9 	.word	0x080039a9
 8003960:	080039a9 	.word	0x080039a9
 8003964:	080039a9 	.word	0x080039a9
 8003968:	080039a1 	.word	0x080039a1
 800396c:	080039a1 	.word	0x080039a1
 8003970:	080039a1 	.word	0x080039a1
 8003974:	080039a1 	.word	0x080039a1
 8003978:	08003999 	.word	0x08003999
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039a9 	.word	0x080039a9
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039a1 	.word	0x080039a1
 800398c:	080039a1 	.word	0x080039a1
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039a1 	.word	0x080039a1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4a8c      	ldr	r2, [pc, #560]	; (8003bcc <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800399c:	601a      	str	r2, [r3, #0]
          break;
 800399e:	e00a      	b.n	80039b6 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4a8b      	ldr	r2, [pc, #556]	; (8003bd0 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80039a4:	601a      	str	r2, [r3, #0]
          break;
 80039a6:	e006      	b.n	80039b6 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4a8a      	ldr	r2, [pc, #552]	; (8003bd4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80039ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	60fb      	str	r3, [r7, #12]
          break;
 80039b4:	bf00      	nop
      }
      break;
 80039b6:	e104      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4a84      	ldr	r2, [pc, #528]	; (8003bcc <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80039bc:	601a      	str	r2, [r3, #0]
      break;
 80039be:	e100      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4a85      	ldr	r2, [pc, #532]	; (8003bd8 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80039c4:	601a      	str	r2, [r3, #0]
      break;
 80039c6:	e0fc      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4a84      	ldr	r2, [pc, #528]	; (8003bdc <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80039cc:	601a      	str	r2, [r3, #0]
      break;
 80039ce:	e0f8      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4a83      	ldr	r2, [pc, #524]	; (8003be0 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80039d4:	601a      	str	r2, [r3, #0]
      break;
 80039d6:	e0f4      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4a82      	ldr	r2, [pc, #520]	; (8003be4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80039dc:	601a      	str	r2, [r3, #0]
      break;
 80039de:	e0f0      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80039e0:	7abb      	ldrb	r3, [r7, #10]
 80039e2:	2b1b      	cmp	r3, #27
 80039e4:	d842      	bhi.n	8003a6c <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a65 	.word	0x08003a65
 80039f0:	08003a65 	.word	0x08003a65
 80039f4:	08003a65 	.word	0x08003a65
 80039f8:	08003a65 	.word	0x08003a65
 80039fc:	08003a5d 	.word	0x08003a5d
 8003a00:	08003a6d 	.word	0x08003a6d
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	08003a6d 	.word	0x08003a6d
 8003a0c:	08003a65 	.word	0x08003a65
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	08003a65 	.word	0x08003a65
 8003a18:	08003a65 	.word	0x08003a65
 8003a1c:	08003a6d 	.word	0x08003a6d
 8003a20:	08003a6d 	.word	0x08003a6d
 8003a24:	08003a6d 	.word	0x08003a6d
 8003a28:	08003a6d 	.word	0x08003a6d
 8003a2c:	08003a65 	.word	0x08003a65
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003a65 	.word	0x08003a65
 8003a38:	08003a65 	.word	0x08003a65
 8003a3c:	08003a5d 	.word	0x08003a5d
 8003a40:	08003a6d 	.word	0x08003a6d
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a6d 	.word	0x08003a6d
 8003a4c:	08003a65 	.word	0x08003a65
 8003a50:	08003a65 	.word	0x08003a65
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a65 	.word	0x08003a65
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4a62      	ldr	r2, [pc, #392]	; (8003be8 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8003a60:	601a      	str	r2, [r3, #0]
          break;
 8003a62:	e00a      	b.n	8003a7a <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4a5f      	ldr	r2, [pc, #380]	; (8003be4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003a68:	601a      	str	r2, [r3, #0]
          break;
 8003a6a:	e006      	b.n	8003a7a <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4a59      	ldr	r2, [pc, #356]	; (8003bd4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003a70:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	60fb      	str	r3, [r7, #12]
          break;
 8003a78:	bf00      	nop
      }
      break;
 8003a7a:	e0a2      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003a7c:	7abb      	ldrb	r3, [r7, #10]
 8003a7e:	2b1b      	cmp	r3, #27
 8003a80:	d842      	bhi.n	8003b08 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003b01 	.word	0x08003b01
 8003a8c:	08003b01 	.word	0x08003b01
 8003a90:	08003b01 	.word	0x08003b01
 8003a94:	08003b01 	.word	0x08003b01
 8003a98:	08003af9 	.word	0x08003af9
 8003a9c:	08003b09 	.word	0x08003b09
 8003aa0:	08003b09 	.word	0x08003b09
 8003aa4:	08003b09 	.word	0x08003b09
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003b01 	.word	0x08003b01
 8003ab8:	08003b09 	.word	0x08003b09
 8003abc:	08003b09 	.word	0x08003b09
 8003ac0:	08003b09 	.word	0x08003b09
 8003ac4:	08003b09 	.word	0x08003b09
 8003ac8:	08003b01 	.word	0x08003b01
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003b01 	.word	0x08003b01
 8003ad4:	08003b01 	.word	0x08003b01
 8003ad8:	08003af9 	.word	0x08003af9
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b01 	.word	0x08003b01
 8003aec:	08003b01 	.word	0x08003b01
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b01 	.word	0x08003b01
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8003afc:	601a      	str	r2, [r3, #0]
          break;
 8003afe:	e00a      	b.n	8003b16 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4a38      	ldr	r2, [pc, #224]	; (8003be4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003b04:	601a      	str	r2, [r3, #0]
          break;
 8003b06:	e006      	b.n	8003b16 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003b0c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	60fb      	str	r3, [r7, #12]
          break;
 8003b14:	bf00      	nop
      }
      break;
 8003b16:	e054      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003b18:	7abb      	ldrb	r3, [r7, #10]
 8003b1a:	2b1b      	cmp	r3, #27
 8003b1c:	d842      	bhi.n	8003ba4 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b9d 	.word	0x08003b9d
 8003b28:	08003b9d 	.word	0x08003b9d
 8003b2c:	08003b9d 	.word	0x08003b9d
 8003b30:	08003b9d 	.word	0x08003b9d
 8003b34:	08003b95 	.word	0x08003b95
 8003b38:	08003ba5 	.word	0x08003ba5
 8003b3c:	08003ba5 	.word	0x08003ba5
 8003b40:	08003ba5 	.word	0x08003ba5
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	08003b9d 	.word	0x08003b9d
 8003b4c:	08003b9d 	.word	0x08003b9d
 8003b50:	08003b9d 	.word	0x08003b9d
 8003b54:	08003ba5 	.word	0x08003ba5
 8003b58:	08003ba5 	.word	0x08003ba5
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003ba5 	.word	0x08003ba5
 8003b64:	08003b9d 	.word	0x08003b9d
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003b9d 	.word	0x08003b9d
 8003b70:	08003b9d 	.word	0x08003b9d
 8003b74:	08003b95 	.word	0x08003b95
 8003b78:	08003ba5 	.word	0x08003ba5
 8003b7c:	08003ba5 	.word	0x08003ba5
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003b9d 	.word	0x08003b9d
 8003b88:	08003b9d 	.word	0x08003b9d
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003b9d 	.word	0x08003b9d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8003b98:	601a      	str	r2, [r3, #0]
          break;
 8003b9a:	e00a      	b.n	8003bb2 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003ba0:	601a      	str	r2, [r3, #0]
          break;
 8003ba2:	e006      	b.n	8003bb2 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003ba8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	60fb      	str	r3, [r7, #12]
          break;
 8003bb0:	bf00      	nop
      }
      break;
 8003bb2:	e006      	b.n	8003bc2 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003bb8:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	60fb      	str	r3, [r7, #12]
      break;
 8003bc0:	bf00      	nop
  }

  return ret;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	41480000 	.word	0x41480000
 8003bd0:	3fcccccd 	.word	0x3fcccccd
 8003bd4:	bf800000 	.word	0xbf800000
 8003bd8:	41c80000 	.word	0x41c80000
 8003bdc:	42480000 	.word	0x42480000
 8003be0:	42c80000 	.word	0x42c80000
 8003be4:	43480000 	.word	0x43480000
 8003be8:	43c80000 	.word	0x43c80000
 8003bec:	44480000 	.word	0x44480000
 8003bf0:	44c80000 	.word	0x44c80000

08003bf4 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	ed97 0a00 	vldr	s0, [r7]
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f805 	bl	8003c18 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003c0e:	4603      	mov	r3, r0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c24:	460b      	mov	r3, r1
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d109      	bne.n	8003c4a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003c36:	79ba      	ldrb	r2, [r7, #6]
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f98d 	bl	8003f60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003c46:	4603      	mov	r3, r0
 8003c48:	e008      	b.n	8003c5c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003c4a:	79ba      	ldrb	r2, [r7, #6]
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fa9f 	bl	8004198 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003c5a:	4603      	mov	r3, r0
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3320      	adds	r3, #32
 8003c76:	f107 020b 	add.w	r2, r7, #11
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fde7 	bl	8004850 <lis2dw12_full_scale_get>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e027      	b.n	8003cde <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003c8e:	7afb      	ldrb	r3, [r7, #11]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d81b      	bhi.n	8003ccc <LIS2DW12_ACC_GetFullScale+0x68>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <LIS2DW12_ACC_GetFullScale+0x38>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003cbd 	.word	0x08003cbd
 8003ca8:	08003cc5 	.word	0x08003cc5
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	601a      	str	r2, [r3, #0]
      break;
 8003cb2:	e013      	b.n	8003cdc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	601a      	str	r2, [r3, #0]
      break;
 8003cba:	e00f      	b.n	8003cdc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	601a      	str	r2, [r3, #0]
      break;
 8003cc2:	e00b      	b.n	8003cdc <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	601a      	str	r2, [r3, #0]
      break;
 8003cca:	e007      	b.n	8003cdc <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd2:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd8:	60fb      	str	r3, [r7, #12]
      break;
 8003cda:	bf00      	nop
  }

  return ret;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop

08003ce8 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	dd0b      	ble.n	8003d10 <LIS2DW12_ACC_SetFullScale+0x28>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	dd06      	ble.n	8003d0c <LIS2DW12_ACC_SetFullScale+0x24>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	dc01      	bgt.n	8003d08 <LIS2DW12_ACC_SetFullScale+0x20>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e004      	b.n	8003d12 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e002      	b.n	8003d12 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003d10:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003d12:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3320      	adds	r3, #32
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fd71 	bl	8004804 <lis2dw12_full_scale_set>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e000      	b.n	8003d30 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3320      	adds	r3, #32
 8003d4a:	f107 020b 	add.w	r2, r7, #11
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fb67 	bl	8004424 <lis2dw12_power_mode_get>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d60:	e089      	b.n	8003e76 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3320      	adds	r3, #32
 8003d66:	f107 020c 	add.w	r2, r7, #12
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fda7 	bl	80048c0 <lis2dw12_acceleration_raw_get>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	e07b      	b.n	8003e76 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
 8003d80:	2b1b      	cmp	r3, #27
 8003d82:	d873      	bhi.n	8003e6c <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dfd 	.word	0x08003dfd
 8003d90:	08003e35 	.word	0x08003e35
 8003d94:	08003e35 	.word	0x08003e35
 8003d98:	08003e35 	.word	0x08003e35
 8003d9c:	08003e35 	.word	0x08003e35
 8003da0:	08003e6d 	.word	0x08003e6d
 8003da4:	08003e6d 	.word	0x08003e6d
 8003da8:	08003e6d 	.word	0x08003e6d
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003e35 	.word	0x08003e35
 8003db4:	08003e35 	.word	0x08003e35
 8003db8:	08003e35 	.word	0x08003e35
 8003dbc:	08003e6d 	.word	0x08003e6d
 8003dc0:	08003e6d 	.word	0x08003e6d
 8003dc4:	08003e6d 	.word	0x08003e6d
 8003dc8:	08003e6d 	.word	0x08003e6d
 8003dcc:	08003dfd 	.word	0x08003dfd
 8003dd0:	08003e35 	.word	0x08003e35
 8003dd4:	08003e35 	.word	0x08003e35
 8003dd8:	08003e35 	.word	0x08003e35
 8003ddc:	08003e35 	.word	0x08003e35
 8003de0:	08003e6d 	.word	0x08003e6d
 8003de4:	08003e6d 	.word	0x08003e6d
 8003de8:	08003e6d 	.word	0x08003e6d
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e35 	.word	0x08003e35
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e35 	.word	0x08003e35
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003dfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da00      	bge.n	8003e06 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003e04:	330f      	adds	r3, #15
 8003e06:	111b      	asrs	r3, r3, #4
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003e0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da00      	bge.n	8003e18 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8003e16:	330f      	adds	r3, #15
 8003e18:	111b      	asrs	r3, r3, #4
 8003e1a:	b21a      	sxth	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003e20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	da00      	bge.n	8003e2a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003e28:	330f      	adds	r3, #15
 8003e2a:	111b      	asrs	r3, r3, #4
 8003e2c:	b21a      	sxth	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	809a      	strh	r2, [r3, #4]
      break;
 8003e32:	e01f      	b.n	8003e74 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003e34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	da00      	bge.n	8003e3e <LIS2DW12_ACC_GetAxesRaw+0x106>
 8003e3c:	3303      	adds	r3, #3
 8003e3e:	109b      	asrs	r3, r3, #2
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da00      	bge.n	8003e50 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8003e4e:	3303      	adds	r3, #3
 8003e50:	109b      	asrs	r3, r3, #2
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003e58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da00      	bge.n	8003e62 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8003e60:	3303      	adds	r3, #3
 8003e62:	109b      	asrs	r3, r3, #2
 8003e64:	b21a      	sxth	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	809a      	strh	r2, [r3, #4]
      break;
 8003e6a:	e003      	b.n	8003e74 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	617b      	str	r3, [r7, #20]
      break;
 8003e72:	bf00      	nop
  }

  return ret;
 8003e74:	697b      	ldr	r3, [r7, #20]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop

08003e80 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8003e90:	f107 0310 	add.w	r3, r7, #16
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ff4e 	bl	8003d38 <LIS2DW12_ACC_GetAxesRaw>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	e03c      	b.n	8003f22 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fbd6 	bl	8003660 <LIS2DW12_ACC_GetSensitivity>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e030      	b.n	8003f22 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003ec0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed8:	ee17 2a90 	vmov	r2, s15
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef8:	ee17 2a90 	vmov	r2, s15
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003f00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f18:	ee17 2a90 	vmov	r2, s15
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	70fb      	strb	r3, [r7, #3]
 8003f36:	4613      	mov	r3, r2
 8003f38:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f103 0020 	add.w	r0, r3, #32
 8003f40:	1cba      	adds	r2, r7, #2
 8003f42:	78f9      	ldrb	r1, [r7, #3]
 8003f44:	2301      	movs	r3, #1
 8003f46:	f000 fa07 	bl	8004358 <lis2dw12_write_reg>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
 8003f54:	e000      	b.n	8003f58 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	71fb      	strb	r3, [r7, #7]
 8003f70:	4613      	mov	r3, r2
 8003f72:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d80b      	bhi.n	8003f94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fc1 	.word	0x08003fc1
 8003f88:	08003fed 	.word	0x08003fed
 8003f8c:	08004019 	.word	0x08004019
 8003f90:	08004045 	.word	0x08004045
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003f94:	79bb      	ldrb	r3, [r7, #6]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f9e:	e002      	b.n	8003fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003fa0:	2314      	movs	r3, #20
 8003fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8003fa4:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8003fa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003faa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	d400      	bmi.n	8003fba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8003fb8:	e05a      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003fbc:	60bb      	str	r3, [r7, #8]
      break;
 8003fbe:	e057      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8003fc0:	79bb      	ldrb	r3, [r7, #6]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8003fca:	e002      	b.n	8003fd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003fcc:	2313      	movs	r3, #19
 8003fce:	75fb      	strb	r3, [r7, #23]
          break;
 8003fd0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fd6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800417c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	dc00      	bgt.n	8003fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003fe4:	e044      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003fe6:	4b66      	ldr	r3, [pc, #408]	; (8004180 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003fe8:	60bb      	str	r3, [r7, #8]
      break;
 8003fea:	e041      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003fec:	79bb      	ldrb	r3, [r7, #6]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d002      	beq.n	8003ff8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ff6:	e002      	b.n	8003ffe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003ff8:	2312      	movs	r3, #18
 8003ffa:	75fb      	strb	r3, [r7, #23]
          break;
 8003ffc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004002:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800417c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	dc00      	bgt.n	8004012 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004010:	e02e      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004012:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004014:	60bb      	str	r3, [r7, #8]
      break;
 8004016:	e02b      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004018:	79bb      	ldrb	r3, [r7, #6]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d002      	beq.n	8004024 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
          break;
 8004022:	e002      	b.n	800402a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004024:	2311      	movs	r3, #17
 8004026:	75fb      	strb	r3, [r7, #23]
          break;
 8004028:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800402a:	edd7 7a02 	vldr	s15, [r7, #8]
 800402e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800417c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	dc00      	bgt.n	800403e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 800403c:	e018      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800403e:	4b50      	ldr	r3, [pc, #320]	; (8004180 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004040:	60bb      	str	r3, [r7, #8]
      break;
 8004042:	e015      	b.n	8004070 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004044:	79bb      	ldrb	r3, [r7, #6]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d002      	beq.n	8004050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
          break;
 800404e:	e002      	b.n	8004056 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004050:	2310      	movs	r3, #16
 8004052:	75fb      	strb	r3, [r7, #23]
          break;
 8004054:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004056:	edd7 7a02 	vldr	s15, [r7, #8]
 800405a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800417c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800405e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	dc00      	bgt.n	800406a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8004068:	e001      	b.n	800406e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 800406a:	4b45      	ldr	r3, [pc, #276]	; (8004180 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800406c:	60bb      	str	r3, [r7, #8]
      break;
 800406e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004070:	edd7 7a02 	vldr	s15, [r7, #8]
 8004074:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004184 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8004078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800407c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004080:	d801      	bhi.n	8004086 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8004082:	2301      	movs	r3, #1
 8004084:	e04d      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004086:	edd7 7a02 	vldr	s15, [r7, #8]
 800408a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800408e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	d801      	bhi.n	800409c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8004098:	2302      	movs	r3, #2
 800409a:	e042      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800409c:	edd7 7a02 	vldr	s15, [r7, #8]
 80040a0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80040a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ac:	d801      	bhi.n	80040b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e037      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80040b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040b6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004188 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80040ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c2:	d801      	bhi.n	80040c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e02c      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80040c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80040cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800418c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80040d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	d801      	bhi.n	80040de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80040da:	2305      	movs	r3, #5
 80040dc:	e021      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80040de:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800417c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80040e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	d801      	bhi.n	80040f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80040f0:	2306      	movs	r3, #6
 80040f2:	e016      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80040f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004190 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80040fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	d801      	bhi.n	800410a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004106:	2307      	movs	r3, #7
 8004108:	e00b      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800410a:	edd7 7a02 	vldr	s15, [r7, #8]
 800410e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004194 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8004112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d801      	bhi.n	8004120 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 800411c:	2308      	movs	r3, #8
 800411e:	e000      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004120:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8004122:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3320      	adds	r3, #32
 8004128:	7dba      	ldrb	r2, [r7, #22]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa33 	bl	8004598 <lis2dw12_data_rate_set>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e018      	b.n	8004170 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3320      	adds	r3, #32
 8004142:	7dfa      	ldrb	r2, [r7, #23]
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f91e 	bl	8004388 <lis2dw12_power_mode_set>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	e00b      	b.n	8004170 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	79fa      	ldrb	r2, [r7, #7]
 8004162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	79ba      	ldrb	r2, [r7, #6]
 800416a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	41480000 	.word	0x41480000
 800417c:	43480000 	.word	0x43480000
 8004180:	43480000 	.word	0x43480000
 8004184:	3fcccccd 	.word	0x3fcccccd
 8004188:	42480000 	.word	0x42480000
 800418c:	42c80000 	.word	0x42c80000
 8004190:	43c80000 	.word	0x43c80000
 8004194:	44480000 	.word	0x44480000

08004198 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80041a4:	460b      	mov	r3, r1
 80041a6:	71fb      	strb	r3, [r7, #7]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	79fa      	ldrb	r2, [r7, #7]
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	79ba      	ldrb	r2, [r7, #6]
 80041b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80041bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80041c0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004280 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80041c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	d801      	bhi.n	80041d2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80041d0:	e04d      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80041d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80041da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d801      	bhi.n	80041e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80041e6:	e042      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80041e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80041f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	d801      	bhi.n	80041fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80041fc:	e037      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80041fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004202:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004290 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	d801      	bhi.n	8004214 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004210:	4b20      	ldr	r3, [pc, #128]	; (8004294 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8004212:	e02c      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004214:	edd7 7a02 	vldr	s15, [r7, #8]
 8004218:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 800421c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	d801      	bhi.n	800422a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004226:	4b1d      	ldr	r3, [pc, #116]	; (800429c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004228:	e021      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 800422a:	edd7 7a02 	vldr	s15, [r7, #8]
 800422e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80042a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	d801      	bhi.n	8004240 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800423e:	e016      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8004240:	edd7 7a02 	vldr	s15, [r7, #8]
 8004244:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80042a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d801      	bhi.n	8004256 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004254:	e00b      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8004256:	edd7 7a02 	vldr	s15, [r7, #8]
 800425a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80042b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800425e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	d801      	bhi.n	800426c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800426a:	e000      	b.n	800426e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	3fcccccd 	.word	0x3fcccccd
 8004284:	3fcccccd 	.word	0x3fcccccd
 8004288:	41480000 	.word	0x41480000
 800428c:	41c80000 	.word	0x41c80000
 8004290:	42480000 	.word	0x42480000
 8004294:	42480000 	.word	0x42480000
 8004298:	42c80000 	.word	0x42c80000
 800429c:	42c80000 	.word	0x42c80000
 80042a0:	43480000 	.word	0x43480000
 80042a4:	43480000 	.word	0x43480000
 80042a8:	43c80000 	.word	0x43c80000
 80042ac:	43c80000 	.word	0x43c80000
 80042b0:	44480000 	.word	0x44480000
 80042b4:	44480000 	.word	0x44480000
 80042b8:	44c80000 	.word	0x44c80000

080042bc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	460b      	mov	r3, r1
 80042ca:	72fb      	strb	r3, [r7, #11]
 80042cc:	4613      	mov	r3, r2
 80042ce:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	695c      	ldr	r4, [r3, #20]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	7b1b      	ldrb	r3, [r3, #12]
 80042dc:	b298      	uxth	r0, r3
 80042de:	7afb      	ldrb	r3, [r7, #11]
 80042e0:	b299      	uxth	r1, r3
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	47a0      	blx	r4
 80042e8:	4603      	mov	r3, r0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}

080042f2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042f2:	b590      	push	{r4, r7, lr}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	461a      	mov	r2, r3
 80042fe:	460b      	mov	r3, r1
 8004300:	72fb      	strb	r3, [r7, #11]
 8004302:	4613      	mov	r3, r2
 8004304:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	691c      	ldr	r4, [r3, #16]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	7b1b      	ldrb	r3, [r3, #12]
 8004312:	b298      	uxth	r0, r3
 8004314:	7afb      	ldrb	r3, [r7, #11]
 8004316:	b299      	uxth	r1, r3
 8004318:	893b      	ldrh	r3, [r7, #8]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	47a0      	blx	r4
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}

08004328 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	461a      	mov	r2, r3
 8004334:	460b      	mov	r3, r1
 8004336:	72fb      	strb	r3, [r7, #11]
 8004338:	4613      	mov	r3, r2
 800433a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685c      	ldr	r4, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68d8      	ldr	r0, [r3, #12]
 8004344:	893b      	ldrh	r3, [r7, #8]
 8004346:	7af9      	ldrb	r1, [r7, #11]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	47a0      	blx	r4
 800434c:	6178      	str	r0, [r7, #20]

  return ret;
 800434e:	697b      	ldr	r3, [r7, #20]
}
 8004350:	4618      	mov	r0, r3
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd90      	pop	{r4, r7, pc}

08004358 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	461a      	mov	r2, r3
 8004364:	460b      	mov	r3, r1
 8004366:	72fb      	strb	r3, [r7, #11]
 8004368:	4613      	mov	r3, r2
 800436a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68d8      	ldr	r0, [r3, #12]
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	7af9      	ldrb	r1, [r7, #11]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	47a0      	blx	r4
 800437c:	6178      	str	r0, [r7, #20]

  return ret;
 800437e:	697b      	ldr	r3, [r7, #20]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}

08004388 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004394:	f107 0210 	add.w	r2, r7, #16
 8004398:	2301      	movs	r3, #1
 800439a:	2120      	movs	r1, #32
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ffc3 	bl	8004328 <lis2dw12_read_reg>
 80043a2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	7c3b      	ldrb	r3, [r7, #16]
 80043b6:	f362 0383 	bfi	r3, r2, #2, #2
 80043ba:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	7c3b      	ldrb	r3, [r7, #16]
 80043c6:	f362 0301 	bfi	r3, r2, #0, #2
 80043ca:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80043cc:	f107 0210 	add.w	r2, r7, #16
 80043d0:	2301      	movs	r3, #1
 80043d2:	2120      	movs	r1, #32
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ffbf 	bl	8004358 <lis2dw12_write_reg>
 80043da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80043e2:	f107 020c 	add.w	r2, r7, #12
 80043e6:	2301      	movs	r3, #1
 80043e8:	2125      	movs	r1, #37	; 0x25
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff ff9c 	bl	8004328 <lis2dw12_read_reg>
 80043f0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d110      	bne.n	800441a <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	b2da      	uxtb	r2, r3
 8004402:	7b3b      	ldrb	r3, [r7, #12]
 8004404:	f362 0382 	bfi	r3, r2, #2, #1
 8004408:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800440a:	f107 020c 	add.w	r2, r7, #12
 800440e:	2301      	movs	r3, #1
 8004410:	2125      	movs	r1, #37	; 0x25
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ffa0 	bl	8004358 <lis2dw12_write_reg>
 8004418:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800441a:	697b      	ldr	r3, [r7, #20]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800442e:	f107 0210 	add.w	r2, r7, #16
 8004432:	2301      	movs	r3, #1
 8004434:	2120      	movs	r1, #32
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff76 	bl	8004328 <lis2dw12_read_reg>
 800443c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f040 80a3 	bne.w	800458c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004446:	f107 020c 	add.w	r2, r7, #12
 800444a:	2301      	movs	r3, #1
 800444c:	2125      	movs	r1, #37	; 0x25
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ff6a 	bl	8004328 <lis2dw12_read_reg>
 8004454:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004456:	7b3b      	ldrb	r3, [r7, #12]
 8004458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	011a      	lsls	r2, r3, #4
 8004460:	7c3b      	ldrb	r3, [r7, #16]
 8004462:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004466:	b2db      	uxtb	r3, r3
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
             ctrl1.lp_mode))
 800446c:	7c3a      	ldrb	r2, [r7, #16]
 800446e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8004472:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004474:	4413      	add	r3, r2
 8004476:	2b1b      	cmp	r3, #27
 8004478:	f200 8084 	bhi.w	8004584 <lis2dw12_power_mode_get+0x160>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <lis2dw12_power_mode_get+0x60>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004515 	.word	0x08004515
 8004488:	0800450d 	.word	0x0800450d
 800448c:	08004505 	.word	0x08004505
 8004490:	080044fd 	.word	0x080044fd
 8004494:	080044f5 	.word	0x080044f5
 8004498:	08004585 	.word	0x08004585
 800449c:	08004585 	.word	0x08004585
 80044a0:	08004585 	.word	0x08004585
 80044a4:	08004535 	.word	0x08004535
 80044a8:	0800452d 	.word	0x0800452d
 80044ac:	08004525 	.word	0x08004525
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	08004585 	.word	0x08004585
 80044b8:	08004585 	.word	0x08004585
 80044bc:	08004585 	.word	0x08004585
 80044c0:	08004585 	.word	0x08004585
 80044c4:	0800455d 	.word	0x0800455d
 80044c8:	08004555 	.word	0x08004555
 80044cc:	0800454d 	.word	0x0800454d
 80044d0:	08004545 	.word	0x08004545
 80044d4:	0800453d 	.word	0x0800453d
 80044d8:	08004585 	.word	0x08004585
 80044dc:	08004585 	.word	0x08004585
 80044e0:	08004585 	.word	0x08004585
 80044e4:	0800457d 	.word	0x0800457d
 80044e8:	08004575 	.word	0x08004575
 80044ec:	0800456d 	.word	0x0800456d
 80044f0:	08004565 	.word	0x08004565
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	701a      	strb	r2, [r3, #0]
        break;
 80044fa:	e048      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2203      	movs	r2, #3
 8004500:	701a      	strb	r2, [r3, #0]
        break;
 8004502:	e044      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2202      	movs	r2, #2
 8004508:	701a      	strb	r2, [r3, #0]
        break;
 800450a:	e040      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
        break;
 8004512:	e03c      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
        break;
 800451a:	e038      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	220b      	movs	r2, #11
 8004520:	701a      	strb	r2, [r3, #0]
        break;
 8004522:	e034      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	220a      	movs	r2, #10
 8004528:	701a      	strb	r2, [r3, #0]
        break;
 800452a:	e030      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2209      	movs	r2, #9
 8004530:	701a      	strb	r2, [r3, #0]
        break;
 8004532:	e02c      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2208      	movs	r2, #8
 8004538:	701a      	strb	r2, [r3, #0]
        break;
 800453a:	e028      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2214      	movs	r2, #20
 8004540:	701a      	strb	r2, [r3, #0]
        break;
 8004542:	e024      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2213      	movs	r2, #19
 8004548:	701a      	strb	r2, [r3, #0]
        break;
 800454a:	e020      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2212      	movs	r2, #18
 8004550:	701a      	strb	r2, [r3, #0]
        break;
 8004552:	e01c      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2211      	movs	r2, #17
 8004558:	701a      	strb	r2, [r3, #0]
        break;
 800455a:	e018      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	701a      	strb	r2, [r3, #0]
        break;
 8004562:	e014      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	221b      	movs	r2, #27
 8004568:	701a      	strb	r2, [r3, #0]
        break;
 800456a:	e010      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	221a      	movs	r2, #26
 8004570:	701a      	strb	r2, [r3, #0]
        break;
 8004572:	e00c      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2219      	movs	r2, #25
 8004578:	701a      	strb	r2, [r3, #0]
        break;
 800457a:	e008      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2218      	movs	r2, #24
 8004580:	701a      	strb	r2, [r3, #0]
        break;
 8004582:	e004      	b.n	800458e <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2204      	movs	r2, #4
 8004588:	701a      	strb	r2, [r3, #0]
        break;
 800458a:	e000      	b.n	800458e <lis2dw12_power_mode_get+0x16a>
    }
  }
 800458c:	bf00      	nop

  return ret;
 800458e:	697b      	ldr	r3, [r7, #20]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80045a4:	f107 0210 	add.w	r2, r7, #16
 80045a8:	2301      	movs	r3, #1
 80045aa:	2120      	movs	r1, #32
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff febb 	bl	8004328 <lis2dw12_read_reg>
 80045b2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	7c3b      	ldrb	r3, [r7, #16]
 80045c4:	f362 1307 	bfi	r3, r2, #4, #4
 80045c8:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80045ca:	f107 0210 	add.w	r2, r7, #16
 80045ce:	2301      	movs	r3, #1
 80045d0:	2120      	movs	r1, #32
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fec0 	bl	8004358 <lis2dw12_write_reg>
 80045d8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d107      	bne.n	80045f0 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80045e0:	f107 020c 	add.w	r2, r7, #12
 80045e4:	2301      	movs	r3, #1
 80045e6:	2122      	movs	r1, #34	; 0x22
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fe9d 	bl	8004328 <lis2dw12_read_reg>
 80045ee:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d110      	bne.n	8004618 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	7b3b      	ldrb	r3, [r7, #12]
 8004602:	f362 0301 	bfi	r3, r2, #0, #2
 8004606:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004608:	f107 020c 	add.w	r2, r7, #12
 800460c:	2301      	movs	r3, #1
 800460e:	2122      	movs	r1, #34	; 0x22
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff fea1 	bl	8004358 <lis2dw12_write_reg>
 8004616:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004618:	697b      	ldr	r3, [r7, #20]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800462e:	f107 0210 	add.w	r2, r7, #16
 8004632:	2301      	movs	r3, #1
 8004634:	2120      	movs	r1, #32
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fe76 	bl	8004328 <lis2dw12_read_reg>
 800463c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 80b3 	bne.w	80047ac <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004646:	f107 020c 	add.w	r2, r7, #12
 800464a:	2301      	movs	r3, #1
 800464c:	2122      	movs	r1, #34	; 0x22
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff fe6a 	bl	8004328 <lis2dw12_read_reg>
 8004654:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004656:	7b3b      	ldrb	r3, [r7, #12]
 8004658:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800465c:	b2db      	uxtb	r3, r3
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	7c3a      	ldrb	r2, [r7, #16]
 8004662:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	4413      	add	r3, r2
 800466a:	2b32      	cmp	r3, #50	; 0x32
 800466c:	f200 809a 	bhi.w	80047a4 <lis2dw12_data_rate_get+0x180>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <lis2dw12_data_rate_get+0x54>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	08004745 	.word	0x08004745
 800467c:	0800474d 	.word	0x0800474d
 8004680:	08004755 	.word	0x08004755
 8004684:	0800475d 	.word	0x0800475d
 8004688:	08004765 	.word	0x08004765
 800468c:	0800476d 	.word	0x0800476d
 8004690:	08004775 	.word	0x08004775
 8004694:	0800477d 	.word	0x0800477d
 8004698:	08004785 	.word	0x08004785
 800469c:	0800478d 	.word	0x0800478d
 80046a0:	080047a5 	.word	0x080047a5
 80046a4:	080047a5 	.word	0x080047a5
 80046a8:	080047a5 	.word	0x080047a5
 80046ac:	080047a5 	.word	0x080047a5
 80046b0:	080047a5 	.word	0x080047a5
 80046b4:	080047a5 	.word	0x080047a5
 80046b8:	080047a5 	.word	0x080047a5
 80046bc:	080047a5 	.word	0x080047a5
 80046c0:	0800479d 	.word	0x0800479d
 80046c4:	080047a5 	.word	0x080047a5
 80046c8:	080047a5 	.word	0x080047a5
 80046cc:	080047a5 	.word	0x080047a5
 80046d0:	080047a5 	.word	0x080047a5
 80046d4:	080047a5 	.word	0x080047a5
 80046d8:	080047a5 	.word	0x080047a5
 80046dc:	080047a5 	.word	0x080047a5
 80046e0:	080047a5 	.word	0x080047a5
 80046e4:	080047a5 	.word	0x080047a5
 80046e8:	080047a5 	.word	0x080047a5
 80046ec:	080047a5 	.word	0x080047a5
 80046f0:	080047a5 	.word	0x080047a5
 80046f4:	080047a5 	.word	0x080047a5
 80046f8:	080047a5 	.word	0x080047a5
 80046fc:	080047a5 	.word	0x080047a5
 8004700:	080047a5 	.word	0x080047a5
 8004704:	080047a5 	.word	0x080047a5
 8004708:	080047a5 	.word	0x080047a5
 800470c:	080047a5 	.word	0x080047a5
 8004710:	080047a5 	.word	0x080047a5
 8004714:	080047a5 	.word	0x080047a5
 8004718:	080047a5 	.word	0x080047a5
 800471c:	080047a5 	.word	0x080047a5
 8004720:	080047a5 	.word	0x080047a5
 8004724:	080047a5 	.word	0x080047a5
 8004728:	080047a5 	.word	0x080047a5
 800472c:	080047a5 	.word	0x080047a5
 8004730:	080047a5 	.word	0x080047a5
 8004734:	080047a5 	.word	0x080047a5
 8004738:	080047a5 	.word	0x080047a5
 800473c:	080047a5 	.word	0x080047a5
 8004740:	08004795 	.word	0x08004795
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]
        break;
 800474a:	e030      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
        break;
 8004752:	e02c      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2202      	movs	r2, #2
 8004758:	701a      	strb	r2, [r3, #0]
        break;
 800475a:	e028      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2203      	movs	r2, #3
 8004760:	701a      	strb	r2, [r3, #0]
        break;
 8004762:	e024      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2204      	movs	r2, #4
 8004768:	701a      	strb	r2, [r3, #0]
        break;
 800476a:	e020      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2205      	movs	r2, #5
 8004770:	701a      	strb	r2, [r3, #0]
        break;
 8004772:	e01c      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2206      	movs	r2, #6
 8004778:	701a      	strb	r2, [r3, #0]
        break;
 800477a:	e018      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2207      	movs	r2, #7
 8004780:	701a      	strb	r2, [r3, #0]
        break;
 8004782:	e014      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2208      	movs	r2, #8
 8004788:	701a      	strb	r2, [r3, #0]
        break;
 800478a:	e010      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2209      	movs	r2, #9
 8004790:	701a      	strb	r2, [r3, #0]
        break;
 8004792:	e00c      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2232      	movs	r2, #50	; 0x32
 8004798:	701a      	strb	r2, [r3, #0]
        break;
 800479a:	e008      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2212      	movs	r2, #18
 80047a0:	701a      	strb	r2, [r3, #0]
        break;
 80047a2:	e004      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
        break;
 80047aa:	e000      	b.n	80047ae <lis2dw12_data_rate_get+0x18a>
    }
  }
 80047ac:	bf00      	nop

  return ret;
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80047c4:	f107 0208 	add.w	r2, r7, #8
 80047c8:	2301      	movs	r3, #1
 80047ca:	2121      	movs	r1, #33	; 0x21
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fdab 	bl	8004328 <lis2dw12_read_reg>
 80047d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	7a3b      	ldrb	r3, [r7, #8]
 80047e4:	f362 03c3 	bfi	r3, r2, #3, #1
 80047e8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80047ea:	f107 0208 	add.w	r2, r7, #8
 80047ee:	2301      	movs	r3, #1
 80047f0:	2121      	movs	r1, #33	; 0x21
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fdb0 	bl	8004358 <lis2dw12_write_reg>
 80047f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004810:	f107 0208 	add.w	r2, r7, #8
 8004814:	2301      	movs	r3, #1
 8004816:	2125      	movs	r1, #37	; 0x25
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fd85 	bl	8004328 <lis2dw12_read_reg>
 800481e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	b2da      	uxtb	r2, r3
 800482e:	7a3b      	ldrb	r3, [r7, #8]
 8004830:	f362 1305 	bfi	r3, r2, #4, #2
 8004834:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004836:	f107 0208 	add.w	r2, r7, #8
 800483a:	2301      	movs	r3, #1
 800483c:	2125      	movs	r1, #37	; 0x25
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fd8a 	bl	8004358 <lis2dw12_write_reg>
 8004844:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800485a:	f107 0208 	add.w	r2, r7, #8
 800485e:	2301      	movs	r3, #1
 8004860:	2125      	movs	r1, #37	; 0x25
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fd60 	bl	8004328 <lis2dw12_read_reg>
 8004868:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800486a:	7a3b      	ldrb	r3, [r7, #8]
 800486c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b03      	cmp	r3, #3
 8004874:	d81a      	bhi.n	80048ac <lis2dw12_full_scale_get+0x5c>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <lis2dw12_full_scale_get+0x2c>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	0800488d 	.word	0x0800488d
 8004880:	08004895 	.word	0x08004895
 8004884:	0800489d 	.word	0x0800489d
 8004888:	080048a5 	.word	0x080048a5
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
      break;
 8004892:	e00f      	b.n	80048b4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
      break;
 800489a:	e00b      	b.n	80048b4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2202      	movs	r2, #2
 80048a0:	701a      	strb	r2, [r3, #0]
      break;
 80048a2:	e007      	b.n	80048b4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2203      	movs	r2, #3
 80048a8:	701a      	strb	r2, [r3, #0]
      break;
 80048aa:	e003      	b.n	80048b4 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
      break;
 80048b2:	bf00      	nop
  }

  return ret;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop

080048c0 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80048ca:	f107 020c 	add.w	r2, r7, #12
 80048ce:	2306      	movs	r3, #6
 80048d0:	2128      	movs	r1, #40	; 0x28
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fd28 	bl	8004328 <lis2dw12_read_reg>
 80048d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80048da:	7b7b      	ldrb	r3, [r7, #13]
 80048dc:	b21a      	sxth	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	7b3b      	ldrb	r3, [r7, #12]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b21a      	sxth	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3302      	adds	r3, #2
 8004902:	b212      	sxth	r2, r2
 8004904:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3302      	adds	r3, #2
 800490a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800490e:	b29b      	uxth	r3, r3
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	b29a      	uxth	r2, r3
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	b29b      	uxth	r3, r3
 8004918:	4413      	add	r3, r2
 800491a:	b29a      	uxth	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	3302      	adds	r3, #2
 8004920:	b212      	sxth	r2, r2
 8004922:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004924:	7c7a      	ldrb	r2, [r7, #17]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	b212      	sxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004936:	b29b      	uxth	r3, r3
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	b29a      	uxth	r2, r3
 800493c:	7c3b      	ldrb	r3, [r7, #16]
 800493e:	b29b      	uxth	r3, r3
 8004940:	4413      	add	r3, r2
 8004942:	b29a      	uxth	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	3304      	adds	r3, #4
 8004948:	b212      	sxth	r2, r2
 800494a:	801a      	strh	r2, [r3, #0]

  return ret;
 800494c:	697b      	ldr	r3, [r7, #20]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004960:	2301      	movs	r3, #1
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	210f      	movs	r1, #15
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fcde 	bl	8004328 <lis2dw12_read_reg>
 800496c:	60f8      	str	r0, [r7, #12]

  return ret;
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004984:	f107 0208 	add.w	r2, r7, #8
 8004988:	2301      	movs	r3, #1
 800498a:	2121      	movs	r1, #33	; 0x21
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fccb 	bl	8004328 <lis2dw12_read_reg>
 8004992:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	7a3b      	ldrb	r3, [r7, #8]
 80049a4:	f362 0382 	bfi	r3, r2, #2, #1
 80049a8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80049aa:	f107 0208 	add.w	r2, r7, #8
 80049ae:	2301      	movs	r3, #1
 80049b0:	2121      	movs	r1, #33	; 0x21
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fcd0 	bl	8004358 <lis2dw12_write_reg>
 80049b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049ba:	68fb      	ldr	r3, [r7, #12]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80049d0:	f107 0208 	add.w	r2, r7, #8
 80049d4:	2301      	movs	r3, #1
 80049d6:	212e      	movs	r1, #46	; 0x2e
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fca5 	bl	8004328 <lis2dw12_read_reg>
 80049de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	7a3b      	ldrb	r3, [r7, #8]
 80049f0:	f362 1347 	bfi	r3, r2, #5, #3
 80049f4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80049f6:	f107 0208 	add.w	r2, r7, #8
 80049fa:	2301      	movs	r3, #1
 80049fc:	212e      	movs	r1, #46	; 0x2e
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fcaa 	bl	8004358 <lis2dw12_write_reg>
 8004a04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d103      	bne.n	8004a2c <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e067      	b.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	7b1a      	ldrb	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <LIS2MDL_RegisterBusIO+0xf8>)
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <LIS2MDL_RegisterBusIO+0xfc>)
 8004a6e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e036      	b.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4798      	blx	r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e02c      	b.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d028      	beq.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d123      	bne.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10d      	bne.n	8004ad8 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004abc:	2334      	movs	r3, #52	; 0x34
 8004abe:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2162      	movs	r1, #98	; 0x62
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fb1b 	bl	8005102 <LIS2MDL_Write_Reg>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d014      	beq.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	e012      	b.n	8004afe <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d101      	bne.n	8004ae4 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e00c      	b.n	8004afe <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3320      	adds	r3, #32
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 ff70 	bl	80059d0 <lis2mdl_i2c_interface_set>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	e000      	b.n	8004afe <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	08005159 	.word	0x08005159
 8004b0c:	080051db 	.word	0x080051db

08004b10 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d144      	bne.n	8004baa <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004b20:	f107 0208 	add.w	r2, r7, #8
 8004b24:	2301      	movs	r3, #1
 8004b26:	2162      	movs	r1, #98	; 0x62
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fb97 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	e06c      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004b3a:	f107 020c 	add.w	r2, r7, #12
 8004b3e:	2301      	movs	r3, #1
 8004b40:	2160      	movs	r1, #96	; 0x60
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fb8a 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e05f      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004b54:	7a3b      	ldrb	r3, [r7, #8]
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004b5c:	7a3b      	ldrb	r3, [r7, #8]
 8004b5e:	f36f 0341 	bfc	r3, #1, #1
 8004b62:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004b64:	7b3b      	ldrb	r3, [r7, #12]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f362 0301 	bfi	r3, r2, #0, #2
 8004b6c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004b6e:	7b3b      	ldrb	r3, [r7, #12]
 8004b70:	f043 030c 	orr.w	r3, r3, #12
 8004b74:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004b76:	f107 0208 	add.w	r2, r7, #8
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2162      	movs	r1, #98	; 0x62
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fcab 	bl	80054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	e041      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004b90:	f107 020c 	add.w	r2, r7, #12
 8004b94:	2301      	movs	r3, #1
 8004b96:	2160      	movs	r1, #96	; 0x60
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fc9e 	bl	80054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d032      	beq.n	8004c0a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba8:	e034      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3320      	adds	r3, #32
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fe65 	bl	8005880 <lis2mdl_block_data_update_set>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	e028      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3320      	adds	r3, #32
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fdd4 	bl	8005776 <lis2mdl_operating_mode_set>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd8:	e01c      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3320      	adds	r3, #32
 8004bde:	2103      	movs	r1, #3
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fdee 	bl	80057c2 <lis2mdl_data_rate_set>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf0:	e010      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3320      	adds	r3, #32
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fec3 	bl	8005984 <lis2mdl_self_test_set>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	e004      	b.n	8004c14 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8a5 	bl	8004d74 <LIS2MDL_MAG_Disable>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e004      	b.n	8004c40 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d10b      	bne.n	8004c72 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	214f      	movs	r1, #79	; 0x4f
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fafb 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00e      	beq.n	8004c8a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c70:	e00c      	b.n	8004c8c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3320      	adds	r3, #32
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fe72 	bl	8005962 <lis2mdl_device_id_get>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	e000      	b.n	8004c8c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2232      	movs	r2, #50	; 0x32
 8004cc6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4a04      	ldr	r2, [pc, #16]	; (8004cec <LIS2MDL_GetCapabilities+0x58>)
 8004cdc:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	42c80000 	.word	0x42c80000

08004cf0 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e032      	b.n	8004d6c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d11d      	bne.n	8004d4a <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d0e:	f107 020c 	add.w	r2, r7, #12
 8004d12:	2301      	movs	r3, #1
 8004d14:	2160      	movs	r1, #96	; 0x60
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 faa0 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e021      	b.n	8004d6c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004d28:	7b3b      	ldrb	r3, [r7, #12]
 8004d2a:	f36f 0301 	bfc	r3, #0, #2
 8004d2e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d30:	f107 020c 	add.w	r2, r7, #12
 8004d34:	2301      	movs	r3, #1
 8004d36:	2160      	movs	r1, #96	; 0x60
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fbce 	bl	80054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	e010      	b.n	8004d6c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fd10 	bl	8005776 <lis2mdl_operating_mode_set>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d60:	e004      	b.n	8004d6c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e033      	b.n	8004df2 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d11e      	bne.n	8004dd0 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d92:	f107 020c 	add.w	r2, r7, #12
 8004d96:	2301      	movs	r3, #1
 8004d98:	2160      	movs	r1, #96	; 0x60
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa5e 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004da6:	f04f 33ff 	mov.w	r3, #4294967295
 8004daa:	e022      	b.n	8004df2 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004dac:	7b3b      	ldrb	r3, [r7, #12]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f362 0301 	bfi	r3, r2, #0, #2
 8004db4:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004db6:	f107 020c 	add.w	r2, r7, #12
 8004dba:	2301      	movs	r3, #1
 8004dbc:	2160      	movs	r1, #96	; 0x60
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb8b 	bl	80054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004dca:	f04f 33ff 	mov.w	r3, #4294967295
 8004dce:	e010      	b.n	8004df2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3320      	adds	r3, #32
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fccd 	bl	8005776 <lis2mdl_operating_mode_set>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004de2:	f04f 33ff 	mov.w	r3, #4294967295
 8004de6:	e004      	b.n	8004df2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004e0a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3320      	adds	r3, #32
 8004e2e:	f107 020b 	add.w	r2, r7, #11
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fceb 	bl	8005810 <lis2mdl_data_rate_get>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	e023      	b.n	8004e8e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d81b      	bhi.n	8004e84 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e6d 	.word	0x08004e6d
 8004e5c:	08004e75 	.word	0x08004e75
 8004e60:	08004e7d 	.word	0x08004e7d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004e68:	601a      	str	r2, [r3, #0]
      break;
 8004e6a:	e00f      	b.n	8004e8c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004e70:	601a      	str	r2, [r3, #0]
      break;
 8004e72:	e00b      	b.n	8004e8c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004e78:	601a      	str	r2, [r3, #0]
      break;
 8004e7a:	e007      	b.n	8004e8c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004e80:	601a      	str	r2, [r3, #0]
      break;
 8004e82:	e003      	b.n	8004e8c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	60fb      	str	r3, [r7, #12]
      break;
 8004e8a:	bf00      	nop
  }

  return ret;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	41200000 	.word	0x41200000
 8004e9c:	41a00000 	.word	0x41a00000
 8004ea0:	42480000 	.word	0x42480000
 8004ea4:	42c80000 	.word	0x42c80000

08004ea8 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004eb4:	edd7 7a00 	vldr	s15, [r7]
 8004eb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	d801      	bhi.n	8004eca <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e016      	b.n	8004ef8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004eca:	edd7 7a00 	vldr	s15, [r7]
 8004ece:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	d801      	bhi.n	8004ee0 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e00b      	b.n	8004ef8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004ee0:	edd7 7a00 	vldr	s15, [r7]
 8004ee4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004f6c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	d801      	bhi.n	8004ef6 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e000      	b.n	8004ef8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004ef6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004ef8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d121      	bne.n	8004f46 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f02:	f107 020c 	add.w	r2, r7, #12
 8004f06:	2301      	movs	r3, #1
 8004f08:	2160      	movs	r1, #96	; 0x60
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f9a6 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	e022      	b.n	8004f62 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	7b3b      	ldrb	r3, [r7, #12]
 8004f26:	f362 0383 	bfi	r3, r2, #2, #2
 8004f2a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f2c:	f107 020c 	add.w	r2, r7, #12
 8004f30:	2301      	movs	r3, #1
 8004f32:	2160      	movs	r1, #96	; 0x60
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fad0 	bl	80054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00f      	beq.n	8004f60 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004f40:	f04f 33ff 	mov.w	r3, #4294967295
 8004f44:	e00d      	b.n	8004f62 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3320      	adds	r3, #32
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fc37 	bl	80057c2 <lis2mdl_data_rate_set>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5e:	e000      	b.n	8004f62 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	42480000 	.word	0x42480000

08004f70 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2232      	movs	r2, #50	; 0x32
 8004f7e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3320      	adds	r3, #32
 8004fb4:	f107 0208 	add.w	r2, r7, #8
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fc86 	bl	80058cc <lis2mdl_magnetic_raw_get>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	e00c      	b.n	8004fe6 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004fcc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004fd4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004fdc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b088      	sub	sp, #32
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d137      	bne.n	8005070 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005000:	f107 0218 	add.w	r2, r7, #24
 8005004:	2306      	movs	r3, #6
 8005006:	2168      	movs	r1, #104	; 0x68
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f927 	bl	800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	e06f      	b.n	80050fa <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800501a:	7e7b      	ldrb	r3, [r7, #25]
 800501c:	b21b      	sxth	r3, r3
 800501e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005020:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005024:	b29b      	uxth	r3, r3
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b29a      	uxth	r2, r3
 800502a:	7e3b      	ldrb	r3, [r7, #24]
 800502c:	b29b      	uxth	r3, r3
 800502e:	4413      	add	r3, r2
 8005030:	b29b      	uxth	r3, r3
 8005032:	b21b      	sxth	r3, r3
 8005034:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8005036:	7efb      	ldrb	r3, [r7, #27]
 8005038:	b21b      	sxth	r3, r3
 800503a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 800503c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005040:	b29b      	uxth	r3, r3
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	b29a      	uxth	r2, r3
 8005046:	7ebb      	ldrb	r3, [r7, #26]
 8005048:	b29b      	uxth	r3, r3
 800504a:	4413      	add	r3, r2
 800504c:	b29b      	uxth	r3, r3
 800504e:	b21b      	sxth	r3, r3
 8005050:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005052:	7f7b      	ldrb	r3, [r7, #29]
 8005054:	b21b      	sxth	r3, r3
 8005056:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8005058:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800505c:	b29b      	uxth	r3, r3
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	b29a      	uxth	r2, r3
 8005062:	7f3b      	ldrb	r3, [r7, #28]
 8005064:	b29b      	uxth	r3, r3
 8005066:	4413      	add	r3, r2
 8005068:	b29b      	uxth	r3, r3
 800506a:	b21b      	sxth	r3, r3
 800506c:	82bb      	strh	r3, [r7, #20]
 800506e:	e00d      	b.n	800508c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3320      	adds	r3, #32
 8005074:	f107 0210 	add.w	r2, r7, #16
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fc26 	bl	80058cc <lis2mdl_magnetic_raw_get>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e036      	b.n	80050fa <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800508c:	f107 030c 	add.w	r3, r7, #12
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff feb1 	bl	8004dfa <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005098:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050b0:	ee17 2a90 	vmov	r2, s15
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80050b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d0:	ee17 2a90 	vmov	r2, s15
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80050d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f0:	ee17 2a90 	vmov	r2, s15
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
 800510e:	4613      	mov	r3, r2
 8005110:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d10b      	bne.n	8005132 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800511a:	1cba      	adds	r2, r7, #2
 800511c:	78f9      	ldrb	r1, [r7, #3]
 800511e:	2301      	movs	r3, #1
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f9da 	bl	80054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800512c:	f04f 33ff 	mov.w	r3, #4294967295
 8005130:	e00e      	b.n	8005150 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f103 0020 	add.w	r0, r3, #32
 8005138:	1cba      	adds	r2, r7, #2
 800513a:	78f9      	ldrb	r1, [r7, #3]
 800513c:	2301      	movs	r3, #1
 800513e:	f000 fb02 	bl	8005746 <lis2mdl_write_reg>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	e000      	b.n	8005150 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	461a      	mov	r2, r3
 8005164:	460b      	mov	r3, r1
 8005166:	72fb      	strb	r3, [r7, #11]
 8005168:	4613      	mov	r3, r2
 800516a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10e      	bne.n	8005196 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	695c      	ldr	r4, [r3, #20]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	7b1b      	ldrb	r3, [r3, #12]
 8005180:	b298      	uxth	r0, r3
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005188:	b2db      	uxtb	r3, r3
 800518a:	b299      	uxth	r1, r3
 800518c:	893b      	ldrh	r3, [r7, #8]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	47a0      	blx	r4
 8005192:	4603      	mov	r3, r0
 8005194:	e01d      	b.n	80051d2 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d10b      	bne.n	80051b6 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	695c      	ldr	r4, [r3, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	7b1b      	ldrb	r3, [r3, #12]
 80051a6:	b298      	uxth	r0, r3
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	b299      	uxth	r1, r3
 80051ac:	893b      	ldrh	r3, [r7, #8]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	47a0      	blx	r4
 80051b2:	4603      	mov	r3, r0
 80051b4:	e00d      	b.n	80051d2 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	695c      	ldr	r4, [r3, #20]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	7b1b      	ldrb	r3, [r3, #12]
 80051be:	b298      	uxth	r0, r3
 80051c0:	7afb      	ldrb	r3, [r7, #11]
 80051c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	b299      	uxth	r1, r3
 80051ca:	893b      	ldrh	r3, [r7, #8]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	47a0      	blx	r4
 80051d0:	4603      	mov	r3, r0
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}

080051da <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80051da:	b590      	push	{r4, r7, lr}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	461a      	mov	r2, r3
 80051e6:	460b      	mov	r3, r1
 80051e8:	72fb      	strb	r3, [r7, #11]
 80051ea:	4613      	mov	r3, r2
 80051ec:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10e      	bne.n	8005218 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	691c      	ldr	r4, [r3, #16]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	7b1b      	ldrb	r3, [r3, #12]
 8005202:	b298      	uxth	r0, r3
 8005204:	7afb      	ldrb	r3, [r7, #11]
 8005206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800520a:	b2db      	uxtb	r3, r3
 800520c:	b299      	uxth	r1, r3
 800520e:	893b      	ldrh	r3, [r7, #8]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	47a0      	blx	r4
 8005214:	4603      	mov	r3, r0
 8005216:	e01d      	b.n	8005254 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d10b      	bne.n	8005238 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	691c      	ldr	r4, [r3, #16]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	7b1b      	ldrb	r3, [r3, #12]
 8005228:	b298      	uxth	r0, r3
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	b299      	uxth	r1, r3
 800522e:	893b      	ldrh	r3, [r7, #8]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	47a0      	blx	r4
 8005234:	4603      	mov	r3, r0
 8005236:	e00d      	b.n	8005254 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	691c      	ldr	r4, [r3, #16]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	7b1b      	ldrb	r3, [r3, #12]
 8005240:	b298      	uxth	r0, r3
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005248:	b2db      	uxtb	r3, r3
 800524a:	b299      	uxth	r1, r3
 800524c:	893b      	ldrh	r3, [r7, #8]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	47a0      	blx	r4
 8005252:	4603      	mov	r3, r0
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}

0800525c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	; 0x30
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	460b      	mov	r3, r1
 800526a:	72fb      	strb	r3, [r7, #11]
 800526c:	4613      	mov	r3, r2
 800526e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005276:	2340      	movs	r3, #64	; 0x40
 8005278:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005282:	233d      	movs	r3, #61	; 0x3d
 8005284:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005286:	2315      	movs	r3, #21
 8005288:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800528c:	2316      	movs	r3, #22
 800528e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005292:	2317      	movs	r3, #23
 8005294:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8005298:	2314      	movs	r3, #20
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800529e:	2344      	movs	r3, #68	; 0x44
 80052a0:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80052a2:	2302      	movs	r3, #2
 80052a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80052a8:	2339      	movs	r3, #57	; 0x39
 80052aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80052b4:	2329      	movs	r3, #41	; 0x29
 80052b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80052ba:	231e      	movs	r3, #30
 80052bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80052c6:	893b      	ldrh	r3, [r7, #8]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f103 0020 	add.w	r0, r3, #32
 80052e4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80052e8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80052ec:	2301      	movs	r3, #1
 80052ee:	f000 fa2a 	bl	8005746 <lis2mdl_write_reg>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	e0e9      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f103 0020 	add.w	r0, r3, #32
 8005304:	f107 021f 	add.w	r2, r7, #31
 8005308:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800530c:	2301      	movs	r3, #1
 800530e:	f000 fa1a 	bl	8005746 <lis2mdl_write_reg>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	e0d9      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f103 0020 	add.w	r0, r3, #32
 8005324:	f107 020b 	add.w	r2, r7, #11
 8005328:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800532c:	2301      	movs	r3, #1
 800532e:	f000 fa0a 	bl	8005746 <lis2mdl_write_reg>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	e0c9      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f103 0020 	add.w	r0, r3, #32
 8005344:	f107 021d 	add.w	r2, r7, #29
 8005348:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800534c:	2301      	movs	r3, #1
 800534e:	f000 f9fa 	bl	8005746 <lis2mdl_write_reg>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	e0b9      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f103 0020 	add.w	r0, r3, #32
 8005364:	f107 021e 	add.w	r2, r7, #30
 8005368:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800536c:	2301      	movs	r3, #1
 800536e:	f000 f9ea 	bl	8005746 <lis2mdl_write_reg>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e0a9      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0020 	add.w	r0, r3, #32
 8005384:	f107 0220 	add.w	r2, r7, #32
 8005388:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800538c:	2301      	movs	r3, #1
 800538e:	f000 f9da 	bl	8005746 <lis2mdl_write_reg>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
 800539c:	e099      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f103 0020 	add.w	r0, r3, #32
 80053a4:	f107 021c 	add.w	r2, r7, #28
 80053a8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80053ac:	2301      	movs	r3, #1
 80053ae:	f000 f9b2 	bl	8005716 <lis2mdl_read_reg>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	e089      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80053be:	7f3b      	ldrb	r3, [r7, #28]
 80053c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d102      	bne.n	80053ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80053c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80053cc:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f103 0020 	add.w	r0, r3, #32
 80053d4:	f107 021c 	add.w	r2, r7, #28
 80053d8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80053dc:	2301      	movs	r3, #1
 80053de:	f000 f9b2 	bl	8005746 <lis2mdl_write_reg>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80053e8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ec:	e071      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f103 0020 	add.w	r0, r3, #32
 80053f4:	f107 0214 	add.w	r2, r7, #20
 80053f8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80053fc:	2306      	movs	r3, #6
 80053fe:	f000 f98a 	bl	8005716 <lis2mdl_read_reg>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8005408:	f04f 33ff 	mov.w	r3, #4294967295
 800540c:	e061      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f103 0020 	add.w	r0, r3, #32
 8005414:	f107 021b 	add.w	r2, r7, #27
 8005418:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800541c:	2301      	movs	r3, #1
 800541e:	f000 f97a 	bl	8005716 <lis2mdl_read_reg>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	e051      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800542e:	7efa      	ldrb	r2, [r7, #27]
 8005430:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005434:	4013      	ands	r3, r2
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800543c:	429a      	cmp	r2, r3
 800543e:	d1e6      	bne.n	800540e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f103 0020 	add.w	r0, r3, #32
 8005446:	f107 021b 	add.w	r2, r7, #27
 800544a:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800544e:	2301      	movs	r3, #1
 8005450:	f000 f961 	bl	8005716 <lis2mdl_read_reg>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	e038      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005460:	7efa      	ldrb	r2, [r7, #27]
 8005462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005466:	4013      	ands	r3, r2
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800546e:	429a      	cmp	r2, r3
 8005470:	d1e6      	bne.n	8005440 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f103 0020 	add.w	r0, r3, #32
 8005478:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800547c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005480:	2301      	movs	r3, #1
 8005482:	f000 f960 	bl	8005746 <lis2mdl_write_reg>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	e01f      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f103 0020 	add.w	r0, r3, #32
 8005498:	893b      	ldrh	r3, [r7, #8]
 800549a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	f000 f939 	bl	8005716 <lis2mdl_read_reg>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e010      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f103 0020 	add.w	r0, r3, #32
 80054b6:	f107 0220 	add.w	r2, r7, #32
 80054ba:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80054be:	2301      	movs	r3, #1
 80054c0:	f000 f941 	bl	8005746 <lis2mdl_write_reg>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80054ca:	f04f 33ff 	mov.w	r3, #4294967295
 80054ce:	e000      	b.n	80054d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08c      	sub	sp, #48	; 0x30
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	461a      	mov	r2, r3
 80054e6:	460b      	mov	r3, r1
 80054e8:	72fb      	strb	r3, [r7, #11]
 80054ea:	4613      	mov	r3, r2
 80054ec:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80054f4:	2340      	movs	r3, #64	; 0x40
 80054f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005500:	233c      	movs	r3, #60	; 0x3c
 8005502:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005504:	2315      	movs	r3, #21
 8005506:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800550a:	2316      	movs	r3, #22
 800550c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005510:	2317      	movs	r3, #23
 8005512:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800551a:	2314      	movs	r3, #20
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005520:	2344      	movs	r3, #68	; 0x44
 8005522:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005524:	2339      	movs	r3, #57	; 0x39
 8005526:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005530:	2329      	movs	r3, #41	; 0x29
 8005532:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005536:	231e      	movs	r3, #30
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005542:	2310      	movs	r3, #16
 8005544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005554:	230e      	movs	r3, #14
 8005556:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f103 0020 	add.w	r0, r3, #32
 8005560:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005564:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005568:	2301      	movs	r3, #1
 800556a:	f000 f8ec 	bl	8005746 <lis2mdl_write_reg>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	e0c9      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f103 0020 	add.w	r0, r3, #32
 8005580:	f107 021f 	add.w	r2, r7, #31
 8005584:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005588:	2301      	movs	r3, #1
 800558a:	f000 f8dc 	bl	8005746 <lis2mdl_write_reg>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	e0b9      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f103 0020 	add.w	r0, r3, #32
 80055a0:	f107 020b 	add.w	r2, r7, #11
 80055a4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80055a8:	2301      	movs	r3, #1
 80055aa:	f000 f8cc 	bl	8005746 <lis2mdl_write_reg>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	e0a9      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f103 0020 	add.w	r0, r3, #32
 80055c0:	f107 021e 	add.w	r2, r7, #30
 80055c4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80055c8:	2301      	movs	r3, #1
 80055ca:	f000 f8bc 	bl	8005746 <lis2mdl_write_reg>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	e099      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f103 0020 	add.w	r0, r3, #32
 80055e0:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80055e4:	2301      	movs	r3, #1
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	f000 f8ad 	bl	8005746 <lis2mdl_write_reg>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	e08a      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f103 0020 	add.w	r0, r3, #32
 80055fe:	f107 021d 	add.w	r2, r7, #29
 8005602:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8005606:	2301      	movs	r3, #1
 8005608:	f000 f89d 	bl	8005746 <lis2mdl_write_reg>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	e07a      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f103 0020 	add.w	r0, r3, #32
 800561e:	f107 0220 	add.w	r2, r7, #32
 8005622:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005626:	2301      	movs	r3, #1
 8005628:	f000 f88d 	bl	8005746 <lis2mdl_write_reg>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	e06a      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f103 0020 	add.w	r0, r3, #32
 800563e:	f107 021c 	add.w	r2, r7, #28
 8005642:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8005646:	2301      	movs	r3, #1
 8005648:	f000 f865 	bl	8005716 <lis2mdl_read_reg>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005652:	f04f 33ff 	mov.w	r3, #4294967295
 8005656:	e05a      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005658:	7f3b      	ldrb	r3, [r7, #28]
 800565a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800565e:	429a      	cmp	r2, r3
 8005660:	d102      	bne.n	8005668 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005666:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f103 0020 	add.w	r0, r3, #32
 800566e:	f107 021c 	add.w	r2, r7, #28
 8005672:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8005676:	2301      	movs	r3, #1
 8005678:	f000 f865 	bl	8005746 <lis2mdl_write_reg>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	e042      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f103 0020 	add.w	r0, r3, #32
 800568e:	f107 0214 	add.w	r2, r7, #20
 8005692:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005696:	2306      	movs	r3, #6
 8005698:	f000 f83d 	bl	8005716 <lis2mdl_read_reg>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
 80056a6:	e032      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f103 0020 	add.w	r0, r3, #32
 80056ae:	f107 021b 	add.w	r2, r7, #27
 80056b2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80056b6:	2301      	movs	r3, #1
 80056b8:	f000 f82d 	bl	8005716 <lis2mdl_read_reg>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e022      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80056c8:	7efa      	ldrb	r2, [r7, #27]
 80056ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ce:	4013      	ands	r3, r2
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d1e6      	bne.n	80056a8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f103 0020 	add.w	r0, r3, #32
 80056e0:	f107 021b 	add.w	r2, r7, #27
 80056e4:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80056e8:	2301      	movs	r3, #1
 80056ea:	f000 f814 	bl	8005716 <lis2mdl_read_reg>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e009      	b.n	800570e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80056fa:	7efa      	ldrb	r2, [r7, #27]
 80056fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005700:	4013      	ands	r3, r2
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005708:	429a      	cmp	r2, r3
 800570a:	d1e6      	bne.n	80056da <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3730      	adds	r7, #48	; 0x30
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005716:	b590      	push	{r4, r7, lr}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	461a      	mov	r2, r3
 8005722:	460b      	mov	r3, r1
 8005724:	72fb      	strb	r3, [r7, #11]
 8005726:	4613      	mov	r3, r2
 8005728:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685c      	ldr	r4, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68d8      	ldr	r0, [r3, #12]
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	7af9      	ldrb	r1, [r7, #11]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	47a0      	blx	r4
 800573a:	6178      	str	r0, [r7, #20]

  return ret;
 800573c:	697b      	ldr	r3, [r7, #20]
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd90      	pop	{r4, r7, pc}

08005746 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005746:	b590      	push	{r4, r7, lr}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	461a      	mov	r2, r3
 8005752:	460b      	mov	r3, r1
 8005754:	72fb      	strb	r3, [r7, #11]
 8005756:	4613      	mov	r3, r2
 8005758:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681c      	ldr	r4, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68d8      	ldr	r0, [r3, #12]
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	7af9      	ldrb	r1, [r7, #11]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	47a0      	blx	r4
 800576a:	6178      	str	r0, [r7, #20]

  return ret;
 800576c:	697b      	ldr	r3, [r7, #20]
}
 800576e:	4618      	mov	r0, r3
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd90      	pop	{r4, r7, pc}

08005776 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005782:	f107 0208 	add.w	r2, r7, #8
 8005786:	2301      	movs	r3, #1
 8005788:	2160      	movs	r1, #96	; 0x60
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ffc3 	bl	8005716 <lis2mdl_read_reg>
 8005790:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	7a3b      	ldrb	r3, [r7, #8]
 80057a2:	f362 0301 	bfi	r3, r2, #0, #2
 80057a6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80057a8:	f107 0208 	add.w	r2, r7, #8
 80057ac:	2301      	movs	r3, #1
 80057ae:	2160      	movs	r1, #96	; 0x60
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ffc8 	bl	8005746 <lis2mdl_write_reg>
 80057b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80057ce:	f107 0208 	add.w	r2, r7, #8
 80057d2:	2301      	movs	r3, #1
 80057d4:	2160      	movs	r1, #96	; 0x60
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ff9d 	bl	8005716 <lis2mdl_read_reg>
 80057dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10f      	bne.n	8005804 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	7a3b      	ldrb	r3, [r7, #8]
 80057ee:	f362 0383 	bfi	r3, r2, #2, #2
 80057f2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80057f4:	f107 0208 	add.w	r2, r7, #8
 80057f8:	2301      	movs	r3, #1
 80057fa:	2160      	movs	r1, #96	; 0x60
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ffa2 	bl	8005746 <lis2mdl_write_reg>
 8005802:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005804:	68fb      	ldr	r3, [r7, #12]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800581a:	f107 0208 	add.w	r2, r7, #8
 800581e:	2301      	movs	r3, #1
 8005820:	2160      	movs	r1, #96	; 0x60
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ff77 	bl	8005716 <lis2mdl_read_reg>
 8005828:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800582a:	7a3b      	ldrb	r3, [r7, #8]
 800582c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d81a      	bhi.n	800586c <lis2mdl_data_rate_get+0x5c>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <lis2mdl_data_rate_get+0x2c>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005855 	.word	0x08005855
 8005844:	0800585d 	.word	0x0800585d
 8005848:	08005865 	.word	0x08005865
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
      break;
 8005852:	e00f      	b.n	8005874 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
      break;
 800585a:	e00b      	b.n	8005874 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
      break;
 8005862:	e007      	b.n	8005874 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2203      	movs	r2, #3
 8005868:	701a      	strb	r2, [r3, #0]
      break;
 800586a:	e003      	b.n	8005874 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
      break;
 8005872:	bf00      	nop
  }

  return ret;
 8005874:	68fb      	ldr	r3, [r7, #12]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop

08005880 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800588c:	f107 0208 	add.w	r2, r7, #8
 8005890:	2301      	movs	r3, #1
 8005892:	2162      	movs	r1, #98	; 0x62
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ff3e 	bl	8005716 <lis2mdl_read_reg>
 800589a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10f      	bne.n	80058c2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	7a3b      	ldrb	r3, [r7, #8]
 80058ac:	f362 1304 	bfi	r3, r2, #4, #1
 80058b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80058b2:	f107 0208 	add.w	r2, r7, #8
 80058b6:	2301      	movs	r3, #1
 80058b8:	2162      	movs	r1, #98	; 0x62
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff43 	bl	8005746 <lis2mdl_write_reg>
 80058c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80058d6:	f107 020c 	add.w	r2, r7, #12
 80058da:	2306      	movs	r3, #6
 80058dc:	2168      	movs	r1, #104	; 0x68
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff ff19 	bl	8005716 <lis2mdl_read_reg>
 80058e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80058e6:	7b7b      	ldrb	r3, [r7, #13]
 80058e8:	b21a      	sxth	r2, r3
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	7b3b      	ldrb	r3, [r7, #12]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4413      	add	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	b21a      	sxth	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	3302      	adds	r3, #2
 800590e:	b212      	sxth	r2, r2
 8005910:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3302      	adds	r3, #2
 8005916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800591a:	b29b      	uxth	r3, r3
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	b29a      	uxth	r2, r3
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	b29b      	uxth	r3, r3
 8005924:	4413      	add	r3, r2
 8005926:	b29a      	uxth	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	3302      	adds	r3, #2
 800592c:	b212      	sxth	r2, r2
 800592e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005930:	7c7a      	ldrb	r2, [r7, #17]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	3304      	adds	r3, #4
 8005936:	b212      	sxth	r2, r2
 8005938:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3304      	adds	r3, #4
 800593e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005942:	b29b      	uxth	r3, r3
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	b29a      	uxth	r2, r3
 8005948:	7c3b      	ldrb	r3, [r7, #16]
 800594a:	b29b      	uxth	r3, r3
 800594c:	4413      	add	r3, r2
 800594e:	b29a      	uxth	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	3304      	adds	r3, #4
 8005954:	b212      	sxth	r2, r2
 8005956:	801a      	strh	r2, [r3, #0]

  return ret;
 8005958:	697b      	ldr	r3, [r7, #20]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800596c:	2301      	movs	r3, #1
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	214f      	movs	r1, #79	; 0x4f
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fecf 	bl	8005716 <lis2mdl_read_reg>
 8005978:	60f8      	str	r0, [r7, #12]

  return ret;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005990:	f107 0208 	add.w	r2, r7, #8
 8005994:	2301      	movs	r3, #1
 8005996:	2162      	movs	r1, #98	; 0x62
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff febc 	bl	8005716 <lis2mdl_read_reg>
 800599e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	7a3b      	ldrb	r3, [r7, #8]
 80059b0:	f362 0341 	bfi	r3, r2, #1, #1
 80059b4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80059b6:	f107 0208 	add.w	r2, r7, #8
 80059ba:	2301      	movs	r3, #1
 80059bc:	2162      	movs	r1, #98	; 0x62
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fec1 	bl	8005746 <lis2mdl_write_reg>
 80059c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059c6:	68fb      	ldr	r3, [r7, #12]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80059dc:	f107 0208 	add.w	r2, r7, #8
 80059e0:	2301      	movs	r3, #1
 80059e2:	2162      	movs	r1, #98	; 0x62
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fe96 	bl	8005716 <lis2mdl_read_reg>
 80059ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	7a3b      	ldrb	r3, [r7, #8]
 80059fc:	f362 1345 	bfi	r3, r2, #5, #1
 8005a00:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005a02:	f107 0208 	add.w	r2, r7, #8
 8005a06:	2301      	movs	r3, #1
 8005a08:	2162      	movs	r1, #98	; 0x62
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fe9b 	bl	8005746 <lis2mdl_write_reg>
 8005a10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e051      	b.n	8005adc <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	7b1a      	ldrb	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <LPS22HH_RegisterBusIO+0xcc>)
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <LPS22HH_RegisterBusIO+0xd0>)
 8005a7a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e020      	b.n	8005adc <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4798      	blx	r3
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8005aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	e016      	b.n	8005adc <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d112      	bne.n	8005adc <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10d      	bne.n	8005adc <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005ac4:	7afb      	ldrb	r3, [r7, #11]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2110      	movs	r1, #16
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9df 	bl	8005e8e <LPS22HH_Write_Reg>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ada:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005adc:	68fb      	ldr	r3, [r7, #12]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	080061b7 	.word	0x080061b7
 8005aec:	080061ed 	.word	0x080061ed

08005af0 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb0e 	bl	8006124 <LPS22HH_Initialize>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	e004      	b.n	8005b1e <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d111      	bne.n	8005b5c <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f877 	bl	8005c2c <LPS22HH_PRESS_Disable>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	e00d      	b.n	8005b66 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f918 	bl	8005d80 <LPS22HH_TEMP_Disable>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	e004      	b.n	8005b66 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3320      	adds	r3, #32
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fd1a 	bl	80065b8 <lps22hh_device_id_get>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e000      	b.n	8005b92 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	4a05      	ldr	r2, [pc, #20]	; (8005be0 <LPS22HH_GetCapabilities+0x44>)
 8005bca:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <LPS22HH_GetCapabilities+0x44>)
 8005bd0:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	43480000 	.word	0x43480000

08005be4 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e014      	b.n	8005c24 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f103 0220 	add.w	r2, r3, #32
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fb93 	bl	8006334 <lps22hh_data_rate_set>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
 8005c18:	e004      	b.n	8005c24 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e024      	b.n	8005c8c <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11a      	bne.n	8005c82 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f103 0220 	add.w	r2, r3, #32
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3333      	adds	r3, #51	; 0x33
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f000 fbb9 	bl	80063d0 <lps22hh_data_rate_get>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295
 8005c68:	e010      	b.n	8005c8c <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3320      	adds	r3, #32
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fb5f 	bl	8006334 <lps22hh_data_rate_set>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c80:	e004      	b.n	8005c8c <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f90f 	bl	8005ec4 <LPS22HH_GetOutputDataRate>
 8005ca6:	4603      	mov	r3, r0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d106      	bne.n	8005cd4 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005cc6:	ed97 0a00 	vldr	s0, [r7]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f95e 	bl	8005f8c <LPS22HH_SetOutputDataRate_When_Enabled>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	e005      	b.n	8005ce0 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005cd4:	ed97 0a00 	vldr	s0, [r7]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f9c9 	bl	8006070 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005cde:	4603      	mov	r3, r0
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f009 fa93 	bl	800f226 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3320      	adds	r3, #32
 8005d04:	f107 020c 	add.w	r2, r7, #12
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fc08 	bl	8006520 <lps22hh_pressure_raw_get>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1a:	e009      	b.n	8005d30 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fab0 	bl	8006284 <lps22hh_from_lsb_to_hpa>
 8005d24:	eef0 7a40 	vmov.f32	s15, s0
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e014      	b.n	8005d78 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f103 0220 	add.w	r2, r3, #32
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 fae9 	bl	8006334 <lps22hh_data_rate_set>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6c:	e004      	b.n	8005d78 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e024      	b.n	8005de0 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d11a      	bne.n	8005dd6 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f103 0220 	add.w	r2, r3, #32
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3333      	adds	r3, #51	; 0x33
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f000 fb0f 	bl	80063d0 <lps22hh_data_rate_get>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbc:	e010      	b.n	8005de0 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3320      	adds	r3, #32
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fab5 	bl	8006334 <lps22hh_data_rate_set>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	e004      	b.n	8005de0 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f865 	bl	8005ec4 <LPS22HH_GetOutputDataRate>
 8005dfa:	4603      	mov	r3, r0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d106      	bne.n	8005e28 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005e1a:	ed97 0a00 	vldr	s0, [r7]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8b4 	bl	8005f8c <LPS22HH_SetOutputDataRate_When_Enabled>
 8005e24:	4603      	mov	r3, r0
 8005e26:	e005      	b.n	8005e34 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005e28:	ed97 0a00 	vldr	s0, [r7]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f91f 	bl	8006070 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005e32:	4603      	mov	r3, r0
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f009 f9e9 	bl	800f226 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3320      	adds	r3, #32
 8005e58:	f107 020c 	add.w	r2, r7, #12
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fb87 	bl	8006572 <lps22hh_temperature_raw_get>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6e:	e00a      	b.n	8005e86 <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005e70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fa1d 	bl	80062b4 <lps22hh_from_lsb_to_celsius>
 8005e7a:	eef0 7a40 	vmov.f32	s15, s0
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	460b      	mov	r3, r1
 8005e98:	70fb      	strb	r3, [r7, #3]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f103 0020 	add.w	r0, r3, #32
 8005ea4:	1cba      	adds	r2, r7, #2
 8005ea6:	78f9      	ldrb	r1, [r7, #3]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f000 f9d2 	bl	8006252 <lps22hh_write_reg>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb8:	e000      	b.n	8005ebc <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3320      	adds	r3, #32
 8005ed6:	f107 020b 	add.w	r2, r7, #11
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fa77 	bl	80063d0 <lps22hh_data_rate_get>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	e03d      	b.n	8005f6a <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	2b07      	cmp	r3, #7
 8005ef2:	d835      	bhi.n	8005f60 <LPS22HH_GetOutputDataRate+0x9c>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <LPS22HH_GetOutputDataRate+0x38>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f1d 	.word	0x08005f1d
 8005f00:	08005f27 	.word	0x08005f27
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005f41 	.word	0x08005f41
 8005f10:	08005f49 	.word	0x08005f49
 8005f14:	08005f51 	.word	0x08005f51
 8005f18:	08005f59 	.word	0x08005f59
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
      break;
 8005f24:	e020      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f2c:	601a      	str	r2, [r3, #0]
      break;
 8005f2e:	e01b      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <LPS22HH_GetOutputDataRate+0xb0>)
 8005f34:	601a      	str	r2, [r3, #0]
      break;
 8005f36:	e017      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	4a0f      	ldr	r2, [pc, #60]	; (8005f78 <LPS22HH_GetOutputDataRate+0xb4>)
 8005f3c:	601a      	str	r2, [r3, #0]
      break;
 8005f3e:	e013      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <LPS22HH_GetOutputDataRate+0xb8>)
 8005f44:	601a      	str	r2, [r3, #0]
      break;
 8005f46:	e00f      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	; (8005f80 <LPS22HH_GetOutputDataRate+0xbc>)
 8005f4c:	601a      	str	r2, [r3, #0]
      break;
 8005f4e:	e00b      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <LPS22HH_GetOutputDataRate+0xc0>)
 8005f54:	601a      	str	r2, [r3, #0]
      break;
 8005f56:	e007      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	4a0b      	ldr	r2, [pc, #44]	; (8005f88 <LPS22HH_GetOutputDataRate+0xc4>)
 8005f5c:	601a      	str	r2, [r3, #0]
      break;
 8005f5e:	e003      	b.n	8005f68 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	60fb      	str	r3, [r7, #12]
      break;
 8005f66:	bf00      	nop
  }

  return ret;
 8005f68:	68fb      	ldr	r3, [r7, #12]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	41200000 	.word	0x41200000
 8005f78:	41c80000 	.word	0x41c80000
 8005f7c:	42480000 	.word	0x42480000
 8005f80:	42960000 	.word	0x42960000
 8005f84:	42c80000 	.word	0x42c80000
 8005f88:	43480000 	.word	0x43480000

08005f8c <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005f98:	edd7 7a00 	vldr	s15, [r7]
 8005f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa8:	d801      	bhi.n	8005fae <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e037      	b.n	800601e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005fae:	edd7 7a00 	vldr	s15, [r7]
 8005fb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbe:	d801      	bhi.n	8005fc4 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e02c      	b.n	800601e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005fc4:	edd7 7a00 	vldr	s15, [r7]
 8005fc8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd4:	d801      	bhi.n	8005fda <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e021      	b.n	800601e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005fda:	edd7 7a00 	vldr	s15, [r7]
 8005fde:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006064 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	d801      	bhi.n	8005ff0 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005fec:	2304      	movs	r3, #4
 8005fee:	e016      	b.n	800601e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005ff0:	edd7 7a00 	vldr	s15, [r7]
 8005ff4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006068 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8005ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	d801      	bhi.n	8006006 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006002:	2305      	movs	r3, #5
 8006004:	e00b      	b.n	800601e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006006:	edd7 7a00 	vldr	s15, [r7]
 800600a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800606c <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 800600e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006016:	d801      	bhi.n	800601c <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8006018:	2306      	movs	r3, #6
 800601a:	e000      	b.n	800601e <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800601c:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800601e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3320      	adds	r3, #32
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f000 f983 	bl	8006334 <lps22hh_data_rate_set>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	e00f      	b.n	800605a <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f103 0220 	add.w	r2, r3, #32
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3333      	adds	r3, #51	; 0x33
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f000 f9c2 	bl	80063d0 <lps22hh_data_rate_get>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	e000      	b.n	800605a <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	42480000 	.word	0x42480000
 8006068:	42960000 	.word	0x42960000
 800606c:	42c80000 	.word	0x42c80000

08006070 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800607c:	edd7 7a00 	vldr	s15, [r7]
 8006080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608c:	d801      	bhi.n	8006092 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 800608e:	2301      	movs	r3, #1
 8006090:	e037      	b.n	8006102 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006092:	edd7 7a00 	vldr	s15, [r7]
 8006096:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800609a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800609e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a2:	d801      	bhi.n	80060a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e02c      	b.n	8006102 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80060a8:	edd7 7a00 	vldr	s15, [r7]
 80060ac:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80060b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b8:	d801      	bhi.n	80060be <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 80060ba:	2303      	movs	r3, #3
 80060bc:	e021      	b.n	8006102 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80060be:	edd7 7a00 	vldr	s15, [r7]
 80060c2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006118 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 80060c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ce:	d801      	bhi.n	80060d4 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 80060d0:	2304      	movs	r3, #4
 80060d2:	e016      	b.n	8006102 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80060d4:	edd7 7a00 	vldr	s15, [r7]
 80060d8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800611c <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 80060dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e4:	d801      	bhi.n	80060ea <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80060e6:	2305      	movs	r3, #5
 80060e8:	e00b      	b.n	8006102 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80060ea:	edd7 7a00 	vldr	s15, [r7]
 80060ee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006120 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 80060f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fa:	d801      	bhi.n	8006100 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 80060fc:	2306      	movs	r3, #6
 80060fe:	e000      	b.n	8006102 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006100:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	42480000 	.word	0x42480000
 800611c:	42960000 	.word	0x42960000
 8006120:	42c80000 	.word	0x42c80000

08006124 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3320      	adds	r3, #32
 8006130:	2111      	movs	r1, #17
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa9d 	bl	8006672 <lps22hh_i3c_interface_set>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	e034      	b.n	80061ae <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3320      	adds	r3, #32
 8006148:	2110      	movs	r1, #16
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f8f2 	bl	8006334 <lps22hh_data_rate_set>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	e028      	b.n	80061ae <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3320      	adds	r3, #32
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fa5f 	bl	8006626 <lps22hh_lp_bandwidth_set>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 800616e:	f04f 33ff 	mov.w	r3, #4294967295
 8006172:	e01c      	b.n	80061ae <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3320      	adds	r3, #32
 8006178:	2101      	movs	r1, #1
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f8b4 	bl	80062e8 <lps22hh_block_data_update_set>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8006186:	f04f 33ff 	mov.w	r3, #4294967295
 800618a:	e010      	b.n	80061ae <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3320      	adds	r3, #32
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fa21 	bl	80065da <lps22hh_auto_increment_set>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	e004      	b.n	80061ae <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2203      	movs	r2, #3
 80061a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80061b6:	b590      	push	{r4, r7, lr}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	461a      	mov	r2, r3
 80061c2:	460b      	mov	r3, r1
 80061c4:	72fb      	strb	r3, [r7, #11]
 80061c6:	4613      	mov	r3, r2
 80061c8:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	695c      	ldr	r4, [r3, #20]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	7b1b      	ldrb	r3, [r3, #12]
 80061d6:	b298      	uxth	r0, r3
 80061d8:	7afb      	ldrb	r3, [r7, #11]
 80061da:	b299      	uxth	r1, r3
 80061dc:	893b      	ldrh	r3, [r7, #8]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	47a0      	blx	r4
 80061e2:	4603      	mov	r3, r0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	461a      	mov	r2, r3
 80061f8:	460b      	mov	r3, r1
 80061fa:	72fb      	strb	r3, [r7, #11]
 80061fc:	4613      	mov	r3, r2
 80061fe:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	691c      	ldr	r4, [r3, #16]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	7b1b      	ldrb	r3, [r3, #12]
 800620c:	b298      	uxth	r0, r3
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	b299      	uxth	r1, r3
 8006212:	893b      	ldrh	r3, [r7, #8]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	47a0      	blx	r4
 8006218:	4603      	mov	r3, r0
}
 800621a:	4618      	mov	r0, r3
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	bd90      	pop	{r4, r7, pc}

08006222 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006222:	b590      	push	{r4, r7, lr}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	461a      	mov	r2, r3
 800622e:	460b      	mov	r3, r1
 8006230:	72fb      	strb	r3, [r7, #11]
 8006232:	4613      	mov	r3, r2
 8006234:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685c      	ldr	r4, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68d8      	ldr	r0, [r3, #12]
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	7af9      	ldrb	r1, [r7, #11]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	47a0      	blx	r4
 8006246:	6178      	str	r0, [r7, #20]

  return ret;
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	4618      	mov	r0, r3
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}

08006252 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006252:	b590      	push	{r4, r7, lr}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	461a      	mov	r2, r3
 800625e:	460b      	mov	r3, r1
 8006260:	72fb      	strb	r3, [r7, #11]
 8006262:	4613      	mov	r3, r2
 8006264:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681c      	ldr	r4, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68d8      	ldr	r0, [r3, #12]
 800626e:	893b      	ldrh	r3, [r7, #8]
 8006270:	7af9      	ldrb	r1, [r7, #11]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	47a0      	blx	r4
 8006276:	6178      	str	r0, [r7, #20]

  return ret;
 8006278:	697b      	ldr	r3, [r7, #20]
}
 800627a:	4618      	mov	r0, r3
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}
	...

08006284 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80062b0 <lps22hh_from_lsb_to_hpa+0x2c>
 800629a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800629e:	eef0 7a66 	vmov.f32	s15, s13
}
 80062a2:	eeb0 0a67 	vmov.f32	s0, s15
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	49800000 	.word	0x49800000

080062b4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	4603      	mov	r3, r0
 80062bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80062be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80062e4 <lps22hh_from_lsb_to_celsius+0x30>
 80062ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062d2:	eef0 7a66 	vmov.f32	s15, s13
}
 80062d6:	eeb0 0a67 	vmov.f32	s0, s15
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	42c80000 	.word	0x42c80000

080062e8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80062f4:	f107 0208 	add.w	r2, r7, #8
 80062f8:	2301      	movs	r3, #1
 80062fa:	2110      	movs	r1, #16
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff90 	bl	8006222 <lps22hh_read_reg>
 8006302:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10f      	bne.n	800632a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	b2da      	uxtb	r2, r3
 8006312:	7a3b      	ldrb	r3, [r7, #8]
 8006314:	f362 0341 	bfi	r3, r2, #1, #1
 8006318:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800631a:	f107 0208 	add.w	r2, r7, #8
 800631e:	2301      	movs	r3, #1
 8006320:	2110      	movs	r1, #16
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ff95 	bl	8006252 <lps22hh_write_reg>
 8006328:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800632a:	68fb      	ldr	r3, [r7, #12]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006340:	f107 0210 	add.w	r2, r7, #16
 8006344:	2301      	movs	r3, #1
 8006346:	2110      	movs	r1, #16
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ff6a 	bl	8006222 <lps22hh_read_reg>
 800634e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006356:	f107 020c 	add.w	r2, r7, #12
 800635a:	2301      	movs	r3, #1
 800635c:	2111      	movs	r1, #17
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ff5f 	bl	8006222 <lps22hh_read_reg>
 8006364:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10f      	bne.n	800638c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	b2da      	uxtb	r2, r3
 8006374:	7c3b      	ldrb	r3, [r7, #16]
 8006376:	f362 1306 	bfi	r3, r2, #4, #3
 800637a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800637c:	f107 0210 	add.w	r2, r7, #16
 8006380:	2301      	movs	r3, #1
 8006382:	2110      	movs	r1, #16
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ff64 	bl	8006252 <lps22hh_write_reg>
 800638a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d119      	bne.n	80063c6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	091b      	lsrs	r3, r3, #4
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	7b3b      	ldrb	r3, [r7, #12]
 800639e:	f362 0341 	bfi	r3, r2, #1, #1
 80063a2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	7b3b      	ldrb	r3, [r7, #12]
 80063b0:	f362 0300 	bfi	r3, r2, #0, #1
 80063b4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80063b6:	f107 020c 	add.w	r2, r7, #12
 80063ba:	2301      	movs	r3, #1
 80063bc:	2111      	movs	r1, #17
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ff47 	bl	8006252 <lps22hh_write_reg>
 80063c4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80063c6:	697b      	ldr	r3, [r7, #20]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80063da:	f107 0210 	add.w	r2, r7, #16
 80063de:	2301      	movs	r3, #1
 80063e0:	2110      	movs	r1, #16
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff ff1d 	bl	8006222 <lps22hh_read_reg>
 80063e8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d107      	bne.n	8006400 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80063f0:	f107 020c 	add.w	r2, r7, #12
 80063f4:	2301      	movs	r3, #1
 80063f6:	2111      	movs	r1, #17
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff12 	bl	8006222 <lps22hh_read_reg>
 80063fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 8086 	bne.w	8006514 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006408:	f107 020c 	add.w	r2, r7, #12
 800640c:	2301      	movs	r3, #1
 800640e:	2111      	movs	r1, #17
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff ff06 	bl	8006222 <lps22hh_read_reg>
 8006416:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006418:	7b3b      	ldrb	r3, [r7, #12]
 800641a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	7b3b      	ldrb	r3, [r7, #12]
 8006424:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800642e:	7c3a      	ldrb	r2, [r7, #16]
 8006430:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006434:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006436:	4413      	add	r3, r2
 8006438:	2b15      	cmp	r3, #21
 800643a:	d867      	bhi.n	800650c <lps22hh_data_rate_get+0x13c>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <lps22hh_data_rate_get+0x74>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	0800649d 	.word	0x0800649d
 8006448:	080064ad 	.word	0x080064ad
 800644c:	080064b5 	.word	0x080064b5
 8006450:	080064bd 	.word	0x080064bd
 8006454:	080064c5 	.word	0x080064c5
 8006458:	080064cd 	.word	0x080064cd
 800645c:	080064fd 	.word	0x080064fd
 8006460:	08006505 	.word	0x08006505
 8006464:	080064a5 	.word	0x080064a5
 8006468:	0800650d 	.word	0x0800650d
 800646c:	0800650d 	.word	0x0800650d
 8006470:	0800650d 	.word	0x0800650d
 8006474:	0800650d 	.word	0x0800650d
 8006478:	0800650d 	.word	0x0800650d
 800647c:	0800650d 	.word	0x0800650d
 8006480:	0800650d 	.word	0x0800650d
 8006484:	0800650d 	.word	0x0800650d
 8006488:	080064d5 	.word	0x080064d5
 800648c:	080064dd 	.word	0x080064dd
 8006490:	080064e5 	.word	0x080064e5
 8006494:	080064ed 	.word	0x080064ed
 8006498:	080064f5 	.word	0x080064f5
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
        break;
 80064a2:	e038      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2208      	movs	r2, #8
 80064a8:	701a      	strb	r2, [r3, #0]
        break;
 80064aa:	e034      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2201      	movs	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
        break;
 80064b2:	e030      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2202      	movs	r2, #2
 80064b8:	701a      	strb	r2, [r3, #0]
        break;
 80064ba:	e02c      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2203      	movs	r2, #3
 80064c0:	701a      	strb	r2, [r3, #0]
        break;
 80064c2:	e028      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2204      	movs	r2, #4
 80064c8:	701a      	strb	r2, [r3, #0]
        break;
 80064ca:	e024      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2205      	movs	r2, #5
 80064d0:	701a      	strb	r2, [r3, #0]
        break;
 80064d2:	e020      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2211      	movs	r2, #17
 80064d8:	701a      	strb	r2, [r3, #0]
        break;
 80064da:	e01c      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2212      	movs	r2, #18
 80064e0:	701a      	strb	r2, [r3, #0]
        break;
 80064e2:	e018      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2213      	movs	r2, #19
 80064e8:	701a      	strb	r2, [r3, #0]
        break;
 80064ea:	e014      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2214      	movs	r2, #20
 80064f0:	701a      	strb	r2, [r3, #0]
        break;
 80064f2:	e010      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2215      	movs	r2, #21
 80064f8:	701a      	strb	r2, [r3, #0]
        break;
 80064fa:	e00c      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2206      	movs	r2, #6
 8006500:	701a      	strb	r2, [r3, #0]
        break;
 8006502:	e008      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2207      	movs	r2, #7
 8006508:	701a      	strb	r2, [r3, #0]
        break;
 800650a:	e004      	b.n	8006516 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
        break;
 8006512:	e000      	b.n	8006516 <lps22hh_data_rate_get+0x146>
    }
  }
 8006514:	bf00      	nop

  return ret;
 8006516:	697b      	ldr	r3, [r7, #20]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800652a:	f107 0208 	add.w	r2, r7, #8
 800652e:	2303      	movs	r3, #3
 8006530:	2128      	movs	r1, #40	; 0x28
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fe75 	bl	8006222 <lps22hh_read_reg>
 8006538:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800653a:	7abb      	ldrb	r3, [r7, #10]
 800653c:	461a      	mov	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	7a7a      	ldrb	r2, [r7, #9]
 800654a:	441a      	add	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	7a3a      	ldrb	r2, [r7, #8]
 8006558:	441a      	add	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	021a      	lsls	r2, r3, #8
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	601a      	str	r2, [r3, #0]

  return ret;
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800657c:	f107 0208 	add.w	r2, r7, #8
 8006580:	2302      	movs	r3, #2
 8006582:	212b      	movs	r1, #43	; 0x2b
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fe4c 	bl	8006222 <lps22hh_read_reg>
 800658a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800658c:	7a7b      	ldrb	r3, [r7, #9]
 800658e:	b21a      	sxth	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800659a:	b29b      	uxth	r3, r3
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	b29a      	uxth	r2, r3
 80065a0:	7a3b      	ldrb	r3, [r7, #8]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	b21a      	sxth	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80065ae:	68fb      	ldr	r3, [r7, #12]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80065c2:	2301      	movs	r3, #1
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	210f      	movs	r1, #15
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fe2a 	bl	8006222 <lps22hh_read_reg>
 80065ce:	60f8      	str	r0, [r7, #12]

  return ret;
 80065d0:	68fb      	ldr	r3, [r7, #12]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80065e6:	f107 0208 	add.w	r2, r7, #8
 80065ea:	2301      	movs	r3, #1
 80065ec:	2111      	movs	r1, #17
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fe17 	bl	8006222 <lps22hh_read_reg>
 80065f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10f      	bne.n	800661c <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	b2da      	uxtb	r2, r3
 8006604:	7a3b      	ldrb	r3, [r7, #8]
 8006606:	f362 1304 	bfi	r3, r2, #4, #1
 800660a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800660c:	f107 0208 	add.w	r2, r7, #8
 8006610:	2301      	movs	r3, #1
 8006612:	2111      	movs	r1, #17
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fe1c 	bl	8006252 <lps22hh_write_reg>
 800661a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800661c:	68fb      	ldr	r3, [r7, #12]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006632:	f107 0208 	add.w	r2, r7, #8
 8006636:	2301      	movs	r3, #1
 8006638:	2110      	movs	r1, #16
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fdf1 	bl	8006222 <lps22hh_read_reg>
 8006640:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10f      	bne.n	8006668 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	b2da      	uxtb	r2, r3
 8006650:	7a3b      	ldrb	r3, [r7, #8]
 8006652:	f362 0383 	bfi	r3, r2, #2, #2
 8006656:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006658:	f107 0208 	add.w	r2, r7, #8
 800665c:	2301      	movs	r3, #1
 800665e:	2110      	movs	r1, #16
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fdf6 	bl	8006252 <lps22hh_write_reg>
 8006666:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006668:	68fb      	ldr	r3, [r7, #12]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800667e:	f107 0208 	add.w	r2, r7, #8
 8006682:	2301      	movs	r3, #1
 8006684:	210e      	movs	r1, #14
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fdcb 	bl	8006222 <lps22hh_read_reg>
 800668c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d118      	bne.n	80066c6 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2da      	uxtb	r2, r3
 800669c:	7a3b      	ldrb	r3, [r7, #8]
 800669e:	f362 0341 	bfi	r3, r2, #1, #1
 80066a2:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	7a3b      	ldrb	r3, [r7, #8]
 80066b0:	f362 13c7 	bfi	r3, r2, #7, #1
 80066b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80066b6:	f107 0208 	add.w	r2, r7, #8
 80066ba:	2301      	movs	r3, #1
 80066bc:	210e      	movs	r1, #14
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff fdc7 	bl	8006252 <lps22hh_write_reg>
 80066c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066c6:	68fb      	ldr	r3, [r7, #12]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e051      	b.n	8006790 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	7b1a      	ldrb	r2, [r3, #12]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a1d      	ldr	r2, [pc, #116]	; (800679c <LSM6DSO_RegisterBusIO+0xcc>)
 8006728:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <LSM6DSO_RegisterBusIO+0xd0>)
 800672e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	e020      	b.n	8006790 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e016      	b.n	8006790 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d112      	bne.n	8006790 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10d      	bne.n	8006790 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006774:	230c      	movs	r3, #12
 8006776:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	461a      	mov	r2, r3
 800677c:	2112      	movs	r1, #18
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 ff59 	bl	8007636 <LSM6DSO_Write_Reg>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006790:	68fb      	ldr	r3, [r7, #12]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	08007ad9 	.word	0x08007ad9
 80067a0:	08007b0f 	.word	0x08007b0f

080067a4 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3320      	adds	r3, #32
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fe97 	bl	80084e6 <lsm6dso_i3c_disable_set>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	e060      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3320      	adds	r3, #32
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fe65 	bl	800849a <lsm6dso_auto_increment_set>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295
 80067da:	e054      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3320      	adds	r3, #32
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 fd66 	bl	80082b4 <lsm6dso_block_data_update_set>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e048      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3320      	adds	r3, #32
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 feb9 	bl	8008572 <lsm6dso_fifo_mode_set>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	e03c      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2204      	movs	r2, #4
 8006810:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3320      	adds	r3, #32
 8006818:	2100      	movs	r1, #0
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fa20 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8006826:	f04f 33ff 	mov.w	r3, #4294967295
 800682a:	e02c      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3320      	adds	r3, #32
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f001 f9b6 	bl	8007ba4 <lsm6dso_xl_full_scale_set>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295
 8006842:	e020      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3320      	adds	r3, #32
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fbd0 	bl	8007ff8 <lsm6dso_gy_data_rate_set>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800685e:	f04f 33ff 	mov.w	r3, #4294967295
 8006862:	e010      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3320      	adds	r3, #32
 8006868:	2106      	movs	r1, #6
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fb5c 	bl	8007f28 <lsm6dso_gy_full_scale_set>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	e004      	b.n	8006886 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f888 	bl	80069ac <LSM6DSO_ACC_Disable>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	e015      	b.n	80068d4 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fc2e 	bl	800710a <LSM6DSO_GYRO_Disable>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80068b4:	f04f 33ff 	mov.w	r3, #4294967295
 80068b8:	e00c      	b.n	80068d4 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3320      	adds	r3, #32
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fdc3 	bl	8008478 <lsm6dso_device_id_get>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295
 80068fc:	e000      	b.n	8006900 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2201      	movs	r2, #1
 800691c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2200      	movs	r2, #0
 8006922:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006930:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2210      	movs	r2, #16
 8006936:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	4a07      	ldr	r2, [pc, #28]	; (8006960 <LSM6DSO_GetCapabilities+0x58>)
 8006942:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	4a06      	ldr	r2, [pc, #24]	; (8006960 <LSM6DSO_GetCapabilities+0x58>)
 8006948:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	45d02000 	.word	0x45d02000

08006964 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e014      	b.n	80069a4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f103 0220 	add.w	r2, r3, #32
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f001 f969 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	e004      	b.n	80069a4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e01f      	b.n	8006a02 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f103 0220 	add.w	r2, r3, #32
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3333      	adds	r3, #51	; 0x33
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f001 fa42 	bl	8007e58 <lsm6dso_xl_data_rate_get>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	e010      	b.n	8006a02 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3320      	adds	r3, #32
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 f93a 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80069f2:	f04f 33ff 	mov.w	r3, #4294967295
 80069f6:	e004      	b.n	8006a02 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3320      	adds	r3, #32
 8006a1e:	f107 020b 	add.w	r2, r7, #11
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 f8e3 	bl	8007bf0 <lsm6dso_xl_full_scale_get>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006a30:	f04f 33ff 	mov.w	r3, #4294967295
 8006a34:	e023      	b.n	8006a7e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d81b      	bhi.n	8006a74 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006a3c:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a65 	.word	0x08006a65
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8006a58:	601a      	str	r2, [r3, #0]
      break;
 8006a5a:	e00f      	b.n	8006a7c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	4a0b      	ldr	r2, [pc, #44]	; (8006a8c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006a60:	601a      	str	r2, [r3, #0]
      break;
 8006a62:	e00b      	b.n	8006a7c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006a68:	601a      	str	r2, [r3, #0]
      break;
 8006a6a:	e007      	b.n	8006a7c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006a70:	601a      	str	r2, [r3, #0]
      break;
 8006a72:	e003      	b.n	8006a7c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	60fb      	str	r3, [r7, #12]
      break;
 8006a7a:	bf00      	nop
  }

  return ret;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	3d79db23 	.word	0x3d79db23
 8006a8c:	3df9db23 	.word	0x3df9db23
 8006a90:	3e79db23 	.word	0x3e79db23
 8006a94:	3ef9db23 	.word	0x3ef9db23

08006a98 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3320      	adds	r3, #32
 8006aaa:	f107 020b 	add.w	r2, r7, #11
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f9d1 	bl	8007e58 <lsm6dso_xl_data_rate_get>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006abc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac0:	e054      	b.n	8006b6c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2b0b      	cmp	r3, #11
 8006ac6:	d84c      	bhi.n	8006b62 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b13 	.word	0x08006b13
 8006ad8:	08006b1b 	.word	0x08006b1b
 8006adc:	08006b23 	.word	0x08006b23
 8006ae0:	08006b2b 	.word	0x08006b2b
 8006ae4:	08006b33 	.word	0x08006b33
 8006ae8:	08006b3b 	.word	0x08006b3b
 8006aec:	08006b43 	.word	0x08006b43
 8006af0:	08006b4b 	.word	0x08006b4b
 8006af4:	08006b53 	.word	0x08006b53
 8006af8:	08006b5b 	.word	0x08006b5b
 8006afc:	08006b0b 	.word	0x08006b0b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
      break;
 8006b08:	e02f      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8006b0e:	601a      	str	r2, [r3, #0]
      break;
 8006b10:	e02b      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8006b16:	601a      	str	r2, [r3, #0]
      break;
 8006b18:	e027      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8006b1e:	601a      	str	r2, [r3, #0]
      break;
 8006b20:	e023      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8006b26:	601a      	str	r2, [r3, #0]
      break;
 8006b28:	e01f      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8006b2e:	601a      	str	r2, [r3, #0]
      break;
 8006b30:	e01b      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8006b36:	601a      	str	r2, [r3, #0]
      break;
 8006b38:	e017      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006b3e:	601a      	str	r2, [r3, #0]
      break;
 8006b40:	e013      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8006b46:	601a      	str	r2, [r3, #0]
      break;
 8006b48:	e00f      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006b4e:	601a      	str	r2, [r3, #0]
      break;
 8006b50:	e00b      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8006b56:	601a      	str	r2, [r3, #0]
      break;
 8006b58:	e007      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	4a0f      	ldr	r2, [pc, #60]	; (8006b9c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006b5e:	601a      	str	r2, [r3, #0]
      break;
 8006b60:	e003      	b.n	8006b6a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006b62:	f04f 33ff 	mov.w	r3, #4294967295
 8006b66:	60fb      	str	r3, [r7, #12]
      break;
 8006b68:	bf00      	nop
  }

  return ret;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	3fcccccd 	.word	0x3fcccccd
 8006b78:	41480000 	.word	0x41480000
 8006b7c:	41d00000 	.word	0x41d00000
 8006b80:	42500000 	.word	0x42500000
 8006b84:	42d00000 	.word	0x42d00000
 8006b88:	43500000 	.word	0x43500000
 8006b8c:	43d08000 	.word	0x43d08000
 8006b90:	44504000 	.word	0x44504000
 8006b94:	44d06000 	.word	0x44d06000
 8006b98:	45505000 	.word	0x45505000
 8006b9c:	45d05800 	.word	0x45d05800

08006ba0 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006bac:	2100      	movs	r1, #0
 8006bae:	ed97 0a00 	vldr	s0, [r7]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f806 	bl	8006bc4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	f000 80ea 	beq.w	8006db8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	f300 8163 	bgt.w	8006eb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d074      	beq.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006bf2:	e15d      	b.n	8006eb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f103 0020 	add.w	r0, r3, #32
 8006bfa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006bfe:	2301      	movs	r3, #1
 8006c00:	2114      	movs	r1, #20
 8006c02:	f000 ff9f 	bl	8007b44 <lsm6dso_read_reg>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8006c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c10:	e16c      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006c12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d025      	beq.n	8006c6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d10b      	bne.n	8006c42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3320      	adds	r3, #32
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 f815 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c40:	e154      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c46:	f36f 13c7 	bfc	r3, #7, #1
 8006c4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f103 0020 	add.w	r0, r3, #32
 8006c54:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006c58:	2301      	movs	r3, #1
 8006c5a:	2114      	movs	r1, #20
 8006c5c:	f000 ff8a 	bl	8007b74 <lsm6dso_write_reg>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	e13f      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f103 0020 	add.w	r0, r3, #32
 8006c72:	f107 0220 	add.w	r2, r7, #32
 8006c76:	2301      	movs	r3, #1
 8006c78:	2115      	movs	r1, #21
 8006c7a:	f000 ff63 	bl	8007b44 <lsm6dso_read_reg>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	e130      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d014      	beq.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8006c98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c9c:	f36f 1304 	bfc	r3, #4, #1
 8006ca0:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f103 0020 	add.w	r0, r3, #32
 8006caa:	f107 0220 	add.w	r2, r7, #32
 8006cae:	2301      	movs	r3, #1
 8006cb0:	2115      	movs	r1, #21
 8006cb2:	f000 ff5f 	bl	8007b74 <lsm6dso_write_reg>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8006cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc0:	e114      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006cc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006cc6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d400      	bmi.n	8006cd6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006cd4:	e0f0      	b.n	8006eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006cd6:	4b87      	ldr	r3, [pc, #540]	; (8006ef4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cda:	e0ed      	b.n	8006eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f103 0020 	add.w	r0, r3, #32
 8006ce2:	f107 021c 	add.w	r2, r7, #28
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	2114      	movs	r1, #20
 8006cea:	f000 ff2b 	bl	8007b44 <lsm6dso_read_reg>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf8:	e0f8      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006cfa:	7f3b      	ldrb	r3, [r7, #28]
 8006cfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d023      	beq.n	8006d4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d10b      	bne.n	8006d28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3320      	adds	r3, #32
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 ffa2 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	e0e1      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006d28:	7f3b      	ldrb	r3, [r7, #28]
 8006d2a:	f36f 13c7 	bfc	r3, #7, #1
 8006d2e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f103 0020 	add.w	r0, r3, #32
 8006d36:	f107 021c 	add.w	r2, r7, #28
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	2114      	movs	r1, #20
 8006d3e:	f000 ff19 	bl	8007b74 <lsm6dso_write_reg>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	e0ce      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f103 0020 	add.w	r0, r3, #32
 8006d54:	f107 0218 	add.w	r2, r7, #24
 8006d58:	2301      	movs	r3, #1
 8006d5a:	2115      	movs	r1, #21
 8006d5c:	f000 fef2 	bl	8007b44 <lsm6dso_read_reg>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	e0bf      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006d6c:	7e3b      	ldrb	r3, [r7, #24]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d112      	bne.n	8006d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8006d78:	7e3b      	ldrb	r3, [r7, #24]
 8006d7a:	f043 0310 	orr.w	r3, r3, #16
 8006d7e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f103 0020 	add.w	r0, r3, #32
 8006d86:	f107 0218 	add.w	r2, r7, #24
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	2115      	movs	r1, #21
 8006d8e:	f000 fef1 	bl	8007b74 <lsm6dso_write_reg>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9c:	e0a6      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006d9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006da2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006ef8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dae:	dc00      	bgt.n	8006db2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006db0:	e082      	b.n	8006eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006db2:	4b52      	ldr	r3, [pc, #328]	; (8006efc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db6:	e07f      	b.n	8006eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f103 0020 	add.w	r0, r3, #32
 8006dbe:	f107 0210 	add.w	r2, r7, #16
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	2115      	movs	r1, #21
 8006dc6:	f000 febd 	bl	8007b44 <lsm6dso_read_reg>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd4:	e08a      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006dd6:	7c3b      	ldrb	r3, [r7, #16]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d012      	beq.n	8006e08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006de2:	7c3b      	ldrb	r3, [r7, #16]
 8006de4:	f36f 1304 	bfc	r3, #4, #1
 8006de8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f103 0020 	add.w	r0, r3, #32
 8006df0:	f107 0210 	add.w	r2, r7, #16
 8006df4:	2301      	movs	r3, #1
 8006df6:	2115      	movs	r1, #21
 8006df8:	f000 febc 	bl	8007b74 <lsm6dso_write_reg>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295
 8006e06:	e071      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d108      	bne.n	8006e24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f979 	bl	800710a <LSM6DSO_GYRO_Disable>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8006e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e22:	e063      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f103 0020 	add.w	r0, r3, #32
 8006e2a:	f107 0214 	add.w	r2, r7, #20
 8006e2e:	2301      	movs	r3, #1
 8006e30:	2114      	movs	r1, #20
 8006e32:	f000 fe87 	bl	8007b44 <lsm6dso_read_reg>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e40:	e054      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8006e42:	7d3b      	ldrb	r3, [r7, #20]
 8006e44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d123      	bne.n	8006e96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d10b      	bne.n	8006e70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3320      	adds	r3, #32
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fefe 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	e03d      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006e70:	7d3b      	ldrb	r3, [r7, #20]
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f103 0020 	add.w	r0, r3, #32
 8006e7e:	f107 0214 	add.w	r2, r7, #20
 8006e82:	2301      	movs	r3, #1
 8006e84:	2114      	movs	r1, #20
 8006e86:	f000 fe75 	bl	8007b74 <lsm6dso_write_reg>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	e02a      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006e96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006e9a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006ef8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea6:	dc00      	bgt.n	8006eaa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006ea8:	e006      	b.n	8006eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eae:	e003      	b.n	8006eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006eb6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d102      	bne.n	8006ec6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	e012      	b.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006ed0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fbc9 	bl	800766c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006eda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006edc:	e005      	b.n	8006eea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006ede:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 fc5a 	bl	800779c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3730      	adds	r7, #48	; 0x30
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	41480000 	.word	0x41480000
 8006ef8:	43500000 	.word	0x43500000
 8006efc:	43500000 	.word	0x43500000

08006f00 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3320      	adds	r3, #32
 8006f12:	f107 020b 	add.w	r2, r7, #11
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fe69 	bl	8007bf0 <lsm6dso_xl_full_scale_get>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295
 8006f28:	e023      	b.n	8006f72 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d81b      	bhi.n	8006f68 <LSM6DSO_ACC_GetFullScale+0x68>
 8006f30:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <LSM6DSO_ACC_GetFullScale+0x38>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f51 	.word	0x08006f51
 8006f44:	08006f59 	.word	0x08006f59
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	601a      	str	r2, [r3, #0]
      break;
 8006f4e:	e00f      	b.n	8006f70 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2204      	movs	r2, #4
 8006f54:	601a      	str	r2, [r3, #0]
      break;
 8006f56:	e00b      	b.n	8006f70 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	601a      	str	r2, [r3, #0]
      break;
 8006f5e:	e007      	b.n	8006f70 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2210      	movs	r2, #16
 8006f64:	601a      	str	r2, [r3, #0]
      break;
 8006f66:	e003      	b.n	8006f70 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006f68:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6c:	60fb      	str	r3, [r7, #12]
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	68fb      	ldr	r3, [r7, #12]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop

08006f7c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	dd0b      	ble.n	8006fa4 <LSM6DSO_ACC_SetFullScale+0x28>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	dd06      	ble.n	8006fa0 <LSM6DSO_ACC_SetFullScale+0x24>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	dc01      	bgt.n	8006f9c <LSM6DSO_ACC_SetFullScale+0x20>
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e004      	b.n	8006fa6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e002      	b.n	8006fa6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e000      	b.n	8006fa6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006fa4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006fa6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3320      	adds	r3, #32
 8006fac:	7bfa      	ldrb	r2, [r7, #15]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fdf7 	bl	8007ba4 <lsm6dso_xl_full_scale_set>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc0:	e000      	b.n	8006fc4 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3320      	adds	r3, #32
 8006fda:	f107 0208 	add.w	r2, r7, #8
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 f9d8 	bl	8008396 <lsm6dso_acceleration_raw_get>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff0:	e00c      	b.n	800700c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006ff2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006ffa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007002:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3320      	adds	r3, #32
 8007028:	f107 0210 	add.w	r2, r7, #16
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f001 f9b1 	bl	8008396 <lsm6dso_acceleration_raw_get>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	e03c      	b.n	80070ba <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fce0 	bl	8006a0c <LSM6DSO_ACC_GetSensitivity>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	e030      	b.n	80070ba <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007058:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007064:	edd7 7a03 	vldr	s15, [r7, #12]
 8007068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007070:	ee17 2a90 	vmov	r2, s15
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007078:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007084:	edd7 7a03 	vldr	s15, [r7, #12]
 8007088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007090:	ee17 2a90 	vmov	r2, s15
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007098:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80070a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b0:	ee17 2a90 	vmov	r2, s15
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e014      	b.n	8007102 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f103 0220 	add.w	r2, r3, #32
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f000 ff86 	bl	8007ff8 <lsm6dso_gy_data_rate_set>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
 80070f6:	e004      	b.n	8007102 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e01f      	b.n	8007160 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f103 0220 	add.w	r2, r3, #32
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3334      	adds	r3, #52	; 0x34
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f001 f85f 	bl	80081f0 <lsm6dso_gy_data_rate_get>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8007138:	f04f 33ff 	mov.w	r3, #4294967295
 800713c:	e010      	b.n	8007160 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3320      	adds	r3, #32
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 ff57 	bl	8007ff8 <lsm6dso_gy_data_rate_set>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007150:	f04f 33ff 	mov.w	r3, #4294967295
 8007154:	e004      	b.n	8007160 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3320      	adds	r3, #32
 800717a:	f107 020b 	add.w	r2, r7, #11
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fef7 	bl	8007f74 <lsm6dso_gy_full_scale_get>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800718c:	f04f 33ff 	mov.w	r3, #4294967295
 8007190:	e02d      	b.n	80071ee <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d825      	bhi.n	80071e4 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071bd 	.word	0x080071bd
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071e5 	.word	0x080071e5
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	080071dd 	.word	0x080071dd
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80071c0:	601a      	str	r2, [r3, #0]
      break;
 80071c2:	e013      	b.n	80071ec <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	4a0d      	ldr	r2, [pc, #52]	; (80071fc <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80071c8:	601a      	str	r2, [r3, #0]
      break;
 80071ca:	e00f      	b.n	80071ec <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80071d0:	601a      	str	r2, [r3, #0]
      break;
 80071d2:	e00b      	b.n	80071ec <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4a0b      	ldr	r2, [pc, #44]	; (8007204 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80071d8:	601a      	str	r2, [r3, #0]
      break;
 80071da:	e007      	b.n	80071ec <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	4a0a      	ldr	r2, [pc, #40]	; (8007208 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80071e0:	601a      	str	r2, [r3, #0]
      break;
 80071e2:	e003      	b.n	80071ec <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80071e4:	f04f 33ff 	mov.w	r3, #4294967295
 80071e8:	60fb      	str	r3, [r7, #12]
      break;
 80071ea:	bf00      	nop
  }

  return ret;
 80071ec:	68fb      	ldr	r3, [r7, #12]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	408c0000 	.word	0x408c0000
 80071fc:	410c0000 	.word	0x410c0000
 8007200:	418c0000 	.word	0x418c0000
 8007204:	420c0000 	.word	0x420c0000
 8007208:	428c0000 	.word	0x428c0000

0800720c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3320      	adds	r3, #32
 800721e:	f107 020b 	add.w	r2, r7, #11
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f000 ffe3 	bl	80081f0 <lsm6dso_gy_data_rate_get>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295
 8007234:	e04e      	b.n	80072d4 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	2b0a      	cmp	r3, #10
 800723a:	d846      	bhi.n	80072ca <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007271 	.word	0x08007271
 8007248:	0800727b 	.word	0x0800727b
 800724c:	08007283 	.word	0x08007283
 8007250:	0800728b 	.word	0x0800728b
 8007254:	08007293 	.word	0x08007293
 8007258:	0800729b 	.word	0x0800729b
 800725c:	080072a3 	.word	0x080072a3
 8007260:	080072ab 	.word	0x080072ab
 8007264:	080072b3 	.word	0x080072b3
 8007268:	080072bb 	.word	0x080072bb
 800726c:	080072c3 	.word	0x080072c3
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
      break;
 8007278:	e02b      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	4a17      	ldr	r2, [pc, #92]	; (80072dc <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800727e:	601a      	str	r2, [r3, #0]
      break;
 8007280:	e027      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8007286:	601a      	str	r2, [r3, #0]
      break;
 8007288:	e023      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800728e:	601a      	str	r2, [r3, #0]
      break;
 8007290:	e01f      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	4a14      	ldr	r2, [pc, #80]	; (80072e8 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8007296:	601a      	str	r2, [r3, #0]
      break;
 8007298:	e01b      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	4a13      	ldr	r2, [pc, #76]	; (80072ec <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800729e:	601a      	str	r2, [r3, #0]
      break;
 80072a0:	e017      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80072a6:	601a      	str	r2, [r3, #0]
      break;
 80072a8:	e013      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	4a11      	ldr	r2, [pc, #68]	; (80072f4 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80072ae:	601a      	str	r2, [r3, #0]
      break;
 80072b0:	e00f      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80072b6:	601a      	str	r2, [r3, #0]
      break;
 80072b8:	e00b      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80072be:	601a      	str	r2, [r3, #0]
      break;
 80072c0:	e007      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80072c6:	601a      	str	r2, [r3, #0]
      break;
 80072c8:	e003      	b.n	80072d2 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	60fb      	str	r3, [r7, #12]
      break;
 80072d0:	bf00      	nop
  }

  return ret;
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	41480000 	.word	0x41480000
 80072e0:	41d00000 	.word	0x41d00000
 80072e4:	42500000 	.word	0x42500000
 80072e8:	42d00000 	.word	0x42d00000
 80072ec:	43500000 	.word	0x43500000
 80072f0:	43d08000 	.word	0x43d08000
 80072f4:	44504000 	.word	0x44504000
 80072f8:	44d06000 	.word	0x44d06000
 80072fc:	45505000 	.word	0x45505000
 8007300:	45d05800 	.word	0x45d05800

08007304 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007310:	2100      	movs	r1, #0
 8007312:	ed97 0a00 	vldr	s0, [r7]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f806 	bl	8007328 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800731c:	4603      	mov	r3, r0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	ed87 0a02 	vstr	s0, [r7, #8]
 8007334:	460b      	mov	r3, r1
 8007336:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8007346:	2b01      	cmp	r3, #1
 8007348:	d028      	beq.n	800739c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800734a:	e05c      	b.n	8007406 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f103 0020 	add.w	r0, r3, #32
 8007352:	f107 0214 	add.w	r2, r7, #20
 8007356:	2301      	movs	r3, #1
 8007358:	2116      	movs	r1, #22
 800735a:	f000 fbf3 	bl	8007b44 <lsm6dso_read_reg>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8007364:	f04f 33ff 	mov.w	r3, #4294967295
 8007368:	e06c      	b.n	8007444 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800736a:	7d3b      	ldrb	r3, [r7, #20]
 800736c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d04b      	beq.n	800740e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8007376:	7d3b      	ldrb	r3, [r7, #20]
 8007378:	f36f 13c7 	bfc	r3, #7, #1
 800737c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f103 0020 	add.w	r0, r3, #32
 8007384:	f107 0214 	add.w	r2, r7, #20
 8007388:	2301      	movs	r3, #1
 800738a:	2116      	movs	r1, #22
 800738c:	f000 fbf2 	bl	8007b74 <lsm6dso_write_reg>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d03b      	beq.n	800740e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8007396:	f04f 33ff 	mov.w	r3, #4294967295
 800739a:	e053      	b.n	8007444 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f103 0020 	add.w	r0, r3, #32
 80073a2:	f107 0210 	add.w	r2, r7, #16
 80073a6:	2301      	movs	r3, #1
 80073a8:	2116      	movs	r1, #22
 80073aa:	f000 fbcb 	bl	8007b44 <lsm6dso_read_reg>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295
 80073b8:	e044      	b.n	8007444 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80073ba:	7c3b      	ldrb	r3, [r7, #16]
 80073bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d112      	bne.n	80073ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80073c6:	7c3b      	ldrb	r3, [r7, #16]
 80073c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073cc:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f103 0020 	add.w	r0, r3, #32
 80073d4:	f107 0210 	add.w	r2, r7, #16
 80073d8:	2301      	movs	r3, #1
 80073da:	2116      	movs	r1, #22
 80073dc:	f000 fbca 	bl	8007b74 <lsm6dso_write_reg>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e02b      	b.n	8007444 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80073ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80073f0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800744c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80073f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fc:	dc00      	bgt.n	8007400 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80073fe:	e007      	b.n	8007410 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	e004      	b.n	8007410 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
 800740a:	61fb      	str	r3, [r7, #28]
      break;
 800740c:	e000      	b.n	8007410 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800740e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d102      	bne.n	800741e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	e012      	b.n	8007444 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007424:	2b01      	cmp	r3, #1
 8007426:	d106      	bne.n	8007436 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007428:	ed97 0a06 	vldr	s0, [r7, #24]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa45 	bl	80078bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8007432:	61f8      	str	r0, [r7, #28]
 8007434:	e005      	b.n	8007442 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007436:	ed97 0a06 	vldr	s0, [r7, #24]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 faca 	bl	80079d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8007440:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8007442:	69fb      	ldr	r3, [r7, #28]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	43500000 	.word	0x43500000
 8007450:	43500000 	.word	0x43500000

08007454 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3320      	adds	r3, #32
 8007466:	f107 020b 	add.w	r2, r7, #11
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fd81 	bl	8007f74 <lsm6dso_gy_full_scale_get>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007478:	f04f 33ff 	mov.w	r3, #4294967295
 800747c:	e030      	b.n	80074e0 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	2b06      	cmp	r3, #6
 8007482:	d828      	bhi.n	80074d6 <LSM6DSO_GYRO_GetFullScale+0x82>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074b1 	.word	0x080074b1
 8007490:	080074a9 	.word	0x080074a9
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074d7 	.word	0x080074d7
 800749c:	080074c3 	.word	0x080074c3
 80074a0:	080074d7 	.word	0x080074d7
 80074a4:	080074cd 	.word	0x080074cd
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	227d      	movs	r2, #125	; 0x7d
 80074ac:	601a      	str	r2, [r3, #0]
      break;
 80074ae:	e016      	b.n	80074de <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	22fa      	movs	r2, #250	; 0xfa
 80074b4:	601a      	str	r2, [r3, #0]
      break;
 80074b6:	e012      	b.n	80074de <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80074be:	601a      	str	r2, [r3, #0]
      break;
 80074c0:	e00d      	b.n	80074de <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074c8:	601a      	str	r2, [r3, #0]
      break;
 80074ca:	e008      	b.n	80074de <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80074d2:	601a      	str	r2, [r3, #0]
      break;
 80074d4:	e003      	b.n	80074de <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295
 80074da:	60fb      	str	r3, [r7, #12]
      break;
 80074dc:	bf00      	nop
  }

  return ret;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b7d      	cmp	r3, #125	; 0x7d
 80074f6:	dd12      	ble.n	800751e <LSM6DSO_GYRO_SetFullScale+0x36>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2bfa      	cmp	r3, #250	; 0xfa
 80074fc:	dd0d      	ble.n	800751a <LSM6DSO_GYRO_SetFullScale+0x32>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007504:	dd07      	ble.n	8007516 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750c:	dc01      	bgt.n	8007512 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800750e:	2304      	movs	r3, #4
 8007510:	e006      	b.n	8007520 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007512:	2306      	movs	r3, #6
 8007514:	e004      	b.n	8007520 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007516:	2302      	movs	r3, #2
 8007518:	e002      	b.n	8007520 <LSM6DSO_GYRO_SetFullScale+0x38>
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <LSM6DSO_GYRO_SetFullScale+0x38>
 800751e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007520:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3320      	adds	r3, #32
 8007526:	7bfa      	ldrb	r2, [r7, #15]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fcfc 	bl	8007f28 <lsm6dso_gy_full_scale_set>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8007536:	f04f 33ff 	mov.w	r3, #4294967295
 800753a:	e000      	b.n	800753e <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3320      	adds	r3, #32
 8007554:	f107 0208 	add.w	r2, r7, #8
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fed0 	bl	8008300 <lsm6dso_angular_rate_raw_get>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007566:	f04f 33ff 	mov.w	r3, #4294967295
 800756a:	e00c      	b.n	8007586 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800756c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007574:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800757c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3320      	adds	r3, #32
 800759c:	f107 0210 	add.w	r2, r7, #16
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 feac 	bl	8008300 <lsm6dso_angular_rate_raw_get>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295
 80075b2:	e03c      	b.n	800762e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fdd4 	bl	8007168 <LSM6DSO_GYRO_GetSensitivity>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ca:	e030      	b.n	800762e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80075cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e4:	ee17 2a90 	vmov	r2, s15
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80075ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007604:	ee17 2a90 	vmov	r2, s15
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800760c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007618:	edd7 7a03 	vldr	s15, [r7, #12]
 800761c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007624:	ee17 2a90 	vmov	r2, s15
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
 8007642:	4613      	mov	r3, r2
 8007644:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f103 0020 	add.w	r0, r3, #32
 800764c:	1cba      	adds	r2, r7, #2
 800764e:	78f9      	ldrb	r1, [r7, #3]
 8007650:	2301      	movs	r3, #1
 8007652:	f000 fa8f 	bl	8007b74 <lsm6dso_write_reg>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800765c:	f04f 33ff 	mov.w	r3, #4294967295
 8007660:	e000      	b.n	8007664 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007678:	edd7 7a00 	vldr	s15, [r7]
 800767c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800777c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007688:	d801      	bhi.n	800768e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800768a:	230b      	movs	r3, #11
 800768c:	e063      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800768e:	edd7 7a00 	vldr	s15, [r7]
 8007692:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	d801      	bhi.n	80076a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e058      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076a4:	edd7 7a00 	vldr	s15, [r7]
 80076a8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80076ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	d801      	bhi.n	80076ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e04d      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076ba:	edd7 7a00 	vldr	s15, [r7]
 80076be:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007780 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80076c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d801      	bhi.n	80076d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80076cc:	2303      	movs	r3, #3
 80076ce:	e042      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076d0:	edd7 7a00 	vldr	s15, [r7]
 80076d4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007784 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80076d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e0:	d801      	bhi.n	80076e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80076e2:	2304      	movs	r3, #4
 80076e4:	e037      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076e6:	edd7 7a00 	vldr	s15, [r7]
 80076ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007788 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80076ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	d801      	bhi.n	80076fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80076f8:	2305      	movs	r3, #5
 80076fa:	e02c      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80076fc:	edd7 7a00 	vldr	s15, [r7]
 8007700:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800778c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8007704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	d801      	bhi.n	8007712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800770e:	2306      	movs	r3, #6
 8007710:	e021      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007712:	edd7 7a00 	vldr	s15, [r7]
 8007716:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007790 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800771a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d801      	bhi.n	8007728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8007724:	2307      	movs	r3, #7
 8007726:	e016      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007728:	edd7 7a00 	vldr	s15, [r7]
 800772c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007794 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8007730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007738:	d801      	bhi.n	800773e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800773a:	2308      	movs	r3, #8
 800773c:	e00b      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800773e:	edd7 7a00 	vldr	s15, [r7]
 8007742:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007798 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8007746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800774a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774e:	d801      	bhi.n	8007754 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007750:	2309      	movs	r3, #9
 8007752:	e000      	b.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007754:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007756:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3320      	adds	r3, #32
 800775c:	7bfa      	ldrb	r2, [r7, #15]
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fa7d 	bl	8007c60 <lsm6dso_xl_data_rate_set>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800776c:	f04f 33ff 	mov.w	r3, #4294967295
 8007770:	e000      	b.n	8007774 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	3fcccccd 	.word	0x3fcccccd
 8007780:	42500000 	.word	0x42500000
 8007784:	42d00000 	.word	0x42d00000
 8007788:	43500000 	.word	0x43500000
 800778c:	43d08000 	.word	0x43d08000
 8007790:	44504000 	.word	0x44504000
 8007794:	44d06000 	.word	0x44d06000
 8007798:	45505000 	.word	0x45505000

0800779c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077a8:	edd7 7a00 	vldr	s15, [r7]
 80077ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800789c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80077b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b8:	d801      	bhi.n	80077be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80077ba:	230b      	movs	r3, #11
 80077bc:	e063      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077be:	edd7 7a00 	vldr	s15, [r7]
 80077c2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80077c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ce:	d801      	bhi.n	80077d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e058      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077d4:	edd7 7a00 	vldr	s15, [r7]
 80077d8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80077dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	d801      	bhi.n	80077ea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e04d      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80077ea:	edd7 7a00 	vldr	s15, [r7]
 80077ee:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80078a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80077f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077fa:	d801      	bhi.n	8007800 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80077fc:	2303      	movs	r3, #3
 80077fe:	e042      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007800:	edd7 7a00 	vldr	s15, [r7]
 8007804:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80078a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8007808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800780c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007810:	d801      	bhi.n	8007816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007812:	2304      	movs	r3, #4
 8007814:	e037      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007816:	edd7 7a00 	vldr	s15, [r7]
 800781a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80078a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800781e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007826:	d801      	bhi.n	800782c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007828:	2305      	movs	r3, #5
 800782a:	e02c      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800782c:	edd7 7a00 	vldr	s15, [r7]
 8007830:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80078ac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8007834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783c:	d801      	bhi.n	8007842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800783e:	2306      	movs	r3, #6
 8007840:	e021      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007842:	edd7 7a00 	vldr	s15, [r7]
 8007846:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80078b0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800784a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007852:	d801      	bhi.n	8007858 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007854:	2307      	movs	r3, #7
 8007856:	e016      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007858:	edd7 7a00 	vldr	s15, [r7]
 800785c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80078b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	d801      	bhi.n	800786e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800786a:	2308      	movs	r3, #8
 800786c:	e00b      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800786e:	edd7 7a00 	vldr	s15, [r7]
 8007872:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80078b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8007876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800787a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787e:	d801      	bhi.n	8007884 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007880:	2309      	movs	r3, #9
 8007882:	e000      	b.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007884:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	3fcccccd 	.word	0x3fcccccd
 80078a0:	42500000 	.word	0x42500000
 80078a4:	42d00000 	.word	0x42d00000
 80078a8:	43500000 	.word	0x43500000
 80078ac:	43d08000 	.word	0x43d08000
 80078b0:	44504000 	.word	0x44504000
 80078b4:	44d06000 	.word	0x44d06000
 80078b8:	45505000 	.word	0x45505000

080078bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80078c8:	edd7 7a00 	vldr	s15, [r7]
 80078cc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80078d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d8:	d801      	bhi.n	80078de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80078da:	2301      	movs	r3, #1
 80078dc:	e058      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80078de:	edd7 7a00 	vldr	s15, [r7]
 80078e2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80078e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ee:	d801      	bhi.n	80078f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e04d      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80078f4:	edd7 7a00 	vldr	s15, [r7]
 80078f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80079b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80078fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007904:	d801      	bhi.n	800790a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8007906:	2303      	movs	r3, #3
 8007908:	e042      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800790a:	edd7 7a00 	vldr	s15, [r7]
 800790e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80079bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791a:	d801      	bhi.n	8007920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800791c:	2304      	movs	r3, #4
 800791e:	e037      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007920:	edd7 7a00 	vldr	s15, [r7]
 8007924:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80079c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800792c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007930:	d801      	bhi.n	8007936 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007932:	2305      	movs	r3, #5
 8007934:	e02c      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007936:	edd7 7a00 	vldr	s15, [r7]
 800793a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80079c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800793e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007946:	d801      	bhi.n	800794c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8007948:	2306      	movs	r3, #6
 800794a:	e021      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800794c:	edd7 7a00 	vldr	s15, [r7]
 8007950:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80079c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795c:	d801      	bhi.n	8007962 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800795e:	2307      	movs	r3, #7
 8007960:	e016      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007962:	edd7 7a00 	vldr	s15, [r7]
 8007966:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80079cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800796a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800796e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007972:	d801      	bhi.n	8007978 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007974:	2308      	movs	r3, #8
 8007976:	e00b      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007978:	edd7 7a00 	vldr	s15, [r7]
 800797c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007988:	d801      	bhi.n	800798e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800798a:	2309      	movs	r3, #9
 800798c:	e000      	b.n	8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800798e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007990:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3320      	adds	r3, #32
 8007996:	7bfa      	ldrb	r2, [r7, #15]
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fb2c 	bl	8007ff8 <lsm6dso_gy_data_rate_set>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	e000      	b.n	80079ae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	42500000 	.word	0x42500000
 80079bc:	42d00000 	.word	0x42d00000
 80079c0:	43500000 	.word	0x43500000
 80079c4:	43d08000 	.word	0x43d08000
 80079c8:	44504000 	.word	0x44504000
 80079cc:	44d06000 	.word	0x44d06000
 80079d0:	45505000 	.word	0x45505000

080079d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80079e0:	edd7 7a00 	vldr	s15, [r7]
 80079e4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80079e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f0:	d801      	bhi.n	80079f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e058      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80079f6:	edd7 7a00 	vldr	s15, [r7]
 80079fa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80079fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a06:	d801      	bhi.n	8007a0c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e04d      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a0c:	edd7 7a00 	vldr	s15, [r7]
 8007a10:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007abc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	d801      	bhi.n	8007a22 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e042      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a22:	edd7 7a00 	vldr	s15, [r7]
 8007a26:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007ac0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a32:	d801      	bhi.n	8007a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007a34:	2304      	movs	r3, #4
 8007a36:	e037      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a38:	edd7 7a00 	vldr	s15, [r7]
 8007a3c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007ac4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a48:	d801      	bhi.n	8007a4e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007a4a:	2305      	movs	r3, #5
 8007a4c:	e02c      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a4e:	edd7 7a00 	vldr	s15, [r7]
 8007a52:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007ac8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8007a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	d801      	bhi.n	8007a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007a60:	2306      	movs	r3, #6
 8007a62:	e021      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a64:	edd7 7a00 	vldr	s15, [r7]
 8007a68:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007acc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a74:	d801      	bhi.n	8007a7a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007a76:	2307      	movs	r3, #7
 8007a78:	e016      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a7a:	edd7 7a00 	vldr	s15, [r7]
 8007a7e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007ad0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8a:	d801      	bhi.n	8007a90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007a8c:	2308      	movs	r3, #8
 8007a8e:	e00b      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007a90:	edd7 7a00 	vldr	s15, [r7]
 8007a94:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007ad4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa0:	d801      	bhi.n	8007aa6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007aa2:	2309      	movs	r3, #9
 8007aa4:	e000      	b.n	8007aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007aa6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	42500000 	.word	0x42500000
 8007ac0:	42d00000 	.word	0x42d00000
 8007ac4:	43500000 	.word	0x43500000
 8007ac8:	43d08000 	.word	0x43d08000
 8007acc:	44504000 	.word	0x44504000
 8007ad0:	44d06000 	.word	0x44d06000
 8007ad4:	45505000 	.word	0x45505000

08007ad8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	72fb      	strb	r3, [r7, #11]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	695c      	ldr	r4, [r3, #20]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	7b1b      	ldrb	r3, [r3, #12]
 8007af8:	b298      	uxth	r0, r3
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	b299      	uxth	r1, r3
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	47a0      	blx	r4
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd90      	pop	{r4, r7, pc}

08007b0e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007b0e:	b590      	push	{r4, r7, lr}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	72fb      	strb	r3, [r7, #11]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	691c      	ldr	r4, [r3, #16]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	7b1b      	ldrb	r3, [r3, #12]
 8007b2e:	b298      	uxth	r0, r3
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	b299      	uxth	r1, r3
 8007b34:	893b      	ldrh	r3, [r7, #8]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	47a0      	blx	r4
 8007b3a:	4603      	mov	r3, r0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	460b      	mov	r3, r1
 8007b52:	72fb      	strb	r3, [r7, #11]
 8007b54:	4613      	mov	r3, r2
 8007b56:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685c      	ldr	r4, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68d8      	ldr	r0, [r3, #12]
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	7af9      	ldrb	r1, [r7, #11]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	47a0      	blx	r4
 8007b68:	6178      	str	r0, [r7, #20]

  return ret;
 8007b6a:	697b      	ldr	r3, [r7, #20]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd90      	pop	{r4, r7, pc}

08007b74 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	460b      	mov	r3, r1
 8007b82:	72fb      	strb	r3, [r7, #11]
 8007b84:	4613      	mov	r3, r2
 8007b86:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681c      	ldr	r4, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68d8      	ldr	r0, [r3, #12]
 8007b90:	893b      	ldrh	r3, [r7, #8]
 8007b92:	7af9      	ldrb	r1, [r7, #11]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	47a0      	blx	r4
 8007b98:	6178      	str	r0, [r7, #20]

  return ret;
 8007b9a:	697b      	ldr	r3, [r7, #20]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd90      	pop	{r4, r7, pc}

08007ba4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	2110      	movs	r1, #16
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ffc3 	bl	8007b44 <lsm6dso_read_reg>
 8007bbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10f      	bne.n	8007be6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	7a3b      	ldrb	r3, [r7, #8]
 8007bd0:	f362 0383 	bfi	r3, r2, #2, #2
 8007bd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007bd6:	f107 0208 	add.w	r2, r7, #8
 8007bda:	2301      	movs	r3, #1
 8007bdc:	2110      	movs	r1, #16
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff ffc8 	bl	8007b74 <lsm6dso_write_reg>
 8007be4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007be6:	68fb      	ldr	r3, [r7, #12]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007bfa:	f107 0208 	add.w	r2, r7, #8
 8007bfe:	2301      	movs	r3, #1
 8007c00:	2110      	movs	r1, #16
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff ff9e 	bl	8007b44 <lsm6dso_read_reg>
 8007c08:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8007c0a:	7a3b      	ldrb	r3, [r7, #8]
 8007c0c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d81a      	bhi.n	8007c4c <lsm6dso_xl_full_scale_get+0x5c>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <lsm6dso_xl_full_scale_get+0x2c>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c35 	.word	0x08007c35
 8007c24:	08007c3d 	.word	0x08007c3d
 8007c28:	08007c45 	.word	0x08007c45
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e00f      	b.n	8007c54 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	701a      	strb	r2, [r3, #0]
      break;
 8007c3a:	e00b      	b.n	8007c54 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
      break;
 8007c42:	e007      	b.n	8007c54 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2203      	movs	r2, #3
 8007c48:	701a      	strb	r2, [r3, #0]
      break;
 8007c4a:	e003      	b.n	8007c54 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	bf00      	nop
  }

  return ret;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop

08007c60 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007c70:	f107 030c 	add.w	r3, r7, #12
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fca1 	bl	80085be <lsm6dso_fsm_enable_get>
 8007c7c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 80c4 	bne.w	8007e0e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007c86:	7b3b      	ldrb	r3, [r7, #12]
 8007c88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007c8e:	7b3b      	ldrb	r3, [r7, #12]
 8007c90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c94:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007c96:	4313      	orrs	r3, r2
 8007c98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007c9a:	7b3b      	ldrb	r3, [r7, #12]
 8007c9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ca0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007ca6:	7b3b      	ldrb	r3, [r7, #12]
 8007ca8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007cb2:	7b3b      	ldrb	r3, [r7, #12]
 8007cb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007cb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007cbe:	7b3b      	ldrb	r3, [r7, #12]
 8007cc0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007cc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007cca:	7b3b      	ldrb	r3, [r7, #12]
 8007ccc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007cd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007cd6:	7b3b      	ldrb	r3, [r7, #12]
 8007cd8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007cdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007ce2:	7b7b      	ldrb	r3, [r7, #13]
 8007ce4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ce8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007cea:	4313      	orrs	r3, r2
 8007cec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007cee:	7b7b      	ldrb	r3, [r7, #13]
 8007cf0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007cf4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007cfa:	7b7b      	ldrb	r3, [r7, #13]
 8007cfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007d02:	4313      	orrs	r3, r2
 8007d04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007d06:	7b7b      	ldrb	r3, [r7, #13]
 8007d08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007d12:	7b7b      	ldrb	r3, [r7, #13]
 8007d14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007d18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007d1e:	7b7b      	ldrb	r3, [r7, #13]
 8007d20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007d24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007d2a:	7b7b      	ldrb	r3, [r7, #13]
 8007d2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007d30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007d32:	4313      	orrs	r3, r2
 8007d34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007d36:	7b7b      	ldrb	r3, [r7, #13]
 8007d38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007d3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d163      	bne.n	8007e0e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007d46:	f107 030b 	add.w	r3, r7, #11
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc57 	bl	8008600 <lsm6dso_fsm_data_rate_get>
 8007d52:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d159      	bne.n	8007e0e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d853      	bhi.n	8007e08 <lsm6dso_xl_data_rate_set+0x1a8>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <lsm6dso_xl_data_rate_set+0x108>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d8b 	.word	0x08007d8b
 8007d70:	08007da9 	.word	0x08007da9
 8007d74:	08007dd3 	.word	0x08007dd3
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007d82:	e045      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	75fb      	strb	r3, [r7, #23]
            break;
 8007d88:	e042      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007d90:	2302      	movs	r3, #2
 8007d92:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007d94:	e03c      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d102      	bne.n	8007da2 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	75fb      	strb	r3, [r7, #23]
            break;
 8007da0:	e036      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	75fb      	strb	r3, [r7, #23]
            break;
 8007da6:	e033      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007dae:	2303      	movs	r3, #3
 8007db0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007db2:	e02d      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d102      	bne.n	8007dc0 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
            break;
 8007dbe:	e027      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d102      	bne.n	8007dcc <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	75fb      	strb	r3, [r7, #23]
            break;
 8007dca:	e021      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	75fb      	strb	r3, [r7, #23]
            break;
 8007dd0:	e01e      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007dd8:	2304      	movs	r3, #4
 8007dda:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007ddc:	e018      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007de4:	2304      	movs	r3, #4
 8007de6:	75fb      	strb	r3, [r7, #23]
            break;
 8007de8:	e012      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d102      	bne.n	8007df6 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007df0:	2304      	movs	r3, #4
 8007df2:	75fb      	strb	r3, [r7, #23]
            break;
 8007df4:	e00c      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d102      	bne.n	8007e02 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	75fb      	strb	r3, [r7, #23]
            break;
 8007e00:	e006      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	75fb      	strb	r3, [r7, #23]
            break;
 8007e06:	e003      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	75fb      	strb	r3, [r7, #23]
            break;
 8007e0c:	e000      	b.n	8007e10 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8007e0e:	bf00      	nop
    }
  }

  if (ret == 0)
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007e16:	f107 0208 	add.w	r2, r7, #8
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	2110      	movs	r1, #16
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fe90 	bl	8007b44 <lsm6dso_read_reg>
 8007e24:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10f      	bne.n	8007e4c <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	7a3b      	ldrb	r3, [r7, #8]
 8007e36:	f362 1307 	bfi	r3, r2, #4, #4
 8007e3a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007e3c:	f107 0208 	add.w	r2, r7, #8
 8007e40:	2301      	movs	r3, #1
 8007e42:	2110      	movs	r1, #16
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fe95 	bl	8007b74 <lsm6dso_write_reg>
 8007e4a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007e4c:	693b      	ldr	r3, [r7, #16]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop

08007e58 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007e62:	f107 0208 	add.w	r2, r7, #8
 8007e66:	2301      	movs	r3, #1
 8007e68:	2110      	movs	r1, #16
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fe6a 	bl	8007b44 <lsm6dso_read_reg>
 8007e70:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007e72:	7a3b      	ldrb	r3, [r7, #8]
 8007e74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b0b      	cmp	r3, #11
 8007e7c:	d84a      	bhi.n	8007f14 <lsm6dso_xl_data_rate_get+0xbc>
 8007e7e:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <lsm6dso_xl_data_rate_get+0x2c>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007eb5 	.word	0x08007eb5
 8007e88:	08007ebd 	.word	0x08007ebd
 8007e8c:	08007ec5 	.word	0x08007ec5
 8007e90:	08007ecd 	.word	0x08007ecd
 8007e94:	08007ed5 	.word	0x08007ed5
 8007e98:	08007edd 	.word	0x08007edd
 8007e9c:	08007ee5 	.word	0x08007ee5
 8007ea0:	08007eed 	.word	0x08007eed
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	08007efd 	.word	0x08007efd
 8007eac:	08007f05 	.word	0x08007f05
 8007eb0:	08007f0d 	.word	0x08007f0d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
      break;
 8007eba:	e02f      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
      break;
 8007ec2:	e02b      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	701a      	strb	r2, [r3, #0]
      break;
 8007eca:	e027      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	701a      	strb	r2, [r3, #0]
      break;
 8007ed2:	e023      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	701a      	strb	r2, [r3, #0]
      break;
 8007eda:	e01f      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2205      	movs	r2, #5
 8007ee0:	701a      	strb	r2, [r3, #0]
      break;
 8007ee2:	e01b      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2206      	movs	r2, #6
 8007ee8:	701a      	strb	r2, [r3, #0]
      break;
 8007eea:	e017      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2207      	movs	r2, #7
 8007ef0:	701a      	strb	r2, [r3, #0]
      break;
 8007ef2:	e013      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	701a      	strb	r2, [r3, #0]
      break;
 8007efa:	e00f      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2209      	movs	r2, #9
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e00b      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	220a      	movs	r2, #10
 8007f08:	701a      	strb	r2, [r3, #0]
      break;
 8007f0a:	e007      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	220b      	movs	r2, #11
 8007f10:	701a      	strb	r2, [r3, #0]
      break;
 8007f12:	e003      	b.n	8007f1c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2200      	movs	r2, #0
 8007f18:	701a      	strb	r2, [r3, #0]
      break;
 8007f1a:	bf00      	nop
  }

  return ret;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop

08007f28 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007f34:	f107 0208 	add.w	r2, r7, #8
 8007f38:	2301      	movs	r3, #1
 8007f3a:	2111      	movs	r1, #17
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fe01 	bl	8007b44 <lsm6dso_read_reg>
 8007f42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10f      	bne.n	8007f6a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	7a3b      	ldrb	r3, [r7, #8]
 8007f54:	f362 0343 	bfi	r3, r2, #1, #3
 8007f58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007f5a:	f107 0208 	add.w	r2, r7, #8
 8007f5e:	2301      	movs	r3, #1
 8007f60:	2111      	movs	r1, #17
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fe06 	bl	8007b74 <lsm6dso_write_reg>
 8007f68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007f7e:	f107 0208 	add.w	r2, r7, #8
 8007f82:	2301      	movs	r3, #1
 8007f84:	2111      	movs	r1, #17
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fddc 	bl	8007b44 <lsm6dso_read_reg>
 8007f8c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8007f8e:	7a3b      	ldrb	r3, [r7, #8]
 8007f90:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b06      	cmp	r3, #6
 8007f98:	d824      	bhi.n	8007fe4 <lsm6dso_gy_full_scale_get+0x70>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <lsm6dso_gy_full_scale_get+0x2c>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fbd 	.word	0x08007fbd
 8007fa4:	08007fc5 	.word	0x08007fc5
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fe5 	.word	0x08007fe5
 8007fb0:	08007fd5 	.word	0x08007fd5
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007fdd 	.word	0x08007fdd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
      break;
 8007fc2:	e013      	b.n	8007fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
      break;
 8007fca:	e00f      	b.n	8007fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	701a      	strb	r2, [r3, #0]
      break;
 8007fd2:	e00b      	b.n	8007fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	701a      	strb	r2, [r3, #0]
      break;
 8007fda:	e007      	b.n	8007fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2206      	movs	r2, #6
 8007fe0:	701a      	strb	r2, [r3, #0]
      break;
 8007fe2:	e003      	b.n	8007fec <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
      break;
 8007fea:	bf00      	nop
  }

  return ret;
 8007fec:	68fb      	ldr	r3, [r7, #12]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop

08007ff8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008008:	f107 030c 	add.w	r3, r7, #12
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fad5 	bl	80085be <lsm6dso_fsm_enable_get>
 8008014:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 80c4 	bne.w	80081a6 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800801e:	7b3b      	ldrb	r3, [r7, #12]
 8008020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008026:	7b3b      	ldrb	r3, [r7, #12]
 8008028:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800802c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800802e:	4313      	orrs	r3, r2
 8008030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008032:	7b3b      	ldrb	r3, [r7, #12]
 8008034:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800803a:	4313      	orrs	r3, r2
 800803c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800803e:	7b3b      	ldrb	r3, [r7, #12]
 8008040:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008046:	4313      	orrs	r3, r2
 8008048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800804a:	7b3b      	ldrb	r3, [r7, #12]
 800804c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008052:	4313      	orrs	r3, r2
 8008054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008056:	7b3b      	ldrb	r3, [r7, #12]
 8008058:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800805c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800805e:	4313      	orrs	r3, r2
 8008060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008062:	7b3b      	ldrb	r3, [r7, #12]
 8008064:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800806a:	4313      	orrs	r3, r2
 800806c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800806e:	7b3b      	ldrb	r3, [r7, #12]
 8008070:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008076:	4313      	orrs	r3, r2
 8008078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800807a:	7b7b      	ldrb	r3, [r7, #13]
 800807c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008082:	4313      	orrs	r3, r2
 8008084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008086:	7b7b      	ldrb	r3, [r7, #13]
 8008088:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800808c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800808e:	4313      	orrs	r3, r2
 8008090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008092:	7b7b      	ldrb	r3, [r7, #13]
 8008094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800809a:	4313      	orrs	r3, r2
 800809c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800809e:	7b7b      	ldrb	r3, [r7, #13]
 80080a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80080a6:	4313      	orrs	r3, r2
 80080a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80080aa:	7b7b      	ldrb	r3, [r7, #13]
 80080ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80080b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80080b6:	7b7b      	ldrb	r3, [r7, #13]
 80080b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80080bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80080be:	4313      	orrs	r3, r2
 80080c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80080c2:	7b7b      	ldrb	r3, [r7, #13]
 80080c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80080c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80080ca:	4313      	orrs	r3, r2
 80080cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80080ce:	7b7b      	ldrb	r3, [r7, #13]
 80080d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80080d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80080d6:	4313      	orrs	r3, r2
 80080d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d163      	bne.n	80081a6 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80080de:	f107 030b 	add.w	r3, r7, #11
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fa8b 	bl	8008600 <lsm6dso_fsm_data_rate_get>
 80080ea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d159      	bne.n	80081a6 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d853      	bhi.n	80081a0 <lsm6dso_gy_data_rate_set+0x1a8>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <lsm6dso_gy_data_rate_set+0x108>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008111 	.word	0x08008111
 8008104:	08008123 	.word	0x08008123
 8008108:	08008141 	.word	0x08008141
 800810c:	0800816b 	.word	0x0800816b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8008116:	2301      	movs	r3, #1
 8008118:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800811a:	e045      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	75fb      	strb	r3, [r7, #23]
            break;
 8008120:	e042      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008128:	2302      	movs	r3, #2
 800812a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800812c:	e03c      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d102      	bne.n	800813a <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008134:	2302      	movs	r3, #2
 8008136:	75fb      	strb	r3, [r7, #23]
            break;
 8008138:	e036      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	75fb      	strb	r3, [r7, #23]
            break;
 800813e:	e033      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008146:	2303      	movs	r3, #3
 8008148:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800814a:	e02d      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d102      	bne.n	8008158 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008152:	2303      	movs	r3, #3
 8008154:	75fb      	strb	r3, [r7, #23]
            break;
 8008156:	e027      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d102      	bne.n	8008164 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800815e:	2303      	movs	r3, #3
 8008160:	75fb      	strb	r3, [r7, #23]
            break;
 8008162:	e021      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	75fb      	strb	r3, [r7, #23]
            break;
 8008168:	e01e      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008170:	2304      	movs	r3, #4
 8008172:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008174:	e018      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d102      	bne.n	8008182 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800817c:	2304      	movs	r3, #4
 800817e:	75fb      	strb	r3, [r7, #23]
            break;
 8008180:	e012      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d102      	bne.n	800818e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008188:	2304      	movs	r3, #4
 800818a:	75fb      	strb	r3, [r7, #23]
            break;
 800818c:	e00c      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d102      	bne.n	800819a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008194:	2304      	movs	r3, #4
 8008196:	75fb      	strb	r3, [r7, #23]
            break;
 8008198:	e006      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	75fb      	strb	r3, [r7, #23]
            break;
 800819e:	e003      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	75fb      	strb	r3, [r7, #23]
            break;
 80081a4:	e000      	b.n	80081a8 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80081a6:	bf00      	nop
    }
  }

  if (ret == 0)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d107      	bne.n	80081be <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80081ae:	f107 0208 	add.w	r2, r7, #8
 80081b2:	2301      	movs	r3, #1
 80081b4:	2111      	movs	r1, #17
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fcc4 	bl	8007b44 <lsm6dso_read_reg>
 80081bc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10f      	bne.n	80081e4 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	7a3b      	ldrb	r3, [r7, #8]
 80081ce:	f362 1307 	bfi	r3, r2, #4, #4
 80081d2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80081d4:	f107 0208 	add.w	r2, r7, #8
 80081d8:	2301      	movs	r3, #1
 80081da:	2111      	movs	r1, #17
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff fcc9 	bl	8007b74 <lsm6dso_write_reg>
 80081e2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80081e4:	693b      	ldr	r3, [r7, #16]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop

080081f0 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80081fa:	f107 0208 	add.w	r2, r7, #8
 80081fe:	2301      	movs	r3, #1
 8008200:	2111      	movs	r1, #17
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fc9e 	bl	8007b44 <lsm6dso_read_reg>
 8008208:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800820a:	7a3b      	ldrb	r3, [r7, #8]
 800820c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b0a      	cmp	r3, #10
 8008214:	d844      	bhi.n	80082a0 <lsm6dso_gy_data_rate_get+0xb0>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <lsm6dso_gy_data_rate_get+0x2c>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008249 	.word	0x08008249
 8008220:	08008251 	.word	0x08008251
 8008224:	08008259 	.word	0x08008259
 8008228:	08008261 	.word	0x08008261
 800822c:	08008269 	.word	0x08008269
 8008230:	08008271 	.word	0x08008271
 8008234:	08008279 	.word	0x08008279
 8008238:	08008281 	.word	0x08008281
 800823c:	08008289 	.word	0x08008289
 8008240:	08008291 	.word	0x08008291
 8008244:	08008299 	.word	0x08008299
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
      break;
 800824e:	e02b      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2201      	movs	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
      break;
 8008256:	e027      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2202      	movs	r2, #2
 800825c:	701a      	strb	r2, [r3, #0]
      break;
 800825e:	e023      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2203      	movs	r2, #3
 8008264:	701a      	strb	r2, [r3, #0]
      break;
 8008266:	e01f      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2204      	movs	r2, #4
 800826c:	701a      	strb	r2, [r3, #0]
      break;
 800826e:	e01b      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2205      	movs	r2, #5
 8008274:	701a      	strb	r2, [r3, #0]
      break;
 8008276:	e017      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2206      	movs	r2, #6
 800827c:	701a      	strb	r2, [r3, #0]
      break;
 800827e:	e013      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2207      	movs	r2, #7
 8008284:	701a      	strb	r2, [r3, #0]
      break;
 8008286:	e00f      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2208      	movs	r2, #8
 800828c:	701a      	strb	r2, [r3, #0]
      break;
 800828e:	e00b      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2209      	movs	r2, #9
 8008294:	701a      	strb	r2, [r3, #0]
      break;
 8008296:	e007      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	220a      	movs	r2, #10
 800829c:	701a      	strb	r2, [r3, #0]
      break;
 800829e:	e003      	b.n	80082a8 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
      break;
 80082a6:	bf00      	nop
  }

  return ret;
 80082a8:	68fb      	ldr	r3, [r7, #12]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80082c0:	f107 0208 	add.w	r2, r7, #8
 80082c4:	2301      	movs	r3, #1
 80082c6:	2112      	movs	r1, #18
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fc3b 	bl	8007b44 <lsm6dso_read_reg>
 80082ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10f      	bne.n	80082f6 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	7a3b      	ldrb	r3, [r7, #8]
 80082e0:	f362 1386 	bfi	r3, r2, #6, #1
 80082e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80082e6:	f107 0208 	add.w	r2, r7, #8
 80082ea:	2301      	movs	r3, #1
 80082ec:	2112      	movs	r1, #18
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fc40 	bl	8007b74 <lsm6dso_write_reg>
 80082f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80082f6:	68fb      	ldr	r3, [r7, #12]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800830a:	f107 020c 	add.w	r2, r7, #12
 800830e:	2306      	movs	r3, #6
 8008310:	2122      	movs	r1, #34	; 0x22
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff fc16 	bl	8007b44 <lsm6dso_read_reg>
 8008318:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800831a:	7b7b      	ldrb	r3, [r7, #13]
 800831c:	b21a      	sxth	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008328:	b29b      	uxth	r3, r3
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	b29a      	uxth	r2, r3
 800832e:	7b3b      	ldrb	r3, [r7, #12]
 8008330:	b29b      	uxth	r3, r3
 8008332:	4413      	add	r3, r2
 8008334:	b29b      	uxth	r3, r3
 8008336:	b21a      	sxth	r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	3302      	adds	r3, #2
 8008342:	b212      	sxth	r2, r2
 8008344:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	3302      	adds	r3, #2
 800834a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800834e:	b29b      	uxth	r3, r3
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	b29a      	uxth	r2, r3
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	b29b      	uxth	r3, r3
 8008358:	4413      	add	r3, r2
 800835a:	b29a      	uxth	r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	3302      	adds	r3, #2
 8008360:	b212      	sxth	r2, r2
 8008362:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008364:	7c7a      	ldrb	r2, [r7, #17]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	3304      	adds	r3, #4
 800836a:	b212      	sxth	r2, r2
 800836c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	3304      	adds	r3, #4
 8008372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008376:	b29b      	uxth	r3, r3
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	b29a      	uxth	r2, r3
 800837c:	7c3b      	ldrb	r3, [r7, #16]
 800837e:	b29b      	uxth	r3, r3
 8008380:	4413      	add	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	3304      	adds	r3, #4
 8008388:	b212      	sxth	r2, r2
 800838a:	801a      	strh	r2, [r3, #0]

  return ret;
 800838c:	697b      	ldr	r3, [r7, #20]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b086      	sub	sp, #24
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80083a0:	f107 020c 	add.w	r2, r7, #12
 80083a4:	2306      	movs	r3, #6
 80083a6:	2128      	movs	r1, #40	; 0x28
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fbcb 	bl	8007b44 <lsm6dso_read_reg>
 80083ae:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80083b0:	7b7b      	ldrb	r3, [r7, #13]
 80083b2:	b21a      	sxth	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	7b3b      	ldrb	r3, [r7, #12]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4413      	add	r3, r2
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	b21a      	sxth	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80083d2:	7bfa      	ldrb	r2, [r7, #15]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	3302      	adds	r3, #2
 80083d8:	b212      	sxth	r2, r2
 80083da:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	3302      	adds	r3, #2
 80083e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4413      	add	r3, r2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	3302      	adds	r3, #2
 80083f6:	b212      	sxth	r2, r2
 80083f8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80083fa:	7c7a      	ldrb	r2, [r7, #17]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	3304      	adds	r3, #4
 8008400:	b212      	sxth	r2, r2
 8008402:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	3304      	adds	r3, #4
 8008408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800840c:	b29b      	uxth	r3, r3
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	b29a      	uxth	r2, r3
 8008412:	7c3b      	ldrb	r3, [r7, #16]
 8008414:	b29b      	uxth	r3, r3
 8008416:	4413      	add	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	3304      	adds	r3, #4
 800841e:	b212      	sxth	r2, r2
 8008420:	801a      	strh	r2, [r3, #0]

  return ret;
 8008422:	697b      	ldr	r3, [r7, #20]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8008438:	f107 0208 	add.w	r2, r7, #8
 800843c:	2301      	movs	r3, #1
 800843e:	2101      	movs	r1, #1
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff fb7f 	bl	8007b44 <lsm6dso_read_reg>
 8008446:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10f      	bne.n	800846e <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	f003 0303 	and.w	r3, r3, #3
 8008454:	b2da      	uxtb	r2, r3
 8008456:	7a3b      	ldrb	r3, [r7, #8]
 8008458:	f362 1387 	bfi	r3, r2, #6, #2
 800845c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800845e:	f107 0208 	add.w	r2, r7, #8
 8008462:	2301      	movs	r3, #1
 8008464:	2101      	movs	r1, #1
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fb84 	bl	8007b74 <lsm6dso_write_reg>
 800846c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008482:	2301      	movs	r3, #1
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	210f      	movs	r1, #15
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff fb5b 	bl	8007b44 <lsm6dso_read_reg>
 800848e:	60f8      	str	r0, [r7, #12]

  return ret;
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80084a6:	f107 0208 	add.w	r2, r7, #8
 80084aa:	2301      	movs	r3, #1
 80084ac:	2112      	movs	r1, #18
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fb48 	bl	8007b44 <lsm6dso_read_reg>
 80084b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10f      	bne.n	80084dc <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	7a3b      	ldrb	r3, [r7, #8]
 80084c6:	f362 0382 	bfi	r3, r2, #2, #1
 80084ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80084cc:	f107 0208 	add.w	r2, r7, #8
 80084d0:	2301      	movs	r3, #1
 80084d2:	2112      	movs	r1, #18
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fb4d 	bl	8007b74 <lsm6dso_write_reg>
 80084da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80084dc:	68fb      	ldr	r3, [r7, #12]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80084f2:	f107 020c 	add.w	r2, r7, #12
 80084f6:	2301      	movs	r3, #1
 80084f8:	2118      	movs	r1, #24
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fb22 	bl	8007b44 <lsm6dso_read_reg>
 8008500:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d111      	bne.n	800852c <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	09db      	lsrs	r3, r3, #7
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	b2da      	uxtb	r2, r3
 8008514:	7b3b      	ldrb	r3, [r7, #12]
 8008516:	f362 0341 	bfi	r3, r2, #1, #1
 800851a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800851c:	f107 020c 	add.w	r2, r7, #12
 8008520:	2301      	movs	r3, #1
 8008522:	2118      	movs	r1, #24
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fb25 	bl	8007b74 <lsm6dso_write_reg>
 800852a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d107      	bne.n	8008542 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8008532:	f107 0210 	add.w	r2, r7, #16
 8008536:	2301      	movs	r3, #1
 8008538:	2162      	movs	r1, #98	; 0x62
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fb02 	bl	8007b44 <lsm6dso_read_reg>
 8008540:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10f      	bne.n	8008568 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	b2da      	uxtb	r2, r3
 8008550:	7c3b      	ldrb	r3, [r7, #16]
 8008552:	f362 03c4 	bfi	r3, r2, #3, #2
 8008556:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8008558:	f107 0210 	add.w	r2, r7, #16
 800855c:	2301      	movs	r3, #1
 800855e:	2162      	movs	r1, #98	; 0x62
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fb07 	bl	8007b74 <lsm6dso_write_reg>
 8008566:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8008568:	697b      	ldr	r3, [r7, #20]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800857e:	f107 0208 	add.w	r2, r7, #8
 8008582:	2301      	movs	r3, #1
 8008584:	210a      	movs	r1, #10
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fadc 	bl	8007b44 <lsm6dso_read_reg>
 800858c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10f      	bne.n	80085b4 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	b2da      	uxtb	r2, r3
 800859c:	7a3b      	ldrb	r3, [r7, #8]
 800859e:	f362 0302 	bfi	r3, r2, #0, #3
 80085a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80085a4:	f107 0208 	add.w	r2, r7, #8
 80085a8:	2301      	movs	r3, #1
 80085aa:	210a      	movs	r1, #10
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fae1 	bl	8007b74 <lsm6dso_write_reg>
 80085b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80085c8:	2102      	movs	r1, #2
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff ff2e 	bl	800842c <lsm6dso_mem_bank_set>
 80085d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d106      	bne.n	80085e6 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80085d8:	2302      	movs	r3, #2
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	2146      	movs	r1, #70	; 0x46
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fab0 	bl	8007b44 <lsm6dso_read_reg>
 80085e4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80085ec:	2100      	movs	r1, #0
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff ff1c 	bl	800842c <lsm6dso_mem_bank_set>
 80085f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80085f6:	68fb      	ldr	r3, [r7, #12]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800860a:	2102      	movs	r1, #2
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff ff0d 	bl	800842c <lsm6dso_mem_bank_set>
 8008612:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d107      	bne.n	800862a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800861a:	f107 0208 	add.w	r2, r7, #8
 800861e:	2301      	movs	r3, #1
 8008620:	215f      	movs	r1, #95	; 0x5f
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff fa8e 	bl	8007b44 <lsm6dso_read_reg>
 8008628:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d12a      	bne.n	8008686 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8008630:	7a3b      	ldrb	r3, [r7, #8]
 8008632:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b03      	cmp	r3, #3
 800863a:	d81b      	bhi.n	8008674 <lsm6dso_fsm_data_rate_get+0x74>
 800863c:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <lsm6dso_fsm_data_rate_get+0x44>)
 800863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008642:	bf00      	nop
 8008644:	08008655 	.word	0x08008655
 8008648:	0800865d 	.word	0x0800865d
 800864c:	08008665 	.word	0x08008665
 8008650:	0800866d 	.word	0x0800866d
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
        break;
 800865a:	e00f      	b.n	800867c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2201      	movs	r2, #1
 8008660:	701a      	strb	r2, [r3, #0]
        break;
 8008662:	e00b      	b.n	800867c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2202      	movs	r2, #2
 8008668:	701a      	strb	r2, [r3, #0]
        break;
 800866a:	e007      	b.n	800867c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2203      	movs	r2, #3
 8008670:	701a      	strb	r2, [r3, #0]
        break;
 8008672:	e003      	b.n	800867c <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
        break;
 800867a:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800867c:	2100      	movs	r1, #0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fed4 	bl	800842c <lsm6dso_mem_bank_set>
 8008684:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008686:	68fb      	ldr	r3, [r7, #12]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	e034      	b.n	8008712 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	7b1a      	ldrb	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a0e      	ldr	r2, [pc, #56]	; (800871c <STTS751_RegisterBusIO+0x8c>)
 80086e4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a0d      	ldr	r2, [pc, #52]	; (8008720 <STTS751_RegisterBusIO+0x90>)
 80086ea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	e002      	b.n	8008712 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800870c:	f04f 33ff 	mov.w	r3, #4294967295
 8008710:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008712:	68fb      	ldr	r3, [r7, #12]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	08008ba5 	.word	0x08008ba5
 8008720:	08008c13 	.word	0x08008c13

08008724 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008732:	2b00      	cmp	r3, #0
 8008734:	d127      	bne.n	8008786 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3320      	adds	r3, #32
 800873a:	2101      	movs	r1, #1
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fc4c 	bl	8008fda <stts751_pin_event_route_set>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8008748:	f04f 33ff 	mov.w	r3, #4294967295
 800874c:	e020      	b.n	8008790 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3320      	adds	r3, #32
 800875a:	2103      	movs	r1, #3
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fbaf 	bl	8008ec0 <stts751_resolution_set>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	e010      	b.n	8008790 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3320      	adds	r3, #32
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	4618      	mov	r0, r3
 8008776:	f000 facd 	bl	8008d14 <stts751_temp_data_rate_set>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	e004      	b.n	8008790 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d108      	bne.n	80087bc <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f870 	bl	8008890 <STTS751_TEMP_Disable>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	e004      	b.n	80087c6 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3320      	adds	r3, #32
 80087dc:	f107 020c 	add.w	r2, r7, #12
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fc1f 	bl	8009026 <stts751_device_id_get>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
 80087f2:	e003      	b.n	80087fc <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80087f4:	7b7a      	ldrb	r2, [r7, #13]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2200      	movs	r2, #0
 8008812:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008834:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e012      	b.n	8008888 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008868:	eeb0 0a67 	vmov.f32	s0, s15
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8b5 	bl	80089dc <STTS751_TEMP_SetOutputDataRate>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	e004      	b.n	8008888 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e01c      	b.n	80088e0 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3334      	adds	r3, #52	; 0x34
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f81b 	bl	80088e8 <STTS751_TEMP_GetOutputDataRate>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	e010      	b.n	80088e0 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3320      	adds	r3, #32
 80088c2:	2180      	movs	r1, #128	; 0x80
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fa25 	bl	8008d14 <stts751_temp_data_rate_set>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295
 80088d4:	e004      	b.n	80088e0 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3320      	adds	r3, #32
 80088fa:	f107 020b 	add.w	r2, r7, #11
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fa5d 	bl	8008dc0 <stts751_temp_data_rate_get>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 800890c:	f04f 33ff 	mov.w	r3, #4294967295
 8008910:	e060      	b.n	80089d4 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8008912:	7afb      	ldrb	r3, [r7, #11]
 8008914:	2b90      	cmp	r3, #144	; 0x90
 8008916:	d021      	beq.n	800895c <STTS751_TEMP_GetOutputDataRate+0x74>
 8008918:	2b90      	cmp	r3, #144	; 0x90
 800891a:	dc56      	bgt.n	80089ca <STTS751_TEMP_GetOutputDataRate+0xe2>
 800891c:	2b09      	cmp	r3, #9
 800891e:	dc1b      	bgt.n	8008958 <STTS751_TEMP_GetOutputDataRate+0x70>
 8008920:	2b00      	cmp	r3, #0
 8008922:	db52      	blt.n	80089ca <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008924:	2b09      	cmp	r3, #9
 8008926:	d850      	bhi.n	80089ca <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	08008967 	.word	0x08008967
 8008934:	08008971 	.word	0x08008971
 8008938:	0800897b 	.word	0x0800897b
 800893c:	08008985 	.word	0x08008985
 8008940:	0800898f 	.word	0x0800898f
 8008944:	08008999 	.word	0x08008999
 8008948:	080089a3 	.word	0x080089a3
 800894c:	080089ad 	.word	0x080089ad
 8008950:	080089b7 	.word	0x080089b7
 8008954:	080089c1 	.word	0x080089c1
 8008958:	2b80      	cmp	r3, #128	; 0x80
 800895a:	d136      	bne.n	80089ca <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
      break;
 8008964:	e035      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800896c:	601a      	str	r2, [r3, #0]
      break;
 800896e:	e030      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8008976:	601a      	str	r2, [r3, #0]
      break;
 8008978:	e02b      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8008980:	601a      	str	r2, [r3, #0]
      break;
 8008982:	e026      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800898a:	601a      	str	r2, [r3, #0]
      break;
 800898c:	e021      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008994:	601a      	str	r2, [r3, #0]
      break;
 8008996:	e01c      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800899e:	601a      	str	r2, [r3, #0]
      break;
 80089a0:	e017      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80089a8:	601a      	str	r2, [r3, #0]
      break;
 80089aa:	e012      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80089b2:	601a      	str	r2, [r3, #0]
      break;
 80089b4:	e00d      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80089bc:	601a      	str	r2, [r3, #0]
      break;
 80089be:	e008      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80089c6:	601a      	str	r2, [r3, #0]
      break;
 80089c8:	e003      	b.n	80089d2 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295
 80089ce:	60fb      	str	r3, [r7, #12]
      break;
 80089d0:	bf00      	nop
  }

  return ret;
 80089d2:	68fb      	ldr	r3, [r7, #12]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3320      	adds	r3, #32
 80089ec:	f107 020e 	add.w	r2, r7, #14
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fa8a 	bl	8008f0c <stts751_resolution_get>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008a02:	e0a5      	b.n	8008b50 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8008a04:	edd7 7a00 	vldr	s15, [r7]
 8008a08:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008a0c:	eef4 7a47 	vcmp.f32	s15, s14
 8008a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a14:	d10e      	bne.n	8008a34 <STTS751_TEMP_SetOutputDataRate+0x58>
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d10b      	bne.n	8008a34 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3320      	adds	r3, #32
 8008a20:	2101      	movs	r1, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fa4c 	bl	8008ec0 <stts751_resolution_set>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8008a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a32:	e08d      	b.n	8008b50 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008a34:	edd7 7a00 	vldr	s15, [r7]
 8008a38:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008b58 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8008a3c:	eef4 7a47 	vcmp.f32	s15, s14
 8008a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a44:	d111      	bne.n	8008a6a <STTS751_TEMP_SetOutputDataRate+0x8e>
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d002      	beq.n	8008a52 <STTS751_TEMP_SetOutputDataRate+0x76>
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d10b      	bne.n	8008a6a <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3320      	adds	r3, #32
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fa31 	bl	8008ec0 <stts751_resolution_set>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	e072      	b.n	8008b50 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008a6a:	edd7 7a00 	vldr	s15, [r7]
 8008a6e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008b5c <STTS751_TEMP_SetOutputDataRate+0x180>
 8008a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7a:	d801      	bhi.n	8008a80 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e058      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008a80:	edd7 7a00 	vldr	s15, [r7]
 8008a84:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8008a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a90:	d801      	bhi.n	8008a96 <STTS751_TEMP_SetOutputDataRate+0xba>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e04d      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008a96:	edd7 7a00 	vldr	s15, [r7]
 8008a9a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	d801      	bhi.n	8008aac <STTS751_TEMP_SetOutputDataRate+0xd0>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e042      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008aac:	edd7 7a00 	vldr	s15, [r7]
 8008ab0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008abc:	d801      	bhi.n	8008ac2 <STTS751_TEMP_SetOutputDataRate+0xe6>
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e037      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008ac2:	edd7 7a00 	vldr	s15, [r7]
 8008ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad2:	d801      	bhi.n	8008ad8 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	e02c      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008ad8:	edd7 7a00 	vldr	s15, [r7]
 8008adc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae8:	d801      	bhi.n	8008aee <STTS751_TEMP_SetOutputDataRate+0x112>
 8008aea:	2305      	movs	r3, #5
 8008aec:	e021      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008aee:	edd7 7a00 	vldr	s15, [r7]
 8008af2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	d801      	bhi.n	8008b04 <STTS751_TEMP_SetOutputDataRate+0x128>
 8008b00:	2306      	movs	r3, #6
 8008b02:	e016      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008b04:	edd7 7a00 	vldr	s15, [r7]
 8008b08:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	d801      	bhi.n	8008b1a <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008b16:	2307      	movs	r3, #7
 8008b18:	e00b      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008b1a:	edd7 7a00 	vldr	s15, [r7]
 8008b1e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2a:	d801      	bhi.n	8008b30 <STTS751_TEMP_SetOutputDataRate+0x154>
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	e000      	b.n	8008b32 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008b30:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8008b32:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3320      	adds	r3, #32
 8008b38:	7bfa      	ldrb	r2, [r7, #15]
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f8e9 	bl	8008d14 <stts751_temp_data_rate_set>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	e000      	b.n	8008b50 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	42000000 	.word	0x42000000
 8008b5c:	3d800000 	.word	0x3d800000

08008b60 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3320      	adds	r3, #32
 8008b6e:	f107 020e 	add.w	r2, r7, #14
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fa01 	bl	8008f7c <stts751_temperature_raw_get>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	e00a      	b.n	8008b9c <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f8a8 	bl	8008ce0 <stts751_from_lsb_to_celsius>
 8008b90:	eef0 7a40 	vmov.f32	s15, s0
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b089      	sub	sp, #36	; 0x24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	72fb      	strb	r3, [r7, #11]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11f      	bne.n	8008c08 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	83fb      	strh	r3, [r7, #30]
 8008bcc:	e018      	b.n	8008c00 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	695c      	ldr	r4, [r3, #20]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	7b1b      	ldrb	r3, [r3, #12]
 8008bd6:	b298      	uxth	r0, r3
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	8bfb      	ldrh	r3, [r7, #30]
 8008bde:	4413      	add	r3, r2
 8008be0:	b299      	uxth	r1, r3
 8008be2:	8bfb      	ldrh	r3, [r7, #30]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	441a      	add	r2, r3
 8008be8:	2301      	movs	r3, #1
 8008bea:	47a0      	blx	r4
 8008bec:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf8:	e007      	b.n	8008c0a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008bfa:	8bfb      	ldrh	r3, [r7, #30]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	83fb      	strh	r3, [r7, #30]
 8008c00:	8bfa      	ldrh	r2, [r7, #30]
 8008c02:	893b      	ldrh	r3, [r7, #8]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d3e2      	bcc.n	8008bce <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008c08:	69bb      	ldr	r3, [r7, #24]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3724      	adds	r7, #36	; 0x24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd90      	pop	{r4, r7, pc}

08008c12 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008c12:	b590      	push	{r4, r7, lr}
 8008c14:	b089      	sub	sp, #36	; 0x24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	460b      	mov	r3, r1
 8008c20:	72fb      	strb	r3, [r7, #11]
 8008c22:	4613      	mov	r3, r2
 8008c24:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d11f      	bne.n	8008c76 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008c36:	2300      	movs	r3, #0
 8008c38:	83fb      	strh	r3, [r7, #30]
 8008c3a:	e018      	b.n	8008c6e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	691c      	ldr	r4, [r3, #16]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	7b1b      	ldrb	r3, [r3, #12]
 8008c44:	b298      	uxth	r0, r3
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	8bfb      	ldrh	r3, [r7, #30]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	b299      	uxth	r1, r3
 8008c50:	8bfb      	ldrh	r3, [r7, #30]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	441a      	add	r2, r3
 8008c56:	2301      	movs	r3, #1
 8008c58:	47a0      	blx	r4
 8008c5a:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008c62:	f04f 33ff 	mov.w	r3, #4294967295
 8008c66:	e007      	b.n	8008c78 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008c68:	8bfb      	ldrh	r3, [r7, #30]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	83fb      	strh	r3, [r7, #30]
 8008c6e:	8bfa      	ldrh	r2, [r7, #30]
 8008c70:	893b      	ldrh	r3, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d3e2      	bcc.n	8008c3c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008c76:	69bb      	ldr	r3, [r7, #24]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3724      	adds	r7, #36	; 0x24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd90      	pop	{r4, r7, pc}

08008c80 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	72fb      	strb	r3, [r7, #11]
 8008c90:	4613      	mov	r3, r2
 8008c92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685c      	ldr	r4, [r3, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68d8      	ldr	r0, [r3, #12]
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	7af9      	ldrb	r1, [r7, #11]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	47a0      	blx	r4
 8008ca4:	6178      	str	r0, [r7, #20]

  return ret;
 8008ca6:	697b      	ldr	r3, [r7, #20]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd90      	pop	{r4, r7, pc}

08008cb0 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	72fb      	strb	r3, [r7, #11]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681c      	ldr	r4, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68d8      	ldr	r0, [r3, #12]
 8008ccc:	893b      	ldrh	r3, [r7, #8]
 8008cce:	7af9      	ldrb	r1, [r7, #11]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	47a0      	blx	r4
 8008cd4:	6178      	str	r0, [r7, #20]

  return ret;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd90      	pop	{r4, r7, pc}

08008ce0 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008d10 <stts751_from_lsb_to_celsius+0x30>
 8008cfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cfe:	eef0 7a66 	vmov.f32	s15, s13
}
 8008d02:	eeb0 0a67 	vmov.f32	s0, s15
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	43800000 	.word	0x43800000

08008d14 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8008d20:	23aa      	movs	r3, #170	; 0xaa
 8008d22:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008d24:	f107 020c 	add.w	r2, r7, #12
 8008d28:	2301      	movs	r3, #1
 8008d2a:	2104      	movs	r1, #4
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff ffa7 	bl	8008c80 <stts751_read_reg>
 8008d32:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10f      	bne.n	8008d5a <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	7b3b      	ldrb	r3, [r7, #12]
 8008d44:	f362 0303 	bfi	r3, r2, #0, #4
 8008d48:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008d4a:	f107 020c 	add.w	r2, r7, #12
 8008d4e:	2301      	movs	r3, #1
 8008d50:	2104      	movs	r1, #4
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff ffac 	bl	8008cb0 <stts751_write_reg>
 8008d58:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d107      	bne.n	8008d70 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008d60:	f107 0210 	add.w	r2, r7, #16
 8008d64:	2301      	movs	r3, #1
 8008d66:	2103      	movs	r1, #3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ff89 	bl	8008c80 <stts751_read_reg>
 8008d6e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d111      	bne.n	8008d9a <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	09db      	lsrs	r3, r3, #7
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	7c3b      	ldrb	r3, [r7, #16]
 8008d84:	f362 1386 	bfi	r3, r2, #6, #1
 8008d88:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008d8a:	f107 0210 	add.w	r2, r7, #16
 8008d8e:	2301      	movs	r3, #1
 8008d90:	2103      	movs	r1, #3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff ff8c 	bl	8008cb0 <stts751_write_reg>
 8008d98:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <stts751_temp_data_rate_set+0xa2>
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	2b90      	cmp	r3, #144	; 0x90
 8008da4:	d107      	bne.n	8008db6 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8008da6:	f107 020b 	add.w	r2, r7, #11
 8008daa:	2301      	movs	r3, #1
 8008dac:	210f      	movs	r1, #15
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff ff7e 	bl	8008cb0 <stts751_write_reg>
 8008db4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008db6:	697b      	ldr	r3, [r7, #20]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008dca:	f107 0210 	add.w	r2, r7, #16
 8008dce:	2301      	movs	r3, #1
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ff54 	bl	8008c80 <stts751_read_reg>
 8008dd8:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d107      	bne.n	8008df0 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008de0:	f107 020c 	add.w	r2, r7, #12
 8008de4:	2301      	movs	r3, #1
 8008de6:	2103      	movs	r1, #3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff ff49 	bl	8008c80 <stts751_read_reg>
 8008dee:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008df0:	7b3b      	ldrb	r3, [r7, #12]
 8008df2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	01db      	lsls	r3, r3, #7
 8008dfa:	7c3a      	ldrb	r2, [r7, #16]
 8008dfc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008e00:	b2d2      	uxtb	r2, r2
 8008e02:	4413      	add	r3, r2
 8008e04:	2b90      	cmp	r3, #144	; 0x90
 8008e06:	d025      	beq.n	8008e54 <stts751_temp_data_rate_get+0x94>
 8008e08:	2b90      	cmp	r3, #144	; 0x90
 8008e0a:	dc4f      	bgt.n	8008eac <stts751_temp_data_rate_get+0xec>
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	dc1b      	bgt.n	8008e48 <stts751_temp_data_rate_get+0x88>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	db4b      	blt.n	8008eac <stts751_temp_data_rate_get+0xec>
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d849      	bhi.n	8008eac <stts751_temp_data_rate_get+0xec>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <stts751_temp_data_rate_get+0x60>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e5d 	.word	0x08008e5d
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e75 	.word	0x08008e75
 8008e30:	08008e7d 	.word	0x08008e7d
 8008e34:	08008e85 	.word	0x08008e85
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008e95 	.word	0x08008e95
 8008e40:	08008e9d 	.word	0x08008e9d
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	d12f      	bne.n	8008eac <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2280      	movs	r2, #128	; 0x80
 8008e50:	701a      	strb	r2, [r3, #0]
      break;
 8008e52:	e02f      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2290      	movs	r2, #144	; 0x90
 8008e58:	701a      	strb	r2, [r3, #0]
      break;
 8008e5a:	e02b      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	e027      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2201      	movs	r2, #1
 8008e68:	701a      	strb	r2, [r3, #0]
      break;
 8008e6a:	e023      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	701a      	strb	r2, [r3, #0]
      break;
 8008e72:	e01f      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2203      	movs	r2, #3
 8008e78:	701a      	strb	r2, [r3, #0]
      break;
 8008e7a:	e01b      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2204      	movs	r2, #4
 8008e80:	701a      	strb	r2, [r3, #0]
      break;
 8008e82:	e017      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2205      	movs	r2, #5
 8008e88:	701a      	strb	r2, [r3, #0]
      break;
 8008e8a:	e013      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2206      	movs	r2, #6
 8008e90:	701a      	strb	r2, [r3, #0]
      break;
 8008e92:	e00f      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2207      	movs	r2, #7
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e00b      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	701a      	strb	r2, [r3, #0]
      break;
 8008ea2:	e007      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2209      	movs	r2, #9
 8008ea8:	701a      	strb	r2, [r3, #0]
      break;
 8008eaa:	e003      	b.n	8008eb4 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2280      	movs	r2, #128	; 0x80
 8008eb0:	701a      	strb	r2, [r3, #0]
      break;
 8008eb2:	bf00      	nop
  }

  return ret;
 8008eb4:	697b      	ldr	r3, [r7, #20]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008ecc:	f107 0208 	add.w	r2, r7, #8
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	2103      	movs	r1, #3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fed3 	bl	8008c80 <stts751_read_reg>
 8008eda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10f      	bne.n	8008f02 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	7a3b      	ldrb	r3, [r7, #8]
 8008eec:	f362 0383 	bfi	r3, r2, #2, #2
 8008ef0:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008ef2:	f107 0208 	add.w	r2, r7, #8
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	2103      	movs	r1, #3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff fed8 	bl	8008cb0 <stts751_write_reg>
 8008f00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008f02:	68fb      	ldr	r3, [r7, #12]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008f16:	f107 0208 	add.w	r2, r7, #8
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	2103      	movs	r1, #3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff feae 	bl	8008c80 <stts751_read_reg>
 8008f24:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8008f26:	7a3b      	ldrb	r3, [r7, #8]
 8008f28:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d81a      	bhi.n	8008f68 <stts751_resolution_get+0x5c>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <stts751_resolution_get+0x2c>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f51 	.word	0x08008f51
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	08008f49 	.word	0x08008f49
 8008f44:	08008f61 	.word	0x08008f61
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	701a      	strb	r2, [r3, #0]
      break;
 8008f4e:	e00f      	b.n	8008f70 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
      break;
 8008f56:	e00b      	b.n	8008f70 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	701a      	strb	r2, [r3, #0]
      break;
 8008f5e:	e007      	b.n	8008f70 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2203      	movs	r2, #3
 8008f64:	701a      	strb	r2, [r3, #0]
      break;
 8008f66:	e003      	b.n	8008f70 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	701a      	strb	r2, [r3, #0]
      break;
 8008f6e:	bf00      	nop
  }

  return ret;
 8008f70:	68fb      	ldr	r3, [r7, #12]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop

08008f7c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	2100      	movs	r1, #0
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff fe75 	bl	8008c80 <stts751_read_reg>
 8008f96:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d118      	bne.n	8008fd0 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8008f9e:	f107 0208 	add.w	r2, r7, #8
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	2102      	movs	r1, #2
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff fe6a 	bl	8008c80 <stts751_read_reg>
 8008fac:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8008fae:	7a7b      	ldrb	r3, [r7, #9]
 8008fb0:	b21a      	sxth	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	7a3b      	ldrb	r3, [r7, #8]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	b21a      	sxth	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008fe6:	f107 0208 	add.w	r2, r7, #8
 8008fea:	2301      	movs	r3, #1
 8008fec:	2103      	movs	r1, #3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff fe46 	bl	8008c80 <stts751_read_reg>
 8008ff4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10f      	bne.n	800901c <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	b2da      	uxtb	r2, r3
 8009004:	7a3b      	ldrb	r3, [r7, #8]
 8009006:	f362 13c7 	bfi	r3, r2, #7, #1
 800900a:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800900c:	f107 0208 	add.w	r2, r7, #8
 8009010:	2301      	movs	r3, #1
 8009012:	2103      	movs	r1, #3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fe4b 	bl	8008cb0 <stts751_write_reg>
 800901a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800901c:	68fb      	ldr	r3, [r7, #12]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	2301      	movs	r3, #1
 8009034:	21fd      	movs	r1, #253	; 0xfd
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff fe22 	bl	8008c80 <stts751_read_reg>
 800903c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d107      	bne.n	8009054 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	2301      	movs	r3, #1
 800904a:	21fe      	movs	r1, #254	; 0xfe
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fe17 	bl	8008c80 <stts751_read_reg>
 8009052:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d107      	bne.n	800906a <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	2301      	movs	r3, #1
 8009060:	21ff      	movs	r1, #255	; 0xff
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fe0c 	bl	8008c80 <stts751_read_reg>
 8009068:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 800906a:	68fb      	ldr	r3, [r7, #12]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	; 0x28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800907e:	2300      	movs	r3, #0
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8009082:	2301      	movs	r3, #1
 8009084:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d06e      	beq.n	800916e <IKS01A3_ENV_SENSOR_Init+0xfa>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b02      	cmp	r3, #2
 8009094:	f200 809d 	bhi.w	80091d2 <IKS01A3_ENV_SENSOR_Init+0x15e>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <IKS01A3_ENV_SENSOR_Init+0x32>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d032      	beq.n	800910a <IKS01A3_ENV_SENSOR_Init+0x96>
 80090a4:	e095      	b.n	80091d2 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80090a6:	6838      	ldr	r0, [r7, #0]
 80090a8:	f000 f966 	bl	8009378 <HTS221_0_Probe>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295
 80090b6:	e0cc      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80090b8:	4a68      	ldr	r2, [pc, #416]	; (800925c <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	4967      	ldr	r1, [pc, #412]	; (8009260 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80090ca:	f107 0108 	add.w	r1, r7, #8
 80090ce:	4610      	mov	r0, r2
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80090d8:	f06f 0306 	mvn.w	r3, #6
 80090dc:	e0b9      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 80090de:	7a3b      	ldrb	r3, [r7, #8]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d103      	bne.n	80090ec <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80090ec:	7abb      	ldrb	r3, [r7, #10]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d103      	bne.n	80090fa <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	f043 0304 	orr.w	r3, r3, #4
 80090f8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80090fa:	7a7b      	ldrb	r3, [r7, #9]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d16c      	bne.n	80091da <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f043 0302 	orr.w	r3, r3, #2
 8009106:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009108:	e067      	b.n	80091da <IKS01A3_ENV_SENSOR_Init+0x166>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800910a:	6838      	ldr	r0, [r7, #0]
 800910c:	f000 f9ee 	bl	80094ec <LPS22HH_0_Probe>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	e09a      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800911c:	4a4f      	ldr	r2, [pc, #316]	; (800925c <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	494e      	ldr	r1, [pc, #312]	; (8009260 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800912e:	f107 0108 	add.w	r1, r7, #8
 8009132:	4610      	mov	r0, r2
 8009134:	4798      	blx	r3
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800913c:	f06f 0306 	mvn.w	r3, #6
 8009140:	e087      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009142:	7a3b      	ldrb	r3, [r7, #8]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d103      	bne.n	8009150 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f043 0301 	orr.w	r3, r3, #1
 800914e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009150:	7abb      	ldrb	r3, [r7, #10]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d103      	bne.n	800915e <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	f043 0304 	orr.w	r3, r3, #4
 800915c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800915e:	7a7b      	ldrb	r3, [r7, #9]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d13c      	bne.n	80091de <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	f043 0302 	orr.w	r3, r3, #2
 800916a:	61bb      	str	r3, [r7, #24]
      }
      break;
 800916c:	e037      	b.n	80091de <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800916e:	6838      	ldr	r0, [r7, #0]
 8009170:	f000 fa78 	bl	8009664 <STTS751_0_Probe>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800917a:	f04f 33ff 	mov.w	r3, #4294967295
 800917e:	e068      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009180:	4a36      	ldr	r2, [pc, #216]	; (800925c <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	4935      	ldr	r1, [pc, #212]	; (8009260 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009192:	f107 0108 	add.w	r1, r7, #8
 8009196:	4610      	mov	r0, r2
 8009198:	4798      	blx	r3
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80091a0:	f06f 0306 	mvn.w	r3, #6
 80091a4:	e055      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 80091a6:	7a3b      	ldrb	r3, [r7, #8]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d103      	bne.n	80091b4 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80091b4:	7abb      	ldrb	r3, [r7, #10]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d103      	bne.n	80091c2 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f043 0304 	orr.w	r3, r3, #4
 80091c0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80091c2:	7a7b      	ldrb	r3, [r7, #9]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d10c      	bne.n	80091e2 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f043 0302 	orr.w	r3, r3, #2
 80091ce:	61bb      	str	r3, [r7, #24]
      }
      break;
 80091d0:	e007      	b.n	80091e2 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80091d2:	f06f 0301 	mvn.w	r3, #1
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80091d8:	e004      	b.n	80091e4 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80091da:	bf00      	nop
 80091dc:	e002      	b.n	80091e4 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80091e2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	e031      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
 80091f2:	e02a      	b.n	800924a <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	4013      	ands	r3, r2
 80091fa:	6a3a      	ldr	r2, [r7, #32]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d11e      	bne.n	800923e <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	4013      	ands	r3, r2
 8009206:	6a3a      	ldr	r2, [r7, #32]
 8009208:	429a      	cmp	r2, r3
 800920a:	d118      	bne.n	800923e <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009214:	4814      	ldr	r0, [pc, #80]	; (8009268 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	4613      	mov	r3, r2
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	4413      	add	r3, r2
 800921e:	440b      	add	r3, r1
 8009220:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	490e      	ldr	r1, [pc, #56]	; (8009260 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800922e:	4610      	mov	r0, r2
 8009230:	4798      	blx	r3
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009238:	f06f 0304 	mvn.w	r3, #4
 800923c:	e009      	b.n	8009252 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	3301      	adds	r3, #1
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d9d1      	bls.n	80091f4 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009252:	4618      	mov	r0, r3
 8009254:	3728      	adds	r7, #40	; 0x28
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200005f8 	.word	0x200005f8
 8009260:	200005c8 	.word	0x200005c8
 8009264:	2000015c 	.word	0x2000015c
 8009268:	200005d4 	.word	0x200005d4

0800926c <IKS01A3_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d903      	bls.n	8009284 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800927c:	f06f 0301 	mvn.w	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	e028      	b.n	80092d6 <IKS01A3_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009284:	4a16      	ldr	r2, [pc, #88]	; (80092e0 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	4013      	ands	r3, r2
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d11c      	bne.n	80092d0 <IKS01A3_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009296:	4a13      	ldr	r2, [pc, #76]	; (80092e4 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800929e:	4812      	ldr	r0, [pc, #72]	; (80092e8 <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	440b      	add	r3, r1
 80092aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	490e      	ldr	r1, [pc, #56]	; (80092ec <IKS01A3_ENV_SENSOR_Enable+0x80>)
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <IKS01A3_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092c2:	f06f 0304 	mvn.w	r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e005      	b.n	80092d6 <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e002      	b.n	80092d6 <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80092d0:	f06f 0301 	mvn.w	r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80092d6:	68fb      	ldr	r3, [r7, #12]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000604 	.word	0x20000604
 80092e4:	2000015c 	.word	0x2000015c
 80092e8:	200005d4 	.word	0x200005d4
 80092ec:	200005c8 	.word	0x200005c8

080092f0 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d903      	bls.n	800930a <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009302:	f06f 0301 	mvn.w	r3, #1
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e029      	b.n	800935e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	4013      	ands	r3, r2
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	429a      	cmp	r2, r3
 800931a:	d11d      	bne.n	8009358 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009324:	4812      	ldr	r0, [pc, #72]	; (8009370 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4613      	mov	r3, r2
 800932a:	005b      	lsls	r3, r3, #1
 800932c:	4413      	add	r3, r2
 800932e:	440b      	add	r3, r1
 8009330:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	490f      	ldr	r1, [pc, #60]	; (8009374 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800934a:	f06f 0304 	mvn.w	r3, #4
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	e005      	b.n	800935e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e002      	b.n	800935e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009358:	f06f 0301 	mvn.w	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800935e:	697b      	ldr	r3, [r7, #20]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000604 	.word	0x20000604
 800936c:	2000015c 	.word	0x2000015c
 8009370:	200005d4 	.word	0x200005d4
 8009374:	200005c8 	.word	0x200005c8

08009378 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b090      	sub	sp, #64	; 0x40
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8009384:	2300      	movs	r3, #0
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8009388:	23bf      	movs	r3, #191	; 0xbf
 800938a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800938e:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <HTS221_0_Probe+0x13c>)
 8009390:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009392:	4b49      	ldr	r3, [pc, #292]	; (80094b8 <HTS221_0_Probe+0x140>)
 8009394:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009396:	4b49      	ldr	r3, [pc, #292]	; (80094bc <HTS221_0_Probe+0x144>)
 8009398:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800939a:	4b49      	ldr	r3, [pc, #292]	; (80094c0 <HTS221_0_Probe+0x148>)
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800939e:	4b49      	ldr	r3, [pc, #292]	; (80094c4 <HTS221_0_Probe+0x14c>)
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80093a2:	f107 031c 	add.w	r3, r7, #28
 80093a6:	4619      	mov	r1, r3
 80093a8:	4847      	ldr	r0, [pc, #284]	; (80094c8 <HTS221_0_Probe+0x150>)
 80093aa:	f7f9 f9bb 	bl	8002724 <HTS221_RegisterBusIO>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093b4:	f06f 0306 	mvn.w	r3, #6
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ba:	e076      	b.n	80094aa <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80093bc:	f107 031b 	add.w	r3, r7, #27
 80093c0:	4619      	mov	r1, r3
 80093c2:	4841      	ldr	r0, [pc, #260]	; (80094c8 <HTS221_0_Probe+0x150>)
 80093c4:	f7f9 fa37 	bl	8002836 <HTS221_ReadID>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093ce:	f06f 0306 	mvn.w	r3, #6
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d4:	e069      	b.n	80094aa <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80093d6:	7efb      	ldrb	r3, [r7, #27]
 80093d8:	2bbc      	cmp	r3, #188	; 0xbc
 80093da:	d003      	beq.n	80093e4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093dc:	f06f 0306 	mvn.w	r3, #6
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e2:	e062      	b.n	80094aa <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80093e4:	f107 0308 	add.w	r3, r7, #8
 80093e8:	4619      	mov	r1, r3
 80093ea:	4837      	ldr	r0, [pc, #220]	; (80094c8 <HTS221_0_Probe+0x150>)
 80093ec:	f7f9 fa3a 	bl	8002864 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80093f0:	7a3b      	ldrb	r3, [r7, #8]
 80093f2:	461a      	mov	r2, r3
 80093f4:	7a7b      	ldrb	r3, [r7, #9]
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80093fa:	7abb      	ldrb	r3, [r7, #10]
 80093fc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80093fe:	4313      	orrs	r3, r2
 8009400:	4a32      	ldr	r2, [pc, #200]	; (80094cc <HTS221_0_Probe+0x154>)
 8009402:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8009404:	4b32      	ldr	r3, [pc, #200]	; (80094d0 <HTS221_0_Probe+0x158>)
 8009406:	4a30      	ldr	r2, [pc, #192]	; (80094c8 <HTS221_0_Probe+0x150>)
 8009408:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800940a:	4b32      	ldr	r3, [pc, #200]	; (80094d4 <HTS221_0_Probe+0x15c>)
 800940c:	4a32      	ldr	r2, [pc, #200]	; (80094d8 <HTS221_0_Probe+0x160>)
 800940e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d11d      	bne.n	8009452 <HTS221_0_Probe+0xda>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d018      	beq.n	8009452 <HTS221_0_Probe+0xda>
 8009420:	7a3b      	ldrb	r3, [r7, #8]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d115      	bne.n	8009452 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8009426:	4b2d      	ldr	r3, [pc, #180]	; (80094dc <HTS221_0_Probe+0x164>)
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4a2d      	ldr	r2, [pc, #180]	; (80094e0 <HTS221_0_Probe+0x168>)
 800942c:	492d      	ldr	r1, [pc, #180]	; (80094e4 <HTS221_0_Probe+0x16c>)
 800942e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009432:	4b28      	ldr	r3, [pc, #160]	; (80094d4 <HTS221_0_Probe+0x15c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a25      	ldr	r2, [pc, #148]	; (80094d0 <HTS221_0_Probe+0x158>)
 800943a:	6812      	ldr	r2, [r2, #0]
 800943c:	4610      	mov	r0, r2
 800943e:	4798      	blx	r3
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009446:	f06f 0304 	mvn.w	r3, #4
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944c:	e001      	b.n	8009452 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8009452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11d      	bne.n	8009494 <HTS221_0_Probe+0x11c>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	d018      	beq.n	8009494 <HTS221_0_Probe+0x11c>
 8009462:	7abb      	ldrb	r3, [r7, #10]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d115      	bne.n	8009494 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009468:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <HTS221_0_Probe+0x164>)
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	4a1c      	ldr	r2, [pc, #112]	; (80094e0 <HTS221_0_Probe+0x168>)
 800946e:	491e      	ldr	r1, [pc, #120]	; (80094e8 <HTS221_0_Probe+0x170>)
 8009470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <HTS221_0_Probe+0x15c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a15      	ldr	r2, [pc, #84]	; (80094d0 <HTS221_0_Probe+0x158>)
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	4610      	mov	r0, r2
 8009480:	4798      	blx	r3
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009488:	f06f 0304 	mvn.w	r3, #4
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948e:	e001      	b.n	8009494 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009490:	2300      	movs	r3, #0
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d107      	bne.n	80094aa <HTS221_0_Probe+0x132>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80094a4:	f06f 0304 	mvn.w	r3, #4
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3740      	adds	r7, #64	; 0x40
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	08002119 	.word	0x08002119
 80094b8:	0800217d 	.word	0x0800217d
 80094bc:	08002231 	.word	0x08002231
 80094c0:	080021cd 	.word	0x080021cd
 80094c4:	08002295 	.word	0x08002295
 80094c8:	20000610 	.word	0x20000610
 80094cc:	20000604 	.word	0x20000604
 80094d0:	200005c8 	.word	0x200005c8
 80094d4:	200005f8 	.word	0x200005f8
 80094d8:	20000008 	.word	0x20000008
 80094dc:	2000015c 	.word	0x2000015c
 80094e0:	200005d4 	.word	0x200005d4
 80094e4:	2000002c 	.word	0x2000002c
 80094e8:	20000018 	.word	0x20000018

080094ec <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b090      	sub	sp, #64	; 0x40
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80094f8:	2300      	movs	r3, #0
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80094fc:	23bb      	movs	r3, #187	; 0xbb
 80094fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009502:	4b4a      	ldr	r3, [pc, #296]	; (800962c <LPS22HH_0_Probe+0x140>)
 8009504:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009506:	4b4a      	ldr	r3, [pc, #296]	; (8009630 <LPS22HH_0_Probe+0x144>)
 8009508:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800950a:	4b4a      	ldr	r3, [pc, #296]	; (8009634 <LPS22HH_0_Probe+0x148>)
 800950c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800950e:	4b4a      	ldr	r3, [pc, #296]	; (8009638 <LPS22HH_0_Probe+0x14c>)
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009512:	4b4a      	ldr	r3, [pc, #296]	; (800963c <LPS22HH_0_Probe+0x150>)
 8009514:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8009516:	f107 031c 	add.w	r3, r7, #28
 800951a:	4619      	mov	r1, r3
 800951c:	4848      	ldr	r0, [pc, #288]	; (8009640 <LPS22HH_0_Probe+0x154>)
 800951e:	f7fc fa7d 	bl	8005a1c <LPS22HH_RegisterBusIO>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009528:	f06f 0306 	mvn.w	r3, #6
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800952e:	e078      	b.n	8009622 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8009530:	f107 031b 	add.w	r3, r7, #27
 8009534:	4619      	mov	r1, r3
 8009536:	4842      	ldr	r0, [pc, #264]	; (8009640 <LPS22HH_0_Probe+0x154>)
 8009538:	f7fc fb19 	bl	8005b6e <LPS22HH_ReadID>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009542:	f06f 0306 	mvn.w	r3, #6
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009548:	e06b      	b.n	8009622 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 800954a:	7efb      	ldrb	r3, [r7, #27]
 800954c:	2bb3      	cmp	r3, #179	; 0xb3
 800954e:	d003      	beq.n	8009558 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009550:	f06f 0306 	mvn.w	r3, #6
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009556:	e064      	b.n	8009622 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8009558:	f107 0308 	add.w	r3, r7, #8
 800955c:	4619      	mov	r1, r3
 800955e:	4838      	ldr	r0, [pc, #224]	; (8009640 <LPS22HH_0_Probe+0x154>)
 8009560:	f7fc fb1c 	bl	8005b9c <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009564:	7a3b      	ldrb	r3, [r7, #8]
 8009566:	461a      	mov	r2, r3
 8009568:	7a7b      	ldrb	r3, [r7, #9]
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800956e:	7abb      	ldrb	r3, [r7, #10]
 8009570:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009572:	4313      	orrs	r3, r2
 8009574:	4a33      	ldr	r2, [pc, #204]	; (8009644 <LPS22HH_0_Probe+0x158>)
 8009576:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8009578:	4b33      	ldr	r3, [pc, #204]	; (8009648 <LPS22HH_0_Probe+0x15c>)
 800957a:	4a31      	ldr	r2, [pc, #196]	; (8009640 <LPS22HH_0_Probe+0x154>)
 800957c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800957e:	4b33      	ldr	r3, [pc, #204]	; (800964c <LPS22HH_0_Probe+0x160>)
 8009580:	4a33      	ldr	r2, [pc, #204]	; (8009650 <LPS22HH_0_Probe+0x164>)
 8009582:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009586:	2b00      	cmp	r3, #0
 8009588:	d11e      	bne.n	80095c8 <LPS22HH_0_Probe+0xdc>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d019      	beq.n	80095c8 <LPS22HH_0_Probe+0xdc>
 8009594:	7a3b      	ldrb	r3, [r7, #8]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d116      	bne.n	80095c8 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800959a:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <LPS22HH_0_Probe+0x168>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4a2e      	ldr	r2, [pc, #184]	; (8009658 <LPS22HH_0_Probe+0x16c>)
 80095a0:	3303      	adds	r3, #3
 80095a2:	492e      	ldr	r1, [pc, #184]	; (800965c <LPS22HH_0_Probe+0x170>)
 80095a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80095a8:	4b28      	ldr	r3, [pc, #160]	; (800964c <LPS22HH_0_Probe+0x160>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a26      	ldr	r2, [pc, #152]	; (8009648 <LPS22HH_0_Probe+0x15c>)
 80095b0:	6852      	ldr	r2, [r2, #4]
 80095b2:	4610      	mov	r0, r2
 80095b4:	4798      	blx	r3
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80095bc:	f06f 0304 	mvn.w	r3, #4
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c2:	e001      	b.n	80095c8 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80095c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d11e      	bne.n	800960c <LPS22HH_0_Probe+0x120>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d019      	beq.n	800960c <LPS22HH_0_Probe+0x120>
 80095d8:	7a7b      	ldrb	r3, [r7, #9]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d116      	bne.n	800960c <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80095de:	4b1d      	ldr	r3, [pc, #116]	; (8009654 <LPS22HH_0_Probe+0x168>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	4a1d      	ldr	r2, [pc, #116]	; (8009658 <LPS22HH_0_Probe+0x16c>)
 80095e4:	3303      	adds	r3, #3
 80095e6:	491e      	ldr	r1, [pc, #120]	; (8009660 <LPS22HH_0_Probe+0x174>)
 80095e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <LPS22HH_0_Probe+0x160>)
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a15      	ldr	r2, [pc, #84]	; (8009648 <LPS22HH_0_Probe+0x15c>)
 80095f4:	6852      	ldr	r2, [r2, #4]
 80095f6:	4610      	mov	r0, r2
 80095f8:	4798      	blx	r3
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009600:	f06f 0304 	mvn.w	r3, #4
 8009604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009606:	e001      	b.n	800960c <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009608:	2300      	movs	r3, #0
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800960c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d107      	bne.n	8009622 <LPS22HH_0_Probe+0x136>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800961c:	f06f 0304 	mvn.w	r3, #4
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8009622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009624:	4618      	mov	r0, r3
 8009626:	3740      	adds	r7, #64	; 0x40
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	08002119 	.word	0x08002119
 8009630:	0800217d 	.word	0x0800217d
 8009634:	08002231 	.word	0x08002231
 8009638:	080021cd 	.word	0x080021cd
 800963c:	08002295 	.word	0x08002295
 8009640:	20000644 	.word	0x20000644
 8009644:	20000604 	.word	0x20000604
 8009648:	200005c8 	.word	0x200005c8
 800964c:	200005f8 	.word	0x200005f8
 8009650:	200000a8 	.word	0x200000a8
 8009654:	2000015c 	.word	0x2000015c
 8009658:	200005d4 	.word	0x200005d4
 800965c:	200000cc 	.word	0x200000cc
 8009660:	200000b8 	.word	0x200000b8

08009664 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	; 0x40
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009670:	2300      	movs	r3, #0
 8009672:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8009674:	2395      	movs	r3, #149	; 0x95
 8009676:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800967a:	4b3f      	ldr	r3, [pc, #252]	; (8009778 <STTS751_0_Probe+0x114>)
 800967c:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800967e:	4b3f      	ldr	r3, [pc, #252]	; (800977c <STTS751_0_Probe+0x118>)
 8009680:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009682:	4b3f      	ldr	r3, [pc, #252]	; (8009780 <STTS751_0_Probe+0x11c>)
 8009684:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009686:	4b3f      	ldr	r3, [pc, #252]	; (8009784 <STTS751_0_Probe+0x120>)
 8009688:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800968a:	4b3f      	ldr	r3, [pc, #252]	; (8009788 <STTS751_0_Probe+0x124>)
 800968c:	637b      	str	r3, [r7, #52]	; 0x34

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800968e:	f107 031c 	add.w	r3, r7, #28
 8009692:	4619      	mov	r1, r3
 8009694:	483d      	ldr	r0, [pc, #244]	; (800978c <STTS751_0_Probe+0x128>)
 8009696:	f7fe fffb 	bl	8008690 <STTS751_RegisterBusIO>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096a0:	f06f 0306 	mvn.w	r3, #6
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a6:	e061      	b.n	800976c <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 80096a8:	f107 031b 	add.w	r3, r7, #27
 80096ac:	4619      	mov	r1, r3
 80096ae:	4837      	ldr	r0, [pc, #220]	; (800978c <STTS751_0_Probe+0x128>)
 80096b0:	f7ff f88d 	bl	80087ce <STTS751_ReadID>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096ba:	f06f 0306 	mvn.w	r3, #6
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c0:	e054      	b.n	800976c <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 80096c2:	7efb      	ldrb	r3, [r7, #27]
 80096c4:	2b53      	cmp	r3, #83	; 0x53
 80096c6:	d003      	beq.n	80096d0 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096c8:	f06f 0306 	mvn.w	r3, #6
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096ce:	e04d      	b.n	800976c <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80096d0:	f107 0308 	add.w	r3, r7, #8
 80096d4:	4619      	mov	r1, r3
 80096d6:	482d      	ldr	r0, [pc, #180]	; (800978c <STTS751_0_Probe+0x128>)
 80096d8:	f7ff f894 	bl	8008804 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80096dc:	7a3b      	ldrb	r3, [r7, #8]
 80096de:	461a      	mov	r2, r3
 80096e0:	7a7b      	ldrb	r3, [r7, #9]
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80096e6:	7abb      	ldrb	r3, [r7, #10]
 80096e8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80096ea:	4313      	orrs	r3, r2
 80096ec:	4a28      	ldr	r2, [pc, #160]	; (8009790 <STTS751_0_Probe+0x12c>)
 80096ee:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80096f0:	4b28      	ldr	r3, [pc, #160]	; (8009794 <STTS751_0_Probe+0x130>)
 80096f2:	4a26      	ldr	r2, [pc, #152]	; (800978c <STTS751_0_Probe+0x128>)
 80096f4:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80096f6:	4b28      	ldr	r3, [pc, #160]	; (8009798 <STTS751_0_Probe+0x134>)
 80096f8:	4a28      	ldr	r2, [pc, #160]	; (800979c <STTS751_0_Probe+0x138>)
 80096fa:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80096fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d11e      	bne.n	8009740 <STTS751_0_Probe+0xdc>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d019      	beq.n	8009740 <STTS751_0_Probe+0xdc>
 800970c:	7a3b      	ldrb	r3, [r7, #8]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d116      	bne.n	8009740 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8009712:	4b23      	ldr	r3, [pc, #140]	; (80097a0 <STTS751_0_Probe+0x13c>)
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	4a23      	ldr	r2, [pc, #140]	; (80097a4 <STTS751_0_Probe+0x140>)
 8009718:	3306      	adds	r3, #6
 800971a:	4923      	ldr	r1, [pc, #140]	; (80097a8 <STTS751_0_Probe+0x144>)
 800971c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8009720:	4b1d      	ldr	r3, [pc, #116]	; (8009798 <STTS751_0_Probe+0x134>)
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a1b      	ldr	r2, [pc, #108]	; (8009794 <STTS751_0_Probe+0x130>)
 8009728:	6892      	ldr	r2, [r2, #8]
 800972a:	4610      	mov	r0, r2
 800972c:	4798      	blx	r3
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009734:	f06f 0304 	mvn.w	r3, #4
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973a:	e001      	b.n	8009740 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800973c:	2300      	movs	r3, #0
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d107      	bne.n	8009756 <STTS751_0_Probe+0xf2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009750:	f06f 0304 	mvn.w	r3, #4
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <STTS751_0_Probe+0x108>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009766:	f06f 0304 	mvn.w	r3, #4
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800976c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800976e:	4618      	mov	r0, r3
 8009770:	3740      	adds	r7, #64	; 0x40
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	08002119 	.word	0x08002119
 800977c:	0800217d 	.word	0x0800217d
 8009780:	08002231 	.word	0x08002231
 8009784:	080021cd 	.word	0x080021cd
 8009788:	08002295 	.word	0x08002295
 800978c:	20000678 	.word	0x20000678
 8009790:	20000604 	.word	0x20000604
 8009794:	200005c8 	.word	0x200005c8
 8009798:	200005f8 	.word	0x200005f8
 800979c:	20000138 	.word	0x20000138
 80097a0:	2000015c 	.word	0x2000015c
 80097a4:	200005d4 	.word	0x200005d4
 80097a8:	20000148 	.word	0x20000148

080097ac <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08e      	sub	sp, #56	; 0x38
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80097ba:	2301      	movs	r3, #1
 80097bc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d06e      	beq.n	80098a6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	f200 809d 	bhi.w	800990a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x32>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d032      	beq.n	8009842 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80097dc:	e095      	b.n	800990a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80097de:	6838      	ldr	r0, [r7, #0]
 80097e0:	f000 f966 	bl	8009ab0 <LSM6DSO_0_Probe>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295
 80097ee:	e0cc      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80097f0:	4a68      	ldr	r2, [pc, #416]	; (8009994 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	4967      	ldr	r1, [pc, #412]	; (8009998 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009802:	f107 010c 	add.w	r1, r7, #12
 8009806:	4610      	mov	r0, r2
 8009808:	4798      	blx	r3
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009810:	f06f 0306 	mvn.w	r3, #6
 8009814:	e0b9      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009816:	7b3b      	ldrb	r3, [r7, #12]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d103      	bne.n	8009824 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	f043 0302 	orr.w	r3, r3, #2
 8009822:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009824:	7b7b      	ldrb	r3, [r7, #13]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d103      	bne.n	8009832 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	f043 0301 	orr.w	r3, r3, #1
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d16c      	bne.n	8009912 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	f043 0304 	orr.w	r3, r3, #4
 800983e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009840:	e067      	b.n	8009912 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009842:	6838      	ldr	r0, [r7, #0]
 8009844:	f000 f9f4 	bl	8009c30 <LIS2DW12_0_Probe>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295
 8009852:	e09a      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009854:	4a4f      	ldr	r2, [pc, #316]	; (8009994 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	494e      	ldr	r1, [pc, #312]	; (8009998 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009866:	f107 010c 	add.w	r1, r7, #12
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009874:	f06f 0306 	mvn.w	r3, #6
 8009878:	e087      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800987a:	7b3b      	ldrb	r3, [r7, #12]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d103      	bne.n	8009888 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	f043 0302 	orr.w	r3, r3, #2
 8009886:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009888:	7b7b      	ldrb	r3, [r7, #13]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d103      	bne.n	8009896 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009896:	7bbb      	ldrb	r3, [r7, #14]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d13c      	bne.n	8009916 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	f043 0304 	orr.w	r3, r3, #4
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80098a4:	e037      	b.n	8009916 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80098a6:	6838      	ldr	r0, [r7, #0]
 80098a8:	f000 fa6a 	bl	8009d80 <LIS2MDL_0_Probe>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80098b2:	f04f 33ff 	mov.w	r3, #4294967295
 80098b6:	e068      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80098b8:	4a36      	ldr	r2, [pc, #216]	; (8009994 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	4935      	ldr	r1, [pc, #212]	; (8009998 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80098ca:	f107 010c 	add.w	r1, r7, #12
 80098ce:	4610      	mov	r0, r2
 80098d0:	4798      	blx	r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80098d8:	f06f 0306 	mvn.w	r3, #6
 80098dc:	e055      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80098de:	7b3b      	ldrb	r3, [r7, #12]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d103      	bne.n	80098ec <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	f043 0302 	orr.w	r3, r3, #2
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80098ec:	7b7b      	ldrb	r3, [r7, #13]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d103      	bne.n	80098fa <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	f043 0301 	orr.w	r3, r3, #1
 80098f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10c      	bne.n	800991a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8009900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009908:	e007      	b.n	800991a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800990a:	f06f 0301 	mvn.w	r3, #1
 800990e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009910:	e004      	b.n	800991c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009912:	bf00      	nop
 8009914:	e002      	b.n	800991c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800991a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800991c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	e031      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009926:	2300      	movs	r3, #0
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800992a:	e02a      	b.n	8009982 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	4013      	ands	r3, r2
 8009932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009934:	429a      	cmp	r2, r3
 8009936:	d11e      	bne.n	8009976 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8009938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	4013      	ands	r3, r2
 800993e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009940:	429a      	cmp	r2, r3
 8009942:	d118      	bne.n	8009976 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009944:	4a15      	ldr	r2, [pc, #84]	; (800999c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800994c:	4814      	ldr	r0, [pc, #80]	; (80099a0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	4613      	mov	r3, r2
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	4413      	add	r3, r2
 8009956:	440b      	add	r3, r1
 8009958:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	490e      	ldr	r1, [pc, #56]	; (8009998 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009966:	4610      	mov	r0, r2
 8009968:	4798      	blx	r3
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009970:	f06f 0304 	mvn.w	r3, #4
 8009974:	e009      	b.n	800998a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	3301      	adds	r3, #1
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	2b02      	cmp	r3, #2
 8009986:	d9d1      	bls.n	800992c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8009988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800998a:	4618      	mov	r0, r3
 800998c:	3738      	adds	r7, #56	; 0x38
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	200006e0 	.word	0x200006e0
 8009998:	200006b0 	.word	0x200006b0
 800999c:	20000170 	.word	0x20000170
 80099a0:	200006bc 	.word	0x200006bc

080099a4 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d903      	bls.n	80099bc <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80099b4:	f06f 0301 	mvn.w	r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	e028      	b.n	8009a0e <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80099bc:	4a16      	ldr	r2, [pc, #88]	; (8009a18 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	4013      	ands	r3, r2
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d11c      	bne.n	8009a08 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80099ce:	4a13      	ldr	r2, [pc, #76]	; (8009a1c <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099d6:	4812      	ldr	r0, [pc, #72]	; (8009a20 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	4413      	add	r3, r2
 80099e0:	440b      	add	r3, r1
 80099e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	490e      	ldr	r1, [pc, #56]	; (8009a24 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80099fa:	f06f 0304 	mvn.w	r3, #4
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	e005      	b.n	8009a0e <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	e002      	b.n	8009a0e <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009a08:	f06f 0301 	mvn.w	r3, #1
 8009a0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	200006ec 	.word	0x200006ec
 8009a1c:	20000170 	.word	0x20000170
 8009a20:	200006bc 	.word	0x200006bc
 8009a24:	200006b0 	.word	0x200006b0

08009a28 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d903      	bls.n	8009a42 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009a3a:	f06f 0301 	mvn.w	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e029      	b.n	8009a96 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009a42:	4a17      	ldr	r2, [pc, #92]	; (8009aa0 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d11d      	bne.n	8009a90 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009a54:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a5c:	4812      	ldr	r0, [pc, #72]	; (8009aa8 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	4613      	mov	r3, r2
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	4413      	add	r3, r2
 8009a66:	440b      	add	r3, r1
 8009a68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	490f      	ldr	r1, [pc, #60]	; (8009aac <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a82:	f06f 0304 	mvn.w	r3, #4
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e005      	b.n	8009a96 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
 8009a8e:	e002      	b.n	8009a96 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009a90:	f06f 0301 	mvn.w	r3, #1
 8009a94:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009a96:	697b      	ldr	r3, [r7, #20]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	200006ec 	.word	0x200006ec
 8009aa4:	20000170 	.word	0x20000170
 8009aa8:	200006bc 	.word	0x200006bc
 8009aac:	200006b0 	.word	0x200006b0

08009ab0 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b094      	sub	sp, #80	; 0x50
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009abc:	2300      	movs	r3, #0
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009ac0:	23d7      	movs	r3, #215	; 0xd7
 8009ac2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009ac6:	4b4b      	ldr	r3, [pc, #300]	; (8009bf4 <LSM6DSO_0_Probe+0x144>)
 8009ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009aca:	4b4b      	ldr	r3, [pc, #300]	; (8009bf8 <LSM6DSO_0_Probe+0x148>)
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009ace:	4b4b      	ldr	r3, [pc, #300]	; (8009bfc <LSM6DSO_0_Probe+0x14c>)
 8009ad0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009ad2:	4b4b      	ldr	r3, [pc, #300]	; (8009c00 <LSM6DSO_0_Probe+0x150>)
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009ad6:	4b4b      	ldr	r3, [pc, #300]	; (8009c04 <LSM6DSO_0_Probe+0x154>)
 8009ad8:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009ada:	4b4b      	ldr	r3, [pc, #300]	; (8009c08 <LSM6DSO_0_Probe+0x158>)
 8009adc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4849      	ldr	r0, [pc, #292]	; (8009c0c <LSM6DSO_0_Probe+0x15c>)
 8009ae6:	f7fc fdf3 	bl	80066d0 <LSM6DSO_RegisterBusIO>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009af0:	f06f 0306 	mvn.w	r3, #6
 8009af4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009af6:	e077      	b.n	8009be8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009af8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009afc:	4619      	mov	r1, r3
 8009afe:	4843      	ldr	r0, [pc, #268]	; (8009c0c <LSM6DSO_0_Probe+0x15c>)
 8009b00:	f7fc feec 	bl	80068dc <LSM6DSO_ReadID>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b0a:	f06f 0306 	mvn.w	r3, #6
 8009b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b10:	e06a      	b.n	8009be8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8009b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b16:	2b6c      	cmp	r3, #108	; 0x6c
 8009b18:	d003      	beq.n	8009b22 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b1a:	f06f 0306 	mvn.w	r3, #6
 8009b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b20:	e062      	b.n	8009be8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	4619      	mov	r1, r3
 8009b28:	4838      	ldr	r0, [pc, #224]	; (8009c0c <LSM6DSO_0_Probe+0x15c>)
 8009b2a:	f7fc feed 	bl	8006908 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009b2e:	7b7b      	ldrb	r3, [r7, #13]
 8009b30:	461a      	mov	r2, r3
 8009b32:	7b3b      	ldrb	r3, [r7, #12]
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	431a      	orrs	r2, r3
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	4a34      	ldr	r2, [pc, #208]	; (8009c10 <LSM6DSO_0_Probe+0x160>)
 8009b40:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009b42:	4b34      	ldr	r3, [pc, #208]	; (8009c14 <LSM6DSO_0_Probe+0x164>)
 8009b44:	4a31      	ldr	r2, [pc, #196]	; (8009c0c <LSM6DSO_0_Probe+0x15c>)
 8009b46:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009b48:	4b33      	ldr	r3, [pc, #204]	; (8009c18 <LSM6DSO_0_Probe+0x168>)
 8009b4a:	4a34      	ldr	r2, [pc, #208]	; (8009c1c <LSM6DSO_0_Probe+0x16c>)
 8009b4c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d11d      	bne.n	8009b90 <LSM6DSO_0_Probe+0xe0>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d018      	beq.n	8009b90 <LSM6DSO_0_Probe+0xe0>
 8009b5e:	7b7b      	ldrb	r3, [r7, #13]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d115      	bne.n	8009b90 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009b64:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <LSM6DSO_0_Probe+0x170>)
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	4a2e      	ldr	r2, [pc, #184]	; (8009c24 <LSM6DSO_0_Probe+0x174>)
 8009b6a:	492f      	ldr	r1, [pc, #188]	; (8009c28 <LSM6DSO_0_Probe+0x178>)
 8009b6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009b70:	4b29      	ldr	r3, [pc, #164]	; (8009c18 <LSM6DSO_0_Probe+0x168>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a27      	ldr	r2, [pc, #156]	; (8009c14 <LSM6DSO_0_Probe+0x164>)
 8009b78:	6812      	ldr	r2, [r2, #0]
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4798      	blx	r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b84:	f06f 0304 	mvn.w	r3, #4
 8009b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b8a:	e001      	b.n	8009b90 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d11d      	bne.n	8009bd2 <LSM6DSO_0_Probe+0x122>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d018      	beq.n	8009bd2 <LSM6DSO_0_Probe+0x122>
 8009ba0:	7b3b      	ldrb	r3, [r7, #12]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d115      	bne.n	8009bd2 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009ba6:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <LSM6DSO_0_Probe+0x170>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	4a1e      	ldr	r2, [pc, #120]	; (8009c24 <LSM6DSO_0_Probe+0x174>)
 8009bac:	491f      	ldr	r1, [pc, #124]	; (8009c2c <LSM6DSO_0_Probe+0x17c>)
 8009bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009bb2:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <LSM6DSO_0_Probe+0x168>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a16      	ldr	r2, [pc, #88]	; (8009c14 <LSM6DSO_0_Probe+0x164>)
 8009bba:	6812      	ldr	r2, [r2, #0]
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bc6:	f06f 0304 	mvn.w	r3, #4
 8009bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bcc:	e001      	b.n	8009bd2 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d107      	bne.n	8009be8 <LSM6DSO_0_Probe+0x138>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f003 0304 	and.w	r3, r3, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009be2:	f06f 0304 	mvn.w	r3, #4
 8009be6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3750      	adds	r7, #80	; 0x50
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	08002119 	.word	0x08002119
 8009bf8:	0800217d 	.word	0x0800217d
 8009bfc:	08002231 	.word	0x08002231
 8009c00:	080021cd 	.word	0x080021cd
 8009c04:	08002295 	.word	0x08002295
 8009c08:	0800a3ed 	.word	0x0800a3ed
 8009c0c:	200006f8 	.word	0x200006f8
 8009c10:	200006ec 	.word	0x200006ec
 8009c14:	200006b0 	.word	0x200006b0
 8009c18:	200006e0 	.word	0x200006e0
 8009c1c:	200000e0 	.word	0x200000e0
 8009c20:	20000170 	.word	0x20000170
 8009c24:	200006bc 	.word	0x200006bc
 8009c28:	20000114 	.word	0x20000114
 8009c2c:	200000f0 	.word	0x200000f0

08009c30 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b094      	sub	sp, #80	; 0x50
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009c40:	2333      	movs	r3, #51	; 0x33
 8009c42:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009c46:	4b40      	ldr	r3, [pc, #256]	; (8009d48 <LIS2DW12_0_Probe+0x118>)
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009c4a:	4b40      	ldr	r3, [pc, #256]	; (8009d4c <LIS2DW12_0_Probe+0x11c>)
 8009c4c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009c4e:	4b40      	ldr	r3, [pc, #256]	; (8009d50 <LIS2DW12_0_Probe+0x120>)
 8009c50:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009c52:	4b40      	ldr	r3, [pc, #256]	; (8009d54 <LIS2DW12_0_Probe+0x124>)
 8009c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009c56:	4b40      	ldr	r3, [pc, #256]	; (8009d58 <LIS2DW12_0_Probe+0x128>)
 8009c58:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009c5a:	4b40      	ldr	r3, [pc, #256]	; (8009d5c <LIS2DW12_0_Probe+0x12c>)
 8009c5c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c62:	4619      	mov	r1, r3
 8009c64:	483e      	ldr	r0, [pc, #248]	; (8009d60 <LIS2DW12_0_Probe+0x130>)
 8009c66:	f7f9 fb7f 	bl	8003368 <LIS2DW12_RegisterBusIO>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c70:	f06f 0306 	mvn.w	r3, #6
 8009c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c76:	e062      	b.n	8009d3e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009c78:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4838      	ldr	r0, [pc, #224]	; (8009d60 <LIS2DW12_0_Probe+0x130>)
 8009c80:	f7f9 fc60 	bl	8003544 <LIS2DW12_ReadID>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c8a:	f06f 0306 	mvn.w	r3, #6
 8009c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c90:	e055      	b.n	8009d3e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8009c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c96:	2b44      	cmp	r3, #68	; 0x44
 8009c98:	d003      	beq.n	8009ca2 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c9a:	f06f 0306 	mvn.w	r3, #6
 8009c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ca0:	e04d      	b.n	8009d3e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8009ca2:	f107 030c 	add.w	r3, r7, #12
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	482d      	ldr	r0, [pc, #180]	; (8009d60 <LIS2DW12_0_Probe+0x130>)
 8009caa:	f7f9 fc61 	bl	8003570 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009cae:	7b7b      	ldrb	r3, [r7, #13]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	7b3b      	ldrb	r3, [r7, #12]
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	4a29      	ldr	r2, [pc, #164]	; (8009d64 <LIS2DW12_0_Probe+0x134>)
 8009cc0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009cc2:	4b29      	ldr	r3, [pc, #164]	; (8009d68 <LIS2DW12_0_Probe+0x138>)
 8009cc4:	4a26      	ldr	r2, [pc, #152]	; (8009d60 <LIS2DW12_0_Probe+0x130>)
 8009cc6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009cc8:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <LIS2DW12_0_Probe+0x13c>)
 8009cca:	4a29      	ldr	r2, [pc, #164]	; (8009d70 <LIS2DW12_0_Probe+0x140>)
 8009ccc:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d11e      	bne.n	8009d12 <LIS2DW12_0_Probe+0xe2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d019      	beq.n	8009d12 <LIS2DW12_0_Probe+0xe2>
 8009cde:	7b3b      	ldrb	r3, [r7, #12]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d116      	bne.n	8009d12 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009ce4:	4b23      	ldr	r3, [pc, #140]	; (8009d74 <LIS2DW12_0_Probe+0x144>)
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	4a23      	ldr	r2, [pc, #140]	; (8009d78 <LIS2DW12_0_Probe+0x148>)
 8009cea:	3303      	adds	r3, #3
 8009cec:	4923      	ldr	r1, [pc, #140]	; (8009d7c <LIS2DW12_0_Probe+0x14c>)
 8009cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009cf2:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <LIS2DW12_0_Probe+0x13c>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a1b      	ldr	r2, [pc, #108]	; (8009d68 <LIS2DW12_0_Probe+0x138>)
 8009cfa:	6852      	ldr	r2, [r2, #4]
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	4798      	blx	r3
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d06:	f06f 0304 	mvn.w	r3, #4
 8009d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d0c:	e001      	b.n	8009d12 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d107      	bne.n	8009d28 <LIS2DW12_0_Probe+0xf8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d22:	f06f 0304 	mvn.w	r3, #4
 8009d26:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d107      	bne.n	8009d3e <LIS2DW12_0_Probe+0x10e>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d38:	f06f 0304 	mvn.w	r3, #4
 8009d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3750      	adds	r7, #80	; 0x50
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	08002119 	.word	0x08002119
 8009d4c:	0800217d 	.word	0x0800217d
 8009d50:	08002231 	.word	0x08002231
 8009d54:	080021cd 	.word	0x080021cd
 8009d58:	08002295 	.word	0x08002295
 8009d5c:	0800a3ed 	.word	0x0800a3ed
 8009d60:	20000730 	.word	0x20000730
 8009d64:	200006ec 	.word	0x200006ec
 8009d68:	200006b0 	.word	0x200006b0
 8009d6c:	200006e0 	.word	0x200006e0
 8009d70:	20000040 	.word	0x20000040
 8009d74:	20000170 	.word	0x20000170
 8009d78:	200006bc 	.word	0x200006bc
 8009d7c:	20000050 	.word	0x20000050

08009d80 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b094      	sub	sp, #80	; 0x50
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009d90:	233d      	movs	r3, #61	; 0x3d
 8009d92:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009d96:	4b40      	ldr	r3, [pc, #256]	; (8009e98 <LIS2MDL_0_Probe+0x118>)
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009d9a:	4b40      	ldr	r3, [pc, #256]	; (8009e9c <LIS2MDL_0_Probe+0x11c>)
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009d9e:	4b40      	ldr	r3, [pc, #256]	; (8009ea0 <LIS2MDL_0_Probe+0x120>)
 8009da0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009da2:	4b40      	ldr	r3, [pc, #256]	; (8009ea4 <LIS2MDL_0_Probe+0x124>)
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <LIS2MDL_0_Probe+0x128>)
 8009da8:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009daa:	4b40      	ldr	r3, [pc, #256]	; (8009eac <LIS2MDL_0_Probe+0x12c>)
 8009dac:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009db2:	4619      	mov	r1, r3
 8009db4:	483e      	ldr	r0, [pc, #248]	; (8009eb0 <LIS2MDL_0_Probe+0x130>)
 8009db6:	f7fa fe2b 	bl	8004a10 <LIS2MDL_RegisterBusIO>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009dc0:	f06f 0306 	mvn.w	r3, #6
 8009dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dc6:	e062      	b.n	8009e8e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009dc8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4838      	ldr	r0, [pc, #224]	; (8009eb0 <LIS2MDL_0_Probe+0x130>)
 8009dd0:	f7fa ff3a 	bl	8004c48 <LIS2MDL_ReadID>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009dda:	f06f 0306 	mvn.w	r3, #6
 8009dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009de0:	e055      	b.n	8009e8e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8009de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009de6:	2b40      	cmp	r3, #64	; 0x40
 8009de8:	d003      	beq.n	8009df2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009dea:	f06f 0306 	mvn.w	r3, #6
 8009dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009df0:	e04d      	b.n	8009e8e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4619      	mov	r1, r3
 8009df8:	482d      	ldr	r0, [pc, #180]	; (8009eb0 <LIS2MDL_0_Probe+0x130>)
 8009dfa:	f7fa ff4b 	bl	8004c94 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009dfe:	7b7b      	ldrb	r3, [r7, #13]
 8009e00:	461a      	mov	r2, r3
 8009e02:	7b3b      	ldrb	r3, [r7, #12]
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	431a      	orrs	r2, r3
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	4a29      	ldr	r2, [pc, #164]	; (8009eb4 <LIS2MDL_0_Probe+0x134>)
 8009e10:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009e12:	4b29      	ldr	r3, [pc, #164]	; (8009eb8 <LIS2MDL_0_Probe+0x138>)
 8009e14:	4a26      	ldr	r2, [pc, #152]	; (8009eb0 <LIS2MDL_0_Probe+0x130>)
 8009e16:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009e18:	4b28      	ldr	r3, [pc, #160]	; (8009ebc <LIS2MDL_0_Probe+0x13c>)
 8009e1a:	4a29      	ldr	r2, [pc, #164]	; (8009ec0 <LIS2MDL_0_Probe+0x140>)
 8009e1c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11e      	bne.n	8009e62 <LIS2MDL_0_Probe+0xe2>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f003 0304 	and.w	r3, r3, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d019      	beq.n	8009e62 <LIS2MDL_0_Probe+0xe2>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d116      	bne.n	8009e62 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009e34:	4b23      	ldr	r3, [pc, #140]	; (8009ec4 <LIS2MDL_0_Probe+0x144>)
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	4a23      	ldr	r2, [pc, #140]	; (8009ec8 <LIS2MDL_0_Probe+0x148>)
 8009e3a:	3306      	adds	r3, #6
 8009e3c:	4923      	ldr	r1, [pc, #140]	; (8009ecc <LIS2MDL_0_Probe+0x14c>)
 8009e3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009e42:	4b1e      	ldr	r3, [pc, #120]	; (8009ebc <LIS2MDL_0_Probe+0x13c>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a1b      	ldr	r2, [pc, #108]	; (8009eb8 <LIS2MDL_0_Probe+0x138>)
 8009e4a:	6892      	ldr	r2, [r2, #8]
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e56:	f06f 0304 	mvn.w	r3, #4
 8009e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e5c:	e001      	b.n	8009e62 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d107      	bne.n	8009e78 <LIS2MDL_0_Probe+0xf8>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e72:	f06f 0304 	mvn.w	r3, #4
 8009e76:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d107      	bne.n	8009e8e <LIS2MDL_0_Probe+0x10e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e88:	f06f 0304 	mvn.w	r3, #4
 8009e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3750      	adds	r7, #80	; 0x50
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	08002119 	.word	0x08002119
 8009e9c:	0800217d 	.word	0x0800217d
 8009ea0:	08002231 	.word	0x08002231
 8009ea4:	080021cd 	.word	0x080021cd
 8009ea8:	08002295 	.word	0x08002295
 8009eac:	0800a3ed 	.word	0x0800a3ed
 8009eb0:	2000076c 	.word	0x2000076c
 8009eb4:	200006ec 	.word	0x200006ec
 8009eb8:	200006b0 	.word	0x200006b0
 8009ebc:	200006e0 	.word	0x200006e0
 8009ec0:	20000074 	.word	0x20000074
 8009ec4:	20000170 	.word	0x20000170
 8009ec8:	200006bc 	.word	0x200006bc
 8009ecc:	20000084 	.word	0x20000084

08009ed0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <BSP_LED_Init+0x20>)
 8009ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	08012088 	.word	0x08012088

08009ef4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8009efe:	79fb      	ldrb	r3, [r7, #7]
 8009f00:	4a06      	ldr	r2, [pc, #24]	; (8009f1c <BSP_LED_On+0x28>)
 8009f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f06:	2120      	movs	r1, #32
 8009f08:	2201      	movs	r2, #1
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fe90 	bl	800ac30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000184 	.word	0x20000184

08009f20 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	4a06      	ldr	r2, [pc, #24]	; (8009f48 <BSP_LED_Off+0x28>)
 8009f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f32:	2120      	movs	r1, #32
 8009f34:	2200      	movs	r2, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fe7a 	bl	800ac30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000184 	.word	0x20000184

08009f4c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	4a06      	ldr	r2, [pc, #24]	; (8009f74 <BSP_LED_Toggle+0x28>)
 8009f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	4611      	mov	r1, r2
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fe7d 	bl	800ac62 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000184 	.word	0x20000184

08009f78 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60bb      	str	r3, [r7, #8]
 8009f82:	4b1c      	ldr	r3, [pc, #112]	; (8009ff4 <LED_USER_GPIO_Init+0x7c>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <LED_USER_GPIO_Init+0x7c>)
 8009f88:	f043 0301 	orr.w	r3, r3, #1
 8009f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f8e:	4b19      	ldr	r3, [pc, #100]	; (8009ff4 <LED_USER_GPIO_Init+0x7c>)
 8009f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	60bb      	str	r3, [r7, #8]
 8009f98:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f9a:	f107 030c 	add.w	r3, r7, #12
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	605a      	str	r2, [r3, #4]
 8009fa4:	609a      	str	r2, [r3, #8]
 8009fa6:	60da      	str	r2, [r3, #12]
 8009fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009faa:	2300      	movs	r3, #0
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <LED_USER_GPIO_Init+0x7c>)
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb2:	4a10      	ldr	r2, [pc, #64]	; (8009ff4 <LED_USER_GPIO_Init+0x7c>)
 8009fb4:	f043 0301 	orr.w	r3, r3, #1
 8009fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8009fba:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <LED_USER_GPIO_Init+0x7c>)
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2120      	movs	r1, #32
 8009fca:	480b      	ldr	r0, [pc, #44]	; (8009ff8 <LED_USER_GPIO_Init+0x80>)
 8009fcc:	f000 fe30 	bl	800ac30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8009fe0:	f107 030c 	add.w	r3, r7, #12
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4804      	ldr	r0, [pc, #16]	; (8009ff8 <LED_USER_GPIO_Init+0x80>)
 8009fe8:	f000 fba2 	bl	800a730 <HAL_GPIO_Init>

}
 8009fec:	bf00      	nop
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	40023800 	.word	0x40023800
 8009ff8:	40020000 	.word	0x40020000

08009ffc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	460a      	mov	r2, r1
 800a006:	71fb      	strb	r3, [r7, #7]
 800a008:	4613      	mov	r3, r2
 800a00a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800a010:	79fb      	ldrb	r3, [r7, #7]
 800a012:	4a1f      	ldr	r2, [pc, #124]	; (800a090 <BSP_PB_Init+0x94>)
 800a014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a018:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800a01a:	79bb      	ldrb	r3, [r7, #6]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d132      	bne.n	800a086 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	4a1b      	ldr	r2, [pc, #108]	; (800a094 <BSP_PB_Init+0x98>)
 800a026:	441a      	add	r2, r3
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	491b      	ldr	r1, [pc, #108]	; (800a098 <BSP_PB_Init+0x9c>)
 800a02c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f000 fb43 	bl	800a6be <HAL_EXTI_GetHandle>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a03e:	f06f 0303 	mvn.w	r3, #3
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e01f      	b.n	800a086 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	4a12      	ldr	r2, [pc, #72]	; (800a094 <BSP_PB_Init+0x98>)
 800a04c:	1898      	adds	r0, r3, r2
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	4a12      	ldr	r2, [pc, #72]	; (800a09c <BSP_PB_Init+0xa0>)
 800a052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a056:	461a      	mov	r2, r3
 800a058:	2100      	movs	r1, #0
 800a05a:	f000 fb16 	bl	800a68a <HAL_EXTI_RegisterCallback>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a064:	f06f 0303 	mvn.w	r3, #3
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e00c      	b.n	800a086 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800a06c:	2028      	movs	r0, #40	; 0x28
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	4a0b      	ldr	r2, [pc, #44]	; (800a0a0 <BSP_PB_Init+0xa4>)
 800a072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a076:	2200      	movs	r2, #0
 800a078:	4619      	mov	r1, r3
 800a07a:	f000 facc 	bl	800a616 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800a07e:	2328      	movs	r3, #40	; 0x28
 800a080:	4618      	mov	r0, r3
 800a082:	f000 fae4 	bl	800a64e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800a086:	68fb      	ldr	r3, [r7, #12]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	0801208c 	.word	0x0801208c
 800a094:	2000018c 	.word	0x2000018c
 800a098:	08012090 	.word	0x08012090
 800a09c:	08012094 	.word	0x08012094
 800a0a0:	08012098 	.word	0x08012098

0800a0a4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	4a09      	ldr	r2, [pc, #36]	; (800a0d8 <BSP_PB_GetState+0x34>)
 800a0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fd9f 	bl	800ac00 <HAL_GPIO_ReadPin>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	bf0c      	ite	eq
 800a0c8:	2301      	moveq	r3, #1
 800a0ca:	2300      	movne	r3, #0
 800a0cc:	b2db      	uxtb	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000188 	.word	0x20000188

0800a0dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f7f7 f8d3 	bl	800128c <BSP_PB_Callback>
}
 800a0e6:	bf00      	nop
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60bb      	str	r3, [r7, #8]
 800a0f6:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <BUTTON_USER_GPIO_Init+0x74>)
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fa:	4a19      	ldr	r2, [pc, #100]	; (800a160 <BUTTON_USER_GPIO_Init+0x74>)
 800a0fc:	f043 0304 	orr.w	r3, r3, #4
 800a100:	6313      	str	r3, [r2, #48]	; 0x30
 800a102:	4b17      	ldr	r3, [pc, #92]	; (800a160 <BUTTON_USER_GPIO_Init+0x74>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	60bb      	str	r3, [r7, #8]
 800a10c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a10e:	f107 030c 	add.w	r3, r7, #12
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	605a      	str	r2, [r3, #4]
 800a118:	609a      	str	r2, [r3, #8]
 800a11a:	60da      	str	r2, [r3, #12]
 800a11c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
 800a122:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <BUTTON_USER_GPIO_Init+0x74>)
 800a124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a126:	4a0e      	ldr	r2, [pc, #56]	; (800a160 <BUTTON_USER_GPIO_Init+0x74>)
 800a128:	f043 0304 	orr.w	r3, r3, #4
 800a12c:	6313      	str	r3, [r2, #48]	; 0x30
 800a12e:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <BUTTON_USER_GPIO_Init+0x74>)
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	607b      	str	r3, [r7, #4]
 800a138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800a13a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a13e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a140:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a146:	2300      	movs	r3, #0
 800a148:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	4619      	mov	r1, r3
 800a150:	4804      	ldr	r0, [pc, #16]	; (800a164 <BUTTON_USER_GPIO_Init+0x78>)
 800a152:	f000 faed 	bl	800a730 <HAL_GPIO_Init>

}
 800a156:	bf00      	nop
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	40023800 	.word	0x40023800
 800a164:	40020800 	.word	0x40020800

0800a168 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d903      	bls.n	800a184 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a17c:	f06f 0301 	mvn.w	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e025      	b.n	800a1d0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	79fa      	ldrb	r2, [r7, #7]
 800a188:	4914      	ldr	r1, [pc, #80]	; (800a1dc <BSP_COM_Init+0x74>)
 800a18a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a18e:	4814      	ldr	r0, [pc, #80]	; (800a1e0 <BSP_COM_Init+0x78>)
 800a190:	4613      	mov	r3, r2
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	4413      	add	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4403      	add	r3, r0
 800a19a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800a19c:	79fa      	ldrb	r2, [r7, #7]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	011b      	lsls	r3, r3, #4
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4a0e      	ldr	r2, [pc, #56]	; (800a1e0 <BSP_COM_Init+0x78>)
 800a1a8:	4413      	add	r3, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f864 	bl	800a278 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800a1b0:	79fa      	ldrb	r2, [r7, #7]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <BSP_COM_Init+0x78>)
 800a1bc:	4413      	add	r3, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f810 	bl	800a1e4 <MX_USART2_UART_Init>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a1ca:	f06f 0303 	mvn.w	r3, #3
 800a1ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000194 	.word	0x20000194
 800a1e0:	200007a0 	.word	0x200007a0

0800a1e4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a12      	ldr	r2, [pc, #72]	; (800a23c <MX_USART2_UART_Init+0x58>)
 800a1f4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a1fc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	220c      	movs	r2, #12
 800a214:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f002 ff7c 	bl	800d120 <HAL_UART_Init>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	40004400 	.word	0x40004400

0800a240 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800a248:	4b09      	ldr	r3, [pc, #36]	; (800a270 <__io_putchar+0x30>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4613      	mov	r3, r2
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4a07      	ldr	r2, [pc, #28]	; (800a274 <__io_putchar+0x34>)
 800a258:	1898      	adds	r0, r3, r2
 800a25a:	1d39      	adds	r1, r7, #4
 800a25c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a260:	2201      	movs	r2, #1
 800a262:	f002 ffb4 	bl	800d1ce <HAL_UART_Transmit>
  return ch;
 800a266:	687b      	ldr	r3, [r7, #4]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	200007e4 	.word	0x200007e4
 800a274:	200007a0 	.word	0x200007a0

0800a278 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	; 0x28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a280:	2300      	movs	r3, #0
 800a282:	613b      	str	r3, [r7, #16]
 800a284:	4b1e      	ldr	r3, [pc, #120]	; (800a300 <USART2_MspInit+0x88>)
 800a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a288:	4a1d      	ldr	r2, [pc, #116]	; (800a300 <USART2_MspInit+0x88>)
 800a28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a28e:	6413      	str	r3, [r2, #64]	; 0x40
 800a290:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <USART2_MspInit+0x88>)
 800a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	4b17      	ldr	r3, [pc, #92]	; (800a300 <USART2_MspInit+0x88>)
 800a2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a4:	4a16      	ldr	r2, [pc, #88]	; (800a300 <USART2_MspInit+0x88>)
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ac:	4b14      	ldr	r3, [pc, #80]	; (800a300 <USART2_MspInit+0x88>)
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800a2b8:	2304      	movs	r3, #4
 800a2ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800a2c8:	2307      	movs	r3, #7
 800a2ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800a2cc:	f107 0314 	add.w	r3, r7, #20
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	480c      	ldr	r0, [pc, #48]	; (800a304 <USART2_MspInit+0x8c>)
 800a2d4:	f000 fa2c 	bl	800a730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800a2d8:	2308      	movs	r3, #8
 800a2da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800a2e8:	2307      	movs	r3, #7
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800a2ec:	f107 0314 	add.w	r3, r7, #20
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4804      	ldr	r0, [pc, #16]	; (800a304 <USART2_MspInit+0x8c>)
 800a2f4:	f000 fa1c 	bl	800a730 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800a2f8:	bf00      	nop
 800a2fa:	3728      	adds	r7, #40	; 0x28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40023800 	.word	0x40023800
 800a304:	40020000 	.word	0x40020000

0800a308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a30c:	4b0e      	ldr	r3, [pc, #56]	; (800a348 <HAL_Init+0x40>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a0d      	ldr	r2, [pc, #52]	; (800a348 <HAL_Init+0x40>)
 800a312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a318:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <HAL_Init+0x40>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a0a      	ldr	r2, [pc, #40]	; (800a348 <HAL_Init+0x40>)
 800a31e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a324:	4b08      	ldr	r3, [pc, #32]	; (800a348 <HAL_Init+0x40>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a07      	ldr	r2, [pc, #28]	; (800a348 <HAL_Init+0x40>)
 800a32a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a32e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a330:	2003      	movs	r0, #3
 800a332:	f000 f965 	bl	800a600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a336:	2000      	movs	r0, #0
 800a338:	f000 f808 	bl	800a34c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a33c:	f7f7 fe00 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	40023c00 	.word	0x40023c00

0800a34c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a354:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <HAL_InitTick+0x54>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <HAL_InitTick+0x58>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	4619      	mov	r1, r3
 800a35e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a362:	fbb3 f3f1 	udiv	r3, r3, r1
 800a366:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f981 	bl	800a672 <HAL_SYSTICK_Config>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e00e      	b.n	800a398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b0f      	cmp	r3, #15
 800a37e:	d80a      	bhi.n	800a396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a380:	2200      	movs	r2, #0
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	f000 f945 	bl	800a616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a38c:	4a06      	ldr	r2, [pc, #24]	; (800a3a8 <HAL_InitTick+0x5c>)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	e000      	b.n	800a398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000004 	.word	0x20000004
 800a3a4:	2000019c 	.word	0x2000019c
 800a3a8:	20000198 	.word	0x20000198

0800a3ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a3b0:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <HAL_IncTick+0x20>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <HAL_IncTick+0x24>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	4a04      	ldr	r2, [pc, #16]	; (800a3d0 <HAL_IncTick+0x24>)
 800a3be:	6013      	str	r3, [r2, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	2000019c 	.word	0x2000019c
 800a3d0:	200007e8 	.word	0x200007e8

0800a3d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  return uwTick;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <HAL_GetTick+0x14>)
 800a3da:	681b      	ldr	r3, [r3, #0]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	200007e8 	.word	0x200007e8

0800a3ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a3f4:	f7ff ffee 	bl	800a3d4 <HAL_GetTick>
 800a3f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a404:	d005      	beq.n	800a412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a406:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <HAL_Delay+0x44>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4413      	add	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a412:	bf00      	nop
 800a414:	f7ff ffde 	bl	800a3d4 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d8f7      	bhi.n	800a414 <HAL_Delay+0x28>
  {
  }
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2000019c 	.word	0x2000019c

0800a434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a444:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <__NVIC_SetPriorityGrouping+0x44>)
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a450:	4013      	ands	r3, r2
 800a452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a45c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a466:	4a04      	ldr	r2, [pc, #16]	; (800a478 <__NVIC_SetPriorityGrouping+0x44>)
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	60d3      	str	r3, [r2, #12]
}
 800a46c:	bf00      	nop
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	e000ed00 	.word	0xe000ed00

0800a47c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <__NVIC_GetPriorityGrouping+0x18>)
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	0a1b      	lsrs	r3, r3, #8
 800a486:	f003 0307 	and.w	r3, r3, #7
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	e000ed00 	.word	0xe000ed00

0800a498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	db0b      	blt.n	800a4c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	f003 021f 	and.w	r2, r3, #31
 800a4b0:	4907      	ldr	r1, [pc, #28]	; (800a4d0 <__NVIC_EnableIRQ+0x38>)
 800a4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4b6:	095b      	lsrs	r3, r3, #5
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	fa00 f202 	lsl.w	r2, r0, r2
 800a4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	e000e100 	.word	0xe000e100

0800a4d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6039      	str	r1, [r7, #0]
 800a4de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	db0a      	blt.n	800a4fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	490c      	ldr	r1, [pc, #48]	; (800a520 <__NVIC_SetPriority+0x4c>)
 800a4ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f2:	0112      	lsls	r2, r2, #4
 800a4f4:	b2d2      	uxtb	r2, r2
 800a4f6:	440b      	add	r3, r1
 800a4f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a4fc:	e00a      	b.n	800a514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	b2da      	uxtb	r2, r3
 800a502:	4908      	ldr	r1, [pc, #32]	; (800a524 <__NVIC_SetPriority+0x50>)
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	3b04      	subs	r3, #4
 800a50c:	0112      	lsls	r2, r2, #4
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	440b      	add	r3, r1
 800a512:	761a      	strb	r2, [r3, #24]
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	e000e100 	.word	0xe000e100
 800a524:	e000ed00 	.word	0xe000ed00

0800a528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a528:	b480      	push	{r7}
 800a52a:	b089      	sub	sp, #36	; 0x24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	f1c3 0307 	rsb	r3, r3, #7
 800a542:	2b04      	cmp	r3, #4
 800a544:	bf28      	it	cs
 800a546:	2304      	movcs	r3, #4
 800a548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	3304      	adds	r3, #4
 800a54e:	2b06      	cmp	r3, #6
 800a550:	d902      	bls.n	800a558 <NVIC_EncodePriority+0x30>
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	3b03      	subs	r3, #3
 800a556:	e000      	b.n	800a55a <NVIC_EncodePriority+0x32>
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a55c:	f04f 32ff 	mov.w	r2, #4294967295
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	fa02 f303 	lsl.w	r3, r2, r3
 800a566:	43da      	mvns	r2, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	401a      	ands	r2, r3
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a570:	f04f 31ff 	mov.w	r1, #4294967295
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	fa01 f303 	lsl.w	r3, r1, r3
 800a57a:	43d9      	mvns	r1, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a580:	4313      	orrs	r3, r2
         );
}
 800a582:	4618      	mov	r0, r3
 800a584:	3724      	adds	r7, #36	; 0x24
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
	...

0800a590 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a594:	f3bf 8f4f 	dsb	sy
}
 800a598:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a59a:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <__NVIC_SystemReset+0x24>)
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a5a2:	4904      	ldr	r1, [pc, #16]	; (800a5b4 <__NVIC_SystemReset+0x24>)
 800a5a4:	4b04      	ldr	r3, [pc, #16]	; (800a5b8 <__NVIC_SystemReset+0x28>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a5aa:	f3bf 8f4f 	dsb	sy
}
 800a5ae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <__NVIC_SystemReset+0x20>
 800a5b4:	e000ed00 	.word	0xe000ed00
 800a5b8:	05fa0004 	.word	0x05fa0004

0800a5bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5cc:	d301      	bcc.n	800a5d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e00f      	b.n	800a5f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5d2:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <SysTick_Config+0x40>)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5da:	210f      	movs	r1, #15
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	f7ff ff78 	bl	800a4d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5e4:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <SysTick_Config+0x40>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a5ea:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <SysTick_Config+0x40>)
 800a5ec:	2207      	movs	r2, #7
 800a5ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	e000e010 	.word	0xe000e010

0800a600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff13 	bl	800a434 <__NVIC_SetPriorityGrouping>
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a616:	b580      	push	{r7, lr}
 800a618:	b086      	sub	sp, #24
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	4603      	mov	r3, r0
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a628:	f7ff ff28 	bl	800a47c <__NVIC_GetPriorityGrouping>
 800a62c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	6978      	ldr	r0, [r7, #20]
 800a634:	f7ff ff78 	bl	800a528 <NVIC_EncodePriority>
 800a638:	4602      	mov	r2, r0
 800a63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff ff47 	bl	800a4d4 <__NVIC_SetPriority>
}
 800a646:	bf00      	nop
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	4603      	mov	r3, r0
 800a656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff ff1b 	bl	800a498 <__NVIC_EnableIRQ>
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a66e:	f7ff ff8f 	bl	800a590 <__NVIC_SystemReset>

0800a672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff ff9e 	bl	800a5bc <SysTick_Config>
 800a680:	4603      	mov	r3, r0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a68a:	b480      	push	{r7}
 800a68c:	b087      	sub	sp, #28
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	460b      	mov	r3, r1
 800a694:	607a      	str	r2, [r7, #4]
 800a696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d103      	bne.n	800a6aa <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	605a      	str	r2, [r3, #4]
      break;
 800a6a8:	e002      	b.n	800a6b0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ae:	bf00      	nop
  }

  return status;
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	371c      	adds	r7, #28
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b083      	sub	sp, #12
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e003      	b.n	800a6da <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
  }
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <HAL_EXTI_IRQHandler+0x44>)
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4013      	ands	r3, r2
 800a708:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d009      	beq.n	800a724 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a710:	4a06      	ldr	r2, [pc, #24]	; (800a72c <HAL_EXTI_IRQHandler+0x44>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4798      	blx	r3
    }
  }
}
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	40013c00 	.word	0x40013c00

0800a730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a730:	b480      	push	{r7}
 800a732:	b089      	sub	sp, #36	; 0x24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a742:	2300      	movs	r3, #0
 800a744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	e159      	b.n	800aa00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a74c:	2201      	movs	r2, #1
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4013      	ands	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	429a      	cmp	r2, r3
 800a766:	f040 8148 	bne.w	800a9fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b01      	cmp	r3, #1
 800a774:	d005      	beq.n	800a782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d130      	bne.n	800a7e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	2203      	movs	r2, #3
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	43db      	mvns	r3, r3
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	4013      	ands	r3, r2
 800a798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	091b      	lsrs	r3, r3, #4
 800a7ce:	f003 0201 	and.w	r2, r3, #1
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f003 0303 	and.w	r3, r3, #3
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d017      	beq.n	800a820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	2203      	movs	r2, #3
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	43db      	mvns	r3, r3
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	4013      	ands	r3, r2
 800a806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	fa02 f303 	lsl.w	r3, r2, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4313      	orrs	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d123      	bne.n	800a874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	08da      	lsrs	r2, r3, #3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3208      	adds	r2, #8
 800a834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	f003 0307 	and.w	r3, r3, #7
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	220f      	movs	r2, #15
 800a844:	fa02 f303 	lsl.w	r3, r2, r3
 800a848:	43db      	mvns	r3, r3
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	4013      	ands	r3, r2
 800a84e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	691a      	ldr	r2, [r3, #16]
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	4313      	orrs	r3, r2
 800a864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	08da      	lsrs	r2, r3, #3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3208      	adds	r2, #8
 800a86e:	69b9      	ldr	r1, [r7, #24]
 800a870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	2203      	movs	r2, #3
 800a880:	fa02 f303 	lsl.w	r3, r2, r3
 800a884:	43db      	mvns	r3, r3
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	4013      	ands	r3, r2
 800a88a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f003 0203 	and.w	r2, r3, #3
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	fa02 f303 	lsl.w	r3, r2, r3
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 80a2 	beq.w	800a9fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	4b57      	ldr	r3, [pc, #348]	; (800aa18 <HAL_GPIO_Init+0x2e8>)
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	4a56      	ldr	r2, [pc, #344]	; (800aa18 <HAL_GPIO_Init+0x2e8>)
 800a8c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8c6:	4b54      	ldr	r3, [pc, #336]	; (800aa18 <HAL_GPIO_Init+0x2e8>)
 800a8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8d2:	4a52      	ldr	r2, [pc, #328]	; (800aa1c <HAL_GPIO_Init+0x2ec>)
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	089b      	lsrs	r3, r3, #2
 800a8d8:	3302      	adds	r3, #2
 800a8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	f003 0303 	and.w	r3, r3, #3
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	220f      	movs	r2, #15
 800a8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ee:	43db      	mvns	r3, r3
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a49      	ldr	r2, [pc, #292]	; (800aa20 <HAL_GPIO_Init+0x2f0>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d019      	beq.n	800a932 <HAL_GPIO_Init+0x202>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a48      	ldr	r2, [pc, #288]	; (800aa24 <HAL_GPIO_Init+0x2f4>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d013      	beq.n	800a92e <HAL_GPIO_Init+0x1fe>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a47      	ldr	r2, [pc, #284]	; (800aa28 <HAL_GPIO_Init+0x2f8>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00d      	beq.n	800a92a <HAL_GPIO_Init+0x1fa>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a46      	ldr	r2, [pc, #280]	; (800aa2c <HAL_GPIO_Init+0x2fc>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d007      	beq.n	800a926 <HAL_GPIO_Init+0x1f6>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a45      	ldr	r2, [pc, #276]	; (800aa30 <HAL_GPIO_Init+0x300>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d101      	bne.n	800a922 <HAL_GPIO_Init+0x1f2>
 800a91e:	2304      	movs	r3, #4
 800a920:	e008      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a922:	2307      	movs	r3, #7
 800a924:	e006      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a926:	2303      	movs	r3, #3
 800a928:	e004      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a92a:	2302      	movs	r3, #2
 800a92c:	e002      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a932:	2300      	movs	r3, #0
 800a934:	69fa      	ldr	r2, [r7, #28]
 800a936:	f002 0203 	and.w	r2, r2, #3
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	4093      	lsls	r3, r2
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	4313      	orrs	r3, r2
 800a942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a944:	4935      	ldr	r1, [pc, #212]	; (800aa1c <HAL_GPIO_Init+0x2ec>)
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	089b      	lsrs	r3, r3, #2
 800a94a:	3302      	adds	r3, #2
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a952:	4b38      	ldr	r3, [pc, #224]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	43db      	mvns	r3, r3
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	4013      	ands	r3, r2
 800a960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a976:	4a2f      	ldr	r2, [pc, #188]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a97c:	4b2d      	ldr	r3, [pc, #180]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	43db      	mvns	r3, r3
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	4013      	ands	r3, r2
 800a98a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a9a0:	4a24      	ldr	r2, [pc, #144]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a9a6:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	43db      	mvns	r3, r3
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9ca:	4a1a      	ldr	r2, [pc, #104]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a9d0:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	69ba      	ldr	r2, [r7, #24]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9f4:	4a0f      	ldr	r2, [pc, #60]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	61fb      	str	r3, [r7, #28]
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	2b0f      	cmp	r3, #15
 800aa04:	f67f aea2 	bls.w	800a74c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa08:	bf00      	nop
 800aa0a:	bf00      	nop
 800aa0c:	3724      	adds	r7, #36	; 0x24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	40023800 	.word	0x40023800
 800aa1c:	40013800 	.word	0x40013800
 800aa20:	40020000 	.word	0x40020000
 800aa24:	40020400 	.word	0x40020400
 800aa28:	40020800 	.word	0x40020800
 800aa2c:	40020c00 	.word	0x40020c00
 800aa30:	40021000 	.word	0x40021000
 800aa34:	40013c00 	.word	0x40013c00

0800aa38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
 800aa52:	e0bb      	b.n	800abcc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aa54:	2201      	movs	r2, #1
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4013      	ands	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	f040 80ab 	bne.w	800abc6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aa70:	4a5c      	ldr	r2, [pc, #368]	; (800abe4 <HAL_GPIO_DeInit+0x1ac>)
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	089b      	lsrs	r3, r3, #2
 800aa76:	3302      	adds	r3, #2
 800aa78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa7c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	220f      	movs	r2, #15
 800aa88:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a54      	ldr	r2, [pc, #336]	; (800abe8 <HAL_GPIO_DeInit+0x1b0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d019      	beq.n	800aace <HAL_GPIO_DeInit+0x96>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a53      	ldr	r2, [pc, #332]	; (800abec <HAL_GPIO_DeInit+0x1b4>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <HAL_GPIO_DeInit+0x92>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a52      	ldr	r2, [pc, #328]	; (800abf0 <HAL_GPIO_DeInit+0x1b8>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00d      	beq.n	800aac6 <HAL_GPIO_DeInit+0x8e>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a51      	ldr	r2, [pc, #324]	; (800abf4 <HAL_GPIO_DeInit+0x1bc>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d007      	beq.n	800aac2 <HAL_GPIO_DeInit+0x8a>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a50      	ldr	r2, [pc, #320]	; (800abf8 <HAL_GPIO_DeInit+0x1c0>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d101      	bne.n	800aabe <HAL_GPIO_DeInit+0x86>
 800aaba:	2304      	movs	r3, #4
 800aabc:	e008      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aabe:	2307      	movs	r3, #7
 800aac0:	e006      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aac2:	2303      	movs	r3, #3
 800aac4:	e004      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e002      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e000      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aace:	2300      	movs	r3, #0
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	f002 0203 	and.w	r2, r2, #3
 800aad6:	0092      	lsls	r2, r2, #2
 800aad8:	4093      	lsls	r3, r2
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d132      	bne.n	800ab46 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aae0:	4b46      	ldr	r3, [pc, #280]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	43db      	mvns	r3, r3
 800aae8:	4944      	ldr	r1, [pc, #272]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aaea:	4013      	ands	r3, r2
 800aaec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800aaee:	4b43      	ldr	r3, [pc, #268]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	4941      	ldr	r1, [pc, #260]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800aafc:	4b3f      	ldr	r3, [pc, #252]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	43db      	mvns	r3, r3
 800ab04:	493d      	ldr	r1, [pc, #244]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800ab06:	4013      	ands	r3, r2
 800ab08:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ab0a:	4b3c      	ldr	r3, [pc, #240]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	43db      	mvns	r3, r3
 800ab12:	493a      	ldr	r1, [pc, #232]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800ab14:	4013      	ands	r3, r2
 800ab16:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	220f      	movs	r2, #15
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ab28:	4a2e      	ldr	r2, [pc, #184]	; (800abe4 <HAL_GPIO_DeInit+0x1ac>)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	089b      	lsrs	r3, r3, #2
 800ab2e:	3302      	adds	r3, #2
 800ab30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	43da      	mvns	r2, r3
 800ab38:	482a      	ldr	r0, [pc, #168]	; (800abe4 <HAL_GPIO_DeInit+0x1ac>)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	400a      	ands	r2, r1
 800ab40:	3302      	adds	r3, #2
 800ab42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	2103      	movs	r1, #3
 800ab50:	fa01 f303 	lsl.w	r3, r1, r3
 800ab54:	43db      	mvns	r3, r3
 800ab56:	401a      	ands	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	08da      	lsrs	r2, r3, #3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3208      	adds	r2, #8
 800ab64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	220f      	movs	r2, #15
 800ab72:	fa02 f303 	lsl.w	r3, r2, r3
 800ab76:	43db      	mvns	r3, r3
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	08d2      	lsrs	r2, r2, #3
 800ab7c:	4019      	ands	r1, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3208      	adds	r2, #8
 800ab82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	2103      	movs	r1, #3
 800ab90:	fa01 f303 	lsl.w	r3, r1, r3
 800ab94:	43db      	mvns	r3, r3
 800ab96:	401a      	ands	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	2101      	movs	r1, #1
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	fa01 f303 	lsl.w	r3, r1, r3
 800aba8:	43db      	mvns	r3, r3
 800abaa:	401a      	ands	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	2103      	movs	r1, #3
 800abba:	fa01 f303 	lsl.w	r3, r1, r3
 800abbe:	43db      	mvns	r3, r3
 800abc0:	401a      	ands	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	3301      	adds	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b0f      	cmp	r3, #15
 800abd0:	f67f af40 	bls.w	800aa54 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40013800 	.word	0x40013800
 800abe8:	40020000 	.word	0x40020000
 800abec:	40020400 	.word	0x40020400
 800abf0:	40020800 	.word	0x40020800
 800abf4:	40020c00 	.word	0x40020c00
 800abf8:	40021000 	.word	0x40021000
 800abfc:	40013c00 	.word	0x40013c00

0800ac00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691a      	ldr	r2, [r3, #16]
 800ac10:	887b      	ldrh	r3, [r7, #2]
 800ac12:	4013      	ands	r3, r2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
 800ac1c:	e001      	b.n	800ac22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	807b      	strh	r3, [r7, #2]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac40:	787b      	ldrb	r3, [r7, #1]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac46:	887a      	ldrh	r2, [r7, #2]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac4c:	e003      	b.n	800ac56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac4e:	887b      	ldrh	r3, [r7, #2]
 800ac50:	041a      	lsls	r2, r3, #16
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	619a      	str	r2, [r3, #24]
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ac74:	887a      	ldrh	r2, [r7, #2]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	4013      	ands	r3, r2
 800ac7a:	041a      	lsls	r2, r3, #16
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	43d9      	mvns	r1, r3
 800ac80:	887b      	ldrh	r3, [r7, #2]
 800ac82:	400b      	ands	r3, r1
 800ac84:	431a      	orrs	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	619a      	str	r2, [r3, #24]
}
 800ac8a:	bf00      	nop
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
	...

0800ac98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e12b      	b.n	800af02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f95d 	bl	800af7e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2224      	movs	r2, #36	; 0x24
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0201 	bic.w	r2, r2, #1
 800acda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800acfc:	f001 fc5a 	bl	800c5b4 <HAL_RCC_GetPCLK1Freq>
 800ad00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4a81      	ldr	r2, [pc, #516]	; (800af0c <HAL_I2C_Init+0x274>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d807      	bhi.n	800ad1c <HAL_I2C_Init+0x84>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4a80      	ldr	r2, [pc, #512]	; (800af10 <HAL_I2C_Init+0x278>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	bf94      	ite	ls
 800ad14:	2301      	movls	r3, #1
 800ad16:	2300      	movhi	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	e006      	b.n	800ad2a <HAL_I2C_Init+0x92>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4a7d      	ldr	r2, [pc, #500]	; (800af14 <HAL_I2C_Init+0x27c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	bf94      	ite	ls
 800ad24:	2301      	movls	r3, #1
 800ad26:	2300      	movhi	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e0e7      	b.n	800af02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4a78      	ldr	r2, [pc, #480]	; (800af18 <HAL_I2C_Init+0x280>)
 800ad36:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3a:	0c9b      	lsrs	r3, r3, #18
 800ad3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	4a6a      	ldr	r2, [pc, #424]	; (800af0c <HAL_I2C_Init+0x274>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d802      	bhi.n	800ad6c <HAL_I2C_Init+0xd4>
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	e009      	b.n	800ad80 <HAL_I2C_Init+0xe8>
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad72:	fb02 f303 	mul.w	r3, r2, r3
 800ad76:	4a69      	ldr	r2, [pc, #420]	; (800af1c <HAL_I2C_Init+0x284>)
 800ad78:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7c:	099b      	lsrs	r3, r3, #6
 800ad7e:	3301      	adds	r3, #1
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	430b      	orrs	r3, r1
 800ad86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ad92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	495c      	ldr	r1, [pc, #368]	; (800af0c <HAL_I2C_Init+0x274>)
 800ad9c:	428b      	cmp	r3, r1
 800ad9e:	d819      	bhi.n	800add4 <HAL_I2C_Init+0x13c>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	1e59      	subs	r1, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	fbb1 f3f3 	udiv	r3, r1, r3
 800adae:	1c59      	adds	r1, r3, #1
 800adb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800adb4:	400b      	ands	r3, r1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <HAL_I2C_Init+0x138>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	1e59      	subs	r1, r3, #1
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	fbb1 f3f3 	udiv	r3, r1, r3
 800adc8:	3301      	adds	r3, #1
 800adca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adce:	e051      	b.n	800ae74 <HAL_I2C_Init+0x1dc>
 800add0:	2304      	movs	r3, #4
 800add2:	e04f      	b.n	800ae74 <HAL_I2C_Init+0x1dc>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d111      	bne.n	800ae00 <HAL_I2C_Init+0x168>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	1e58      	subs	r0, r3, #1
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6859      	ldr	r1, [r3, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	440b      	add	r3, r1
 800adea:	fbb0 f3f3 	udiv	r3, r0, r3
 800adee:	3301      	adds	r3, #1
 800adf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bf0c      	ite	eq
 800adf8:	2301      	moveq	r3, #1
 800adfa:	2300      	movne	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	e012      	b.n	800ae26 <HAL_I2C_Init+0x18e>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	1e58      	subs	r0, r3, #1
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6859      	ldr	r1, [r3, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	440b      	add	r3, r1
 800ae0e:	0099      	lsls	r1, r3, #2
 800ae10:	440b      	add	r3, r1
 800ae12:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae16:	3301      	adds	r3, #1
 800ae18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bf0c      	ite	eq
 800ae20:	2301      	moveq	r3, #1
 800ae22:	2300      	movne	r3, #0
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <HAL_I2C_Init+0x196>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e022      	b.n	800ae74 <HAL_I2C_Init+0x1dc>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10e      	bne.n	800ae54 <HAL_I2C_Init+0x1bc>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	1e58      	subs	r0, r3, #1
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6859      	ldr	r1, [r3, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	440b      	add	r3, r1
 800ae44:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae48:	3301      	adds	r3, #1
 800ae4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae52:	e00f      	b.n	800ae74 <HAL_I2C_Init+0x1dc>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	1e58      	subs	r0, r3, #1
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6859      	ldr	r1, [r3, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	440b      	add	r3, r1
 800ae62:	0099      	lsls	r1, r3, #2
 800ae64:	440b      	add	r3, r1
 800ae66:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	6809      	ldr	r1, [r1, #0]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69da      	ldr	r2, [r3, #28]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	430a      	orrs	r2, r1
 800ae96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800aea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	6911      	ldr	r1, [r2, #16]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	68d2      	ldr	r2, [r2, #12]
 800aeae:	4311      	orrs	r1, r2
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6812      	ldr	r2, [r2, #0]
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695a      	ldr	r2, [r3, #20]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	431a      	orrs	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0201 	orr.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2220      	movs	r2, #32
 800aeee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	000186a0 	.word	0x000186a0
 800af10:	001e847f 	.word	0x001e847f
 800af14:	003d08ff 	.word	0x003d08ff
 800af18:	431bde83 	.word	0x431bde83
 800af1c:	10624dd3 	.word	0x10624dd3

0800af20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d101      	bne.n	800af32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e021      	b.n	800af76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2224      	movs	r2, #36	; 0x24
 800af36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f022 0201 	bic.w	r2, r2, #1
 800af48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f821 	bl	800af92 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800af86:	bf00      	nop
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
	...

0800afa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af02      	add	r7, sp, #8
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	4608      	mov	r0, r1
 800afb2:	4611      	mov	r1, r2
 800afb4:	461a      	mov	r2, r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	817b      	strh	r3, [r7, #10]
 800afba:	460b      	mov	r3, r1
 800afbc:	813b      	strh	r3, [r7, #8]
 800afbe:	4613      	mov	r3, r2
 800afc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800afc2:	f7ff fa07 	bl	800a3d4 <HAL_GetTick>
 800afc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b20      	cmp	r3, #32
 800afd2:	f040 80d9 	bne.w	800b188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	2319      	movs	r3, #25
 800afdc:	2201      	movs	r2, #1
 800afde:	496d      	ldr	r1, [pc, #436]	; (800b194 <HAL_I2C_Mem_Write+0x1ec>)
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 fc99 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800afec:	2302      	movs	r3, #2
 800afee:	e0cc      	b.n	800b18a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d101      	bne.n	800affe <HAL_I2C_Mem_Write+0x56>
 800affa:	2302      	movs	r3, #2
 800affc:	e0c5      	b.n	800b18a <HAL_I2C_Mem_Write+0x1e2>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b01      	cmp	r3, #1
 800b012:	d007      	beq.n	800b024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2221      	movs	r2, #33	; 0x21
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2240      	movs	r2, #64	; 0x40
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a3a      	ldr	r2, [r7, #32]
 800b04e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4a4d      	ldr	r2, [pc, #308]	; (800b198 <HAL_I2C_Mem_Write+0x1f0>)
 800b064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b066:	88f8      	ldrh	r0, [r7, #6]
 800b068:	893a      	ldrh	r2, [r7, #8]
 800b06a:	8979      	ldrh	r1, [r7, #10]
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	4603      	mov	r3, r0
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 fad0 	bl	800b61c <I2C_RequestMemoryWrite>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d052      	beq.n	800b128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e081      	b.n	800b18a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 fd1a 	bl	800bac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00d      	beq.n	800b0b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d107      	bne.n	800b0ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e06b      	b.n	800b18a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	781a      	ldrb	r2, [r3, #0]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d11b      	bne.n	800b128 <HAL_I2C_Mem_Write+0x180>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d017      	beq.n	800b128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	781a      	ldrb	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b112:	3b01      	subs	r3, #1
 800b114:	b29a      	uxth	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b11e:	b29b      	uxth	r3, r3
 800b120:	3b01      	subs	r3, #1
 800b122:	b29a      	uxth	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1aa      	bne.n	800b086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fd06 	bl	800bb46 <I2C_WaitOnBTFFlagUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00d      	beq.n	800b15c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b144:	2b04      	cmp	r3, #4
 800b146:	d107      	bne.n	800b158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e016      	b.n	800b18a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b16a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2220      	movs	r2, #32
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	e000      	b.n	800b18a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b188:	2302      	movs	r3, #2
  }
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	00100002 	.word	0x00100002
 800b198:	ffff0000 	.word	0xffff0000

0800b19c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08c      	sub	sp, #48	; 0x30
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	817b      	strh	r3, [r7, #10]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	813b      	strh	r3, [r7, #8]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b1b6:	f7ff f90d 	bl	800a3d4 <HAL_GetTick>
 800b1ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	f040 8208 	bne.w	800b5da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	2319      	movs	r3, #25
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	497b      	ldr	r1, [pc, #492]	; (800b3c0 <HAL_I2C_Mem_Read+0x224>)
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 fb9f 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e1fb      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <HAL_I2C_Mem_Read+0x56>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e1f4      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b01      	cmp	r3, #1
 800b206:	d007      	beq.n	800b218 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f042 0201 	orr.w	r2, r2, #1
 800b216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2222      	movs	r2, #34	; 0x22
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2240      	movs	r2, #64	; 0x40
 800b234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b24e:	b29a      	uxth	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4a5b      	ldr	r2, [pc, #364]	; (800b3c4 <HAL_I2C_Mem_Read+0x228>)
 800b258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b25a:	88f8      	ldrh	r0, [r7, #6]
 800b25c:	893a      	ldrh	r2, [r7, #8]
 800b25e:	8979      	ldrh	r1, [r7, #10]
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	4603      	mov	r3, r0
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 fa6c 	bl	800b748 <I2C_RequestMemoryRead>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e1b0      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d113      	bne.n	800b2aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b282:	2300      	movs	r3, #0
 800b284:	623b      	str	r3, [r7, #32]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	623b      	str	r3, [r7, #32]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	623b      	str	r3, [r7, #32]
 800b296:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2a6:	601a      	str	r2, [r3, #0]
 800b2a8:	e184      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d11b      	bne.n	800b2ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	61fb      	str	r3, [r7, #28]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	61fb      	str	r3, [r7, #28]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	e164      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d11b      	bne.n	800b32a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b300:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b312:	2300      	movs	r3, #0
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	61bb      	str	r3, [r7, #24]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	e144      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b32a:	2300      	movs	r3, #0
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b340:	e138      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b346:	2b03      	cmp	r3, #3
 800b348:	f200 80f1 	bhi.w	800b52e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b350:	2b01      	cmp	r3, #1
 800b352:	d123      	bne.n	800b39c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 fc35 	bl	800bbc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	e139      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b384:	3b01      	subs	r3, #1
 800b386:	b29a      	uxth	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b390:	b29b      	uxth	r3, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b39a:	e10b      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d14e      	bne.n	800b442 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4906      	ldr	r1, [pc, #24]	; (800b3c8 <HAL_I2C_Mem_Read+0x22c>)
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 fab2 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d008      	beq.n	800b3cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e10e      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
 800b3be:	bf00      	nop
 800b3c0:	00100002 	.word	0x00100002
 800b3c4:	ffff0000 	.word	0xffff0000
 800b3c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	691a      	ldr	r2, [r3, #16]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b404:	b29b      	uxth	r3, r3
 800b406:	3b01      	subs	r3, #1
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42a:	3b01      	subs	r3, #1
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b440:	e0b8      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	2200      	movs	r2, #0
 800b44a:	4966      	ldr	r1, [pc, #408]	; (800b5e4 <HAL_I2C_Mem_Read+0x448>)
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 fa63 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e0bf      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b46a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	691a      	ldr	r2, [r3, #16]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b488:	3b01      	subs	r3, #1
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b494:	b29b      	uxth	r3, r3
 800b496:	3b01      	subs	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	494f      	ldr	r1, [pc, #316]	; (800b5e4 <HAL_I2C_Mem_Read+0x448>)
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 fa35 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e091      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	691a      	ldr	r2, [r3, #16]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	691a      	ldr	r2, [r3, #16]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	b2d2      	uxtb	r2, r2
 800b506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b516:	3b01      	subs	r3, #1
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b522:	b29b      	uxth	r3, r3
 800b524:	3b01      	subs	r3, #1
 800b526:	b29a      	uxth	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b52c:	e042      	b.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 fb48 	bl	800bbc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e04c      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	1c5a      	adds	r2, r3, #1
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b55e:	3b01      	subs	r3, #1
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d118      	bne.n	800b5b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	691a      	ldr	r2, [r3, #16]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f47f aec2 	bne.w	800b342 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2220      	movs	r2, #32
 800b5c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e000      	b.n	800b5dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b5da:	2302      	movs	r3, #2
  }
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3728      	adds	r7, #40	; 0x28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	00010004 	.word	0x00010004

0800b5e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5f6:	b2db      	uxtb	r3, r3
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	4608      	mov	r0, r1
 800b626:	4611      	mov	r1, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	4603      	mov	r3, r0
 800b62c:	817b      	strh	r3, [r7, #10]
 800b62e:	460b      	mov	r3, r1
 800b630:	813b      	strh	r3, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	6a3b      	ldr	r3, [r7, #32]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 f960 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00d      	beq.n	800b67a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b66c:	d103      	bne.n	800b676 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e05f      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b67a:	897b      	ldrh	r3, [r7, #10]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	6a3a      	ldr	r2, [r7, #32]
 800b68e:	492d      	ldr	r1, [pc, #180]	; (800b744 <I2C_RequestMemoryWrite+0x128>)
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 f998 	bl	800b9c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e04c      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b8:	6a39      	ldr	r1, [r7, #32]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 fa02 	bl	800bac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00d      	beq.n	800b6e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	d107      	bne.n	800b6de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e02b      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6e2:	88fb      	ldrh	r3, [r7, #6]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d105      	bne.n	800b6f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6e8:	893b      	ldrh	r3, [r7, #8]
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	611a      	str	r2, [r3, #16]
 800b6f2:	e021      	b.n	800b738 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6f4:	893b      	ldrh	r3, [r7, #8]
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b704:	6a39      	ldr	r1, [r7, #32]
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 f9dc 	bl	800bac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	2b04      	cmp	r3, #4
 800b718:	d107      	bne.n	800b72a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e005      	b.n	800b73a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b72e:	893b      	ldrh	r3, [r7, #8]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3718      	adds	r7, #24
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	00010002 	.word	0x00010002

0800b748 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b088      	sub	sp, #32
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	4608      	mov	r0, r1
 800b752:	4611      	mov	r1, r2
 800b754:	461a      	mov	r2, r3
 800b756:	4603      	mov	r3, r0
 800b758:	817b      	strh	r3, [r7, #10]
 800b75a:	460b      	mov	r3, r1
 800b75c:	813b      	strh	r3, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b770:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	2200      	movs	r2, #0
 800b78a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 f8c2 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00d      	beq.n	800b7b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7a8:	d103      	bne.n	800b7b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e0aa      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7b6:	897b      	ldrh	r3, [r7, #10]
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b7c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	6a3a      	ldr	r2, [r7, #32]
 800b7ca:	4952      	ldr	r1, [pc, #328]	; (800b914 <I2C_RequestMemoryRead+0x1cc>)
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f8fa 	bl	800b9c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e097      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f4:	6a39      	ldr	r1, [r7, #32]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 f964 	bl	800bac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00d      	beq.n	800b81e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b806:	2b04      	cmp	r3, #4
 800b808:	d107      	bne.n	800b81a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e076      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b81e:	88fb      	ldrh	r3, [r7, #6]
 800b820:	2b01      	cmp	r3, #1
 800b822:	d105      	bne.n	800b830 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b824:	893b      	ldrh	r3, [r7, #8]
 800b826:	b2da      	uxtb	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	611a      	str	r2, [r3, #16]
 800b82e:	e021      	b.n	800b874 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b830:	893b      	ldrh	r3, [r7, #8]
 800b832:	0a1b      	lsrs	r3, r3, #8
 800b834:	b29b      	uxth	r3, r3
 800b836:	b2da      	uxtb	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b840:	6a39      	ldr	r1, [r7, #32]
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 f93e 	bl	800bac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00d      	beq.n	800b86a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	2b04      	cmp	r3, #4
 800b854:	d107      	bne.n	800b866 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e050      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b86a:	893b      	ldrh	r3, [r7, #8]
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b876:	6a39      	ldr	r1, [r7, #32]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f923 	bl	800bac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00d      	beq.n	800b8a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d107      	bne.n	800b89c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b89a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e035      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 f82b 	bl	800b918 <I2C_WaitOnFlagUntilTimeout>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00d      	beq.n	800b8e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8d6:	d103      	bne.n	800b8e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e013      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8e4:	897b      	ldrh	r3, [r7, #10]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f043 0301 	orr.w	r3, r3, #1
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	6a3a      	ldr	r2, [r7, #32]
 800b8f8:	4906      	ldr	r1, [pc, #24]	; (800b914 <I2C_RequestMemoryRead+0x1cc>)
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 f863 	bl	800b9c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	00010002 	.word	0x00010002

0800b918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	4613      	mov	r3, r2
 800b926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b928:	e025      	b.n	800b976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d021      	beq.n	800b976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b932:	f7fe fd4f 	bl	800a3d4 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d302      	bcc.n	800b948 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d116      	bne.n	800b976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2220      	movs	r2, #32
 800b952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	f043 0220 	orr.w	r2, r3, #32
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e023      	b.n	800b9be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	0c1b      	lsrs	r3, r3, #16
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d10d      	bne.n	800b99c <I2C_WaitOnFlagUntilTimeout+0x84>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	43da      	mvns	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	4013      	ands	r3, r2
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bf0c      	ite	eq
 800b992:	2301      	moveq	r3, #1
 800b994:	2300      	movne	r3, #0
 800b996:	b2db      	uxtb	r3, r3
 800b998:	461a      	mov	r2, r3
 800b99a:	e00c      	b.n	800b9b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	43da      	mvns	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bf0c      	ite	eq
 800b9ae:	2301      	moveq	r3, #1
 800b9b0:	2300      	movne	r3, #0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	79fb      	ldrb	r3, [r7, #7]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d0b6      	beq.n	800b92a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	60b9      	str	r1, [r7, #8]
 800b9d0:	607a      	str	r2, [r7, #4]
 800b9d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b9d4:	e051      	b.n	800ba7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9e4:	d123      	bne.n	800ba2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	f043 0204 	orr.w	r2, r3, #4
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e046      	b.n	800babc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba34:	d021      	beq.n	800ba7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba36:	f7fe fccd 	bl	800a3d4 <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d302      	bcc.n	800ba4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d116      	bne.n	800ba7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	f043 0220 	orr.w	r2, r3, #32
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e020      	b.n	800babc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	0c1b      	lsrs	r3, r3, #16
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d10c      	bne.n	800ba9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	43da      	mvns	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bf14      	ite	ne
 800ba96:	2301      	movne	r3, #1
 800ba98:	2300      	moveq	r3, #0
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	e00b      	b.n	800bab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	43da      	mvns	r2, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4013      	ands	r3, r2
 800baaa:	b29b      	uxth	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	bf14      	ite	ne
 800bab0:	2301      	movne	r3, #1
 800bab2:	2300      	moveq	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d18d      	bne.n	800b9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bad0:	e02d      	b.n	800bb2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 f8ce 	bl	800bc74 <I2C_IsAcknowledgeFailed>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e02d      	b.n	800bb3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae8:	d021      	beq.n	800bb2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baea:	f7fe fc73 	bl	800a3d4 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d302      	bcc.n	800bb00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d116      	bne.n	800bb2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1a:	f043 0220 	orr.w	r2, r3, #32
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e007      	b.n	800bb3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb38:	2b80      	cmp	r3, #128	; 0x80
 800bb3a:	d1ca      	bne.n	800bad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	60f8      	str	r0, [r7, #12]
 800bb4e:	60b9      	str	r1, [r7, #8]
 800bb50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb52:	e02d      	b.n	800bbb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 f88d 	bl	800bc74 <I2C_IsAcknowledgeFailed>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e02d      	b.n	800bbc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6a:	d021      	beq.n	800bbb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6c:	f7fe fc32 	bl	800a3d4 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d302      	bcc.n	800bb82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d116      	bne.n	800bbb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9c:	f043 0220 	orr.w	r2, r3, #32
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e007      	b.n	800bbc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	f003 0304 	and.w	r3, r3, #4
 800bbba:	2b04      	cmp	r3, #4
 800bbbc:	d1ca      	bne.n	800bb54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bbd4:	e042      	b.n	800bc5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	f003 0310 	and.w	r3, r3, #16
 800bbe0:	2b10      	cmp	r3, #16
 800bbe2:	d119      	bne.n	800bc18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f06f 0210 	mvn.w	r2, #16
 800bbec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e029      	b.n	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc18:	f7fe fbdc 	bl	800a3d4 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d302      	bcc.n	800bc2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d116      	bne.n	800bc5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2220      	movs	r2, #32
 800bc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc48:	f043 0220 	orr.w	r2, r3, #32
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e007      	b.n	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc66:	2b40      	cmp	r3, #64	; 0x40
 800bc68:	d1b5      	bne.n	800bbd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc8a:	d11b      	bne.n	800bcc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bc94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2220      	movs	r2, #32
 800bca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb0:	f043 0204 	orr.w	r2, r3, #4
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e000      	b.n	800bcc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
	...

0800bcd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e267      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d075      	beq.n	800bdde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bcf2:	4b88      	ldr	r3, [pc, #544]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f003 030c 	and.w	r3, r3, #12
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	d00c      	beq.n	800bd18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bcfe:	4b85      	ldr	r3, [pc, #532]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bd06:	2b08      	cmp	r3, #8
 800bd08:	d112      	bne.n	800bd30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bd0a:	4b82      	ldr	r3, [pc, #520]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd16:	d10b      	bne.n	800bd30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd18:	4b7e      	ldr	r3, [pc, #504]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d05b      	beq.n	800bddc <HAL_RCC_OscConfig+0x108>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d157      	bne.n	800bddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e242      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd38:	d106      	bne.n	800bd48 <HAL_RCC_OscConfig+0x74>
 800bd3a:	4b76      	ldr	r3, [pc, #472]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a75      	ldr	r2, [pc, #468]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	e01d      	b.n	800bd84 <HAL_RCC_OscConfig+0xb0>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd50:	d10c      	bne.n	800bd6c <HAL_RCC_OscConfig+0x98>
 800bd52:	4b70      	ldr	r3, [pc, #448]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a6f      	ldr	r2, [pc, #444]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	4b6d      	ldr	r3, [pc, #436]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a6c      	ldr	r2, [pc, #432]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd68:	6013      	str	r3, [r2, #0]
 800bd6a:	e00b      	b.n	800bd84 <HAL_RCC_OscConfig+0xb0>
 800bd6c:	4b69      	ldr	r3, [pc, #420]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a68      	ldr	r2, [pc, #416]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	4b66      	ldr	r3, [pc, #408]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a65      	ldr	r2, [pc, #404]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bd7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d013      	beq.n	800bdb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd8c:	f7fe fb22 	bl	800a3d4 <HAL_GetTick>
 800bd90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd92:	e008      	b.n	800bda6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd94:	f7fe fb1e 	bl	800a3d4 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	2b64      	cmp	r3, #100	; 0x64
 800bda0:	d901      	bls.n	800bda6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e207      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bda6:	4b5b      	ldr	r3, [pc, #364]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f0      	beq.n	800bd94 <HAL_RCC_OscConfig+0xc0>
 800bdb2:	e014      	b.n	800bdde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdb4:	f7fe fb0e 	bl	800a3d4 <HAL_GetTick>
 800bdb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bdba:	e008      	b.n	800bdce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bdbc:	f7fe fb0a 	bl	800a3d4 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	2b64      	cmp	r3, #100	; 0x64
 800bdc8:	d901      	bls.n	800bdce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e1f3      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bdce:	4b51      	ldr	r3, [pc, #324]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1f0      	bne.n	800bdbc <HAL_RCC_OscConfig+0xe8>
 800bdda:	e000      	b.n	800bdde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 0302 	and.w	r3, r3, #2
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d063      	beq.n	800beb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bdea:	4b4a      	ldr	r3, [pc, #296]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f003 030c 	and.w	r3, r3, #12
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00b      	beq.n	800be0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bdf6:	4b47      	ldr	r3, [pc, #284]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d11c      	bne.n	800be3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800be02:	4b44      	ldr	r3, [pc, #272]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d116      	bne.n	800be3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be0e:	4b41      	ldr	r3, [pc, #260]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0302 	and.w	r3, r3, #2
 800be16:	2b00      	cmp	r3, #0
 800be18:	d005      	beq.n	800be26 <HAL_RCC_OscConfig+0x152>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d001      	beq.n	800be26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e1c7      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be26:	4b3b      	ldr	r3, [pc, #236]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	4937      	ldr	r1, [pc, #220]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be36:	4313      	orrs	r3, r2
 800be38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be3a:	e03a      	b.n	800beb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d020      	beq.n	800be86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800be44:	4b34      	ldr	r3, [pc, #208]	; (800bf18 <HAL_RCC_OscConfig+0x244>)
 800be46:	2201      	movs	r2, #1
 800be48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be4a:	f7fe fac3 	bl	800a3d4 <HAL_GetTick>
 800be4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be50:	e008      	b.n	800be64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be52:	f7fe fabf 	bl	800a3d4 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d901      	bls.n	800be64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e1a8      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be64:	4b2b      	ldr	r3, [pc, #172]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0f0      	beq.n	800be52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be70:	4b28      	ldr	r3, [pc, #160]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	4925      	ldr	r1, [pc, #148]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800be80:	4313      	orrs	r3, r2
 800be82:	600b      	str	r3, [r1, #0]
 800be84:	e015      	b.n	800beb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be86:	4b24      	ldr	r3, [pc, #144]	; (800bf18 <HAL_RCC_OscConfig+0x244>)
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be8c:	f7fe faa2 	bl	800a3d4 <HAL_GetTick>
 800be90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be92:	e008      	b.n	800bea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be94:	f7fe fa9e 	bl	800a3d4 <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d901      	bls.n	800bea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e187      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bea6:	4b1b      	ldr	r3, [pc, #108]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1f0      	bne.n	800be94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0308 	and.w	r3, r3, #8
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d036      	beq.n	800bf2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d016      	beq.n	800bef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bec6:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <HAL_RCC_OscConfig+0x248>)
 800bec8:	2201      	movs	r2, #1
 800beca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800becc:	f7fe fa82 	bl	800a3d4 <HAL_GetTick>
 800bed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bed2:	e008      	b.n	800bee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bed4:	f7fe fa7e 	bl	800a3d4 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d901      	bls.n	800bee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e167      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <HAL_RCC_OscConfig+0x240>)
 800bee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beea:	f003 0302 	and.w	r3, r3, #2
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0f0      	beq.n	800bed4 <HAL_RCC_OscConfig+0x200>
 800bef2:	e01b      	b.n	800bf2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bef4:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <HAL_RCC_OscConfig+0x248>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800befa:	f7fe fa6b 	bl	800a3d4 <HAL_GetTick>
 800befe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf00:	e00e      	b.n	800bf20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bf02:	f7fe fa67 	bl	800a3d4 <HAL_GetTick>
 800bf06:	4602      	mov	r2, r0
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d907      	bls.n	800bf20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e150      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
 800bf14:	40023800 	.word	0x40023800
 800bf18:	42470000 	.word	0x42470000
 800bf1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf20:	4b88      	ldr	r3, [pc, #544]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bf22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf24:	f003 0302 	and.w	r3, r3, #2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1ea      	bne.n	800bf02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 8097 	beq.w	800c068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf3e:	4b81      	ldr	r3, [pc, #516]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10f      	bne.n	800bf6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60bb      	str	r3, [r7, #8]
 800bf4e:	4b7d      	ldr	r3, [pc, #500]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	4a7c      	ldr	r2, [pc, #496]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bf54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf58:	6413      	str	r3, [r2, #64]	; 0x40
 800bf5a:	4b7a      	ldr	r3, [pc, #488]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf62:	60bb      	str	r3, [r7, #8]
 800bf64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bf66:	2301      	movs	r3, #1
 800bf68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf6a:	4b77      	ldr	r3, [pc, #476]	; (800c148 <HAL_RCC_OscConfig+0x474>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d118      	bne.n	800bfa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bf76:	4b74      	ldr	r3, [pc, #464]	; (800c148 <HAL_RCC_OscConfig+0x474>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a73      	ldr	r2, [pc, #460]	; (800c148 <HAL_RCC_OscConfig+0x474>)
 800bf7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf82:	f7fe fa27 	bl	800a3d4 <HAL_GetTick>
 800bf86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf88:	e008      	b.n	800bf9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf8a:	f7fe fa23 	bl	800a3d4 <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d901      	bls.n	800bf9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e10c      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf9c:	4b6a      	ldr	r3, [pc, #424]	; (800c148 <HAL_RCC_OscConfig+0x474>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0f0      	beq.n	800bf8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d106      	bne.n	800bfbe <HAL_RCC_OscConfig+0x2ea>
 800bfb0:	4b64      	ldr	r3, [pc, #400]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb4:	4a63      	ldr	r2, [pc, #396]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfb6:	f043 0301 	orr.w	r3, r3, #1
 800bfba:	6713      	str	r3, [r2, #112]	; 0x70
 800bfbc:	e01c      	b.n	800bff8 <HAL_RCC_OscConfig+0x324>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	d10c      	bne.n	800bfe0 <HAL_RCC_OscConfig+0x30c>
 800bfc6:	4b5f      	ldr	r3, [pc, #380]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfca:	4a5e      	ldr	r2, [pc, #376]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfcc:	f043 0304 	orr.w	r3, r3, #4
 800bfd0:	6713      	str	r3, [r2, #112]	; 0x70
 800bfd2:	4b5c      	ldr	r3, [pc, #368]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd6:	4a5b      	ldr	r2, [pc, #364]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfd8:	f043 0301 	orr.w	r3, r3, #1
 800bfdc:	6713      	str	r3, [r2, #112]	; 0x70
 800bfde:	e00b      	b.n	800bff8 <HAL_RCC_OscConfig+0x324>
 800bfe0:	4b58      	ldr	r3, [pc, #352]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe4:	4a57      	ldr	r2, [pc, #348]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfe6:	f023 0301 	bic.w	r3, r3, #1
 800bfea:	6713      	str	r3, [r2, #112]	; 0x70
 800bfec:	4b55      	ldr	r3, [pc, #340]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bff0:	4a54      	ldr	r2, [pc, #336]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800bff2:	f023 0304 	bic.w	r3, r3, #4
 800bff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d015      	beq.n	800c02c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c000:	f7fe f9e8 	bl	800a3d4 <HAL_GetTick>
 800c004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c006:	e00a      	b.n	800c01e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c008:	f7fe f9e4 	bl	800a3d4 <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	f241 3288 	movw	r2, #5000	; 0x1388
 800c016:	4293      	cmp	r3, r2
 800c018:	d901      	bls.n	800c01e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e0cb      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c01e:	4b49      	ldr	r3, [pc, #292]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c022:	f003 0302 	and.w	r3, r3, #2
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0ee      	beq.n	800c008 <HAL_RCC_OscConfig+0x334>
 800c02a:	e014      	b.n	800c056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c02c:	f7fe f9d2 	bl	800a3d4 <HAL_GetTick>
 800c030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c032:	e00a      	b.n	800c04a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c034:	f7fe f9ce 	bl	800a3d4 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c042:	4293      	cmp	r3, r2
 800c044:	d901      	bls.n	800c04a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e0b5      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c04a:	4b3e      	ldr	r3, [pc, #248]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1ee      	bne.n	800c034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d105      	bne.n	800c068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c05c:	4b39      	ldr	r3, [pc, #228]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c060:	4a38      	ldr	r2, [pc, #224]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 80a1 	beq.w	800c1b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c072:	4b34      	ldr	r3, [pc, #208]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f003 030c 	and.w	r3, r3, #12
 800c07a:	2b08      	cmp	r3, #8
 800c07c:	d05c      	beq.n	800c138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	2b02      	cmp	r3, #2
 800c084:	d141      	bne.n	800c10a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c086:	4b31      	ldr	r3, [pc, #196]	; (800c14c <HAL_RCC_OscConfig+0x478>)
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c08c:	f7fe f9a2 	bl	800a3d4 <HAL_GetTick>
 800c090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c092:	e008      	b.n	800c0a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c094:	f7fe f99e 	bl	800a3d4 <HAL_GetTick>
 800c098:	4602      	mov	r2, r0
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d901      	bls.n	800c0a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e087      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0a6:	4b27      	ldr	r3, [pc, #156]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1f0      	bne.n	800c094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69da      	ldr	r2, [r3, #28]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	019b      	lsls	r3, r3, #6
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c8:	085b      	lsrs	r3, r3, #1
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	041b      	lsls	r3, r3, #16
 800c0ce:	431a      	orrs	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	491b      	ldr	r1, [pc, #108]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c0dc:	4b1b      	ldr	r3, [pc, #108]	; (800c14c <HAL_RCC_OscConfig+0x478>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c0e2:	f7fe f977 	bl	800a3d4 <HAL_GetTick>
 800c0e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0e8:	e008      	b.n	800c0fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0ea:	f7fe f973 	bl	800a3d4 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e05c      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0fc:	4b11      	ldr	r3, [pc, #68]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0f0      	beq.n	800c0ea <HAL_RCC_OscConfig+0x416>
 800c108:	e054      	b.n	800c1b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c10a:	4b10      	ldr	r3, [pc, #64]	; (800c14c <HAL_RCC_OscConfig+0x478>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c110:	f7fe f960 	bl	800a3d4 <HAL_GetTick>
 800c114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c116:	e008      	b.n	800c12a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c118:	f7fe f95c 	bl	800a3d4 <HAL_GetTick>
 800c11c:	4602      	mov	r2, r0
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	2b02      	cmp	r3, #2
 800c124:	d901      	bls.n	800c12a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	e045      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c12a:	4b06      	ldr	r3, [pc, #24]	; (800c144 <HAL_RCC_OscConfig+0x470>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1f0      	bne.n	800c118 <HAL_RCC_OscConfig+0x444>
 800c136:	e03d      	b.n	800c1b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d107      	bne.n	800c150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e038      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
 800c144:	40023800 	.word	0x40023800
 800c148:	40007000 	.word	0x40007000
 800c14c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c150:	4b1b      	ldr	r3, [pc, #108]	; (800c1c0 <HAL_RCC_OscConfig+0x4ec>)
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d028      	beq.n	800c1b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c168:	429a      	cmp	r2, r3
 800c16a:	d121      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c176:	429a      	cmp	r2, r3
 800c178:	d11a      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c180:	4013      	ands	r3, r2
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c188:	4293      	cmp	r3, r2
 800c18a:	d111      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c196:	085b      	lsrs	r3, r3, #1
 800c198:	3b01      	subs	r3, #1
 800c19a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d107      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d001      	beq.n	800c1b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e000      	b.n	800c1b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	40023800 	.word	0x40023800

0800c1c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e0cc      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c1d8:	4b68      	ldr	r3, [pc, #416]	; (800c37c <HAL_RCC_ClockConfig+0x1b8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0307 	and.w	r3, r3, #7
 800c1e0:	683a      	ldr	r2, [r7, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d90c      	bls.n	800c200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1e6:	4b65      	ldr	r3, [pc, #404]	; (800c37c <HAL_RCC_ClockConfig+0x1b8>)
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1ee:	4b63      	ldr	r3, [pc, #396]	; (800c37c <HAL_RCC_ClockConfig+0x1b8>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0307 	and.w	r3, r3, #7
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d001      	beq.n	800c200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e0b8      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d020      	beq.n	800c24e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 0304 	and.w	r3, r3, #4
 800c214:	2b00      	cmp	r3, #0
 800c216:	d005      	beq.n	800c224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c218:	4b59      	ldr	r3, [pc, #356]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	4a58      	ldr	r2, [pc, #352]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c21e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0308 	and.w	r3, r3, #8
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d005      	beq.n	800c23c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c230:	4b53      	ldr	r3, [pc, #332]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	4a52      	ldr	r2, [pc, #328]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c23a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c23c:	4b50      	ldr	r3, [pc, #320]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	494d      	ldr	r1, [pc, #308]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d044      	beq.n	800c2e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d107      	bne.n	800c272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c262:	4b47      	ldr	r3, [pc, #284]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d119      	bne.n	800c2a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e07f      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	2b02      	cmp	r3, #2
 800c278:	d003      	beq.n	800c282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d107      	bne.n	800c292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c282:	4b3f      	ldr	r3, [pc, #252]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d109      	bne.n	800c2a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e06f      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c292:	4b3b      	ldr	r3, [pc, #236]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 0302 	and.w	r3, r3, #2
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e067      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c2a2:	4b37      	ldr	r3, [pc, #220]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f023 0203 	bic.w	r2, r3, #3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	4934      	ldr	r1, [pc, #208]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c2b4:	f7fe f88e 	bl	800a3d4 <HAL_GetTick>
 800c2b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2ba:	e00a      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2bc:	f7fe f88a 	bl	800a3d4 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d901      	bls.n	800c2d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	e04f      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2d2:	4b2b      	ldr	r3, [pc, #172]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f003 020c 	and.w	r2, r3, #12
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d1eb      	bne.n	800c2bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c2e4:	4b25      	ldr	r3, [pc, #148]	; (800c37c <HAL_RCC_ClockConfig+0x1b8>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0307 	and.w	r3, r3, #7
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d20c      	bcs.n	800c30c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2f2:	4b22      	ldr	r3, [pc, #136]	; (800c37c <HAL_RCC_ClockConfig+0x1b8>)
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	b2d2      	uxtb	r2, r2
 800c2f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2fa:	4b20      	ldr	r3, [pc, #128]	; (800c37c <HAL_RCC_ClockConfig+0x1b8>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0307 	and.w	r3, r3, #7
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	429a      	cmp	r2, r3
 800c306:	d001      	beq.n	800c30c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e032      	b.n	800c372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c318:	4b19      	ldr	r3, [pc, #100]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	4916      	ldr	r1, [pc, #88]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c326:	4313      	orrs	r3, r2
 800c328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0308 	and.w	r3, r3, #8
 800c332:	2b00      	cmp	r3, #0
 800c334:	d009      	beq.n	800c34a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c336:	4b12      	ldr	r3, [pc, #72]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	490e      	ldr	r1, [pc, #56]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c346:	4313      	orrs	r3, r2
 800c348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c34a:	f000 f821 	bl	800c390 <HAL_RCC_GetSysClockFreq>
 800c34e:	4602      	mov	r2, r0
 800c350:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <HAL_RCC_ClockConfig+0x1bc>)
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	091b      	lsrs	r3, r3, #4
 800c356:	f003 030f 	and.w	r3, r3, #15
 800c35a:	490a      	ldr	r1, [pc, #40]	; (800c384 <HAL_RCC_ClockConfig+0x1c0>)
 800c35c:	5ccb      	ldrb	r3, [r1, r3]
 800c35e:	fa22 f303 	lsr.w	r3, r2, r3
 800c362:	4a09      	ldr	r2, [pc, #36]	; (800c388 <HAL_RCC_ClockConfig+0x1c4>)
 800c364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c366:	4b09      	ldr	r3, [pc, #36]	; (800c38c <HAL_RCC_ClockConfig+0x1c8>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fd ffee 	bl	800a34c <HAL_InitTick>

  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	40023c00 	.word	0x40023c00
 800c380:	40023800 	.word	0x40023800
 800c384:	08012070 	.word	0x08012070
 800c388:	20000004 	.word	0x20000004
 800c38c:	20000198 	.word	0x20000198

0800c390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c394:	b094      	sub	sp, #80	; 0x50
 800c396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	647b      	str	r3, [r7, #68]	; 0x44
 800c39c:	2300      	movs	r3, #0
 800c39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3a8:	4b79      	ldr	r3, [pc, #484]	; (800c590 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	f003 030c 	and.w	r3, r3, #12
 800c3b0:	2b08      	cmp	r3, #8
 800c3b2:	d00d      	beq.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x40>
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	f200 80e1 	bhi.w	800c57c <HAL_RCC_GetSysClockFreq+0x1ec>
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d002      	beq.n	800c3c4 <HAL_RCC_GetSysClockFreq+0x34>
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d003      	beq.n	800c3ca <HAL_RCC_GetSysClockFreq+0x3a>
 800c3c2:	e0db      	b.n	800c57c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c3c4:	4b73      	ldr	r3, [pc, #460]	; (800c594 <HAL_RCC_GetSysClockFreq+0x204>)
 800c3c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c3c8:	e0db      	b.n	800c582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c3ca:	4b73      	ldr	r3, [pc, #460]	; (800c598 <HAL_RCC_GetSysClockFreq+0x208>)
 800c3cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c3ce:	e0d8      	b.n	800c582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c3d0:	4b6f      	ldr	r3, [pc, #444]	; (800c590 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c3da:	4b6d      	ldr	r3, [pc, #436]	; (800c590 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d063      	beq.n	800c4ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3e6:	4b6a      	ldr	r3, [pc, #424]	; (800c590 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	099b      	lsrs	r3, r3, #6
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f8:	633b      	str	r3, [r7, #48]	; 0x30
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c3fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c402:	4622      	mov	r2, r4
 800c404:	462b      	mov	r3, r5
 800c406:	f04f 0000 	mov.w	r0, #0
 800c40a:	f04f 0100 	mov.w	r1, #0
 800c40e:	0159      	lsls	r1, r3, #5
 800c410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c414:	0150      	lsls	r0, r2, #5
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4621      	mov	r1, r4
 800c41c:	1a51      	subs	r1, r2, r1
 800c41e:	6139      	str	r1, [r7, #16]
 800c420:	4629      	mov	r1, r5
 800c422:	eb63 0301 	sbc.w	r3, r3, r1
 800c426:	617b      	str	r3, [r7, #20]
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c434:	4659      	mov	r1, fp
 800c436:	018b      	lsls	r3, r1, #6
 800c438:	4651      	mov	r1, sl
 800c43a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c43e:	4651      	mov	r1, sl
 800c440:	018a      	lsls	r2, r1, #6
 800c442:	4651      	mov	r1, sl
 800c444:	ebb2 0801 	subs.w	r8, r2, r1
 800c448:	4659      	mov	r1, fp
 800c44a:	eb63 0901 	sbc.w	r9, r3, r1
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	f04f 0300 	mov.w	r3, #0
 800c456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c45a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c45e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c462:	4690      	mov	r8, r2
 800c464:	4699      	mov	r9, r3
 800c466:	4623      	mov	r3, r4
 800c468:	eb18 0303 	adds.w	r3, r8, r3
 800c46c:	60bb      	str	r3, [r7, #8]
 800c46e:	462b      	mov	r3, r5
 800c470:	eb49 0303 	adc.w	r3, r9, r3
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	f04f 0300 	mov.w	r3, #0
 800c47e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c482:	4629      	mov	r1, r5
 800c484:	024b      	lsls	r3, r1, #9
 800c486:	4621      	mov	r1, r4
 800c488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c48c:	4621      	mov	r1, r4
 800c48e:	024a      	lsls	r2, r1, #9
 800c490:	4610      	mov	r0, r2
 800c492:	4619      	mov	r1, r3
 800c494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c496:	2200      	movs	r2, #0
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
 800c49a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c49c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c4a0:	f7f4 fb8a 	bl	8000bb8 <__aeabi_uldivmod>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4ac:	e058      	b.n	800c560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4ae:	4b38      	ldr	r3, [pc, #224]	; (800c590 <HAL_RCC_GetSysClockFreq+0x200>)
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	099b      	lsrs	r3, r3, #6
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c4be:	623b      	str	r3, [r7, #32]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c4c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c4c8:	4642      	mov	r2, r8
 800c4ca:	464b      	mov	r3, r9
 800c4cc:	f04f 0000 	mov.w	r0, #0
 800c4d0:	f04f 0100 	mov.w	r1, #0
 800c4d4:	0159      	lsls	r1, r3, #5
 800c4d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c4da:	0150      	lsls	r0, r2, #5
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	4641      	mov	r1, r8
 800c4e2:	ebb2 0a01 	subs.w	sl, r2, r1
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	eb63 0b01 	sbc.w	fp, r3, r1
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	f04f 0300 	mov.w	r3, #0
 800c4f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c4f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c4fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c500:	ebb2 040a 	subs.w	r4, r2, sl
 800c504:	eb63 050b 	sbc.w	r5, r3, fp
 800c508:	f04f 0200 	mov.w	r2, #0
 800c50c:	f04f 0300 	mov.w	r3, #0
 800c510:	00eb      	lsls	r3, r5, #3
 800c512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c516:	00e2      	lsls	r2, r4, #3
 800c518:	4614      	mov	r4, r2
 800c51a:	461d      	mov	r5, r3
 800c51c:	4643      	mov	r3, r8
 800c51e:	18e3      	adds	r3, r4, r3
 800c520:	603b      	str	r3, [r7, #0]
 800c522:	464b      	mov	r3, r9
 800c524:	eb45 0303 	adc.w	r3, r5, r3
 800c528:	607b      	str	r3, [r7, #4]
 800c52a:	f04f 0200 	mov.w	r2, #0
 800c52e:	f04f 0300 	mov.w	r3, #0
 800c532:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c536:	4629      	mov	r1, r5
 800c538:	028b      	lsls	r3, r1, #10
 800c53a:	4621      	mov	r1, r4
 800c53c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c540:	4621      	mov	r1, r4
 800c542:	028a      	lsls	r2, r1, #10
 800c544:	4610      	mov	r0, r2
 800c546:	4619      	mov	r1, r3
 800c548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54a:	2200      	movs	r2, #0
 800c54c:	61bb      	str	r3, [r7, #24]
 800c54e:	61fa      	str	r2, [r7, #28]
 800c550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c554:	f7f4 fb30 	bl	8000bb8 <__aeabi_uldivmod>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4613      	mov	r3, r2
 800c55e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c560:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <HAL_RCC_GetSysClockFreq+0x200>)
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	0c1b      	lsrs	r3, r3, #16
 800c566:	f003 0303 	and.w	r3, r3, #3
 800c56a:	3301      	adds	r3, #1
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c574:	fbb2 f3f3 	udiv	r3, r2, r3
 800c578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c57a:	e002      	b.n	800c582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c57c:	4b05      	ldr	r3, [pc, #20]	; (800c594 <HAL_RCC_GetSysClockFreq+0x204>)
 800c57e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c580:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c584:	4618      	mov	r0, r3
 800c586:	3750      	adds	r7, #80	; 0x50
 800c588:	46bd      	mov	sp, r7
 800c58a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c58e:	bf00      	nop
 800c590:	40023800 	.word	0x40023800
 800c594:	00f42400 	.word	0x00f42400
 800c598:	007a1200 	.word	0x007a1200

0800c59c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5a0:	4b03      	ldr	r3, [pc, #12]	; (800c5b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	20000004 	.word	0x20000004

0800c5b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c5b8:	f7ff fff0 	bl	800c59c <HAL_RCC_GetHCLKFreq>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	4b05      	ldr	r3, [pc, #20]	; (800c5d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	0a9b      	lsrs	r3, r3, #10
 800c5c4:	f003 0307 	and.w	r3, r3, #7
 800c5c8:	4903      	ldr	r1, [pc, #12]	; (800c5d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5ca:	5ccb      	ldrb	r3, [r1, r3]
 800c5cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	40023800 	.word	0x40023800
 800c5d8:	08012080 	.word	0x08012080

0800c5dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c5e0:	f7ff ffdc 	bl	800c59c <HAL_RCC_GetHCLKFreq>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	0b5b      	lsrs	r3, r3, #13
 800c5ec:	f003 0307 	and.w	r3, r3, #7
 800c5f0:	4903      	ldr	r1, [pc, #12]	; (800c600 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5f2:	5ccb      	ldrb	r3, [r1, r3]
 800c5f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	40023800 	.word	0x40023800
 800c600:	08012080 	.word	0x08012080

0800c604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c612:	2301      	movs	r3, #1
 800c614:	e07b      	b.n	800c70e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d108      	bne.n	800c630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c626:	d009      	beq.n	800c63c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	61da      	str	r2, [r3, #28]
 800c62e:	e005      	b.n	800c63c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f85d 	bl	800c716 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c684:	431a      	orrs	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	431a      	orrs	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	69db      	ldr	r3, [r3, #28]
 800c6b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6b6:	431a      	orrs	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6c0:	ea42 0103 	orr.w	r1, r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	0c1b      	lsrs	r3, r3, #16
 800c6da:	f003 0104 	and.w	r1, r3, #4
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e2:	f003 0210 	and.w	r2, r3, #16
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	430a      	orrs	r2, r1
 800c6ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	69da      	ldr	r2, [r3, #28]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c71e:	bf00      	nop
 800c720:	370c      	adds	r7, #12
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b08c      	sub	sp, #48	; 0x30
 800c72e:	af00      	add	r7, sp, #0
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
 800c736:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c738:	2301      	movs	r3, #1
 800c73a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d101      	bne.n	800c750 <HAL_SPI_TransmitReceive+0x26>
 800c74c:	2302      	movs	r3, #2
 800c74e:	e18a      	b.n	800ca66 <HAL_SPI_TransmitReceive+0x33c>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c758:	f7fd fe3c 	bl	800a3d4 <HAL_GetTick>
 800c75c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c76e:	887b      	ldrh	r3, [r7, #2]
 800c770:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c776:	2b01      	cmp	r3, #1
 800c778:	d00f      	beq.n	800c79a <HAL_SPI_TransmitReceive+0x70>
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c780:	d107      	bne.n	800c792 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d103      	bne.n	800c792 <HAL_SPI_TransmitReceive+0x68>
 800c78a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d003      	beq.n	800c79a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c792:	2302      	movs	r3, #2
 800c794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c798:	e15b      	b.n	800ca52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d005      	beq.n	800c7ac <HAL_SPI_TransmitReceive+0x82>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <HAL_SPI_TransmitReceive+0x82>
 800c7a6:	887b      	ldrh	r3, [r7, #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c7b2:	e14e      	b.n	800ca52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b04      	cmp	r3, #4
 800c7be:	d003      	beq.n	800c7c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2205      	movs	r2, #5
 800c7c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	887a      	ldrh	r2, [r7, #2]
 800c7d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	887a      	ldrh	r2, [r7, #2]
 800c7de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	887a      	ldrh	r2, [r7, #2]
 800c7ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	887a      	ldrh	r2, [r7, #2]
 800c7f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c808:	2b40      	cmp	r3, #64	; 0x40
 800c80a:	d007      	beq.n	800c81c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c81a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c824:	d178      	bne.n	800c918 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d002      	beq.n	800c834 <HAL_SPI_TransmitReceive+0x10a>
 800c82e:	8b7b      	ldrh	r3, [r7, #26]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d166      	bne.n	800c902 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c838:	881a      	ldrh	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c844:	1c9a      	adds	r2, r3, #2
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c84e:	b29b      	uxth	r3, r3
 800c850:	3b01      	subs	r3, #1
 800c852:	b29a      	uxth	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c858:	e053      	b.n	800c902 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b02      	cmp	r3, #2
 800c866:	d11b      	bne.n	800c8a0 <HAL_SPI_TransmitReceive+0x176>
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d016      	beq.n	800c8a0 <HAL_SPI_TransmitReceive+0x176>
 800c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c874:	2b01      	cmp	r3, #1
 800c876:	d113      	bne.n	800c8a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87c:	881a      	ldrh	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c888:	1c9a      	adds	r2, r3, #2
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c892:	b29b      	uxth	r3, r3
 800c894:	3b01      	subs	r3, #1
 800c896:	b29a      	uxth	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	f003 0301 	and.w	r3, r3, #1
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d119      	bne.n	800c8e2 <HAL_SPI_TransmitReceive+0x1b8>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d014      	beq.n	800c8e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68da      	ldr	r2, [r3, #12]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	b292      	uxth	r2, r2
 800c8c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ca:	1c9a      	adds	r2, r3, #2
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c8e2:	f7fd fd77 	bl	800a3d4 <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d807      	bhi.n	800c902 <HAL_SPI_TransmitReceive+0x1d8>
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f8:	d003      	beq.n	800c902 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c900:	e0a7      	b.n	800ca52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c906:	b29b      	uxth	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1a6      	bne.n	800c85a <HAL_SPI_TransmitReceive+0x130>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c910:	b29b      	uxth	r3, r3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1a1      	bne.n	800c85a <HAL_SPI_TransmitReceive+0x130>
 800c916:	e07c      	b.n	800ca12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <HAL_SPI_TransmitReceive+0x1fc>
 800c920:	8b7b      	ldrh	r3, [r7, #26]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d16b      	bne.n	800c9fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	330c      	adds	r3, #12
 800c930:	7812      	ldrb	r2, [r2, #0]
 800c932:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c942:	b29b      	uxth	r3, r3
 800c944:	3b01      	subs	r3, #1
 800c946:	b29a      	uxth	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c94c:	e057      	b.n	800c9fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	f003 0302 	and.w	r3, r3, #2
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d11c      	bne.n	800c996 <HAL_SPI_TransmitReceive+0x26c>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c960:	b29b      	uxth	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d017      	beq.n	800c996 <HAL_SPI_TransmitReceive+0x26c>
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d114      	bne.n	800c996 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	330c      	adds	r3, #12
 800c976:	7812      	ldrb	r2, [r2, #0]
 800c978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c988:	b29b      	uxth	r3, r3
 800c98a:	3b01      	subs	r3, #1
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d119      	bne.n	800c9d8 <HAL_SPI_TransmitReceive+0x2ae>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d014      	beq.n	800c9d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68da      	ldr	r2, [r3, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c9d8:	f7fd fcfc 	bl	800a3d4 <HAL_GetTick>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d803      	bhi.n	800c9f0 <HAL_SPI_TransmitReceive+0x2c6>
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d102      	bne.n	800c9f6 <HAL_SPI_TransmitReceive+0x2cc>
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d103      	bne.n	800c9fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c9fc:	e029      	b.n	800ca52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1a2      	bne.n	800c94e <HAL_SPI_TransmitReceive+0x224>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d19d      	bne.n	800c94e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f000 f8c0 	bl	800cb9c <SPI_EndRxTxTransaction>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d006      	beq.n	800ca30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ca2e:	e010      	b.n	800ca52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10b      	bne.n	800ca50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca38:	2300      	movs	r3, #0
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	e000      	b.n	800ca52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ca50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3730      	adds	r7, #48	; 0x30
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca7c:	b2db      	uxtb	r3, r3
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
	...

0800ca8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b088      	sub	sp, #32
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	603b      	str	r3, [r7, #0]
 800ca98:	4613      	mov	r3, r2
 800ca9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ca9c:	f7fd fc9a 	bl	800a3d4 <HAL_GetTick>
 800caa0:	4602      	mov	r2, r0
 800caa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa4:	1a9b      	subs	r3, r3, r2
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	4413      	add	r3, r2
 800caaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800caac:	f7fd fc92 	bl	800a3d4 <HAL_GetTick>
 800cab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cab2:	4b39      	ldr	r3, [pc, #228]	; (800cb98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	015b      	lsls	r3, r3, #5
 800cab8:	0d1b      	lsrs	r3, r3, #20
 800caba:	69fa      	ldr	r2, [r7, #28]
 800cabc:	fb02 f303 	mul.w	r3, r2, r3
 800cac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cac2:	e054      	b.n	800cb6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caca:	d050      	beq.n	800cb6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cacc:	f7fd fc82 	bl	800a3d4 <HAL_GetTick>
 800cad0:	4602      	mov	r2, r0
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	69fa      	ldr	r2, [r7, #28]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d902      	bls.n	800cae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d13d      	bne.n	800cb5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800caf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cafa:	d111      	bne.n	800cb20 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb04:	d004      	beq.n	800cb10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb0e:	d107      	bne.n	800cb20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb28:	d10f      	bne.n	800cb4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e017      	b.n	800cb8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689a      	ldr	r2, [r3, #8]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	4013      	ands	r3, r2
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	bf0c      	ite	eq
 800cb7e:	2301      	moveq	r3, #1
 800cb80:	2300      	movne	r3, #0
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	79fb      	ldrb	r3, [r7, #7]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d19b      	bne.n	800cac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3720      	adds	r7, #32
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20000004 	.word	0x20000004

0800cb9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cba8:	4b1b      	ldr	r3, [pc, #108]	; (800cc18 <SPI_EndRxTxTransaction+0x7c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a1b      	ldr	r2, [pc, #108]	; (800cc1c <SPI_EndRxTxTransaction+0x80>)
 800cbae:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb2:	0d5b      	lsrs	r3, r3, #21
 800cbb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbb8:	fb02 f303 	mul.w	r3, r2, r3
 800cbbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbc6:	d112      	bne.n	800cbee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2180      	movs	r1, #128	; 0x80
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff ff5a 	bl	800ca8c <SPI_WaitFlagStateUntilTimeout>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d016      	beq.n	800cc0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbe2:	f043 0220 	orr.w	r2, r3, #32
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e00f      	b.n	800cc0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00a      	beq.n	800cc0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc04:	2b80      	cmp	r3, #128	; 0x80
 800cc06:	d0f2      	beq.n	800cbee <SPI_EndRxTxTransaction+0x52>
 800cc08:	e000      	b.n	800cc0c <SPI_EndRxTxTransaction+0x70>
        break;
 800cc0a:	bf00      	nop
  }

  return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20000004 	.word	0x20000004
 800cc1c:	165e9f81 	.word	0x165e9f81

0800cc20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e041      	b.n	800ccb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d106      	bne.n	800cc4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7f5 f9a2 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2202      	movs	r2, #2
 800cc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	4610      	mov	r0, r2
 800cc60:	f000 f9ca 	bl	800cff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d001      	beq.n	800ccd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e044      	b.n	800cd62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2202      	movs	r2, #2
 800ccdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f042 0201 	orr.w	r2, r2, #1
 800ccee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a1e      	ldr	r2, [pc, #120]	; (800cd70 <HAL_TIM_Base_Start_IT+0xb0>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d018      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0x6c>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd02:	d013      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0x6c>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a1a      	ldr	r2, [pc, #104]	; (800cd74 <HAL_TIM_Base_Start_IT+0xb4>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d00e      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0x6c>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a19      	ldr	r2, [pc, #100]	; (800cd78 <HAL_TIM_Base_Start_IT+0xb8>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d009      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0x6c>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a17      	ldr	r2, [pc, #92]	; (800cd7c <HAL_TIM_Base_Start_IT+0xbc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d004      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0x6c>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a16      	ldr	r2, [pc, #88]	; (800cd80 <HAL_TIM_Base_Start_IT+0xc0>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d111      	bne.n	800cd50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	f003 0307 	and.w	r3, r3, #7
 800cd36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b06      	cmp	r3, #6
 800cd3c:	d010      	beq.n	800cd60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f042 0201 	orr.w	r2, r2, #1
 800cd4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd4e:	e007      	b.n	800cd60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f042 0201 	orr.w	r2, r2, #1
 800cd5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	40010000 	.word	0x40010000
 800cd74:	40000400 	.word	0x40000400
 800cd78:	40000800 	.word	0x40000800
 800cd7c:	40000c00 	.word	0x40000c00
 800cd80:	40014000 	.word	0x40014000

0800cd84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	f003 0302 	and.w	r3, r3, #2
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d122      	bne.n	800cde0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	f003 0302 	and.w	r3, r3, #2
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d11b      	bne.n	800cde0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f06f 0202 	mvn.w	r2, #2
 800cdb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	f003 0303 	and.w	r3, r3, #3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d003      	beq.n	800cdce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 f8f8 	bl	800cfbc <HAL_TIM_IC_CaptureCallback>
 800cdcc:	e005      	b.n	800cdda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f8ea 	bl	800cfa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f8fb 	bl	800cfd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	f003 0304 	and.w	r3, r3, #4
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d122      	bne.n	800ce34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	f003 0304 	and.w	r3, r3, #4
 800cdf8:	2b04      	cmp	r3, #4
 800cdfa:	d11b      	bne.n	800ce34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f06f 0204 	mvn.w	r2, #4
 800ce04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f8ce 	bl	800cfbc <HAL_TIM_IC_CaptureCallback>
 800ce20:	e005      	b.n	800ce2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f8c0 	bl	800cfa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 f8d1 	bl	800cfd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	f003 0308 	and.w	r3, r3, #8
 800ce3e:	2b08      	cmp	r3, #8
 800ce40:	d122      	bne.n	800ce88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f003 0308 	and.w	r3, r3, #8
 800ce4c:	2b08      	cmp	r3, #8
 800ce4e:	d11b      	bne.n	800ce88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f06f 0208 	mvn.w	r2, #8
 800ce58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2204      	movs	r2, #4
 800ce5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	f003 0303 	and.w	r3, r3, #3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f8a4 	bl	800cfbc <HAL_TIM_IC_CaptureCallback>
 800ce74:	e005      	b.n	800ce82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f896 	bl	800cfa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f8a7 	bl	800cfd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	f003 0310 	and.w	r3, r3, #16
 800ce92:	2b10      	cmp	r3, #16
 800ce94:	d122      	bne.n	800cedc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	f003 0310 	and.w	r3, r3, #16
 800cea0:	2b10      	cmp	r3, #16
 800cea2:	d11b      	bne.n	800cedc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f06f 0210 	mvn.w	r2, #16
 800ceac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2208      	movs	r2, #8
 800ceb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d003      	beq.n	800ceca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f87a 	bl	800cfbc <HAL_TIM_IC_CaptureCallback>
 800cec8:	e005      	b.n	800ced6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 f86c 	bl	800cfa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f87d 	bl	800cfd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d10e      	bne.n	800cf08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d107      	bne.n	800cf08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f06f 0201 	mvn.w	r2, #1
 800cf00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f846 	bl	800cf94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf12:	2b80      	cmp	r3, #128	; 0x80
 800cf14:	d10e      	bne.n	800cf34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf20:	2b80      	cmp	r3, #128	; 0x80
 800cf22:	d107      	bne.n	800cf34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cf2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f8ec 	bl	800d10c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3e:	2b40      	cmp	r3, #64	; 0x40
 800cf40:	d10e      	bne.n	800cf60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf4c:	2b40      	cmp	r3, #64	; 0x40
 800cf4e:	d107      	bne.n	800cf60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f842 	bl	800cfe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d10e      	bne.n	800cf8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	f003 0320 	and.w	r3, r3, #32
 800cf78:	2b20      	cmp	r3, #32
 800cf7a:	d107      	bne.n	800cf8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f06f 0220 	mvn.w	r2, #32
 800cf84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f8b6 	bl	800d0f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a34      	ldr	r2, [pc, #208]	; (800d0dc <TIM_Base_SetConfig+0xe4>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d00f      	beq.n	800d030 <TIM_Base_SetConfig+0x38>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d016:	d00b      	beq.n	800d030 <TIM_Base_SetConfig+0x38>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a31      	ldr	r2, [pc, #196]	; (800d0e0 <TIM_Base_SetConfig+0xe8>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d007      	beq.n	800d030 <TIM_Base_SetConfig+0x38>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a30      	ldr	r2, [pc, #192]	; (800d0e4 <TIM_Base_SetConfig+0xec>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d003      	beq.n	800d030 <TIM_Base_SetConfig+0x38>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a2f      	ldr	r2, [pc, #188]	; (800d0e8 <TIM_Base_SetConfig+0xf0>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d108      	bne.n	800d042 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a25      	ldr	r2, [pc, #148]	; (800d0dc <TIM_Base_SetConfig+0xe4>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d01b      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d050:	d017      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a22      	ldr	r2, [pc, #136]	; (800d0e0 <TIM_Base_SetConfig+0xe8>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d013      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a21      	ldr	r2, [pc, #132]	; (800d0e4 <TIM_Base_SetConfig+0xec>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d00f      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a20      	ldr	r2, [pc, #128]	; (800d0e8 <TIM_Base_SetConfig+0xf0>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d00b      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a1f      	ldr	r2, [pc, #124]	; (800d0ec <TIM_Base_SetConfig+0xf4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d007      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a1e      	ldr	r2, [pc, #120]	; (800d0f0 <TIM_Base_SetConfig+0xf8>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d003      	beq.n	800d082 <TIM_Base_SetConfig+0x8a>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a1d      	ldr	r2, [pc, #116]	; (800d0f4 <TIM_Base_SetConfig+0xfc>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d108      	bne.n	800d094 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	4313      	orrs	r3, r2
 800d092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	689a      	ldr	r2, [r3, #8]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a08      	ldr	r2, [pc, #32]	; (800d0dc <TIM_Base_SetConfig+0xe4>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d103      	bne.n	800d0c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	691a      	ldr	r2, [r3, #16]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	615a      	str	r2, [r3, #20]
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	40010000 	.word	0x40010000
 800d0e0:	40000400 	.word	0x40000400
 800d0e4:	40000800 	.word	0x40000800
 800d0e8:	40000c00 	.word	0x40000c00
 800d0ec:	40014000 	.word	0x40014000
 800d0f0:	40014400 	.word	0x40014400
 800d0f4:	40014800 	.word	0x40014800

0800d0f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e03f      	b.n	800d1b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f837 	bl	800d1ba <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2224      	movs	r2, #36	; 0x24
 800d150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f933 	bl	800d3d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	691a      	ldr	r2, [r3, #16]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	695a      	ldr	r2, [r3, #20]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68da      	ldr	r2, [r3, #12]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800d1c2:	bf00      	nop
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b08a      	sub	sp, #40	; 0x28
 800d1d2:	af02      	add	r7, sp, #8
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	603b      	str	r3, [r7, #0]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b20      	cmp	r3, #32
 800d1ec:	d17c      	bne.n	800d2e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <HAL_UART_Transmit+0x2c>
 800d1f4:	88fb      	ldrh	r3, [r7, #6]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e075      	b.n	800d2ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d204:	2b01      	cmp	r3, #1
 800d206:	d101      	bne.n	800d20c <HAL_UART_Transmit+0x3e>
 800d208:	2302      	movs	r3, #2
 800d20a:	e06e      	b.n	800d2ea <HAL_UART_Transmit+0x11c>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2221      	movs	r2, #33	; 0x21
 800d21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d222:	f7fd f8d7 	bl	800a3d4 <HAL_GetTick>
 800d226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	88fa      	ldrh	r2, [r7, #6]
 800d22c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	88fa      	ldrh	r2, [r7, #6]
 800d232:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d23c:	d108      	bne.n	800d250 <HAL_UART_Transmit+0x82>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d104      	bne.n	800d250 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d246:	2300      	movs	r3, #0
 800d248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	61bb      	str	r3, [r7, #24]
 800d24e:	e003      	b.n	800d258 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d254:	2300      	movs	r3, #0
 800d256:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d260:	e02a      	b.n	800d2b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2200      	movs	r2, #0
 800d26a:	2180      	movs	r1, #128	; 0x80
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f000 f840 	bl	800d2f2 <UART_WaitOnFlagUntilTimeout>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d278:	2303      	movs	r3, #3
 800d27a:	e036      	b.n	800d2ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10b      	bne.n	800d29a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	461a      	mov	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	3302      	adds	r3, #2
 800d296:	61bb      	str	r3, [r7, #24]
 800d298:	e007      	b.n	800d2aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	781a      	ldrb	r2, [r3, #0]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1cf      	bne.n	800d262 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2140      	movs	r1, #64	; 0x40
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 f810 	bl	800d2f2 <UART_WaitOnFlagUntilTimeout>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	e006      	b.n	800d2ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2220      	movs	r2, #32
 800d2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e000      	b.n	800d2ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d2e8:	2302      	movs	r3, #2
  }
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3720      	adds	r7, #32
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b090      	sub	sp, #64	; 0x40
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	60f8      	str	r0, [r7, #12]
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	603b      	str	r3, [r7, #0]
 800d2fe:	4613      	mov	r3, r2
 800d300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d302:	e050      	b.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30a:	d04c      	beq.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d007      	beq.n	800d322 <UART_WaitOnFlagUntilTimeout+0x30>
 800d312:	f7fd f85f 	bl	800a3d4 <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d31e:	429a      	cmp	r2, r3
 800d320:	d241      	bcs.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	330c      	adds	r3, #12
 800d328:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	e853 3f00 	ldrex	r3, [r3]
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	330c      	adds	r3, #12
 800d340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d342:	637a      	str	r2, [r7, #52]	; 0x34
 800d344:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d34a:	e841 2300 	strex	r3, r2, [r1]
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1e5      	bne.n	800d322 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3314      	adds	r3, #20
 800d35c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	e853 3f00 	ldrex	r3, [r3]
 800d364:	613b      	str	r3, [r7, #16]
   return(result);
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	f023 0301 	bic.w	r3, r3, #1
 800d36c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3314      	adds	r3, #20
 800d374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d376:	623a      	str	r2, [r7, #32]
 800d378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37a:	69f9      	ldr	r1, [r7, #28]
 800d37c:	6a3a      	ldr	r2, [r7, #32]
 800d37e:	e841 2300 	strex	r3, r2, [r1]
 800d382:	61bb      	str	r3, [r7, #24]
   return(result);
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1e5      	bne.n	800d356 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2220      	movs	r2, #32
 800d38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2220      	movs	r2, #32
 800d396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e00f      	b.n	800d3c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	68ba      	ldr	r2, [r7, #8]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	bf0c      	ite	eq
 800d3b6:	2301      	moveq	r3, #1
 800d3b8:	2300      	movne	r3, #0
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	461a      	mov	r2, r3
 800d3be:	79fb      	ldrb	r3, [r7, #7]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d09f      	beq.n	800d304 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3740      	adds	r7, #64	; 0x40
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3d4:	b0c0      	sub	sp, #256	; 0x100
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3ec:	68d9      	ldr	r1, [r3, #12]
 800d3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	ea40 0301 	orr.w	r3, r0, r1
 800d3f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d3fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3fe:	689a      	ldr	r2, [r3, #8]
 800d400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	431a      	orrs	r2, r3
 800d408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	431a      	orrs	r2, r3
 800d410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	4313      	orrs	r3, r2
 800d418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d428:	f021 010c 	bic.w	r1, r1, #12
 800d42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d436:	430b      	orrs	r3, r1
 800d438:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d44a:	6999      	ldr	r1, [r3, #24]
 800d44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	ea40 0301 	orr.w	r3, r0, r1
 800d456:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b8f      	ldr	r3, [pc, #572]	; (800d69c <UART_SetConfig+0x2cc>)
 800d460:	429a      	cmp	r2, r3
 800d462:	d005      	beq.n	800d470 <UART_SetConfig+0xa0>
 800d464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	4b8d      	ldr	r3, [pc, #564]	; (800d6a0 <UART_SetConfig+0x2d0>)
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d104      	bne.n	800d47a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d470:	f7ff f8b4 	bl	800c5dc <HAL_RCC_GetPCLK2Freq>
 800d474:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d478:	e003      	b.n	800d482 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d47a:	f7ff f89b 	bl	800c5b4 <HAL_RCC_GetPCLK1Freq>
 800d47e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d486:	69db      	ldr	r3, [r3, #28]
 800d488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d48c:	f040 810c 	bne.w	800d6a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d494:	2200      	movs	r2, #0
 800d496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d49a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d49e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d4a2:	4622      	mov	r2, r4
 800d4a4:	462b      	mov	r3, r5
 800d4a6:	1891      	adds	r1, r2, r2
 800d4a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800d4aa:	415b      	adcs	r3, r3
 800d4ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	eb12 0801 	adds.w	r8, r2, r1
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	eb43 0901 	adc.w	r9, r3, r1
 800d4be:	f04f 0200 	mov.w	r2, #0
 800d4c2:	f04f 0300 	mov.w	r3, #0
 800d4c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d4ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d4ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d4d2:	4690      	mov	r8, r2
 800d4d4:	4699      	mov	r9, r3
 800d4d6:	4623      	mov	r3, r4
 800d4d8:	eb18 0303 	adds.w	r3, r8, r3
 800d4dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d4e0:	462b      	mov	r3, r5
 800d4e2:	eb49 0303 	adc.w	r3, r9, r3
 800d4e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d4f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d4fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d4fe:	460b      	mov	r3, r1
 800d500:	18db      	adds	r3, r3, r3
 800d502:	653b      	str	r3, [r7, #80]	; 0x50
 800d504:	4613      	mov	r3, r2
 800d506:	eb42 0303 	adc.w	r3, r2, r3
 800d50a:	657b      	str	r3, [r7, #84]	; 0x54
 800d50c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d510:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d514:	f7f3 fb50 	bl	8000bb8 <__aeabi_uldivmod>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4b61      	ldr	r3, [pc, #388]	; (800d6a4 <UART_SetConfig+0x2d4>)
 800d51e:	fba3 2302 	umull	r2, r3, r3, r2
 800d522:	095b      	lsrs	r3, r3, #5
 800d524:	011c      	lsls	r4, r3, #4
 800d526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d52a:	2200      	movs	r2, #0
 800d52c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d530:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d534:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d538:	4642      	mov	r2, r8
 800d53a:	464b      	mov	r3, r9
 800d53c:	1891      	adds	r1, r2, r2
 800d53e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d540:	415b      	adcs	r3, r3
 800d542:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d548:	4641      	mov	r1, r8
 800d54a:	eb12 0a01 	adds.w	sl, r2, r1
 800d54e:	4649      	mov	r1, r9
 800d550:	eb43 0b01 	adc.w	fp, r3, r1
 800d554:	f04f 0200 	mov.w	r2, #0
 800d558:	f04f 0300 	mov.w	r3, #0
 800d55c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d560:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d568:	4692      	mov	sl, r2
 800d56a:	469b      	mov	fp, r3
 800d56c:	4643      	mov	r3, r8
 800d56e:	eb1a 0303 	adds.w	r3, sl, r3
 800d572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d576:	464b      	mov	r3, r9
 800d578:	eb4b 0303 	adc.w	r3, fp, r3
 800d57c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d58c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d590:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d594:	460b      	mov	r3, r1
 800d596:	18db      	adds	r3, r3, r3
 800d598:	643b      	str	r3, [r7, #64]	; 0x40
 800d59a:	4613      	mov	r3, r2
 800d59c:	eb42 0303 	adc.w	r3, r2, r3
 800d5a0:	647b      	str	r3, [r7, #68]	; 0x44
 800d5a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d5a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d5aa:	f7f3 fb05 	bl	8000bb8 <__aeabi_uldivmod>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	4b3b      	ldr	r3, [pc, #236]	; (800d6a4 <UART_SetConfig+0x2d4>)
 800d5b6:	fba3 2301 	umull	r2, r3, r3, r1
 800d5ba:	095b      	lsrs	r3, r3, #5
 800d5bc:	2264      	movs	r2, #100	; 0x64
 800d5be:	fb02 f303 	mul.w	r3, r2, r3
 800d5c2:	1acb      	subs	r3, r1, r3
 800d5c4:	00db      	lsls	r3, r3, #3
 800d5c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d5ca:	4b36      	ldr	r3, [pc, #216]	; (800d6a4 <UART_SetConfig+0x2d4>)
 800d5cc:	fba3 2302 	umull	r2, r3, r3, r2
 800d5d0:	095b      	lsrs	r3, r3, #5
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d5d8:	441c      	add	r4, r3
 800d5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d5e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	464b      	mov	r3, r9
 800d5f0:	1891      	adds	r1, r2, r2
 800d5f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800d5f4:	415b      	adcs	r3, r3
 800d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d5fc:	4641      	mov	r1, r8
 800d5fe:	1851      	adds	r1, r2, r1
 800d600:	6339      	str	r1, [r7, #48]	; 0x30
 800d602:	4649      	mov	r1, r9
 800d604:	414b      	adcs	r3, r1
 800d606:	637b      	str	r3, [r7, #52]	; 0x34
 800d608:	f04f 0200 	mov.w	r2, #0
 800d60c:	f04f 0300 	mov.w	r3, #0
 800d610:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d614:	4659      	mov	r1, fp
 800d616:	00cb      	lsls	r3, r1, #3
 800d618:	4651      	mov	r1, sl
 800d61a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d61e:	4651      	mov	r1, sl
 800d620:	00ca      	lsls	r2, r1, #3
 800d622:	4610      	mov	r0, r2
 800d624:	4619      	mov	r1, r3
 800d626:	4603      	mov	r3, r0
 800d628:	4642      	mov	r2, r8
 800d62a:	189b      	adds	r3, r3, r2
 800d62c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d630:	464b      	mov	r3, r9
 800d632:	460a      	mov	r2, r1
 800d634:	eb42 0303 	adc.w	r3, r2, r3
 800d638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d648:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d64c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d650:	460b      	mov	r3, r1
 800d652:	18db      	adds	r3, r3, r3
 800d654:	62bb      	str	r3, [r7, #40]	; 0x28
 800d656:	4613      	mov	r3, r2
 800d658:	eb42 0303 	adc.w	r3, r2, r3
 800d65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d65e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d662:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d666:	f7f3 faa7 	bl	8000bb8 <__aeabi_uldivmod>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <UART_SetConfig+0x2d4>)
 800d670:	fba3 1302 	umull	r1, r3, r3, r2
 800d674:	095b      	lsrs	r3, r3, #5
 800d676:	2164      	movs	r1, #100	; 0x64
 800d678:	fb01 f303 	mul.w	r3, r1, r3
 800d67c:	1ad3      	subs	r3, r2, r3
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	3332      	adds	r3, #50	; 0x32
 800d682:	4a08      	ldr	r2, [pc, #32]	; (800d6a4 <UART_SetConfig+0x2d4>)
 800d684:	fba2 2303 	umull	r2, r3, r2, r3
 800d688:	095b      	lsrs	r3, r3, #5
 800d68a:	f003 0207 	and.w	r2, r3, #7
 800d68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4422      	add	r2, r4
 800d696:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d698:	e105      	b.n	800d8a6 <UART_SetConfig+0x4d6>
 800d69a:	bf00      	nop
 800d69c:	40011000 	.word	0x40011000
 800d6a0:	40011400 	.word	0x40011400
 800d6a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d6a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d6b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d6b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d6ba:	4642      	mov	r2, r8
 800d6bc:	464b      	mov	r3, r9
 800d6be:	1891      	adds	r1, r2, r2
 800d6c0:	6239      	str	r1, [r7, #32]
 800d6c2:	415b      	adcs	r3, r3
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d6c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d6ca:	4641      	mov	r1, r8
 800d6cc:	1854      	adds	r4, r2, r1
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	eb43 0501 	adc.w	r5, r3, r1
 800d6d4:	f04f 0200 	mov.w	r2, #0
 800d6d8:	f04f 0300 	mov.w	r3, #0
 800d6dc:	00eb      	lsls	r3, r5, #3
 800d6de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d6e2:	00e2      	lsls	r2, r4, #3
 800d6e4:	4614      	mov	r4, r2
 800d6e6:	461d      	mov	r5, r3
 800d6e8:	4643      	mov	r3, r8
 800d6ea:	18e3      	adds	r3, r4, r3
 800d6ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d6f0:	464b      	mov	r3, r9
 800d6f2:	eb45 0303 	adc.w	r3, r5, r3
 800d6f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d70a:	f04f 0200 	mov.w	r2, #0
 800d70e:	f04f 0300 	mov.w	r3, #0
 800d712:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d716:	4629      	mov	r1, r5
 800d718:	008b      	lsls	r3, r1, #2
 800d71a:	4621      	mov	r1, r4
 800d71c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d720:	4621      	mov	r1, r4
 800d722:	008a      	lsls	r2, r1, #2
 800d724:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d728:	f7f3 fa46 	bl	8000bb8 <__aeabi_uldivmod>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4b60      	ldr	r3, [pc, #384]	; (800d8b4 <UART_SetConfig+0x4e4>)
 800d732:	fba3 2302 	umull	r2, r3, r3, r2
 800d736:	095b      	lsrs	r3, r3, #5
 800d738:	011c      	lsls	r4, r3, #4
 800d73a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d73e:	2200      	movs	r2, #0
 800d740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d744:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d748:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d74c:	4642      	mov	r2, r8
 800d74e:	464b      	mov	r3, r9
 800d750:	1891      	adds	r1, r2, r2
 800d752:	61b9      	str	r1, [r7, #24]
 800d754:	415b      	adcs	r3, r3
 800d756:	61fb      	str	r3, [r7, #28]
 800d758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d75c:	4641      	mov	r1, r8
 800d75e:	1851      	adds	r1, r2, r1
 800d760:	6139      	str	r1, [r7, #16]
 800d762:	4649      	mov	r1, r9
 800d764:	414b      	adcs	r3, r1
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	f04f 0200 	mov.w	r2, #0
 800d76c:	f04f 0300 	mov.w	r3, #0
 800d770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d774:	4659      	mov	r1, fp
 800d776:	00cb      	lsls	r3, r1, #3
 800d778:	4651      	mov	r1, sl
 800d77a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d77e:	4651      	mov	r1, sl
 800d780:	00ca      	lsls	r2, r1, #3
 800d782:	4610      	mov	r0, r2
 800d784:	4619      	mov	r1, r3
 800d786:	4603      	mov	r3, r0
 800d788:	4642      	mov	r2, r8
 800d78a:	189b      	adds	r3, r3, r2
 800d78c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d790:	464b      	mov	r3, r9
 800d792:	460a      	mov	r2, r1
 800d794:	eb42 0303 	adc.w	r3, r2, r3
 800d798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d7a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d7a8:	f04f 0200 	mov.w	r2, #0
 800d7ac:	f04f 0300 	mov.w	r3, #0
 800d7b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d7b4:	4649      	mov	r1, r9
 800d7b6:	008b      	lsls	r3, r1, #2
 800d7b8:	4641      	mov	r1, r8
 800d7ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d7be:	4641      	mov	r1, r8
 800d7c0:	008a      	lsls	r2, r1, #2
 800d7c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d7c6:	f7f3 f9f7 	bl	8000bb8 <__aeabi_uldivmod>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4b39      	ldr	r3, [pc, #228]	; (800d8b4 <UART_SetConfig+0x4e4>)
 800d7d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d7d4:	095b      	lsrs	r3, r3, #5
 800d7d6:	2164      	movs	r1, #100	; 0x64
 800d7d8:	fb01 f303 	mul.w	r3, r1, r3
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	011b      	lsls	r3, r3, #4
 800d7e0:	3332      	adds	r3, #50	; 0x32
 800d7e2:	4a34      	ldr	r2, [pc, #208]	; (800d8b4 <UART_SetConfig+0x4e4>)
 800d7e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e8:	095b      	lsrs	r3, r3, #5
 800d7ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7ee:	441c      	add	r4, r3
 800d7f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	673b      	str	r3, [r7, #112]	; 0x70
 800d7f8:	677a      	str	r2, [r7, #116]	; 0x74
 800d7fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d7fe:	4642      	mov	r2, r8
 800d800:	464b      	mov	r3, r9
 800d802:	1891      	adds	r1, r2, r2
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	415b      	adcs	r3, r3
 800d808:	60fb      	str	r3, [r7, #12]
 800d80a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d80e:	4641      	mov	r1, r8
 800d810:	1851      	adds	r1, r2, r1
 800d812:	6039      	str	r1, [r7, #0]
 800d814:	4649      	mov	r1, r9
 800d816:	414b      	adcs	r3, r1
 800d818:	607b      	str	r3, [r7, #4]
 800d81a:	f04f 0200 	mov.w	r2, #0
 800d81e:	f04f 0300 	mov.w	r3, #0
 800d822:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d826:	4659      	mov	r1, fp
 800d828:	00cb      	lsls	r3, r1, #3
 800d82a:	4651      	mov	r1, sl
 800d82c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d830:	4651      	mov	r1, sl
 800d832:	00ca      	lsls	r2, r1, #3
 800d834:	4610      	mov	r0, r2
 800d836:	4619      	mov	r1, r3
 800d838:	4603      	mov	r3, r0
 800d83a:	4642      	mov	r2, r8
 800d83c:	189b      	adds	r3, r3, r2
 800d83e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d840:	464b      	mov	r3, r9
 800d842:	460a      	mov	r2, r1
 800d844:	eb42 0303 	adc.w	r3, r2, r3
 800d848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	663b      	str	r3, [r7, #96]	; 0x60
 800d854:	667a      	str	r2, [r7, #100]	; 0x64
 800d856:	f04f 0200 	mov.w	r2, #0
 800d85a:	f04f 0300 	mov.w	r3, #0
 800d85e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d862:	4649      	mov	r1, r9
 800d864:	008b      	lsls	r3, r1, #2
 800d866:	4641      	mov	r1, r8
 800d868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d86c:	4641      	mov	r1, r8
 800d86e:	008a      	lsls	r2, r1, #2
 800d870:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d874:	f7f3 f9a0 	bl	8000bb8 <__aeabi_uldivmod>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4b0d      	ldr	r3, [pc, #52]	; (800d8b4 <UART_SetConfig+0x4e4>)
 800d87e:	fba3 1302 	umull	r1, r3, r3, r2
 800d882:	095b      	lsrs	r3, r3, #5
 800d884:	2164      	movs	r1, #100	; 0x64
 800d886:	fb01 f303 	mul.w	r3, r1, r3
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	011b      	lsls	r3, r3, #4
 800d88e:	3332      	adds	r3, #50	; 0x32
 800d890:	4a08      	ldr	r2, [pc, #32]	; (800d8b4 <UART_SetConfig+0x4e4>)
 800d892:	fba2 2303 	umull	r2, r3, r2, r3
 800d896:	095b      	lsrs	r3, r3, #5
 800d898:	f003 020f 	and.w	r2, r3, #15
 800d89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4422      	add	r2, r4
 800d8a4:	609a      	str	r2, [r3, #8]
}
 800d8a6:	bf00      	nop
 800d8a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8b2:	bf00      	nop
 800d8b4:	51eb851f 	.word	0x51eb851f

0800d8b8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08c      	sub	sp, #48	; 0x30
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	603b      	str	r3, [r7, #0]
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	71fb      	strb	r3, [r7, #7]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	71bb      	strb	r3, [r7, #6]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800d8d0:	79bb      	ldrb	r3, [r7, #6]
 800d8d2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800d8d4:	797b      	ldrb	r3, [r7, #5]
 800d8d6:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d8d8:	f107 030c 	add.w	r3, r7, #12
 800d8dc:	2207      	movs	r2, #7
 800d8de:	2100      	movs	r1, #0
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f001 fca0 	bl	800f226 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d8e6:	f107 0318 	add.w	r3, r7, #24
 800d8ea:	2218      	movs	r2, #24
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f001 fc99 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d8f4:	233f      	movs	r3, #63	; 0x3f
 800d8f6:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800d8f8:	238a      	movs	r3, #138	; 0x8a
 800d8fa:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800d8fc:	f107 0314 	add.w	r3, r7, #20
 800d900:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800d902:	2303      	movs	r3, #3
 800d904:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800d906:	f107 030c 	add.w	r3, r7, #12
 800d90a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800d90c:	2307      	movs	r3, #7
 800d90e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800d910:	f107 0318 	add.w	r3, r7, #24
 800d914:	2100      	movs	r1, #0
 800d916:	4618      	mov	r0, r3
 800d918:	f000 ffd6 	bl	800e8c8 <hci_send_req>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	da01      	bge.n	800d926 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800d922:	23ff      	movs	r3, #255	; 0xff
 800d924:	e014      	b.n	800d950 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800d926:	7b3b      	ldrb	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800d92c:	7b3b      	ldrb	r3, [r7, #12]
 800d92e:	e00f      	b.n	800d950 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800d930:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800d934:	b29a      	uxth	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800d93a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800d93e:	b29a      	uxth	r2, r3
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800d944:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800d948:	b29a      	uxth	r2, r3
 800d94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3730      	adds	r7, #48	; 0x30
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08e      	sub	sp, #56	; 0x38
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	607a      	str	r2, [r7, #4]
 800d962:	603b      	str	r3, [r7, #0]
 800d964:	4603      	mov	r3, r0
 800d966:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800d968:	7bfb      	ldrb	r3, [r7, #15]
 800d96a:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d96c:	f107 0314 	add.w	r3, r7, #20
 800d970:	2207      	movs	r2, #7
 800d972:	2100      	movs	r1, #0
 800d974:	4618      	mov	r0, r3
 800d976:	f001 fc56 	bl	800f226 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d97a:	f107 0320 	add.w	r3, r7, #32
 800d97e:	2218      	movs	r2, #24
 800d980:	2100      	movs	r1, #0
 800d982:	4618      	mov	r0, r3
 800d984:	f001 fc4f 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d988:	233f      	movs	r3, #63	; 0x3f
 800d98a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800d98c:	238a      	movs	r3, #138	; 0x8a
 800d98e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800d990:	f107 031c 	add.w	r3, r7, #28
 800d994:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800d996:	2301      	movs	r3, #1
 800d998:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800d99a:	f107 0314 	add.w	r3, r7, #20
 800d99e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800d9a0:	2307      	movs	r3, #7
 800d9a2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800d9a4:	f107 0320 	add.w	r3, r7, #32
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 ff8c 	bl	800e8c8 <hci_send_req>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	da01      	bge.n	800d9ba <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800d9b6:	23ff      	movs	r3, #255	; 0xff
 800d9b8:	e014      	b.n	800d9e4 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800d9ba:	7d3b      	ldrb	r3, [r7, #20]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d001      	beq.n	800d9c4 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800d9c0:	7d3b      	ldrb	r3, [r7, #20]
 800d9c2:	e00f      	b.n	800d9e4 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800d9c4:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800d9ce:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800d9d8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3738      	adds	r7, #56	; 0x38
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800d9ec:	b590      	push	{r4, r7, lr}
 800d9ee:	b095      	sub	sp, #84	; 0x54
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	4623      	mov	r3, r4
 800d9fc:	71fb      	strb	r3, [r7, #7]
 800d9fe:	4603      	mov	r3, r0
 800da00:	80bb      	strh	r3, [r7, #4]
 800da02:	460b      	mov	r3, r1
 800da04:	807b      	strh	r3, [r7, #2]
 800da06:	4613      	mov	r3, r2
 800da08:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800da10:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800da14:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800da18:	4413      	add	r3, r2
 800da1a:	330e      	adds	r3, #14
 800da1c:	2b28      	cmp	r3, #40	; 0x28
 800da1e:	d901      	bls.n	800da24 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800da20:	2342      	movs	r3, #66	; 0x42
 800da22:	e0c9      	b.n	800dbb8 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800da24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da28:	3350      	adds	r3, #80	; 0x50
 800da2a:	443b      	add	r3, r7
 800da2c:	79fa      	ldrb	r2, [r7, #7]
 800da2e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800da32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da36:	3301      	adds	r3, #1
 800da38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800da3c:	88bb      	ldrh	r3, [r7, #4]
 800da3e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800da40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da44:	f107 0208 	add.w	r2, r7, #8
 800da48:	4413      	add	r3, r2
 800da4a:	88ba      	ldrh	r2, [r7, #4]
 800da4c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800da4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da52:	3302      	adds	r3, #2
 800da54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800da58:	887b      	ldrh	r3, [r7, #2]
 800da5a:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800da5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da60:	f107 0208 	add.w	r2, r7, #8
 800da64:	4413      	add	r3, r2
 800da66:	887a      	ldrh	r2, [r7, #2]
 800da68:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800da6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da6e:	3302      	adds	r3, #2
 800da70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800da74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da78:	3350      	adds	r3, #80	; 0x50
 800da7a:	443b      	add	r3, r7
 800da7c:	79ba      	ldrb	r2, [r7, #6]
 800da7e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800da82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da86:	3301      	adds	r3, #1
 800da88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800da8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da90:	3350      	adds	r3, #80	; 0x50
 800da92:	443b      	add	r3, r7
 800da94:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800da98:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800da9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800daa0:	3301      	adds	r3, #1
 800daa2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800daa6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800daaa:	3350      	adds	r3, #80	; 0x50
 800daac:	443b      	add	r3, r7
 800daae:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800dab2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800dab6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800daba:	3301      	adds	r3, #1
 800dabc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800dac0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dac4:	f107 0208 	add.w	r2, r7, #8
 800dac8:	4413      	add	r3, r2
 800daca:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800dace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dad0:	4618      	mov	r0, r3
 800dad2:	f001 fb9a 	bl	800f20a <memcpy>
  indx +=  LocalNameLen;
 800dad6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800dada:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800dade:	4413      	add	r3, r2
 800dae0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800dae4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dae8:	3350      	adds	r3, #80	; 0x50
 800daea:	443b      	add	r3, r7
 800daec:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800daf0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800daf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800daf8:	3301      	adds	r3, #1
 800dafa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800dafe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db02:	f107 0208 	add.w	r2, r7, #8
 800db06:	4413      	add	r3, r2
 800db08:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800db0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800db0e:	4618      	mov	r0, r3
 800db10:	f001 fb7b 	bl	800f20a <memcpy>
  indx +=  ServiceUUIDLen;  
 800db14:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800db18:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800db1c:	4413      	add	r3, r2
 800db1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800db22:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800db26:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800db2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db2e:	f107 0208 	add.w	r2, r7, #8
 800db32:	4413      	add	r3, r2
 800db34:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800db38:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800db3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db3e:	3302      	adds	r3, #2
 800db40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800db44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800db48:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800db4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db50:	f107 0208 	add.w	r2, r7, #8
 800db54:	4413      	add	r3, r2
 800db56:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800db5a:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800db5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db60:	3302      	adds	r3, #2
 800db62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800db66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800db6a:	2218      	movs	r2, #24
 800db6c:	2100      	movs	r1, #0
 800db6e:	4618      	mov	r0, r3
 800db70:	f001 fb59 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800db74:	233f      	movs	r3, #63	; 0x3f
 800db76:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800db78:	2383      	movs	r3, #131	; 0x83
 800db7a:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800db7c:	f107 0308 	add.w	r3, r7, #8
 800db80:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800db82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db86:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800db88:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800db8c:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800db8e:	2301      	movs	r3, #1
 800db90:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800db92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800db96:	2100      	movs	r1, #0
 800db98:	4618      	mov	r0, r3
 800db9a:	f000 fe95 	bl	800e8c8 <hci_send_req>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	da01      	bge.n	800dba8 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800dba4:	23ff      	movs	r3, #255	; 0xff
 800dba6:	e007      	b.n	800dbb8 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800dba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <aci_gap_set_discoverable+0x1ca>
    return status;
 800dbb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbb4:	e000      	b.n	800dbb8 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3754      	adds	r7, #84	; 0x54
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd90      	pop	{r4, r7, pc}

0800dbc0 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b091      	sub	sp, #68	; 0x44
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	603a      	str	r2, [r7, #0]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4603      	mov	r3, r0
 800dbcc:	71fb      	strb	r3, [r7, #7]
 800dbce:	460b      	mov	r3, r1
 800dbd0:	71bb      	strb	r3, [r7, #6]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800dbda:	79bb      	ldrb	r3, [r7, #6]
 800dbdc:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800dbde:	79bb      	ldrb	r3, [r7, #6]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00a      	beq.n	800dbfa <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	f107 030e 	add.w	r3, r7, #14
 800dbea:	6814      	ldr	r4, [r2, #0]
 800dbec:	6850      	ldr	r0, [r2, #4]
 800dbee:	6891      	ldr	r1, [r2, #8]
 800dbf0:	68d2      	ldr	r2, [r2, #12]
 800dbf2:	601c      	str	r4, [r3, #0]
 800dbf4:	6058      	str	r0, [r3, #4]
 800dbf6:	6099      	str	r1, [r3, #8]
 800dbf8:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800dbfa:	797b      	ldrb	r3, [r7, #5]
 800dbfc:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800dbfe:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dc02:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800dc04:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800dc08:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800dc0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc0e:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800dc12:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800dc16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dc1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc1e:	2218      	movs	r2, #24
 800dc20:	2100      	movs	r1, #0
 800dc22:	4618      	mov	r0, r3
 800dc24:	f001 faff 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dc28:	233f      	movs	r3, #63	; 0x3f
 800dc2a:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800dc2c:	2386      	movs	r3, #134	; 0x86
 800dc2e:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800dc30:	f107 030c 	add.w	r3, r7, #12
 800dc34:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800dc36:	231a      	movs	r3, #26
 800dc38:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800dc3a:	f107 030b 	add.w	r3, r7, #11
 800dc3e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800dc40:	2301      	movs	r3, #1
 800dc42:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800dc44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc48:	2100      	movs	r1, #0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 fe3c 	bl	800e8c8 <hci_send_req>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	da01      	bge.n	800dc5a <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800dc56:	23ff      	movs	r3, #255	; 0xff
 800dc58:	e005      	b.n	800dc66 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800dc5a:	7afb      	ldrb	r3, [r7, #11]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800dc60:	7afb      	ldrb	r3, [r7, #11]
 800dc62:	e000      	b.n	800dc66 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3744      	adds	r7, #68	; 0x44
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd90      	pop	{r4, r7, pc}

0800dc6e <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b092      	sub	sp, #72	; 0x48
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	607b      	str	r3, [r7, #4]
 800dc76:	4603      	mov	r3, r0
 800dc78:	81fb      	strh	r3, [r7, #14]
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	81bb      	strh	r3, [r7, #12]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 800dc82:	89fb      	ldrh	r3, [r7, #14]
 800dc84:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 800dc86:	89bb      	ldrh	r3, [r7, #12]
 800dc88:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 800dc8a:	7afb      	ldrb	r3, [r7, #11]
 800dc8c:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	f107 031d 	add.w	r3, r7, #29
 800dc94:	6811      	ldr	r1, [r2, #0]
 800dc96:	6019      	str	r1, [r3, #0]
 800dc98:	8892      	ldrh	r2, [r2, #4]
 800dc9a:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 800dc9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 800dca4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800dca8:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 800dcaa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800dcae:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 800dcb0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800dcb4:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 800dcb6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800dcba:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 800dcbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dcc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 800dcc2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800dcc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dcc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dccc:	2218      	movs	r2, #24
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f001 faa8 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dcd6:	233f      	movs	r3, #63	; 0x3f
 800dcd8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 800dcda:	239c      	movs	r3, #156	; 0x9c
 800dcdc:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 800dcde:	f107 0318 	add.w	r3, r7, #24
 800dce2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 800dce4:	2318      	movs	r3, #24
 800dce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 800dce8:	230f      	movs	r3, #15
 800dcea:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800dcec:	f107 0317 	add.w	r3, r7, #23
 800dcf0:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800dcf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 fde3 	bl	800e8c8 <hci_send_req>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	da01      	bge.n	800dd0c <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 800dd08:	23ff      	movs	r3, #255	; 0xff
 800dd0a:	e000      	b.n	800dd0e <aci_gap_create_connection+0xa0>

  return status;
 800dd0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3748      	adds	r7, #72	; 0x48
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b088      	sub	sp, #32
 800dd1a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dd1c:	f107 0308 	add.w	r3, r7, #8
 800dd20:	2218      	movs	r2, #24
 800dd22:	2100      	movs	r1, #0
 800dd24:	4618      	mov	r0, r3
 800dd26:	f001 fa7e 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dd2a:	233f      	movs	r3, #63	; 0x3f
 800dd2c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800dd2e:	f240 1301 	movw	r3, #257	; 0x101
 800dd32:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dd34:	1dfb      	adds	r3, r7, #7
 800dd36:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800dd3c:	f107 0308 	add.w	r3, r7, #8
 800dd40:	2100      	movs	r1, #0
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 fdc0 	bl	800e8c8 <hci_send_req>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	da01      	bge.n	800dd52 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800dd4e:	23ff      	movs	r3, #255	; 0xff
 800dd50:	e000      	b.n	800dd54 <aci_gatt_init+0x3e>

  return status;
 800dd52:	79fb      	ldrb	r3, [r7, #7]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b090      	sub	sp, #64	; 0x40
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6039      	str	r1, [r7, #0]
 800dd64:	4611      	mov	r1, r2
 800dd66:	461a      	mov	r2, r3
 800dd68:	4603      	mov	r3, r0
 800dd6a:	71fb      	strb	r3, [r7, #7]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	71bb      	strb	r3, [r7, #6]
 800dd70:	4613      	mov	r3, r2
 800dd72:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800dd7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dd7e:	3340      	adds	r3, #64	; 0x40
 800dd80:	443b      	add	r3, r7
 800dd82:	79fa      	ldrb	r2, [r7, #7]
 800dd84:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800dd88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d103      	bne.n	800dda0 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800dd98:	2302      	movs	r3, #2
 800dd9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dd9e:	e002      	b.n	800dda6 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800dda0:	2310      	movs	r3, #16
 800dda2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800dda6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ddaa:	f107 020c 	add.w	r2, r7, #12
 800ddae:	4413      	add	r3, r2
 800ddb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f001 fa27 	bl	800f20a <memcpy>
  indx +=  uuid_len;
 800ddbc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800ddc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800ddca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ddce:	3340      	adds	r3, #64	; 0x40
 800ddd0:	443b      	add	r3, r7
 800ddd2:	79ba      	ldrb	r2, [r7, #6]
 800ddd4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800ddd8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dddc:	3301      	adds	r3, #1
 800ddde:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800dde2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dde6:	3340      	adds	r3, #64	; 0x40
 800dde8:	443b      	add	r3, r7
 800ddea:	797a      	ldrb	r2, [r7, #5]
 800ddec:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800ddf0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ddfa:	f107 0320 	add.w	r3, r7, #32
 800ddfe:	2203      	movs	r2, #3
 800de00:	2100      	movs	r1, #0
 800de02:	4618      	mov	r0, r3
 800de04:	f001 fa0f 	bl	800f226 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800de08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de0c:	2218      	movs	r2, #24
 800de0e:	2100      	movs	r1, #0
 800de10:	4618      	mov	r0, r3
 800de12:	f001 fa08 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800de16:	233f      	movs	r3, #63	; 0x3f
 800de18:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800de1a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800de1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800de20:	f107 030c 	add.w	r3, r7, #12
 800de24:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800de26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800de2a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800de2c:	f107 0320 	add.w	r3, r7, #32
 800de30:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800de32:	2303      	movs	r3, #3
 800de34:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800de36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de3a:	2100      	movs	r1, #0
 800de3c:	4618      	mov	r0, r3
 800de3e:	f000 fd43 	bl	800e8c8 <hci_send_req>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	da01      	bge.n	800de4c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800de48:	23ff      	movs	r3, #255	; 0xff
 800de4a:	e00c      	b.n	800de66 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800de4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <aci_gatt_add_serv+0xfe>
    return resp.status;
 800de54:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de58:	e005      	b.n	800de66 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800de5a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800de5e:	b29a      	uxth	r2, r3
 800de60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de62:	801a      	strh	r2, [r3, #0]

  return 0;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3740      	adds	r7, #64	; 0x40
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b092      	sub	sp, #72	; 0x48
 800de72:	af00      	add	r7, sp, #0
 800de74:	603a      	str	r2, [r7, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	4603      	mov	r3, r0
 800de7a:	80fb      	strh	r3, [r7, #6]
 800de7c:	460b      	mov	r3, r1
 800de7e:	717b      	strb	r3, [r7, #5]
 800de80:	4613      	mov	r3, r2
 800de82:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800de84:	2300      	movs	r3, #0
 800de86:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800de8a:	88fb      	ldrh	r3, [r7, #6]
 800de8c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800de8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800de92:	f107 020c 	add.w	r2, r7, #12
 800de96:	4413      	add	r3, r2
 800de98:	88fa      	ldrh	r2, [r7, #6]
 800de9a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800de9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dea0:	3302      	adds	r3, #2
 800dea2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800dea6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800deaa:	3348      	adds	r3, #72	; 0x48
 800deac:	443b      	add	r3, r7
 800deae:	797a      	ldrb	r2, [r7, #5]
 800deb0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800deb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800deb8:	3301      	adds	r3, #1
 800deba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800debe:	797b      	ldrb	r3, [r7, #5]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d103      	bne.n	800decc <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800dec4:	2302      	movs	r3, #2
 800dec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800deca:	e002      	b.n	800ded2 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800decc:	2310      	movs	r3, #16
 800dece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800ded2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ded6:	f107 020c 	add.w	r2, r7, #12
 800deda:	4413      	add	r3, r2
 800dedc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800dee0:	6839      	ldr	r1, [r7, #0]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f001 f991 	bl	800f20a <memcpy>
  indx +=  uuid_len;
 800dee8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800deec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800def0:	4413      	add	r3, r2
 800def2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800def6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800defa:	3348      	adds	r3, #72	; 0x48
 800defc:	443b      	add	r3, r7
 800defe:	793a      	ldrb	r2, [r7, #4]
 800df00:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800df04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df08:	3301      	adds	r3, #1
 800df0a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800df0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df12:	3348      	adds	r3, #72	; 0x48
 800df14:	443b      	add	r3, r7
 800df16:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df1a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800df1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df22:	3301      	adds	r3, #1
 800df24:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800df28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df2c:	3348      	adds	r3, #72	; 0x48
 800df2e:	443b      	add	r3, r7
 800df30:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800df34:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800df38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df3c:	3301      	adds	r3, #1
 800df3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800df42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df46:	3348      	adds	r3, #72	; 0x48
 800df48:	443b      	add	r3, r7
 800df4a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df4e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800df52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df56:	3301      	adds	r3, #1
 800df58:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800df5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df60:	3348      	adds	r3, #72	; 0x48
 800df62:	443b      	add	r3, r7
 800df64:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800df68:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800df6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df70:	3301      	adds	r3, #1
 800df72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800df76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df7a:	3348      	adds	r3, #72	; 0x48
 800df7c:	443b      	add	r3, r7
 800df7e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800df82:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800df86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800df8a:	3301      	adds	r3, #1
 800df8c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800df90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df94:	2203      	movs	r2, #3
 800df96:	2100      	movs	r1, #0
 800df98:	4618      	mov	r0, r3
 800df9a:	f001 f944 	bl	800f226 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800df9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfa2:	2218      	movs	r2, #24
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f001 f93d 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dfac:	233f      	movs	r3, #63	; 0x3f
 800dfae:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800dfb0:	f44f 7382 	mov.w	r3, #260	; 0x104
 800dfb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800dfb6:	f107 030c 	add.w	r3, r7, #12
 800dfba:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800dfbc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800dfc0:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800dfc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800dfcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fc78 	bl	800e8c8 <hci_send_req>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	da01      	bge.n	800dfe2 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800dfde:	23ff      	movs	r3, #255	; 0xff
 800dfe0:	e00c      	b.n	800dffc <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800dfe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d002      	beq.n	800dff0 <aci_gatt_add_char+0x182>
    return resp.status;
 800dfea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dfee:	e005      	b.n	800dffc <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800dff0:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dff8:	801a      	strh	r2, [r3, #0]

  return 0;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3748      	adds	r7, #72	; 0x48
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800e004:	b590      	push	{r4, r7, lr}
 800e006:	b0ab      	sub	sp, #172	; 0xac
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	4611      	mov	r1, r2
 800e010:	461a      	mov	r2, r3
 800e012:	4623      	mov	r3, r4
 800e014:	80fb      	strh	r3, [r7, #6]
 800e016:	4603      	mov	r3, r0
 800e018:	80bb      	strh	r3, [r7, #4]
 800e01a:	460b      	mov	r3, r1
 800e01c:	70fb      	strb	r3, [r7, #3]
 800e01e:	4613      	mov	r3, r2
 800e020:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800e028:	78bb      	ldrb	r3, [r7, #2]
 800e02a:	2b7a      	cmp	r3, #122	; 0x7a
 800e02c:	d901      	bls.n	800e032 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800e02e:	2342      	movs	r3, #66	; 0x42
 800e030:	e074      	b.n	800e11c <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800e036:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e03a:	f107 0208 	add.w	r2, r7, #8
 800e03e:	4413      	add	r3, r2
 800e040:	88fa      	ldrh	r2, [r7, #6]
 800e042:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e044:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e048:	3302      	adds	r3, #2
 800e04a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800e04e:	88bb      	ldrh	r3, [r7, #4]
 800e050:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800e052:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e056:	f107 0208 	add.w	r2, r7, #8
 800e05a:	4413      	add	r3, r2
 800e05c:	88ba      	ldrh	r2, [r7, #4]
 800e05e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e060:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e064:	3302      	adds	r3, #2
 800e066:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800e06a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e06e:	33a8      	adds	r3, #168	; 0xa8
 800e070:	443b      	add	r3, r7
 800e072:	78fa      	ldrb	r2, [r7, #3]
 800e074:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e078:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e07c:	3301      	adds	r3, #1
 800e07e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800e082:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e086:	33a8      	adds	r3, #168	; 0xa8
 800e088:	443b      	add	r3, r7
 800e08a:	78ba      	ldrb	r2, [r7, #2]
 800e08c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e090:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e094:	3301      	adds	r3, #1
 800e096:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800e09a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e09e:	f107 0208 	add.w	r2, r7, #8
 800e0a2:	4413      	add	r3, r2
 800e0a4:	78ba      	ldrb	r2, [r7, #2]
 800e0a6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f001 f8ad 	bl	800f20a <memcpy>
  indx +=  charValueLen;
 800e0b0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800e0b4:	78bb      	ldrb	r3, [r7, #2]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e0bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0c0:	2218      	movs	r2, #24
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f001 f8ae 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e0ca:	233f      	movs	r3, #63	; 0x3f
 800e0cc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800e0d0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e0d4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800e0d8:	f107 0308 	add.w	r3, r7, #8
 800e0dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800e0e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e0e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800e0e8:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800e0ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800e0f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 fbe3 	bl	800e8c8 <hci_send_req>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	da01      	bge.n	800e10c <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800e108:	23ff      	movs	r3, #255	; 0xff
 800e10a:	e007      	b.n	800e11c <aci_gatt_update_char_value+0x118>

  if (status) {
 800e10c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <aci_gatt_update_char_value+0x116>
    return status;
 800e114:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e118:	e000      	b.n	800e11c <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	37ac      	adds	r7, #172	; 0xac
 800e120:	46bd      	mov	sp, r7
 800e122:	bd90      	pop	{r4, r7, pc}

0800e124 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800e124:	b590      	push	{r4, r7, lr}
 800e126:	b091      	sub	sp, #68	; 0x44
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	4611      	mov	r1, r2
 800e130:	461a      	mov	r2, r3
 800e132:	4623      	mov	r3, r4
 800e134:	80fb      	strh	r3, [r7, #6]
 800e136:	4603      	mov	r3, r0
 800e138:	80bb      	strh	r3, [r7, #4]
 800e13a:	460b      	mov	r3, r1
 800e13c:	807b      	strh	r3, [r7, #2]
 800e13e:	4613      	mov	r3, r2
 800e140:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 800e148:	88fb      	ldrh	r3, [r7, #6]
 800e14a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800e14c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e150:	f107 020c 	add.w	r2, r7, #12
 800e154:	4413      	add	r3, r2
 800e156:	88fa      	ldrh	r2, [r7, #6]
 800e158:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e15a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e15e:	3302      	adds	r3, #2
 800e160:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 800e164:	88bb      	ldrh	r3, [r7, #4]
 800e166:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800e168:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e16c:	f107 020c 	add.w	r2, r7, #12
 800e170:	4413      	add	r3, r2
 800e172:	88ba      	ldrh	r2, [r7, #4]
 800e174:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e176:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e17a:	3302      	adds	r3, #2
 800e17c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 800e180:	887b      	ldrh	r3, [r7, #2]
 800e182:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 800e184:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e188:	f107 020c 	add.w	r2, r7, #12
 800e18c:	4413      	add	r3, r2
 800e18e:	887a      	ldrh	r2, [r7, #2]
 800e190:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e192:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e196:	3302      	adds	r3, #2
 800e198:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 800e19c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e1a0:	3340      	adds	r3, #64	; 0x40
 800e1a2:	443b      	add	r3, r7
 800e1a4:	787a      	ldrb	r2, [r7, #1]
 800e1a6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e1aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800e1b4:	787b      	ldrb	r3, [r7, #1]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d103      	bne.n	800e1c2 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e1c0:	e002      	b.n	800e1c8 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 800e1c2:	2310      	movs	r3, #16
 800e1c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800e1c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e1cc:	f107 020c 	add.w	r2, r7, #12
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e1d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f001 f816 	bl	800f20a <memcpy>
  indx +=  uuid_len;
 800e1de:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e1e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e1ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1f0:	2218      	movs	r2, #24
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 f816 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e1fa:	233f      	movs	r3, #63	; 0x3f
 800e1fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800e1fe:	f44f 738b 	mov.w	r3, #278	; 0x116
 800e202:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800e204:	f107 030c 	add.w	r3, r7, #12
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800e20a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e20e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 800e210:	230f      	movs	r3, #15
 800e212:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 800e214:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800e218:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 800e21a:	2301      	movs	r3, #1
 800e21c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e21e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e222:	2100      	movs	r1, #0
 800e224:	4618      	mov	r0, r3
 800e226:	f000 fb4f 	bl	800e8c8 <hci_send_req>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	da01      	bge.n	800e234 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 800e230:	23ff      	movs	r3, #255	; 0xff
 800e232:	e001      	b.n	800e238 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 800e234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3744      	adds	r7, #68	; 0x44
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd90      	pop	{r4, r7, pc}

0800e240 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b0ac      	sub	sp, #176	; 0xb0
 800e244:	af00      	add	r7, sp, #0
 800e246:	607b      	str	r3, [r7, #4]
 800e248:	4603      	mov	r3, r0
 800e24a:	81fb      	strh	r3, [r7, #14]
 800e24c:	460b      	mov	r3, r1
 800e24e:	81bb      	strh	r3, [r7, #12]
 800e250:	4613      	mov	r3, r2
 800e252:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800e25a:	7afb      	ldrb	r3, [r7, #11]
 800e25c:	2b7b      	cmp	r3, #123	; 0x7b
 800e25e:	d901      	bls.n	800e264 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 800e260:	2342      	movs	r3, #66	; 0x42
 800e262:	e064      	b.n	800e32e <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 800e264:	89fb      	ldrh	r3, [r7, #14]
 800e266:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800e268:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e26c:	f107 0210 	add.w	r2, r7, #16
 800e270:	4413      	add	r3, r2
 800e272:	89fa      	ldrh	r2, [r7, #14]
 800e274:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e276:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e27a:	3302      	adds	r3, #2
 800e27c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 800e280:	89bb      	ldrh	r3, [r7, #12]
 800e282:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800e284:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e288:	f107 0210 	add.w	r2, r7, #16
 800e28c:	4413      	add	r3, r2
 800e28e:	89ba      	ldrh	r2, [r7, #12]
 800e290:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e292:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e296:	3302      	adds	r3, #2
 800e298:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 800e29c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e2a0:	33b0      	adds	r3, #176	; 0xb0
 800e2a2:	443b      	add	r3, r7
 800e2a4:	7afa      	ldrb	r2, [r7, #11]
 800e2a6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e2aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800e2b4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e2b8:	f107 0210 	add.w	r2, r7, #16
 800e2bc:	4413      	add	r3, r2
 800e2be:	7afa      	ldrb	r2, [r7, #11]
 800e2c0:	6879      	ldr	r1, [r7, #4]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 ffa1 	bl	800f20a <memcpy>
  indx +=  value_len;
 800e2c8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800e2cc:	7afb      	ldrb	r3, [r7, #11]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e2d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e2d8:	2218      	movs	r2, #24
 800e2da:	2100      	movs	r1, #0
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f000 ffa2 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e2e2:	233f      	movs	r3, #63	; 0x3f
 800e2e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800e2e8:	f240 1321 	movw	r3, #289	; 0x121
 800e2ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 800e2f0:	f107 0310 	add.w	r3, r7, #16
 800e2f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 800e2f8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800e2fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 800e300:	230f      	movs	r3, #15
 800e302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800e306:	f107 0393 	add.w	r3, r7, #147	; 0x93
 800e30a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 800e30e:	2301      	movs	r3, #1
 800e310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 800e314:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e318:	2100      	movs	r1, #0
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 fad4 	bl	800e8c8 <hci_send_req>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	da01      	bge.n	800e32a <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 800e326:	23ff      	movs	r3, #255	; 0xff
 800e328:	e001      	b.n	800e32e <aci_gatt_write_charac_descriptor+0xee>

  return status;
 800e32a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 800e32e:	4618      	mov	r0, r3
 800e330:	37b0      	adds	r7, #176	; 0xb0
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b092      	sub	sp, #72	; 0x48
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	607b      	str	r3, [r7, #4]
 800e33e:	4603      	mov	r3, r0
 800e340:	81fb      	strh	r3, [r7, #14]
 800e342:	460b      	mov	r3, r1
 800e344:	81bb      	strh	r3, [r7, #12]
 800e346:	4613      	mov	r3, r2
 800e348:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800e34a:	7afb      	ldrb	r3, [r7, #11]
 800e34c:	2b14      	cmp	r3, #20
 800e34e:	d901      	bls.n	800e354 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 800e350:	2342      	movs	r3, #66	; 0x42
 800e352:	e031      	b.n	800e3b8 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 800e354:	89fb      	ldrh	r3, [r7, #14]
 800e356:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 800e358:	89bb      	ldrh	r3, [r7, #12]
 800e35a:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 800e35c:	7afb      	ldrb	r3, [r7, #11]
 800e35e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800e360:	7afa      	ldrb	r2, [r7, #11]
 800e362:	f107 0314 	add.w	r3, r7, #20
 800e366:	3305      	adds	r3, #5
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 ff4d 	bl	800f20a <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e374:	2218      	movs	r2, #24
 800e376:	2100      	movs	r1, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f000 ff54 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e37e:	233f      	movs	r3, #63	; 0x3f
 800e380:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800e382:	f240 1323 	movw	r3, #291	; 0x123
 800e386:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 800e388:	f107 0314 	add.w	r3, r7, #20
 800e38c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	3305      	adds	r3, #5
 800e392:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800e394:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800e398:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800e39a:	2301      	movs	r3, #1
 800e39c:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800e39e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 fa8f 	bl	800e8c8 <hci_send_req>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	da01      	bge.n	800e3b4 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 800e3b0:	23ff      	movs	r3, #255	; 0xff
 800e3b2:	e001      	b.n	800e3b8 <aci_gatt_write_without_response+0x82>

  return status;
 800e3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3748      	adds	r7, #72	; 0x48
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b0aa      	sub	sp, #168	; 0xa8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	603a      	str	r2, [r7, #0]
 800e3ca:	71fb      	strb	r3, [r7, #7]
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800e3d6:	79bb      	ldrb	r3, [r7, #6]
 800e3d8:	2b7e      	cmp	r3, #126	; 0x7e
 800e3da:	d901      	bls.n	800e3e0 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800e3dc:	2342      	movs	r3, #66	; 0x42
 800e3de:	e050      	b.n	800e482 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 800e3e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e3e4:	33a8      	adds	r3, #168	; 0xa8
 800e3e6:	443b      	add	r3, r7
 800e3e8:	79fa      	ldrb	r2, [r7, #7]
 800e3ea:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e3ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800e3f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e3fc:	33a8      	adds	r3, #168	; 0xa8
 800e3fe:	443b      	add	r3, r7
 800e400:	79ba      	ldrb	r2, [r7, #6]
 800e402:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e406:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e40a:	3301      	adds	r3, #1
 800e40c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800e410:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e414:	f107 0208 	add.w	r2, r7, #8
 800e418:	4413      	add	r3, r2
 800e41a:	79ba      	ldrb	r2, [r7, #6]
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 fef3 	bl	800f20a <memcpy>
  indx +=  len;
 800e424:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800e428:	79bb      	ldrb	r3, [r7, #6]
 800e42a:	4413      	add	r3, r2
 800e42c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e430:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e434:	2218      	movs	r2, #24
 800e436:	2100      	movs	r1, #0
 800e438:	4618      	mov	r0, r3
 800e43a:	f000 fef4 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e43e:	233f      	movs	r3, #63	; 0x3f
 800e440:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800e444:	230c      	movs	r3, #12
 800e446:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800e44a:	f107 0308 	add.w	r3, r7, #8
 800e44e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800e452:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e456:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800e45a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800e45e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800e462:	2301      	movs	r3, #1
 800e464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800e468:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e46c:	2100      	movs	r1, #0
 800e46e:	4618      	mov	r0, r3
 800e470:	f000 fa2a 	bl	800e8c8 <hci_send_req>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	da01      	bge.n	800e47e <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800e47a:	23ff      	movs	r3, #255	; 0xff
 800e47c:	e001      	b.n	800e482 <aci_hal_write_config_data+0xc2>

  return status;
 800e47e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800e482:	4618      	mov	r0, r3
 800e484:	37a8      	adds	r7, #168	; 0xa8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b08a      	sub	sp, #40	; 0x28
 800e48e:	af00      	add	r7, sp, #0
 800e490:	4603      	mov	r3, r0
 800e492:	460a      	mov	r2, r1
 800e494:	71fb      	strb	r3, [r7, #7]
 800e496:	4613      	mov	r3, r2
 800e498:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800e49a:	79fb      	ldrb	r3, [r7, #7]
 800e49c:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800e49e:	79bb      	ldrb	r3, [r7, #6]
 800e4a0:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e4a2:	f107 0310 	add.w	r3, r7, #16
 800e4a6:	2218      	movs	r2, #24
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 febb 	bl	800f226 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e4b0:	233f      	movs	r3, #63	; 0x3f
 800e4b2:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800e4b4:	230f      	movs	r3, #15
 800e4b6:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800e4b8:	f107 030c 	add.w	r3, r7, #12
 800e4bc:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800e4be:	2302      	movs	r3, #2
 800e4c0:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800e4c2:	f107 030b 	add.w	r3, r7, #11
 800e4c6:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800e4cc:	f107 0310 	add.w	r3, r7, #16
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 f9f8 	bl	800e8c8 <hci_send_req>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	da01      	bge.n	800e4e2 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800e4de:	23ff      	movs	r3, #255	; 0xff
 800e4e0:	e000      	b.n	800e4e4 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800e4e2:	7afb      	ldrb	r3, [r7, #11]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3728      	adds	r7, #40	; 0x28
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b089      	sub	sp, #36	; 0x24
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800e4f6:	f107 0410 	add.w	r4, r7, #16
 800e4fa:	f107 0215 	add.w	r2, r7, #21
 800e4fe:	f107 0112 	add.w	r1, r7, #18
 800e502:	f107 0016 	add.w	r0, r7, #22
 800e506:	f107 030e 	add.w	r3, r7, #14
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	4623      	mov	r3, r4
 800e50e:	f000 f853 	bl	800e5b8 <hci_le_read_local_version>
 800e512:	4603      	mov	r3, r0
 800e514:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d126      	bne.n	800e56a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800e51c:	8a7b      	ldrh	r3, [r7, #18]
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	b29b      	uxth	r3, r3
 800e522:	b2da      	uxtb	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800e528:	8a7b      	ldrh	r3, [r7, #18]
 800e52a:	021b      	lsls	r3, r3, #8
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	b21a      	sxth	r2, r3
 800e538:	89fb      	ldrh	r3, [r7, #14]
 800e53a:	091b      	lsrs	r3, r3, #4
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	011b      	lsls	r3, r3, #4
 800e540:	b21b      	sxth	r3, r3
 800e542:	b2db      	uxtb	r3, r3
 800e544:	b21b      	sxth	r3, r3
 800e546:	4313      	orrs	r3, r2
 800e548:	b21b      	sxth	r3, r3
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	881b      	ldrh	r3, [r3, #0]
 800e554:	b21a      	sxth	r2, r3
 800e556:	89fb      	ldrh	r3, [r7, #14]
 800e558:	b21b      	sxth	r3, r3
 800e55a:	f003 030f 	and.w	r3, r3, #15
 800e55e:	b21b      	sxth	r3, r3
 800e560:	4313      	orrs	r3, r2
 800e562:	b21b      	sxth	r3, r3
 800e564:	b29a      	uxth	r2, r3
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	371c      	adds	r7, #28
 800e570:	46bd      	mov	sp, r7
 800e572:	bd90      	pop	{r4, r7, pc}

0800e574 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e57a:	f107 0308 	add.w	r3, r7, #8
 800e57e:	2218      	movs	r2, #24
 800e580:	2100      	movs	r1, #0
 800e582:	4618      	mov	r0, r3
 800e584:	f000 fe4f 	bl	800f226 <memset>
  rq.ogf = OGF_HOST_CTL;
 800e588:	2303      	movs	r3, #3
 800e58a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800e58c:	2303      	movs	r3, #3
 800e58e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e590:	1dfb      	adds	r3, r7, #7
 800e592:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e594:	2301      	movs	r3, #1
 800e596:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e598:	f107 0308 	add.w	r3, r7, #8
 800e59c:	2100      	movs	r1, #0
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f992 	bl	800e8c8 <hci_send_req>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	da01      	bge.n	800e5ae <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800e5aa:	23ff      	movs	r3, #255	; 0xff
 800e5ac:	e000      	b.n	800e5b0 <hci_reset+0x3c>
  
  return status;  
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3720      	adds	r7, #32
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b08e      	sub	sp, #56	; 0x38
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
 800e5c4:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e5c6:	f107 0314 	add.w	r3, r7, #20
 800e5ca:	2209      	movs	r2, #9
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 fe29 	bl	800f226 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e5d4:	f107 0320 	add.w	r3, r7, #32
 800e5d8:	2218      	movs	r2, #24
 800e5da:	2100      	movs	r1, #0
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 fe22 	bl	800f226 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800e5e2:	2304      	movs	r3, #4
 800e5e4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800e5f2:	f107 0314 	add.w	r3, r7, #20
 800e5f6:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800e5f8:	2309      	movs	r3, #9
 800e5fa:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e5fc:	f107 0320 	add.w	r3, r7, #32
 800e600:	2100      	movs	r1, #0
 800e602:	4618      	mov	r0, r3
 800e604:	f000 f960 	bl	800e8c8 <hci_send_req>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	da01      	bge.n	800e612 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800e60e:	23ff      	movs	r3, #255	; 0xff
 800e610:	e018      	b.n	800e644 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800e612:	7d3b      	ldrb	r3, [r7, #20]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <hci_le_read_local_version+0x64>
    return resp.status;
 800e618:	7d3b      	ldrb	r3, [r7, #20]
 800e61a:	e013      	b.n	800e644 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800e61c:	7d7a      	ldrb	r2, [r7, #21]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800e622:	8afa      	ldrh	r2, [r7, #22]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800e628:	7e3a      	ldrb	r2, [r7, #24]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800e62e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e632:	b29a      	uxth	r2, r3
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800e638:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e640:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3738      	adds	r7, #56	; 0x38
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b092      	sub	sp, #72	; 0x48
 800e650:	af00      	add	r7, sp, #0
 800e652:	4603      	mov	r3, r0
 800e654:	6039      	str	r1, [r7, #0]
 800e656:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800e658:	f107 0310 	add.w	r3, r7, #16
 800e65c:	2220      	movs	r2, #32
 800e65e:	2100      	movs	r1, #0
 800e660:	4618      	mov	r0, r3
 800e662:	f000 fde0 	bl	800f226 <memset>
  scan_resp_cp.length = length;
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	2b1f      	cmp	r3, #31
 800e66e:	bf28      	it	cs
 800e670:	231f      	movcs	r3, #31
 800e672:	b2db      	uxtb	r3, r3
 800e674:	461a      	mov	r2, r3
 800e676:	f107 0310 	add.w	r3, r7, #16
 800e67a:	3301      	adds	r3, #1
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	4618      	mov	r0, r3
 800e680:	f000 fdc3 	bl	800f20a <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e688:	2218      	movs	r2, #24
 800e68a:	2100      	movs	r1, #0
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 fdca 	bl	800f226 <memset>
  rq.ogf = OGF_LE_CTL;
 800e692:	2308      	movs	r3, #8
 800e694:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800e696:	2309      	movs	r3, #9
 800e698:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800e69a:	f107 0310 	add.w	r3, r7, #16
 800e69e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800e6a0:	2320      	movs	r3, #32
 800e6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800e6a4:	f107 030f 	add.w	r3, r7, #15
 800e6a8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e6ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 f907 	bl	800e8c8 <hci_send_req>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	da01      	bge.n	800e6c4 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800e6c0:	23ff      	movs	r3, #255	; 0xff
 800e6c2:	e000      	b.n	800e6c6 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3748      	adds	r7, #72	; 0x48
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800e6ce:	b480      	push	{r7}
 800e6d0:	b085      	sub	sp, #20
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	3308      	adds	r3, #8
 800e6da:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	2b04      	cmp	r3, #4
 800e6e2:	d001      	beq.n	800e6e8 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e00c      	b.n	800e702 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	3302      	adds	r3, #2
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e6f6:	3b03      	subs	r3, #3
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d001      	beq.n	800e700 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e000      	b.n	800e702 <verify_packet+0x34>
  
  return 0;      
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
	...

0800e710 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b0a6      	sub	sp, #152	; 0x98
 800e714:	af00      	add	r7, sp, #0
 800e716:	607b      	str	r3, [r7, #4]
 800e718:	4603      	mov	r3, r0
 800e71a:	81fb      	strh	r3, [r7, #14]
 800e71c:	460b      	mov	r3, r1
 800e71e:	81bb      	strh	r3, [r7, #12]
 800e720:	4613      	mov	r3, r2
 800e722:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800e724:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e72c:	b21a      	sxth	r2, r3
 800e72e:	89fb      	ldrh	r3, [r7, #14]
 800e730:	029b      	lsls	r3, r3, #10
 800e732:	b21b      	sxth	r3, r3
 800e734:	4313      	orrs	r3, r2
 800e736:	b21b      	sxth	r3, r3
 800e738:	b29b      	uxth	r3, r3
 800e73a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800e73c:	7afb      	ldrb	r3, [r7, #11]
 800e73e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800e740:	2301      	movs	r3, #1
 800e742:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800e744:	f107 0318 	add.w	r3, r7, #24
 800e748:	3301      	adds	r3, #1
 800e74a:	461a      	mov	r2, r3
 800e74c:	f107 0314 	add.w	r3, r7, #20
 800e750:	8819      	ldrh	r1, [r3, #0]
 800e752:	789b      	ldrb	r3, [r3, #2]
 800e754:	8011      	strh	r1, [r2, #0]
 800e756:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800e758:	f107 0318 	add.w	r3, r7, #24
 800e75c:	3304      	adds	r3, #4
 800e75e:	7afa      	ldrb	r2, [r7, #11]
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	f000 fd51 	bl	800f20a <memcpy>
  
  if (hciContext.io.Send)
 800e768:	4b08      	ldr	r3, [pc, #32]	; (800e78c <send_cmd+0x7c>)
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d009      	beq.n	800e784 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800e770:	4b06      	ldr	r3, [pc, #24]	; (800e78c <send_cmd+0x7c>)
 800e772:	691b      	ldr	r3, [r3, #16]
 800e774:	7afa      	ldrb	r2, [r7, #11]
 800e776:	b292      	uxth	r2, r2
 800e778:	3204      	adds	r2, #4
 800e77a:	b291      	uxth	r1, r2
 800e77c:	f107 0218 	add.w	r2, r7, #24
 800e780:	4610      	mov	r0, r2
 800e782:	4798      	blx	r3
  }
}
 800e784:	bf00      	nop
 800e786:	3798      	adds	r7, #152	; 0x98
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	20000ab8 	.word	0x20000ab8

0800e790 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800e79a:	e00a      	b.n	800e7b2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800e79c:	f107 030c 	add.w	r3, r7, #12
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	6838      	ldr	r0, [r7, #0]
 800e7a4:	f000 faea 	bl	800ed7c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 fa51 	bl	800ec54 <list_insert_head>
  while (!list_is_empty(src_list))
 800e7b2:	6838      	ldr	r0, [r7, #0]
 800e7b4:	f000 fa2c 	bl	800ec10 <list_is_empty>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0ee      	beq.n	800e79c <move_list+0xc>
  }
}
 800e7be:	bf00      	nop
 800e7c0:	bf00      	nop
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800e7ce:	e009      	b.n	800e7e4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800e7d0:	1d3b      	adds	r3, r7, #4
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4809      	ldr	r0, [pc, #36]	; (800e7fc <free_event_list+0x34>)
 800e7d6:	f000 faaa 	bl	800ed2e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4808      	ldr	r0, [pc, #32]	; (800e800 <free_event_list+0x38>)
 800e7e0:	f000 fa5e 	bl	800eca0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800e7e4:	4806      	ldr	r0, [pc, #24]	; (800e800 <free_event_list+0x38>)
 800e7e6:	f000 faf0 	bl	800edca <list_get_size>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	ddef      	ble.n	800e7d0 <free_event_list+0x8>
  }
}
 800e7f0:	bf00      	nop
 800e7f2:	bf00      	nop
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	200007f4 	.word	0x200007f4
 800e800:	200007ec 	.word	0x200007ec

0800e804 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800e814:	4a18      	ldr	r2, [pc, #96]	; (800e878 <hci_init+0x74>)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800e81a:	4818      	ldr	r0, [pc, #96]	; (800e87c <hci_init+0x78>)
 800e81c:	f000 f9e8 	bl	800ebf0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800e820:	4817      	ldr	r0, [pc, #92]	; (800e880 <hci_init+0x7c>)
 800e822:	f000 f9e5 	bl	800ebf0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800e826:	f7f3 f9d9 	bl	8001bdc <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800e82a:	2300      	movs	r3, #0
 800e82c:	73fb      	strb	r3, [r7, #15]
 800e82e:	e00c      	b.n	800e84a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800e830:	7bfb      	ldrb	r3, [r7, #15]
 800e832:	228c      	movs	r2, #140	; 0x8c
 800e834:	fb02 f303 	mul.w	r3, r2, r3
 800e838:	4a12      	ldr	r2, [pc, #72]	; (800e884 <hci_init+0x80>)
 800e83a:	4413      	add	r3, r2
 800e83c:	4619      	mov	r1, r3
 800e83e:	480f      	ldr	r0, [pc, #60]	; (800e87c <hci_init+0x78>)
 800e840:	f000 fa2e 	bl	800eca0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	3301      	adds	r3, #1
 800e848:	73fb      	strb	r3, [r7, #15]
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	d9ef      	bls.n	800e830 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800e850:	4b09      	ldr	r3, [pc, #36]	; (800e878 <hci_init+0x74>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d003      	beq.n	800e860 <hci_init+0x5c>
 800e858:	4b07      	ldr	r3, [pc, #28]	; (800e878 <hci_init+0x74>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2000      	movs	r0, #0
 800e85e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800e860:	4b05      	ldr	r3, [pc, #20]	; (800e878 <hci_init+0x74>)
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <hci_init+0x6a>
 800e868:	4b03      	ldr	r3, [pc, #12]	; (800e878 <hci_init+0x74>)
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	4798      	blx	r3
}
 800e86e:	bf00      	nop
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20000ab8 	.word	0x20000ab8
 800e87c:	200007ec 	.word	0x200007ec
 800e880:	200007f4 	.word	0x200007f4
 800e884:	200007fc 	.word	0x200007fc

0800e888 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a0b      	ldr	r2, [pc, #44]	; (800e8c4 <hci_register_io_bus+0x3c>)
 800e896:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	4a09      	ldr	r2, [pc, #36]	; (800e8c4 <hci_register_io_bus+0x3c>)
 800e89e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	4a07      	ldr	r2, [pc, #28]	; (800e8c4 <hci_register_io_bus+0x3c>)
 800e8a6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	4a05      	ldr	r2, [pc, #20]	; (800e8c4 <hci_register_io_bus+0x3c>)
 800e8ae:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	4a03      	ldr	r2, [pc, #12]	; (800e8c4 <hci_register_io_bus+0x3c>)
 800e8b6:	6093      	str	r3, [r2, #8]
}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr
 800e8c4:	20000ab8 	.word	0x20000ab8

0800e8c8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b08e      	sub	sp, #56	; 0x38
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	885b      	ldrh	r3, [r3, #2]
 800e8d8:	b21b      	sxth	r3, r3
 800e8da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8de:	b21a      	sxth	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	029b      	lsls	r3, r3, #10
 800e8e6:	b21b      	sxth	r3, r3
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	b21b      	sxth	r3, r3
 800e8ec:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800e8f2:	f107 0308 	add.w	r3, r7, #8
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 f97a 	bl	800ebf0 <list_init_head>

  free_event_list();
 800e8fc:	f7ff ff64 	bl	800e7c8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	8818      	ldrh	r0, [r3, #0]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	8859      	ldrh	r1, [r3, #2]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	689b      	ldr	r3, [r3, #8]
 800e912:	f7ff fefd 	bl	800e710 <send_cmd>
  
  if (async)
 800e916:	78fb      	ldrb	r3, [r7, #3]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d001      	beq.n	800e920 <hci_send_req+0x58>
  {
    return 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	e0e5      	b.n	800eaec <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800e920:	f7fb fd58 	bl	800a3d4 <HAL_GetTick>
 800e924:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800e926:	f7fb fd55 	bl	800a3d4 <HAL_GetTick>
 800e92a:	4602      	mov	r2, r0
 800e92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e934:	f200 80b6 	bhi.w	800eaa4 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800e938:	486e      	ldr	r0, [pc, #440]	; (800eaf4 <hci_send_req+0x22c>)
 800e93a:	f000 f969 	bl	800ec10 <list_is_empty>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d000      	beq.n	800e946 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800e944:	e7ef      	b.n	800e926 <hci_send_req+0x5e>
      {
        break;
 800e946:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800e948:	f107 0310 	add.w	r3, r7, #16
 800e94c:	4619      	mov	r1, r3
 800e94e:	4869      	ldr	r0, [pc, #420]	; (800eaf4 <hci_send_req+0x22c>)
 800e950:	f000 f9ed 	bl	800ed2e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	3308      	adds	r3, #8
 800e958:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2b04      	cmp	r3, #4
 800e960:	d17b      	bne.n	800ea5a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	3301      	adds	r3, #1
 800e966:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	3308      	adds	r3, #8
 800e96c:	3303      	adds	r3, #3
 800e96e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e976:	3b03      	subs	r3, #3
 800e978:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	2b3e      	cmp	r3, #62	; 0x3e
 800e980:	d04d      	beq.n	800ea1e <hci_send_req+0x156>
 800e982:	2b3e      	cmp	r3, #62	; 0x3e
 800e984:	dc6b      	bgt.n	800ea5e <hci_send_req+0x196>
 800e986:	2b10      	cmp	r3, #16
 800e988:	f000 808e 	beq.w	800eaa8 <hci_send_req+0x1e0>
 800e98c:	2b10      	cmp	r3, #16
 800e98e:	dc66      	bgt.n	800ea5e <hci_send_req+0x196>
 800e990:	2b0e      	cmp	r3, #14
 800e992:	d024      	beq.n	800e9de <hci_send_req+0x116>
 800e994:	2b0f      	cmp	r3, #15
 800e996:	d162      	bne.n	800ea5e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	885b      	ldrh	r3, [r3, #2]
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	f040 8081 	bne.w	800eaac <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	2b0f      	cmp	r3, #15
 800e9b0:	d004      	beq.n	800e9bc <hci_send_req+0xf4>
          if (cs->status) {
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d053      	beq.n	800ea62 <hci_send_req+0x19a>
            goto failed;
 800e9ba:	e07a      	b.n	800eab2 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	695a      	ldr	r2, [r3, #20]
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	bf28      	it	cs
 800e9c6:	461a      	movcs	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6918      	ldr	r0, [r3, #16]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	695b      	ldr	r3, [r3, #20]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9d8:	f000 fc17 	bl	800f20a <memcpy>
        goto done;
 800e9dc:	e07a      	b.n	800ead4 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e0:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d15f      	bne.n	800eab0 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	3303      	adds	r3, #3
 800e9f4:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	3b03      	subs	r3, #3
 800e9fa:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	695a      	ldr	r2, [r3, #20]
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	bf28      	it	cs
 800ea06:	461a      	movcs	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6918      	ldr	r0, [r3, #16]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	461a      	mov	r2, r3
 800ea16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea18:	f000 fbf7 	bl	800f20a <memcpy>
        goto done;
 800ea1c:	e05a      	b.n	800ead4 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	461a      	mov	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d11a      	bne.n	800ea66 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	3b01      	subs	r3, #1
 800ea34:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	695a      	ldr	r2, [r3, #20]
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	bf28      	it	cs
 800ea40:	461a      	movcs	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6918      	ldr	r0, [r3, #16]
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	1c59      	adds	r1, r3, #1
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	461a      	mov	r2, r3
 800ea54:	f000 fbd9 	bl	800f20a <memcpy>
        goto done;
 800ea58:	e03c      	b.n	800ead4 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800ea5a:	bf00      	nop
 800ea5c:	e004      	b.n	800ea68 <hci_send_req+0x1a0>
        break;
 800ea5e:	bf00      	nop
 800ea60:	e002      	b.n	800ea68 <hci_send_req+0x1a0>
          break;
 800ea62:	bf00      	nop
 800ea64:	e000      	b.n	800ea68 <hci_send_req+0x1a0>
          break;
 800ea66:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ea68:	4823      	ldr	r0, [pc, #140]	; (800eaf8 <hci_send_req+0x230>)
 800ea6a:	f000 f8d1 	bl	800ec10 <list_is_empty>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00d      	beq.n	800ea90 <hci_send_req+0x1c8>
 800ea74:	481f      	ldr	r0, [pc, #124]	; (800eaf4 <hci_send_req+0x22c>)
 800ea76:	f000 f8cb 	bl	800ec10 <list_is_empty>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d007      	beq.n	800ea90 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	4619      	mov	r1, r3
 800ea84:	481c      	ldr	r0, [pc, #112]	; (800eaf8 <hci_send_req+0x230>)
 800ea86:	f000 f90b 	bl	800eca0 <list_insert_tail>
      hciReadPacket=NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	613b      	str	r3, [r7, #16]
 800ea8e:	e008      	b.n	800eaa2 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	f107 0308 	add.w	r3, r7, #8
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 f901 	bl	800eca0 <list_insert_tail>
      hciReadPacket=NULL;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	613b      	str	r3, [r7, #16]
  {
 800eaa2:	e73d      	b.n	800e920 <hci_send_req+0x58>
        goto failed;
 800eaa4:	bf00      	nop
 800eaa6:	e004      	b.n	800eab2 <hci_send_req+0x1ea>
        goto failed;
 800eaa8:	bf00      	nop
 800eaaa:	e002      	b.n	800eab2 <hci_send_req+0x1ea>
          goto failed;
 800eaac:	bf00      	nop
 800eaae:	e000      	b.n	800eab2 <hci_send_req+0x1ea>
          goto failed;
 800eab0:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d004      	beq.n	800eac2 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	4619      	mov	r1, r3
 800eabc:	480e      	ldr	r0, [pc, #56]	; (800eaf8 <hci_send_req+0x230>)
 800eabe:	f000 f8c9 	bl	800ec54 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800eac2:	f107 0308 	add.w	r3, r7, #8
 800eac6:	4619      	mov	r1, r3
 800eac8:	480a      	ldr	r0, [pc, #40]	; (800eaf4 <hci_send_req+0x22c>)
 800eaca:	f7ff fe61 	bl	800e790 <move_list>

  return -1;
 800eace:	f04f 33ff 	mov.w	r3, #4294967295
 800ead2:	e00b      	b.n	800eaec <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	4619      	mov	r1, r3
 800ead8:	4807      	ldr	r0, [pc, #28]	; (800eaf8 <hci_send_req+0x230>)
 800eada:	f000 f8bb 	bl	800ec54 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800eade:	f107 0308 	add.w	r3, r7, #8
 800eae2:	4619      	mov	r1, r3
 800eae4:	4803      	ldr	r0, [pc, #12]	; (800eaf4 <hci_send_req+0x22c>)
 800eae6:	f7ff fe53 	bl	800e790 <move_list>

  return 0;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3738      	adds	r7, #56	; 0x38
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	200007f4 	.word	0x200007f4
 800eaf8:	200007ec 	.word	0x200007ec

0800eafc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800eb02:	2300      	movs	r3, #0
 800eb04:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800eb06:	e013      	b.n	800eb30 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800eb08:	1d3b      	adds	r3, r7, #4
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	480e      	ldr	r0, [pc, #56]	; (800eb48 <hci_user_evt_proc+0x4c>)
 800eb0e:	f000 f90e 	bl	800ed2e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800eb12:	4b0e      	ldr	r3, [pc, #56]	; (800eb4c <hci_user_evt_proc+0x50>)
 800eb14:	69db      	ldr	r3, [r3, #28]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800eb1a:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <hci_user_evt_proc+0x50>)
 800eb1c:	69db      	ldr	r3, [r3, #28]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	3208      	adds	r2, #8
 800eb22:	4610      	mov	r0, r2
 800eb24:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4809      	ldr	r0, [pc, #36]	; (800eb50 <hci_user_evt_proc+0x54>)
 800eb2c:	f000 f8b8 	bl	800eca0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800eb30:	4805      	ldr	r0, [pc, #20]	; (800eb48 <hci_user_evt_proc+0x4c>)
 800eb32:	f000 f86d 	bl	800ec10 <list_is_empty>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d0e5      	beq.n	800eb08 <hci_user_evt_proc+0xc>
  }
}
 800eb3c:	bf00      	nop
 800eb3e:	bf00      	nop
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	200007f4 	.word	0x200007f4
 800eb4c:	20000ab8 	.word	0x20000ab8
 800eb50:	200007ec 	.word	0x200007ec

0800eb54 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800eb64:	481f      	ldr	r0, [pc, #124]	; (800ebe4 <hci_notify_asynch_evt+0x90>)
 800eb66:	f000 f853 	bl	800ec10 <list_is_empty>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d132      	bne.n	800ebd6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800eb70:	f107 030c 	add.w	r3, r7, #12
 800eb74:	4619      	mov	r1, r3
 800eb76:	481b      	ldr	r0, [pc, #108]	; (800ebe4 <hci_notify_asynch_evt+0x90>)
 800eb78:	f000 f8d9 	bl	800ed2e <list_remove_head>
    
    if (hciContext.io.Receive)
 800eb7c:	4b1a      	ldr	r3, [pc, #104]	; (800ebe8 <hci_notify_asynch_evt+0x94>)
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d02a      	beq.n	800ebda <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800eb84:	4b18      	ldr	r3, [pc, #96]	; (800ebe8 <hci_notify_asynch_evt+0x94>)
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	3208      	adds	r2, #8
 800eb8c:	2180      	movs	r1, #128	; 0x80
 800eb8e:	4610      	mov	r0, r2
 800eb90:	4798      	blx	r3
 800eb92:	4603      	mov	r3, r0
 800eb94:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800eb96:	7cfb      	ldrb	r3, [r7, #19]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d016      	beq.n	800ebca <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	7cfa      	ldrb	r2, [r7, #19]
 800eba0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fd91 	bl	800e6ce <verify_packet>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d105      	bne.n	800ebbe <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	480d      	ldr	r0, [pc, #52]	; (800ebec <hci_notify_asynch_evt+0x98>)
 800ebb8:	f000 f872 	bl	800eca0 <list_insert_tail>
 800ebbc:	e00d      	b.n	800ebda <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	4808      	ldr	r0, [pc, #32]	; (800ebe4 <hci_notify_asynch_evt+0x90>)
 800ebc4:	f000 f846 	bl	800ec54 <list_insert_head>
 800ebc8:	e007      	b.n	800ebda <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <hci_notify_asynch_evt+0x90>)
 800ebd0:	f000 f840 	bl	800ec54 <list_insert_head>
 800ebd4:	e001      	b.n	800ebda <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800ebda:	697b      	ldr	r3, [r7, #20]

}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	200007ec 	.word	0x200007ec
 800ebe8:	20000ab8 	.word	0x20000ab8
 800ebec:	200007f4 	.word	0x200007f4

0800ebf0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	605a      	str	r2, [r3, #4]
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b087      	sub	sp, #28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec18:	f3ef 8310 	mrs	r3, PRIMASK
 800ec1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ec20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec22:	b672      	cpsid	i
}
 800ec24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d102      	bne.n	800ec36 <list_is_empty+0x26>
  {
    return_value = 1;
 800ec30:	2301      	movs	r3, #1
 800ec32:	75fb      	strb	r3, [r7, #23]
 800ec34:	e001      	b.n	800ec3a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800ec36:	2300      	movs	r3, #0
 800ec38:	75fb      	strb	r3, [r7, #23]
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	f383 8810 	msr	PRIMASK, r3
}
 800ec44:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	371c      	adds	r7, #28
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ec62:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec64:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ec66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec68:	b672      	cpsid	i
}
 800ec6a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	683a      	ldr	r2, [r7, #0]
 800ec86:	605a      	str	r2, [r3, #4]
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	f383 8810 	msr	PRIMASK, r3
}
 800ec92:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ec94:	bf00      	nop
 800ec96:	371c      	adds	r7, #28
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ecae:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ecb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecb4:	b672      	cpsid	i
}
 800ecb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	f383 8810 	msr	PRIMASK, r3
}
 800ecde:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ece0:	bf00      	nop
 800ece2:	371c      	adds	r7, #28
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b087      	sub	sp, #28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecf4:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ecfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecfe:	b672      	cpsid	i
}
 800ed00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	6812      	ldr	r2, [r2, #0]
 800ed0a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	6852      	ldr	r2, [r2, #4]
 800ed14:	605a      	str	r2, [r3, #4]
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	f383 8810 	msr	PRIMASK, r3
}
 800ed20:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ed22:	bf00      	nop
 800ed24:	371c      	adds	r7, #28
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b086      	sub	sp, #24
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed38:	f3ef 8310 	mrs	r3, PRIMASK
 800ed3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed42:	b672      	cpsid	i
}
 800ed44:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff ffca 	bl	800ecec <list_remove_node>
  (*node)->next = NULL;
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2200      	movs	r2, #0
 800ed66:	605a      	str	r2, [r3, #4]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	f383 8810 	msr	PRIMASK, r3
}
 800ed72:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ed74:	bf00      	nop
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed86:	f3ef 8310 	mrs	r3, PRIMASK
 800ed8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed90:	b672      	cpsid	i
}
 800ed92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7ff ffa3 	bl	800ecec <list_remove_node>
  (*node)->next = NULL;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2200      	movs	r2, #0
 800edac:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2200      	movs	r2, #0
 800edb4:	605a      	str	r2, [r3, #4]
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	f383 8810 	msr	PRIMASK, r3
}
 800edc0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800edc2:	bf00      	nop
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800edca:	b480      	push	{r7}
 800edcc:	b089      	sub	sp, #36	; 0x24
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
  int size = 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edd6:	f3ef 8310 	mrs	r3, PRIMASK
 800edda:	613b      	str	r3, [r7, #16]
  return(result);
 800eddc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800edde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ede0:	b672      	cpsid	i
}
 800ede2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800edea:	e005      	b.n	800edf8 <list_get_size+0x2e>
  {
    size++;
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	3301      	adds	r3, #1
 800edf0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800edf8:	69ba      	ldr	r2, [r7, #24]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d1f5      	bne.n	800edec <list_get_size+0x22>
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f383 8810 	msr	PRIMASK, r3
}
 800ee0a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800ee0c:	69fb      	ldr	r3, [r7, #28]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3724      	adds	r7, #36	; 0x24
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
	...

0800ee1c <__errno>:
 800ee1c:	4b01      	ldr	r3, [pc, #4]	; (800ee24 <__errno+0x8>)
 800ee1e:	6818      	ldr	r0, [r3, #0]
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	200001a0 	.word	0x200001a0

0800ee28 <__sflush_r>:
 800ee28:	898a      	ldrh	r2, [r1, #12]
 800ee2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2e:	4605      	mov	r5, r0
 800ee30:	0710      	lsls	r0, r2, #28
 800ee32:	460c      	mov	r4, r1
 800ee34:	d458      	bmi.n	800eee8 <__sflush_r+0xc0>
 800ee36:	684b      	ldr	r3, [r1, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dc05      	bgt.n	800ee48 <__sflush_r+0x20>
 800ee3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	dc02      	bgt.n	800ee48 <__sflush_r+0x20>
 800ee42:	2000      	movs	r0, #0
 800ee44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee4a:	2e00      	cmp	r6, #0
 800ee4c:	d0f9      	beq.n	800ee42 <__sflush_r+0x1a>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee54:	682f      	ldr	r7, [r5, #0]
 800ee56:	602b      	str	r3, [r5, #0]
 800ee58:	d032      	beq.n	800eec0 <__sflush_r+0x98>
 800ee5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	075a      	lsls	r2, r3, #29
 800ee60:	d505      	bpl.n	800ee6e <__sflush_r+0x46>
 800ee62:	6863      	ldr	r3, [r4, #4]
 800ee64:	1ac0      	subs	r0, r0, r3
 800ee66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee68:	b10b      	cbz	r3, 800ee6e <__sflush_r+0x46>
 800ee6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee6c:	1ac0      	subs	r0, r0, r3
 800ee6e:	2300      	movs	r3, #0
 800ee70:	4602      	mov	r2, r0
 800ee72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee74:	6a21      	ldr	r1, [r4, #32]
 800ee76:	4628      	mov	r0, r5
 800ee78:	47b0      	blx	r6
 800ee7a:	1c43      	adds	r3, r0, #1
 800ee7c:	89a3      	ldrh	r3, [r4, #12]
 800ee7e:	d106      	bne.n	800ee8e <__sflush_r+0x66>
 800ee80:	6829      	ldr	r1, [r5, #0]
 800ee82:	291d      	cmp	r1, #29
 800ee84:	d82c      	bhi.n	800eee0 <__sflush_r+0xb8>
 800ee86:	4a2a      	ldr	r2, [pc, #168]	; (800ef30 <__sflush_r+0x108>)
 800ee88:	40ca      	lsrs	r2, r1
 800ee8a:	07d6      	lsls	r6, r2, #31
 800ee8c:	d528      	bpl.n	800eee0 <__sflush_r+0xb8>
 800ee8e:	2200      	movs	r2, #0
 800ee90:	6062      	str	r2, [r4, #4]
 800ee92:	04d9      	lsls	r1, r3, #19
 800ee94:	6922      	ldr	r2, [r4, #16]
 800ee96:	6022      	str	r2, [r4, #0]
 800ee98:	d504      	bpl.n	800eea4 <__sflush_r+0x7c>
 800ee9a:	1c42      	adds	r2, r0, #1
 800ee9c:	d101      	bne.n	800eea2 <__sflush_r+0x7a>
 800ee9e:	682b      	ldr	r3, [r5, #0]
 800eea0:	b903      	cbnz	r3, 800eea4 <__sflush_r+0x7c>
 800eea2:	6560      	str	r0, [r4, #84]	; 0x54
 800eea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eea6:	602f      	str	r7, [r5, #0]
 800eea8:	2900      	cmp	r1, #0
 800eeaa:	d0ca      	beq.n	800ee42 <__sflush_r+0x1a>
 800eeac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <__sflush_r+0x92>
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f000 f9bf 	bl	800f238 <_free_r>
 800eeba:	2000      	movs	r0, #0
 800eebc:	6360      	str	r0, [r4, #52]	; 0x34
 800eebe:	e7c1      	b.n	800ee44 <__sflush_r+0x1c>
 800eec0:	6a21      	ldr	r1, [r4, #32]
 800eec2:	2301      	movs	r3, #1
 800eec4:	4628      	mov	r0, r5
 800eec6:	47b0      	blx	r6
 800eec8:	1c41      	adds	r1, r0, #1
 800eeca:	d1c7      	bne.n	800ee5c <__sflush_r+0x34>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d0c4      	beq.n	800ee5c <__sflush_r+0x34>
 800eed2:	2b1d      	cmp	r3, #29
 800eed4:	d001      	beq.n	800eeda <__sflush_r+0xb2>
 800eed6:	2b16      	cmp	r3, #22
 800eed8:	d101      	bne.n	800eede <__sflush_r+0xb6>
 800eeda:	602f      	str	r7, [r5, #0]
 800eedc:	e7b1      	b.n	800ee42 <__sflush_r+0x1a>
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	e7ad      	b.n	800ee44 <__sflush_r+0x1c>
 800eee8:	690f      	ldr	r7, [r1, #16]
 800eeea:	2f00      	cmp	r7, #0
 800eeec:	d0a9      	beq.n	800ee42 <__sflush_r+0x1a>
 800eeee:	0793      	lsls	r3, r2, #30
 800eef0:	680e      	ldr	r6, [r1, #0]
 800eef2:	bf08      	it	eq
 800eef4:	694b      	ldreq	r3, [r1, #20]
 800eef6:	600f      	str	r7, [r1, #0]
 800eef8:	bf18      	it	ne
 800eefa:	2300      	movne	r3, #0
 800eefc:	eba6 0807 	sub.w	r8, r6, r7
 800ef00:	608b      	str	r3, [r1, #8]
 800ef02:	f1b8 0f00 	cmp.w	r8, #0
 800ef06:	dd9c      	ble.n	800ee42 <__sflush_r+0x1a>
 800ef08:	6a21      	ldr	r1, [r4, #32]
 800ef0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef0c:	4643      	mov	r3, r8
 800ef0e:	463a      	mov	r2, r7
 800ef10:	4628      	mov	r0, r5
 800ef12:	47b0      	blx	r6
 800ef14:	2800      	cmp	r0, #0
 800ef16:	dc06      	bgt.n	800ef26 <__sflush_r+0xfe>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef1e:	81a3      	strh	r3, [r4, #12]
 800ef20:	f04f 30ff 	mov.w	r0, #4294967295
 800ef24:	e78e      	b.n	800ee44 <__sflush_r+0x1c>
 800ef26:	4407      	add	r7, r0
 800ef28:	eba8 0800 	sub.w	r8, r8, r0
 800ef2c:	e7e9      	b.n	800ef02 <__sflush_r+0xda>
 800ef2e:	bf00      	nop
 800ef30:	20400001 	.word	0x20400001

0800ef34 <_fflush_r>:
 800ef34:	b538      	push	{r3, r4, r5, lr}
 800ef36:	690b      	ldr	r3, [r1, #16]
 800ef38:	4605      	mov	r5, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	b913      	cbnz	r3, 800ef44 <_fflush_r+0x10>
 800ef3e:	2500      	movs	r5, #0
 800ef40:	4628      	mov	r0, r5
 800ef42:	bd38      	pop	{r3, r4, r5, pc}
 800ef44:	b118      	cbz	r0, 800ef4e <_fflush_r+0x1a>
 800ef46:	6983      	ldr	r3, [r0, #24]
 800ef48:	b90b      	cbnz	r3, 800ef4e <_fflush_r+0x1a>
 800ef4a:	f000 f899 	bl	800f080 <__sinit>
 800ef4e:	4b14      	ldr	r3, [pc, #80]	; (800efa0 <_fflush_r+0x6c>)
 800ef50:	429c      	cmp	r4, r3
 800ef52:	d11b      	bne.n	800ef8c <_fflush_r+0x58>
 800ef54:	686c      	ldr	r4, [r5, #4]
 800ef56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0ef      	beq.n	800ef3e <_fflush_r+0xa>
 800ef5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef60:	07d0      	lsls	r0, r2, #31
 800ef62:	d404      	bmi.n	800ef6e <_fflush_r+0x3a>
 800ef64:	0599      	lsls	r1, r3, #22
 800ef66:	d402      	bmi.n	800ef6e <_fflush_r+0x3a>
 800ef68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef6a:	f000 f94c 	bl	800f206 <__retarget_lock_acquire_recursive>
 800ef6e:	4628      	mov	r0, r5
 800ef70:	4621      	mov	r1, r4
 800ef72:	f7ff ff59 	bl	800ee28 <__sflush_r>
 800ef76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef78:	07da      	lsls	r2, r3, #31
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	d4e0      	bmi.n	800ef40 <_fflush_r+0xc>
 800ef7e:	89a3      	ldrh	r3, [r4, #12]
 800ef80:	059b      	lsls	r3, r3, #22
 800ef82:	d4dd      	bmi.n	800ef40 <_fflush_r+0xc>
 800ef84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef86:	f000 f93f 	bl	800f208 <__retarget_lock_release_recursive>
 800ef8a:	e7d9      	b.n	800ef40 <_fflush_r+0xc>
 800ef8c:	4b05      	ldr	r3, [pc, #20]	; (800efa4 <_fflush_r+0x70>)
 800ef8e:	429c      	cmp	r4, r3
 800ef90:	d101      	bne.n	800ef96 <_fflush_r+0x62>
 800ef92:	68ac      	ldr	r4, [r5, #8]
 800ef94:	e7df      	b.n	800ef56 <_fflush_r+0x22>
 800ef96:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <_fflush_r+0x74>)
 800ef98:	429c      	cmp	r4, r3
 800ef9a:	bf08      	it	eq
 800ef9c:	68ec      	ldreq	r4, [r5, #12]
 800ef9e:	e7da      	b.n	800ef56 <_fflush_r+0x22>
 800efa0:	080120bc 	.word	0x080120bc
 800efa4:	080120dc 	.word	0x080120dc
 800efa8:	0801209c 	.word	0x0801209c

0800efac <fflush>:
 800efac:	4601      	mov	r1, r0
 800efae:	b920      	cbnz	r0, 800efba <fflush+0xe>
 800efb0:	4b04      	ldr	r3, [pc, #16]	; (800efc4 <fflush+0x18>)
 800efb2:	4905      	ldr	r1, [pc, #20]	; (800efc8 <fflush+0x1c>)
 800efb4:	6818      	ldr	r0, [r3, #0]
 800efb6:	f000 b8e1 	b.w	800f17c <_fwalk_reent>
 800efba:	4b04      	ldr	r3, [pc, #16]	; (800efcc <fflush+0x20>)
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	f7ff bfb9 	b.w	800ef34 <_fflush_r>
 800efc2:	bf00      	nop
 800efc4:	080120fc 	.word	0x080120fc
 800efc8:	0800ef35 	.word	0x0800ef35
 800efcc:	200001a0 	.word	0x200001a0

0800efd0 <std>:
 800efd0:	2300      	movs	r3, #0
 800efd2:	b510      	push	{r4, lr}
 800efd4:	4604      	mov	r4, r0
 800efd6:	e9c0 3300 	strd	r3, r3, [r0]
 800efda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efde:	6083      	str	r3, [r0, #8]
 800efe0:	8181      	strh	r1, [r0, #12]
 800efe2:	6643      	str	r3, [r0, #100]	; 0x64
 800efe4:	81c2      	strh	r2, [r0, #14]
 800efe6:	6183      	str	r3, [r0, #24]
 800efe8:	4619      	mov	r1, r3
 800efea:	2208      	movs	r2, #8
 800efec:	305c      	adds	r0, #92	; 0x5c
 800efee:	f000 f91a 	bl	800f226 <memset>
 800eff2:	4b05      	ldr	r3, [pc, #20]	; (800f008 <std+0x38>)
 800eff4:	6263      	str	r3, [r4, #36]	; 0x24
 800eff6:	4b05      	ldr	r3, [pc, #20]	; (800f00c <std+0x3c>)
 800eff8:	62a3      	str	r3, [r4, #40]	; 0x28
 800effa:	4b05      	ldr	r3, [pc, #20]	; (800f010 <std+0x40>)
 800effc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800effe:	4b05      	ldr	r3, [pc, #20]	; (800f014 <std+0x44>)
 800f000:	6224      	str	r4, [r4, #32]
 800f002:	6323      	str	r3, [r4, #48]	; 0x30
 800f004:	bd10      	pop	{r4, pc}
 800f006:	bf00      	nop
 800f008:	0800fe75 	.word	0x0800fe75
 800f00c:	0800fe97 	.word	0x0800fe97
 800f010:	0800fecf 	.word	0x0800fecf
 800f014:	0800fef3 	.word	0x0800fef3

0800f018 <_cleanup_r>:
 800f018:	4901      	ldr	r1, [pc, #4]	; (800f020 <_cleanup_r+0x8>)
 800f01a:	f000 b8af 	b.w	800f17c <_fwalk_reent>
 800f01e:	bf00      	nop
 800f020:	0800ef35 	.word	0x0800ef35

0800f024 <__sfmoreglue>:
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	2268      	movs	r2, #104	; 0x68
 800f028:	1e4d      	subs	r5, r1, #1
 800f02a:	4355      	muls	r5, r2
 800f02c:	460e      	mov	r6, r1
 800f02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f032:	f000 f96d 	bl	800f310 <_malloc_r>
 800f036:	4604      	mov	r4, r0
 800f038:	b140      	cbz	r0, 800f04c <__sfmoreglue+0x28>
 800f03a:	2100      	movs	r1, #0
 800f03c:	e9c0 1600 	strd	r1, r6, [r0]
 800f040:	300c      	adds	r0, #12
 800f042:	60a0      	str	r0, [r4, #8]
 800f044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f048:	f000 f8ed 	bl	800f226 <memset>
 800f04c:	4620      	mov	r0, r4
 800f04e:	bd70      	pop	{r4, r5, r6, pc}

0800f050 <__sfp_lock_acquire>:
 800f050:	4801      	ldr	r0, [pc, #4]	; (800f058 <__sfp_lock_acquire+0x8>)
 800f052:	f000 b8d8 	b.w	800f206 <__retarget_lock_acquire_recursive>
 800f056:	bf00      	nop
 800f058:	20000ad9 	.word	0x20000ad9

0800f05c <__sfp_lock_release>:
 800f05c:	4801      	ldr	r0, [pc, #4]	; (800f064 <__sfp_lock_release+0x8>)
 800f05e:	f000 b8d3 	b.w	800f208 <__retarget_lock_release_recursive>
 800f062:	bf00      	nop
 800f064:	20000ad9 	.word	0x20000ad9

0800f068 <__sinit_lock_acquire>:
 800f068:	4801      	ldr	r0, [pc, #4]	; (800f070 <__sinit_lock_acquire+0x8>)
 800f06a:	f000 b8cc 	b.w	800f206 <__retarget_lock_acquire_recursive>
 800f06e:	bf00      	nop
 800f070:	20000ada 	.word	0x20000ada

0800f074 <__sinit_lock_release>:
 800f074:	4801      	ldr	r0, [pc, #4]	; (800f07c <__sinit_lock_release+0x8>)
 800f076:	f000 b8c7 	b.w	800f208 <__retarget_lock_release_recursive>
 800f07a:	bf00      	nop
 800f07c:	20000ada 	.word	0x20000ada

0800f080 <__sinit>:
 800f080:	b510      	push	{r4, lr}
 800f082:	4604      	mov	r4, r0
 800f084:	f7ff fff0 	bl	800f068 <__sinit_lock_acquire>
 800f088:	69a3      	ldr	r3, [r4, #24]
 800f08a:	b11b      	cbz	r3, 800f094 <__sinit+0x14>
 800f08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f090:	f7ff bff0 	b.w	800f074 <__sinit_lock_release>
 800f094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f098:	6523      	str	r3, [r4, #80]	; 0x50
 800f09a:	4b13      	ldr	r3, [pc, #76]	; (800f0e8 <__sinit+0x68>)
 800f09c:	4a13      	ldr	r2, [pc, #76]	; (800f0ec <__sinit+0x6c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0a2:	42a3      	cmp	r3, r4
 800f0a4:	bf04      	itt	eq
 800f0a6:	2301      	moveq	r3, #1
 800f0a8:	61a3      	streq	r3, [r4, #24]
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 f820 	bl	800f0f0 <__sfp>
 800f0b0:	6060      	str	r0, [r4, #4]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 f81c 	bl	800f0f0 <__sfp>
 800f0b8:	60a0      	str	r0, [r4, #8]
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 f818 	bl	800f0f0 <__sfp>
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	60e0      	str	r0, [r4, #12]
 800f0c4:	2104      	movs	r1, #4
 800f0c6:	6860      	ldr	r0, [r4, #4]
 800f0c8:	f7ff ff82 	bl	800efd0 <std>
 800f0cc:	68a0      	ldr	r0, [r4, #8]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	2109      	movs	r1, #9
 800f0d2:	f7ff ff7d 	bl	800efd0 <std>
 800f0d6:	68e0      	ldr	r0, [r4, #12]
 800f0d8:	2202      	movs	r2, #2
 800f0da:	2112      	movs	r1, #18
 800f0dc:	f7ff ff78 	bl	800efd0 <std>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	61a3      	str	r3, [r4, #24]
 800f0e4:	e7d2      	b.n	800f08c <__sinit+0xc>
 800f0e6:	bf00      	nop
 800f0e8:	080120fc 	.word	0x080120fc
 800f0ec:	0800f019 	.word	0x0800f019

0800f0f0 <__sfp>:
 800f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f2:	4607      	mov	r7, r0
 800f0f4:	f7ff ffac 	bl	800f050 <__sfp_lock_acquire>
 800f0f8:	4b1e      	ldr	r3, [pc, #120]	; (800f174 <__sfp+0x84>)
 800f0fa:	681e      	ldr	r6, [r3, #0]
 800f0fc:	69b3      	ldr	r3, [r6, #24]
 800f0fe:	b913      	cbnz	r3, 800f106 <__sfp+0x16>
 800f100:	4630      	mov	r0, r6
 800f102:	f7ff ffbd 	bl	800f080 <__sinit>
 800f106:	3648      	adds	r6, #72	; 0x48
 800f108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	d503      	bpl.n	800f118 <__sfp+0x28>
 800f110:	6833      	ldr	r3, [r6, #0]
 800f112:	b30b      	cbz	r3, 800f158 <__sfp+0x68>
 800f114:	6836      	ldr	r6, [r6, #0]
 800f116:	e7f7      	b.n	800f108 <__sfp+0x18>
 800f118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f11c:	b9d5      	cbnz	r5, 800f154 <__sfp+0x64>
 800f11e:	4b16      	ldr	r3, [pc, #88]	; (800f178 <__sfp+0x88>)
 800f120:	60e3      	str	r3, [r4, #12]
 800f122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f126:	6665      	str	r5, [r4, #100]	; 0x64
 800f128:	f000 f86c 	bl	800f204 <__retarget_lock_init_recursive>
 800f12c:	f7ff ff96 	bl	800f05c <__sfp_lock_release>
 800f130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f138:	6025      	str	r5, [r4, #0]
 800f13a:	61a5      	str	r5, [r4, #24]
 800f13c:	2208      	movs	r2, #8
 800f13e:	4629      	mov	r1, r5
 800f140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f144:	f000 f86f 	bl	800f226 <memset>
 800f148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f150:	4620      	mov	r0, r4
 800f152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f154:	3468      	adds	r4, #104	; 0x68
 800f156:	e7d9      	b.n	800f10c <__sfp+0x1c>
 800f158:	2104      	movs	r1, #4
 800f15a:	4638      	mov	r0, r7
 800f15c:	f7ff ff62 	bl	800f024 <__sfmoreglue>
 800f160:	4604      	mov	r4, r0
 800f162:	6030      	str	r0, [r6, #0]
 800f164:	2800      	cmp	r0, #0
 800f166:	d1d5      	bne.n	800f114 <__sfp+0x24>
 800f168:	f7ff ff78 	bl	800f05c <__sfp_lock_release>
 800f16c:	230c      	movs	r3, #12
 800f16e:	603b      	str	r3, [r7, #0]
 800f170:	e7ee      	b.n	800f150 <__sfp+0x60>
 800f172:	bf00      	nop
 800f174:	080120fc 	.word	0x080120fc
 800f178:	ffff0001 	.word	0xffff0001

0800f17c <_fwalk_reent>:
 800f17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f180:	4606      	mov	r6, r0
 800f182:	4688      	mov	r8, r1
 800f184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f188:	2700      	movs	r7, #0
 800f18a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f18e:	f1b9 0901 	subs.w	r9, r9, #1
 800f192:	d505      	bpl.n	800f1a0 <_fwalk_reent+0x24>
 800f194:	6824      	ldr	r4, [r4, #0]
 800f196:	2c00      	cmp	r4, #0
 800f198:	d1f7      	bne.n	800f18a <_fwalk_reent+0xe>
 800f19a:	4638      	mov	r0, r7
 800f19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a0:	89ab      	ldrh	r3, [r5, #12]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d907      	bls.n	800f1b6 <_fwalk_reent+0x3a>
 800f1a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	d003      	beq.n	800f1b6 <_fwalk_reent+0x3a>
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	47c0      	blx	r8
 800f1b4:	4307      	orrs	r7, r0
 800f1b6:	3568      	adds	r5, #104	; 0x68
 800f1b8:	e7e9      	b.n	800f18e <_fwalk_reent+0x12>
	...

0800f1bc <__libc_init_array>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	4d0d      	ldr	r5, [pc, #52]	; (800f1f4 <__libc_init_array+0x38>)
 800f1c0:	4c0d      	ldr	r4, [pc, #52]	; (800f1f8 <__libc_init_array+0x3c>)
 800f1c2:	1b64      	subs	r4, r4, r5
 800f1c4:	10a4      	asrs	r4, r4, #2
 800f1c6:	2600      	movs	r6, #0
 800f1c8:	42a6      	cmp	r6, r4
 800f1ca:	d109      	bne.n	800f1e0 <__libc_init_array+0x24>
 800f1cc:	4d0b      	ldr	r5, [pc, #44]	; (800f1fc <__libc_init_array+0x40>)
 800f1ce:	4c0c      	ldr	r4, [pc, #48]	; (800f200 <__libc_init_array+0x44>)
 800f1d0:	f002 fe38 	bl	8011e44 <_init>
 800f1d4:	1b64      	subs	r4, r4, r5
 800f1d6:	10a4      	asrs	r4, r4, #2
 800f1d8:	2600      	movs	r6, #0
 800f1da:	42a6      	cmp	r6, r4
 800f1dc:	d105      	bne.n	800f1ea <__libc_init_array+0x2e>
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
 800f1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1e4:	4798      	blx	r3
 800f1e6:	3601      	adds	r6, #1
 800f1e8:	e7ee      	b.n	800f1c8 <__libc_init_array+0xc>
 800f1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ee:	4798      	blx	r3
 800f1f0:	3601      	adds	r6, #1
 800f1f2:	e7f2      	b.n	800f1da <__libc_init_array+0x1e>
 800f1f4:	0801247c 	.word	0x0801247c
 800f1f8:	0801247c 	.word	0x0801247c
 800f1fc:	0801247c 	.word	0x0801247c
 800f200:	08012480 	.word	0x08012480

0800f204 <__retarget_lock_init_recursive>:
 800f204:	4770      	bx	lr

0800f206 <__retarget_lock_acquire_recursive>:
 800f206:	4770      	bx	lr

0800f208 <__retarget_lock_release_recursive>:
 800f208:	4770      	bx	lr

0800f20a <memcpy>:
 800f20a:	440a      	add	r2, r1
 800f20c:	4291      	cmp	r1, r2
 800f20e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f212:	d100      	bne.n	800f216 <memcpy+0xc>
 800f214:	4770      	bx	lr
 800f216:	b510      	push	{r4, lr}
 800f218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f21c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f220:	4291      	cmp	r1, r2
 800f222:	d1f9      	bne.n	800f218 <memcpy+0xe>
 800f224:	bd10      	pop	{r4, pc}

0800f226 <memset>:
 800f226:	4402      	add	r2, r0
 800f228:	4603      	mov	r3, r0
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d100      	bne.n	800f230 <memset+0xa>
 800f22e:	4770      	bx	lr
 800f230:	f803 1b01 	strb.w	r1, [r3], #1
 800f234:	e7f9      	b.n	800f22a <memset+0x4>
	...

0800f238 <_free_r>:
 800f238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f23a:	2900      	cmp	r1, #0
 800f23c:	d044      	beq.n	800f2c8 <_free_r+0x90>
 800f23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f242:	9001      	str	r0, [sp, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	f1a1 0404 	sub.w	r4, r1, #4
 800f24a:	bfb8      	it	lt
 800f24c:	18e4      	addlt	r4, r4, r3
 800f24e:	f001 fe35 	bl	8010ebc <__malloc_lock>
 800f252:	4a1e      	ldr	r2, [pc, #120]	; (800f2cc <_free_r+0x94>)
 800f254:	9801      	ldr	r0, [sp, #4]
 800f256:	6813      	ldr	r3, [r2, #0]
 800f258:	b933      	cbnz	r3, 800f268 <_free_r+0x30>
 800f25a:	6063      	str	r3, [r4, #4]
 800f25c:	6014      	str	r4, [r2, #0]
 800f25e:	b003      	add	sp, #12
 800f260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f264:	f001 be30 	b.w	8010ec8 <__malloc_unlock>
 800f268:	42a3      	cmp	r3, r4
 800f26a:	d908      	bls.n	800f27e <_free_r+0x46>
 800f26c:	6825      	ldr	r5, [r4, #0]
 800f26e:	1961      	adds	r1, r4, r5
 800f270:	428b      	cmp	r3, r1
 800f272:	bf01      	itttt	eq
 800f274:	6819      	ldreq	r1, [r3, #0]
 800f276:	685b      	ldreq	r3, [r3, #4]
 800f278:	1949      	addeq	r1, r1, r5
 800f27a:	6021      	streq	r1, [r4, #0]
 800f27c:	e7ed      	b.n	800f25a <_free_r+0x22>
 800f27e:	461a      	mov	r2, r3
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	b10b      	cbz	r3, 800f288 <_free_r+0x50>
 800f284:	42a3      	cmp	r3, r4
 800f286:	d9fa      	bls.n	800f27e <_free_r+0x46>
 800f288:	6811      	ldr	r1, [r2, #0]
 800f28a:	1855      	adds	r5, r2, r1
 800f28c:	42a5      	cmp	r5, r4
 800f28e:	d10b      	bne.n	800f2a8 <_free_r+0x70>
 800f290:	6824      	ldr	r4, [r4, #0]
 800f292:	4421      	add	r1, r4
 800f294:	1854      	adds	r4, r2, r1
 800f296:	42a3      	cmp	r3, r4
 800f298:	6011      	str	r1, [r2, #0]
 800f29a:	d1e0      	bne.n	800f25e <_free_r+0x26>
 800f29c:	681c      	ldr	r4, [r3, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	6053      	str	r3, [r2, #4]
 800f2a2:	4421      	add	r1, r4
 800f2a4:	6011      	str	r1, [r2, #0]
 800f2a6:	e7da      	b.n	800f25e <_free_r+0x26>
 800f2a8:	d902      	bls.n	800f2b0 <_free_r+0x78>
 800f2aa:	230c      	movs	r3, #12
 800f2ac:	6003      	str	r3, [r0, #0]
 800f2ae:	e7d6      	b.n	800f25e <_free_r+0x26>
 800f2b0:	6825      	ldr	r5, [r4, #0]
 800f2b2:	1961      	adds	r1, r4, r5
 800f2b4:	428b      	cmp	r3, r1
 800f2b6:	bf04      	itt	eq
 800f2b8:	6819      	ldreq	r1, [r3, #0]
 800f2ba:	685b      	ldreq	r3, [r3, #4]
 800f2bc:	6063      	str	r3, [r4, #4]
 800f2be:	bf04      	itt	eq
 800f2c0:	1949      	addeq	r1, r1, r5
 800f2c2:	6021      	streq	r1, [r4, #0]
 800f2c4:	6054      	str	r4, [r2, #4]
 800f2c6:	e7ca      	b.n	800f25e <_free_r+0x26>
 800f2c8:	b003      	add	sp, #12
 800f2ca:	bd30      	pop	{r4, r5, pc}
 800f2cc:	20000adc 	.word	0x20000adc

0800f2d0 <sbrk_aligned>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	4e0e      	ldr	r6, [pc, #56]	; (800f30c <sbrk_aligned+0x3c>)
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	6831      	ldr	r1, [r6, #0]
 800f2d8:	4605      	mov	r5, r0
 800f2da:	b911      	cbnz	r1, 800f2e2 <sbrk_aligned+0x12>
 800f2dc:	f000 fd9a 	bl	800fe14 <_sbrk_r>
 800f2e0:	6030      	str	r0, [r6, #0]
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f000 fd95 	bl	800fe14 <_sbrk_r>
 800f2ea:	1c43      	adds	r3, r0, #1
 800f2ec:	d00a      	beq.n	800f304 <sbrk_aligned+0x34>
 800f2ee:	1cc4      	adds	r4, r0, #3
 800f2f0:	f024 0403 	bic.w	r4, r4, #3
 800f2f4:	42a0      	cmp	r0, r4
 800f2f6:	d007      	beq.n	800f308 <sbrk_aligned+0x38>
 800f2f8:	1a21      	subs	r1, r4, r0
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f000 fd8a 	bl	800fe14 <_sbrk_r>
 800f300:	3001      	adds	r0, #1
 800f302:	d101      	bne.n	800f308 <sbrk_aligned+0x38>
 800f304:	f04f 34ff 	mov.w	r4, #4294967295
 800f308:	4620      	mov	r0, r4
 800f30a:	bd70      	pop	{r4, r5, r6, pc}
 800f30c:	20000ae0 	.word	0x20000ae0

0800f310 <_malloc_r>:
 800f310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f314:	1ccd      	adds	r5, r1, #3
 800f316:	f025 0503 	bic.w	r5, r5, #3
 800f31a:	3508      	adds	r5, #8
 800f31c:	2d0c      	cmp	r5, #12
 800f31e:	bf38      	it	cc
 800f320:	250c      	movcc	r5, #12
 800f322:	2d00      	cmp	r5, #0
 800f324:	4607      	mov	r7, r0
 800f326:	db01      	blt.n	800f32c <_malloc_r+0x1c>
 800f328:	42a9      	cmp	r1, r5
 800f32a:	d905      	bls.n	800f338 <_malloc_r+0x28>
 800f32c:	230c      	movs	r3, #12
 800f32e:	603b      	str	r3, [r7, #0]
 800f330:	2600      	movs	r6, #0
 800f332:	4630      	mov	r0, r6
 800f334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f338:	4e2e      	ldr	r6, [pc, #184]	; (800f3f4 <_malloc_r+0xe4>)
 800f33a:	f001 fdbf 	bl	8010ebc <__malloc_lock>
 800f33e:	6833      	ldr	r3, [r6, #0]
 800f340:	461c      	mov	r4, r3
 800f342:	bb34      	cbnz	r4, 800f392 <_malloc_r+0x82>
 800f344:	4629      	mov	r1, r5
 800f346:	4638      	mov	r0, r7
 800f348:	f7ff ffc2 	bl	800f2d0 <sbrk_aligned>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	4604      	mov	r4, r0
 800f350:	d14d      	bne.n	800f3ee <_malloc_r+0xde>
 800f352:	6834      	ldr	r4, [r6, #0]
 800f354:	4626      	mov	r6, r4
 800f356:	2e00      	cmp	r6, #0
 800f358:	d140      	bne.n	800f3dc <_malloc_r+0xcc>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	4631      	mov	r1, r6
 800f35e:	4638      	mov	r0, r7
 800f360:	eb04 0803 	add.w	r8, r4, r3
 800f364:	f000 fd56 	bl	800fe14 <_sbrk_r>
 800f368:	4580      	cmp	r8, r0
 800f36a:	d13a      	bne.n	800f3e2 <_malloc_r+0xd2>
 800f36c:	6821      	ldr	r1, [r4, #0]
 800f36e:	3503      	adds	r5, #3
 800f370:	1a6d      	subs	r5, r5, r1
 800f372:	f025 0503 	bic.w	r5, r5, #3
 800f376:	3508      	adds	r5, #8
 800f378:	2d0c      	cmp	r5, #12
 800f37a:	bf38      	it	cc
 800f37c:	250c      	movcc	r5, #12
 800f37e:	4629      	mov	r1, r5
 800f380:	4638      	mov	r0, r7
 800f382:	f7ff ffa5 	bl	800f2d0 <sbrk_aligned>
 800f386:	3001      	adds	r0, #1
 800f388:	d02b      	beq.n	800f3e2 <_malloc_r+0xd2>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	442b      	add	r3, r5
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	e00e      	b.n	800f3b0 <_malloc_r+0xa0>
 800f392:	6822      	ldr	r2, [r4, #0]
 800f394:	1b52      	subs	r2, r2, r5
 800f396:	d41e      	bmi.n	800f3d6 <_malloc_r+0xc6>
 800f398:	2a0b      	cmp	r2, #11
 800f39a:	d916      	bls.n	800f3ca <_malloc_r+0xba>
 800f39c:	1961      	adds	r1, r4, r5
 800f39e:	42a3      	cmp	r3, r4
 800f3a0:	6025      	str	r5, [r4, #0]
 800f3a2:	bf18      	it	ne
 800f3a4:	6059      	strne	r1, [r3, #4]
 800f3a6:	6863      	ldr	r3, [r4, #4]
 800f3a8:	bf08      	it	eq
 800f3aa:	6031      	streq	r1, [r6, #0]
 800f3ac:	5162      	str	r2, [r4, r5]
 800f3ae:	604b      	str	r3, [r1, #4]
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	f104 060b 	add.w	r6, r4, #11
 800f3b6:	f001 fd87 	bl	8010ec8 <__malloc_unlock>
 800f3ba:	f026 0607 	bic.w	r6, r6, #7
 800f3be:	1d23      	adds	r3, r4, #4
 800f3c0:	1af2      	subs	r2, r6, r3
 800f3c2:	d0b6      	beq.n	800f332 <_malloc_r+0x22>
 800f3c4:	1b9b      	subs	r3, r3, r6
 800f3c6:	50a3      	str	r3, [r4, r2]
 800f3c8:	e7b3      	b.n	800f332 <_malloc_r+0x22>
 800f3ca:	6862      	ldr	r2, [r4, #4]
 800f3cc:	42a3      	cmp	r3, r4
 800f3ce:	bf0c      	ite	eq
 800f3d0:	6032      	streq	r2, [r6, #0]
 800f3d2:	605a      	strne	r2, [r3, #4]
 800f3d4:	e7ec      	b.n	800f3b0 <_malloc_r+0xa0>
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	6864      	ldr	r4, [r4, #4]
 800f3da:	e7b2      	b.n	800f342 <_malloc_r+0x32>
 800f3dc:	4634      	mov	r4, r6
 800f3de:	6876      	ldr	r6, [r6, #4]
 800f3e0:	e7b9      	b.n	800f356 <_malloc_r+0x46>
 800f3e2:	230c      	movs	r3, #12
 800f3e4:	603b      	str	r3, [r7, #0]
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	f001 fd6e 	bl	8010ec8 <__malloc_unlock>
 800f3ec:	e7a1      	b.n	800f332 <_malloc_r+0x22>
 800f3ee:	6025      	str	r5, [r4, #0]
 800f3f0:	e7de      	b.n	800f3b0 <_malloc_r+0xa0>
 800f3f2:	bf00      	nop
 800f3f4:	20000adc 	.word	0x20000adc

0800f3f8 <__cvt>:
 800f3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3fc:	ec55 4b10 	vmov	r4, r5, d0
 800f400:	2d00      	cmp	r5, #0
 800f402:	460e      	mov	r6, r1
 800f404:	4619      	mov	r1, r3
 800f406:	462b      	mov	r3, r5
 800f408:	bfbb      	ittet	lt
 800f40a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f40e:	461d      	movlt	r5, r3
 800f410:	2300      	movge	r3, #0
 800f412:	232d      	movlt	r3, #45	; 0x2d
 800f414:	700b      	strb	r3, [r1, #0]
 800f416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f418:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f41c:	4691      	mov	r9, r2
 800f41e:	f023 0820 	bic.w	r8, r3, #32
 800f422:	bfbc      	itt	lt
 800f424:	4622      	movlt	r2, r4
 800f426:	4614      	movlt	r4, r2
 800f428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f42c:	d005      	beq.n	800f43a <__cvt+0x42>
 800f42e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f432:	d100      	bne.n	800f436 <__cvt+0x3e>
 800f434:	3601      	adds	r6, #1
 800f436:	2102      	movs	r1, #2
 800f438:	e000      	b.n	800f43c <__cvt+0x44>
 800f43a:	2103      	movs	r1, #3
 800f43c:	ab03      	add	r3, sp, #12
 800f43e:	9301      	str	r3, [sp, #4]
 800f440:	ab02      	add	r3, sp, #8
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	ec45 4b10 	vmov	d0, r4, r5
 800f448:	4653      	mov	r3, sl
 800f44a:	4632      	mov	r2, r6
 800f44c:	f000 fec4 	bl	80101d8 <_dtoa_r>
 800f450:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f454:	4607      	mov	r7, r0
 800f456:	d102      	bne.n	800f45e <__cvt+0x66>
 800f458:	f019 0f01 	tst.w	r9, #1
 800f45c:	d022      	beq.n	800f4a4 <__cvt+0xac>
 800f45e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f462:	eb07 0906 	add.w	r9, r7, r6
 800f466:	d110      	bne.n	800f48a <__cvt+0x92>
 800f468:	783b      	ldrb	r3, [r7, #0]
 800f46a:	2b30      	cmp	r3, #48	; 0x30
 800f46c:	d10a      	bne.n	800f484 <__cvt+0x8c>
 800f46e:	2200      	movs	r2, #0
 800f470:	2300      	movs	r3, #0
 800f472:	4620      	mov	r0, r4
 800f474:	4629      	mov	r1, r5
 800f476:	f7f1 fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f47a:	b918      	cbnz	r0, 800f484 <__cvt+0x8c>
 800f47c:	f1c6 0601 	rsb	r6, r6, #1
 800f480:	f8ca 6000 	str.w	r6, [sl]
 800f484:	f8da 3000 	ldr.w	r3, [sl]
 800f488:	4499      	add	r9, r3
 800f48a:	2200      	movs	r2, #0
 800f48c:	2300      	movs	r3, #0
 800f48e:	4620      	mov	r0, r4
 800f490:	4629      	mov	r1, r5
 800f492:	f7f1 fb21 	bl	8000ad8 <__aeabi_dcmpeq>
 800f496:	b108      	cbz	r0, 800f49c <__cvt+0xa4>
 800f498:	f8cd 900c 	str.w	r9, [sp, #12]
 800f49c:	2230      	movs	r2, #48	; 0x30
 800f49e:	9b03      	ldr	r3, [sp, #12]
 800f4a0:	454b      	cmp	r3, r9
 800f4a2:	d307      	bcc.n	800f4b4 <__cvt+0xbc>
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4a8:	1bdb      	subs	r3, r3, r7
 800f4aa:	4638      	mov	r0, r7
 800f4ac:	6013      	str	r3, [r2, #0]
 800f4ae:	b004      	add	sp, #16
 800f4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b4:	1c59      	adds	r1, r3, #1
 800f4b6:	9103      	str	r1, [sp, #12]
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	e7f0      	b.n	800f49e <__cvt+0xa6>

0800f4bc <__exponent>:
 800f4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2900      	cmp	r1, #0
 800f4c2:	bfb8      	it	lt
 800f4c4:	4249      	neglt	r1, r1
 800f4c6:	f803 2b02 	strb.w	r2, [r3], #2
 800f4ca:	bfb4      	ite	lt
 800f4cc:	222d      	movlt	r2, #45	; 0x2d
 800f4ce:	222b      	movge	r2, #43	; 0x2b
 800f4d0:	2909      	cmp	r1, #9
 800f4d2:	7042      	strb	r2, [r0, #1]
 800f4d4:	dd2a      	ble.n	800f52c <__exponent+0x70>
 800f4d6:	f10d 0407 	add.w	r4, sp, #7
 800f4da:	46a4      	mov	ip, r4
 800f4dc:	270a      	movs	r7, #10
 800f4de:	46a6      	mov	lr, r4
 800f4e0:	460a      	mov	r2, r1
 800f4e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800f4e6:	fb07 1516 	mls	r5, r7, r6, r1
 800f4ea:	3530      	adds	r5, #48	; 0x30
 800f4ec:	2a63      	cmp	r2, #99	; 0x63
 800f4ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800f4f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	dcf1      	bgt.n	800f4de <__exponent+0x22>
 800f4fa:	3130      	adds	r1, #48	; 0x30
 800f4fc:	f1ae 0502 	sub.w	r5, lr, #2
 800f500:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f504:	1c44      	adds	r4, r0, #1
 800f506:	4629      	mov	r1, r5
 800f508:	4561      	cmp	r1, ip
 800f50a:	d30a      	bcc.n	800f522 <__exponent+0x66>
 800f50c:	f10d 0209 	add.w	r2, sp, #9
 800f510:	eba2 020e 	sub.w	r2, r2, lr
 800f514:	4565      	cmp	r5, ip
 800f516:	bf88      	it	hi
 800f518:	2200      	movhi	r2, #0
 800f51a:	4413      	add	r3, r2
 800f51c:	1a18      	subs	r0, r3, r0
 800f51e:	b003      	add	sp, #12
 800f520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f526:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f52a:	e7ed      	b.n	800f508 <__exponent+0x4c>
 800f52c:	2330      	movs	r3, #48	; 0x30
 800f52e:	3130      	adds	r1, #48	; 0x30
 800f530:	7083      	strb	r3, [r0, #2]
 800f532:	70c1      	strb	r1, [r0, #3]
 800f534:	1d03      	adds	r3, r0, #4
 800f536:	e7f1      	b.n	800f51c <__exponent+0x60>

0800f538 <_printf_float>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	ed2d 8b02 	vpush	{d8}
 800f540:	b08d      	sub	sp, #52	; 0x34
 800f542:	460c      	mov	r4, r1
 800f544:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f548:	4616      	mov	r6, r2
 800f54a:	461f      	mov	r7, r3
 800f54c:	4605      	mov	r5, r0
 800f54e:	f001 fc31 	bl	8010db4 <_localeconv_r>
 800f552:	f8d0 a000 	ldr.w	sl, [r0]
 800f556:	4650      	mov	r0, sl
 800f558:	f7f0 fe42 	bl	80001e0 <strlen>
 800f55c:	2300      	movs	r3, #0
 800f55e:	930a      	str	r3, [sp, #40]	; 0x28
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	9305      	str	r3, [sp, #20]
 800f564:	f8d8 3000 	ldr.w	r3, [r8]
 800f568:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f56c:	3307      	adds	r3, #7
 800f56e:	f023 0307 	bic.w	r3, r3, #7
 800f572:	f103 0208 	add.w	r2, r3, #8
 800f576:	f8c8 2000 	str.w	r2, [r8]
 800f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f582:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f586:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f58a:	9307      	str	r3, [sp, #28]
 800f58c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f590:	ee08 0a10 	vmov	s16, r0
 800f594:	4b9f      	ldr	r3, [pc, #636]	; (800f814 <_printf_float+0x2dc>)
 800f596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f59a:	f04f 32ff 	mov.w	r2, #4294967295
 800f59e:	f7f1 facd 	bl	8000b3c <__aeabi_dcmpun>
 800f5a2:	bb88      	cbnz	r0, 800f608 <_printf_float+0xd0>
 800f5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5a8:	4b9a      	ldr	r3, [pc, #616]	; (800f814 <_printf_float+0x2dc>)
 800f5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ae:	f7f1 faa7 	bl	8000b00 <__aeabi_dcmple>
 800f5b2:	bb48      	cbnz	r0, 800f608 <_printf_float+0xd0>
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	f7f1 fa96 	bl	8000aec <__aeabi_dcmplt>
 800f5c0:	b110      	cbz	r0, 800f5c8 <_printf_float+0x90>
 800f5c2:	232d      	movs	r3, #45	; 0x2d
 800f5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5c8:	4b93      	ldr	r3, [pc, #588]	; (800f818 <_printf_float+0x2e0>)
 800f5ca:	4894      	ldr	r0, [pc, #592]	; (800f81c <_printf_float+0x2e4>)
 800f5cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f5d0:	bf94      	ite	ls
 800f5d2:	4698      	movls	r8, r3
 800f5d4:	4680      	movhi	r8, r0
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	6123      	str	r3, [r4, #16]
 800f5da:	9b05      	ldr	r3, [sp, #20]
 800f5dc:	f023 0204 	bic.w	r2, r3, #4
 800f5e0:	6022      	str	r2, [r4, #0]
 800f5e2:	f04f 0900 	mov.w	r9, #0
 800f5e6:	9700      	str	r7, [sp, #0]
 800f5e8:	4633      	mov	r3, r6
 800f5ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f000 f9d8 	bl	800f9a4 <_printf_common>
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	f040 8090 	bne.w	800f71a <_printf_float+0x1e2>
 800f5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fe:	b00d      	add	sp, #52	; 0x34
 800f600:	ecbd 8b02 	vpop	{d8}
 800f604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f608:	4642      	mov	r2, r8
 800f60a:	464b      	mov	r3, r9
 800f60c:	4640      	mov	r0, r8
 800f60e:	4649      	mov	r1, r9
 800f610:	f7f1 fa94 	bl	8000b3c <__aeabi_dcmpun>
 800f614:	b140      	cbz	r0, 800f628 <_printf_float+0xf0>
 800f616:	464b      	mov	r3, r9
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bfbc      	itt	lt
 800f61c:	232d      	movlt	r3, #45	; 0x2d
 800f61e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f622:	487f      	ldr	r0, [pc, #508]	; (800f820 <_printf_float+0x2e8>)
 800f624:	4b7f      	ldr	r3, [pc, #508]	; (800f824 <_printf_float+0x2ec>)
 800f626:	e7d1      	b.n	800f5cc <_printf_float+0x94>
 800f628:	6863      	ldr	r3, [r4, #4]
 800f62a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f62e:	9206      	str	r2, [sp, #24]
 800f630:	1c5a      	adds	r2, r3, #1
 800f632:	d13f      	bne.n	800f6b4 <_printf_float+0x17c>
 800f634:	2306      	movs	r3, #6
 800f636:	6063      	str	r3, [r4, #4]
 800f638:	9b05      	ldr	r3, [sp, #20]
 800f63a:	6861      	ldr	r1, [r4, #4]
 800f63c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f640:	2300      	movs	r3, #0
 800f642:	9303      	str	r3, [sp, #12]
 800f644:	ab0a      	add	r3, sp, #40	; 0x28
 800f646:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f64a:	ab09      	add	r3, sp, #36	; 0x24
 800f64c:	ec49 8b10 	vmov	d0, r8, r9
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	6022      	str	r2, [r4, #0]
 800f654:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f658:	4628      	mov	r0, r5
 800f65a:	f7ff fecd 	bl	800f3f8 <__cvt>
 800f65e:	9b06      	ldr	r3, [sp, #24]
 800f660:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f662:	2b47      	cmp	r3, #71	; 0x47
 800f664:	4680      	mov	r8, r0
 800f666:	d108      	bne.n	800f67a <_printf_float+0x142>
 800f668:	1cc8      	adds	r0, r1, #3
 800f66a:	db02      	blt.n	800f672 <_printf_float+0x13a>
 800f66c:	6863      	ldr	r3, [r4, #4]
 800f66e:	4299      	cmp	r1, r3
 800f670:	dd41      	ble.n	800f6f6 <_printf_float+0x1be>
 800f672:	f1ab 0b02 	sub.w	fp, fp, #2
 800f676:	fa5f fb8b 	uxtb.w	fp, fp
 800f67a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f67e:	d820      	bhi.n	800f6c2 <_printf_float+0x18a>
 800f680:	3901      	subs	r1, #1
 800f682:	465a      	mov	r2, fp
 800f684:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f688:	9109      	str	r1, [sp, #36]	; 0x24
 800f68a:	f7ff ff17 	bl	800f4bc <__exponent>
 800f68e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f690:	1813      	adds	r3, r2, r0
 800f692:	2a01      	cmp	r2, #1
 800f694:	4681      	mov	r9, r0
 800f696:	6123      	str	r3, [r4, #16]
 800f698:	dc02      	bgt.n	800f6a0 <_printf_float+0x168>
 800f69a:	6822      	ldr	r2, [r4, #0]
 800f69c:	07d2      	lsls	r2, r2, #31
 800f69e:	d501      	bpl.n	800f6a4 <_printf_float+0x16c>
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	6123      	str	r3, [r4, #16]
 800f6a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d09c      	beq.n	800f5e6 <_printf_float+0xae>
 800f6ac:	232d      	movs	r3, #45	; 0x2d
 800f6ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6b2:	e798      	b.n	800f5e6 <_printf_float+0xae>
 800f6b4:	9a06      	ldr	r2, [sp, #24]
 800f6b6:	2a47      	cmp	r2, #71	; 0x47
 800f6b8:	d1be      	bne.n	800f638 <_printf_float+0x100>
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1bc      	bne.n	800f638 <_printf_float+0x100>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e7b9      	b.n	800f636 <_printf_float+0xfe>
 800f6c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f6c6:	d118      	bne.n	800f6fa <_printf_float+0x1c2>
 800f6c8:	2900      	cmp	r1, #0
 800f6ca:	6863      	ldr	r3, [r4, #4]
 800f6cc:	dd0b      	ble.n	800f6e6 <_printf_float+0x1ae>
 800f6ce:	6121      	str	r1, [r4, #16]
 800f6d0:	b913      	cbnz	r3, 800f6d8 <_printf_float+0x1a0>
 800f6d2:	6822      	ldr	r2, [r4, #0]
 800f6d4:	07d0      	lsls	r0, r2, #31
 800f6d6:	d502      	bpl.n	800f6de <_printf_float+0x1a6>
 800f6d8:	3301      	adds	r3, #1
 800f6da:	440b      	add	r3, r1
 800f6dc:	6123      	str	r3, [r4, #16]
 800f6de:	65a1      	str	r1, [r4, #88]	; 0x58
 800f6e0:	f04f 0900 	mov.w	r9, #0
 800f6e4:	e7de      	b.n	800f6a4 <_printf_float+0x16c>
 800f6e6:	b913      	cbnz	r3, 800f6ee <_printf_float+0x1b6>
 800f6e8:	6822      	ldr	r2, [r4, #0]
 800f6ea:	07d2      	lsls	r2, r2, #31
 800f6ec:	d501      	bpl.n	800f6f2 <_printf_float+0x1ba>
 800f6ee:	3302      	adds	r3, #2
 800f6f0:	e7f4      	b.n	800f6dc <_printf_float+0x1a4>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e7f2      	b.n	800f6dc <_printf_float+0x1a4>
 800f6f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6fc:	4299      	cmp	r1, r3
 800f6fe:	db05      	blt.n	800f70c <_printf_float+0x1d4>
 800f700:	6823      	ldr	r3, [r4, #0]
 800f702:	6121      	str	r1, [r4, #16]
 800f704:	07d8      	lsls	r0, r3, #31
 800f706:	d5ea      	bpl.n	800f6de <_printf_float+0x1a6>
 800f708:	1c4b      	adds	r3, r1, #1
 800f70a:	e7e7      	b.n	800f6dc <_printf_float+0x1a4>
 800f70c:	2900      	cmp	r1, #0
 800f70e:	bfd4      	ite	le
 800f710:	f1c1 0202 	rsble	r2, r1, #2
 800f714:	2201      	movgt	r2, #1
 800f716:	4413      	add	r3, r2
 800f718:	e7e0      	b.n	800f6dc <_printf_float+0x1a4>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	055a      	lsls	r2, r3, #21
 800f71e:	d407      	bmi.n	800f730 <_printf_float+0x1f8>
 800f720:	6923      	ldr	r3, [r4, #16]
 800f722:	4642      	mov	r2, r8
 800f724:	4631      	mov	r1, r6
 800f726:	4628      	mov	r0, r5
 800f728:	47b8      	blx	r7
 800f72a:	3001      	adds	r0, #1
 800f72c:	d12c      	bne.n	800f788 <_printf_float+0x250>
 800f72e:	e764      	b.n	800f5fa <_printf_float+0xc2>
 800f730:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f734:	f240 80e0 	bls.w	800f8f8 <_printf_float+0x3c0>
 800f738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f73c:	2200      	movs	r2, #0
 800f73e:	2300      	movs	r3, #0
 800f740:	f7f1 f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 800f744:	2800      	cmp	r0, #0
 800f746:	d034      	beq.n	800f7b2 <_printf_float+0x27a>
 800f748:	4a37      	ldr	r2, [pc, #220]	; (800f828 <_printf_float+0x2f0>)
 800f74a:	2301      	movs	r3, #1
 800f74c:	4631      	mov	r1, r6
 800f74e:	4628      	mov	r0, r5
 800f750:	47b8      	blx	r7
 800f752:	3001      	adds	r0, #1
 800f754:	f43f af51 	beq.w	800f5fa <_printf_float+0xc2>
 800f758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f75c:	429a      	cmp	r2, r3
 800f75e:	db02      	blt.n	800f766 <_printf_float+0x22e>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	07d8      	lsls	r0, r3, #31
 800f764:	d510      	bpl.n	800f788 <_printf_float+0x250>
 800f766:	ee18 3a10 	vmov	r3, s16
 800f76a:	4652      	mov	r2, sl
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	f43f af41 	beq.w	800f5fa <_printf_float+0xc2>
 800f778:	f04f 0800 	mov.w	r8, #0
 800f77c:	f104 091a 	add.w	r9, r4, #26
 800f780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f782:	3b01      	subs	r3, #1
 800f784:	4543      	cmp	r3, r8
 800f786:	dc09      	bgt.n	800f79c <_printf_float+0x264>
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	079b      	lsls	r3, r3, #30
 800f78c:	f100 8105 	bmi.w	800f99a <_printf_float+0x462>
 800f790:	68e0      	ldr	r0, [r4, #12]
 800f792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f794:	4298      	cmp	r0, r3
 800f796:	bfb8      	it	lt
 800f798:	4618      	movlt	r0, r3
 800f79a:	e730      	b.n	800f5fe <_printf_float+0xc6>
 800f79c:	2301      	movs	r3, #1
 800f79e:	464a      	mov	r2, r9
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	47b8      	blx	r7
 800f7a6:	3001      	adds	r0, #1
 800f7a8:	f43f af27 	beq.w	800f5fa <_printf_float+0xc2>
 800f7ac:	f108 0801 	add.w	r8, r8, #1
 800f7b0:	e7e6      	b.n	800f780 <_printf_float+0x248>
 800f7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dc39      	bgt.n	800f82c <_printf_float+0x2f4>
 800f7b8:	4a1b      	ldr	r2, [pc, #108]	; (800f828 <_printf_float+0x2f0>)
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4628      	mov	r0, r5
 800f7c0:	47b8      	blx	r7
 800f7c2:	3001      	adds	r0, #1
 800f7c4:	f43f af19 	beq.w	800f5fa <_printf_float+0xc2>
 800f7c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	d102      	bne.n	800f7d6 <_printf_float+0x29e>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	07d9      	lsls	r1, r3, #31
 800f7d4:	d5d8      	bpl.n	800f788 <_printf_float+0x250>
 800f7d6:	ee18 3a10 	vmov	r3, s16
 800f7da:	4652      	mov	r2, sl
 800f7dc:	4631      	mov	r1, r6
 800f7de:	4628      	mov	r0, r5
 800f7e0:	47b8      	blx	r7
 800f7e2:	3001      	adds	r0, #1
 800f7e4:	f43f af09 	beq.w	800f5fa <_printf_float+0xc2>
 800f7e8:	f04f 0900 	mov.w	r9, #0
 800f7ec:	f104 0a1a 	add.w	sl, r4, #26
 800f7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f2:	425b      	negs	r3, r3
 800f7f4:	454b      	cmp	r3, r9
 800f7f6:	dc01      	bgt.n	800f7fc <_printf_float+0x2c4>
 800f7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7fa:	e792      	b.n	800f722 <_printf_float+0x1ea>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	4652      	mov	r2, sl
 800f800:	4631      	mov	r1, r6
 800f802:	4628      	mov	r0, r5
 800f804:	47b8      	blx	r7
 800f806:	3001      	adds	r0, #1
 800f808:	f43f aef7 	beq.w	800f5fa <_printf_float+0xc2>
 800f80c:	f109 0901 	add.w	r9, r9, #1
 800f810:	e7ee      	b.n	800f7f0 <_printf_float+0x2b8>
 800f812:	bf00      	nop
 800f814:	7fefffff 	.word	0x7fefffff
 800f818:	08012100 	.word	0x08012100
 800f81c:	08012104 	.word	0x08012104
 800f820:	0801210c 	.word	0x0801210c
 800f824:	08012108 	.word	0x08012108
 800f828:	08012110 	.word	0x08012110
 800f82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f82e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f830:	429a      	cmp	r2, r3
 800f832:	bfa8      	it	ge
 800f834:	461a      	movge	r2, r3
 800f836:	2a00      	cmp	r2, #0
 800f838:	4691      	mov	r9, r2
 800f83a:	dc37      	bgt.n	800f8ac <_printf_float+0x374>
 800f83c:	f04f 0b00 	mov.w	fp, #0
 800f840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f844:	f104 021a 	add.w	r2, r4, #26
 800f848:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f84a:	9305      	str	r3, [sp, #20]
 800f84c:	eba3 0309 	sub.w	r3, r3, r9
 800f850:	455b      	cmp	r3, fp
 800f852:	dc33      	bgt.n	800f8bc <_printf_float+0x384>
 800f854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f858:	429a      	cmp	r2, r3
 800f85a:	db3b      	blt.n	800f8d4 <_printf_float+0x39c>
 800f85c:	6823      	ldr	r3, [r4, #0]
 800f85e:	07da      	lsls	r2, r3, #31
 800f860:	d438      	bmi.n	800f8d4 <_printf_float+0x39c>
 800f862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f864:	9a05      	ldr	r2, [sp, #20]
 800f866:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f868:	1a9a      	subs	r2, r3, r2
 800f86a:	eba3 0901 	sub.w	r9, r3, r1
 800f86e:	4591      	cmp	r9, r2
 800f870:	bfa8      	it	ge
 800f872:	4691      	movge	r9, r2
 800f874:	f1b9 0f00 	cmp.w	r9, #0
 800f878:	dc35      	bgt.n	800f8e6 <_printf_float+0x3ae>
 800f87a:	f04f 0800 	mov.w	r8, #0
 800f87e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f882:	f104 0a1a 	add.w	sl, r4, #26
 800f886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f88a:	1a9b      	subs	r3, r3, r2
 800f88c:	eba3 0309 	sub.w	r3, r3, r9
 800f890:	4543      	cmp	r3, r8
 800f892:	f77f af79 	ble.w	800f788 <_printf_float+0x250>
 800f896:	2301      	movs	r3, #1
 800f898:	4652      	mov	r2, sl
 800f89a:	4631      	mov	r1, r6
 800f89c:	4628      	mov	r0, r5
 800f89e:	47b8      	blx	r7
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	f43f aeaa 	beq.w	800f5fa <_printf_float+0xc2>
 800f8a6:	f108 0801 	add.w	r8, r8, #1
 800f8aa:	e7ec      	b.n	800f886 <_printf_float+0x34e>
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	4631      	mov	r1, r6
 800f8b0:	4642      	mov	r2, r8
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	47b8      	blx	r7
 800f8b6:	3001      	adds	r0, #1
 800f8b8:	d1c0      	bne.n	800f83c <_printf_float+0x304>
 800f8ba:	e69e      	b.n	800f5fa <_printf_float+0xc2>
 800f8bc:	2301      	movs	r3, #1
 800f8be:	4631      	mov	r1, r6
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	9205      	str	r2, [sp, #20]
 800f8c4:	47b8      	blx	r7
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	f43f ae97 	beq.w	800f5fa <_printf_float+0xc2>
 800f8cc:	9a05      	ldr	r2, [sp, #20]
 800f8ce:	f10b 0b01 	add.w	fp, fp, #1
 800f8d2:	e7b9      	b.n	800f848 <_printf_float+0x310>
 800f8d4:	ee18 3a10 	vmov	r3, s16
 800f8d8:	4652      	mov	r2, sl
 800f8da:	4631      	mov	r1, r6
 800f8dc:	4628      	mov	r0, r5
 800f8de:	47b8      	blx	r7
 800f8e0:	3001      	adds	r0, #1
 800f8e2:	d1be      	bne.n	800f862 <_printf_float+0x32a>
 800f8e4:	e689      	b.n	800f5fa <_printf_float+0xc2>
 800f8e6:	9a05      	ldr	r2, [sp, #20]
 800f8e8:	464b      	mov	r3, r9
 800f8ea:	4442      	add	r2, r8
 800f8ec:	4631      	mov	r1, r6
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	47b8      	blx	r7
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	d1c1      	bne.n	800f87a <_printf_float+0x342>
 800f8f6:	e680      	b.n	800f5fa <_printf_float+0xc2>
 800f8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8fa:	2a01      	cmp	r2, #1
 800f8fc:	dc01      	bgt.n	800f902 <_printf_float+0x3ca>
 800f8fe:	07db      	lsls	r3, r3, #31
 800f900:	d538      	bpl.n	800f974 <_printf_float+0x43c>
 800f902:	2301      	movs	r3, #1
 800f904:	4642      	mov	r2, r8
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	47b8      	blx	r7
 800f90c:	3001      	adds	r0, #1
 800f90e:	f43f ae74 	beq.w	800f5fa <_printf_float+0xc2>
 800f912:	ee18 3a10 	vmov	r3, s16
 800f916:	4652      	mov	r2, sl
 800f918:	4631      	mov	r1, r6
 800f91a:	4628      	mov	r0, r5
 800f91c:	47b8      	blx	r7
 800f91e:	3001      	adds	r0, #1
 800f920:	f43f ae6b 	beq.w	800f5fa <_printf_float+0xc2>
 800f924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f928:	2200      	movs	r2, #0
 800f92a:	2300      	movs	r3, #0
 800f92c:	f7f1 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f930:	b9d8      	cbnz	r0, 800f96a <_printf_float+0x432>
 800f932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f934:	f108 0201 	add.w	r2, r8, #1
 800f938:	3b01      	subs	r3, #1
 800f93a:	4631      	mov	r1, r6
 800f93c:	4628      	mov	r0, r5
 800f93e:	47b8      	blx	r7
 800f940:	3001      	adds	r0, #1
 800f942:	d10e      	bne.n	800f962 <_printf_float+0x42a>
 800f944:	e659      	b.n	800f5fa <_printf_float+0xc2>
 800f946:	2301      	movs	r3, #1
 800f948:	4652      	mov	r2, sl
 800f94a:	4631      	mov	r1, r6
 800f94c:	4628      	mov	r0, r5
 800f94e:	47b8      	blx	r7
 800f950:	3001      	adds	r0, #1
 800f952:	f43f ae52 	beq.w	800f5fa <_printf_float+0xc2>
 800f956:	f108 0801 	add.w	r8, r8, #1
 800f95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f95c:	3b01      	subs	r3, #1
 800f95e:	4543      	cmp	r3, r8
 800f960:	dcf1      	bgt.n	800f946 <_printf_float+0x40e>
 800f962:	464b      	mov	r3, r9
 800f964:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f968:	e6dc      	b.n	800f724 <_printf_float+0x1ec>
 800f96a:	f04f 0800 	mov.w	r8, #0
 800f96e:	f104 0a1a 	add.w	sl, r4, #26
 800f972:	e7f2      	b.n	800f95a <_printf_float+0x422>
 800f974:	2301      	movs	r3, #1
 800f976:	4642      	mov	r2, r8
 800f978:	e7df      	b.n	800f93a <_printf_float+0x402>
 800f97a:	2301      	movs	r3, #1
 800f97c:	464a      	mov	r2, r9
 800f97e:	4631      	mov	r1, r6
 800f980:	4628      	mov	r0, r5
 800f982:	47b8      	blx	r7
 800f984:	3001      	adds	r0, #1
 800f986:	f43f ae38 	beq.w	800f5fa <_printf_float+0xc2>
 800f98a:	f108 0801 	add.w	r8, r8, #1
 800f98e:	68e3      	ldr	r3, [r4, #12]
 800f990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f992:	1a5b      	subs	r3, r3, r1
 800f994:	4543      	cmp	r3, r8
 800f996:	dcf0      	bgt.n	800f97a <_printf_float+0x442>
 800f998:	e6fa      	b.n	800f790 <_printf_float+0x258>
 800f99a:	f04f 0800 	mov.w	r8, #0
 800f99e:	f104 0919 	add.w	r9, r4, #25
 800f9a2:	e7f4      	b.n	800f98e <_printf_float+0x456>

0800f9a4 <_printf_common>:
 800f9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9a8:	4616      	mov	r6, r2
 800f9aa:	4699      	mov	r9, r3
 800f9ac:	688a      	ldr	r2, [r1, #8]
 800f9ae:	690b      	ldr	r3, [r1, #16]
 800f9b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	bfb8      	it	lt
 800f9b8:	4613      	movlt	r3, r2
 800f9ba:	6033      	str	r3, [r6, #0]
 800f9bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9c0:	4607      	mov	r7, r0
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	b10a      	cbz	r2, 800f9ca <_printf_common+0x26>
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	6033      	str	r3, [r6, #0]
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	0699      	lsls	r1, r3, #26
 800f9ce:	bf42      	ittt	mi
 800f9d0:	6833      	ldrmi	r3, [r6, #0]
 800f9d2:	3302      	addmi	r3, #2
 800f9d4:	6033      	strmi	r3, [r6, #0]
 800f9d6:	6825      	ldr	r5, [r4, #0]
 800f9d8:	f015 0506 	ands.w	r5, r5, #6
 800f9dc:	d106      	bne.n	800f9ec <_printf_common+0x48>
 800f9de:	f104 0a19 	add.w	sl, r4, #25
 800f9e2:	68e3      	ldr	r3, [r4, #12]
 800f9e4:	6832      	ldr	r2, [r6, #0]
 800f9e6:	1a9b      	subs	r3, r3, r2
 800f9e8:	42ab      	cmp	r3, r5
 800f9ea:	dc26      	bgt.n	800fa3a <_printf_common+0x96>
 800f9ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9f0:	1e13      	subs	r3, r2, #0
 800f9f2:	6822      	ldr	r2, [r4, #0]
 800f9f4:	bf18      	it	ne
 800f9f6:	2301      	movne	r3, #1
 800f9f8:	0692      	lsls	r2, r2, #26
 800f9fa:	d42b      	bmi.n	800fa54 <_printf_common+0xb0>
 800f9fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa00:	4649      	mov	r1, r9
 800fa02:	4638      	mov	r0, r7
 800fa04:	47c0      	blx	r8
 800fa06:	3001      	adds	r0, #1
 800fa08:	d01e      	beq.n	800fa48 <_printf_common+0xa4>
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	68e5      	ldr	r5, [r4, #12]
 800fa0e:	6832      	ldr	r2, [r6, #0]
 800fa10:	f003 0306 	and.w	r3, r3, #6
 800fa14:	2b04      	cmp	r3, #4
 800fa16:	bf08      	it	eq
 800fa18:	1aad      	subeq	r5, r5, r2
 800fa1a:	68a3      	ldr	r3, [r4, #8]
 800fa1c:	6922      	ldr	r2, [r4, #16]
 800fa1e:	bf0c      	ite	eq
 800fa20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa24:	2500      	movne	r5, #0
 800fa26:	4293      	cmp	r3, r2
 800fa28:	bfc4      	itt	gt
 800fa2a:	1a9b      	subgt	r3, r3, r2
 800fa2c:	18ed      	addgt	r5, r5, r3
 800fa2e:	2600      	movs	r6, #0
 800fa30:	341a      	adds	r4, #26
 800fa32:	42b5      	cmp	r5, r6
 800fa34:	d11a      	bne.n	800fa6c <_printf_common+0xc8>
 800fa36:	2000      	movs	r0, #0
 800fa38:	e008      	b.n	800fa4c <_printf_common+0xa8>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	4652      	mov	r2, sl
 800fa3e:	4649      	mov	r1, r9
 800fa40:	4638      	mov	r0, r7
 800fa42:	47c0      	blx	r8
 800fa44:	3001      	adds	r0, #1
 800fa46:	d103      	bne.n	800fa50 <_printf_common+0xac>
 800fa48:	f04f 30ff 	mov.w	r0, #4294967295
 800fa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa50:	3501      	adds	r5, #1
 800fa52:	e7c6      	b.n	800f9e2 <_printf_common+0x3e>
 800fa54:	18e1      	adds	r1, r4, r3
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	2030      	movs	r0, #48	; 0x30
 800fa5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa5e:	4422      	add	r2, r4
 800fa60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa68:	3302      	adds	r3, #2
 800fa6a:	e7c7      	b.n	800f9fc <_printf_common+0x58>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	4622      	mov	r2, r4
 800fa70:	4649      	mov	r1, r9
 800fa72:	4638      	mov	r0, r7
 800fa74:	47c0      	blx	r8
 800fa76:	3001      	adds	r0, #1
 800fa78:	d0e6      	beq.n	800fa48 <_printf_common+0xa4>
 800fa7a:	3601      	adds	r6, #1
 800fa7c:	e7d9      	b.n	800fa32 <_printf_common+0x8e>
	...

0800fa80 <_printf_i>:
 800fa80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa84:	7e0f      	ldrb	r7, [r1, #24]
 800fa86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa88:	2f78      	cmp	r7, #120	; 0x78
 800fa8a:	4691      	mov	r9, r2
 800fa8c:	4680      	mov	r8, r0
 800fa8e:	460c      	mov	r4, r1
 800fa90:	469a      	mov	sl, r3
 800fa92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa96:	d807      	bhi.n	800faa8 <_printf_i+0x28>
 800fa98:	2f62      	cmp	r7, #98	; 0x62
 800fa9a:	d80a      	bhi.n	800fab2 <_printf_i+0x32>
 800fa9c:	2f00      	cmp	r7, #0
 800fa9e:	f000 80d8 	beq.w	800fc52 <_printf_i+0x1d2>
 800faa2:	2f58      	cmp	r7, #88	; 0x58
 800faa4:	f000 80a3 	beq.w	800fbee <_printf_i+0x16e>
 800faa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fab0:	e03a      	b.n	800fb28 <_printf_i+0xa8>
 800fab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fab6:	2b15      	cmp	r3, #21
 800fab8:	d8f6      	bhi.n	800faa8 <_printf_i+0x28>
 800faba:	a101      	add	r1, pc, #4	; (adr r1, 800fac0 <_printf_i+0x40>)
 800fabc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fac0:	0800fb19 	.word	0x0800fb19
 800fac4:	0800fb2d 	.word	0x0800fb2d
 800fac8:	0800faa9 	.word	0x0800faa9
 800facc:	0800faa9 	.word	0x0800faa9
 800fad0:	0800faa9 	.word	0x0800faa9
 800fad4:	0800faa9 	.word	0x0800faa9
 800fad8:	0800fb2d 	.word	0x0800fb2d
 800fadc:	0800faa9 	.word	0x0800faa9
 800fae0:	0800faa9 	.word	0x0800faa9
 800fae4:	0800faa9 	.word	0x0800faa9
 800fae8:	0800faa9 	.word	0x0800faa9
 800faec:	0800fc39 	.word	0x0800fc39
 800faf0:	0800fb5d 	.word	0x0800fb5d
 800faf4:	0800fc1b 	.word	0x0800fc1b
 800faf8:	0800faa9 	.word	0x0800faa9
 800fafc:	0800faa9 	.word	0x0800faa9
 800fb00:	0800fc5b 	.word	0x0800fc5b
 800fb04:	0800faa9 	.word	0x0800faa9
 800fb08:	0800fb5d 	.word	0x0800fb5d
 800fb0c:	0800faa9 	.word	0x0800faa9
 800fb10:	0800faa9 	.word	0x0800faa9
 800fb14:	0800fc23 	.word	0x0800fc23
 800fb18:	682b      	ldr	r3, [r5, #0]
 800fb1a:	1d1a      	adds	r2, r3, #4
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	602a      	str	r2, [r5, #0]
 800fb20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e0a3      	b.n	800fc74 <_printf_i+0x1f4>
 800fb2c:	6820      	ldr	r0, [r4, #0]
 800fb2e:	6829      	ldr	r1, [r5, #0]
 800fb30:	0606      	lsls	r6, r0, #24
 800fb32:	f101 0304 	add.w	r3, r1, #4
 800fb36:	d50a      	bpl.n	800fb4e <_printf_i+0xce>
 800fb38:	680e      	ldr	r6, [r1, #0]
 800fb3a:	602b      	str	r3, [r5, #0]
 800fb3c:	2e00      	cmp	r6, #0
 800fb3e:	da03      	bge.n	800fb48 <_printf_i+0xc8>
 800fb40:	232d      	movs	r3, #45	; 0x2d
 800fb42:	4276      	negs	r6, r6
 800fb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb48:	485e      	ldr	r0, [pc, #376]	; (800fcc4 <_printf_i+0x244>)
 800fb4a:	230a      	movs	r3, #10
 800fb4c:	e019      	b.n	800fb82 <_printf_i+0x102>
 800fb4e:	680e      	ldr	r6, [r1, #0]
 800fb50:	602b      	str	r3, [r5, #0]
 800fb52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb56:	bf18      	it	ne
 800fb58:	b236      	sxthne	r6, r6
 800fb5a:	e7ef      	b.n	800fb3c <_printf_i+0xbc>
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	6820      	ldr	r0, [r4, #0]
 800fb60:	1d19      	adds	r1, r3, #4
 800fb62:	6029      	str	r1, [r5, #0]
 800fb64:	0601      	lsls	r1, r0, #24
 800fb66:	d501      	bpl.n	800fb6c <_printf_i+0xec>
 800fb68:	681e      	ldr	r6, [r3, #0]
 800fb6a:	e002      	b.n	800fb72 <_printf_i+0xf2>
 800fb6c:	0646      	lsls	r6, r0, #25
 800fb6e:	d5fb      	bpl.n	800fb68 <_printf_i+0xe8>
 800fb70:	881e      	ldrh	r6, [r3, #0]
 800fb72:	4854      	ldr	r0, [pc, #336]	; (800fcc4 <_printf_i+0x244>)
 800fb74:	2f6f      	cmp	r7, #111	; 0x6f
 800fb76:	bf0c      	ite	eq
 800fb78:	2308      	moveq	r3, #8
 800fb7a:	230a      	movne	r3, #10
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb82:	6865      	ldr	r5, [r4, #4]
 800fb84:	60a5      	str	r5, [r4, #8]
 800fb86:	2d00      	cmp	r5, #0
 800fb88:	bfa2      	ittt	ge
 800fb8a:	6821      	ldrge	r1, [r4, #0]
 800fb8c:	f021 0104 	bicge.w	r1, r1, #4
 800fb90:	6021      	strge	r1, [r4, #0]
 800fb92:	b90e      	cbnz	r6, 800fb98 <_printf_i+0x118>
 800fb94:	2d00      	cmp	r5, #0
 800fb96:	d04d      	beq.n	800fc34 <_printf_i+0x1b4>
 800fb98:	4615      	mov	r5, r2
 800fb9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb9e:	fb03 6711 	mls	r7, r3, r1, r6
 800fba2:	5dc7      	ldrb	r7, [r0, r7]
 800fba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fba8:	4637      	mov	r7, r6
 800fbaa:	42bb      	cmp	r3, r7
 800fbac:	460e      	mov	r6, r1
 800fbae:	d9f4      	bls.n	800fb9a <_printf_i+0x11a>
 800fbb0:	2b08      	cmp	r3, #8
 800fbb2:	d10b      	bne.n	800fbcc <_printf_i+0x14c>
 800fbb4:	6823      	ldr	r3, [r4, #0]
 800fbb6:	07de      	lsls	r6, r3, #31
 800fbb8:	d508      	bpl.n	800fbcc <_printf_i+0x14c>
 800fbba:	6923      	ldr	r3, [r4, #16]
 800fbbc:	6861      	ldr	r1, [r4, #4]
 800fbbe:	4299      	cmp	r1, r3
 800fbc0:	bfde      	ittt	le
 800fbc2:	2330      	movle	r3, #48	; 0x30
 800fbc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbcc:	1b52      	subs	r2, r2, r5
 800fbce:	6122      	str	r2, [r4, #16]
 800fbd0:	f8cd a000 	str.w	sl, [sp]
 800fbd4:	464b      	mov	r3, r9
 800fbd6:	aa03      	add	r2, sp, #12
 800fbd8:	4621      	mov	r1, r4
 800fbda:	4640      	mov	r0, r8
 800fbdc:	f7ff fee2 	bl	800f9a4 <_printf_common>
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d14c      	bne.n	800fc7e <_printf_i+0x1fe>
 800fbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe8:	b004      	add	sp, #16
 800fbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbee:	4835      	ldr	r0, [pc, #212]	; (800fcc4 <_printf_i+0x244>)
 800fbf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fbf4:	6829      	ldr	r1, [r5, #0]
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbfc:	6029      	str	r1, [r5, #0]
 800fbfe:	061d      	lsls	r5, r3, #24
 800fc00:	d514      	bpl.n	800fc2c <_printf_i+0x1ac>
 800fc02:	07df      	lsls	r7, r3, #31
 800fc04:	bf44      	itt	mi
 800fc06:	f043 0320 	orrmi.w	r3, r3, #32
 800fc0a:	6023      	strmi	r3, [r4, #0]
 800fc0c:	b91e      	cbnz	r6, 800fc16 <_printf_i+0x196>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	f023 0320 	bic.w	r3, r3, #32
 800fc14:	6023      	str	r3, [r4, #0]
 800fc16:	2310      	movs	r3, #16
 800fc18:	e7b0      	b.n	800fb7c <_printf_i+0xfc>
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	f043 0320 	orr.w	r3, r3, #32
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	2378      	movs	r3, #120	; 0x78
 800fc24:	4828      	ldr	r0, [pc, #160]	; (800fcc8 <_printf_i+0x248>)
 800fc26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc2a:	e7e3      	b.n	800fbf4 <_printf_i+0x174>
 800fc2c:	0659      	lsls	r1, r3, #25
 800fc2e:	bf48      	it	mi
 800fc30:	b2b6      	uxthmi	r6, r6
 800fc32:	e7e6      	b.n	800fc02 <_printf_i+0x182>
 800fc34:	4615      	mov	r5, r2
 800fc36:	e7bb      	b.n	800fbb0 <_printf_i+0x130>
 800fc38:	682b      	ldr	r3, [r5, #0]
 800fc3a:	6826      	ldr	r6, [r4, #0]
 800fc3c:	6961      	ldr	r1, [r4, #20]
 800fc3e:	1d18      	adds	r0, r3, #4
 800fc40:	6028      	str	r0, [r5, #0]
 800fc42:	0635      	lsls	r5, r6, #24
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	d501      	bpl.n	800fc4c <_printf_i+0x1cc>
 800fc48:	6019      	str	r1, [r3, #0]
 800fc4a:	e002      	b.n	800fc52 <_printf_i+0x1d2>
 800fc4c:	0670      	lsls	r0, r6, #25
 800fc4e:	d5fb      	bpl.n	800fc48 <_printf_i+0x1c8>
 800fc50:	8019      	strh	r1, [r3, #0]
 800fc52:	2300      	movs	r3, #0
 800fc54:	6123      	str	r3, [r4, #16]
 800fc56:	4615      	mov	r5, r2
 800fc58:	e7ba      	b.n	800fbd0 <_printf_i+0x150>
 800fc5a:	682b      	ldr	r3, [r5, #0]
 800fc5c:	1d1a      	adds	r2, r3, #4
 800fc5e:	602a      	str	r2, [r5, #0]
 800fc60:	681d      	ldr	r5, [r3, #0]
 800fc62:	6862      	ldr	r2, [r4, #4]
 800fc64:	2100      	movs	r1, #0
 800fc66:	4628      	mov	r0, r5
 800fc68:	f7f0 fac2 	bl	80001f0 <memchr>
 800fc6c:	b108      	cbz	r0, 800fc72 <_printf_i+0x1f2>
 800fc6e:	1b40      	subs	r0, r0, r5
 800fc70:	6060      	str	r0, [r4, #4]
 800fc72:	6863      	ldr	r3, [r4, #4]
 800fc74:	6123      	str	r3, [r4, #16]
 800fc76:	2300      	movs	r3, #0
 800fc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc7c:	e7a8      	b.n	800fbd0 <_printf_i+0x150>
 800fc7e:	6923      	ldr	r3, [r4, #16]
 800fc80:	462a      	mov	r2, r5
 800fc82:	4649      	mov	r1, r9
 800fc84:	4640      	mov	r0, r8
 800fc86:	47d0      	blx	sl
 800fc88:	3001      	adds	r0, #1
 800fc8a:	d0ab      	beq.n	800fbe4 <_printf_i+0x164>
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	079b      	lsls	r3, r3, #30
 800fc90:	d413      	bmi.n	800fcba <_printf_i+0x23a>
 800fc92:	68e0      	ldr	r0, [r4, #12]
 800fc94:	9b03      	ldr	r3, [sp, #12]
 800fc96:	4298      	cmp	r0, r3
 800fc98:	bfb8      	it	lt
 800fc9a:	4618      	movlt	r0, r3
 800fc9c:	e7a4      	b.n	800fbe8 <_printf_i+0x168>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	4632      	mov	r2, r6
 800fca2:	4649      	mov	r1, r9
 800fca4:	4640      	mov	r0, r8
 800fca6:	47d0      	blx	sl
 800fca8:	3001      	adds	r0, #1
 800fcaa:	d09b      	beq.n	800fbe4 <_printf_i+0x164>
 800fcac:	3501      	adds	r5, #1
 800fcae:	68e3      	ldr	r3, [r4, #12]
 800fcb0:	9903      	ldr	r1, [sp, #12]
 800fcb2:	1a5b      	subs	r3, r3, r1
 800fcb4:	42ab      	cmp	r3, r5
 800fcb6:	dcf2      	bgt.n	800fc9e <_printf_i+0x21e>
 800fcb8:	e7eb      	b.n	800fc92 <_printf_i+0x212>
 800fcba:	2500      	movs	r5, #0
 800fcbc:	f104 0619 	add.w	r6, r4, #25
 800fcc0:	e7f5      	b.n	800fcae <_printf_i+0x22e>
 800fcc2:	bf00      	nop
 800fcc4:	08012112 	.word	0x08012112
 800fcc8:	08012123 	.word	0x08012123

0800fccc <iprintf>:
 800fccc:	b40f      	push	{r0, r1, r2, r3}
 800fcce:	4b0a      	ldr	r3, [pc, #40]	; (800fcf8 <iprintf+0x2c>)
 800fcd0:	b513      	push	{r0, r1, r4, lr}
 800fcd2:	681c      	ldr	r4, [r3, #0]
 800fcd4:	b124      	cbz	r4, 800fce0 <iprintf+0x14>
 800fcd6:	69a3      	ldr	r3, [r4, #24]
 800fcd8:	b913      	cbnz	r3, 800fce0 <iprintf+0x14>
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f7ff f9d0 	bl	800f080 <__sinit>
 800fce0:	ab05      	add	r3, sp, #20
 800fce2:	9a04      	ldr	r2, [sp, #16]
 800fce4:	68a1      	ldr	r1, [r4, #8]
 800fce6:	9301      	str	r3, [sp, #4]
 800fce8:	4620      	mov	r0, r4
 800fcea:	f001 fe13 	bl	8011914 <_vfiprintf_r>
 800fcee:	b002      	add	sp, #8
 800fcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf4:	b004      	add	sp, #16
 800fcf6:	4770      	bx	lr
 800fcf8:	200001a0 	.word	0x200001a0

0800fcfc <putchar>:
 800fcfc:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <putchar+0x28>)
 800fcfe:	b513      	push	{r0, r1, r4, lr}
 800fd00:	681c      	ldr	r4, [r3, #0]
 800fd02:	4601      	mov	r1, r0
 800fd04:	b134      	cbz	r4, 800fd14 <putchar+0x18>
 800fd06:	69a3      	ldr	r3, [r4, #24]
 800fd08:	b923      	cbnz	r3, 800fd14 <putchar+0x18>
 800fd0a:	9001      	str	r0, [sp, #4]
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f7ff f9b7 	bl	800f080 <__sinit>
 800fd12:	9901      	ldr	r1, [sp, #4]
 800fd14:	68a2      	ldr	r2, [r4, #8]
 800fd16:	4620      	mov	r0, r4
 800fd18:	b002      	add	sp, #8
 800fd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd1e:	f001 bf29 	b.w	8011b74 <_putc_r>
 800fd22:	bf00      	nop
 800fd24:	200001a0 	.word	0x200001a0

0800fd28 <_puts_r>:
 800fd28:	b570      	push	{r4, r5, r6, lr}
 800fd2a:	460e      	mov	r6, r1
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	b118      	cbz	r0, 800fd38 <_puts_r+0x10>
 800fd30:	6983      	ldr	r3, [r0, #24]
 800fd32:	b90b      	cbnz	r3, 800fd38 <_puts_r+0x10>
 800fd34:	f7ff f9a4 	bl	800f080 <__sinit>
 800fd38:	69ab      	ldr	r3, [r5, #24]
 800fd3a:	68ac      	ldr	r4, [r5, #8]
 800fd3c:	b913      	cbnz	r3, 800fd44 <_puts_r+0x1c>
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f7ff f99e 	bl	800f080 <__sinit>
 800fd44:	4b2c      	ldr	r3, [pc, #176]	; (800fdf8 <_puts_r+0xd0>)
 800fd46:	429c      	cmp	r4, r3
 800fd48:	d120      	bne.n	800fd8c <_puts_r+0x64>
 800fd4a:	686c      	ldr	r4, [r5, #4]
 800fd4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd4e:	07db      	lsls	r3, r3, #31
 800fd50:	d405      	bmi.n	800fd5e <_puts_r+0x36>
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	0598      	lsls	r0, r3, #22
 800fd56:	d402      	bmi.n	800fd5e <_puts_r+0x36>
 800fd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd5a:	f7ff fa54 	bl	800f206 <__retarget_lock_acquire_recursive>
 800fd5e:	89a3      	ldrh	r3, [r4, #12]
 800fd60:	0719      	lsls	r1, r3, #28
 800fd62:	d51d      	bpl.n	800fda0 <_puts_r+0x78>
 800fd64:	6923      	ldr	r3, [r4, #16]
 800fd66:	b1db      	cbz	r3, 800fda0 <_puts_r+0x78>
 800fd68:	3e01      	subs	r6, #1
 800fd6a:	68a3      	ldr	r3, [r4, #8]
 800fd6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd70:	3b01      	subs	r3, #1
 800fd72:	60a3      	str	r3, [r4, #8]
 800fd74:	bb39      	cbnz	r1, 800fdc6 <_puts_r+0x9e>
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	da38      	bge.n	800fdec <_puts_r+0xc4>
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	210a      	movs	r1, #10
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f000 f8bc 	bl	800fefc <__swbuf_r>
 800fd84:	3001      	adds	r0, #1
 800fd86:	d011      	beq.n	800fdac <_puts_r+0x84>
 800fd88:	250a      	movs	r5, #10
 800fd8a:	e011      	b.n	800fdb0 <_puts_r+0x88>
 800fd8c:	4b1b      	ldr	r3, [pc, #108]	; (800fdfc <_puts_r+0xd4>)
 800fd8e:	429c      	cmp	r4, r3
 800fd90:	d101      	bne.n	800fd96 <_puts_r+0x6e>
 800fd92:	68ac      	ldr	r4, [r5, #8]
 800fd94:	e7da      	b.n	800fd4c <_puts_r+0x24>
 800fd96:	4b1a      	ldr	r3, [pc, #104]	; (800fe00 <_puts_r+0xd8>)
 800fd98:	429c      	cmp	r4, r3
 800fd9a:	bf08      	it	eq
 800fd9c:	68ec      	ldreq	r4, [r5, #12]
 800fd9e:	e7d5      	b.n	800fd4c <_puts_r+0x24>
 800fda0:	4621      	mov	r1, r4
 800fda2:	4628      	mov	r0, r5
 800fda4:	f000 f90e 	bl	800ffc4 <__swsetup_r>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d0dd      	beq.n	800fd68 <_puts_r+0x40>
 800fdac:	f04f 35ff 	mov.w	r5, #4294967295
 800fdb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdb2:	07da      	lsls	r2, r3, #31
 800fdb4:	d405      	bmi.n	800fdc2 <_puts_r+0x9a>
 800fdb6:	89a3      	ldrh	r3, [r4, #12]
 800fdb8:	059b      	lsls	r3, r3, #22
 800fdba:	d402      	bmi.n	800fdc2 <_puts_r+0x9a>
 800fdbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdbe:	f7ff fa23 	bl	800f208 <__retarget_lock_release_recursive>
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	bd70      	pop	{r4, r5, r6, pc}
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	da04      	bge.n	800fdd4 <_puts_r+0xac>
 800fdca:	69a2      	ldr	r2, [r4, #24]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	dc06      	bgt.n	800fdde <_puts_r+0xb6>
 800fdd0:	290a      	cmp	r1, #10
 800fdd2:	d004      	beq.n	800fdde <_puts_r+0xb6>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	6022      	str	r2, [r4, #0]
 800fdda:	7019      	strb	r1, [r3, #0]
 800fddc:	e7c5      	b.n	800fd6a <_puts_r+0x42>
 800fdde:	4622      	mov	r2, r4
 800fde0:	4628      	mov	r0, r5
 800fde2:	f000 f88b 	bl	800fefc <__swbuf_r>
 800fde6:	3001      	adds	r0, #1
 800fde8:	d1bf      	bne.n	800fd6a <_puts_r+0x42>
 800fdea:	e7df      	b.n	800fdac <_puts_r+0x84>
 800fdec:	6823      	ldr	r3, [r4, #0]
 800fdee:	250a      	movs	r5, #10
 800fdf0:	1c5a      	adds	r2, r3, #1
 800fdf2:	6022      	str	r2, [r4, #0]
 800fdf4:	701d      	strb	r5, [r3, #0]
 800fdf6:	e7db      	b.n	800fdb0 <_puts_r+0x88>
 800fdf8:	080120bc 	.word	0x080120bc
 800fdfc:	080120dc 	.word	0x080120dc
 800fe00:	0801209c 	.word	0x0801209c

0800fe04 <puts>:
 800fe04:	4b02      	ldr	r3, [pc, #8]	; (800fe10 <puts+0xc>)
 800fe06:	4601      	mov	r1, r0
 800fe08:	6818      	ldr	r0, [r3, #0]
 800fe0a:	f7ff bf8d 	b.w	800fd28 <_puts_r>
 800fe0e:	bf00      	nop
 800fe10:	200001a0 	.word	0x200001a0

0800fe14 <_sbrk_r>:
 800fe14:	b538      	push	{r3, r4, r5, lr}
 800fe16:	4d06      	ldr	r5, [pc, #24]	; (800fe30 <_sbrk_r+0x1c>)
 800fe18:	2300      	movs	r3, #0
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	4608      	mov	r0, r1
 800fe1e:	602b      	str	r3, [r5, #0]
 800fe20:	f7f2 fc0e 	bl	8002640 <_sbrk>
 800fe24:	1c43      	adds	r3, r0, #1
 800fe26:	d102      	bne.n	800fe2e <_sbrk_r+0x1a>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	b103      	cbz	r3, 800fe2e <_sbrk_r+0x1a>
 800fe2c:	6023      	str	r3, [r4, #0]
 800fe2e:	bd38      	pop	{r3, r4, r5, pc}
 800fe30:	20000ae4 	.word	0x20000ae4

0800fe34 <siprintf>:
 800fe34:	b40e      	push	{r1, r2, r3}
 800fe36:	b500      	push	{lr}
 800fe38:	b09c      	sub	sp, #112	; 0x70
 800fe3a:	ab1d      	add	r3, sp, #116	; 0x74
 800fe3c:	9002      	str	r0, [sp, #8]
 800fe3e:	9006      	str	r0, [sp, #24]
 800fe40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe44:	4809      	ldr	r0, [pc, #36]	; (800fe6c <siprintf+0x38>)
 800fe46:	9107      	str	r1, [sp, #28]
 800fe48:	9104      	str	r1, [sp, #16]
 800fe4a:	4909      	ldr	r1, [pc, #36]	; (800fe70 <siprintf+0x3c>)
 800fe4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe50:	9105      	str	r1, [sp, #20]
 800fe52:	6800      	ldr	r0, [r0, #0]
 800fe54:	9301      	str	r3, [sp, #4]
 800fe56:	a902      	add	r1, sp, #8
 800fe58:	f001 fc32 	bl	80116c0 <_svfiprintf_r>
 800fe5c:	9b02      	ldr	r3, [sp, #8]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	701a      	strb	r2, [r3, #0]
 800fe62:	b01c      	add	sp, #112	; 0x70
 800fe64:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe68:	b003      	add	sp, #12
 800fe6a:	4770      	bx	lr
 800fe6c:	200001a0 	.word	0x200001a0
 800fe70:	ffff0208 	.word	0xffff0208

0800fe74 <__sread>:
 800fe74:	b510      	push	{r4, lr}
 800fe76:	460c      	mov	r4, r1
 800fe78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe7c:	f001 fec2 	bl	8011c04 <_read_r>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	bfab      	itete	ge
 800fe84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe86:	89a3      	ldrhlt	r3, [r4, #12]
 800fe88:	181b      	addge	r3, r3, r0
 800fe8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe8e:	bfac      	ite	ge
 800fe90:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe92:	81a3      	strhlt	r3, [r4, #12]
 800fe94:	bd10      	pop	{r4, pc}

0800fe96 <__swrite>:
 800fe96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9a:	461f      	mov	r7, r3
 800fe9c:	898b      	ldrh	r3, [r1, #12]
 800fe9e:	05db      	lsls	r3, r3, #23
 800fea0:	4605      	mov	r5, r0
 800fea2:	460c      	mov	r4, r1
 800fea4:	4616      	mov	r6, r2
 800fea6:	d505      	bpl.n	800feb4 <__swrite+0x1e>
 800fea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feac:	2302      	movs	r3, #2
 800feae:	2200      	movs	r2, #0
 800feb0:	f000 ff84 	bl	8010dbc <_lseek_r>
 800feb4:	89a3      	ldrh	r3, [r4, #12]
 800feb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800febe:	81a3      	strh	r3, [r4, #12]
 800fec0:	4632      	mov	r2, r6
 800fec2:	463b      	mov	r3, r7
 800fec4:	4628      	mov	r0, r5
 800fec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feca:	f000 b869 	b.w	800ffa0 <_write_r>

0800fece <__sseek>:
 800fece:	b510      	push	{r4, lr}
 800fed0:	460c      	mov	r4, r1
 800fed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed6:	f000 ff71 	bl	8010dbc <_lseek_r>
 800feda:	1c43      	adds	r3, r0, #1
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	bf15      	itete	ne
 800fee0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800feea:	81a3      	strheq	r3, [r4, #12]
 800feec:	bf18      	it	ne
 800feee:	81a3      	strhne	r3, [r4, #12]
 800fef0:	bd10      	pop	{r4, pc}

0800fef2 <__sclose>:
 800fef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef6:	f000 b8d3 	b.w	80100a0 <_close_r>
	...

0800fefc <__swbuf_r>:
 800fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefe:	460e      	mov	r6, r1
 800ff00:	4614      	mov	r4, r2
 800ff02:	4605      	mov	r5, r0
 800ff04:	b118      	cbz	r0, 800ff0e <__swbuf_r+0x12>
 800ff06:	6983      	ldr	r3, [r0, #24]
 800ff08:	b90b      	cbnz	r3, 800ff0e <__swbuf_r+0x12>
 800ff0a:	f7ff f8b9 	bl	800f080 <__sinit>
 800ff0e:	4b21      	ldr	r3, [pc, #132]	; (800ff94 <__swbuf_r+0x98>)
 800ff10:	429c      	cmp	r4, r3
 800ff12:	d12b      	bne.n	800ff6c <__swbuf_r+0x70>
 800ff14:	686c      	ldr	r4, [r5, #4]
 800ff16:	69a3      	ldr	r3, [r4, #24]
 800ff18:	60a3      	str	r3, [r4, #8]
 800ff1a:	89a3      	ldrh	r3, [r4, #12]
 800ff1c:	071a      	lsls	r2, r3, #28
 800ff1e:	d52f      	bpl.n	800ff80 <__swbuf_r+0x84>
 800ff20:	6923      	ldr	r3, [r4, #16]
 800ff22:	b36b      	cbz	r3, 800ff80 <__swbuf_r+0x84>
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	6820      	ldr	r0, [r4, #0]
 800ff28:	1ac0      	subs	r0, r0, r3
 800ff2a:	6963      	ldr	r3, [r4, #20]
 800ff2c:	b2f6      	uxtb	r6, r6
 800ff2e:	4283      	cmp	r3, r0
 800ff30:	4637      	mov	r7, r6
 800ff32:	dc04      	bgt.n	800ff3e <__swbuf_r+0x42>
 800ff34:	4621      	mov	r1, r4
 800ff36:	4628      	mov	r0, r5
 800ff38:	f7fe fffc 	bl	800ef34 <_fflush_r>
 800ff3c:	bb30      	cbnz	r0, 800ff8c <__swbuf_r+0x90>
 800ff3e:	68a3      	ldr	r3, [r4, #8]
 800ff40:	3b01      	subs	r3, #1
 800ff42:	60a3      	str	r3, [r4, #8]
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	1c5a      	adds	r2, r3, #1
 800ff48:	6022      	str	r2, [r4, #0]
 800ff4a:	701e      	strb	r6, [r3, #0]
 800ff4c:	6963      	ldr	r3, [r4, #20]
 800ff4e:	3001      	adds	r0, #1
 800ff50:	4283      	cmp	r3, r0
 800ff52:	d004      	beq.n	800ff5e <__swbuf_r+0x62>
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	07db      	lsls	r3, r3, #31
 800ff58:	d506      	bpl.n	800ff68 <__swbuf_r+0x6c>
 800ff5a:	2e0a      	cmp	r6, #10
 800ff5c:	d104      	bne.n	800ff68 <__swbuf_r+0x6c>
 800ff5e:	4621      	mov	r1, r4
 800ff60:	4628      	mov	r0, r5
 800ff62:	f7fe ffe7 	bl	800ef34 <_fflush_r>
 800ff66:	b988      	cbnz	r0, 800ff8c <__swbuf_r+0x90>
 800ff68:	4638      	mov	r0, r7
 800ff6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff6c:	4b0a      	ldr	r3, [pc, #40]	; (800ff98 <__swbuf_r+0x9c>)
 800ff6e:	429c      	cmp	r4, r3
 800ff70:	d101      	bne.n	800ff76 <__swbuf_r+0x7a>
 800ff72:	68ac      	ldr	r4, [r5, #8]
 800ff74:	e7cf      	b.n	800ff16 <__swbuf_r+0x1a>
 800ff76:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <__swbuf_r+0xa0>)
 800ff78:	429c      	cmp	r4, r3
 800ff7a:	bf08      	it	eq
 800ff7c:	68ec      	ldreq	r4, [r5, #12]
 800ff7e:	e7ca      	b.n	800ff16 <__swbuf_r+0x1a>
 800ff80:	4621      	mov	r1, r4
 800ff82:	4628      	mov	r0, r5
 800ff84:	f000 f81e 	bl	800ffc4 <__swsetup_r>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d0cb      	beq.n	800ff24 <__swbuf_r+0x28>
 800ff8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff90:	e7ea      	b.n	800ff68 <__swbuf_r+0x6c>
 800ff92:	bf00      	nop
 800ff94:	080120bc 	.word	0x080120bc
 800ff98:	080120dc 	.word	0x080120dc
 800ff9c:	0801209c 	.word	0x0801209c

0800ffa0 <_write_r>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	4d07      	ldr	r5, [pc, #28]	; (800ffc0 <_write_r+0x20>)
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	4608      	mov	r0, r1
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	2200      	movs	r2, #0
 800ffac:	602a      	str	r2, [r5, #0]
 800ffae:	461a      	mov	r2, r3
 800ffb0:	f7f2 faf5 	bl	800259e <_write>
 800ffb4:	1c43      	adds	r3, r0, #1
 800ffb6:	d102      	bne.n	800ffbe <_write_r+0x1e>
 800ffb8:	682b      	ldr	r3, [r5, #0]
 800ffba:	b103      	cbz	r3, 800ffbe <_write_r+0x1e>
 800ffbc:	6023      	str	r3, [r4, #0]
 800ffbe:	bd38      	pop	{r3, r4, r5, pc}
 800ffc0:	20000ae4 	.word	0x20000ae4

0800ffc4 <__swsetup_r>:
 800ffc4:	4b32      	ldr	r3, [pc, #200]	; (8010090 <__swsetup_r+0xcc>)
 800ffc6:	b570      	push	{r4, r5, r6, lr}
 800ffc8:	681d      	ldr	r5, [r3, #0]
 800ffca:	4606      	mov	r6, r0
 800ffcc:	460c      	mov	r4, r1
 800ffce:	b125      	cbz	r5, 800ffda <__swsetup_r+0x16>
 800ffd0:	69ab      	ldr	r3, [r5, #24]
 800ffd2:	b913      	cbnz	r3, 800ffda <__swsetup_r+0x16>
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	f7ff f853 	bl	800f080 <__sinit>
 800ffda:	4b2e      	ldr	r3, [pc, #184]	; (8010094 <__swsetup_r+0xd0>)
 800ffdc:	429c      	cmp	r4, r3
 800ffde:	d10f      	bne.n	8010000 <__swsetup_r+0x3c>
 800ffe0:	686c      	ldr	r4, [r5, #4]
 800ffe2:	89a3      	ldrh	r3, [r4, #12]
 800ffe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffe8:	0719      	lsls	r1, r3, #28
 800ffea:	d42c      	bmi.n	8010046 <__swsetup_r+0x82>
 800ffec:	06dd      	lsls	r5, r3, #27
 800ffee:	d411      	bmi.n	8010014 <__swsetup_r+0x50>
 800fff0:	2309      	movs	r3, #9
 800fff2:	6033      	str	r3, [r6, #0]
 800fff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fff8:	81a3      	strh	r3, [r4, #12]
 800fffa:	f04f 30ff 	mov.w	r0, #4294967295
 800fffe:	e03e      	b.n	801007e <__swsetup_r+0xba>
 8010000:	4b25      	ldr	r3, [pc, #148]	; (8010098 <__swsetup_r+0xd4>)
 8010002:	429c      	cmp	r4, r3
 8010004:	d101      	bne.n	801000a <__swsetup_r+0x46>
 8010006:	68ac      	ldr	r4, [r5, #8]
 8010008:	e7eb      	b.n	800ffe2 <__swsetup_r+0x1e>
 801000a:	4b24      	ldr	r3, [pc, #144]	; (801009c <__swsetup_r+0xd8>)
 801000c:	429c      	cmp	r4, r3
 801000e:	bf08      	it	eq
 8010010:	68ec      	ldreq	r4, [r5, #12]
 8010012:	e7e6      	b.n	800ffe2 <__swsetup_r+0x1e>
 8010014:	0758      	lsls	r0, r3, #29
 8010016:	d512      	bpl.n	801003e <__swsetup_r+0x7a>
 8010018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801001a:	b141      	cbz	r1, 801002e <__swsetup_r+0x6a>
 801001c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010020:	4299      	cmp	r1, r3
 8010022:	d002      	beq.n	801002a <__swsetup_r+0x66>
 8010024:	4630      	mov	r0, r6
 8010026:	f7ff f907 	bl	800f238 <_free_r>
 801002a:	2300      	movs	r3, #0
 801002c:	6363      	str	r3, [r4, #52]	; 0x34
 801002e:	89a3      	ldrh	r3, [r4, #12]
 8010030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010034:	81a3      	strh	r3, [r4, #12]
 8010036:	2300      	movs	r3, #0
 8010038:	6063      	str	r3, [r4, #4]
 801003a:	6923      	ldr	r3, [r4, #16]
 801003c:	6023      	str	r3, [r4, #0]
 801003e:	89a3      	ldrh	r3, [r4, #12]
 8010040:	f043 0308 	orr.w	r3, r3, #8
 8010044:	81a3      	strh	r3, [r4, #12]
 8010046:	6923      	ldr	r3, [r4, #16]
 8010048:	b94b      	cbnz	r3, 801005e <__swsetup_r+0x9a>
 801004a:	89a3      	ldrh	r3, [r4, #12]
 801004c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010054:	d003      	beq.n	801005e <__swsetup_r+0x9a>
 8010056:	4621      	mov	r1, r4
 8010058:	4630      	mov	r0, r6
 801005a:	f000 fee7 	bl	8010e2c <__smakebuf_r>
 801005e:	89a0      	ldrh	r0, [r4, #12]
 8010060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010064:	f010 0301 	ands.w	r3, r0, #1
 8010068:	d00a      	beq.n	8010080 <__swsetup_r+0xbc>
 801006a:	2300      	movs	r3, #0
 801006c:	60a3      	str	r3, [r4, #8]
 801006e:	6963      	ldr	r3, [r4, #20]
 8010070:	425b      	negs	r3, r3
 8010072:	61a3      	str	r3, [r4, #24]
 8010074:	6923      	ldr	r3, [r4, #16]
 8010076:	b943      	cbnz	r3, 801008a <__swsetup_r+0xc6>
 8010078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801007c:	d1ba      	bne.n	800fff4 <__swsetup_r+0x30>
 801007e:	bd70      	pop	{r4, r5, r6, pc}
 8010080:	0781      	lsls	r1, r0, #30
 8010082:	bf58      	it	pl
 8010084:	6963      	ldrpl	r3, [r4, #20]
 8010086:	60a3      	str	r3, [r4, #8]
 8010088:	e7f4      	b.n	8010074 <__swsetup_r+0xb0>
 801008a:	2000      	movs	r0, #0
 801008c:	e7f7      	b.n	801007e <__swsetup_r+0xba>
 801008e:	bf00      	nop
 8010090:	200001a0 	.word	0x200001a0
 8010094:	080120bc 	.word	0x080120bc
 8010098:	080120dc 	.word	0x080120dc
 801009c:	0801209c 	.word	0x0801209c

080100a0 <_close_r>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	4d06      	ldr	r5, [pc, #24]	; (80100bc <_close_r+0x1c>)
 80100a4:	2300      	movs	r3, #0
 80100a6:	4604      	mov	r4, r0
 80100a8:	4608      	mov	r0, r1
 80100aa:	602b      	str	r3, [r5, #0]
 80100ac:	f7f2 fa93 	bl	80025d6 <_close>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_close_r+0x1a>
 80100b4:	682b      	ldr	r3, [r5, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_close_r+0x1a>
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	20000ae4 	.word	0x20000ae4

080100c0 <quorem>:
 80100c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	6903      	ldr	r3, [r0, #16]
 80100c6:	690c      	ldr	r4, [r1, #16]
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	4607      	mov	r7, r0
 80100cc:	f2c0 8081 	blt.w	80101d2 <quorem+0x112>
 80100d0:	3c01      	subs	r4, #1
 80100d2:	f101 0814 	add.w	r8, r1, #20
 80100d6:	f100 0514 	add.w	r5, r0, #20
 80100da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100e8:	3301      	adds	r3, #1
 80100ea:	429a      	cmp	r2, r3
 80100ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80100f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80100f8:	d331      	bcc.n	801015e <quorem+0x9e>
 80100fa:	f04f 0e00 	mov.w	lr, #0
 80100fe:	4640      	mov	r0, r8
 8010100:	46ac      	mov	ip, r5
 8010102:	46f2      	mov	sl, lr
 8010104:	f850 2b04 	ldr.w	r2, [r0], #4
 8010108:	b293      	uxth	r3, r2
 801010a:	fb06 e303 	mla	r3, r6, r3, lr
 801010e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010112:	b29b      	uxth	r3, r3
 8010114:	ebaa 0303 	sub.w	r3, sl, r3
 8010118:	f8dc a000 	ldr.w	sl, [ip]
 801011c:	0c12      	lsrs	r2, r2, #16
 801011e:	fa13 f38a 	uxtah	r3, r3, sl
 8010122:	fb06 e202 	mla	r2, r6, r2, lr
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	9b00      	ldr	r3, [sp, #0]
 801012a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801012e:	b292      	uxth	r2, r2
 8010130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010138:	f8bd 3000 	ldrh.w	r3, [sp]
 801013c:	4581      	cmp	r9, r0
 801013e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010142:	f84c 3b04 	str.w	r3, [ip], #4
 8010146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801014a:	d2db      	bcs.n	8010104 <quorem+0x44>
 801014c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010150:	b92b      	cbnz	r3, 801015e <quorem+0x9e>
 8010152:	9b01      	ldr	r3, [sp, #4]
 8010154:	3b04      	subs	r3, #4
 8010156:	429d      	cmp	r5, r3
 8010158:	461a      	mov	r2, r3
 801015a:	d32e      	bcc.n	80101ba <quorem+0xfa>
 801015c:	613c      	str	r4, [r7, #16]
 801015e:	4638      	mov	r0, r7
 8010160:	f001 f93a 	bl	80113d8 <__mcmp>
 8010164:	2800      	cmp	r0, #0
 8010166:	db24      	blt.n	80101b2 <quorem+0xf2>
 8010168:	3601      	adds	r6, #1
 801016a:	4628      	mov	r0, r5
 801016c:	f04f 0c00 	mov.w	ip, #0
 8010170:	f858 2b04 	ldr.w	r2, [r8], #4
 8010174:	f8d0 e000 	ldr.w	lr, [r0]
 8010178:	b293      	uxth	r3, r2
 801017a:	ebac 0303 	sub.w	r3, ip, r3
 801017e:	0c12      	lsrs	r2, r2, #16
 8010180:	fa13 f38e 	uxtah	r3, r3, lr
 8010184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801018c:	b29b      	uxth	r3, r3
 801018e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010192:	45c1      	cmp	r9, r8
 8010194:	f840 3b04 	str.w	r3, [r0], #4
 8010198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801019c:	d2e8      	bcs.n	8010170 <quorem+0xb0>
 801019e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101a6:	b922      	cbnz	r2, 80101b2 <quorem+0xf2>
 80101a8:	3b04      	subs	r3, #4
 80101aa:	429d      	cmp	r5, r3
 80101ac:	461a      	mov	r2, r3
 80101ae:	d30a      	bcc.n	80101c6 <quorem+0x106>
 80101b0:	613c      	str	r4, [r7, #16]
 80101b2:	4630      	mov	r0, r6
 80101b4:	b003      	add	sp, #12
 80101b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ba:	6812      	ldr	r2, [r2, #0]
 80101bc:	3b04      	subs	r3, #4
 80101be:	2a00      	cmp	r2, #0
 80101c0:	d1cc      	bne.n	801015c <quorem+0x9c>
 80101c2:	3c01      	subs	r4, #1
 80101c4:	e7c7      	b.n	8010156 <quorem+0x96>
 80101c6:	6812      	ldr	r2, [r2, #0]
 80101c8:	3b04      	subs	r3, #4
 80101ca:	2a00      	cmp	r2, #0
 80101cc:	d1f0      	bne.n	80101b0 <quorem+0xf0>
 80101ce:	3c01      	subs	r4, #1
 80101d0:	e7eb      	b.n	80101aa <quorem+0xea>
 80101d2:	2000      	movs	r0, #0
 80101d4:	e7ee      	b.n	80101b4 <quorem+0xf4>
	...

080101d8 <_dtoa_r>:
 80101d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101dc:	ed2d 8b04 	vpush	{d8-d9}
 80101e0:	ec57 6b10 	vmov	r6, r7, d0
 80101e4:	b093      	sub	sp, #76	; 0x4c
 80101e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80101e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80101ec:	9106      	str	r1, [sp, #24]
 80101ee:	ee10 aa10 	vmov	sl, s0
 80101f2:	4604      	mov	r4, r0
 80101f4:	9209      	str	r2, [sp, #36]	; 0x24
 80101f6:	930c      	str	r3, [sp, #48]	; 0x30
 80101f8:	46bb      	mov	fp, r7
 80101fa:	b975      	cbnz	r5, 801021a <_dtoa_r+0x42>
 80101fc:	2010      	movs	r0, #16
 80101fe:	f000 fe55 	bl	8010eac <malloc>
 8010202:	4602      	mov	r2, r0
 8010204:	6260      	str	r0, [r4, #36]	; 0x24
 8010206:	b920      	cbnz	r0, 8010212 <_dtoa_r+0x3a>
 8010208:	4ba7      	ldr	r3, [pc, #668]	; (80104a8 <_dtoa_r+0x2d0>)
 801020a:	21ea      	movs	r1, #234	; 0xea
 801020c:	48a7      	ldr	r0, [pc, #668]	; (80104ac <_dtoa_r+0x2d4>)
 801020e:	f001 fd0b 	bl	8011c28 <__assert_func>
 8010212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010216:	6005      	str	r5, [r0, #0]
 8010218:	60c5      	str	r5, [r0, #12]
 801021a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801021c:	6819      	ldr	r1, [r3, #0]
 801021e:	b151      	cbz	r1, 8010236 <_dtoa_r+0x5e>
 8010220:	685a      	ldr	r2, [r3, #4]
 8010222:	604a      	str	r2, [r1, #4]
 8010224:	2301      	movs	r3, #1
 8010226:	4093      	lsls	r3, r2
 8010228:	608b      	str	r3, [r1, #8]
 801022a:	4620      	mov	r0, r4
 801022c:	f000 fe92 	bl	8010f54 <_Bfree>
 8010230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010232:	2200      	movs	r2, #0
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	1e3b      	subs	r3, r7, #0
 8010238:	bfaa      	itet	ge
 801023a:	2300      	movge	r3, #0
 801023c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010240:	f8c8 3000 	strge.w	r3, [r8]
 8010244:	4b9a      	ldr	r3, [pc, #616]	; (80104b0 <_dtoa_r+0x2d8>)
 8010246:	bfbc      	itt	lt
 8010248:	2201      	movlt	r2, #1
 801024a:	f8c8 2000 	strlt.w	r2, [r8]
 801024e:	ea33 030b 	bics.w	r3, r3, fp
 8010252:	d11b      	bne.n	801028c <_dtoa_r+0xb4>
 8010254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010256:	f242 730f 	movw	r3, #9999	; 0x270f
 801025a:	6013      	str	r3, [r2, #0]
 801025c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010260:	4333      	orrs	r3, r6
 8010262:	f000 8592 	beq.w	8010d8a <_dtoa_r+0xbb2>
 8010266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010268:	b963      	cbnz	r3, 8010284 <_dtoa_r+0xac>
 801026a:	4b92      	ldr	r3, [pc, #584]	; (80104b4 <_dtoa_r+0x2dc>)
 801026c:	e022      	b.n	80102b4 <_dtoa_r+0xdc>
 801026e:	4b92      	ldr	r3, [pc, #584]	; (80104b8 <_dtoa_r+0x2e0>)
 8010270:	9301      	str	r3, [sp, #4]
 8010272:	3308      	adds	r3, #8
 8010274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	9801      	ldr	r0, [sp, #4]
 801027a:	b013      	add	sp, #76	; 0x4c
 801027c:	ecbd 8b04 	vpop	{d8-d9}
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	4b8b      	ldr	r3, [pc, #556]	; (80104b4 <_dtoa_r+0x2dc>)
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	3303      	adds	r3, #3
 801028a:	e7f3      	b.n	8010274 <_dtoa_r+0x9c>
 801028c:	2200      	movs	r2, #0
 801028e:	2300      	movs	r3, #0
 8010290:	4650      	mov	r0, sl
 8010292:	4659      	mov	r1, fp
 8010294:	f7f0 fc20 	bl	8000ad8 <__aeabi_dcmpeq>
 8010298:	ec4b ab19 	vmov	d9, sl, fp
 801029c:	4680      	mov	r8, r0
 801029e:	b158      	cbz	r0, 80102b8 <_dtoa_r+0xe0>
 80102a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102a2:	2301      	movs	r3, #1
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 856b 	beq.w	8010d84 <_dtoa_r+0xbac>
 80102ae:	4883      	ldr	r0, [pc, #524]	; (80104bc <_dtoa_r+0x2e4>)
 80102b0:	6018      	str	r0, [r3, #0]
 80102b2:	1e43      	subs	r3, r0, #1
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	e7df      	b.n	8010278 <_dtoa_r+0xa0>
 80102b8:	ec4b ab10 	vmov	d0, sl, fp
 80102bc:	aa10      	add	r2, sp, #64	; 0x40
 80102be:	a911      	add	r1, sp, #68	; 0x44
 80102c0:	4620      	mov	r0, r4
 80102c2:	f001 f92f 	bl	8011524 <__d2b>
 80102c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80102ca:	ee08 0a10 	vmov	s16, r0
 80102ce:	2d00      	cmp	r5, #0
 80102d0:	f000 8084 	beq.w	80103dc <_dtoa_r+0x204>
 80102d4:	ee19 3a90 	vmov	r3, s19
 80102d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80102e0:	4656      	mov	r6, sl
 80102e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80102e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80102ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80102ee:	4b74      	ldr	r3, [pc, #464]	; (80104c0 <_dtoa_r+0x2e8>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	4630      	mov	r0, r6
 80102f4:	4639      	mov	r1, r7
 80102f6:	f7ef ffcf 	bl	8000298 <__aeabi_dsub>
 80102fa:	a365      	add	r3, pc, #404	; (adr r3, 8010490 <_dtoa_r+0x2b8>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	f7f0 f982 	bl	8000608 <__aeabi_dmul>
 8010304:	a364      	add	r3, pc, #400	; (adr r3, 8010498 <_dtoa_r+0x2c0>)
 8010306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030a:	f7ef ffc7 	bl	800029c <__adddf3>
 801030e:	4606      	mov	r6, r0
 8010310:	4628      	mov	r0, r5
 8010312:	460f      	mov	r7, r1
 8010314:	f7f0 f90e 	bl	8000534 <__aeabi_i2d>
 8010318:	a361      	add	r3, pc, #388	; (adr r3, 80104a0 <_dtoa_r+0x2c8>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	f7f0 f973 	bl	8000608 <__aeabi_dmul>
 8010322:	4602      	mov	r2, r0
 8010324:	460b      	mov	r3, r1
 8010326:	4630      	mov	r0, r6
 8010328:	4639      	mov	r1, r7
 801032a:	f7ef ffb7 	bl	800029c <__adddf3>
 801032e:	4606      	mov	r6, r0
 8010330:	460f      	mov	r7, r1
 8010332:	f7f0 fc19 	bl	8000b68 <__aeabi_d2iz>
 8010336:	2200      	movs	r2, #0
 8010338:	9000      	str	r0, [sp, #0]
 801033a:	2300      	movs	r3, #0
 801033c:	4630      	mov	r0, r6
 801033e:	4639      	mov	r1, r7
 8010340:	f7f0 fbd4 	bl	8000aec <__aeabi_dcmplt>
 8010344:	b150      	cbz	r0, 801035c <_dtoa_r+0x184>
 8010346:	9800      	ldr	r0, [sp, #0]
 8010348:	f7f0 f8f4 	bl	8000534 <__aeabi_i2d>
 801034c:	4632      	mov	r2, r6
 801034e:	463b      	mov	r3, r7
 8010350:	f7f0 fbc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8010354:	b910      	cbnz	r0, 801035c <_dtoa_r+0x184>
 8010356:	9b00      	ldr	r3, [sp, #0]
 8010358:	3b01      	subs	r3, #1
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	9b00      	ldr	r3, [sp, #0]
 801035e:	2b16      	cmp	r3, #22
 8010360:	d85a      	bhi.n	8010418 <_dtoa_r+0x240>
 8010362:	9a00      	ldr	r2, [sp, #0]
 8010364:	4b57      	ldr	r3, [pc, #348]	; (80104c4 <_dtoa_r+0x2ec>)
 8010366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801036a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036e:	ec51 0b19 	vmov	r0, r1, d9
 8010372:	f7f0 fbbb 	bl	8000aec <__aeabi_dcmplt>
 8010376:	2800      	cmp	r0, #0
 8010378:	d050      	beq.n	801041c <_dtoa_r+0x244>
 801037a:	9b00      	ldr	r3, [sp, #0]
 801037c:	3b01      	subs	r3, #1
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	2300      	movs	r3, #0
 8010382:	930b      	str	r3, [sp, #44]	; 0x2c
 8010384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010386:	1b5d      	subs	r5, r3, r5
 8010388:	1e6b      	subs	r3, r5, #1
 801038a:	9305      	str	r3, [sp, #20]
 801038c:	bf45      	ittet	mi
 801038e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010392:	9304      	strmi	r3, [sp, #16]
 8010394:	2300      	movpl	r3, #0
 8010396:	2300      	movmi	r3, #0
 8010398:	bf4c      	ite	mi
 801039a:	9305      	strmi	r3, [sp, #20]
 801039c:	9304      	strpl	r3, [sp, #16]
 801039e:	9b00      	ldr	r3, [sp, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	db3d      	blt.n	8010420 <_dtoa_r+0x248>
 80103a4:	9b05      	ldr	r3, [sp, #20]
 80103a6:	9a00      	ldr	r2, [sp, #0]
 80103a8:	920a      	str	r2, [sp, #40]	; 0x28
 80103aa:	4413      	add	r3, r2
 80103ac:	9305      	str	r3, [sp, #20]
 80103ae:	2300      	movs	r3, #0
 80103b0:	9307      	str	r3, [sp, #28]
 80103b2:	9b06      	ldr	r3, [sp, #24]
 80103b4:	2b09      	cmp	r3, #9
 80103b6:	f200 8089 	bhi.w	80104cc <_dtoa_r+0x2f4>
 80103ba:	2b05      	cmp	r3, #5
 80103bc:	bfc4      	itt	gt
 80103be:	3b04      	subgt	r3, #4
 80103c0:	9306      	strgt	r3, [sp, #24]
 80103c2:	9b06      	ldr	r3, [sp, #24]
 80103c4:	f1a3 0302 	sub.w	r3, r3, #2
 80103c8:	bfcc      	ite	gt
 80103ca:	2500      	movgt	r5, #0
 80103cc:	2501      	movle	r5, #1
 80103ce:	2b03      	cmp	r3, #3
 80103d0:	f200 8087 	bhi.w	80104e2 <_dtoa_r+0x30a>
 80103d4:	e8df f003 	tbb	[pc, r3]
 80103d8:	59383a2d 	.word	0x59383a2d
 80103dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80103e0:	441d      	add	r5, r3
 80103e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80103e6:	2b20      	cmp	r3, #32
 80103e8:	bfc1      	itttt	gt
 80103ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80103ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80103f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80103f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80103fa:	bfda      	itte	le
 80103fc:	f1c3 0320 	rsble	r3, r3, #32
 8010400:	fa06 f003 	lslle.w	r0, r6, r3
 8010404:	4318      	orrgt	r0, r3
 8010406:	f7f0 f885 	bl	8000514 <__aeabi_ui2d>
 801040a:	2301      	movs	r3, #1
 801040c:	4606      	mov	r6, r0
 801040e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010412:	3d01      	subs	r5, #1
 8010414:	930e      	str	r3, [sp, #56]	; 0x38
 8010416:	e76a      	b.n	80102ee <_dtoa_r+0x116>
 8010418:	2301      	movs	r3, #1
 801041a:	e7b2      	b.n	8010382 <_dtoa_r+0x1aa>
 801041c:	900b      	str	r0, [sp, #44]	; 0x2c
 801041e:	e7b1      	b.n	8010384 <_dtoa_r+0x1ac>
 8010420:	9b04      	ldr	r3, [sp, #16]
 8010422:	9a00      	ldr	r2, [sp, #0]
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	9304      	str	r3, [sp, #16]
 8010428:	4253      	negs	r3, r2
 801042a:	9307      	str	r3, [sp, #28]
 801042c:	2300      	movs	r3, #0
 801042e:	930a      	str	r3, [sp, #40]	; 0x28
 8010430:	e7bf      	b.n	80103b2 <_dtoa_r+0x1da>
 8010432:	2300      	movs	r3, #0
 8010434:	9308      	str	r3, [sp, #32]
 8010436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010438:	2b00      	cmp	r3, #0
 801043a:	dc55      	bgt.n	80104e8 <_dtoa_r+0x310>
 801043c:	2301      	movs	r3, #1
 801043e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010442:	461a      	mov	r2, r3
 8010444:	9209      	str	r2, [sp, #36]	; 0x24
 8010446:	e00c      	b.n	8010462 <_dtoa_r+0x28a>
 8010448:	2301      	movs	r3, #1
 801044a:	e7f3      	b.n	8010434 <_dtoa_r+0x25c>
 801044c:	2300      	movs	r3, #0
 801044e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010450:	9308      	str	r3, [sp, #32]
 8010452:	9b00      	ldr	r3, [sp, #0]
 8010454:	4413      	add	r3, r2
 8010456:	9302      	str	r3, [sp, #8]
 8010458:	3301      	adds	r3, #1
 801045a:	2b01      	cmp	r3, #1
 801045c:	9303      	str	r3, [sp, #12]
 801045e:	bfb8      	it	lt
 8010460:	2301      	movlt	r3, #1
 8010462:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010464:	2200      	movs	r2, #0
 8010466:	6042      	str	r2, [r0, #4]
 8010468:	2204      	movs	r2, #4
 801046a:	f102 0614 	add.w	r6, r2, #20
 801046e:	429e      	cmp	r6, r3
 8010470:	6841      	ldr	r1, [r0, #4]
 8010472:	d93d      	bls.n	80104f0 <_dtoa_r+0x318>
 8010474:	4620      	mov	r0, r4
 8010476:	f000 fd2d 	bl	8010ed4 <_Balloc>
 801047a:	9001      	str	r0, [sp, #4]
 801047c:	2800      	cmp	r0, #0
 801047e:	d13b      	bne.n	80104f8 <_dtoa_r+0x320>
 8010480:	4b11      	ldr	r3, [pc, #68]	; (80104c8 <_dtoa_r+0x2f0>)
 8010482:	4602      	mov	r2, r0
 8010484:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010488:	e6c0      	b.n	801020c <_dtoa_r+0x34>
 801048a:	2301      	movs	r3, #1
 801048c:	e7df      	b.n	801044e <_dtoa_r+0x276>
 801048e:	bf00      	nop
 8010490:	636f4361 	.word	0x636f4361
 8010494:	3fd287a7 	.word	0x3fd287a7
 8010498:	8b60c8b3 	.word	0x8b60c8b3
 801049c:	3fc68a28 	.word	0x3fc68a28
 80104a0:	509f79fb 	.word	0x509f79fb
 80104a4:	3fd34413 	.word	0x3fd34413
 80104a8:	08012141 	.word	0x08012141
 80104ac:	08012158 	.word	0x08012158
 80104b0:	7ff00000 	.word	0x7ff00000
 80104b4:	0801213d 	.word	0x0801213d
 80104b8:	08012134 	.word	0x08012134
 80104bc:	08012111 	.word	0x08012111
 80104c0:	3ff80000 	.word	0x3ff80000
 80104c4:	08012248 	.word	0x08012248
 80104c8:	080121b3 	.word	0x080121b3
 80104cc:	2501      	movs	r5, #1
 80104ce:	2300      	movs	r3, #0
 80104d0:	9306      	str	r3, [sp, #24]
 80104d2:	9508      	str	r5, [sp, #32]
 80104d4:	f04f 33ff 	mov.w	r3, #4294967295
 80104d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80104dc:	2200      	movs	r2, #0
 80104de:	2312      	movs	r3, #18
 80104e0:	e7b0      	b.n	8010444 <_dtoa_r+0x26c>
 80104e2:	2301      	movs	r3, #1
 80104e4:	9308      	str	r3, [sp, #32]
 80104e6:	e7f5      	b.n	80104d4 <_dtoa_r+0x2fc>
 80104e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80104ee:	e7b8      	b.n	8010462 <_dtoa_r+0x28a>
 80104f0:	3101      	adds	r1, #1
 80104f2:	6041      	str	r1, [r0, #4]
 80104f4:	0052      	lsls	r2, r2, #1
 80104f6:	e7b8      	b.n	801046a <_dtoa_r+0x292>
 80104f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104fa:	9a01      	ldr	r2, [sp, #4]
 80104fc:	601a      	str	r2, [r3, #0]
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	2b0e      	cmp	r3, #14
 8010502:	f200 809d 	bhi.w	8010640 <_dtoa_r+0x468>
 8010506:	2d00      	cmp	r5, #0
 8010508:	f000 809a 	beq.w	8010640 <_dtoa_r+0x468>
 801050c:	9b00      	ldr	r3, [sp, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	dd32      	ble.n	8010578 <_dtoa_r+0x3a0>
 8010512:	4ab7      	ldr	r2, [pc, #732]	; (80107f0 <_dtoa_r+0x618>)
 8010514:	f003 030f 	and.w	r3, r3, #15
 8010518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801051c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010520:	9b00      	ldr	r3, [sp, #0]
 8010522:	05d8      	lsls	r0, r3, #23
 8010524:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010528:	d516      	bpl.n	8010558 <_dtoa_r+0x380>
 801052a:	4bb2      	ldr	r3, [pc, #712]	; (80107f4 <_dtoa_r+0x61c>)
 801052c:	ec51 0b19 	vmov	r0, r1, d9
 8010530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010534:	f7f0 f992 	bl	800085c <__aeabi_ddiv>
 8010538:	f007 070f 	and.w	r7, r7, #15
 801053c:	4682      	mov	sl, r0
 801053e:	468b      	mov	fp, r1
 8010540:	2503      	movs	r5, #3
 8010542:	4eac      	ldr	r6, [pc, #688]	; (80107f4 <_dtoa_r+0x61c>)
 8010544:	b957      	cbnz	r7, 801055c <_dtoa_r+0x384>
 8010546:	4642      	mov	r2, r8
 8010548:	464b      	mov	r3, r9
 801054a:	4650      	mov	r0, sl
 801054c:	4659      	mov	r1, fp
 801054e:	f7f0 f985 	bl	800085c <__aeabi_ddiv>
 8010552:	4682      	mov	sl, r0
 8010554:	468b      	mov	fp, r1
 8010556:	e028      	b.n	80105aa <_dtoa_r+0x3d2>
 8010558:	2502      	movs	r5, #2
 801055a:	e7f2      	b.n	8010542 <_dtoa_r+0x36a>
 801055c:	07f9      	lsls	r1, r7, #31
 801055e:	d508      	bpl.n	8010572 <_dtoa_r+0x39a>
 8010560:	4640      	mov	r0, r8
 8010562:	4649      	mov	r1, r9
 8010564:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010568:	f7f0 f84e 	bl	8000608 <__aeabi_dmul>
 801056c:	3501      	adds	r5, #1
 801056e:	4680      	mov	r8, r0
 8010570:	4689      	mov	r9, r1
 8010572:	107f      	asrs	r7, r7, #1
 8010574:	3608      	adds	r6, #8
 8010576:	e7e5      	b.n	8010544 <_dtoa_r+0x36c>
 8010578:	f000 809b 	beq.w	80106b2 <_dtoa_r+0x4da>
 801057c:	9b00      	ldr	r3, [sp, #0]
 801057e:	4f9d      	ldr	r7, [pc, #628]	; (80107f4 <_dtoa_r+0x61c>)
 8010580:	425e      	negs	r6, r3
 8010582:	4b9b      	ldr	r3, [pc, #620]	; (80107f0 <_dtoa_r+0x618>)
 8010584:	f006 020f 	and.w	r2, r6, #15
 8010588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010590:	ec51 0b19 	vmov	r0, r1, d9
 8010594:	f7f0 f838 	bl	8000608 <__aeabi_dmul>
 8010598:	1136      	asrs	r6, r6, #4
 801059a:	4682      	mov	sl, r0
 801059c:	468b      	mov	fp, r1
 801059e:	2300      	movs	r3, #0
 80105a0:	2502      	movs	r5, #2
 80105a2:	2e00      	cmp	r6, #0
 80105a4:	d17a      	bne.n	801069c <_dtoa_r+0x4c4>
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d1d3      	bne.n	8010552 <_dtoa_r+0x37a>
 80105aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 8082 	beq.w	80106b6 <_dtoa_r+0x4de>
 80105b2:	4b91      	ldr	r3, [pc, #580]	; (80107f8 <_dtoa_r+0x620>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	4650      	mov	r0, sl
 80105b8:	4659      	mov	r1, fp
 80105ba:	f7f0 fa97 	bl	8000aec <__aeabi_dcmplt>
 80105be:	2800      	cmp	r0, #0
 80105c0:	d079      	beq.n	80106b6 <_dtoa_r+0x4de>
 80105c2:	9b03      	ldr	r3, [sp, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d076      	beq.n	80106b6 <_dtoa_r+0x4de>
 80105c8:	9b02      	ldr	r3, [sp, #8]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	dd36      	ble.n	801063c <_dtoa_r+0x464>
 80105ce:	9b00      	ldr	r3, [sp, #0]
 80105d0:	4650      	mov	r0, sl
 80105d2:	4659      	mov	r1, fp
 80105d4:	1e5f      	subs	r7, r3, #1
 80105d6:	2200      	movs	r2, #0
 80105d8:	4b88      	ldr	r3, [pc, #544]	; (80107fc <_dtoa_r+0x624>)
 80105da:	f7f0 f815 	bl	8000608 <__aeabi_dmul>
 80105de:	9e02      	ldr	r6, [sp, #8]
 80105e0:	4682      	mov	sl, r0
 80105e2:	468b      	mov	fp, r1
 80105e4:	3501      	adds	r5, #1
 80105e6:	4628      	mov	r0, r5
 80105e8:	f7ef ffa4 	bl	8000534 <__aeabi_i2d>
 80105ec:	4652      	mov	r2, sl
 80105ee:	465b      	mov	r3, fp
 80105f0:	f7f0 f80a 	bl	8000608 <__aeabi_dmul>
 80105f4:	4b82      	ldr	r3, [pc, #520]	; (8010800 <_dtoa_r+0x628>)
 80105f6:	2200      	movs	r2, #0
 80105f8:	f7ef fe50 	bl	800029c <__adddf3>
 80105fc:	46d0      	mov	r8, sl
 80105fe:	46d9      	mov	r9, fp
 8010600:	4682      	mov	sl, r0
 8010602:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010606:	2e00      	cmp	r6, #0
 8010608:	d158      	bne.n	80106bc <_dtoa_r+0x4e4>
 801060a:	4b7e      	ldr	r3, [pc, #504]	; (8010804 <_dtoa_r+0x62c>)
 801060c:	2200      	movs	r2, #0
 801060e:	4640      	mov	r0, r8
 8010610:	4649      	mov	r1, r9
 8010612:	f7ef fe41 	bl	8000298 <__aeabi_dsub>
 8010616:	4652      	mov	r2, sl
 8010618:	465b      	mov	r3, fp
 801061a:	4680      	mov	r8, r0
 801061c:	4689      	mov	r9, r1
 801061e:	f7f0 fa83 	bl	8000b28 <__aeabi_dcmpgt>
 8010622:	2800      	cmp	r0, #0
 8010624:	f040 8295 	bne.w	8010b52 <_dtoa_r+0x97a>
 8010628:	4652      	mov	r2, sl
 801062a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801062e:	4640      	mov	r0, r8
 8010630:	4649      	mov	r1, r9
 8010632:	f7f0 fa5b 	bl	8000aec <__aeabi_dcmplt>
 8010636:	2800      	cmp	r0, #0
 8010638:	f040 8289 	bne.w	8010b4e <_dtoa_r+0x976>
 801063c:	ec5b ab19 	vmov	sl, fp, d9
 8010640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010642:	2b00      	cmp	r3, #0
 8010644:	f2c0 8148 	blt.w	80108d8 <_dtoa_r+0x700>
 8010648:	9a00      	ldr	r2, [sp, #0]
 801064a:	2a0e      	cmp	r2, #14
 801064c:	f300 8144 	bgt.w	80108d8 <_dtoa_r+0x700>
 8010650:	4b67      	ldr	r3, [pc, #412]	; (80107f0 <_dtoa_r+0x618>)
 8010652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010656:	e9d3 8900 	ldrd	r8, r9, [r3]
 801065a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801065c:	2b00      	cmp	r3, #0
 801065e:	f280 80d5 	bge.w	801080c <_dtoa_r+0x634>
 8010662:	9b03      	ldr	r3, [sp, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	f300 80d1 	bgt.w	801080c <_dtoa_r+0x634>
 801066a:	f040 826f 	bne.w	8010b4c <_dtoa_r+0x974>
 801066e:	4b65      	ldr	r3, [pc, #404]	; (8010804 <_dtoa_r+0x62c>)
 8010670:	2200      	movs	r2, #0
 8010672:	4640      	mov	r0, r8
 8010674:	4649      	mov	r1, r9
 8010676:	f7ef ffc7 	bl	8000608 <__aeabi_dmul>
 801067a:	4652      	mov	r2, sl
 801067c:	465b      	mov	r3, fp
 801067e:	f7f0 fa49 	bl	8000b14 <__aeabi_dcmpge>
 8010682:	9e03      	ldr	r6, [sp, #12]
 8010684:	4637      	mov	r7, r6
 8010686:	2800      	cmp	r0, #0
 8010688:	f040 8245 	bne.w	8010b16 <_dtoa_r+0x93e>
 801068c:	9d01      	ldr	r5, [sp, #4]
 801068e:	2331      	movs	r3, #49	; 0x31
 8010690:	f805 3b01 	strb.w	r3, [r5], #1
 8010694:	9b00      	ldr	r3, [sp, #0]
 8010696:	3301      	adds	r3, #1
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	e240      	b.n	8010b1e <_dtoa_r+0x946>
 801069c:	07f2      	lsls	r2, r6, #31
 801069e:	d505      	bpl.n	80106ac <_dtoa_r+0x4d4>
 80106a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106a4:	f7ef ffb0 	bl	8000608 <__aeabi_dmul>
 80106a8:	3501      	adds	r5, #1
 80106aa:	2301      	movs	r3, #1
 80106ac:	1076      	asrs	r6, r6, #1
 80106ae:	3708      	adds	r7, #8
 80106b0:	e777      	b.n	80105a2 <_dtoa_r+0x3ca>
 80106b2:	2502      	movs	r5, #2
 80106b4:	e779      	b.n	80105aa <_dtoa_r+0x3d2>
 80106b6:	9f00      	ldr	r7, [sp, #0]
 80106b8:	9e03      	ldr	r6, [sp, #12]
 80106ba:	e794      	b.n	80105e6 <_dtoa_r+0x40e>
 80106bc:	9901      	ldr	r1, [sp, #4]
 80106be:	4b4c      	ldr	r3, [pc, #304]	; (80107f0 <_dtoa_r+0x618>)
 80106c0:	4431      	add	r1, r6
 80106c2:	910d      	str	r1, [sp, #52]	; 0x34
 80106c4:	9908      	ldr	r1, [sp, #32]
 80106c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80106ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106ce:	2900      	cmp	r1, #0
 80106d0:	d043      	beq.n	801075a <_dtoa_r+0x582>
 80106d2:	494d      	ldr	r1, [pc, #308]	; (8010808 <_dtoa_r+0x630>)
 80106d4:	2000      	movs	r0, #0
 80106d6:	f7f0 f8c1 	bl	800085c <__aeabi_ddiv>
 80106da:	4652      	mov	r2, sl
 80106dc:	465b      	mov	r3, fp
 80106de:	f7ef fddb 	bl	8000298 <__aeabi_dsub>
 80106e2:	9d01      	ldr	r5, [sp, #4]
 80106e4:	4682      	mov	sl, r0
 80106e6:	468b      	mov	fp, r1
 80106e8:	4649      	mov	r1, r9
 80106ea:	4640      	mov	r0, r8
 80106ec:	f7f0 fa3c 	bl	8000b68 <__aeabi_d2iz>
 80106f0:	4606      	mov	r6, r0
 80106f2:	f7ef ff1f 	bl	8000534 <__aeabi_i2d>
 80106f6:	4602      	mov	r2, r0
 80106f8:	460b      	mov	r3, r1
 80106fa:	4640      	mov	r0, r8
 80106fc:	4649      	mov	r1, r9
 80106fe:	f7ef fdcb 	bl	8000298 <__aeabi_dsub>
 8010702:	3630      	adds	r6, #48	; 0x30
 8010704:	f805 6b01 	strb.w	r6, [r5], #1
 8010708:	4652      	mov	r2, sl
 801070a:	465b      	mov	r3, fp
 801070c:	4680      	mov	r8, r0
 801070e:	4689      	mov	r9, r1
 8010710:	f7f0 f9ec 	bl	8000aec <__aeabi_dcmplt>
 8010714:	2800      	cmp	r0, #0
 8010716:	d163      	bne.n	80107e0 <_dtoa_r+0x608>
 8010718:	4642      	mov	r2, r8
 801071a:	464b      	mov	r3, r9
 801071c:	4936      	ldr	r1, [pc, #216]	; (80107f8 <_dtoa_r+0x620>)
 801071e:	2000      	movs	r0, #0
 8010720:	f7ef fdba 	bl	8000298 <__aeabi_dsub>
 8010724:	4652      	mov	r2, sl
 8010726:	465b      	mov	r3, fp
 8010728:	f7f0 f9e0 	bl	8000aec <__aeabi_dcmplt>
 801072c:	2800      	cmp	r0, #0
 801072e:	f040 80b5 	bne.w	801089c <_dtoa_r+0x6c4>
 8010732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010734:	429d      	cmp	r5, r3
 8010736:	d081      	beq.n	801063c <_dtoa_r+0x464>
 8010738:	4b30      	ldr	r3, [pc, #192]	; (80107fc <_dtoa_r+0x624>)
 801073a:	2200      	movs	r2, #0
 801073c:	4650      	mov	r0, sl
 801073e:	4659      	mov	r1, fp
 8010740:	f7ef ff62 	bl	8000608 <__aeabi_dmul>
 8010744:	4b2d      	ldr	r3, [pc, #180]	; (80107fc <_dtoa_r+0x624>)
 8010746:	4682      	mov	sl, r0
 8010748:	468b      	mov	fp, r1
 801074a:	4640      	mov	r0, r8
 801074c:	4649      	mov	r1, r9
 801074e:	2200      	movs	r2, #0
 8010750:	f7ef ff5a 	bl	8000608 <__aeabi_dmul>
 8010754:	4680      	mov	r8, r0
 8010756:	4689      	mov	r9, r1
 8010758:	e7c6      	b.n	80106e8 <_dtoa_r+0x510>
 801075a:	4650      	mov	r0, sl
 801075c:	4659      	mov	r1, fp
 801075e:	f7ef ff53 	bl	8000608 <__aeabi_dmul>
 8010762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010764:	9d01      	ldr	r5, [sp, #4]
 8010766:	930f      	str	r3, [sp, #60]	; 0x3c
 8010768:	4682      	mov	sl, r0
 801076a:	468b      	mov	fp, r1
 801076c:	4649      	mov	r1, r9
 801076e:	4640      	mov	r0, r8
 8010770:	f7f0 f9fa 	bl	8000b68 <__aeabi_d2iz>
 8010774:	4606      	mov	r6, r0
 8010776:	f7ef fedd 	bl	8000534 <__aeabi_i2d>
 801077a:	3630      	adds	r6, #48	; 0x30
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	4640      	mov	r0, r8
 8010782:	4649      	mov	r1, r9
 8010784:	f7ef fd88 	bl	8000298 <__aeabi_dsub>
 8010788:	f805 6b01 	strb.w	r6, [r5], #1
 801078c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801078e:	429d      	cmp	r5, r3
 8010790:	4680      	mov	r8, r0
 8010792:	4689      	mov	r9, r1
 8010794:	f04f 0200 	mov.w	r2, #0
 8010798:	d124      	bne.n	80107e4 <_dtoa_r+0x60c>
 801079a:	4b1b      	ldr	r3, [pc, #108]	; (8010808 <_dtoa_r+0x630>)
 801079c:	4650      	mov	r0, sl
 801079e:	4659      	mov	r1, fp
 80107a0:	f7ef fd7c 	bl	800029c <__adddf3>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4640      	mov	r0, r8
 80107aa:	4649      	mov	r1, r9
 80107ac:	f7f0 f9bc 	bl	8000b28 <__aeabi_dcmpgt>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d173      	bne.n	801089c <_dtoa_r+0x6c4>
 80107b4:	4652      	mov	r2, sl
 80107b6:	465b      	mov	r3, fp
 80107b8:	4913      	ldr	r1, [pc, #76]	; (8010808 <_dtoa_r+0x630>)
 80107ba:	2000      	movs	r0, #0
 80107bc:	f7ef fd6c 	bl	8000298 <__aeabi_dsub>
 80107c0:	4602      	mov	r2, r0
 80107c2:	460b      	mov	r3, r1
 80107c4:	4640      	mov	r0, r8
 80107c6:	4649      	mov	r1, r9
 80107c8:	f7f0 f990 	bl	8000aec <__aeabi_dcmplt>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	f43f af35 	beq.w	801063c <_dtoa_r+0x464>
 80107d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80107d4:	1e6b      	subs	r3, r5, #1
 80107d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80107d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80107dc:	2b30      	cmp	r3, #48	; 0x30
 80107de:	d0f8      	beq.n	80107d2 <_dtoa_r+0x5fa>
 80107e0:	9700      	str	r7, [sp, #0]
 80107e2:	e049      	b.n	8010878 <_dtoa_r+0x6a0>
 80107e4:	4b05      	ldr	r3, [pc, #20]	; (80107fc <_dtoa_r+0x624>)
 80107e6:	f7ef ff0f 	bl	8000608 <__aeabi_dmul>
 80107ea:	4680      	mov	r8, r0
 80107ec:	4689      	mov	r9, r1
 80107ee:	e7bd      	b.n	801076c <_dtoa_r+0x594>
 80107f0:	08012248 	.word	0x08012248
 80107f4:	08012220 	.word	0x08012220
 80107f8:	3ff00000 	.word	0x3ff00000
 80107fc:	40240000 	.word	0x40240000
 8010800:	401c0000 	.word	0x401c0000
 8010804:	40140000 	.word	0x40140000
 8010808:	3fe00000 	.word	0x3fe00000
 801080c:	9d01      	ldr	r5, [sp, #4]
 801080e:	4656      	mov	r6, sl
 8010810:	465f      	mov	r7, fp
 8010812:	4642      	mov	r2, r8
 8010814:	464b      	mov	r3, r9
 8010816:	4630      	mov	r0, r6
 8010818:	4639      	mov	r1, r7
 801081a:	f7f0 f81f 	bl	800085c <__aeabi_ddiv>
 801081e:	f7f0 f9a3 	bl	8000b68 <__aeabi_d2iz>
 8010822:	4682      	mov	sl, r0
 8010824:	f7ef fe86 	bl	8000534 <__aeabi_i2d>
 8010828:	4642      	mov	r2, r8
 801082a:	464b      	mov	r3, r9
 801082c:	f7ef feec 	bl	8000608 <__aeabi_dmul>
 8010830:	4602      	mov	r2, r0
 8010832:	460b      	mov	r3, r1
 8010834:	4630      	mov	r0, r6
 8010836:	4639      	mov	r1, r7
 8010838:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801083c:	f7ef fd2c 	bl	8000298 <__aeabi_dsub>
 8010840:	f805 6b01 	strb.w	r6, [r5], #1
 8010844:	9e01      	ldr	r6, [sp, #4]
 8010846:	9f03      	ldr	r7, [sp, #12]
 8010848:	1bae      	subs	r6, r5, r6
 801084a:	42b7      	cmp	r7, r6
 801084c:	4602      	mov	r2, r0
 801084e:	460b      	mov	r3, r1
 8010850:	d135      	bne.n	80108be <_dtoa_r+0x6e6>
 8010852:	f7ef fd23 	bl	800029c <__adddf3>
 8010856:	4642      	mov	r2, r8
 8010858:	464b      	mov	r3, r9
 801085a:	4606      	mov	r6, r0
 801085c:	460f      	mov	r7, r1
 801085e:	f7f0 f963 	bl	8000b28 <__aeabi_dcmpgt>
 8010862:	b9d0      	cbnz	r0, 801089a <_dtoa_r+0x6c2>
 8010864:	4642      	mov	r2, r8
 8010866:	464b      	mov	r3, r9
 8010868:	4630      	mov	r0, r6
 801086a:	4639      	mov	r1, r7
 801086c:	f7f0 f934 	bl	8000ad8 <__aeabi_dcmpeq>
 8010870:	b110      	cbz	r0, 8010878 <_dtoa_r+0x6a0>
 8010872:	f01a 0f01 	tst.w	sl, #1
 8010876:	d110      	bne.n	801089a <_dtoa_r+0x6c2>
 8010878:	4620      	mov	r0, r4
 801087a:	ee18 1a10 	vmov	r1, s16
 801087e:	f000 fb69 	bl	8010f54 <_Bfree>
 8010882:	2300      	movs	r3, #0
 8010884:	9800      	ldr	r0, [sp, #0]
 8010886:	702b      	strb	r3, [r5, #0]
 8010888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801088a:	3001      	adds	r0, #1
 801088c:	6018      	str	r0, [r3, #0]
 801088e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010890:	2b00      	cmp	r3, #0
 8010892:	f43f acf1 	beq.w	8010278 <_dtoa_r+0xa0>
 8010896:	601d      	str	r5, [r3, #0]
 8010898:	e4ee      	b.n	8010278 <_dtoa_r+0xa0>
 801089a:	9f00      	ldr	r7, [sp, #0]
 801089c:	462b      	mov	r3, r5
 801089e:	461d      	mov	r5, r3
 80108a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108a4:	2a39      	cmp	r2, #57	; 0x39
 80108a6:	d106      	bne.n	80108b6 <_dtoa_r+0x6de>
 80108a8:	9a01      	ldr	r2, [sp, #4]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d1f7      	bne.n	801089e <_dtoa_r+0x6c6>
 80108ae:	9901      	ldr	r1, [sp, #4]
 80108b0:	2230      	movs	r2, #48	; 0x30
 80108b2:	3701      	adds	r7, #1
 80108b4:	700a      	strb	r2, [r1, #0]
 80108b6:	781a      	ldrb	r2, [r3, #0]
 80108b8:	3201      	adds	r2, #1
 80108ba:	701a      	strb	r2, [r3, #0]
 80108bc:	e790      	b.n	80107e0 <_dtoa_r+0x608>
 80108be:	4ba6      	ldr	r3, [pc, #664]	; (8010b58 <_dtoa_r+0x980>)
 80108c0:	2200      	movs	r2, #0
 80108c2:	f7ef fea1 	bl	8000608 <__aeabi_dmul>
 80108c6:	2200      	movs	r2, #0
 80108c8:	2300      	movs	r3, #0
 80108ca:	4606      	mov	r6, r0
 80108cc:	460f      	mov	r7, r1
 80108ce:	f7f0 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d09d      	beq.n	8010812 <_dtoa_r+0x63a>
 80108d6:	e7cf      	b.n	8010878 <_dtoa_r+0x6a0>
 80108d8:	9a08      	ldr	r2, [sp, #32]
 80108da:	2a00      	cmp	r2, #0
 80108dc:	f000 80d7 	beq.w	8010a8e <_dtoa_r+0x8b6>
 80108e0:	9a06      	ldr	r2, [sp, #24]
 80108e2:	2a01      	cmp	r2, #1
 80108e4:	f300 80ba 	bgt.w	8010a5c <_dtoa_r+0x884>
 80108e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108ea:	2a00      	cmp	r2, #0
 80108ec:	f000 80b2 	beq.w	8010a54 <_dtoa_r+0x87c>
 80108f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80108f4:	9e07      	ldr	r6, [sp, #28]
 80108f6:	9d04      	ldr	r5, [sp, #16]
 80108f8:	9a04      	ldr	r2, [sp, #16]
 80108fa:	441a      	add	r2, r3
 80108fc:	9204      	str	r2, [sp, #16]
 80108fe:	9a05      	ldr	r2, [sp, #20]
 8010900:	2101      	movs	r1, #1
 8010902:	441a      	add	r2, r3
 8010904:	4620      	mov	r0, r4
 8010906:	9205      	str	r2, [sp, #20]
 8010908:	f000 fbdc 	bl	80110c4 <__i2b>
 801090c:	4607      	mov	r7, r0
 801090e:	2d00      	cmp	r5, #0
 8010910:	dd0c      	ble.n	801092c <_dtoa_r+0x754>
 8010912:	9b05      	ldr	r3, [sp, #20]
 8010914:	2b00      	cmp	r3, #0
 8010916:	dd09      	ble.n	801092c <_dtoa_r+0x754>
 8010918:	42ab      	cmp	r3, r5
 801091a:	9a04      	ldr	r2, [sp, #16]
 801091c:	bfa8      	it	ge
 801091e:	462b      	movge	r3, r5
 8010920:	1ad2      	subs	r2, r2, r3
 8010922:	9204      	str	r2, [sp, #16]
 8010924:	9a05      	ldr	r2, [sp, #20]
 8010926:	1aed      	subs	r5, r5, r3
 8010928:	1ad3      	subs	r3, r2, r3
 801092a:	9305      	str	r3, [sp, #20]
 801092c:	9b07      	ldr	r3, [sp, #28]
 801092e:	b31b      	cbz	r3, 8010978 <_dtoa_r+0x7a0>
 8010930:	9b08      	ldr	r3, [sp, #32]
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 80af 	beq.w	8010a96 <_dtoa_r+0x8be>
 8010938:	2e00      	cmp	r6, #0
 801093a:	dd13      	ble.n	8010964 <_dtoa_r+0x78c>
 801093c:	4639      	mov	r1, r7
 801093e:	4632      	mov	r2, r6
 8010940:	4620      	mov	r0, r4
 8010942:	f000 fc7f 	bl	8011244 <__pow5mult>
 8010946:	ee18 2a10 	vmov	r2, s16
 801094a:	4601      	mov	r1, r0
 801094c:	4607      	mov	r7, r0
 801094e:	4620      	mov	r0, r4
 8010950:	f000 fbce 	bl	80110f0 <__multiply>
 8010954:	ee18 1a10 	vmov	r1, s16
 8010958:	4680      	mov	r8, r0
 801095a:	4620      	mov	r0, r4
 801095c:	f000 fafa 	bl	8010f54 <_Bfree>
 8010960:	ee08 8a10 	vmov	s16, r8
 8010964:	9b07      	ldr	r3, [sp, #28]
 8010966:	1b9a      	subs	r2, r3, r6
 8010968:	d006      	beq.n	8010978 <_dtoa_r+0x7a0>
 801096a:	ee18 1a10 	vmov	r1, s16
 801096e:	4620      	mov	r0, r4
 8010970:	f000 fc68 	bl	8011244 <__pow5mult>
 8010974:	ee08 0a10 	vmov	s16, r0
 8010978:	2101      	movs	r1, #1
 801097a:	4620      	mov	r0, r4
 801097c:	f000 fba2 	bl	80110c4 <__i2b>
 8010980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010982:	2b00      	cmp	r3, #0
 8010984:	4606      	mov	r6, r0
 8010986:	f340 8088 	ble.w	8010a9a <_dtoa_r+0x8c2>
 801098a:	461a      	mov	r2, r3
 801098c:	4601      	mov	r1, r0
 801098e:	4620      	mov	r0, r4
 8010990:	f000 fc58 	bl	8011244 <__pow5mult>
 8010994:	9b06      	ldr	r3, [sp, #24]
 8010996:	2b01      	cmp	r3, #1
 8010998:	4606      	mov	r6, r0
 801099a:	f340 8081 	ble.w	8010aa0 <_dtoa_r+0x8c8>
 801099e:	f04f 0800 	mov.w	r8, #0
 80109a2:	6933      	ldr	r3, [r6, #16]
 80109a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80109a8:	6918      	ldr	r0, [r3, #16]
 80109aa:	f000 fb3b 	bl	8011024 <__hi0bits>
 80109ae:	f1c0 0020 	rsb	r0, r0, #32
 80109b2:	9b05      	ldr	r3, [sp, #20]
 80109b4:	4418      	add	r0, r3
 80109b6:	f010 001f 	ands.w	r0, r0, #31
 80109ba:	f000 8092 	beq.w	8010ae2 <_dtoa_r+0x90a>
 80109be:	f1c0 0320 	rsb	r3, r0, #32
 80109c2:	2b04      	cmp	r3, #4
 80109c4:	f340 808a 	ble.w	8010adc <_dtoa_r+0x904>
 80109c8:	f1c0 001c 	rsb	r0, r0, #28
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	4403      	add	r3, r0
 80109d0:	9304      	str	r3, [sp, #16]
 80109d2:	9b05      	ldr	r3, [sp, #20]
 80109d4:	4403      	add	r3, r0
 80109d6:	4405      	add	r5, r0
 80109d8:	9305      	str	r3, [sp, #20]
 80109da:	9b04      	ldr	r3, [sp, #16]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	dd07      	ble.n	80109f0 <_dtoa_r+0x818>
 80109e0:	ee18 1a10 	vmov	r1, s16
 80109e4:	461a      	mov	r2, r3
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 fc86 	bl	80112f8 <__lshift>
 80109ec:	ee08 0a10 	vmov	s16, r0
 80109f0:	9b05      	ldr	r3, [sp, #20]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	dd05      	ble.n	8010a02 <_dtoa_r+0x82a>
 80109f6:	4631      	mov	r1, r6
 80109f8:	461a      	mov	r2, r3
 80109fa:	4620      	mov	r0, r4
 80109fc:	f000 fc7c 	bl	80112f8 <__lshift>
 8010a00:	4606      	mov	r6, r0
 8010a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d06e      	beq.n	8010ae6 <_dtoa_r+0x90e>
 8010a08:	ee18 0a10 	vmov	r0, s16
 8010a0c:	4631      	mov	r1, r6
 8010a0e:	f000 fce3 	bl	80113d8 <__mcmp>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	da67      	bge.n	8010ae6 <_dtoa_r+0x90e>
 8010a16:	9b00      	ldr	r3, [sp, #0]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	ee18 1a10 	vmov	r1, s16
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	220a      	movs	r2, #10
 8010a22:	2300      	movs	r3, #0
 8010a24:	4620      	mov	r0, r4
 8010a26:	f000 fab7 	bl	8010f98 <__multadd>
 8010a2a:	9b08      	ldr	r3, [sp, #32]
 8010a2c:	ee08 0a10 	vmov	s16, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	f000 81b1 	beq.w	8010d98 <_dtoa_r+0xbc0>
 8010a36:	2300      	movs	r3, #0
 8010a38:	4639      	mov	r1, r7
 8010a3a:	220a      	movs	r2, #10
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f000 faab 	bl	8010f98 <__multadd>
 8010a42:	9b02      	ldr	r3, [sp, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	4607      	mov	r7, r0
 8010a48:	f300 808e 	bgt.w	8010b68 <_dtoa_r+0x990>
 8010a4c:	9b06      	ldr	r3, [sp, #24]
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	dc51      	bgt.n	8010af6 <_dtoa_r+0x91e>
 8010a52:	e089      	b.n	8010b68 <_dtoa_r+0x990>
 8010a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a5a:	e74b      	b.n	80108f4 <_dtoa_r+0x71c>
 8010a5c:	9b03      	ldr	r3, [sp, #12]
 8010a5e:	1e5e      	subs	r6, r3, #1
 8010a60:	9b07      	ldr	r3, [sp, #28]
 8010a62:	42b3      	cmp	r3, r6
 8010a64:	bfbf      	itttt	lt
 8010a66:	9b07      	ldrlt	r3, [sp, #28]
 8010a68:	9607      	strlt	r6, [sp, #28]
 8010a6a:	1af2      	sublt	r2, r6, r3
 8010a6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010a6e:	bfb6      	itet	lt
 8010a70:	189b      	addlt	r3, r3, r2
 8010a72:	1b9e      	subge	r6, r3, r6
 8010a74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010a76:	9b03      	ldr	r3, [sp, #12]
 8010a78:	bfb8      	it	lt
 8010a7a:	2600      	movlt	r6, #0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfb7      	itett	lt
 8010a80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010a84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010a88:	1a9d      	sublt	r5, r3, r2
 8010a8a:	2300      	movlt	r3, #0
 8010a8c:	e734      	b.n	80108f8 <_dtoa_r+0x720>
 8010a8e:	9e07      	ldr	r6, [sp, #28]
 8010a90:	9d04      	ldr	r5, [sp, #16]
 8010a92:	9f08      	ldr	r7, [sp, #32]
 8010a94:	e73b      	b.n	801090e <_dtoa_r+0x736>
 8010a96:	9a07      	ldr	r2, [sp, #28]
 8010a98:	e767      	b.n	801096a <_dtoa_r+0x792>
 8010a9a:	9b06      	ldr	r3, [sp, #24]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	dc18      	bgt.n	8010ad2 <_dtoa_r+0x8fa>
 8010aa0:	f1ba 0f00 	cmp.w	sl, #0
 8010aa4:	d115      	bne.n	8010ad2 <_dtoa_r+0x8fa>
 8010aa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010aaa:	b993      	cbnz	r3, 8010ad2 <_dtoa_r+0x8fa>
 8010aac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ab0:	0d1b      	lsrs	r3, r3, #20
 8010ab2:	051b      	lsls	r3, r3, #20
 8010ab4:	b183      	cbz	r3, 8010ad8 <_dtoa_r+0x900>
 8010ab6:	9b04      	ldr	r3, [sp, #16]
 8010ab8:	3301      	adds	r3, #1
 8010aba:	9304      	str	r3, [sp, #16]
 8010abc:	9b05      	ldr	r3, [sp, #20]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	9305      	str	r3, [sp, #20]
 8010ac2:	f04f 0801 	mov.w	r8, #1
 8010ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f47f af6a 	bne.w	80109a2 <_dtoa_r+0x7ca>
 8010ace:	2001      	movs	r0, #1
 8010ad0:	e76f      	b.n	80109b2 <_dtoa_r+0x7da>
 8010ad2:	f04f 0800 	mov.w	r8, #0
 8010ad6:	e7f6      	b.n	8010ac6 <_dtoa_r+0x8ee>
 8010ad8:	4698      	mov	r8, r3
 8010ada:	e7f4      	b.n	8010ac6 <_dtoa_r+0x8ee>
 8010adc:	f43f af7d 	beq.w	80109da <_dtoa_r+0x802>
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	301c      	adds	r0, #28
 8010ae4:	e772      	b.n	80109cc <_dtoa_r+0x7f4>
 8010ae6:	9b03      	ldr	r3, [sp, #12]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	dc37      	bgt.n	8010b5c <_dtoa_r+0x984>
 8010aec:	9b06      	ldr	r3, [sp, #24]
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	dd34      	ble.n	8010b5c <_dtoa_r+0x984>
 8010af2:	9b03      	ldr	r3, [sp, #12]
 8010af4:	9302      	str	r3, [sp, #8]
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	b96b      	cbnz	r3, 8010b16 <_dtoa_r+0x93e>
 8010afa:	4631      	mov	r1, r6
 8010afc:	2205      	movs	r2, #5
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 fa4a 	bl	8010f98 <__multadd>
 8010b04:	4601      	mov	r1, r0
 8010b06:	4606      	mov	r6, r0
 8010b08:	ee18 0a10 	vmov	r0, s16
 8010b0c:	f000 fc64 	bl	80113d8 <__mcmp>
 8010b10:	2800      	cmp	r0, #0
 8010b12:	f73f adbb 	bgt.w	801068c <_dtoa_r+0x4b4>
 8010b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b18:	9d01      	ldr	r5, [sp, #4]
 8010b1a:	43db      	mvns	r3, r3
 8010b1c:	9300      	str	r3, [sp, #0]
 8010b1e:	f04f 0800 	mov.w	r8, #0
 8010b22:	4631      	mov	r1, r6
 8010b24:	4620      	mov	r0, r4
 8010b26:	f000 fa15 	bl	8010f54 <_Bfree>
 8010b2a:	2f00      	cmp	r7, #0
 8010b2c:	f43f aea4 	beq.w	8010878 <_dtoa_r+0x6a0>
 8010b30:	f1b8 0f00 	cmp.w	r8, #0
 8010b34:	d005      	beq.n	8010b42 <_dtoa_r+0x96a>
 8010b36:	45b8      	cmp	r8, r7
 8010b38:	d003      	beq.n	8010b42 <_dtoa_r+0x96a>
 8010b3a:	4641      	mov	r1, r8
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f000 fa09 	bl	8010f54 <_Bfree>
 8010b42:	4639      	mov	r1, r7
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fa05 	bl	8010f54 <_Bfree>
 8010b4a:	e695      	b.n	8010878 <_dtoa_r+0x6a0>
 8010b4c:	2600      	movs	r6, #0
 8010b4e:	4637      	mov	r7, r6
 8010b50:	e7e1      	b.n	8010b16 <_dtoa_r+0x93e>
 8010b52:	9700      	str	r7, [sp, #0]
 8010b54:	4637      	mov	r7, r6
 8010b56:	e599      	b.n	801068c <_dtoa_r+0x4b4>
 8010b58:	40240000 	.word	0x40240000
 8010b5c:	9b08      	ldr	r3, [sp, #32]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f000 80ca 	beq.w	8010cf8 <_dtoa_r+0xb20>
 8010b64:	9b03      	ldr	r3, [sp, #12]
 8010b66:	9302      	str	r3, [sp, #8]
 8010b68:	2d00      	cmp	r5, #0
 8010b6a:	dd05      	ble.n	8010b78 <_dtoa_r+0x9a0>
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	462a      	mov	r2, r5
 8010b70:	4620      	mov	r0, r4
 8010b72:	f000 fbc1 	bl	80112f8 <__lshift>
 8010b76:	4607      	mov	r7, r0
 8010b78:	f1b8 0f00 	cmp.w	r8, #0
 8010b7c:	d05b      	beq.n	8010c36 <_dtoa_r+0xa5e>
 8010b7e:	6879      	ldr	r1, [r7, #4]
 8010b80:	4620      	mov	r0, r4
 8010b82:	f000 f9a7 	bl	8010ed4 <_Balloc>
 8010b86:	4605      	mov	r5, r0
 8010b88:	b928      	cbnz	r0, 8010b96 <_dtoa_r+0x9be>
 8010b8a:	4b87      	ldr	r3, [pc, #540]	; (8010da8 <_dtoa_r+0xbd0>)
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010b92:	f7ff bb3b 	b.w	801020c <_dtoa_r+0x34>
 8010b96:	693a      	ldr	r2, [r7, #16]
 8010b98:	3202      	adds	r2, #2
 8010b9a:	0092      	lsls	r2, r2, #2
 8010b9c:	f107 010c 	add.w	r1, r7, #12
 8010ba0:	300c      	adds	r0, #12
 8010ba2:	f7fe fb32 	bl	800f20a <memcpy>
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	4629      	mov	r1, r5
 8010baa:	4620      	mov	r0, r4
 8010bac:	f000 fba4 	bl	80112f8 <__lshift>
 8010bb0:	9b01      	ldr	r3, [sp, #4]
 8010bb2:	f103 0901 	add.w	r9, r3, #1
 8010bb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010bba:	4413      	add	r3, r2
 8010bbc:	9305      	str	r3, [sp, #20]
 8010bbe:	f00a 0301 	and.w	r3, sl, #1
 8010bc2:	46b8      	mov	r8, r7
 8010bc4:	9304      	str	r3, [sp, #16]
 8010bc6:	4607      	mov	r7, r0
 8010bc8:	4631      	mov	r1, r6
 8010bca:	ee18 0a10 	vmov	r0, s16
 8010bce:	f7ff fa77 	bl	80100c0 <quorem>
 8010bd2:	4641      	mov	r1, r8
 8010bd4:	9002      	str	r0, [sp, #8]
 8010bd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010bda:	ee18 0a10 	vmov	r0, s16
 8010bde:	f000 fbfb 	bl	80113d8 <__mcmp>
 8010be2:	463a      	mov	r2, r7
 8010be4:	9003      	str	r0, [sp, #12]
 8010be6:	4631      	mov	r1, r6
 8010be8:	4620      	mov	r0, r4
 8010bea:	f000 fc11 	bl	8011410 <__mdiff>
 8010bee:	68c2      	ldr	r2, [r0, #12]
 8010bf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	bb02      	cbnz	r2, 8010c3a <_dtoa_r+0xa62>
 8010bf8:	4601      	mov	r1, r0
 8010bfa:	ee18 0a10 	vmov	r0, s16
 8010bfe:	f000 fbeb 	bl	80113d8 <__mcmp>
 8010c02:	4602      	mov	r2, r0
 8010c04:	4629      	mov	r1, r5
 8010c06:	4620      	mov	r0, r4
 8010c08:	9207      	str	r2, [sp, #28]
 8010c0a:	f000 f9a3 	bl	8010f54 <_Bfree>
 8010c0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010c12:	ea43 0102 	orr.w	r1, r3, r2
 8010c16:	9b04      	ldr	r3, [sp, #16]
 8010c18:	430b      	orrs	r3, r1
 8010c1a:	464d      	mov	r5, r9
 8010c1c:	d10f      	bne.n	8010c3e <_dtoa_r+0xa66>
 8010c1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c22:	d02a      	beq.n	8010c7a <_dtoa_r+0xaa2>
 8010c24:	9b03      	ldr	r3, [sp, #12]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	dd02      	ble.n	8010c30 <_dtoa_r+0xa58>
 8010c2a:	9b02      	ldr	r3, [sp, #8]
 8010c2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010c30:	f88b a000 	strb.w	sl, [fp]
 8010c34:	e775      	b.n	8010b22 <_dtoa_r+0x94a>
 8010c36:	4638      	mov	r0, r7
 8010c38:	e7ba      	b.n	8010bb0 <_dtoa_r+0x9d8>
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	e7e2      	b.n	8010c04 <_dtoa_r+0xa2c>
 8010c3e:	9b03      	ldr	r3, [sp, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	db04      	blt.n	8010c4e <_dtoa_r+0xa76>
 8010c44:	9906      	ldr	r1, [sp, #24]
 8010c46:	430b      	orrs	r3, r1
 8010c48:	9904      	ldr	r1, [sp, #16]
 8010c4a:	430b      	orrs	r3, r1
 8010c4c:	d122      	bne.n	8010c94 <_dtoa_r+0xabc>
 8010c4e:	2a00      	cmp	r2, #0
 8010c50:	ddee      	ble.n	8010c30 <_dtoa_r+0xa58>
 8010c52:	ee18 1a10 	vmov	r1, s16
 8010c56:	2201      	movs	r2, #1
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f000 fb4d 	bl	80112f8 <__lshift>
 8010c5e:	4631      	mov	r1, r6
 8010c60:	ee08 0a10 	vmov	s16, r0
 8010c64:	f000 fbb8 	bl	80113d8 <__mcmp>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	dc03      	bgt.n	8010c74 <_dtoa_r+0xa9c>
 8010c6c:	d1e0      	bne.n	8010c30 <_dtoa_r+0xa58>
 8010c6e:	f01a 0f01 	tst.w	sl, #1
 8010c72:	d0dd      	beq.n	8010c30 <_dtoa_r+0xa58>
 8010c74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c78:	d1d7      	bne.n	8010c2a <_dtoa_r+0xa52>
 8010c7a:	2339      	movs	r3, #57	; 0x39
 8010c7c:	f88b 3000 	strb.w	r3, [fp]
 8010c80:	462b      	mov	r3, r5
 8010c82:	461d      	mov	r5, r3
 8010c84:	3b01      	subs	r3, #1
 8010c86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c8a:	2a39      	cmp	r2, #57	; 0x39
 8010c8c:	d071      	beq.n	8010d72 <_dtoa_r+0xb9a>
 8010c8e:	3201      	adds	r2, #1
 8010c90:	701a      	strb	r2, [r3, #0]
 8010c92:	e746      	b.n	8010b22 <_dtoa_r+0x94a>
 8010c94:	2a00      	cmp	r2, #0
 8010c96:	dd07      	ble.n	8010ca8 <_dtoa_r+0xad0>
 8010c98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c9c:	d0ed      	beq.n	8010c7a <_dtoa_r+0xaa2>
 8010c9e:	f10a 0301 	add.w	r3, sl, #1
 8010ca2:	f88b 3000 	strb.w	r3, [fp]
 8010ca6:	e73c      	b.n	8010b22 <_dtoa_r+0x94a>
 8010ca8:	9b05      	ldr	r3, [sp, #20]
 8010caa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010cae:	4599      	cmp	r9, r3
 8010cb0:	d047      	beq.n	8010d42 <_dtoa_r+0xb6a>
 8010cb2:	ee18 1a10 	vmov	r1, s16
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	220a      	movs	r2, #10
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f000 f96c 	bl	8010f98 <__multadd>
 8010cc0:	45b8      	cmp	r8, r7
 8010cc2:	ee08 0a10 	vmov	s16, r0
 8010cc6:	f04f 0300 	mov.w	r3, #0
 8010cca:	f04f 020a 	mov.w	r2, #10
 8010cce:	4641      	mov	r1, r8
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	d106      	bne.n	8010ce2 <_dtoa_r+0xb0a>
 8010cd4:	f000 f960 	bl	8010f98 <__multadd>
 8010cd8:	4680      	mov	r8, r0
 8010cda:	4607      	mov	r7, r0
 8010cdc:	f109 0901 	add.w	r9, r9, #1
 8010ce0:	e772      	b.n	8010bc8 <_dtoa_r+0x9f0>
 8010ce2:	f000 f959 	bl	8010f98 <__multadd>
 8010ce6:	4639      	mov	r1, r7
 8010ce8:	4680      	mov	r8, r0
 8010cea:	2300      	movs	r3, #0
 8010cec:	220a      	movs	r2, #10
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f000 f952 	bl	8010f98 <__multadd>
 8010cf4:	4607      	mov	r7, r0
 8010cf6:	e7f1      	b.n	8010cdc <_dtoa_r+0xb04>
 8010cf8:	9b03      	ldr	r3, [sp, #12]
 8010cfa:	9302      	str	r3, [sp, #8]
 8010cfc:	9d01      	ldr	r5, [sp, #4]
 8010cfe:	ee18 0a10 	vmov	r0, s16
 8010d02:	4631      	mov	r1, r6
 8010d04:	f7ff f9dc 	bl	80100c0 <quorem>
 8010d08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010d0c:	9b01      	ldr	r3, [sp, #4]
 8010d0e:	f805 ab01 	strb.w	sl, [r5], #1
 8010d12:	1aea      	subs	r2, r5, r3
 8010d14:	9b02      	ldr	r3, [sp, #8]
 8010d16:	4293      	cmp	r3, r2
 8010d18:	dd09      	ble.n	8010d2e <_dtoa_r+0xb56>
 8010d1a:	ee18 1a10 	vmov	r1, s16
 8010d1e:	2300      	movs	r3, #0
 8010d20:	220a      	movs	r2, #10
 8010d22:	4620      	mov	r0, r4
 8010d24:	f000 f938 	bl	8010f98 <__multadd>
 8010d28:	ee08 0a10 	vmov	s16, r0
 8010d2c:	e7e7      	b.n	8010cfe <_dtoa_r+0xb26>
 8010d2e:	9b02      	ldr	r3, [sp, #8]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	bfc8      	it	gt
 8010d34:	461d      	movgt	r5, r3
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	bfd8      	it	le
 8010d3a:	2501      	movle	r5, #1
 8010d3c:	441d      	add	r5, r3
 8010d3e:	f04f 0800 	mov.w	r8, #0
 8010d42:	ee18 1a10 	vmov	r1, s16
 8010d46:	2201      	movs	r2, #1
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f000 fad5 	bl	80112f8 <__lshift>
 8010d4e:	4631      	mov	r1, r6
 8010d50:	ee08 0a10 	vmov	s16, r0
 8010d54:	f000 fb40 	bl	80113d8 <__mcmp>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	dc91      	bgt.n	8010c80 <_dtoa_r+0xaa8>
 8010d5c:	d102      	bne.n	8010d64 <_dtoa_r+0xb8c>
 8010d5e:	f01a 0f01 	tst.w	sl, #1
 8010d62:	d18d      	bne.n	8010c80 <_dtoa_r+0xaa8>
 8010d64:	462b      	mov	r3, r5
 8010d66:	461d      	mov	r5, r3
 8010d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d6c:	2a30      	cmp	r2, #48	; 0x30
 8010d6e:	d0fa      	beq.n	8010d66 <_dtoa_r+0xb8e>
 8010d70:	e6d7      	b.n	8010b22 <_dtoa_r+0x94a>
 8010d72:	9a01      	ldr	r2, [sp, #4]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d184      	bne.n	8010c82 <_dtoa_r+0xaaa>
 8010d78:	9b00      	ldr	r3, [sp, #0]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	2331      	movs	r3, #49	; 0x31
 8010d80:	7013      	strb	r3, [r2, #0]
 8010d82:	e6ce      	b.n	8010b22 <_dtoa_r+0x94a>
 8010d84:	4b09      	ldr	r3, [pc, #36]	; (8010dac <_dtoa_r+0xbd4>)
 8010d86:	f7ff ba95 	b.w	80102b4 <_dtoa_r+0xdc>
 8010d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f47f aa6e 	bne.w	801026e <_dtoa_r+0x96>
 8010d92:	4b07      	ldr	r3, [pc, #28]	; (8010db0 <_dtoa_r+0xbd8>)
 8010d94:	f7ff ba8e 	b.w	80102b4 <_dtoa_r+0xdc>
 8010d98:	9b02      	ldr	r3, [sp, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	dcae      	bgt.n	8010cfc <_dtoa_r+0xb24>
 8010d9e:	9b06      	ldr	r3, [sp, #24]
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	f73f aea8 	bgt.w	8010af6 <_dtoa_r+0x91e>
 8010da6:	e7a9      	b.n	8010cfc <_dtoa_r+0xb24>
 8010da8:	080121b3 	.word	0x080121b3
 8010dac:	08012110 	.word	0x08012110
 8010db0:	08012134 	.word	0x08012134

08010db4 <_localeconv_r>:
 8010db4:	4800      	ldr	r0, [pc, #0]	; (8010db8 <_localeconv_r+0x4>)
 8010db6:	4770      	bx	lr
 8010db8:	200002f4 	.word	0x200002f4

08010dbc <_lseek_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d07      	ldr	r5, [pc, #28]	; (8010ddc <_lseek_r+0x20>)
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	4608      	mov	r0, r1
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	602a      	str	r2, [r5, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	f7f1 fc2a 	bl	8002624 <_lseek>
 8010dd0:	1c43      	adds	r3, r0, #1
 8010dd2:	d102      	bne.n	8010dda <_lseek_r+0x1e>
 8010dd4:	682b      	ldr	r3, [r5, #0]
 8010dd6:	b103      	cbz	r3, 8010dda <_lseek_r+0x1e>
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	20000ae4 	.word	0x20000ae4

08010de0 <__swhatbuf_r>:
 8010de0:	b570      	push	{r4, r5, r6, lr}
 8010de2:	460e      	mov	r6, r1
 8010de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de8:	2900      	cmp	r1, #0
 8010dea:	b096      	sub	sp, #88	; 0x58
 8010dec:	4614      	mov	r4, r2
 8010dee:	461d      	mov	r5, r3
 8010df0:	da08      	bge.n	8010e04 <__swhatbuf_r+0x24>
 8010df2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010df6:	2200      	movs	r2, #0
 8010df8:	602a      	str	r2, [r5, #0]
 8010dfa:	061a      	lsls	r2, r3, #24
 8010dfc:	d410      	bmi.n	8010e20 <__swhatbuf_r+0x40>
 8010dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e02:	e00e      	b.n	8010e22 <__swhatbuf_r+0x42>
 8010e04:	466a      	mov	r2, sp
 8010e06:	f000 ff3f 	bl	8011c88 <_fstat_r>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	dbf1      	blt.n	8010df2 <__swhatbuf_r+0x12>
 8010e0e:	9a01      	ldr	r2, [sp, #4]
 8010e10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e18:	425a      	negs	r2, r3
 8010e1a:	415a      	adcs	r2, r3
 8010e1c:	602a      	str	r2, [r5, #0]
 8010e1e:	e7ee      	b.n	8010dfe <__swhatbuf_r+0x1e>
 8010e20:	2340      	movs	r3, #64	; 0x40
 8010e22:	2000      	movs	r0, #0
 8010e24:	6023      	str	r3, [r4, #0]
 8010e26:	b016      	add	sp, #88	; 0x58
 8010e28:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e2c <__smakebuf_r>:
 8010e2c:	898b      	ldrh	r3, [r1, #12]
 8010e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e30:	079d      	lsls	r5, r3, #30
 8010e32:	4606      	mov	r6, r0
 8010e34:	460c      	mov	r4, r1
 8010e36:	d507      	bpl.n	8010e48 <__smakebuf_r+0x1c>
 8010e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	6123      	str	r3, [r4, #16]
 8010e40:	2301      	movs	r3, #1
 8010e42:	6163      	str	r3, [r4, #20]
 8010e44:	b002      	add	sp, #8
 8010e46:	bd70      	pop	{r4, r5, r6, pc}
 8010e48:	ab01      	add	r3, sp, #4
 8010e4a:	466a      	mov	r2, sp
 8010e4c:	f7ff ffc8 	bl	8010de0 <__swhatbuf_r>
 8010e50:	9900      	ldr	r1, [sp, #0]
 8010e52:	4605      	mov	r5, r0
 8010e54:	4630      	mov	r0, r6
 8010e56:	f7fe fa5b 	bl	800f310 <_malloc_r>
 8010e5a:	b948      	cbnz	r0, 8010e70 <__smakebuf_r+0x44>
 8010e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e60:	059a      	lsls	r2, r3, #22
 8010e62:	d4ef      	bmi.n	8010e44 <__smakebuf_r+0x18>
 8010e64:	f023 0303 	bic.w	r3, r3, #3
 8010e68:	f043 0302 	orr.w	r3, r3, #2
 8010e6c:	81a3      	strh	r3, [r4, #12]
 8010e6e:	e7e3      	b.n	8010e38 <__smakebuf_r+0xc>
 8010e70:	4b0d      	ldr	r3, [pc, #52]	; (8010ea8 <__smakebuf_r+0x7c>)
 8010e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8010e74:	89a3      	ldrh	r3, [r4, #12]
 8010e76:	6020      	str	r0, [r4, #0]
 8010e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e7c:	81a3      	strh	r3, [r4, #12]
 8010e7e:	9b00      	ldr	r3, [sp, #0]
 8010e80:	6163      	str	r3, [r4, #20]
 8010e82:	9b01      	ldr	r3, [sp, #4]
 8010e84:	6120      	str	r0, [r4, #16]
 8010e86:	b15b      	cbz	r3, 8010ea0 <__smakebuf_r+0x74>
 8010e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f000 ff0d 	bl	8011cac <_isatty_r>
 8010e92:	b128      	cbz	r0, 8010ea0 <__smakebuf_r+0x74>
 8010e94:	89a3      	ldrh	r3, [r4, #12]
 8010e96:	f023 0303 	bic.w	r3, r3, #3
 8010e9a:	f043 0301 	orr.w	r3, r3, #1
 8010e9e:	81a3      	strh	r3, [r4, #12]
 8010ea0:	89a0      	ldrh	r0, [r4, #12]
 8010ea2:	4305      	orrs	r5, r0
 8010ea4:	81a5      	strh	r5, [r4, #12]
 8010ea6:	e7cd      	b.n	8010e44 <__smakebuf_r+0x18>
 8010ea8:	0800f019 	.word	0x0800f019

08010eac <malloc>:
 8010eac:	4b02      	ldr	r3, [pc, #8]	; (8010eb8 <malloc+0xc>)
 8010eae:	4601      	mov	r1, r0
 8010eb0:	6818      	ldr	r0, [r3, #0]
 8010eb2:	f7fe ba2d 	b.w	800f310 <_malloc_r>
 8010eb6:	bf00      	nop
 8010eb8:	200001a0 	.word	0x200001a0

08010ebc <__malloc_lock>:
 8010ebc:	4801      	ldr	r0, [pc, #4]	; (8010ec4 <__malloc_lock+0x8>)
 8010ebe:	f7fe b9a2 	b.w	800f206 <__retarget_lock_acquire_recursive>
 8010ec2:	bf00      	nop
 8010ec4:	20000ad8 	.word	0x20000ad8

08010ec8 <__malloc_unlock>:
 8010ec8:	4801      	ldr	r0, [pc, #4]	; (8010ed0 <__malloc_unlock+0x8>)
 8010eca:	f7fe b99d 	b.w	800f208 <__retarget_lock_release_recursive>
 8010ece:	bf00      	nop
 8010ed0:	20000ad8 	.word	0x20000ad8

08010ed4 <_Balloc>:
 8010ed4:	b570      	push	{r4, r5, r6, lr}
 8010ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ed8:	4604      	mov	r4, r0
 8010eda:	460d      	mov	r5, r1
 8010edc:	b976      	cbnz	r6, 8010efc <_Balloc+0x28>
 8010ede:	2010      	movs	r0, #16
 8010ee0:	f7ff ffe4 	bl	8010eac <malloc>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	6260      	str	r0, [r4, #36]	; 0x24
 8010ee8:	b920      	cbnz	r0, 8010ef4 <_Balloc+0x20>
 8010eea:	4b18      	ldr	r3, [pc, #96]	; (8010f4c <_Balloc+0x78>)
 8010eec:	4818      	ldr	r0, [pc, #96]	; (8010f50 <_Balloc+0x7c>)
 8010eee:	2166      	movs	r1, #102	; 0x66
 8010ef0:	f000 fe9a 	bl	8011c28 <__assert_func>
 8010ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ef8:	6006      	str	r6, [r0, #0]
 8010efa:	60c6      	str	r6, [r0, #12]
 8010efc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010efe:	68f3      	ldr	r3, [r6, #12]
 8010f00:	b183      	cbz	r3, 8010f24 <_Balloc+0x50>
 8010f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f0a:	b9b8      	cbnz	r0, 8010f3c <_Balloc+0x68>
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8010f12:	1d72      	adds	r2, r6, #5
 8010f14:	0092      	lsls	r2, r2, #2
 8010f16:	4620      	mov	r0, r4
 8010f18:	f000 fb60 	bl	80115dc <_calloc_r>
 8010f1c:	b160      	cbz	r0, 8010f38 <_Balloc+0x64>
 8010f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f22:	e00e      	b.n	8010f42 <_Balloc+0x6e>
 8010f24:	2221      	movs	r2, #33	; 0x21
 8010f26:	2104      	movs	r1, #4
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f000 fb57 	bl	80115dc <_calloc_r>
 8010f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f30:	60f0      	str	r0, [r6, #12]
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1e4      	bne.n	8010f02 <_Balloc+0x2e>
 8010f38:	2000      	movs	r0, #0
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	6802      	ldr	r2, [r0, #0]
 8010f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f42:	2300      	movs	r3, #0
 8010f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f48:	e7f7      	b.n	8010f3a <_Balloc+0x66>
 8010f4a:	bf00      	nop
 8010f4c:	08012141 	.word	0x08012141
 8010f50:	080121c4 	.word	0x080121c4

08010f54 <_Bfree>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010f58:	4605      	mov	r5, r0
 8010f5a:	460c      	mov	r4, r1
 8010f5c:	b976      	cbnz	r6, 8010f7c <_Bfree+0x28>
 8010f5e:	2010      	movs	r0, #16
 8010f60:	f7ff ffa4 	bl	8010eac <malloc>
 8010f64:	4602      	mov	r2, r0
 8010f66:	6268      	str	r0, [r5, #36]	; 0x24
 8010f68:	b920      	cbnz	r0, 8010f74 <_Bfree+0x20>
 8010f6a:	4b09      	ldr	r3, [pc, #36]	; (8010f90 <_Bfree+0x3c>)
 8010f6c:	4809      	ldr	r0, [pc, #36]	; (8010f94 <_Bfree+0x40>)
 8010f6e:	218a      	movs	r1, #138	; 0x8a
 8010f70:	f000 fe5a 	bl	8011c28 <__assert_func>
 8010f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f78:	6006      	str	r6, [r0, #0]
 8010f7a:	60c6      	str	r6, [r0, #12]
 8010f7c:	b13c      	cbz	r4, 8010f8e <_Bfree+0x3a>
 8010f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010f80:	6862      	ldr	r2, [r4, #4]
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f88:	6021      	str	r1, [r4, #0]
 8010f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	08012141 	.word	0x08012141
 8010f94:	080121c4 	.word	0x080121c4

08010f98 <__multadd>:
 8010f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f9c:	690d      	ldr	r5, [r1, #16]
 8010f9e:	4607      	mov	r7, r0
 8010fa0:	460c      	mov	r4, r1
 8010fa2:	461e      	mov	r6, r3
 8010fa4:	f101 0c14 	add.w	ip, r1, #20
 8010fa8:	2000      	movs	r0, #0
 8010faa:	f8dc 3000 	ldr.w	r3, [ip]
 8010fae:	b299      	uxth	r1, r3
 8010fb0:	fb02 6101 	mla	r1, r2, r1, r6
 8010fb4:	0c1e      	lsrs	r6, r3, #16
 8010fb6:	0c0b      	lsrs	r3, r1, #16
 8010fb8:	fb02 3306 	mla	r3, r2, r6, r3
 8010fbc:	b289      	uxth	r1, r1
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010fc4:	4285      	cmp	r5, r0
 8010fc6:	f84c 1b04 	str.w	r1, [ip], #4
 8010fca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010fce:	dcec      	bgt.n	8010faa <__multadd+0x12>
 8010fd0:	b30e      	cbz	r6, 8011016 <__multadd+0x7e>
 8010fd2:	68a3      	ldr	r3, [r4, #8]
 8010fd4:	42ab      	cmp	r3, r5
 8010fd6:	dc19      	bgt.n	801100c <__multadd+0x74>
 8010fd8:	6861      	ldr	r1, [r4, #4]
 8010fda:	4638      	mov	r0, r7
 8010fdc:	3101      	adds	r1, #1
 8010fde:	f7ff ff79 	bl	8010ed4 <_Balloc>
 8010fe2:	4680      	mov	r8, r0
 8010fe4:	b928      	cbnz	r0, 8010ff2 <__multadd+0x5a>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	4b0c      	ldr	r3, [pc, #48]	; (801101c <__multadd+0x84>)
 8010fea:	480d      	ldr	r0, [pc, #52]	; (8011020 <__multadd+0x88>)
 8010fec:	21b5      	movs	r1, #181	; 0xb5
 8010fee:	f000 fe1b 	bl	8011c28 <__assert_func>
 8010ff2:	6922      	ldr	r2, [r4, #16]
 8010ff4:	3202      	adds	r2, #2
 8010ff6:	f104 010c 	add.w	r1, r4, #12
 8010ffa:	0092      	lsls	r2, r2, #2
 8010ffc:	300c      	adds	r0, #12
 8010ffe:	f7fe f904 	bl	800f20a <memcpy>
 8011002:	4621      	mov	r1, r4
 8011004:	4638      	mov	r0, r7
 8011006:	f7ff ffa5 	bl	8010f54 <_Bfree>
 801100a:	4644      	mov	r4, r8
 801100c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011010:	3501      	adds	r5, #1
 8011012:	615e      	str	r6, [r3, #20]
 8011014:	6125      	str	r5, [r4, #16]
 8011016:	4620      	mov	r0, r4
 8011018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801101c:	080121b3 	.word	0x080121b3
 8011020:	080121c4 	.word	0x080121c4

08011024 <__hi0bits>:
 8011024:	0c03      	lsrs	r3, r0, #16
 8011026:	041b      	lsls	r3, r3, #16
 8011028:	b9d3      	cbnz	r3, 8011060 <__hi0bits+0x3c>
 801102a:	0400      	lsls	r0, r0, #16
 801102c:	2310      	movs	r3, #16
 801102e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011032:	bf04      	itt	eq
 8011034:	0200      	lsleq	r0, r0, #8
 8011036:	3308      	addeq	r3, #8
 8011038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801103c:	bf04      	itt	eq
 801103e:	0100      	lsleq	r0, r0, #4
 8011040:	3304      	addeq	r3, #4
 8011042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011046:	bf04      	itt	eq
 8011048:	0080      	lsleq	r0, r0, #2
 801104a:	3302      	addeq	r3, #2
 801104c:	2800      	cmp	r0, #0
 801104e:	db05      	blt.n	801105c <__hi0bits+0x38>
 8011050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011054:	f103 0301 	add.w	r3, r3, #1
 8011058:	bf08      	it	eq
 801105a:	2320      	moveq	r3, #32
 801105c:	4618      	mov	r0, r3
 801105e:	4770      	bx	lr
 8011060:	2300      	movs	r3, #0
 8011062:	e7e4      	b.n	801102e <__hi0bits+0xa>

08011064 <__lo0bits>:
 8011064:	6803      	ldr	r3, [r0, #0]
 8011066:	f013 0207 	ands.w	r2, r3, #7
 801106a:	4601      	mov	r1, r0
 801106c:	d00b      	beq.n	8011086 <__lo0bits+0x22>
 801106e:	07da      	lsls	r2, r3, #31
 8011070:	d423      	bmi.n	80110ba <__lo0bits+0x56>
 8011072:	0798      	lsls	r0, r3, #30
 8011074:	bf49      	itett	mi
 8011076:	085b      	lsrmi	r3, r3, #1
 8011078:	089b      	lsrpl	r3, r3, #2
 801107a:	2001      	movmi	r0, #1
 801107c:	600b      	strmi	r3, [r1, #0]
 801107e:	bf5c      	itt	pl
 8011080:	600b      	strpl	r3, [r1, #0]
 8011082:	2002      	movpl	r0, #2
 8011084:	4770      	bx	lr
 8011086:	b298      	uxth	r0, r3
 8011088:	b9a8      	cbnz	r0, 80110b6 <__lo0bits+0x52>
 801108a:	0c1b      	lsrs	r3, r3, #16
 801108c:	2010      	movs	r0, #16
 801108e:	b2da      	uxtb	r2, r3
 8011090:	b90a      	cbnz	r2, 8011096 <__lo0bits+0x32>
 8011092:	3008      	adds	r0, #8
 8011094:	0a1b      	lsrs	r3, r3, #8
 8011096:	071a      	lsls	r2, r3, #28
 8011098:	bf04      	itt	eq
 801109a:	091b      	lsreq	r3, r3, #4
 801109c:	3004      	addeq	r0, #4
 801109e:	079a      	lsls	r2, r3, #30
 80110a0:	bf04      	itt	eq
 80110a2:	089b      	lsreq	r3, r3, #2
 80110a4:	3002      	addeq	r0, #2
 80110a6:	07da      	lsls	r2, r3, #31
 80110a8:	d403      	bmi.n	80110b2 <__lo0bits+0x4e>
 80110aa:	085b      	lsrs	r3, r3, #1
 80110ac:	f100 0001 	add.w	r0, r0, #1
 80110b0:	d005      	beq.n	80110be <__lo0bits+0x5a>
 80110b2:	600b      	str	r3, [r1, #0]
 80110b4:	4770      	bx	lr
 80110b6:	4610      	mov	r0, r2
 80110b8:	e7e9      	b.n	801108e <__lo0bits+0x2a>
 80110ba:	2000      	movs	r0, #0
 80110bc:	4770      	bx	lr
 80110be:	2020      	movs	r0, #32
 80110c0:	4770      	bx	lr
	...

080110c4 <__i2b>:
 80110c4:	b510      	push	{r4, lr}
 80110c6:	460c      	mov	r4, r1
 80110c8:	2101      	movs	r1, #1
 80110ca:	f7ff ff03 	bl	8010ed4 <_Balloc>
 80110ce:	4602      	mov	r2, r0
 80110d0:	b928      	cbnz	r0, 80110de <__i2b+0x1a>
 80110d2:	4b05      	ldr	r3, [pc, #20]	; (80110e8 <__i2b+0x24>)
 80110d4:	4805      	ldr	r0, [pc, #20]	; (80110ec <__i2b+0x28>)
 80110d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80110da:	f000 fda5 	bl	8011c28 <__assert_func>
 80110de:	2301      	movs	r3, #1
 80110e0:	6144      	str	r4, [r0, #20]
 80110e2:	6103      	str	r3, [r0, #16]
 80110e4:	bd10      	pop	{r4, pc}
 80110e6:	bf00      	nop
 80110e8:	080121b3 	.word	0x080121b3
 80110ec:	080121c4 	.word	0x080121c4

080110f0 <__multiply>:
 80110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f4:	4691      	mov	r9, r2
 80110f6:	690a      	ldr	r2, [r1, #16]
 80110f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	bfb8      	it	lt
 8011100:	460b      	movlt	r3, r1
 8011102:	460c      	mov	r4, r1
 8011104:	bfbc      	itt	lt
 8011106:	464c      	movlt	r4, r9
 8011108:	4699      	movlt	r9, r3
 801110a:	6927      	ldr	r7, [r4, #16]
 801110c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	6861      	ldr	r1, [r4, #4]
 8011114:	eb07 060a 	add.w	r6, r7, sl
 8011118:	42b3      	cmp	r3, r6
 801111a:	b085      	sub	sp, #20
 801111c:	bfb8      	it	lt
 801111e:	3101      	addlt	r1, #1
 8011120:	f7ff fed8 	bl	8010ed4 <_Balloc>
 8011124:	b930      	cbnz	r0, 8011134 <__multiply+0x44>
 8011126:	4602      	mov	r2, r0
 8011128:	4b44      	ldr	r3, [pc, #272]	; (801123c <__multiply+0x14c>)
 801112a:	4845      	ldr	r0, [pc, #276]	; (8011240 <__multiply+0x150>)
 801112c:	f240 115d 	movw	r1, #349	; 0x15d
 8011130:	f000 fd7a 	bl	8011c28 <__assert_func>
 8011134:	f100 0514 	add.w	r5, r0, #20
 8011138:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801113c:	462b      	mov	r3, r5
 801113e:	2200      	movs	r2, #0
 8011140:	4543      	cmp	r3, r8
 8011142:	d321      	bcc.n	8011188 <__multiply+0x98>
 8011144:	f104 0314 	add.w	r3, r4, #20
 8011148:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801114c:	f109 0314 	add.w	r3, r9, #20
 8011150:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011154:	9202      	str	r2, [sp, #8]
 8011156:	1b3a      	subs	r2, r7, r4
 8011158:	3a15      	subs	r2, #21
 801115a:	f022 0203 	bic.w	r2, r2, #3
 801115e:	3204      	adds	r2, #4
 8011160:	f104 0115 	add.w	r1, r4, #21
 8011164:	428f      	cmp	r7, r1
 8011166:	bf38      	it	cc
 8011168:	2204      	movcc	r2, #4
 801116a:	9201      	str	r2, [sp, #4]
 801116c:	9a02      	ldr	r2, [sp, #8]
 801116e:	9303      	str	r3, [sp, #12]
 8011170:	429a      	cmp	r2, r3
 8011172:	d80c      	bhi.n	801118e <__multiply+0x9e>
 8011174:	2e00      	cmp	r6, #0
 8011176:	dd03      	ble.n	8011180 <__multiply+0x90>
 8011178:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801117c:	2b00      	cmp	r3, #0
 801117e:	d05a      	beq.n	8011236 <__multiply+0x146>
 8011180:	6106      	str	r6, [r0, #16]
 8011182:	b005      	add	sp, #20
 8011184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011188:	f843 2b04 	str.w	r2, [r3], #4
 801118c:	e7d8      	b.n	8011140 <__multiply+0x50>
 801118e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011192:	f1ba 0f00 	cmp.w	sl, #0
 8011196:	d024      	beq.n	80111e2 <__multiply+0xf2>
 8011198:	f104 0e14 	add.w	lr, r4, #20
 801119c:	46a9      	mov	r9, r5
 801119e:	f04f 0c00 	mov.w	ip, #0
 80111a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80111a6:	f8d9 1000 	ldr.w	r1, [r9]
 80111aa:	fa1f fb82 	uxth.w	fp, r2
 80111ae:	b289      	uxth	r1, r1
 80111b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80111b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80111b8:	f8d9 2000 	ldr.w	r2, [r9]
 80111bc:	4461      	add	r1, ip
 80111be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80111c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80111ca:	b289      	uxth	r1, r1
 80111cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80111d0:	4577      	cmp	r7, lr
 80111d2:	f849 1b04 	str.w	r1, [r9], #4
 80111d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111da:	d8e2      	bhi.n	80111a2 <__multiply+0xb2>
 80111dc:	9a01      	ldr	r2, [sp, #4]
 80111de:	f845 c002 	str.w	ip, [r5, r2]
 80111e2:	9a03      	ldr	r2, [sp, #12]
 80111e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80111e8:	3304      	adds	r3, #4
 80111ea:	f1b9 0f00 	cmp.w	r9, #0
 80111ee:	d020      	beq.n	8011232 <__multiply+0x142>
 80111f0:	6829      	ldr	r1, [r5, #0]
 80111f2:	f104 0c14 	add.w	ip, r4, #20
 80111f6:	46ae      	mov	lr, r5
 80111f8:	f04f 0a00 	mov.w	sl, #0
 80111fc:	f8bc b000 	ldrh.w	fp, [ip]
 8011200:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011204:	fb09 220b 	mla	r2, r9, fp, r2
 8011208:	4492      	add	sl, r2
 801120a:	b289      	uxth	r1, r1
 801120c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011210:	f84e 1b04 	str.w	r1, [lr], #4
 8011214:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011218:	f8be 1000 	ldrh.w	r1, [lr]
 801121c:	0c12      	lsrs	r2, r2, #16
 801121e:	fb09 1102 	mla	r1, r9, r2, r1
 8011222:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011226:	4567      	cmp	r7, ip
 8011228:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801122c:	d8e6      	bhi.n	80111fc <__multiply+0x10c>
 801122e:	9a01      	ldr	r2, [sp, #4]
 8011230:	50a9      	str	r1, [r5, r2]
 8011232:	3504      	adds	r5, #4
 8011234:	e79a      	b.n	801116c <__multiply+0x7c>
 8011236:	3e01      	subs	r6, #1
 8011238:	e79c      	b.n	8011174 <__multiply+0x84>
 801123a:	bf00      	nop
 801123c:	080121b3 	.word	0x080121b3
 8011240:	080121c4 	.word	0x080121c4

08011244 <__pow5mult>:
 8011244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011248:	4615      	mov	r5, r2
 801124a:	f012 0203 	ands.w	r2, r2, #3
 801124e:	4606      	mov	r6, r0
 8011250:	460f      	mov	r7, r1
 8011252:	d007      	beq.n	8011264 <__pow5mult+0x20>
 8011254:	4c25      	ldr	r4, [pc, #148]	; (80112ec <__pow5mult+0xa8>)
 8011256:	3a01      	subs	r2, #1
 8011258:	2300      	movs	r3, #0
 801125a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801125e:	f7ff fe9b 	bl	8010f98 <__multadd>
 8011262:	4607      	mov	r7, r0
 8011264:	10ad      	asrs	r5, r5, #2
 8011266:	d03d      	beq.n	80112e4 <__pow5mult+0xa0>
 8011268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801126a:	b97c      	cbnz	r4, 801128c <__pow5mult+0x48>
 801126c:	2010      	movs	r0, #16
 801126e:	f7ff fe1d 	bl	8010eac <malloc>
 8011272:	4602      	mov	r2, r0
 8011274:	6270      	str	r0, [r6, #36]	; 0x24
 8011276:	b928      	cbnz	r0, 8011284 <__pow5mult+0x40>
 8011278:	4b1d      	ldr	r3, [pc, #116]	; (80112f0 <__pow5mult+0xac>)
 801127a:	481e      	ldr	r0, [pc, #120]	; (80112f4 <__pow5mult+0xb0>)
 801127c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011280:	f000 fcd2 	bl	8011c28 <__assert_func>
 8011284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011288:	6004      	str	r4, [r0, #0]
 801128a:	60c4      	str	r4, [r0, #12]
 801128c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011294:	b94c      	cbnz	r4, 80112aa <__pow5mult+0x66>
 8011296:	f240 2171 	movw	r1, #625	; 0x271
 801129a:	4630      	mov	r0, r6
 801129c:	f7ff ff12 	bl	80110c4 <__i2b>
 80112a0:	2300      	movs	r3, #0
 80112a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80112a6:	4604      	mov	r4, r0
 80112a8:	6003      	str	r3, [r0, #0]
 80112aa:	f04f 0900 	mov.w	r9, #0
 80112ae:	07eb      	lsls	r3, r5, #31
 80112b0:	d50a      	bpl.n	80112c8 <__pow5mult+0x84>
 80112b2:	4639      	mov	r1, r7
 80112b4:	4622      	mov	r2, r4
 80112b6:	4630      	mov	r0, r6
 80112b8:	f7ff ff1a 	bl	80110f0 <__multiply>
 80112bc:	4639      	mov	r1, r7
 80112be:	4680      	mov	r8, r0
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ff fe47 	bl	8010f54 <_Bfree>
 80112c6:	4647      	mov	r7, r8
 80112c8:	106d      	asrs	r5, r5, #1
 80112ca:	d00b      	beq.n	80112e4 <__pow5mult+0xa0>
 80112cc:	6820      	ldr	r0, [r4, #0]
 80112ce:	b938      	cbnz	r0, 80112e0 <__pow5mult+0x9c>
 80112d0:	4622      	mov	r2, r4
 80112d2:	4621      	mov	r1, r4
 80112d4:	4630      	mov	r0, r6
 80112d6:	f7ff ff0b 	bl	80110f0 <__multiply>
 80112da:	6020      	str	r0, [r4, #0]
 80112dc:	f8c0 9000 	str.w	r9, [r0]
 80112e0:	4604      	mov	r4, r0
 80112e2:	e7e4      	b.n	80112ae <__pow5mult+0x6a>
 80112e4:	4638      	mov	r0, r7
 80112e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ea:	bf00      	nop
 80112ec:	08012310 	.word	0x08012310
 80112f0:	08012141 	.word	0x08012141
 80112f4:	080121c4 	.word	0x080121c4

080112f8 <__lshift>:
 80112f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112fc:	460c      	mov	r4, r1
 80112fe:	6849      	ldr	r1, [r1, #4]
 8011300:	6923      	ldr	r3, [r4, #16]
 8011302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011306:	68a3      	ldr	r3, [r4, #8]
 8011308:	4607      	mov	r7, r0
 801130a:	4691      	mov	r9, r2
 801130c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011310:	f108 0601 	add.w	r6, r8, #1
 8011314:	42b3      	cmp	r3, r6
 8011316:	db0b      	blt.n	8011330 <__lshift+0x38>
 8011318:	4638      	mov	r0, r7
 801131a:	f7ff fddb 	bl	8010ed4 <_Balloc>
 801131e:	4605      	mov	r5, r0
 8011320:	b948      	cbnz	r0, 8011336 <__lshift+0x3e>
 8011322:	4602      	mov	r2, r0
 8011324:	4b2a      	ldr	r3, [pc, #168]	; (80113d0 <__lshift+0xd8>)
 8011326:	482b      	ldr	r0, [pc, #172]	; (80113d4 <__lshift+0xdc>)
 8011328:	f240 11d9 	movw	r1, #473	; 0x1d9
 801132c:	f000 fc7c 	bl	8011c28 <__assert_func>
 8011330:	3101      	adds	r1, #1
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	e7ee      	b.n	8011314 <__lshift+0x1c>
 8011336:	2300      	movs	r3, #0
 8011338:	f100 0114 	add.w	r1, r0, #20
 801133c:	f100 0210 	add.w	r2, r0, #16
 8011340:	4618      	mov	r0, r3
 8011342:	4553      	cmp	r3, sl
 8011344:	db37      	blt.n	80113b6 <__lshift+0xbe>
 8011346:	6920      	ldr	r0, [r4, #16]
 8011348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801134c:	f104 0314 	add.w	r3, r4, #20
 8011350:	f019 091f 	ands.w	r9, r9, #31
 8011354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011358:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801135c:	d02f      	beq.n	80113be <__lshift+0xc6>
 801135e:	f1c9 0e20 	rsb	lr, r9, #32
 8011362:	468a      	mov	sl, r1
 8011364:	f04f 0c00 	mov.w	ip, #0
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	fa02 f209 	lsl.w	r2, r2, r9
 801136e:	ea42 020c 	orr.w	r2, r2, ip
 8011372:	f84a 2b04 	str.w	r2, [sl], #4
 8011376:	f853 2b04 	ldr.w	r2, [r3], #4
 801137a:	4298      	cmp	r0, r3
 801137c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011380:	d8f2      	bhi.n	8011368 <__lshift+0x70>
 8011382:	1b03      	subs	r3, r0, r4
 8011384:	3b15      	subs	r3, #21
 8011386:	f023 0303 	bic.w	r3, r3, #3
 801138a:	3304      	adds	r3, #4
 801138c:	f104 0215 	add.w	r2, r4, #21
 8011390:	4290      	cmp	r0, r2
 8011392:	bf38      	it	cc
 8011394:	2304      	movcc	r3, #4
 8011396:	f841 c003 	str.w	ip, [r1, r3]
 801139a:	f1bc 0f00 	cmp.w	ip, #0
 801139e:	d001      	beq.n	80113a4 <__lshift+0xac>
 80113a0:	f108 0602 	add.w	r6, r8, #2
 80113a4:	3e01      	subs	r6, #1
 80113a6:	4638      	mov	r0, r7
 80113a8:	612e      	str	r6, [r5, #16]
 80113aa:	4621      	mov	r1, r4
 80113ac:	f7ff fdd2 	bl	8010f54 <_Bfree>
 80113b0:	4628      	mov	r0, r5
 80113b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80113ba:	3301      	adds	r3, #1
 80113bc:	e7c1      	b.n	8011342 <__lshift+0x4a>
 80113be:	3904      	subs	r1, #4
 80113c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80113c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80113c8:	4298      	cmp	r0, r3
 80113ca:	d8f9      	bhi.n	80113c0 <__lshift+0xc8>
 80113cc:	e7ea      	b.n	80113a4 <__lshift+0xac>
 80113ce:	bf00      	nop
 80113d0:	080121b3 	.word	0x080121b3
 80113d4:	080121c4 	.word	0x080121c4

080113d8 <__mcmp>:
 80113d8:	b530      	push	{r4, r5, lr}
 80113da:	6902      	ldr	r2, [r0, #16]
 80113dc:	690c      	ldr	r4, [r1, #16]
 80113de:	1b12      	subs	r2, r2, r4
 80113e0:	d10e      	bne.n	8011400 <__mcmp+0x28>
 80113e2:	f100 0314 	add.w	r3, r0, #20
 80113e6:	3114      	adds	r1, #20
 80113e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80113ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80113f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80113f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80113f8:	42a5      	cmp	r5, r4
 80113fa:	d003      	beq.n	8011404 <__mcmp+0x2c>
 80113fc:	d305      	bcc.n	801140a <__mcmp+0x32>
 80113fe:	2201      	movs	r2, #1
 8011400:	4610      	mov	r0, r2
 8011402:	bd30      	pop	{r4, r5, pc}
 8011404:	4283      	cmp	r3, r0
 8011406:	d3f3      	bcc.n	80113f0 <__mcmp+0x18>
 8011408:	e7fa      	b.n	8011400 <__mcmp+0x28>
 801140a:	f04f 32ff 	mov.w	r2, #4294967295
 801140e:	e7f7      	b.n	8011400 <__mcmp+0x28>

08011410 <__mdiff>:
 8011410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011414:	460c      	mov	r4, r1
 8011416:	4606      	mov	r6, r0
 8011418:	4611      	mov	r1, r2
 801141a:	4620      	mov	r0, r4
 801141c:	4690      	mov	r8, r2
 801141e:	f7ff ffdb 	bl	80113d8 <__mcmp>
 8011422:	1e05      	subs	r5, r0, #0
 8011424:	d110      	bne.n	8011448 <__mdiff+0x38>
 8011426:	4629      	mov	r1, r5
 8011428:	4630      	mov	r0, r6
 801142a:	f7ff fd53 	bl	8010ed4 <_Balloc>
 801142e:	b930      	cbnz	r0, 801143e <__mdiff+0x2e>
 8011430:	4b3a      	ldr	r3, [pc, #232]	; (801151c <__mdiff+0x10c>)
 8011432:	4602      	mov	r2, r0
 8011434:	f240 2132 	movw	r1, #562	; 0x232
 8011438:	4839      	ldr	r0, [pc, #228]	; (8011520 <__mdiff+0x110>)
 801143a:	f000 fbf5 	bl	8011c28 <__assert_func>
 801143e:	2301      	movs	r3, #1
 8011440:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011444:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011448:	bfa4      	itt	ge
 801144a:	4643      	movge	r3, r8
 801144c:	46a0      	movge	r8, r4
 801144e:	4630      	mov	r0, r6
 8011450:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011454:	bfa6      	itte	ge
 8011456:	461c      	movge	r4, r3
 8011458:	2500      	movge	r5, #0
 801145a:	2501      	movlt	r5, #1
 801145c:	f7ff fd3a 	bl	8010ed4 <_Balloc>
 8011460:	b920      	cbnz	r0, 801146c <__mdiff+0x5c>
 8011462:	4b2e      	ldr	r3, [pc, #184]	; (801151c <__mdiff+0x10c>)
 8011464:	4602      	mov	r2, r0
 8011466:	f44f 7110 	mov.w	r1, #576	; 0x240
 801146a:	e7e5      	b.n	8011438 <__mdiff+0x28>
 801146c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011470:	6926      	ldr	r6, [r4, #16]
 8011472:	60c5      	str	r5, [r0, #12]
 8011474:	f104 0914 	add.w	r9, r4, #20
 8011478:	f108 0514 	add.w	r5, r8, #20
 801147c:	f100 0e14 	add.w	lr, r0, #20
 8011480:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011484:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011488:	f108 0210 	add.w	r2, r8, #16
 801148c:	46f2      	mov	sl, lr
 801148e:	2100      	movs	r1, #0
 8011490:	f859 3b04 	ldr.w	r3, [r9], #4
 8011494:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011498:	fa1f f883 	uxth.w	r8, r3
 801149c:	fa11 f18b 	uxtah	r1, r1, fp
 80114a0:	0c1b      	lsrs	r3, r3, #16
 80114a2:	eba1 0808 	sub.w	r8, r1, r8
 80114a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80114aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80114ae:	fa1f f888 	uxth.w	r8, r8
 80114b2:	1419      	asrs	r1, r3, #16
 80114b4:	454e      	cmp	r6, r9
 80114b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80114ba:	f84a 3b04 	str.w	r3, [sl], #4
 80114be:	d8e7      	bhi.n	8011490 <__mdiff+0x80>
 80114c0:	1b33      	subs	r3, r6, r4
 80114c2:	3b15      	subs	r3, #21
 80114c4:	f023 0303 	bic.w	r3, r3, #3
 80114c8:	3304      	adds	r3, #4
 80114ca:	3415      	adds	r4, #21
 80114cc:	42a6      	cmp	r6, r4
 80114ce:	bf38      	it	cc
 80114d0:	2304      	movcc	r3, #4
 80114d2:	441d      	add	r5, r3
 80114d4:	4473      	add	r3, lr
 80114d6:	469e      	mov	lr, r3
 80114d8:	462e      	mov	r6, r5
 80114da:	4566      	cmp	r6, ip
 80114dc:	d30e      	bcc.n	80114fc <__mdiff+0xec>
 80114de:	f10c 0203 	add.w	r2, ip, #3
 80114e2:	1b52      	subs	r2, r2, r5
 80114e4:	f022 0203 	bic.w	r2, r2, #3
 80114e8:	3d03      	subs	r5, #3
 80114ea:	45ac      	cmp	ip, r5
 80114ec:	bf38      	it	cc
 80114ee:	2200      	movcc	r2, #0
 80114f0:	441a      	add	r2, r3
 80114f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80114f6:	b17b      	cbz	r3, 8011518 <__mdiff+0x108>
 80114f8:	6107      	str	r7, [r0, #16]
 80114fa:	e7a3      	b.n	8011444 <__mdiff+0x34>
 80114fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8011500:	fa11 f288 	uxtah	r2, r1, r8
 8011504:	1414      	asrs	r4, r2, #16
 8011506:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801150a:	b292      	uxth	r2, r2
 801150c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011510:	f84e 2b04 	str.w	r2, [lr], #4
 8011514:	1421      	asrs	r1, r4, #16
 8011516:	e7e0      	b.n	80114da <__mdiff+0xca>
 8011518:	3f01      	subs	r7, #1
 801151a:	e7ea      	b.n	80114f2 <__mdiff+0xe2>
 801151c:	080121b3 	.word	0x080121b3
 8011520:	080121c4 	.word	0x080121c4

08011524 <__d2b>:
 8011524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011528:	4689      	mov	r9, r1
 801152a:	2101      	movs	r1, #1
 801152c:	ec57 6b10 	vmov	r6, r7, d0
 8011530:	4690      	mov	r8, r2
 8011532:	f7ff fccf 	bl	8010ed4 <_Balloc>
 8011536:	4604      	mov	r4, r0
 8011538:	b930      	cbnz	r0, 8011548 <__d2b+0x24>
 801153a:	4602      	mov	r2, r0
 801153c:	4b25      	ldr	r3, [pc, #148]	; (80115d4 <__d2b+0xb0>)
 801153e:	4826      	ldr	r0, [pc, #152]	; (80115d8 <__d2b+0xb4>)
 8011540:	f240 310a 	movw	r1, #778	; 0x30a
 8011544:	f000 fb70 	bl	8011c28 <__assert_func>
 8011548:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801154c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011550:	bb35      	cbnz	r5, 80115a0 <__d2b+0x7c>
 8011552:	2e00      	cmp	r6, #0
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	d028      	beq.n	80115aa <__d2b+0x86>
 8011558:	4668      	mov	r0, sp
 801155a:	9600      	str	r6, [sp, #0]
 801155c:	f7ff fd82 	bl	8011064 <__lo0bits>
 8011560:	9900      	ldr	r1, [sp, #0]
 8011562:	b300      	cbz	r0, 80115a6 <__d2b+0x82>
 8011564:	9a01      	ldr	r2, [sp, #4]
 8011566:	f1c0 0320 	rsb	r3, r0, #32
 801156a:	fa02 f303 	lsl.w	r3, r2, r3
 801156e:	430b      	orrs	r3, r1
 8011570:	40c2      	lsrs	r2, r0
 8011572:	6163      	str	r3, [r4, #20]
 8011574:	9201      	str	r2, [sp, #4]
 8011576:	9b01      	ldr	r3, [sp, #4]
 8011578:	61a3      	str	r3, [r4, #24]
 801157a:	2b00      	cmp	r3, #0
 801157c:	bf14      	ite	ne
 801157e:	2202      	movne	r2, #2
 8011580:	2201      	moveq	r2, #1
 8011582:	6122      	str	r2, [r4, #16]
 8011584:	b1d5      	cbz	r5, 80115bc <__d2b+0x98>
 8011586:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801158a:	4405      	add	r5, r0
 801158c:	f8c9 5000 	str.w	r5, [r9]
 8011590:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011594:	f8c8 0000 	str.w	r0, [r8]
 8011598:	4620      	mov	r0, r4
 801159a:	b003      	add	sp, #12
 801159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80115a4:	e7d5      	b.n	8011552 <__d2b+0x2e>
 80115a6:	6161      	str	r1, [r4, #20]
 80115a8:	e7e5      	b.n	8011576 <__d2b+0x52>
 80115aa:	a801      	add	r0, sp, #4
 80115ac:	f7ff fd5a 	bl	8011064 <__lo0bits>
 80115b0:	9b01      	ldr	r3, [sp, #4]
 80115b2:	6163      	str	r3, [r4, #20]
 80115b4:	2201      	movs	r2, #1
 80115b6:	6122      	str	r2, [r4, #16]
 80115b8:	3020      	adds	r0, #32
 80115ba:	e7e3      	b.n	8011584 <__d2b+0x60>
 80115bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80115c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80115c4:	f8c9 0000 	str.w	r0, [r9]
 80115c8:	6918      	ldr	r0, [r3, #16]
 80115ca:	f7ff fd2b 	bl	8011024 <__hi0bits>
 80115ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80115d2:	e7df      	b.n	8011594 <__d2b+0x70>
 80115d4:	080121b3 	.word	0x080121b3
 80115d8:	080121c4 	.word	0x080121c4

080115dc <_calloc_r>:
 80115dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115de:	fba1 2402 	umull	r2, r4, r1, r2
 80115e2:	b94c      	cbnz	r4, 80115f8 <_calloc_r+0x1c>
 80115e4:	4611      	mov	r1, r2
 80115e6:	9201      	str	r2, [sp, #4]
 80115e8:	f7fd fe92 	bl	800f310 <_malloc_r>
 80115ec:	9a01      	ldr	r2, [sp, #4]
 80115ee:	4605      	mov	r5, r0
 80115f0:	b930      	cbnz	r0, 8011600 <_calloc_r+0x24>
 80115f2:	4628      	mov	r0, r5
 80115f4:	b003      	add	sp, #12
 80115f6:	bd30      	pop	{r4, r5, pc}
 80115f8:	220c      	movs	r2, #12
 80115fa:	6002      	str	r2, [r0, #0]
 80115fc:	2500      	movs	r5, #0
 80115fe:	e7f8      	b.n	80115f2 <_calloc_r+0x16>
 8011600:	4621      	mov	r1, r4
 8011602:	f7fd fe10 	bl	800f226 <memset>
 8011606:	e7f4      	b.n	80115f2 <_calloc_r+0x16>

08011608 <__ssputs_r>:
 8011608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801160c:	688e      	ldr	r6, [r1, #8]
 801160e:	429e      	cmp	r6, r3
 8011610:	4682      	mov	sl, r0
 8011612:	460c      	mov	r4, r1
 8011614:	4690      	mov	r8, r2
 8011616:	461f      	mov	r7, r3
 8011618:	d838      	bhi.n	801168c <__ssputs_r+0x84>
 801161a:	898a      	ldrh	r2, [r1, #12]
 801161c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011620:	d032      	beq.n	8011688 <__ssputs_r+0x80>
 8011622:	6825      	ldr	r5, [r4, #0]
 8011624:	6909      	ldr	r1, [r1, #16]
 8011626:	eba5 0901 	sub.w	r9, r5, r1
 801162a:	6965      	ldr	r5, [r4, #20]
 801162c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011630:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011634:	3301      	adds	r3, #1
 8011636:	444b      	add	r3, r9
 8011638:	106d      	asrs	r5, r5, #1
 801163a:	429d      	cmp	r5, r3
 801163c:	bf38      	it	cc
 801163e:	461d      	movcc	r5, r3
 8011640:	0553      	lsls	r3, r2, #21
 8011642:	d531      	bpl.n	80116a8 <__ssputs_r+0xa0>
 8011644:	4629      	mov	r1, r5
 8011646:	f7fd fe63 	bl	800f310 <_malloc_r>
 801164a:	4606      	mov	r6, r0
 801164c:	b950      	cbnz	r0, 8011664 <__ssputs_r+0x5c>
 801164e:	230c      	movs	r3, #12
 8011650:	f8ca 3000 	str.w	r3, [sl]
 8011654:	89a3      	ldrh	r3, [r4, #12]
 8011656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801165a:	81a3      	strh	r3, [r4, #12]
 801165c:	f04f 30ff 	mov.w	r0, #4294967295
 8011660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011664:	6921      	ldr	r1, [r4, #16]
 8011666:	464a      	mov	r2, r9
 8011668:	f7fd fdcf 	bl	800f20a <memcpy>
 801166c:	89a3      	ldrh	r3, [r4, #12]
 801166e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011676:	81a3      	strh	r3, [r4, #12]
 8011678:	6126      	str	r6, [r4, #16]
 801167a:	6165      	str	r5, [r4, #20]
 801167c:	444e      	add	r6, r9
 801167e:	eba5 0509 	sub.w	r5, r5, r9
 8011682:	6026      	str	r6, [r4, #0]
 8011684:	60a5      	str	r5, [r4, #8]
 8011686:	463e      	mov	r6, r7
 8011688:	42be      	cmp	r6, r7
 801168a:	d900      	bls.n	801168e <__ssputs_r+0x86>
 801168c:	463e      	mov	r6, r7
 801168e:	6820      	ldr	r0, [r4, #0]
 8011690:	4632      	mov	r2, r6
 8011692:	4641      	mov	r1, r8
 8011694:	f000 fb2c 	bl	8011cf0 <memmove>
 8011698:	68a3      	ldr	r3, [r4, #8]
 801169a:	1b9b      	subs	r3, r3, r6
 801169c:	60a3      	str	r3, [r4, #8]
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	4433      	add	r3, r6
 80116a2:	6023      	str	r3, [r4, #0]
 80116a4:	2000      	movs	r0, #0
 80116a6:	e7db      	b.n	8011660 <__ssputs_r+0x58>
 80116a8:	462a      	mov	r2, r5
 80116aa:	f000 fb3b 	bl	8011d24 <_realloc_r>
 80116ae:	4606      	mov	r6, r0
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d1e1      	bne.n	8011678 <__ssputs_r+0x70>
 80116b4:	6921      	ldr	r1, [r4, #16]
 80116b6:	4650      	mov	r0, sl
 80116b8:	f7fd fdbe 	bl	800f238 <_free_r>
 80116bc:	e7c7      	b.n	801164e <__ssputs_r+0x46>
	...

080116c0 <_svfiprintf_r>:
 80116c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	4698      	mov	r8, r3
 80116c6:	898b      	ldrh	r3, [r1, #12]
 80116c8:	061b      	lsls	r3, r3, #24
 80116ca:	b09d      	sub	sp, #116	; 0x74
 80116cc:	4607      	mov	r7, r0
 80116ce:	460d      	mov	r5, r1
 80116d0:	4614      	mov	r4, r2
 80116d2:	d50e      	bpl.n	80116f2 <_svfiprintf_r+0x32>
 80116d4:	690b      	ldr	r3, [r1, #16]
 80116d6:	b963      	cbnz	r3, 80116f2 <_svfiprintf_r+0x32>
 80116d8:	2140      	movs	r1, #64	; 0x40
 80116da:	f7fd fe19 	bl	800f310 <_malloc_r>
 80116de:	6028      	str	r0, [r5, #0]
 80116e0:	6128      	str	r0, [r5, #16]
 80116e2:	b920      	cbnz	r0, 80116ee <_svfiprintf_r+0x2e>
 80116e4:	230c      	movs	r3, #12
 80116e6:	603b      	str	r3, [r7, #0]
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ec:	e0d1      	b.n	8011892 <_svfiprintf_r+0x1d2>
 80116ee:	2340      	movs	r3, #64	; 0x40
 80116f0:	616b      	str	r3, [r5, #20]
 80116f2:	2300      	movs	r3, #0
 80116f4:	9309      	str	r3, [sp, #36]	; 0x24
 80116f6:	2320      	movs	r3, #32
 80116f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011700:	2330      	movs	r3, #48	; 0x30
 8011702:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80118ac <_svfiprintf_r+0x1ec>
 8011706:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801170a:	f04f 0901 	mov.w	r9, #1
 801170e:	4623      	mov	r3, r4
 8011710:	469a      	mov	sl, r3
 8011712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011716:	b10a      	cbz	r2, 801171c <_svfiprintf_r+0x5c>
 8011718:	2a25      	cmp	r2, #37	; 0x25
 801171a:	d1f9      	bne.n	8011710 <_svfiprintf_r+0x50>
 801171c:	ebba 0b04 	subs.w	fp, sl, r4
 8011720:	d00b      	beq.n	801173a <_svfiprintf_r+0x7a>
 8011722:	465b      	mov	r3, fp
 8011724:	4622      	mov	r2, r4
 8011726:	4629      	mov	r1, r5
 8011728:	4638      	mov	r0, r7
 801172a:	f7ff ff6d 	bl	8011608 <__ssputs_r>
 801172e:	3001      	adds	r0, #1
 8011730:	f000 80aa 	beq.w	8011888 <_svfiprintf_r+0x1c8>
 8011734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011736:	445a      	add	r2, fp
 8011738:	9209      	str	r2, [sp, #36]	; 0x24
 801173a:	f89a 3000 	ldrb.w	r3, [sl]
 801173e:	2b00      	cmp	r3, #0
 8011740:	f000 80a2 	beq.w	8011888 <_svfiprintf_r+0x1c8>
 8011744:	2300      	movs	r3, #0
 8011746:	f04f 32ff 	mov.w	r2, #4294967295
 801174a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801174e:	f10a 0a01 	add.w	sl, sl, #1
 8011752:	9304      	str	r3, [sp, #16]
 8011754:	9307      	str	r3, [sp, #28]
 8011756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801175a:	931a      	str	r3, [sp, #104]	; 0x68
 801175c:	4654      	mov	r4, sl
 801175e:	2205      	movs	r2, #5
 8011760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011764:	4851      	ldr	r0, [pc, #324]	; (80118ac <_svfiprintf_r+0x1ec>)
 8011766:	f7ee fd43 	bl	80001f0 <memchr>
 801176a:	9a04      	ldr	r2, [sp, #16]
 801176c:	b9d8      	cbnz	r0, 80117a6 <_svfiprintf_r+0xe6>
 801176e:	06d0      	lsls	r0, r2, #27
 8011770:	bf44      	itt	mi
 8011772:	2320      	movmi	r3, #32
 8011774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011778:	0711      	lsls	r1, r2, #28
 801177a:	bf44      	itt	mi
 801177c:	232b      	movmi	r3, #43	; 0x2b
 801177e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011782:	f89a 3000 	ldrb.w	r3, [sl]
 8011786:	2b2a      	cmp	r3, #42	; 0x2a
 8011788:	d015      	beq.n	80117b6 <_svfiprintf_r+0xf6>
 801178a:	9a07      	ldr	r2, [sp, #28]
 801178c:	4654      	mov	r4, sl
 801178e:	2000      	movs	r0, #0
 8011790:	f04f 0c0a 	mov.w	ip, #10
 8011794:	4621      	mov	r1, r4
 8011796:	f811 3b01 	ldrb.w	r3, [r1], #1
 801179a:	3b30      	subs	r3, #48	; 0x30
 801179c:	2b09      	cmp	r3, #9
 801179e:	d94e      	bls.n	801183e <_svfiprintf_r+0x17e>
 80117a0:	b1b0      	cbz	r0, 80117d0 <_svfiprintf_r+0x110>
 80117a2:	9207      	str	r2, [sp, #28]
 80117a4:	e014      	b.n	80117d0 <_svfiprintf_r+0x110>
 80117a6:	eba0 0308 	sub.w	r3, r0, r8
 80117aa:	fa09 f303 	lsl.w	r3, r9, r3
 80117ae:	4313      	orrs	r3, r2
 80117b0:	9304      	str	r3, [sp, #16]
 80117b2:	46a2      	mov	sl, r4
 80117b4:	e7d2      	b.n	801175c <_svfiprintf_r+0x9c>
 80117b6:	9b03      	ldr	r3, [sp, #12]
 80117b8:	1d19      	adds	r1, r3, #4
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	9103      	str	r1, [sp, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	bfbb      	ittet	lt
 80117c2:	425b      	neglt	r3, r3
 80117c4:	f042 0202 	orrlt.w	r2, r2, #2
 80117c8:	9307      	strge	r3, [sp, #28]
 80117ca:	9307      	strlt	r3, [sp, #28]
 80117cc:	bfb8      	it	lt
 80117ce:	9204      	strlt	r2, [sp, #16]
 80117d0:	7823      	ldrb	r3, [r4, #0]
 80117d2:	2b2e      	cmp	r3, #46	; 0x2e
 80117d4:	d10c      	bne.n	80117f0 <_svfiprintf_r+0x130>
 80117d6:	7863      	ldrb	r3, [r4, #1]
 80117d8:	2b2a      	cmp	r3, #42	; 0x2a
 80117da:	d135      	bne.n	8011848 <_svfiprintf_r+0x188>
 80117dc:	9b03      	ldr	r3, [sp, #12]
 80117de:	1d1a      	adds	r2, r3, #4
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	9203      	str	r2, [sp, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	bfb8      	it	lt
 80117e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80117ec:	3402      	adds	r4, #2
 80117ee:	9305      	str	r3, [sp, #20]
 80117f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80118bc <_svfiprintf_r+0x1fc>
 80117f4:	7821      	ldrb	r1, [r4, #0]
 80117f6:	2203      	movs	r2, #3
 80117f8:	4650      	mov	r0, sl
 80117fa:	f7ee fcf9 	bl	80001f0 <memchr>
 80117fe:	b140      	cbz	r0, 8011812 <_svfiprintf_r+0x152>
 8011800:	2340      	movs	r3, #64	; 0x40
 8011802:	eba0 000a 	sub.w	r0, r0, sl
 8011806:	fa03 f000 	lsl.w	r0, r3, r0
 801180a:	9b04      	ldr	r3, [sp, #16]
 801180c:	4303      	orrs	r3, r0
 801180e:	3401      	adds	r4, #1
 8011810:	9304      	str	r3, [sp, #16]
 8011812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011816:	4826      	ldr	r0, [pc, #152]	; (80118b0 <_svfiprintf_r+0x1f0>)
 8011818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801181c:	2206      	movs	r2, #6
 801181e:	f7ee fce7 	bl	80001f0 <memchr>
 8011822:	2800      	cmp	r0, #0
 8011824:	d038      	beq.n	8011898 <_svfiprintf_r+0x1d8>
 8011826:	4b23      	ldr	r3, [pc, #140]	; (80118b4 <_svfiprintf_r+0x1f4>)
 8011828:	bb1b      	cbnz	r3, 8011872 <_svfiprintf_r+0x1b2>
 801182a:	9b03      	ldr	r3, [sp, #12]
 801182c:	3307      	adds	r3, #7
 801182e:	f023 0307 	bic.w	r3, r3, #7
 8011832:	3308      	adds	r3, #8
 8011834:	9303      	str	r3, [sp, #12]
 8011836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011838:	4433      	add	r3, r6
 801183a:	9309      	str	r3, [sp, #36]	; 0x24
 801183c:	e767      	b.n	801170e <_svfiprintf_r+0x4e>
 801183e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011842:	460c      	mov	r4, r1
 8011844:	2001      	movs	r0, #1
 8011846:	e7a5      	b.n	8011794 <_svfiprintf_r+0xd4>
 8011848:	2300      	movs	r3, #0
 801184a:	3401      	adds	r4, #1
 801184c:	9305      	str	r3, [sp, #20]
 801184e:	4619      	mov	r1, r3
 8011850:	f04f 0c0a 	mov.w	ip, #10
 8011854:	4620      	mov	r0, r4
 8011856:	f810 2b01 	ldrb.w	r2, [r0], #1
 801185a:	3a30      	subs	r2, #48	; 0x30
 801185c:	2a09      	cmp	r2, #9
 801185e:	d903      	bls.n	8011868 <_svfiprintf_r+0x1a8>
 8011860:	2b00      	cmp	r3, #0
 8011862:	d0c5      	beq.n	80117f0 <_svfiprintf_r+0x130>
 8011864:	9105      	str	r1, [sp, #20]
 8011866:	e7c3      	b.n	80117f0 <_svfiprintf_r+0x130>
 8011868:	fb0c 2101 	mla	r1, ip, r1, r2
 801186c:	4604      	mov	r4, r0
 801186e:	2301      	movs	r3, #1
 8011870:	e7f0      	b.n	8011854 <_svfiprintf_r+0x194>
 8011872:	ab03      	add	r3, sp, #12
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	462a      	mov	r2, r5
 8011878:	4b0f      	ldr	r3, [pc, #60]	; (80118b8 <_svfiprintf_r+0x1f8>)
 801187a:	a904      	add	r1, sp, #16
 801187c:	4638      	mov	r0, r7
 801187e:	f7fd fe5b 	bl	800f538 <_printf_float>
 8011882:	1c42      	adds	r2, r0, #1
 8011884:	4606      	mov	r6, r0
 8011886:	d1d6      	bne.n	8011836 <_svfiprintf_r+0x176>
 8011888:	89ab      	ldrh	r3, [r5, #12]
 801188a:	065b      	lsls	r3, r3, #25
 801188c:	f53f af2c 	bmi.w	80116e8 <_svfiprintf_r+0x28>
 8011890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011892:	b01d      	add	sp, #116	; 0x74
 8011894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011898:	ab03      	add	r3, sp, #12
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	462a      	mov	r2, r5
 801189e:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <_svfiprintf_r+0x1f8>)
 80118a0:	a904      	add	r1, sp, #16
 80118a2:	4638      	mov	r0, r7
 80118a4:	f7fe f8ec 	bl	800fa80 <_printf_i>
 80118a8:	e7eb      	b.n	8011882 <_svfiprintf_r+0x1c2>
 80118aa:	bf00      	nop
 80118ac:	0801231c 	.word	0x0801231c
 80118b0:	08012326 	.word	0x08012326
 80118b4:	0800f539 	.word	0x0800f539
 80118b8:	08011609 	.word	0x08011609
 80118bc:	08012322 	.word	0x08012322

080118c0 <__sfputc_r>:
 80118c0:	6893      	ldr	r3, [r2, #8]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	b410      	push	{r4}
 80118c8:	6093      	str	r3, [r2, #8]
 80118ca:	da08      	bge.n	80118de <__sfputc_r+0x1e>
 80118cc:	6994      	ldr	r4, [r2, #24]
 80118ce:	42a3      	cmp	r3, r4
 80118d0:	db01      	blt.n	80118d6 <__sfputc_r+0x16>
 80118d2:	290a      	cmp	r1, #10
 80118d4:	d103      	bne.n	80118de <__sfputc_r+0x1e>
 80118d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118da:	f7fe bb0f 	b.w	800fefc <__swbuf_r>
 80118de:	6813      	ldr	r3, [r2, #0]
 80118e0:	1c58      	adds	r0, r3, #1
 80118e2:	6010      	str	r0, [r2, #0]
 80118e4:	7019      	strb	r1, [r3, #0]
 80118e6:	4608      	mov	r0, r1
 80118e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <__sfputs_r>:
 80118ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f0:	4606      	mov	r6, r0
 80118f2:	460f      	mov	r7, r1
 80118f4:	4614      	mov	r4, r2
 80118f6:	18d5      	adds	r5, r2, r3
 80118f8:	42ac      	cmp	r4, r5
 80118fa:	d101      	bne.n	8011900 <__sfputs_r+0x12>
 80118fc:	2000      	movs	r0, #0
 80118fe:	e007      	b.n	8011910 <__sfputs_r+0x22>
 8011900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011904:	463a      	mov	r2, r7
 8011906:	4630      	mov	r0, r6
 8011908:	f7ff ffda 	bl	80118c0 <__sfputc_r>
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	d1f3      	bne.n	80118f8 <__sfputs_r+0xa>
 8011910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011914 <_vfiprintf_r>:
 8011914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011918:	460d      	mov	r5, r1
 801191a:	b09d      	sub	sp, #116	; 0x74
 801191c:	4614      	mov	r4, r2
 801191e:	4698      	mov	r8, r3
 8011920:	4606      	mov	r6, r0
 8011922:	b118      	cbz	r0, 801192c <_vfiprintf_r+0x18>
 8011924:	6983      	ldr	r3, [r0, #24]
 8011926:	b90b      	cbnz	r3, 801192c <_vfiprintf_r+0x18>
 8011928:	f7fd fbaa 	bl	800f080 <__sinit>
 801192c:	4b89      	ldr	r3, [pc, #548]	; (8011b54 <_vfiprintf_r+0x240>)
 801192e:	429d      	cmp	r5, r3
 8011930:	d11b      	bne.n	801196a <_vfiprintf_r+0x56>
 8011932:	6875      	ldr	r5, [r6, #4]
 8011934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011936:	07d9      	lsls	r1, r3, #31
 8011938:	d405      	bmi.n	8011946 <_vfiprintf_r+0x32>
 801193a:	89ab      	ldrh	r3, [r5, #12]
 801193c:	059a      	lsls	r2, r3, #22
 801193e:	d402      	bmi.n	8011946 <_vfiprintf_r+0x32>
 8011940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011942:	f7fd fc60 	bl	800f206 <__retarget_lock_acquire_recursive>
 8011946:	89ab      	ldrh	r3, [r5, #12]
 8011948:	071b      	lsls	r3, r3, #28
 801194a:	d501      	bpl.n	8011950 <_vfiprintf_r+0x3c>
 801194c:	692b      	ldr	r3, [r5, #16]
 801194e:	b9eb      	cbnz	r3, 801198c <_vfiprintf_r+0x78>
 8011950:	4629      	mov	r1, r5
 8011952:	4630      	mov	r0, r6
 8011954:	f7fe fb36 	bl	800ffc4 <__swsetup_r>
 8011958:	b1c0      	cbz	r0, 801198c <_vfiprintf_r+0x78>
 801195a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801195c:	07dc      	lsls	r4, r3, #31
 801195e:	d50e      	bpl.n	801197e <_vfiprintf_r+0x6a>
 8011960:	f04f 30ff 	mov.w	r0, #4294967295
 8011964:	b01d      	add	sp, #116	; 0x74
 8011966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196a:	4b7b      	ldr	r3, [pc, #492]	; (8011b58 <_vfiprintf_r+0x244>)
 801196c:	429d      	cmp	r5, r3
 801196e:	d101      	bne.n	8011974 <_vfiprintf_r+0x60>
 8011970:	68b5      	ldr	r5, [r6, #8]
 8011972:	e7df      	b.n	8011934 <_vfiprintf_r+0x20>
 8011974:	4b79      	ldr	r3, [pc, #484]	; (8011b5c <_vfiprintf_r+0x248>)
 8011976:	429d      	cmp	r5, r3
 8011978:	bf08      	it	eq
 801197a:	68f5      	ldreq	r5, [r6, #12]
 801197c:	e7da      	b.n	8011934 <_vfiprintf_r+0x20>
 801197e:	89ab      	ldrh	r3, [r5, #12]
 8011980:	0598      	lsls	r0, r3, #22
 8011982:	d4ed      	bmi.n	8011960 <_vfiprintf_r+0x4c>
 8011984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011986:	f7fd fc3f 	bl	800f208 <__retarget_lock_release_recursive>
 801198a:	e7e9      	b.n	8011960 <_vfiprintf_r+0x4c>
 801198c:	2300      	movs	r3, #0
 801198e:	9309      	str	r3, [sp, #36]	; 0x24
 8011990:	2320      	movs	r3, #32
 8011992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011996:	f8cd 800c 	str.w	r8, [sp, #12]
 801199a:	2330      	movs	r3, #48	; 0x30
 801199c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b60 <_vfiprintf_r+0x24c>
 80119a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119a4:	f04f 0901 	mov.w	r9, #1
 80119a8:	4623      	mov	r3, r4
 80119aa:	469a      	mov	sl, r3
 80119ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119b0:	b10a      	cbz	r2, 80119b6 <_vfiprintf_r+0xa2>
 80119b2:	2a25      	cmp	r2, #37	; 0x25
 80119b4:	d1f9      	bne.n	80119aa <_vfiprintf_r+0x96>
 80119b6:	ebba 0b04 	subs.w	fp, sl, r4
 80119ba:	d00b      	beq.n	80119d4 <_vfiprintf_r+0xc0>
 80119bc:	465b      	mov	r3, fp
 80119be:	4622      	mov	r2, r4
 80119c0:	4629      	mov	r1, r5
 80119c2:	4630      	mov	r0, r6
 80119c4:	f7ff ff93 	bl	80118ee <__sfputs_r>
 80119c8:	3001      	adds	r0, #1
 80119ca:	f000 80aa 	beq.w	8011b22 <_vfiprintf_r+0x20e>
 80119ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119d0:	445a      	add	r2, fp
 80119d2:	9209      	str	r2, [sp, #36]	; 0x24
 80119d4:	f89a 3000 	ldrb.w	r3, [sl]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 80a2 	beq.w	8011b22 <_vfiprintf_r+0x20e>
 80119de:	2300      	movs	r3, #0
 80119e0:	f04f 32ff 	mov.w	r2, #4294967295
 80119e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119e8:	f10a 0a01 	add.w	sl, sl, #1
 80119ec:	9304      	str	r3, [sp, #16]
 80119ee:	9307      	str	r3, [sp, #28]
 80119f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119f4:	931a      	str	r3, [sp, #104]	; 0x68
 80119f6:	4654      	mov	r4, sl
 80119f8:	2205      	movs	r2, #5
 80119fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119fe:	4858      	ldr	r0, [pc, #352]	; (8011b60 <_vfiprintf_r+0x24c>)
 8011a00:	f7ee fbf6 	bl	80001f0 <memchr>
 8011a04:	9a04      	ldr	r2, [sp, #16]
 8011a06:	b9d8      	cbnz	r0, 8011a40 <_vfiprintf_r+0x12c>
 8011a08:	06d1      	lsls	r1, r2, #27
 8011a0a:	bf44      	itt	mi
 8011a0c:	2320      	movmi	r3, #32
 8011a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a12:	0713      	lsls	r3, r2, #28
 8011a14:	bf44      	itt	mi
 8011a16:	232b      	movmi	r3, #43	; 0x2b
 8011a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a20:	2b2a      	cmp	r3, #42	; 0x2a
 8011a22:	d015      	beq.n	8011a50 <_vfiprintf_r+0x13c>
 8011a24:	9a07      	ldr	r2, [sp, #28]
 8011a26:	4654      	mov	r4, sl
 8011a28:	2000      	movs	r0, #0
 8011a2a:	f04f 0c0a 	mov.w	ip, #10
 8011a2e:	4621      	mov	r1, r4
 8011a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a34:	3b30      	subs	r3, #48	; 0x30
 8011a36:	2b09      	cmp	r3, #9
 8011a38:	d94e      	bls.n	8011ad8 <_vfiprintf_r+0x1c4>
 8011a3a:	b1b0      	cbz	r0, 8011a6a <_vfiprintf_r+0x156>
 8011a3c:	9207      	str	r2, [sp, #28]
 8011a3e:	e014      	b.n	8011a6a <_vfiprintf_r+0x156>
 8011a40:	eba0 0308 	sub.w	r3, r0, r8
 8011a44:	fa09 f303 	lsl.w	r3, r9, r3
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	46a2      	mov	sl, r4
 8011a4e:	e7d2      	b.n	80119f6 <_vfiprintf_r+0xe2>
 8011a50:	9b03      	ldr	r3, [sp, #12]
 8011a52:	1d19      	adds	r1, r3, #4
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	9103      	str	r1, [sp, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	bfbb      	ittet	lt
 8011a5c:	425b      	neglt	r3, r3
 8011a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8011a62:	9307      	strge	r3, [sp, #28]
 8011a64:	9307      	strlt	r3, [sp, #28]
 8011a66:	bfb8      	it	lt
 8011a68:	9204      	strlt	r2, [sp, #16]
 8011a6a:	7823      	ldrb	r3, [r4, #0]
 8011a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a6e:	d10c      	bne.n	8011a8a <_vfiprintf_r+0x176>
 8011a70:	7863      	ldrb	r3, [r4, #1]
 8011a72:	2b2a      	cmp	r3, #42	; 0x2a
 8011a74:	d135      	bne.n	8011ae2 <_vfiprintf_r+0x1ce>
 8011a76:	9b03      	ldr	r3, [sp, #12]
 8011a78:	1d1a      	adds	r2, r3, #4
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	9203      	str	r2, [sp, #12]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	bfb8      	it	lt
 8011a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a86:	3402      	adds	r4, #2
 8011a88:	9305      	str	r3, [sp, #20]
 8011a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b70 <_vfiprintf_r+0x25c>
 8011a8e:	7821      	ldrb	r1, [r4, #0]
 8011a90:	2203      	movs	r2, #3
 8011a92:	4650      	mov	r0, sl
 8011a94:	f7ee fbac 	bl	80001f0 <memchr>
 8011a98:	b140      	cbz	r0, 8011aac <_vfiprintf_r+0x198>
 8011a9a:	2340      	movs	r3, #64	; 0x40
 8011a9c:	eba0 000a 	sub.w	r0, r0, sl
 8011aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8011aa4:	9b04      	ldr	r3, [sp, #16]
 8011aa6:	4303      	orrs	r3, r0
 8011aa8:	3401      	adds	r4, #1
 8011aaa:	9304      	str	r3, [sp, #16]
 8011aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab0:	482c      	ldr	r0, [pc, #176]	; (8011b64 <_vfiprintf_r+0x250>)
 8011ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ab6:	2206      	movs	r2, #6
 8011ab8:	f7ee fb9a 	bl	80001f0 <memchr>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d03f      	beq.n	8011b40 <_vfiprintf_r+0x22c>
 8011ac0:	4b29      	ldr	r3, [pc, #164]	; (8011b68 <_vfiprintf_r+0x254>)
 8011ac2:	bb1b      	cbnz	r3, 8011b0c <_vfiprintf_r+0x1f8>
 8011ac4:	9b03      	ldr	r3, [sp, #12]
 8011ac6:	3307      	adds	r3, #7
 8011ac8:	f023 0307 	bic.w	r3, r3, #7
 8011acc:	3308      	adds	r3, #8
 8011ace:	9303      	str	r3, [sp, #12]
 8011ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad2:	443b      	add	r3, r7
 8011ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ad6:	e767      	b.n	80119a8 <_vfiprintf_r+0x94>
 8011ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011adc:	460c      	mov	r4, r1
 8011ade:	2001      	movs	r0, #1
 8011ae0:	e7a5      	b.n	8011a2e <_vfiprintf_r+0x11a>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	3401      	adds	r4, #1
 8011ae6:	9305      	str	r3, [sp, #20]
 8011ae8:	4619      	mov	r1, r3
 8011aea:	f04f 0c0a 	mov.w	ip, #10
 8011aee:	4620      	mov	r0, r4
 8011af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011af4:	3a30      	subs	r2, #48	; 0x30
 8011af6:	2a09      	cmp	r2, #9
 8011af8:	d903      	bls.n	8011b02 <_vfiprintf_r+0x1ee>
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d0c5      	beq.n	8011a8a <_vfiprintf_r+0x176>
 8011afe:	9105      	str	r1, [sp, #20]
 8011b00:	e7c3      	b.n	8011a8a <_vfiprintf_r+0x176>
 8011b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b06:	4604      	mov	r4, r0
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e7f0      	b.n	8011aee <_vfiprintf_r+0x1da>
 8011b0c:	ab03      	add	r3, sp, #12
 8011b0e:	9300      	str	r3, [sp, #0]
 8011b10:	462a      	mov	r2, r5
 8011b12:	4b16      	ldr	r3, [pc, #88]	; (8011b6c <_vfiprintf_r+0x258>)
 8011b14:	a904      	add	r1, sp, #16
 8011b16:	4630      	mov	r0, r6
 8011b18:	f7fd fd0e 	bl	800f538 <_printf_float>
 8011b1c:	4607      	mov	r7, r0
 8011b1e:	1c78      	adds	r0, r7, #1
 8011b20:	d1d6      	bne.n	8011ad0 <_vfiprintf_r+0x1bc>
 8011b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b24:	07d9      	lsls	r1, r3, #31
 8011b26:	d405      	bmi.n	8011b34 <_vfiprintf_r+0x220>
 8011b28:	89ab      	ldrh	r3, [r5, #12]
 8011b2a:	059a      	lsls	r2, r3, #22
 8011b2c:	d402      	bmi.n	8011b34 <_vfiprintf_r+0x220>
 8011b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b30:	f7fd fb6a 	bl	800f208 <__retarget_lock_release_recursive>
 8011b34:	89ab      	ldrh	r3, [r5, #12]
 8011b36:	065b      	lsls	r3, r3, #25
 8011b38:	f53f af12 	bmi.w	8011960 <_vfiprintf_r+0x4c>
 8011b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b3e:	e711      	b.n	8011964 <_vfiprintf_r+0x50>
 8011b40:	ab03      	add	r3, sp, #12
 8011b42:	9300      	str	r3, [sp, #0]
 8011b44:	462a      	mov	r2, r5
 8011b46:	4b09      	ldr	r3, [pc, #36]	; (8011b6c <_vfiprintf_r+0x258>)
 8011b48:	a904      	add	r1, sp, #16
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	f7fd ff98 	bl	800fa80 <_printf_i>
 8011b50:	e7e4      	b.n	8011b1c <_vfiprintf_r+0x208>
 8011b52:	bf00      	nop
 8011b54:	080120bc 	.word	0x080120bc
 8011b58:	080120dc 	.word	0x080120dc
 8011b5c:	0801209c 	.word	0x0801209c
 8011b60:	0801231c 	.word	0x0801231c
 8011b64:	08012326 	.word	0x08012326
 8011b68:	0800f539 	.word	0x0800f539
 8011b6c:	080118ef 	.word	0x080118ef
 8011b70:	08012322 	.word	0x08012322

08011b74 <_putc_r>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	460d      	mov	r5, r1
 8011b78:	4614      	mov	r4, r2
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	b118      	cbz	r0, 8011b86 <_putc_r+0x12>
 8011b7e:	6983      	ldr	r3, [r0, #24]
 8011b80:	b90b      	cbnz	r3, 8011b86 <_putc_r+0x12>
 8011b82:	f7fd fa7d 	bl	800f080 <__sinit>
 8011b86:	4b1c      	ldr	r3, [pc, #112]	; (8011bf8 <_putc_r+0x84>)
 8011b88:	429c      	cmp	r4, r3
 8011b8a:	d124      	bne.n	8011bd6 <_putc_r+0x62>
 8011b8c:	6874      	ldr	r4, [r6, #4]
 8011b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b90:	07d8      	lsls	r0, r3, #31
 8011b92:	d405      	bmi.n	8011ba0 <_putc_r+0x2c>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	0599      	lsls	r1, r3, #22
 8011b98:	d402      	bmi.n	8011ba0 <_putc_r+0x2c>
 8011b9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b9c:	f7fd fb33 	bl	800f206 <__retarget_lock_acquire_recursive>
 8011ba0:	68a3      	ldr	r3, [r4, #8]
 8011ba2:	3b01      	subs	r3, #1
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	60a3      	str	r3, [r4, #8]
 8011ba8:	da05      	bge.n	8011bb6 <_putc_r+0x42>
 8011baa:	69a2      	ldr	r2, [r4, #24]
 8011bac:	4293      	cmp	r3, r2
 8011bae:	db1c      	blt.n	8011bea <_putc_r+0x76>
 8011bb0:	b2eb      	uxtb	r3, r5
 8011bb2:	2b0a      	cmp	r3, #10
 8011bb4:	d019      	beq.n	8011bea <_putc_r+0x76>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	1c5a      	adds	r2, r3, #1
 8011bba:	6022      	str	r2, [r4, #0]
 8011bbc:	701d      	strb	r5, [r3, #0]
 8011bbe:	b2ed      	uxtb	r5, r5
 8011bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bc2:	07da      	lsls	r2, r3, #31
 8011bc4:	d405      	bmi.n	8011bd2 <_putc_r+0x5e>
 8011bc6:	89a3      	ldrh	r3, [r4, #12]
 8011bc8:	059b      	lsls	r3, r3, #22
 8011bca:	d402      	bmi.n	8011bd2 <_putc_r+0x5e>
 8011bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bce:	f7fd fb1b 	bl	800f208 <__retarget_lock_release_recursive>
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	bd70      	pop	{r4, r5, r6, pc}
 8011bd6:	4b09      	ldr	r3, [pc, #36]	; (8011bfc <_putc_r+0x88>)
 8011bd8:	429c      	cmp	r4, r3
 8011bda:	d101      	bne.n	8011be0 <_putc_r+0x6c>
 8011bdc:	68b4      	ldr	r4, [r6, #8]
 8011bde:	e7d6      	b.n	8011b8e <_putc_r+0x1a>
 8011be0:	4b07      	ldr	r3, [pc, #28]	; (8011c00 <_putc_r+0x8c>)
 8011be2:	429c      	cmp	r4, r3
 8011be4:	bf08      	it	eq
 8011be6:	68f4      	ldreq	r4, [r6, #12]
 8011be8:	e7d1      	b.n	8011b8e <_putc_r+0x1a>
 8011bea:	4629      	mov	r1, r5
 8011bec:	4622      	mov	r2, r4
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f7fe f984 	bl	800fefc <__swbuf_r>
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	e7e3      	b.n	8011bc0 <_putc_r+0x4c>
 8011bf8:	080120bc 	.word	0x080120bc
 8011bfc:	080120dc 	.word	0x080120dc
 8011c00:	0801209c 	.word	0x0801209c

08011c04 <_read_r>:
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	4d07      	ldr	r5, [pc, #28]	; (8011c24 <_read_r+0x20>)
 8011c08:	4604      	mov	r4, r0
 8011c0a:	4608      	mov	r0, r1
 8011c0c:	4611      	mov	r1, r2
 8011c0e:	2200      	movs	r2, #0
 8011c10:	602a      	str	r2, [r5, #0]
 8011c12:	461a      	mov	r2, r3
 8011c14:	f7f0 fca6 	bl	8002564 <_read>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d102      	bne.n	8011c22 <_read_r+0x1e>
 8011c1c:	682b      	ldr	r3, [r5, #0]
 8011c1e:	b103      	cbz	r3, 8011c22 <_read_r+0x1e>
 8011c20:	6023      	str	r3, [r4, #0]
 8011c22:	bd38      	pop	{r3, r4, r5, pc}
 8011c24:	20000ae4 	.word	0x20000ae4

08011c28 <__assert_func>:
 8011c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c2a:	4614      	mov	r4, r2
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	4b09      	ldr	r3, [pc, #36]	; (8011c54 <__assert_func+0x2c>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4605      	mov	r5, r0
 8011c34:	68d8      	ldr	r0, [r3, #12]
 8011c36:	b14c      	cbz	r4, 8011c4c <__assert_func+0x24>
 8011c38:	4b07      	ldr	r3, [pc, #28]	; (8011c58 <__assert_func+0x30>)
 8011c3a:	9100      	str	r1, [sp, #0]
 8011c3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c40:	4906      	ldr	r1, [pc, #24]	; (8011c5c <__assert_func+0x34>)
 8011c42:	462b      	mov	r3, r5
 8011c44:	f000 f80e 	bl	8011c64 <fiprintf>
 8011c48:	f000 f8a8 	bl	8011d9c <abort>
 8011c4c:	4b04      	ldr	r3, [pc, #16]	; (8011c60 <__assert_func+0x38>)
 8011c4e:	461c      	mov	r4, r3
 8011c50:	e7f3      	b.n	8011c3a <__assert_func+0x12>
 8011c52:	bf00      	nop
 8011c54:	200001a0 	.word	0x200001a0
 8011c58:	0801232d 	.word	0x0801232d
 8011c5c:	0801233a 	.word	0x0801233a
 8011c60:	08012368 	.word	0x08012368

08011c64 <fiprintf>:
 8011c64:	b40e      	push	{r1, r2, r3}
 8011c66:	b503      	push	{r0, r1, lr}
 8011c68:	4601      	mov	r1, r0
 8011c6a:	ab03      	add	r3, sp, #12
 8011c6c:	4805      	ldr	r0, [pc, #20]	; (8011c84 <fiprintf+0x20>)
 8011c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c72:	6800      	ldr	r0, [r0, #0]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	f7ff fe4d 	bl	8011914 <_vfiprintf_r>
 8011c7a:	b002      	add	sp, #8
 8011c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c80:	b003      	add	sp, #12
 8011c82:	4770      	bx	lr
 8011c84:	200001a0 	.word	0x200001a0

08011c88 <_fstat_r>:
 8011c88:	b538      	push	{r3, r4, r5, lr}
 8011c8a:	4d07      	ldr	r5, [pc, #28]	; (8011ca8 <_fstat_r+0x20>)
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	4604      	mov	r4, r0
 8011c90:	4608      	mov	r0, r1
 8011c92:	4611      	mov	r1, r2
 8011c94:	602b      	str	r3, [r5, #0]
 8011c96:	f7f0 fcaa 	bl	80025ee <_fstat>
 8011c9a:	1c43      	adds	r3, r0, #1
 8011c9c:	d102      	bne.n	8011ca4 <_fstat_r+0x1c>
 8011c9e:	682b      	ldr	r3, [r5, #0]
 8011ca0:	b103      	cbz	r3, 8011ca4 <_fstat_r+0x1c>
 8011ca2:	6023      	str	r3, [r4, #0]
 8011ca4:	bd38      	pop	{r3, r4, r5, pc}
 8011ca6:	bf00      	nop
 8011ca8:	20000ae4 	.word	0x20000ae4

08011cac <_isatty_r>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	4d06      	ldr	r5, [pc, #24]	; (8011cc8 <_isatty_r+0x1c>)
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	4608      	mov	r0, r1
 8011cb6:	602b      	str	r3, [r5, #0]
 8011cb8:	f7f0 fca9 	bl	800260e <_isatty>
 8011cbc:	1c43      	adds	r3, r0, #1
 8011cbe:	d102      	bne.n	8011cc6 <_isatty_r+0x1a>
 8011cc0:	682b      	ldr	r3, [r5, #0]
 8011cc2:	b103      	cbz	r3, 8011cc6 <_isatty_r+0x1a>
 8011cc4:	6023      	str	r3, [r4, #0]
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	20000ae4 	.word	0x20000ae4

08011ccc <__ascii_mbtowc>:
 8011ccc:	b082      	sub	sp, #8
 8011cce:	b901      	cbnz	r1, 8011cd2 <__ascii_mbtowc+0x6>
 8011cd0:	a901      	add	r1, sp, #4
 8011cd2:	b142      	cbz	r2, 8011ce6 <__ascii_mbtowc+0x1a>
 8011cd4:	b14b      	cbz	r3, 8011cea <__ascii_mbtowc+0x1e>
 8011cd6:	7813      	ldrb	r3, [r2, #0]
 8011cd8:	600b      	str	r3, [r1, #0]
 8011cda:	7812      	ldrb	r2, [r2, #0]
 8011cdc:	1e10      	subs	r0, r2, #0
 8011cde:	bf18      	it	ne
 8011ce0:	2001      	movne	r0, #1
 8011ce2:	b002      	add	sp, #8
 8011ce4:	4770      	bx	lr
 8011ce6:	4610      	mov	r0, r2
 8011ce8:	e7fb      	b.n	8011ce2 <__ascii_mbtowc+0x16>
 8011cea:	f06f 0001 	mvn.w	r0, #1
 8011cee:	e7f8      	b.n	8011ce2 <__ascii_mbtowc+0x16>

08011cf0 <memmove>:
 8011cf0:	4288      	cmp	r0, r1
 8011cf2:	b510      	push	{r4, lr}
 8011cf4:	eb01 0402 	add.w	r4, r1, r2
 8011cf8:	d902      	bls.n	8011d00 <memmove+0x10>
 8011cfa:	4284      	cmp	r4, r0
 8011cfc:	4623      	mov	r3, r4
 8011cfe:	d807      	bhi.n	8011d10 <memmove+0x20>
 8011d00:	1e43      	subs	r3, r0, #1
 8011d02:	42a1      	cmp	r1, r4
 8011d04:	d008      	beq.n	8011d18 <memmove+0x28>
 8011d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d0e:	e7f8      	b.n	8011d02 <memmove+0x12>
 8011d10:	4402      	add	r2, r0
 8011d12:	4601      	mov	r1, r0
 8011d14:	428a      	cmp	r2, r1
 8011d16:	d100      	bne.n	8011d1a <memmove+0x2a>
 8011d18:	bd10      	pop	{r4, pc}
 8011d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d22:	e7f7      	b.n	8011d14 <memmove+0x24>

08011d24 <_realloc_r>:
 8011d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d28:	4680      	mov	r8, r0
 8011d2a:	4614      	mov	r4, r2
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	b921      	cbnz	r1, 8011d3a <_realloc_r+0x16>
 8011d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d34:	4611      	mov	r1, r2
 8011d36:	f7fd baeb 	b.w	800f310 <_malloc_r>
 8011d3a:	b92a      	cbnz	r2, 8011d48 <_realloc_r+0x24>
 8011d3c:	f7fd fa7c 	bl	800f238 <_free_r>
 8011d40:	4625      	mov	r5, r4
 8011d42:	4628      	mov	r0, r5
 8011d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d48:	f000 f82f 	bl	8011daa <_malloc_usable_size_r>
 8011d4c:	4284      	cmp	r4, r0
 8011d4e:	4607      	mov	r7, r0
 8011d50:	d802      	bhi.n	8011d58 <_realloc_r+0x34>
 8011d52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d56:	d812      	bhi.n	8011d7e <_realloc_r+0x5a>
 8011d58:	4621      	mov	r1, r4
 8011d5a:	4640      	mov	r0, r8
 8011d5c:	f7fd fad8 	bl	800f310 <_malloc_r>
 8011d60:	4605      	mov	r5, r0
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d0ed      	beq.n	8011d42 <_realloc_r+0x1e>
 8011d66:	42bc      	cmp	r4, r7
 8011d68:	4622      	mov	r2, r4
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	bf28      	it	cs
 8011d6e:	463a      	movcs	r2, r7
 8011d70:	f7fd fa4b 	bl	800f20a <memcpy>
 8011d74:	4631      	mov	r1, r6
 8011d76:	4640      	mov	r0, r8
 8011d78:	f7fd fa5e 	bl	800f238 <_free_r>
 8011d7c:	e7e1      	b.n	8011d42 <_realloc_r+0x1e>
 8011d7e:	4635      	mov	r5, r6
 8011d80:	e7df      	b.n	8011d42 <_realloc_r+0x1e>

08011d82 <__ascii_wctomb>:
 8011d82:	b149      	cbz	r1, 8011d98 <__ascii_wctomb+0x16>
 8011d84:	2aff      	cmp	r2, #255	; 0xff
 8011d86:	bf85      	ittet	hi
 8011d88:	238a      	movhi	r3, #138	; 0x8a
 8011d8a:	6003      	strhi	r3, [r0, #0]
 8011d8c:	700a      	strbls	r2, [r1, #0]
 8011d8e:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d92:	bf98      	it	ls
 8011d94:	2001      	movls	r0, #1
 8011d96:	4770      	bx	lr
 8011d98:	4608      	mov	r0, r1
 8011d9a:	4770      	bx	lr

08011d9c <abort>:
 8011d9c:	b508      	push	{r3, lr}
 8011d9e:	2006      	movs	r0, #6
 8011da0:	f000 f834 	bl	8011e0c <raise>
 8011da4:	2001      	movs	r0, #1
 8011da6:	f7f0 fbd3 	bl	8002550 <_exit>

08011daa <_malloc_usable_size_r>:
 8011daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dae:	1f18      	subs	r0, r3, #4
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	bfbc      	itt	lt
 8011db4:	580b      	ldrlt	r3, [r1, r0]
 8011db6:	18c0      	addlt	r0, r0, r3
 8011db8:	4770      	bx	lr

08011dba <_raise_r>:
 8011dba:	291f      	cmp	r1, #31
 8011dbc:	b538      	push	{r3, r4, r5, lr}
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	460d      	mov	r5, r1
 8011dc2:	d904      	bls.n	8011dce <_raise_r+0x14>
 8011dc4:	2316      	movs	r3, #22
 8011dc6:	6003      	str	r3, [r0, #0]
 8011dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dcc:	bd38      	pop	{r3, r4, r5, pc}
 8011dce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011dd0:	b112      	cbz	r2, 8011dd8 <_raise_r+0x1e>
 8011dd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011dd6:	b94b      	cbnz	r3, 8011dec <_raise_r+0x32>
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f000 f831 	bl	8011e40 <_getpid_r>
 8011dde:	462a      	mov	r2, r5
 8011de0:	4601      	mov	r1, r0
 8011de2:	4620      	mov	r0, r4
 8011de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011de8:	f000 b818 	b.w	8011e1c <_kill_r>
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d00a      	beq.n	8011e06 <_raise_r+0x4c>
 8011df0:	1c59      	adds	r1, r3, #1
 8011df2:	d103      	bne.n	8011dfc <_raise_r+0x42>
 8011df4:	2316      	movs	r3, #22
 8011df6:	6003      	str	r3, [r0, #0]
 8011df8:	2001      	movs	r0, #1
 8011dfa:	e7e7      	b.n	8011dcc <_raise_r+0x12>
 8011dfc:	2400      	movs	r4, #0
 8011dfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e02:	4628      	mov	r0, r5
 8011e04:	4798      	blx	r3
 8011e06:	2000      	movs	r0, #0
 8011e08:	e7e0      	b.n	8011dcc <_raise_r+0x12>
	...

08011e0c <raise>:
 8011e0c:	4b02      	ldr	r3, [pc, #8]	; (8011e18 <raise+0xc>)
 8011e0e:	4601      	mov	r1, r0
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	f7ff bfd2 	b.w	8011dba <_raise_r>
 8011e16:	bf00      	nop
 8011e18:	200001a0 	.word	0x200001a0

08011e1c <_kill_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4d07      	ldr	r5, [pc, #28]	; (8011e3c <_kill_r+0x20>)
 8011e20:	2300      	movs	r3, #0
 8011e22:	4604      	mov	r4, r0
 8011e24:	4608      	mov	r0, r1
 8011e26:	4611      	mov	r1, r2
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	f7f0 fb81 	bl	8002530 <_kill>
 8011e2e:	1c43      	adds	r3, r0, #1
 8011e30:	d102      	bne.n	8011e38 <_kill_r+0x1c>
 8011e32:	682b      	ldr	r3, [r5, #0]
 8011e34:	b103      	cbz	r3, 8011e38 <_kill_r+0x1c>
 8011e36:	6023      	str	r3, [r4, #0]
 8011e38:	bd38      	pop	{r3, r4, r5, pc}
 8011e3a:	bf00      	nop
 8011e3c:	20000ae4 	.word	0x20000ae4

08011e40 <_getpid_r>:
 8011e40:	f7f0 bb6e 	b.w	8002520 <_getpid>

08011e44 <_init>:
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	bf00      	nop
 8011e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e4a:	bc08      	pop	{r3}
 8011e4c:	469e      	mov	lr, r3
 8011e4e:	4770      	bx	lr

08011e50 <_fini>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	bf00      	nop
 8011e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e56:	bc08      	pop	{r3}
 8011e58:	469e      	mov	lr, r3
 8011e5a:	4770      	bx	lr
