
Digimat_transmitter_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001be58  0800f190  0800f190  0001f190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802afe8  0802afe8  00040340  2**0
                  CONTENTS
  4 .ARM          00000008  0802afe8  0802afe8  0003afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802aff0  0802aff0  00040340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802aff0  0802aff0  0003aff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802aff4  0802aff4  0003aff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  0802aff8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f808  20000340  0802b338  00040340  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000fb48  0802b338  0004fb48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068ca2  00000000  00000000  00040370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b4a  00000000  00000000  000a9012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003b4b0  00000000  00000000  000b0b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037f8  00000000  00000000  000ec010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003720  00000000  00000000  000ef808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fcaf  00000000  00000000  000f2f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000465b1  00000000  00000000  00112bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b08c2  00000000  00000000  00159188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c5  00000000  00000000  00209a4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d678  00000000  00000000  00209b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000340 	.word	0x20000340
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f174 	.word	0x0800f174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000344 	.word	0x20000344
 80001dc:	0800f174 	.word	0x0800f174

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000ebc:	b508      	push	{r3, lr}
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f006 f8b5 	bl	8007030 <BSP_PB_Init>
	BSP_LED_Init(LED2);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f006 f88e 	bl	8006fe8 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f006 f905 	bl	80070dc <BSP_COM_Init>
}
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	0000      	movs	r0, r0
	...

08000ed8 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
	if (set_connectable)
 8000edc:	4baa      	ldr	r3, [pc, #680]	; (8001188 <User_Process+0x2b0>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d154      	bne.n	8000f8e <User_Process+0xb6>

		set_connectable = FALSE;
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
	}

	if (BLE_Role == CLIENT)
 8000ee4:	4ba9      	ldr	r3, [pc, #676]	; (800118c <User_Process+0x2b4>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b9d3      	cbnz	r3, 8000f20 <User_Process+0x48>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 8000eea:	4ba9      	ldr	r3, [pc, #676]	; (8001190 <User_Process+0x2b8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b11b      	cbz	r3, 8000ef8 <User_Process+0x20>
 8000ef0:	4ba8      	ldr	r3, [pc, #672]	; (8001194 <User_Process+0x2bc>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d058      	beq.n	8000faa <User_Process+0xd2>
			startReadTXCharHandle();
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 8000ef8:	4ba5      	ldr	r3, [pc, #660]	; (8001190 <User_Process+0x2b8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	b11b      	cbz	r3, 8000f06 <User_Process+0x2e>
 8000efe:	4ba6      	ldr	r3, [pc, #664]	; (8001198 <User_Process+0x2c0>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d054      	beq.n	8000fb0 <User_Process+0xd8>
			startReadRXCharHandle();
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000f06:	4ba2      	ldr	r3, [pc, #648]	; (8001190 <User_Process+0x2b8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b14b      	cbz	r3, 8000f20 <User_Process+0x48>
 8000f0c:	4ba1      	ldr	r3, [pc, #644]	; (8001194 <User_Process+0x2bc>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b133      	cbz	r3, 8000f20 <User_Process+0x48>
 8000f12:	4ba1      	ldr	r3, [pc, #644]	; (8001198 <User_Process+0x2c0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b11b      	cbz	r3, 8000f20 <User_Process+0x48>
 8000f18:	4ba0      	ldr	r3, [pc, #640]	; (800119c <User_Process+0x2c4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d04a      	beq.n	8000fb6 <User_Process+0xde>
			enableNotification();
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed || acquisizione_da_inviare)
 8000f20:	4b9f      	ldr	r3, [pc, #636]	; (80011a0 <User_Process+0x2c8>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b91b      	cbnz	r3, 8000f2e <User_Process+0x56>
 8000f26:	4b9f      	ldr	r3, [pc, #636]	; (80011a4 <User_Process+0x2cc>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d02d      	beq.n	8000f8a <User_Process+0xb2>
		//			//BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
		//			/* If uncommented be sure the BSP_LED_Init(LED2)
		//			 * is called in main().
		//			 * E.g. it can be enabled for debugging. */
		//		}
		if (connected && notification_enabled)
 8000f2e:	4b98      	ldr	r3, [pc, #608]	; (8001190 <User_Process+0x2b8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b313      	cbz	r3, 8000f7a <User_Process+0xa2>
 8000f34:	4b99      	ldr	r3, [pc, #612]	; (800119c <User_Process+0x2c4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b1fb      	cbz	r3, 8000f7a <User_Process+0xa2>
		{

			if(conteggio_campioni==0){
 8000f3a:	4b9b      	ldr	r3, [pc, #620]	; (80011a8 <User_Process+0x2d0>)
 8000f3c:	681d      	ldr	r5, [r3, #0]
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d03f      	beq.n	8000fc2 <User_Process+0xea>
				conteggio_campioni=0;
				fine=0;
			}

			uint8_t data[20];
			sprintf((char *)data, "%d,%f,%f#",cuscinetto, misure_temperatura, misure_umidita);
 8000f42:	4b9a      	ldr	r3, [pc, #616]	; (80011ac <User_Process+0x2d4>)
 8000f44:	781c      	ldrb	r4, [r3, #0]
 8000f46:	4b9a      	ldr	r3, [pc, #616]	; (80011b0 <User_Process+0x2d8>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f7ff fb05 	bl	8000558 <__aeabi_f2d>
 8000f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f52:	4b98      	ldr	r3, [pc, #608]	; (80011b4 <User_Process+0x2dc>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	f7ff faff 	bl	8000558 <__aeabi_f2d>
 8000f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8000f5e:	4622      	mov	r2, r4
 8000f60:	4995      	ldr	r1, [pc, #596]	; (80011b8 <User_Process+0x2e0>)
 8000f62:	a805      	add	r0, sp, #20
 8000f64:	f00b f9c2 	bl	800c2ec <siprintf>
						sendData(data, sizeof(data));
 8000f68:	2114      	movs	r1, #20
 8000f6a:	eb0d 0001 	add.w	r0, sp, r1
 8000f6e:	f000 fc23 	bl	80017b8 <sendData>
			//				sprintf((char *)data, ",%f\r\n", misure_temperatura);
			//				sendData(data, sizeof(data));
			contatore_invii++;
 8000f72:	4a92      	ldr	r2, [pc, #584]	; (80011bc <User_Process+0x2e4>)
 8000f74:	7813      	ldrb	r3, [r2, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	7013      	strb	r3, [r2, #0]

		}

		/* Reset the User Button flag */
		user_button_pressed = 0;
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <User_Process+0x2c8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

		/*RESET SISTEMA A 30 INVII, CIRCA 30 SECONDI */
				if(contatore_invii>30) HAL_NVIC_SystemReset();
 8000f80:	4b8e      	ldr	r3, [pc, #568]	; (80011bc <User_Process+0x2e4>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b1e      	cmp	r3, #30
 8000f86:	f200 81f7 	bhi.w	8001378 <User_Process+0x4a0>
	//		sprintf((char *)data, "%ld,%ld,%ld,%f",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z, misure_temperatura);
	//		sendData(data, sizeof(data));
	//	}
	//#endif
	/* USER CODE END DIGIMAT CODE */
}
 8000f8a:	b00a      	add	sp, #40	; 0x28
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
		Make_Connection();
 8000f8e:	f000 fb67 	bl	8001660 <Make_Connection>
		HAL_TIM_Base_Start_IT(&htim3);
 8000f92:	488b      	ldr	r0, [pc, #556]	; (80011c0 <User_Process+0x2e8>)
 8000f94:	f007 fe52 	bl	8008c3c <HAL_TIM_Base_Start_IT>
		set_connectable = FALSE;
 8000f98:	2000      	movs	r0, #0
 8000f9a:	4b7b      	ldr	r3, [pc, #492]	; (8001188 <User_Process+0x2b0>)
 8000f9c:	7018      	strb	r0, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f9e:	f006 f875 	bl	800708c <BSP_PB_GetState>
 8000fa2:	b2c0      	uxtb	r0, r0
 8000fa4:	4b87      	ldr	r3, [pc, #540]	; (80011c4 <User_Process+0x2ec>)
 8000fa6:	7018      	strb	r0, [r3, #0]
 8000fa8:	e79c      	b.n	8000ee4 <User_Process+0xc>
			startReadTXCharHandle();
 8000faa:	f000 fbaf 	bl	800170c <startReadTXCharHandle>
 8000fae:	e7aa      	b.n	8000f06 <User_Process+0x2e>
			startReadRXCharHandle();
 8000fb0:	f000 fbcc 	bl	800174c <startReadRXCharHandle>
 8000fb4:	e7a7      	b.n	8000f06 <User_Process+0x2e>
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f006 f826 	bl	8007008 <BSP_LED_Off>
			enableNotification();
 8000fbc:	f000 fc24 	bl	8001808 <enableNotification>
 8000fc0:	e7ae      	b.n	8000f20 <User_Process+0x48>
				printf("dimensione massima \r\n");
 8000fc2:	4881      	ldr	r0, [pc, #516]	; (80011c8 <User_Process+0x2f0>)
 8000fc4:	f00b f97a 	bl	800c2bc <puts>
				for (int i = 0; i < SAMPLES; i += 2) {
 8000fc8:	462b      	mov	r3, r5
 8000fca:	e017      	b.n	8000ffc <User_Process+0x124>
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].x);
 8000fcc:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8000fd0:	f021 0201 	bic.w	r2, r1, #1
 8000fd4:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8000fd8:	497c      	ldr	r1, [pc, #496]	; (80011cc <User_Process+0x2f4>)
 8000fda:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8000fde:	edd2 7a00 	vldr	s15, [r2]
 8000fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <User_Process+0x2f8>)
 8000fe8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8000fec:	edc1 7a00 	vstr	s15, [r1]
					fft_in_buf_real[(i + 1)] = 0;
 8000ff0:	1c59      	adds	r1, r3, #1
 8000ff2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	6011      	str	r1, [r2, #0]
				for (int i = 0; i < SAMPLES; i += 2) {
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001000:	dbe4      	blt.n	8000fcc <User_Process+0xf4>
				arm_cfft_f32(&fft_handler, fft_in_buf_real, 0, 1);
 8001002:	4e73      	ldr	r6, [pc, #460]	; (80011d0 <User_Process+0x2f8>)
 8001004:	2301      	movs	r3, #1
 8001006:	2200      	movs	r2, #0
 8001008:	4631      	mov	r1, r6
 800100a:	4872      	ldr	r0, [pc, #456]	; (80011d4 <User_Process+0x2fc>)
 800100c:	f009 fc88 	bl	800a920 <arm_cfft_f32>
				arm_cmplx_mag_f32(fft_in_buf_real, fft_out_buf_real, FFT_SIZE);
 8001010:	4c71      	ldr	r4, [pc, #452]	; (80011d8 <User_Process+0x300>)
 8001012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001016:	4621      	mov	r1, r4
 8001018:	4630      	mov	r0, r6
 800101a:	f009 fd77 	bl	800ab0c <arm_cmplx_mag_f32>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 800101e:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <User_Process+0x304>)
 8001020:	4a6f      	ldr	r2, [pc, #444]	; (80011e0 <User_Process+0x308>)
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	4620      	mov	r0, r4
 8001028:	f008 ffec 	bl	800a004 <arm_max_f32>
				for (int i = 0; i < FFT_SIZE; i ++) {
 800102c:	462c      	mov	r4, r5
 800102e:	e01f      	b.n	8001070 <User_Process+0x198>
					psd_out_buf_x[i]= (double)((float)2000.0/2048.0)* pow(abs(fft_out_buf_real[i]),2);
 8001030:	4b69      	ldr	r3, [pc, #420]	; (80011d8 <User_Process+0x300>)
 8001032:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103e:	ee17 0a90 	vmov	r0, s15
 8001042:	2800      	cmp	r0, #0
 8001044:	bfb8      	it	lt
 8001046:	4240      	neglt	r0, r0
 8001048:	f7ff fa74 	bl	8000534 <__aeabi_i2d>
 800104c:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8001180 <User_Process+0x2a8>
 8001050:	ec41 0b10 	vmov	d0, r0, r1
 8001054:	f00d f952 	bl	800e2fc <pow>
 8001058:	ec51 0b10 	vmov	r0, r1, d0
 800105c:	2200      	movs	r2, #0
 800105e:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <User_Process+0x30c>)
 8001060:	f7ff fad2 	bl	8000608 <__aeabi_dmul>
 8001064:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <User_Process+0x310>)
 8001066:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800106a:	e9c3 0100 	strd	r0, r1, [r3]
				for (int i = 0; i < FFT_SIZE; i ++) {
 800106e:	3401      	adds	r4, #1
 8001070:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001074:	dbdc      	blt.n	8001030 <User_Process+0x158>
				sum_psd_out_buf_x=0;
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <User_Process+0x314>)
 8001078:	2000      	movs	r0, #0
 800107a:	2100      	movs	r1, #0
 800107c:	e9c3 0100 	strd	r0, r1, [r3]
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001080:	462c      	mov	r4, r5
 8001082:	e00c      	b.n	800109e <User_Process+0x1c6>
					sum_psd_out_buf_x= sum_psd_out_buf_x + psd_out_buf_x[i];
 8001084:	4958      	ldr	r1, [pc, #352]	; (80011e8 <User_Process+0x310>)
 8001086:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800108a:	4e58      	ldr	r6, [pc, #352]	; (80011ec <User_Process+0x314>)
 800108c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001094:	f7ff f902 	bl	800029c <__adddf3>
 8001098:	e9c6 0100 	strd	r0, r1, [r6]
				for (int i = 0; i < FFT_SIZE; i ++) {
 800109c:	3401      	adds	r4, #1
 800109e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80010a2:	dbef      	blt.n	8001084 <User_Process+0x1ac>
				sum_psd_out_buf_x=sum_psd_out_buf_x/FFT_SIZE;
 80010a4:	4c51      	ldr	r4, [pc, #324]	; (80011ec <User_Process+0x314>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80010ac:	e9d4 0100 	ldrd	r0, r1, [r4]
 80010b0:	f7ff faaa 	bl	8000608 <__aeabi_dmul>
 80010b4:	2200      	movs	r2, #0
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <User_Process+0x318>)
 80010b8:	f7ff faa6 	bl	8000608 <__aeabi_dmul>
 80010bc:	e9c4 0100 	strd	r0, r1, [r4]
				for (int i = 0; i < SAMPLES; i += 2) {
 80010c0:	462b      	mov	r3, r5
 80010c2:	e017      	b.n	80010f4 <User_Process+0x21c>
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].y);
 80010c4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 80010c8:	f021 0201 	bic.w	r2, r1, #1
 80010cc:	eb02 0161 	add.w	r1, r2, r1, asr #1
 80010d0:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <User_Process+0x2f4>)
 80010d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80010d6:	edd2 7a01 	vldr	s15, [r2, #4]
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	4a3c      	ldr	r2, [pc, #240]	; (80011d0 <User_Process+0x2f8>)
 80010e0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80010e4:	edc1 7a00 	vstr	s15, [r1]
					fft_in_buf_real[(i + 1)] = 0;
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80010ee:	2100      	movs	r1, #0
 80010f0:	6011      	str	r1, [r2, #0]
				for (int i = 0; i < SAMPLES; i += 2) {
 80010f2:	3302      	adds	r3, #2
 80010f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010f8:	dbe4      	blt.n	80010c4 <User_Process+0x1ec>
				arm_cfft_f32(&fft_handler, fft_in_buf_real, 0, 1);
 80010fa:	4e35      	ldr	r6, [pc, #212]	; (80011d0 <User_Process+0x2f8>)
 80010fc:	2301      	movs	r3, #1
 80010fe:	2200      	movs	r2, #0
 8001100:	4631      	mov	r1, r6
 8001102:	4834      	ldr	r0, [pc, #208]	; (80011d4 <User_Process+0x2fc>)
 8001104:	f009 fc0c 	bl	800a920 <arm_cfft_f32>
				arm_cmplx_mag_f32(fft_in_buf_real, fft_out_buf_real, FFT_SIZE);
 8001108:	4c33      	ldr	r4, [pc, #204]	; (80011d8 <User_Process+0x300>)
 800110a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110e:	4621      	mov	r1, r4
 8001110:	4630      	mov	r0, r6
 8001112:	f009 fcfb 	bl	800ab0c <arm_cmplx_mag_f32>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <User_Process+0x304>)
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <User_Process+0x308>)
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	4620      	mov	r0, r4
 8001120:	f008 ff70 	bl	800a004 <arm_max_f32>
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001124:	462c      	mov	r4, r5
 8001126:	e01f      	b.n	8001168 <User_Process+0x290>
					psd_out_buf_y[i]= (double)((float)2000.0/2048.0)* pow(abs(fft_out_buf_real[i]),2);
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <User_Process+0x300>)
 800112a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	ee17 0a90 	vmov	r0, s15
 800113a:	2800      	cmp	r0, #0
 800113c:	bfb8      	it	lt
 800113e:	4240      	neglt	r0, r0
 8001140:	f7ff f9f8 	bl	8000534 <__aeabi_i2d>
 8001144:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001180 <User_Process+0x2a8>
 8001148:	ec41 0b10 	vmov	d0, r0, r1
 800114c:	f00d f8d6 	bl	800e2fc <pow>
 8001150:	ec51 0b10 	vmov	r0, r1, d0
 8001154:	2200      	movs	r2, #0
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <User_Process+0x30c>)
 8001158:	f7ff fa56 	bl	8000608 <__aeabi_dmul>
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <User_Process+0x31c>)
 800115e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001162:	e9c3 0100 	strd	r0, r1, [r3]
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001166:	3401      	adds	r4, #1
 8001168:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800116c:	dbdc      	blt.n	8001128 <User_Process+0x250>
				sum_psd_out_buf_y=0;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <User_Process+0x320>)
 8001170:	2000      	movs	r0, #0
 8001172:	2100      	movs	r1, #0
 8001174:	e9c3 0100 	strd	r0, r1, [r3]
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001178:	462c      	mov	r4, r5
 800117a:	e04c      	b.n	8001216 <User_Process+0x33e>
 800117c:	f3af 8000 	nop.w
 8001180:	00000000 	.word	0x00000000
 8001184:	40000000 	.word	0x40000000
 8001188:	20000001 	.word	0x20000001
 800118c:	2000035c 	.word	0x2000035c
 8001190:	20006380 	.word	0x20006380
 8001194:	20006387 	.word	0x20006387
 8001198:	20006386 	.word	0x20006386
 800119c:	20006388 	.word	0x20006388
 80011a0:	20006378 	.word	0x20006378
 80011a4:	2000f56c 	.word	0x2000f56c
 80011a8:	2000649c 	.word	0x2000649c
 80011ac:	2000035f 	.word	0x2000035f
 80011b0:	2000f568 	.word	0x2000f568
 80011b4:	2000f564 	.word	0x2000f564
 80011b8:	0800f200 	.word	0x0800f200
 80011bc:	2000035e 	.word	0x2000035e
 80011c0:	20009514 	.word	0x20009514
 80011c4:	20000000 	.word	0x20000000
 80011c8:	0800f1e8 	.word	0x0800f1e8
 80011cc:	20009564 	.word	0x20009564
 80011d0:	200064cc 	.word	0x200064cc
 80011d4:	200064a0 	.word	0x200064a0
 80011d8:	200084cc 	.word	0x200084cc
 80011dc:	2000955c 	.word	0x2000955c
 80011e0:	20009560 	.word	0x20009560
 80011e4:	3fef4000 	.word	0x3fef4000
 80011e8:	20000360 	.word	0x20000360
 80011ec:	20006360 	.word	0x20006360
 80011f0:	3fe00000 	.word	0x3fe00000
 80011f4:	20002360 	.word	0x20002360
 80011f8:	20006368 	.word	0x20006368
					sum_psd_out_buf_y= sum_psd_out_buf_y + psd_out_buf_y[i];
 80011fc:	4964      	ldr	r1, [pc, #400]	; (8001390 <User_Process+0x4b8>)
 80011fe:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001202:	4e64      	ldr	r6, [pc, #400]	; (8001394 <User_Process+0x4bc>)
 8001204:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800120c:	f7ff f846 	bl	800029c <__adddf3>
 8001210:	e9c6 0100 	strd	r0, r1, [r6]
				for (int i = 0; i < FFT_SIZE; i ++) {
 8001214:	3401      	adds	r4, #1
 8001216:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800121a:	dbef      	blt.n	80011fc <User_Process+0x324>
				sum_psd_out_buf_y=sum_psd_out_buf_y/FFT_SIZE;
 800121c:	4c5d      	ldr	r4, [pc, #372]	; (8001394 <User_Process+0x4bc>)
 800121e:	2200      	movs	r2, #0
 8001220:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001224:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001228:	f7ff f9ee 	bl	8000608 <__aeabi_dmul>
 800122c:	2200      	movs	r2, #0
 800122e:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <User_Process+0x4c0>)
 8001230:	f7ff f9ea 	bl	8000608 <__aeabi_dmul>
 8001234:	e9c4 0100 	strd	r0, r1, [r4]
				for (int i = 0; i < SAMPLES; i += 2) {
 8001238:	462b      	mov	r3, r5
 800123a:	e017      	b.n	800126c <User_Process+0x394>
					fft_in_buf_real[i]=(float32_t)((float32_t)misure_accelerometro[i/2].z);
 800123c:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8001240:	f021 0201 	bic.w	r2, r1, #1
 8001244:	eb02 0161 	add.w	r1, r2, r1, asr #1
 8001248:	4a54      	ldr	r2, [pc, #336]	; (800139c <User_Process+0x4c4>)
 800124a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800124e:	edd2 7a02 	vldr	s15, [r2, #8]
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <User_Process+0x4c8>)
 8001258:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800125c:	edc1 7a00 	vstr	s15, [r1]
					fft_in_buf_real[(i + 1)] = 0;
 8001260:	1c59      	adds	r1, r3, #1
 8001262:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001266:	2100      	movs	r1, #0
 8001268:	6011      	str	r1, [r2, #0]
				for (int i = 0; i < SAMPLES; i += 2) {
 800126a:	3302      	adds	r3, #2
 800126c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001270:	dbe4      	blt.n	800123c <User_Process+0x364>
				arm_cfft_f32(&fft_handler, fft_in_buf_real, 0, 1);
 8001272:	4e4b      	ldr	r6, [pc, #300]	; (80013a0 <User_Process+0x4c8>)
 8001274:	2301      	movs	r3, #1
 8001276:	2200      	movs	r2, #0
 8001278:	4631      	mov	r1, r6
 800127a:	484a      	ldr	r0, [pc, #296]	; (80013a4 <User_Process+0x4cc>)
 800127c:	f009 fb50 	bl	800a920 <arm_cfft_f32>
				arm_cmplx_mag_f32(fft_in_buf_real, fft_out_buf_real, FFT_SIZE);
 8001280:	4c49      	ldr	r4, [pc, #292]	; (80013a8 <User_Process+0x4d0>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	4621      	mov	r1, r4
 8001288:	4630      	mov	r0, r6
 800128a:	f009 fc3f 	bl	800ab0c <arm_cmplx_mag_f32>
				arm_max_f32(fft_out_buf_real, FFT_SIZE, &maxValue, &maxIndex);
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <User_Process+0x4d4>)
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <User_Process+0x4d8>)
 8001292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001296:	4620      	mov	r0, r4
 8001298:	f008 feb4 	bl	800a004 <arm_max_f32>
				for (int i = 0; i < FFT_SIZE; i ++) {
 800129c:	462c      	mov	r4, r5
 800129e:	e01f      	b.n	80012e0 <User_Process+0x408>
					psd_out_buf_z[i]= (double)((float)2000.0/2048.0)* pow(abs(fft_out_buf_real[i]),2);
 80012a0:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <User_Process+0x4d0>)
 80012a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ae:	ee17 0a90 	vmov	r0, s15
 80012b2:	2800      	cmp	r0, #0
 80012b4:	bfb8      	it	lt
 80012b6:	4240      	neglt	r0, r0
 80012b8:	f7ff f93c 	bl	8000534 <__aeabi_i2d>
 80012bc:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001380 <User_Process+0x4a8>
 80012c0:	ec41 0b10 	vmov	d0, r0, r1
 80012c4:	f00d f81a 	bl	800e2fc <pow>
 80012c8:	ec51 0b10 	vmov	r0, r1, d0
 80012cc:	2200      	movs	r2, #0
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <User_Process+0x4dc>)
 80012d0:	f7ff f99a 	bl	8000608 <__aeabi_dmul>
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <User_Process+0x4e0>)
 80012d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80012da:	e9c3 0100 	strd	r0, r1, [r3]
				for (int i = 0; i < FFT_SIZE; i ++) {
 80012de:	3401      	adds	r4, #1
 80012e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80012e4:	dbdc      	blt.n	80012a0 <User_Process+0x3c8>
				sum_psd_out_buf_z=0;
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <User_Process+0x4e4>)
 80012e8:	2000      	movs	r0, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c3 0100 	strd	r0, r1, [r3]
				for (int i = 0; i < FFT_SIZE; i ++) {
 80012f0:	e00c      	b.n	800130c <User_Process+0x434>
					sum_psd_out_buf_z= sum_psd_out_buf_z + psd_out_buf_z[i];
 80012f2:	4931      	ldr	r1, [pc, #196]	; (80013b8 <User_Process+0x4e0>)
 80012f4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80012f8:	4c30      	ldr	r4, [pc, #192]	; (80013bc <User_Process+0x4e4>)
 80012fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80012fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001302:	f7fe ffcb 	bl	800029c <__adddf3>
 8001306:	e9c4 0100 	strd	r0, r1, [r4]
				for (int i = 0; i < FFT_SIZE; i ++) {
 800130a:	3501      	adds	r5, #1
 800130c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001310:	dbef      	blt.n	80012f2 <User_Process+0x41a>
				sum_psd_out_buf_z=sum_psd_out_buf_z/FFT_SIZE;
 8001312:	4c2a      	ldr	r4, [pc, #168]	; (80013bc <User_Process+0x4e4>)
 8001314:	2200      	movs	r2, #0
 8001316:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800131a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800131e:	f7ff f973 	bl	8000608 <__aeabi_dmul>
 8001322:	2200      	movs	r2, #0
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <User_Process+0x4c0>)
 8001326:	f7ff f96f 	bl	8000608 <__aeabi_dmul>
 800132a:	e9c4 0100 	strd	r0, r1, [r4]
				if(sum_psd_out_buf_y<10000.0)
 800132e:	a316      	add	r3, pc, #88	; (adr r3, 8001388 <User_Process+0x4b0>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	4917      	ldr	r1, [pc, #92]	; (8001394 <User_Process+0x4bc>)
 8001336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800133a:	f7ff fbd7 	bl	8000aec <__aeabi_dcmplt>
 800133e:	b1b8      	cbz	r0, 8001370 <User_Process+0x498>
					cuscinetto=Bearing_Broken;
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <User_Process+0x4e8>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
				IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &misure_temperatura);
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <User_Process+0x4ec>)
 8001348:	2101      	movs	r1, #1
 800134a:	2002      	movs	r0, #2
 800134c:	f005 fae0 	bl	8006910 <IKS01A3_ENV_SENSOR_GetValue>
				IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &misure_umidita);
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <User_Process+0x4f0>)
 8001352:	2104      	movs	r1, #4
 8001354:	2000      	movs	r0, #0
 8001356:	f005 fadb 	bl	8006910 <IKS01A3_ENV_SENSOR_GetValue>
				acquisizione_da_inviare=0;
 800135a:	2400      	movs	r4, #0
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <User_Process+0x4f4>)
 800135e:	701c      	strb	r4, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim3);
 8001360:	481b      	ldr	r0, [pc, #108]	; (80013d0 <User_Process+0x4f8>)
 8001362:	f007 fc6b 	bl	8008c3c <HAL_TIM_Base_Start_IT>
				conteggio_campioni=0;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <User_Process+0x4fc>)
 8001368:	601c      	str	r4, [r3, #0]
				fine=0;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <User_Process+0x500>)
 800136c:	601c      	str	r4, [r3, #0]
 800136e:	e5e8      	b.n	8000f42 <User_Process+0x6a>
				else cuscinetto=Bearing_Healthy;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <User_Process+0x4e8>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e7e6      	b.n	8001346 <User_Process+0x46e>
				if(contatore_invii>30) HAL_NVIC_SystemReset();
 8001378:	f005 ffa6 	bl	80072c8 <HAL_NVIC_SystemReset>
}
 800137c:	e605      	b.n	8000f8a <User_Process+0xb2>
 800137e:	bf00      	nop
 8001380:	00000000 	.word	0x00000000
 8001384:	40000000 	.word	0x40000000
 8001388:	00000000 	.word	0x00000000
 800138c:	40c38800 	.word	0x40c38800
 8001390:	20002360 	.word	0x20002360
 8001394:	20006368 	.word	0x20006368
 8001398:	3fe00000 	.word	0x3fe00000
 800139c:	20009564 	.word	0x20009564
 80013a0:	200064cc 	.word	0x200064cc
 80013a4:	200064a0 	.word	0x200064a0
 80013a8:	200084cc 	.word	0x200084cc
 80013ac:	2000955c 	.word	0x2000955c
 80013b0:	20009560 	.word	0x20009560
 80013b4:	3fef4000 	.word	0x3fef4000
 80013b8:	20004360 	.word	0x20004360
 80013bc:	20006370 	.word	0x20006370
 80013c0:	2000035f 	.word	0x2000035f
 80013c4:	2000f564 	.word	0x2000f564
 80013c8:	2000f568 	.word	0x2000f568
 80013cc:	2000f56c 	.word	0x2000f56c
 80013d0:	20009514 	.word	0x20009514
 80013d4:	2000649c 	.word	0x2000649c
 80013d8:	2000f56d 	.word	0x2000f56d

080013dc <MX_BlueNRG_MS_Init>:
{
 80013dc:	b500      	push	{lr}
 80013de:	b08f      	sub	sp, #60	; 0x3c
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80013e0:	4b60      	ldr	r3, [pc, #384]	; (8001564 <MX_BlueNRG_MS_Init+0x188>)
 80013e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013e6:	900c      	str	r0, [sp, #48]	; 0x30
 80013e8:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80013ec:	3308      	adds	r3, #8
 80013ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013f2:	900a      	str	r0, [sp, #40]	; 0x28
 80013f4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
	User_Init();
 80013f8:	f7ff fd60 	bl	8000ebc <User_Init>
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f005 fe45 	bl	800708c <BSP_PB_GetState>
 8001402:	b2c0      	uxtb	r0, r0
 8001404:	4b58      	ldr	r3, [pc, #352]	; (8001568 <MX_BlueNRG_MS_Init+0x18c>)
 8001406:	7018      	strb	r0, [r3, #0]
	hci_init(user_notify, NULL);
 8001408:	2100      	movs	r1, #0
 800140a:	4858      	ldr	r0, [pc, #352]	; (800156c <MX_BlueNRG_MS_Init+0x190>)
 800140c:	f008 fc5a 	bl	8009cc4 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8001410:	f10d 0116 	add.w	r1, sp, #22
 8001414:	f10d 0019 	add.w	r0, sp, #25
 8001418:	f008 fb3c 	bl	8009a94 <getBlueNRGVersion>
	hci_reset();
 800141c:	f008 fb64 	bl	8009ae8 <hci_reset>
	HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f005 fee5 	bl	80071f0 <HAL_Delay>
	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8001426:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800142a:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800142e:	4850      	ldr	r0, [pc, #320]	; (8001570 <MX_BlueNRG_MS_Init+0x194>)
 8001430:	f00a fea8 	bl	800c184 <iprintf>
	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8001434:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001438:	2b30      	cmp	r3, #48	; 0x30
 800143a:	d902      	bls.n	8001442 <MX_BlueNRG_MS_Init+0x66>
		bnrg_expansion_board = IDB05A1;
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <MX_BlueNRG_MS_Init+0x198>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
	if (BLE_Role == CLIENT) {
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <MX_BlueNRG_MS_Init+0x19c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d13f      	bne.n	80014ca <MX_BlueNRG_MS_Init+0xee>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800144a:	ab0e      	add	r3, sp, #56	; 0x38
 800144c:	e913 0003 	ldmdb	r3, {r0, r1}
 8001450:	9008      	str	r0, [sp, #32]
 8001452:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001456:	aa08      	add	r2, sp, #32
 8001458:	2106      	movs	r1, #6
 800145a:	2000      	movs	r0, #0
 800145c:	f008 fabf 	bl	80099de <aci_hal_write_config_data>
	if (ret) {
 8001460:	4601      	mov	r1, r0
 8001462:	2800      	cmp	r0, #0
 8001464:	d138      	bne.n	80014d8 <MX_BlueNRG_MS_Init+0xfc>
	ret = aci_gatt_init();
 8001466:	f008 f910 	bl	800968a <aci_gatt_init>
	if (ret) {
 800146a:	2800      	cmp	r0, #0
 800146c:	d138      	bne.n	80014e0 <MX_BlueNRG_MS_Init+0x104>
	if (BLE_Role == SERVER) {
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <MX_BlueNRG_MS_Init+0x19c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d038      	beq.n	80014e8 <MX_BlueNRG_MS_Init+0x10c>
		if (bnrg_expansion_board == IDB05A1) {
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <MX_BlueNRG_MS_Init+0x198>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d04e      	beq.n	800151c <MX_BlueNRG_MS_Init+0x140>
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800147e:	f10d 031a 	add.w	r3, sp, #26
 8001482:	aa07      	add	r2, sp, #28
 8001484:	f10d 011e 	add.w	r1, sp, #30
 8001488:	2003      	movs	r0, #3
 800148a:	f007 ffd5 	bl	8009438 <aci_gap_init_IDB04A1>
	if (ret != BLE_STATUS_SUCCESS) {
 800148e:	2800      	cmp	r0, #0
 8001490:	d151      	bne.n	8001536 <MX_BlueNRG_MS_Init+0x15a>
	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001492:	2001      	movs	r0, #1
 8001494:	9003      	str	r0, [sp, #12]
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <MX_BlueNRG_MS_Init+0x1a0>)
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2100      	movs	r1, #0
 800149c:	9101      	str	r1, [sp, #4]
 800149e:	2310      	movs	r3, #16
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2307      	movs	r3, #7
 80014a4:	460a      	mov	r2, r1
 80014a6:	f008 f85b 	bl	8009560 <aci_gap_set_auth_requirement>
	if (ret == BLE_STATUS_SUCCESS) {
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d047      	beq.n	800153e <MX_BlueNRG_MS_Init+0x162>
	if (BLE_Role == SERVER) {
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <MX_BlueNRG_MS_Init+0x19c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d047      	beq.n	8001546 <MX_BlueNRG_MS_Init+0x16a>
		printf("CLIENT: BLE Stack Initialized\n");
 80014b6:	4832      	ldr	r0, [pc, #200]	; (8001580 <MX_BlueNRG_MS_Init+0x1a4>)
 80014b8:	f00a ff00 	bl	800c2bc <puts>
	ret = aci_hal_set_tx_power_level(1,4);
 80014bc:	2104      	movs	r1, #4
 80014be:	2001      	movs	r0, #1
 80014c0:	f008 fac0 	bl	8009a44 <aci_hal_set_tx_power_level>
}
 80014c4:	b00f      	add	sp, #60	; 0x3c
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80014ca:	ab0a      	add	r3, sp, #40	; 0x28
 80014cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d0:	9008      	str	r0, [sp, #32]
 80014d2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80014d6:	e7be      	b.n	8001456 <MX_BlueNRG_MS_Init+0x7a>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 80014d8:	482a      	ldr	r0, [pc, #168]	; (8001584 <MX_BlueNRG_MS_Init+0x1a8>)
 80014da:	f00a fe53 	bl	800c184 <iprintf>
 80014de:	e7c2      	b.n	8001466 <MX_BlueNRG_MS_Init+0x8a>
		printf("GATT_Init failed.\n");
 80014e0:	4829      	ldr	r0, [pc, #164]	; (8001588 <MX_BlueNRG_MS_Init+0x1ac>)
 80014e2:	f00a feeb 	bl	800c2bc <puts>
 80014e6:	e7c2      	b.n	800146e <MX_BlueNRG_MS_Init+0x92>
		if (bnrg_expansion_board == IDB05A1) {
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_BlueNRG_MS_Init+0x198>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d008      	beq.n	8001502 <MX_BlueNRG_MS_Init+0x126>
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80014f0:	f10d 031a 	add.w	r3, sp, #26
 80014f4:	aa07      	add	r2, sp, #28
 80014f6:	f10d 011e 	add.w	r1, sp, #30
 80014fa:	2001      	movs	r0, #1
 80014fc:	f007 ff9c 	bl	8009438 <aci_gap_init_IDB04A1>
 8001500:	e7c5      	b.n	800148e <MX_BlueNRG_MS_Init+0xb2>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001502:	f10d 031a 	add.w	r3, sp, #26
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	ab07      	add	r3, sp, #28
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f10d 031e 	add.w	r3, sp, #30
 8001510:	2207      	movs	r2, #7
 8001512:	2100      	movs	r1, #0
 8001514:	2001      	movs	r0, #1
 8001516:	f007 ff57 	bl	80093c8 <aci_gap_init_IDB05A1>
 800151a:	e7b8      	b.n	800148e <MX_BlueNRG_MS_Init+0xb2>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800151c:	f10d 031a 	add.w	r3, sp, #26
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	ab07      	add	r3, sp, #28
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f10d 031e 	add.w	r3, sp, #30
 800152a:	2207      	movs	r2, #7
 800152c:	2100      	movs	r1, #0
 800152e:	2004      	movs	r0, #4
 8001530:	f007 ff4a 	bl	80093c8 <aci_gap_init_IDB05A1>
 8001534:	e7ab      	b.n	800148e <MX_BlueNRG_MS_Init+0xb2>
		printf("GAP_Init failed.\n");
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_BlueNRG_MS_Init+0x1b0>)
 8001538:	f00a fec0 	bl	800c2bc <puts>
 800153c:	e7a9      	b.n	8001492 <MX_BlueNRG_MS_Init+0xb6>
		printf("BLE Stack Initialized.\n");
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_BlueNRG_MS_Init+0x1b4>)
 8001540:	f00a febc 	bl	800c2bc <puts>
 8001544:	e7b3      	b.n	80014ae <MX_BlueNRG_MS_Init+0xd2>
		printf("SERVER: BLE Stack Initialized\n");
 8001546:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_BlueNRG_MS_Init+0x1b8>)
 8001548:	f00a feb8 	bl	800c2bc <puts>
		ret = Add_Sample_Service();
 800154c:	f000 f834 	bl	80015b8 <Add_Sample_Service>
		if (ret == BLE_STATUS_SUCCESS)
 8001550:	b918      	cbnz	r0, 800155a <MX_BlueNRG_MS_Init+0x17e>
			printf("Service added successfully.\n");
 8001552:	4811      	ldr	r0, [pc, #68]	; (8001598 <MX_BlueNRG_MS_Init+0x1bc>)
 8001554:	f00a feb2 	bl	800c2bc <puts>
 8001558:	e7b0      	b.n	80014bc <MX_BlueNRG_MS_Init+0xe0>
			printf("Error while adding service.\n");
 800155a:	4810      	ldr	r0, [pc, #64]	; (800159c <MX_BlueNRG_MS_Init+0x1c0>)
 800155c:	f00a feae 	bl	800c2bc <puts>
 8001560:	e7ac      	b.n	80014bc <MX_BlueNRG_MS_Init+0xe0>
 8001562:	bf00      	nop
 8001564:	0800f190 	.word	0x0800f190
 8001568:	20000000 	.word	0x20000000
 800156c:	08001941 	.word	0x08001941
 8001570:	0800f20c 	.word	0x0800f20c
 8001574:	2000035d 	.word	0x2000035d
 8001578:	2000035c 	.word	0x2000035c
 800157c:	0001e240 	.word	0x0001e240
 8001580:	0800f2d8 	.word	0x0800f2d8
 8001584:	0800f220 	.word	0x0800f220
 8001588:	0800f240 	.word	0x0800f240
 800158c:	0800f254 	.word	0x0800f254
 8001590:	0800f268 	.word	0x0800f268
 8001594:	0800f280 	.word	0x0800f280
 8001598:	0800f2a0 	.word	0x0800f2a0
 800159c:	0800f2bc 	.word	0x0800f2bc

080015a0 <MX_BlueNRG_MS_Process>:
{
 80015a0:	b508      	push	{r3, lr}
	User_Process();
 80015a2:	f7ff fc99 	bl	8000ed8 <User_Process>
	hci_user_evt_proc();
 80015a6:	f008 fc6d 	bl	8009e84 <hci_user_evt_proc>
}
 80015aa:	bd08      	pop	{r3, pc}

080015ac <BSP_PB_Callback>:
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
	/* Set the User Button flag */
	user_button_pressed = 1;
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <BSP_PB_Callback+0x8>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
}
 80015b2:	4770      	bx	lr
 80015b4:	20006378 	.word	0x20006378

080015b8 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	b092      	sub	sp, #72	; 0x48
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80015bc:	4c24      	ldr	r4, [pc, #144]	; (8001650 <Add_Sample_Service+0x98>)
 80015be:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80015c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80015ca:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80015ce:	f104 0310 	add.w	r3, r4, #16
 80015d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80015d8:	f10d 0e18 	add.w	lr, sp, #24
 80015dc:	3420      	adds	r4, #32
 80015de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015e2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <Add_Sample_Service+0x9c>)
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2307      	movs	r3, #7
 80015ec:	2201      	movs	r2, #1
 80015ee:	4661      	mov	r1, ip
 80015f0:	2002      	movs	r0, #2
 80015f2:	f008 f86b 	bl	80096cc <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80015f6:	bb30      	cbnz	r0, 8001646 <Add_Sample_Service+0x8e>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <Add_Sample_Service+0xa0>)
 80015fa:	9305      	str	r3, [sp, #20]
 80015fc:	2301      	movs	r3, #1
 80015fe:	9304      	str	r3, [sp, #16]
 8001600:	2310      	movs	r3, #16
 8001602:	9303      	str	r3, [sp, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	9202      	str	r2, [sp, #8]
 8001608:	9201      	str	r2, [sp, #4]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2314      	movs	r3, #20
 800160e:	aa0a      	add	r2, sp, #40	; 0x28
 8001610:	2102      	movs	r1, #2
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <Add_Sample_Service+0x9c>)
 8001614:	8800      	ldrh	r0, [r0, #0]
 8001616:	f008 f89e 	bl	8009756 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800161a:	b9b8      	cbnz	r0, 800164c <Add_Sample_Service+0x94>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <Add_Sample_Service+0xa4>)
 800161e:	9305      	str	r3, [sp, #20]
 8001620:	2301      	movs	r3, #1
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	2210      	movs	r2, #16
 8001626:	9203      	str	r2, [sp, #12]
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2300      	movs	r3, #0
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	230c      	movs	r3, #12
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2314      	movs	r3, #20
 8001634:	aa06      	add	r2, sp, #24
 8001636:	2102      	movs	r1, #2
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <Add_Sample_Service+0x9c>)
 800163a:	8800      	ldrh	r0, [r0, #0]
 800163c:	f008 f88b 	bl	8009756 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001640:	b110      	cbz	r0, 8001648 <Add_Sample_Service+0x90>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8001642:	2047      	movs	r0, #71	; 0x47
 8001644:	e000      	b.n	8001648 <Add_Sample_Service+0x90>
 8001646:	2047      	movs	r0, #71	; 0x47
}
 8001648:	b012      	add	sp, #72	; 0x48
 800164a:	bd10      	pop	{r4, pc}
  return BLE_STATUS_ERROR ;
 800164c:	2047      	movs	r0, #71	; 0x47
 800164e:	e7fb      	b.n	8001648 <Add_Sample_Service+0x90>
 8001650:	0800f1a0 	.word	0x0800f1a0
 8001654:	2000638c 	.word	0x2000638c
 8001658:	2000637c 	.word	0x2000637c
 800165c:	2000637a 	.word	0x2000637a

08001660 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8001660:	b500      	push	{lr}
 8001662:	b08d      	sub	sp, #52	; 0x34
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <Make_Connection+0x98>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	bb2b      	cbnz	r3, 80016b6 <Make_Connection+0x56>

    printf("Client Create Connection\n");
 800166a:	4824      	ldr	r0, [pc, #144]	; (80016fc <Make_Connection+0x9c>)
 800166c:	f00a fe26 	bl	800c2bc <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <Make_Connection+0xa0>)
 8001672:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001676:	9008      	str	r0, [sp, #32]
 8001678:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 800167c:	2000      	movs	r0, #0
 800167e:	f005 fcb9 	bl	8006ff4 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8001682:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001686:	9306      	str	r3, [sp, #24]
 8001688:	9305      	str	r3, [sp, #20]
 800168a:	233c      	movs	r3, #60	; 0x3c
 800168c:	9304      	str	r3, [sp, #16]
 800168e:	2200      	movs	r2, #0
 8001690:	9203      	str	r2, [sp, #12]
 8001692:	2328      	movs	r3, #40	; 0x28
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	ab08      	add	r3, sp, #32
 800169c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a0:	4608      	mov	r0, r1
 80016a2:	f007 ffa4 	bl	80095ee <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 80016a6:	b318      	cbz	r0, 80016f0 <Make_Connection+0x90>
      printf("Error while starting connection.\n");
 80016a8:	4816      	ldr	r0, [pc, #88]	; (8001704 <Make_Connection+0xa4>)
 80016aa:	f00a fe07 	bl	800c2bc <puts>
      HAL_Delay(100);
 80016ae:	2064      	movs	r0, #100	; 0x64
 80016b0:	f005 fd9e 	bl	80071f0 <HAL_Delay>
 80016b4:	e01c      	b.n	80016f0 <Make_Connection+0x90>
    }

  } else  {

    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <Make_Connection+0xa8>)
 80016b8:	f10d 0c20 	add.w	ip, sp, #32
 80016bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016be:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80016c2:	f88c 3000 	strb.w	r3, [ip]

    /* disable scan response */
    hci_le_set_scan_resp_data(0,NULL);
 80016c6:	2100      	movs	r1, #0
 80016c8:	4608      	mov	r0, r1
 80016ca:	f008 fa66 	bl	8009b9a <hci_le_set_scan_resp_data>
    /*
    Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
    Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
    Slave_Conn_Interval_Max
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 80016ce:	2000      	movs	r0, #0
 80016d0:	9006      	str	r0, [sp, #24]
 80016d2:	9005      	str	r0, [sp, #20]
 80016d4:	9004      	str	r0, [sp, #16]
 80016d6:	9003      	str	r0, [sp, #12]
 80016d8:	ab08      	add	r3, sp, #32
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	230d      	movs	r3, #13
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	9000      	str	r0, [sp, #0]
 80016e2:	4603      	mov	r3, r0
 80016e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ec:	f007 fed8 	bl	80094a0 <aci_gap_set_discoverable>
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 80016f0:	b00d      	add	sp, #52	; 0x34
 80016f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80016f6:	bf00      	nop
 80016f8:	2000035c 	.word	0x2000035c
 80016fc:	0800f2f8 	.word	0x0800f2f8
 8001700:	0800f1d0 	.word	0x0800f1d0
 8001704:	0800f314 	.word	0x0800f314
 8001708:	0800f338 	.word	0x0800f338

0800170c <startReadTXCharHandle>:
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
  if (!start_read_tx_char_handle)
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <startReadTXCharHandle+0x34>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b103      	cbz	r3, 8001714 <startReadTXCharHandle+0x8>
 8001712:	4770      	bx	lr
{
 8001714:	b510      	push	{r4, lr}
 8001716:	b086      	sub	sp, #24
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001718:	ac02      	add	r4, sp, #8
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <startReadTXCharHandle+0x38>)
 800171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <startReadTXCharHandle+0x3c>)
 8001724:	8818      	ldrh	r0, [r3, #0]
 8001726:	9400      	str	r4, [sp, #0]
 8001728:	2302      	movs	r3, #2
 800172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172e:	2101      	movs	r1, #1
 8001730:	b280      	uxth	r0, r0
 8001732:	f008 f8ae 	bl	8009892 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8001736:	4b02      	ldr	r3, [pc, #8]	; (8001740 <startReadTXCharHandle+0x34>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
  }
}
 800173c:	b006      	add	sp, #24
 800173e:	bd10      	pop	{r4, pc}
 8001740:	2000638f 	.word	0x2000638f
 8001744:	0800f1b0 	.word	0x0800f1b0
 8001748:	20006384 	.word	0x20006384

0800174c <startReadRXCharHandle>:
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
  if (!start_read_rx_char_handle)
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <startReadRXCharHandle+0x34>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b103      	cbz	r3, 8001754 <startReadRXCharHandle+0x8>
 8001752:	4770      	bx	lr
{
 8001754:	b510      	push	{r4, lr}
 8001756:	b086      	sub	sp, #24
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001758:	ac02      	add	r4, sp, #8
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <startReadRXCharHandle+0x38>)
 800175c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <startReadRXCharHandle+0x3c>)
 8001764:	8818      	ldrh	r0, [r3, #0]
 8001766:	9400      	str	r4, [sp, #0]
 8001768:	2302      	movs	r3, #2
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	2101      	movs	r1, #1
 8001770:	b280      	uxth	r0, r0
 8001772:	f008 f88e 	bl	8009892 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8001776:	4b02      	ldr	r3, [pc, #8]	; (8001780 <startReadRXCharHandle+0x34>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
  }
}
 800177c:	b006      	add	sp, #24
 800177e:	bd10      	pop	{r4, pc}
 8001780:	2000638e 	.word	0x2000638e
 8001784:	0800f1c0 	.word	0x0800f1c0
 8001788:	20006384 	.word	0x20006384

0800178c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	4606      	mov	r6, r0
 8001790:	460d      	mov	r5, r1
  BSP_LED_Toggle(LED2);
 8001792:	2000      	movs	r0, #0
 8001794:	f005 fc42 	bl	800701c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8001798:	2400      	movs	r4, #0
 800179a:	e003      	b.n	80017a4 <receiveData+0x18>
    printf("%c", data_buffer[i]);
 800179c:	5d30      	ldrb	r0, [r6, r4]
 800179e:	f00a fd09 	bl	800c1b4 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 80017a2:	3401      	adds	r4, #1
 80017a4:	42a5      	cmp	r5, r4
 80017a6:	dcf9      	bgt.n	800179c <receiveData+0x10>
  }
  fflush(stdout);
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <receiveData+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6898      	ldr	r0, [r3, #8]
 80017ae:	f009 fe59 	bl	800b464 <fflush>
}
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	20000170 	.word	0x20000170

080017b8 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80017b8:	b500      	push	{lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	4603      	mov	r3, r0
 80017be:	460a      	mov	r2, r1
  if(BLE_Role == SERVER) {
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <sendData+0x3c>)
 80017c2:	7809      	ldrb	r1, [r1, #0]
 80017c4:	2901      	cmp	r1, #1
 80017c6:	d00b      	beq.n	80017e0 <sendData+0x28>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 80017c8:	490b      	ldr	r1, [pc, #44]	; (80017f8 <sendData+0x40>)
 80017ca:	8808      	ldrh	r0, [r1, #0]
 80017cc:	490b      	ldr	r1, [pc, #44]	; (80017fc <sendData+0x44>)
 80017ce:	8809      	ldrh	r1, [r1, #0]
 80017d0:	3101      	adds	r1, #1
 80017d2:	b289      	uxth	r1, r1
 80017d4:	b280      	uxth	r0, r0
 80017d6:	f008 f8cd 	bl	8009974 <aci_gatt_write_without_response>
  }
}
 80017da:	b003      	add	sp, #12
 80017dc:	f85d fb04 	ldr.w	pc, [sp], #4
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 80017e0:	9000      	str	r0, [sp, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	2200      	movs	r2, #0
 80017e6:	4906      	ldr	r1, [pc, #24]	; (8001800 <sendData+0x48>)
 80017e8:	8809      	ldrh	r1, [r1, #0]
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <sendData+0x4c>)
 80017ec:	8800      	ldrh	r0, [r0, #0]
 80017ee:	f008 f818 	bl	8009822 <aci_gatt_update_char_value>
 80017f2:	e7f2      	b.n	80017da <sendData+0x22>
 80017f4:	2000035c 	.word	0x2000035c
 80017f8:	20006384 	.word	0x20006384
 80017fc:	2000638a 	.word	0x2000638a
 8001800:	2000637c 	.word	0x2000637c
 8001804:	2000638c 	.word	0x2000638c

08001808 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8001808:	b510      	push	{r4, lr}
 800180a:	b082      	sub	sp, #8
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 800180c:	2301      	movs	r3, #1
 800180e:	f8ad 3004 	strh.w	r3, [sp, #4]

  uint32_t tickstart = HAL_GetTick();
 8001812:	f005 fce7 	bl	80071e4 <HAL_GetTick>
 8001816:	4604      	mov	r4, r0

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <enableNotification+0x44>)
 800181a:	8818      	ldrh	r0, [r3, #0]
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <enableNotification+0x48>)
 800181e:	8819      	ldrh	r1, [r3, #0]
 8001820:	3102      	adds	r1, #2
 8001822:	ab01      	add	r3, sp, #4
 8001824:	2202      	movs	r2, #2
 8001826:	b289      	uxth	r1, r1
 8001828:	b280      	uxth	r0, r0
 800182a:	f008 f86b 	bl	8009904 <aci_gatt_write_charac_descriptor>
 800182e:	2846      	cmp	r0, #70	; 0x46
 8001830:	d106      	bne.n	8001840 <enableNotification+0x38>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8001832:	f005 fcd7 	bl	80071e4 <HAL_GetTick>
 8001836:	1b00      	subs	r0, r0, r4
 8001838:	f242 7310 	movw	r3, #10000	; 0x2710
 800183c:	4298      	cmp	r0, r3
 800183e:	d9eb      	bls.n	8001818 <enableNotification+0x10>
  }
  notification_enabled = TRUE;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <enableNotification+0x4c>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	b002      	add	sp, #8
 8001848:	bd10      	pop	{r4, pc}
 800184a:	bf00      	nop
 800184c:	20006384 	.word	0x20006384
 8001850:	20006390 	.word	0x20006390
 8001854:	20006388 	.word	0x20006388

08001858 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8001858:	b508      	push	{r3, lr}
  if(handle == RXCharHandle + 1){
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <Attribute_Modified_CB+0x30>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4298      	cmp	r0, r3
 8001862:	d005      	beq.n	8001870 <Attribute_Modified_CB+0x18>
    receiveData(att_data, data_length);
  } else if (handle == TXCharHandle + 2) {
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <Attribute_Modified_CB+0x34>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	3302      	adds	r3, #2
 800186a:	4298      	cmp	r0, r3
 800186c:	d004      	beq.n	8001878 <Attribute_Modified_CB+0x20>
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 800186e:	bd08      	pop	{r3, pc}
    receiveData(att_data, data_length);
 8001870:	4610      	mov	r0, r2
 8001872:	f7ff ff8b 	bl	800178c <receiveData>
 8001876:	e7fa      	b.n	800186e <Attribute_Modified_CB+0x16>
    if(att_data[0] == 0x01)
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d1f7      	bne.n	800186e <Attribute_Modified_CB+0x16>
      notification_enabled = TRUE;
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <Attribute_Modified_CB+0x38>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
}
 8001884:	e7f3      	b.n	800186e <Attribute_Modified_CB+0x16>
 8001886:	bf00      	nop
 8001888:	2000637a 	.word	0x2000637a
 800188c:	2000637c 	.word	0x2000637c
 8001890:	20006388 	.word	0x20006388

08001894 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001894:	b538      	push	{r3, r4, r5, lr}
 8001896:	4605      	mov	r5, r0
  connected = TRUE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <GAP_ConnectionComplete_CB+0x30>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <GAP_ConnectionComplete_CB+0x34>)
 80018a0:	8019      	strh	r1, [r3, #0]

  printf("Connected to device:");
 80018a2:	480a      	ldr	r0, [pc, #40]	; (80018cc <GAP_ConnectionComplete_CB+0x38>)
 80018a4:	f00a fc6e 	bl	800c184 <iprintf>
  for(int i = 5; i > 0; i--){
 80018a8:	2405      	movs	r4, #5
 80018aa:	e004      	b.n	80018b6 <GAP_ConnectionComplete_CB+0x22>
    printf("%02X-", addr[i]);
 80018ac:	5d29      	ldrb	r1, [r5, r4]
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <GAP_ConnectionComplete_CB+0x3c>)
 80018b0:	f00a fc68 	bl	800c184 <iprintf>
  for(int i = 5; i > 0; i--){
 80018b4:	3c01      	subs	r4, #1
 80018b6:	2c00      	cmp	r4, #0
 80018b8:	dcf8      	bgt.n	80018ac <GAP_ConnectionComplete_CB+0x18>
  }
  printf("%02X\n", addr[0]);
 80018ba:	7829      	ldrb	r1, [r5, #0]
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <GAP_ConnectionComplete_CB+0x40>)
 80018be:	f00a fc61 	bl	800c184 <iprintf>
}
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
 80018c4:	20006380 	.word	0x20006380
 80018c8:	20006384 	.word	0x20006384
 80018cc:	0800f348 	.word	0x0800f348
 80018d0:	0800f360 	.word	0x0800f360
 80018d4:	0800f368 	.word	0x0800f368

080018d8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80018d8:	b510      	push	{r4, lr}
  connected = FALSE;
 80018da:	2400      	movs	r4, #0
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <GAP_DisconnectionComplete_CB+0x2c>)
 80018de:	601c      	str	r4, [r3, #0]

  printf("Disconnected\n");
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <GAP_DisconnectionComplete_CB+0x30>)
 80018e2:	f00a fceb 	bl	800c2bc <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <GAP_DisconnectionComplete_CB+0x34>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <GAP_DisconnectionComplete_CB+0x38>)
 80018ee:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <GAP_DisconnectionComplete_CB+0x3c>)
 80018f2:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <GAP_DisconnectionComplete_CB+0x40>)
 80018f6:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <GAP_DisconnectionComplete_CB+0x44>)
 80018fa:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <GAP_DisconnectionComplete_CB+0x48>)
 80018fe:	701c      	strb	r4, [r3, #0]
}
 8001900:	bd10      	pop	{r4, pc}
 8001902:	bf00      	nop
 8001904:	20006380 	.word	0x20006380
 8001908:	0800f370 	.word	0x0800f370
 800190c:	20000001 	.word	0x20000001
 8001910:	20006388 	.word	0x20006388
 8001914:	2000638f 	.word	0x2000638f
 8001918:	2000638e 	.word	0x2000638e
 800191c:	20006387 	.word	0x20006387
 8001920:	20006386 	.word	0x20006386

08001924 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8001924:	b508      	push	{r3, lr}
  if (attr_handle == tx_handle+1) {
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <GATT_Notification_CB+0x18>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	4298      	cmp	r0, r3
 800192e:	d000      	beq.n	8001932 <GATT_Notification_CB+0xe>
    receiveData(attr_value, attr_len);
  }
}
 8001930:	bd08      	pop	{r3, pc}
    receiveData(attr_value, attr_len);
 8001932:	4610      	mov	r0, r2
 8001934:	f7ff ff2a 	bl	800178c <receiveData>
}
 8001938:	e7fa      	b.n	8001930 <GATT_Notification_CB+0xc>
 800193a:	bf00      	nop
 800193c:	20006390 	.word	0x20006390

08001940 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001940:	b508      	push	{r3, lr}
  hci_uart_pckt *hci_pckt = pData;
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001942:	7803      	ldrb	r3, [r0, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d106      	bne.n	8001956 <user_notify+0x16>
    return;

  switch(event_pckt->evt){
 8001948:	7843      	ldrb	r3, [r0, #1]
 800194a:	2b3e      	cmp	r3, #62	; 0x3e
 800194c:	d007      	beq.n	800195e <user_notify+0x1e>
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d00e      	beq.n	8001970 <user_notify+0x30>
 8001952:	2b05      	cmp	r3, #5
 8001954:	d000      	beq.n	8001958 <user_notify+0x18>
        break;
      }
    }
    break;
  }
}
 8001956:	bd08      	pop	{r3, pc}
      GAP_DisconnectionComplete_CB();
 8001958:	f7ff ffbe 	bl	80018d8 <GAP_DisconnectionComplete_CB>
    break;
 800195c:	e7fb      	b.n	8001956 <user_notify+0x16>
      switch(evt->subevent){
 800195e:	78c3      	ldrb	r3, [r0, #3]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d1f8      	bne.n	8001956 <user_notify+0x16>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001964:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8001968:	3009      	adds	r0, #9
 800196a:	f7ff ff93 	bl	8001894 <GAP_ConnectionComplete_CB>
        break;
 800196e:	e7f2      	b.n	8001956 <user_notify+0x16>
      switch(blue_evt->ecode){
 8001970:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8001974:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8001978:	2b11      	cmp	r3, #17
 800197a:	d8ec      	bhi.n	8001956 <user_notify+0x16>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <user_notify+0x44>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	080019cd 	.word	0x080019cd
 8001988:	08001957 	.word	0x08001957
 800198c:	08001957 	.word	0x08001957
 8001990:	08001957 	.word	0x08001957
 8001994:	08001957 	.word	0x08001957
 8001998:	08001957 	.word	0x08001957
 800199c:	08001957 	.word	0x08001957
 80019a0:	08001957 	.word	0x08001957
 80019a4:	08001957 	.word	0x08001957
 80019a8:	08001957 	.word	0x08001957
 80019ac:	08001957 	.word	0x08001957
 80019b0:	08001957 	.word	0x08001957
 80019b4:	08001957 	.word	0x08001957
 80019b8:	08001957 	.word	0x08001957
 80019bc:	080019f5 	.word	0x080019f5
 80019c0:	08001a4b 	.word	0x08001a4b
 80019c4:	08001957 	.word	0x08001957
 80019c8:	08001a07 	.word	0x08001a07
          if (bnrg_expansion_board == IDB05A1) {
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <user_notify+0x144>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d007      	beq.n	80019e4 <user_notify+0xa4>
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80019d4:	f100 020a 	add.w	r2, r0, #10
 80019d8:	7a41      	ldrb	r1, [r0, #9]
 80019da:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80019de:	f7ff ff3b 	bl	8001858 <Attribute_Modified_CB>
 80019e2:	e7b8      	b.n	8001956 <user_notify+0x16>
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80019e4:	f100 020c 	add.w	r2, r0, #12
 80019e8:	7a41      	ldrb	r1, [r0, #9]
 80019ea:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80019ee:	f7ff ff33 	bl	8001858 <Attribute_Modified_CB>
 80019f2:	e7b0      	b.n	8001956 <user_notify+0x16>
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 80019f4:	79c1      	ldrb	r1, [r0, #7]
 80019f6:	3902      	subs	r1, #2
 80019f8:	f100 020a 	add.w	r2, r0, #10
 80019fc:	b2c9      	uxtb	r1, r1
 80019fe:	8900      	ldrh	r0, [r0, #8]
 8001a00:	f7ff ff90 	bl	8001924 <GATT_Notification_CB>
        break;
 8001a04:	e7a7      	b.n	8001956 <user_notify+0x16>
        if(BLE_Role == CLIENT) {
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <user_notify+0x148>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1a3      	bne.n	8001956 <user_notify+0x16>
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <user_notify+0x14c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b113      	cbz	r3, 8001a1a <user_notify+0xda>
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <user_notify+0x150>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b17b      	cbz	r3, 8001a3a <user_notify+0xfa>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <user_notify+0x154>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d099      	beq.n	8001956 <user_notify+0x16>
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <user_notify+0x158>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d195      	bne.n	8001956 <user_notify+0x16>
            rx_handle = resp->attr_handle;
 8001a2a:	8901      	ldrh	r1, [r0, #8]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <user_notify+0x15c>)
 8001a2e:	8019      	strh	r1, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8001a30:	b289      	uxth	r1, r1
 8001a32:	481b      	ldr	r0, [pc, #108]	; (8001aa0 <user_notify+0x160>)
 8001a34:	f00a fba6 	bl	800c184 <iprintf>
 8001a38:	e78d      	b.n	8001956 <user_notify+0x16>
            tx_handle = resp->attr_handle;
 8001a3a:	8901      	ldrh	r1, [r0, #8]
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <user_notify+0x164>)
 8001a3e:	8019      	strh	r1, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8001a40:	b289      	uxth	r1, r1
 8001a42:	4819      	ldr	r0, [pc, #100]	; (8001aa8 <user_notify+0x168>)
 8001a44:	f00a fb9e 	bl	800c184 <iprintf>
 8001a48:	e785      	b.n	8001956 <user_notify+0x16>
        if(BLE_Role == CLIENT) {
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <user_notify+0x148>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d181      	bne.n	8001956 <user_notify+0x16>
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <user_notify+0x14c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b133      	cbz	r3, 8001a66 <user_notify+0x126>
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <user_notify+0x150>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b91b      	cbnz	r3, 8001a66 <user_notify+0x126>
            end_read_tx_char_handle = TRUE;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <user_notify+0x150>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e777      	b.n	8001956 <user_notify+0x16>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <user_notify+0x154>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f43f af73 	beq.w	8001956 <user_notify+0x16>
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <user_notify+0x158>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f af6e 	bne.w	8001956 <user_notify+0x16>
            end_read_rx_char_handle = TRUE;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <user_notify+0x158>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e769      	b.n	8001956 <user_notify+0x16>
 8001a82:	bf00      	nop
 8001a84:	2000035d 	.word	0x2000035d
 8001a88:	2000035c 	.word	0x2000035c
 8001a8c:	2000638f 	.word	0x2000638f
 8001a90:	20006387 	.word	0x20006387
 8001a94:	2000638e 	.word	0x2000638e
 8001a98:	20006386 	.word	0x20006386
 8001a9c:	2000638a 	.word	0x2000638a
 8001aa0:	0800f398 	.word	0x0800f398
 8001aa4:	20006390 	.word	0x20006390
 8001aa8:	0800f380 	.word	0x0800f380

08001aac <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	9400      	str	r4, [sp, #0]
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HCI_TL_SPI_Init+0x60>)
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	9b00      	ldr	r3, [sp, #0]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001ac8:	2601      	movs	r6, #1
 8001aca:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001acc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ad0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001ad4:	4d0e      	ldr	r5, [pc, #56]	; (8001b10 <HCI_TL_SPI_Init+0x64>)
 8001ad6:	a901      	add	r1, sp, #4
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f005 fc3b 	bl	8007354 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001aea:	a901      	add	r1, sp, #4
 8001aec:	4628      	mov	r0, r5
 8001aee:	f005 fc31 	bl	8007354 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001af2:	2302      	movs	r3, #2
 8001af4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001afc:	a901      	add	r1, sp, #4
 8001afe:	4628      	mov	r0, r5
 8001b00:	f005 fc28 	bl	8007354 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8001b04:	f000 fc18 	bl	8002338 <BSP_SPI1_Init>
}
 8001b08:	b006      	add	sp, #24
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001b14:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001b16:	4c08      	ldr	r4, [pc, #32]	; (8001b38 <HCI_TL_SPI_DeInit+0x24>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f005 fcfa 	bl	8007514 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001b20:	2102      	movs	r1, #2
 8001b22:	4620      	mov	r0, r4
 8001b24:	f005 fcf6 	bl	8007514 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f005 fcf1 	bl	8007514 <HAL_GPIO_DeInit>
  return 0;
}
 8001b32:	2000      	movs	r0, #0
 8001b34:	bd10      	pop	{r4, pc}
 8001b36:	bf00      	nop
 8001b38:	40020000 	.word	0x40020000

08001b3c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001b3c:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b3e:	4c0d      	ldr	r4, [pc, #52]	; (8001b74 <HCI_TL_SPI_Reset+0x38>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	4620      	mov	r0, r4
 8001b46:	f005 fd74 	bl	8007632 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	4620      	mov	r0, r4
 8001b52:	f005 fd6e 	bl	8007632 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001b56:	2005      	movs	r0, #5
 8001b58:	f005 fb4a 	bl	80071f0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b62:	4620      	mov	r0, r4
 8001b64:	f005 fd65 	bl	8007632 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001b68:	2005      	movs	r0, #5
 8001b6a:	f005 fb41 	bl	80071f0 <HAL_Delay>
  return 0;
}
 8001b6e:	2000      	movs	r0, #0
 8001b70:	bd10      	pop	{r4, pc}
 8001b72:	bf00      	nop
 8001b74:	40020000 	.word	0x40020000

08001b78 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	4606      	mov	r6, r0
 8001b7e:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8001b80:	23ff      	movs	r3, #255	; 0xff
 8001b82:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HCI_TL_SPI_Receive+0x84>)
 8001b88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b8c:	9002      	str	r0, [sp, #8]
 8001b8e:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2102      	movs	r1, #2
 8001b96:	481a      	ldr	r0, [pc, #104]	; (8001c00 <HCI_TL_SPI_Receive+0x88>)
 8001b98:	f005 fd4b 	bl	8007632 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	4669      	mov	r1, sp
 8001ba0:	a802      	add	r0, sp, #8
 8001ba2:	f000 fb3d 	bl	8002220 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001ba6:	f89d 3000 	ldrb.w	r3, [sp]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d008      	beq.n	8001bc0 <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 8001bae:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <HCI_TL_SPI_Receive+0x88>)
 8001bb6:	f005 fd3c 	bl	8007632 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif

  return len;
}
 8001bba:	4620      	mov	r0, r4
 8001bbc:	b004      	add	sp, #16
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001bc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001bc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0)
 8001bc8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8001bcc:	d014      	beq.n	8001bf8 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 8001bce:	42ab      	cmp	r3, r5
 8001bd0:	d800      	bhi.n	8001bd4 <HCI_TL_SPI_Receive+0x5c>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001bd2:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 8001bd4:	2400      	movs	r4, #0
 8001bd6:	e00b      	b.n	8001bf0 <HCI_TL_SPI_Receive+0x78>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f10d 010e 	add.w	r1, sp, #14
 8001bde:	f10d 000f 	add.w	r0, sp, #15
 8001be2:	f000 fb1d 	bl	8002220 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001be6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001bea:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 8001bec:	3401      	adds	r4, #1
 8001bee:	b2e4      	uxtb	r4, r4
 8001bf0:	b2a3      	uxth	r3, r4
 8001bf2:	42ab      	cmp	r3, r5
 8001bf4:	d3f0      	bcc.n	8001bd8 <HCI_TL_SPI_Receive+0x60>
 8001bf6:	e7db      	b.n	8001bb0 <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	e7d9      	b.n	8001bb0 <HCI_TL_SPI_Receive+0x38>
 8001bfc:	0800f1d8 	.word	0x0800f1d8
 8001c00:	40020000 	.word	0x40020000

08001c04 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	4607      	mov	r7, r0
 8001c0a:	460e      	mov	r6, r1
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HCI_TL_SPI_Send+0x7c>)
 8001c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c12:	9002      	str	r0, [sp, #8]
 8001c14:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f005 fae4 	bl	80071e4 <HAL_GetTick>
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	e011      	b.n	8001c44 <HCI_TL_SPI_Send+0x40>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);

    if(header_slave[0] == 0x02)
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001c20:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001c24:	42b3      	cmp	r3, r6
 8001c26:	d21e      	bcs.n	8001c66 <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001c28:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4814      	ldr	r0, [pc, #80]	; (8001c84 <HCI_TL_SPI_Send+0x80>)
 8001c32:	f005 fcfe 	bl	8007632 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001c36:	f005 fad5 	bl	80071e4 <HAL_GetTick>
 8001c3a:	1b40      	subs	r0, r0, r5
 8001c3c:	280f      	cmp	r0, #15
 8001c3e:	d819      	bhi.n	8001c74 <HCI_TL_SPI_Send+0x70>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8001c40:	2c00      	cmp	r4, #0
 8001c42:	da19      	bge.n	8001c78 <HCI_TL_SPI_Send+0x74>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	480e      	ldr	r0, [pc, #56]	; (8001c84 <HCI_TL_SPI_Send+0x80>)
 8001c4a:	f005 fcf2 	bl	8007632 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001c4e:	2205      	movs	r2, #5
 8001c50:	4669      	mov	r1, sp
 8001c52:	a802      	add	r0, sp, #8
 8001c54:	f000 fae4 	bl	8002220 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02)
 8001c58:	f89d 3000 	ldrb.w	r3, [sp]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d0df      	beq.n	8001c20 <HCI_TL_SPI_Send+0x1c>
      result = -1;
 8001c60:	f04f 34ff 	mov.w	r4, #4294967295
 8001c64:	e7e2      	b.n	8001c2c <HCI_TL_SPI_Send+0x28>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001c66:	4632      	mov	r2, r6
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <HCI_TL_SPI_Send+0x84>)
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f000 fad8 	bl	8002220 <BSP_SPI1_SendRecv>
    result = 0;
 8001c70:	2400      	movs	r4, #0
 8001c72:	e7db      	b.n	8001c2c <HCI_TL_SPI_Send+0x28>
      result = -3;
 8001c74:	f06f 0402 	mvn.w	r4, #2

  return result;
}
 8001c78:	4620      	mov	r0, r4
 8001c7a:	b005      	add	sp, #20
 8001c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800f1e0 	.word	0x0800f1e0
 8001c84:	40020000 	.word	0x40020000
 8001c88:	2000639c 	.word	0x2000639c

08001c8c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001c8c:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <IsDataAvailable+0x14>)
 8001c92:	f005 fcc7 	bl	8007624 <HAL_GPIO_ReadPin>
}
 8001c96:	2801      	cmp	r0, #1
 8001c98:	bf14      	ite	ne
 8001c9a:	2000      	movne	r0, #0
 8001c9c:	2001      	moveq	r0, #1
 8001c9e:	bd08      	pop	{r3, pc}
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001ca6:	f7ff fff1 	bl	8001c8c <IsDataAvailable>
 8001caa:	b120      	cbz	r0, 8001cb6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001cac:	2000      	movs	r0, #0
 8001cae:	f008 f90b 	bl	8009ec8 <hci_notify_asynch_evt>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d0f7      	beq.n	8001ca6 <hci_tl_lowlevel_isr+0x2>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001cb6:	bd08      	pop	{r3, pc}

08001cb8 <hci_tl_lowlevel_init>:
{
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <hci_tl_lowlevel_init+0x4c>)
 8001cbe:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <hci_tl_lowlevel_init+0x50>)
 8001cc2:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <hci_tl_lowlevel_init+0x54>)
 8001cc6:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <hci_tl_lowlevel_init+0x58>)
 8001cca:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <hci_tl_lowlevel_init+0x5c>)
 8001cce:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <hci_tl_lowlevel_init+0x60>)
 8001cd2:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8001cd4:	a801      	add	r0, sp, #4
 8001cd6:	f008 f821 	bl	8009d1c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001cda:	4c10      	ldr	r4, [pc, #64]	; (8001d1c <hci_tl_lowlevel_init+0x64>)
 8001cdc:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f005 fb1e 	bl	8007322 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <hci_tl_lowlevel_init+0x68>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4620      	mov	r0, r4
 8001cec:	f005 fb12 	bl	8007314 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	2006      	movs	r0, #6
 8001cf6:	f005 faa1 	bl	800723c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cfa:	2006      	movs	r0, #6
 8001cfc:	f005 fad6 	bl	80072ac <HAL_NVIC_EnableIRQ>
}
 8001d00:	b008      	add	sp, #32
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	08001aad 	.word	0x08001aad
 8001d08:	08001b15 	.word	0x08001b15
 8001d0c:	08001c05 	.word	0x08001c05
 8001d10:	08001b79 	.word	0x08001b79
 8001d14:	08001b3d 	.word	0x08001b3d
 8001d18:	080022f9 	.word	0x080022f9
 8001d1c:	20006394 	.word	0x20006394
 8001d20:	08001ca5 	.word	0x08001ca5

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	2400      	movs	r4, #0
 8001d2a:	9405      	str	r4, [sp, #20]
 8001d2c:	9406      	str	r4, [sp, #24]
 8001d2e:	9407      	str	r4, [sp, #28]
 8001d30:	9408      	str	r4, [sp, #32]
 8001d32:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d34:	9401      	str	r4, [sp, #4]
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <MX_GPIO_Init+0xbc>)
 8001d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3a:	f042 0204 	orr.w	r2, r2, #4
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	f002 0204 	and.w	r2, r2, #4
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4a:	9402      	str	r4, [sp, #8]
 8001d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
 8001d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d56:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	9403      	str	r4, [sp, #12]
 8001d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6a:	f002 0201 	and.w	r2, r2, #1
 8001d6e:	9203      	str	r2, [sp, #12]
 8001d70:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	9404      	str	r4, [sp, #16]
 8001d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d76:	f042 0202 	orr.w	r2, r2, #2
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	9304      	str	r3, [sp, #16]
 8001d84:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d86:	4d17      	ldr	r5, [pc, #92]	; (8001de4 <MX_GPIO_Init+0xc0>)
 8001d88:	4622      	mov	r2, r4
 8001d8a:	f240 3102 	movw	r1, #770	; 0x302
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f005 fc4f 	bl	8007632 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d94:	2601      	movs	r6, #1
 8001d96:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d9c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	a905      	add	r1, sp, #20
 8001da2:	4628      	mov	r0, r5
 8001da4:	f005 fad6 	bl	8007354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001da8:	f240 3302 	movw	r3, #770	; 0x302
 8001dac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	a905      	add	r1, sp, #20
 8001db6:	4628      	mov	r0, r5
 8001db8:	f005 facc 	bl	8007354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	2006      	movs	r0, #6
 8001dc2:	f005 fa3b 	bl	800723c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dc6:	2006      	movs	r0, #6
 8001dc8:	f005 fa70 	bl	80072ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dcc:	4622      	mov	r2, r4
 8001dce:	4621      	mov	r1, r4
 8001dd0:	2028      	movs	r0, #40	; 0x28
 8001dd2:	f005 fa33 	bl	800723c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dd6:	2028      	movs	r0, #40	; 0x28
 8001dd8:	f005 fa68 	bl	80072ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ddc:	b00a      	add	sp, #40	; 0x28
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001dea:	e7fe      	b.n	8001dea <Error_Handler+0x2>

08001dec <MX_TIM3_Init>:
{
 8001dec:	b500      	push	{lr}
 8001dee:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df0:	2300      	movs	r3, #0
 8001df2:	9302      	str	r3, [sp, #8]
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	9304      	str	r3, [sp, #16]
 8001df8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001dfe:	4813      	ldr	r0, [pc, #76]	; (8001e4c <MX_TIM3_Init+0x60>)
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <MX_TIM3_Init+0x64>)
 8001e02:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 84-1;
 8001e04:	2253      	movs	r2, #83	; 0x53
 8001e06:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 50-1;
 8001e0a:	2231      	movs	r2, #49	; 0x31
 8001e0c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e12:	f007 f879 	bl	8008f08 <HAL_TIM_Base_Init>
 8001e16:	b990      	cbnz	r0, 8001e3e <MX_TIM3_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e1e:	a902      	add	r1, sp, #8
 8001e20:	480a      	ldr	r0, [pc, #40]	; (8001e4c <MX_TIM3_Init+0x60>)
 8001e22:	f007 f8aa 	bl	8008f7a <HAL_TIM_ConfigClockSource>
 8001e26:	b960      	cbnz	r0, 8001e42 <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2e:	4669      	mov	r1, sp
 8001e30:	4806      	ldr	r0, [pc, #24]	; (8001e4c <MX_TIM3_Init+0x60>)
 8001e32:	f007 f921 	bl	8009078 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	b930      	cbnz	r0, 8001e46 <MX_TIM3_Init+0x5a>
}
 8001e38:	b007      	add	sp, #28
 8001e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001e3e:	f7ff ffd3 	bl	8001de8 <Error_Handler>
    Error_Handler();
 8001e42:	f7ff ffd1 	bl	8001de8 <Error_Handler>
    Error_Handler();
 8001e46:	f7ff ffcf 	bl	8001de8 <Error_Handler>
 8001e4a:	bf00      	nop
 8001e4c:	20009514 	.word	0x20009514
 8001e50:	40000400 	.word	0x40000400

08001e54 <SystemClock_Config>:
{
 8001e54:	b500      	push	{lr}
 8001e56:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e58:	2230      	movs	r2, #48	; 0x30
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	a808      	add	r0, sp, #32
 8001e5e:	f009 fc3e 	bl	800b6de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e62:	2300      	movs	r3, #0
 8001e64:	9303      	str	r3, [sp, #12]
 8001e66:	9304      	str	r3, [sp, #16]
 8001e68:	9305      	str	r3, [sp, #20]
 8001e6a:	9306      	str	r3, [sp, #24]
 8001e6c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <SystemClock_Config+0x9c>)
 8001e72:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001e74:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001e78:	6411      	str	r1, [r2, #64]	; 0x40
 8001e7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e7c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001e80:	9201      	str	r2, [sp, #4]
 8001e82:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	491b      	ldr	r1, [pc, #108]	; (8001ef4 <SystemClock_Config+0xa0>)
 8001e88:	680a      	ldr	r2, [r1, #0]
 8001e8a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e92:	600a      	str	r2, [r1, #0]
 8001e94:	680a      	ldr	r2, [r1, #0]
 8001e96:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eaa:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eac:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001eae:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001eb4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	a808      	add	r0, sp, #32
 8001ec0:	f006 f934 	bl	800812c <HAL_RCC_OscConfig>
 8001ec4:	b980      	cbnz	r0, 8001ee8 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eca:	2102      	movs	r1, #2
 8001ecc:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ed6:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eda:	a803      	add	r0, sp, #12
 8001edc:	f006 fb8c 	bl	80085f8 <HAL_RCC_ClockConfig>
 8001ee0:	b920      	cbnz	r0, 8001eec <SystemClock_Config+0x98>
}
 8001ee2:	b015      	add	sp, #84	; 0x54
 8001ee4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ee8:	f7ff ff7e 	bl	8001de8 <Error_Handler>
    Error_Handler();
 8001eec:	f7ff ff7c 	bl	8001de8 <Error_Handler>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000

08001ef8 <main>:
{
 8001ef8:	b508      	push	{r3, lr}
  HAL_Init();
 8001efa:	f005 f94d 	bl	8007198 <HAL_Init>
  SystemClock_Config();
 8001efe:	f7ff ffa9 	bl	8001e54 <SystemClock_Config>
  MX_GPIO_Init();
 8001f02:	f7ff ff0f 	bl	8001d24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001f06:	f7ff ff71 	bl	8001dec <MX_TIM3_Init>
  MX_BlueNRG_MS_Init();
 8001f0a:	f7ff fa67 	bl	80013dc <MX_BlueNRG_MS_Init>
	if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001f0e:	2102      	movs	r1, #2
 8001f10:	2000      	movs	r0, #0
 8001f12:	f004 febb 	bl	8006c8c <IKS01A3_MOTION_SENSOR_Init>
 8001f16:	b1e0      	cbz	r0, 8001f52 <main+0x5a>
	if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE)==HAL_OK){
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f004 fc0e 	bl	800673c <IKS01A3_ENV_SENSOR_Init>
 8001f20:	b1d8      	cbz	r0, 8001f5a <main+0x62>
	if(IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY)==HAL_OK){
 8001f22:	2104      	movs	r1, #4
 8001f24:	2000      	movs	r0, #0
 8001f26:	f004 fc09 	bl	800673c <IKS01A3_ENV_SENSOR_Init>
 8001f2a:	b1d8      	cbz	r0, 8001f64 <main+0x6c>
	HAL_Delay(1500);
 8001f2c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001f30:	f005 f95e 	bl	80071f0 <HAL_Delay>
	arm_rfft_fast_init_f32(&fft_handler, FFT_SIZE);
 8001f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <main+0x74>)
 8001f3a:	f008 f997 	bl	800a26c <arm_rfft_fast_init_f32>
	arm_cfft_radix4_init_f32(&fft_handler_cplx, FFT_SIZE, 0, 1);
 8001f3e:	2301      	movs	r3, #1
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f46:	480a      	ldr	r0, [pc, #40]	; (8001f70 <main+0x78>)
 8001f48:	f008 fd62 	bl	800aa10 <arm_cfft_radix4_init_f32>
  MX_BlueNRG_MS_Process();
 8001f4c:	f7ff fb28 	bl	80015a0 <MX_BlueNRG_MS_Process>
	while (1)
 8001f50:	e7fc      	b.n	8001f4c <main+0x54>
		IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001f52:	2102      	movs	r1, #2
 8001f54:	f004 ff5a 	bl	8006e0c <IKS01A3_MOTION_SENSOR_Enable>
 8001f58:	e7de      	b.n	8001f18 <main+0x20>
		IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f004 fcad 	bl	80068bc <IKS01A3_ENV_SENSOR_Enable>
 8001f62:	e7de      	b.n	8001f22 <main+0x2a>
		IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8001f64:	2104      	movs	r1, #4
 8001f66:	f004 fca9 	bl	80068bc <IKS01A3_ENV_SENSOR_Enable>
 8001f6a:	e7df      	b.n	8001f2c <main+0x34>
 8001f6c:	200064a0 	.word	0x200064a0
 8001f70:	200064b8 	.word	0x200064b8

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b500      	push	{lr}
 8001f76:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	2100      	movs	r1, #0
 8001f7a:	9100      	str	r1, [sp, #0]
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_MspInit+0x3c>)
 8001f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
 8001f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f8c:	9200      	str	r2, [sp, #0]
 8001f8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	9101      	str	r1, [sp, #4]
 8001f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fa4:	2007      	movs	r0, #7
 8001fa6:	f005 f937 	bl	8007218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	b003      	add	sp, #12
 8001fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b500      	push	{lr}
 8001fb6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8001fb8:	6803      	ldr	r3, [r0, #0]
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_TIM_Base_MspInit+0x68>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d005      	beq.n	8001fcc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_TIM_Base_MspInit+0x6c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d016      	beq.n	8001ff4 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fc6:	b003      	add	sp, #12
 8001fc8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fcc:	2100      	movs	r1, #0
 8001fce:	9100      	str	r1, [sp, #0]
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd4:	f042 0202 	orr.w	r2, r2, #2
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	201d      	movs	r0, #29
 8001fe8:	f005 f928 	bl	800723c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fec:	201d      	movs	r0, #29
 8001fee:	f005 f95d 	bl	80072ac <HAL_NVIC_EnableIRQ>
 8001ff2:	e7e8      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	9101      	str	r1, [sp, #4]
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ffc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800200c:	460a      	mov	r2, r1
 800200e:	2019      	movs	r0, #25
 8002010:	f005 f914 	bl	800723c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002014:	2019      	movs	r0, #25
 8002016:	f005 f949 	bl	80072ac <HAL_NVIC_EnableIRQ>
}
 800201a:	e7d4      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x12>
 800201c:	40000400 	.word	0x40000400
 8002020:	40014400 	.word	0x40014400
 8002024:	40023800 	.word	0x40023800

08002028 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <NMI_Handler>

0800202a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler>

0800202c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <MemManage_Handler>

0800202e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <BusFault_Handler>

08002030 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler>

08002032 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002032:	4770      	bx	lr

08002034 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	4770      	bx	lr

08002036 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	4770      	bx	lr

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f005 f8c7 	bl	80071cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bd08      	pop	{r3, pc}

08002040 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002040:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002042:	4802      	ldr	r0, [pc, #8]	; (800204c <EXTI0_IRQHandler+0xc>)
 8002044:	f005 f974 	bl	8007330 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002048:	bd08      	pop	{r3, pc}
 800204a:	bf00      	nop
 800204c:	20006394 	.word	0x20006394

08002050 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002052:	4802      	ldr	r0, [pc, #8]	; (800205c <TIM1_UP_TIM10_IRQHandler+0xc>)
 8002054:	f006 fe4c 	bl	8008cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

//	acquisizione_da_inviare=1;
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002058:	bd08      	pop	{r3, pc}
 800205a:	bf00      	nop
 800205c:	200094cc 	.word	0x200094cc

08002060 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002060:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002062:	4813      	ldr	r0, [pc, #76]	; (80020b0 <TIM3_IRQHandler+0x50>)
 8002064:	f006 fe44 	bl	8008cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(fine==0)
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <TIM3_IRQHandler+0x54>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b12b      	cbz	r3, 800207a <TIM3_IRQHandler+0x1a>
  {
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[conteggio_campioni++]);
  }
  if(conteggio_campioni==2048){
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <TIM3_IRQHandler+0x58>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	d00e      	beq.n	8002096 <TIM3_IRQHandler+0x36>
	  fine=1;

  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8002078:	bd08      	pop	{r3, pc}
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro[conteggio_campioni++]);
 800207a:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <TIM3_IRQHandler+0x58>)
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <TIM3_IRQHandler+0x5c>)
 800208a:	441a      	add	r2, r3
 800208c:	2102      	movs	r1, #2
 800208e:	2000      	movs	r0, #0
 8002090:	f004 fee6 	bl	8006e60 <IKS01A3_MOTION_SENSOR_GetAxes>
 8002094:	e7eb      	b.n	800206e <TIM3_IRQHandler+0xe>
	  HAL_TIM_Base_Stop_IT(&htim3);
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <TIM3_IRQHandler+0x50>)
 8002098:	f006 fe0c 	bl	8008cb4 <HAL_TIM_Base_Stop_IT>
	  acquisizione_da_inviare=1;
 800209c:	2301      	movs	r3, #1
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <TIM3_IRQHandler+0x60>)
 80020a0:	7013      	strb	r3, [r2, #0]
	  conteggio_campioni=0;
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <TIM3_IRQHandler+0x58>)
 80020a4:	2100      	movs	r1, #0
 80020a6:	6011      	str	r1, [r2, #0]
	  fine=1;
 80020a8:	4a02      	ldr	r2, [pc, #8]	; (80020b4 <TIM3_IRQHandler+0x54>)
 80020aa:	7013      	strb	r3, [r2, #0]
}
 80020ac:	e7e4      	b.n	8002078 <TIM3_IRQHandler+0x18>
 80020ae:	bf00      	nop
 80020b0:	20009514 	.word	0x20009514
 80020b4:	2000f56d 	.word	0x2000f56d
 80020b8:	2000649c 	.word	0x2000649c
 80020bc:	20009564 	.word	0x20009564
 80020c0:	2000f56c 	.word	0x2000f56c

080020c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80020c6:	4802      	ldr	r0, [pc, #8]	; (80020d0 <EXTI15_10_IRQHandler+0xc>)
 80020c8:	f005 f932 	bl	8007330 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020cc:	bd08      	pop	{r3, pc}
 80020ce:	bf00      	nop
 80020d0:	20000160 	.word	0x20000160

080020d4 <SPI1_MspInit>:

  return ret;
}

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020da:	2400      	movs	r4, #0
 80020dc:	9400      	str	r4, [sp, #0]
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <SPI1_MspInit+0x94>)
 80020e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
 80020e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	9401      	str	r4, [sp, #4]
 80020f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
 80020fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fe:	f002 0201 	and.w	r2, r2, #1
 8002102:	9201      	str	r2, [sp, #4]
 8002104:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	9402      	str	r4, [sp, #8]
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	f042 0202 	orr.w	r2, r2, #2
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800211a:	2340      	movs	r3, #64	; 0x40
 800211c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2702      	movs	r7, #2
 8002120:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2603      	movs	r6, #3
 8002126:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002128:	2505      	movs	r5, #5
 800212a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800212c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8002170 <SPI1_MspInit+0x9c>
 8002130:	a903      	add	r1, sp, #12
 8002132:	4640      	mov	r0, r8
 8002134:	f005 f90e 	bl	8007354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002142:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002144:	a903      	add	r1, sp, #12
 8002146:	4640      	mov	r0, r8
 8002148:	f005 f904 	bl	8007354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800214c:	2308      	movs	r3, #8
 800214e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002156:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002158:	a903      	add	r1, sp, #12
 800215a:	4804      	ldr	r0, [pc, #16]	; (800216c <SPI1_MspInit+0x98>)
 800215c:	f005 f8fa 	bl	8007354 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002160:	b008      	add	sp, #32
 8002162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40020400 	.word	0x40020400
 8002170:	40020000 	.word	0x40020000

08002174 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002178:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2500      	movs	r5, #0
 800217c:	9501      	str	r5, [sp, #4]
 800217e:	4c1b      	ldr	r4, [pc, #108]	; (80021ec <I2C1_MspInit+0x78>)
 8002180:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	6323      	str	r3, [r4, #48]	; 0x30
 8002188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002198:	f04f 0912 	mov.w	r9, #18
 800219c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	f04f 0803 	mov.w	r8, #3
 80021a6:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80021aa:	2704      	movs	r7, #4
 80021ac:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021ae:	4e10      	ldr	r6, [pc, #64]	; (80021f0 <I2C1_MspInit+0x7c>)
 80021b0:	a903      	add	r1, sp, #12
 80021b2:	4630      	mov	r0, r6
 80021b4:	f005 f8ce 	bl	8007354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80021b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021be:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80021c8:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80021ca:	a903      	add	r1, sp, #12
 80021cc:	4630      	mov	r0, r6
 80021ce:	f005 f8c1 	bl	8007354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d2:	9502      	str	r5, [sp, #8]
 80021d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021da:	6423      	str	r3, [r4, #64]	; 0x40
 80021dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	9302      	str	r3, [sp, #8]
 80021e4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80021e6:	b009      	add	sp, #36	; 0x24
 80021e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020400 	.word	0x40020400

080021f4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80021f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <I2C1_MspDeInit+0x24>)
 80021f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002200:	4c06      	ldr	r4, [pc, #24]	; (800221c <I2C1_MspDeInit+0x28>)
 8002202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002206:	4620      	mov	r0, r4
 8002208:	f005 f984 	bl	8007514 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800220c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002210:	4620      	mov	r0, r4
 8002212:	f005 f97f 	bl	8007514 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002216:	bd10      	pop	{r4, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	40020400 	.word	0x40020400

08002220 <BSP_SPI1_SendRecv>:
{
 8002220:	b500      	push	{lr}
 8002222:	b083      	sub	sp, #12
 8002224:	4613      	mov	r3, r2
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800222a:	9200      	str	r2, [sp, #0]
 800222c:	460a      	mov	r2, r1
 800222e:	4601      	mov	r1, r0
 8002230:	4804      	ldr	r0, [pc, #16]	; (8002244 <BSP_SPI1_SendRecv+0x24>)
 8002232:	f006 fbb5 	bl	80089a0 <HAL_SPI_TransmitReceive>
 8002236:	b910      	cbnz	r0, 800223e <BSP_SPI1_SendRecv+0x1e>
}
 8002238:	b003      	add	sp, #12
 800223a:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800223e:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8002242:	e7f9      	b.n	8002238 <BSP_SPI1_SendRecv+0x18>
 8002244:	2000f5cc 	.word	0x2000f5cc

08002248 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <BSP_I2C1_DeInit+0x30>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b17b      	cbz	r3, 800226e <BSP_I2C1_DeInit+0x26>
    if (--I2C1InitCounter == 0)
 800224e:	3b01      	subs	r3, #1
 8002250:	4a09      	ldr	r2, [pc, #36]	; (8002278 <BSP_I2C1_DeInit+0x30>)
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	b10b      	cbz	r3, 800225a <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8002256:	2000      	movs	r0, #0
}
 8002258:	4770      	bx	lr
{
 800225a:	b510      	push	{r4, lr}
      I2C1_MspDeInit(&hi2c1);
 800225c:	4c07      	ldr	r4, [pc, #28]	; (800227c <BSP_I2C1_DeInit+0x34>)
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ffc8 	bl	80021f4 <I2C1_MspDeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002264:	4620      	mov	r0, r4
 8002266:	f005 fd1e 	bl	8007ca6 <HAL_I2C_DeInit>
 800226a:	b910      	cbnz	r0, 8002272 <BSP_I2C1_DeInit+0x2a>
}
 800226c:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_NONE;
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr
        ret = BSP_ERROR_BUS_FAILURE;
 8002272:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8002276:	e7f9      	b.n	800226c <BSP_I2C1_DeInit+0x24>
 8002278:	2000f570 	.word	0x2000f570
 800227c:	2000f578 	.word	0x2000f578

08002280 <BSP_I2C1_WriteReg>:
{
 8002280:	b510      	push	{r4, lr}
 8002282:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002284:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002288:	9402      	str	r4, [sp, #8]
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	2301      	movs	r3, #1
 8002290:	460a      	mov	r2, r1
 8002292:	4601      	mov	r1, r0
 8002294:	4808      	ldr	r0, [pc, #32]	; (80022b8 <BSP_I2C1_WriteReg+0x38>)
 8002296:	f005 fd1f 	bl	8007cd8 <HAL_I2C_Mem_Write>
 800229a:	b910      	cbnz	r0, 80022a2 <BSP_I2C1_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 800229c:	2000      	movs	r0, #0
}
 800229e:	b004      	add	sp, #16
 80022a0:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <BSP_I2C1_WriteReg+0x38>)
 80022a4:	f005 ff3f 	bl	8008126 <HAL_I2C_GetError>
 80022a8:	2804      	cmp	r0, #4
 80022aa:	d002      	beq.n	80022b2 <BSP_I2C1_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80022ac:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80022b0:	e7f5      	b.n	800229e <BSP_I2C1_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80022b2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80022b6:	e7f2      	b.n	800229e <BSP_I2C1_WriteReg+0x1e>
 80022b8:	2000f578 	.word	0x2000f578

080022bc <BSP_I2C1_ReadReg>:
{
 80022bc:	b510      	push	{r4, lr}
 80022be:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80022c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80022c4:	9402      	str	r4, [sp, #8]
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9200      	str	r2, [sp, #0]
 80022ca:	2301      	movs	r3, #1
 80022cc:	460a      	mov	r2, r1
 80022ce:	4601      	mov	r1, r0
 80022d0:	4808      	ldr	r0, [pc, #32]	; (80022f4 <BSP_I2C1_ReadReg+0x38>)
 80022d2:	f005 fdb3 	bl	8007e3c <HAL_I2C_Mem_Read>
 80022d6:	b910      	cbnz	r0, 80022de <BSP_I2C1_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80022d8:	2000      	movs	r0, #0
}
 80022da:	b004      	add	sp, #16
 80022dc:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <BSP_I2C1_ReadReg+0x38>)
 80022e0:	f005 ff21 	bl	8008126 <HAL_I2C_GetError>
 80022e4:	2804      	cmp	r0, #4
 80022e6:	d002      	beq.n	80022ee <BSP_I2C1_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80022e8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80022ec:	e7f5      	b.n	80022da <BSP_I2C1_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80022ee:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80022f2:	e7f2      	b.n	80022da <BSP_I2C1_ReadReg+0x1e>
 80022f4:	2000f578 	.word	0x2000f578

080022f8 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 80022f8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80022fa:	f004 ff73 	bl	80071e4 <HAL_GetTick>
}
 80022fe:	bd08      	pop	{r3, pc}

08002300 <MX_SPI1_Init>:
{
 8002300:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <MX_SPI1_Init+0x34>)
 8002304:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002306:	f44f 7282 	mov.w	r2, #260	; 0x104
 800230a:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800230c:	2200      	movs	r2, #0
 800230e:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002310:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002312:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002314:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800231a:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800231c:	2118      	movs	r1, #24
 800231e:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002320:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002322:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002324:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8002326:	220a      	movs	r2, #10
 8002328:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800232a:	f006 fada 	bl	80088e2 <HAL_SPI_Init>
 800232e:	b100      	cbz	r0, 8002332 <MX_SPI1_Init+0x32>
    ret = HAL_ERROR;
 8002330:	2001      	movs	r0, #1
}
 8002332:	bd08      	pop	{r3, pc}
 8002334:	40013000 	.word	0x40013000

08002338 <BSP_SPI1_Init>:
  hspi1.Instance  = SPI1;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <BSP_SPI1_Init+0x3c>)
 800233a:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <BSP_SPI1_Init+0x40>)
 800233c:	601a      	str	r2, [r3, #0]
  if(SPI1InitCounter++ == 0)
 800233e:	4a0f      	ldr	r2, [pc, #60]	; (800237c <BSP_SPI1_Init+0x44>)
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	1c59      	adds	r1, r3, #1
 8002344:	6011      	str	r1, [r2, #0]
 8002346:	b10b      	cbz	r3, 800234c <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8002348:	2000      	movs	r0, #0
}
 800234a:	4770      	bx	lr
{
 800234c:	b510      	push	{r4, lr}
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800234e:	4809      	ldr	r0, [pc, #36]	; (8002374 <BSP_SPI1_Init+0x3c>)
 8002350:	f006 fc42 	bl	8008bd8 <HAL_SPI_GetState>
 8002354:	b108      	cbz	r0, 800235a <BSP_SPI1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8002356:	2000      	movs	r0, #0
}
 8002358:	bd10      	pop	{r4, pc}
        SPI1_MspInit(&hspi1);
 800235a:	4c06      	ldr	r4, [pc, #24]	; (8002374 <BSP_SPI1_Init+0x3c>)
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff feb9 	bl	80020d4 <SPI1_MspInit>
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ffcc 	bl	8002300 <MX_SPI1_Init>
 8002368:	2800      	cmp	r0, #0
 800236a:	d0f5      	beq.n	8002358 <BSP_SPI1_Init+0x20>
                ret = BSP_ERROR_BUS_FAILURE;
 800236c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8002370:	e7f2      	b.n	8002358 <BSP_SPI1_Init+0x20>
 8002372:	bf00      	nop
 8002374:	2000f5cc 	.word	0x2000f5cc
 8002378:	40013000 	.word	0x40013000
 800237c:	2000f574 	.word	0x2000f574

08002380 <MX_I2C1_Init>:
{
 8002380:	b508      	push	{r3, lr}
  hi2c->Instance = I2C1;
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <MX_I2C1_Init+0x28>)
 8002384:	6002      	str	r2, [r0, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <MX_I2C1_Init+0x2c>)
 8002388:	6042      	str	r2, [r0, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800238a:	2200      	movs	r2, #0
 800238c:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 800238e:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002390:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002394:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002396:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002398:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239a:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800239c:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800239e:	f005 fba3 	bl	8007ae8 <HAL_I2C_Init>
 80023a2:	b100      	cbz	r0, 80023a6 <MX_I2C1_Init+0x26>
    ret = HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
}
 80023a6:	bd08      	pop	{r3, pc}
 80023a8:	40005400 	.word	0x40005400
 80023ac:	00061a80 	.word	0x00061a80

080023b0 <BSP_I2C1_Init>:
  hi2c1.Instance  = I2C1;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <BSP_I2C1_Init+0x3c>)
 80023b2:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <BSP_I2C1_Init+0x40>)
 80023b4:	601a      	str	r2, [r3, #0]
  if(I2C1InitCounter++ == 0)
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <BSP_I2C1_Init+0x44>)
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	6011      	str	r1, [r2, #0]
 80023be:	b10b      	cbz	r3, 80023c4 <BSP_I2C1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80023c0:	2000      	movs	r0, #0
}
 80023c2:	4770      	bx	lr
{
 80023c4:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80023c6:	4809      	ldr	r0, [pc, #36]	; (80023ec <BSP_I2C1_Init+0x3c>)
 80023c8:	f005 feaa 	bl	8008120 <HAL_I2C_GetState>
 80023cc:	b108      	cbz	r0, 80023d2 <BSP_I2C1_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80023ce:	2000      	movs	r0, #0
}
 80023d0:	bd10      	pop	{r4, pc}
      I2C1_MspInit(&hi2c1);
 80023d2:	4c06      	ldr	r4, [pc, #24]	; (80023ec <BSP_I2C1_Init+0x3c>)
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff fecd 	bl	8002174 <I2C1_MspInit>
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff ffd0 	bl	8002380 <MX_I2C1_Init>
 80023e0:	b908      	cbnz	r0, 80023e6 <BSP_I2C1_Init+0x36>
          ret = BSP_ERROR_NONE;
 80023e2:	2000      	movs	r0, #0
  return ret;
 80023e4:	e7f4      	b.n	80023d0 <BSP_I2C1_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 80023e6:	f06f 0007 	mvn.w	r0, #7
 80023ea:	e7f1      	b.n	80023d0 <BSP_I2C1_Init+0x20>
 80023ec:	2000f578 	.word	0x2000f578
 80023f0:	40005400 	.word	0x40005400
 80023f4:	2000f570 	.word	0x2000f570

080023f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80023f8:	2001      	movs	r0, #1
 80023fa:	4770      	bx	lr

080023fc <_kill>:

int _kill(int pid, int sig)
{
 80023fc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fe:	f008 ff69 	bl	800b2d4 <__errno>
 8002402:	2316      	movs	r3, #22
 8002404:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002406:	f04f 30ff 	mov.w	r0, #4294967295
 800240a:	bd08      	pop	{r3, pc}

0800240c <_exit>:

void _exit (int status)
{
 800240c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800240e:	f04f 31ff 	mov.w	r1, #4294967295
 8002412:	f7ff fff3 	bl	80023fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002416:	e7fe      	b.n	8002416 <_exit+0xa>

08002418 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	460c      	mov	r4, r1
 800241c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	2500      	movs	r5, #0
 8002420:	e006      	b.n	8002430 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002422:	f3af 8000 	nop.w
 8002426:	4621      	mov	r1, r4
 8002428:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800242e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	42b5      	cmp	r5, r6
 8002432:	dbf6      	blt.n	8002422 <_read+0xa>
  }

  return len;
}
 8002434:	4630      	mov	r0, r6
 8002436:	bd70      	pop	{r4, r5, r6, pc}

08002438 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	460c      	mov	r4, r1
 800243c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	2500      	movs	r5, #0
 8002440:	e004      	b.n	800244c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002442:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002446:	f004 fe69 	bl	800711c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	3501      	adds	r5, #1
 800244c:	42b5      	cmp	r5, r6
 800244e:	dbf8      	blt.n	8002442 <_write+0xa>
  }
  return len;
}
 8002450:	4630      	mov	r0, r6
 8002452:	bd70      	pop	{r4, r5, r6, pc}

08002454 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800245a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002460:	2000      	movs	r0, #0
 8002462:	4770      	bx	lr

08002464 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002464:	2001      	movs	r0, #1
 8002466:	4770      	bx	lr

08002468 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002468:	2000      	movs	r0, #0
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b510      	push	{r4, lr}
 800246e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <_sbrk+0x38>)
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <_sbrk+0x40>)
 8002476:	6800      	ldr	r0, [r0, #0]
 8002478:	b140      	cbz	r0, 800248c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <_sbrk+0x40>)
 800247c:	6800      	ldr	r0, [r0, #0]
 800247e:	4403      	add	r3, r0
 8002480:	1a52      	subs	r2, r2, r1
 8002482:	4293      	cmp	r3, r2
 8002484:	d806      	bhi.n	8002494 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <_sbrk+0x40>)
 8002488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800248a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800248c:	4807      	ldr	r0, [pc, #28]	; (80024ac <_sbrk+0x40>)
 800248e:	4c08      	ldr	r4, [pc, #32]	; (80024b0 <_sbrk+0x44>)
 8002490:	6004      	str	r4, [r0, #0]
 8002492:	e7f2      	b.n	800247a <_sbrk+0xe>
    errno = ENOMEM;
 8002494:	f008 ff1e 	bl	800b2d4 <__errno>
 8002498:	230c      	movs	r3, #12
 800249a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	e7f3      	b.n	800248a <_sbrk+0x1e>
 80024a2:	bf00      	nop
 80024a4:	20018000 	.word	0x20018000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	2000f624 	.word	0x2000f624
 80024b0:	2000fb48 	.word	0x2000fb48

080024b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <SystemInit+0x10>)
 80024b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e4:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024f2:	f7ff ffdf 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f009 f8bd 	bl	800b674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7ff fcfd 	bl	8001ef8 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 800250c:	0802aff8 	.word	0x0802aff8
  ldr r2, =_sbss
 8002510:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8002514:	2000fb48 	.word	0x2000fb48

08002518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>
	...

0800251c <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
 8002520:	2000      	movs	r0, #0
 8002522:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8002524:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8002526:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8002528:	4b02      	ldr	r3, [pc, #8]	; (8002534 <HTS221_GetCapabilities+0x18>)
 800252a:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 800252c:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800252e:	2300      	movs	r3, #0
 8002530:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 8002532:	4770      	bx	lr
 8002534:	41480000 	.word	0x41480000

08002538 <Linear_Interpolation>:
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002538:	edd0 6a03 	vldr	s13, [r0, #12]
 800253c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002540:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8002544:	ee27 7a00 	vmul.f32	s14, s14, s0
 8002548:	ed90 0a02 	vldr	s0, [r0, #8]
 800254c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002550:	ed90 6a00 	vldr	s12, [r0]
 8002554:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002558:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800255c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002560:	ee30 0a46 	vsub.f32	s0, s0, s12
}
 8002564:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002568:	4770      	bx	lr

0800256a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800256a:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800256c:	6884      	ldr	r4, [r0, #8]
 800256e:	b92c      	cbnz	r4, 800257c <ReadRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002570:	6944      	ldr	r4, [r0, #20]
 8002572:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002576:	7b00      	ldrb	r0, [r0, #12]
 8002578:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 800257a:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800257c:	6944      	ldr	r4, [r0, #20]
 800257e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002582:	7b00      	ldrb	r0, [r0, #12]
 8002584:	47a0      	blx	r4
 8002586:	e7f8      	b.n	800257a <ReadRegWrap+0x10>

08002588 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002588:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800258a:	6884      	ldr	r4, [r0, #8]
 800258c:	b92c      	cbnz	r4, 800259a <WriteRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800258e:	6904      	ldr	r4, [r0, #16]
 8002590:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002594:	7b00      	ldrb	r0, [r0, #12]
 8002596:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002598:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800259a:	6904      	ldr	r4, [r0, #16]
 800259c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80025a0:	7b00      	ldrb	r0, [r0, #12]
 80025a2:	47a0      	blx	r4
 80025a4:	e7f8      	b.n	8002598 <WriteRegWrap+0x10>

080025a6 <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 80025a6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d012      	beq.n	80025d4 <HTS221_HUM_Enable+0x2e>
{
 80025ae:	b510      	push	{r4, lr}
 80025b0:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 80025b2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80025b6:	b123      	cbz	r3, 80025c2 <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return HTS221_OK;
 80025be:	2000      	movs	r0, #0
}
 80025c0:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80025c2:	2101      	movs	r1, #1
 80025c4:	3020      	adds	r0, #32
 80025c6:	f000 fa38 	bl	8002a3a <hts221_power_on_set>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d0f4      	beq.n	80025b8 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295
 80025d2:	e7f5      	b.n	80025c0 <HTS221_HUM_Enable+0x1a>
    return HTS221_OK;
 80025d4:	2000      	movs	r0, #0
}
 80025d6:	4770      	bx	lr

080025d8 <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 80025d8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80025dc:	b18b      	cbz	r3, 8002602 <HTS221_HUM_Disable+0x2a>
{
 80025de:	b510      	push	{r4, lr}
 80025e0:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 80025e2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80025e6:	b11b      	cbz	r3, 80025f0 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 80025e8:	2000      	movs	r0, #0
 80025ea:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 80025ee:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80025f0:	2100      	movs	r1, #0
 80025f2:	3020      	adds	r0, #32
 80025f4:	f000 fa21 	bl	8002a3a <hts221_power_on_set>
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d0f5      	beq.n	80025e8 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	e7f5      	b.n	80025ee <HTS221_HUM_Disable+0x16>
    return HTS221_OK;
 8002602:	2000      	movs	r0, #0
}
 8002604:	4770      	bx	lr

08002606 <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8002606:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800260a:	2b01      	cmp	r3, #1
 800260c:	d012      	beq.n	8002634 <HTS221_TEMP_Enable+0x2e>
{
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8002612:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002616:	b123      	cbz	r3, 8002622 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return HTS221_OK;
 800261e:	2000      	movs	r0, #0
}
 8002620:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002622:	2101      	movs	r1, #1
 8002624:	3020      	adds	r0, #32
 8002626:	f000 fa08 	bl	8002a3a <hts221_power_on_set>
 800262a:	2800      	cmp	r0, #0
 800262c:	d0f4      	beq.n	8002618 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 800262e:	f04f 30ff 	mov.w	r0, #4294967295
 8002632:	e7f5      	b.n	8002620 <HTS221_TEMP_Enable+0x1a>
    return HTS221_OK;
 8002634:	2000      	movs	r0, #0
}
 8002636:	4770      	bx	lr

08002638 <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8002638:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800263c:	b18b      	cbz	r3, 8002662 <HTS221_TEMP_Disable+0x2a>
{
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8002642:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002646:	b11b      	cbz	r3, 8002650 <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8002648:	2000      	movs	r0, #0
 800264a:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
 800264e:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002650:	2100      	movs	r1, #0
 8002652:	3020      	adds	r0, #32
 8002654:	f000 f9f1 	bl	8002a3a <hts221_power_on_set>
 8002658:	2800      	cmp	r0, #0
 800265a:	d0f5      	beq.n	8002648 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	e7f5      	b.n	800264e <HTS221_TEMP_Disable+0x16>
    return HTS221_OK;
 8002662:	2000      	movs	r0, #0
}
 8002664:	4770      	bx	lr

08002666 <HTS221_DeInit>:
{
 8002666:	b510      	push	{r4, lr}
 8002668:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 800266a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800266e:	2b01      	cmp	r3, #1
 8002670:	d003      	beq.n	800267a <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8002672:	2000      	movs	r0, #0
 8002674:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8002678:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 800267a:	f7ff ffad 	bl	80025d8 <HTS221_HUM_Disable>
 800267e:	b938      	cbnz	r0, 8002690 <HTS221_DeInit+0x2a>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff ffd9 	bl	8002638 <HTS221_TEMP_Disable>
 8002686:	2800      	cmp	r0, #0
 8002688:	d0f3      	beq.n	8002672 <HTS221_DeInit+0xc>
      return HTS221_ERROR;
 800268a:	f04f 30ff 	mov.w	r0, #4294967295
 800268e:	e7f3      	b.n	8002678 <HTS221_DeInit+0x12>
      return HTS221_ERROR;
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	e7f0      	b.n	8002678 <HTS221_DeInit+0x12>

08002696 <HTS221_SetOutputDataRate>:
{
 8002696:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002698:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800269c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d908      	bls.n	80026b8 <HTS221_SetOutputDataRate+0x22>
 80026a6:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80026aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b2:	d807      	bhi.n	80026c4 <HTS221_SetOutputDataRate+0x2e>
 80026b4:	2102      	movs	r1, #2
 80026b6:	e000      	b.n	80026ba <HTS221_SetOutputDataRate+0x24>
 80026b8:	2101      	movs	r1, #1
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80026ba:	3020      	adds	r0, #32
 80026bc:	f000 f93e 	bl	800293c <hts221_data_rate_set>
 80026c0:	b910      	cbnz	r0, 80026c8 <HTS221_SetOutputDataRate+0x32>
}
 80026c2:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80026c4:	2103      	movs	r1, #3
 80026c6:	e7f8      	b.n	80026ba <HTS221_SetOutputDataRate+0x24>
    return HTS221_ERROR;
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	e7f9      	b.n	80026c2 <HTS221_SetOutputDataRate+0x2c>

080026ce <HTS221_Initialize>:
{
 80026ce:	b538      	push	{r3, r4, r5, lr}
 80026d0:	4604      	mov	r4, r0
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80026d2:	f100 0520 	add.w	r5, r0, #32
 80026d6:	2100      	movs	r1, #0
 80026d8:	4628      	mov	r0, r5
 80026da:	f000 f9ae 	bl	8002a3a <hts221_power_on_set>
 80026de:	b958      	cbnz	r0, 80026f8 <HTS221_Initialize+0x2a>
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80026e0:	2101      	movs	r1, #1
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f965 	bl	80029b2 <hts221_block_data_update_set>
 80026e8:	b948      	cbnz	r0, 80026fe <HTS221_Initialize+0x30>
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80026ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff ffd1 	bl	8002696 <HTS221_SetOutputDataRate>
 80026f4:	b930      	cbnz	r0, 8002704 <HTS221_Initialize+0x36>
}
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
    return HTS221_ERROR;
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	e7fb      	b.n	80026f6 <HTS221_Initialize+0x28>
    return HTS221_ERROR;
 80026fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002702:	e7f8      	b.n	80026f6 <HTS221_Initialize+0x28>
    return HTS221_ERROR;
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	e7f5      	b.n	80026f6 <HTS221_Initialize+0x28>

0800270a <HTS221_Init>:
{
 800270a:	b510      	push	{r4, lr}
 800270c:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 800270e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8002712:	b123      	cbz	r3, 800271e <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8002714:	2301      	movs	r3, #1
 8002716:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HTS221_OK;
 800271a:	2000      	movs	r0, #0
}
 800271c:	bd10      	pop	{r4, pc}
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800271e:	f7ff ffd6 	bl	80026ce <HTS221_Initialize>
 8002722:	2800      	cmp	r0, #0
 8002724:	d0f6      	beq.n	8002714 <HTS221_Init+0xa>
      return HTS221_ERROR;
 8002726:	f04f 30ff 	mov.w	r0, #4294967295
 800272a:	e7f7      	b.n	800271c <HTS221_Init+0x12>

0800272c <HTS221_HUM_SetOutputDataRate>:
{
 800272c:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 800272e:	f7ff ffb2 	bl	8002696 <HTS221_SetOutputDataRate>
}
 8002732:	bd08      	pop	{r3, pc}

08002734 <HTS221_TEMP_SetOutputDataRate>:
{
 8002734:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002736:	f7ff ffae 	bl	8002696 <HTS221_SetOutputDataRate>
}
 800273a:	bd08      	pop	{r3, pc}

0800273c <HTS221_ReadID>:
{
 800273c:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800273e:	3020      	adds	r0, #32
 8002740:	f000 f974 	bl	8002a2c <hts221_device_id_get>
 8002744:	b900      	cbnz	r0, 8002748 <HTS221_ReadID+0xc>
}
 8002746:	bd08      	pop	{r3, pc}
    return HTS221_ERROR;
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	e7fb      	b.n	8002746 <HTS221_ReadID+0xa>
	...

08002750 <HTS221_GetOutputDataRate>:
{
 8002750:	b510      	push	{r4, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002756:	f10d 0107 	add.w	r1, sp, #7
 800275a:	3020      	adds	r0, #32
 800275c:	f000 f907 	bl	800296e <hts221_data_rate_get>
 8002760:	b9a8      	cbnz	r0, 800278e <HTS221_GetOutputDataRate+0x3e>
  switch (odr_low_level)
 8002762:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d814      	bhi.n	8002794 <HTS221_GetOutputDataRate+0x44>
 800276a:	e8df f003 	tbb	[pc, r3]
 800276e:	0602      	.short	0x0602
 8002770:	0d0a      	.short	0x0d0a
      *Odr = 0.0f;
 8002772:	2300      	movs	r3, #0
 8002774:	6023      	str	r3, [r4, #0]
}
 8002776:	b002      	add	sp, #8
 8002778:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 800277a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800277e:	6023      	str	r3, [r4, #0]
      break;
 8002780:	e7f9      	b.n	8002776 <HTS221_GetOutputDataRate+0x26>
      *Odr = 7.0f;
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HTS221_GetOutputDataRate+0x4c>)
 8002784:	6023      	str	r3, [r4, #0]
      break;
 8002786:	e7f6      	b.n	8002776 <HTS221_GetOutputDataRate+0x26>
      *Odr = 12.5f;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HTS221_GetOutputDataRate+0x50>)
 800278a:	6023      	str	r3, [r4, #0]
      break;
 800278c:	e7f3      	b.n	8002776 <HTS221_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 800278e:	f04f 30ff 	mov.w	r0, #4294967295
 8002792:	e7f0      	b.n	8002776 <HTS221_GetOutputDataRate+0x26>
  switch (odr_low_level)
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	e7ed      	b.n	8002776 <HTS221_GetOutputDataRate+0x26>
 800279a:	bf00      	nop
 800279c:	40e00000 	.word	0x40e00000
 80027a0:	41480000 	.word	0x41480000

080027a4 <HTS221_HUM_GetOutputDataRate>:
{
 80027a4:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80027a6:	f7ff ffd3 	bl	8002750 <HTS221_GetOutputDataRate>
}
 80027aa:	bd08      	pop	{r3, pc}

080027ac <HTS221_TEMP_GetOutputDataRate>:
{
 80027ac:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 80027ae:	f7ff ffcf 	bl	8002750 <HTS221_GetOutputDataRate>
}
 80027b2:	bd08      	pop	{r3, pc}

080027b4 <HTS221_HUM_GetHumidity>:
{
 80027b4:	b530      	push	{r4, r5, lr}
 80027b6:	b087      	sub	sp, #28
 80027b8:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80027ba:	f100 0420 	add.w	r4, r0, #32
 80027be:	a901      	add	r1, sp, #4
 80027c0:	4620      	mov	r0, r4
 80027c2:	f000 f9cd 	bl	8002b60 <hts221_hum_adc_point_0_get>
 80027c6:	bbc0      	cbnz	r0, 800283a <HTS221_HUM_GetHumidity+0x86>
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80027c8:	a902      	add	r1, sp, #8
 80027ca:	4620      	mov	r0, r4
 80027cc:	f000 f94e 	bl	8002a6c <hts221_hum_rh_point_0_get>
 80027d0:	bbb0      	cbnz	r0, 8002840 <HTS221_HUM_GetHumidity+0x8c>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80027d2:	a903      	add	r1, sp, #12
 80027d4:	4620      	mov	r0, r4
 80027d6:	f000 f9da 	bl	8002b8e <hts221_hum_adc_point_1_get>
 80027da:	bba0      	cbnz	r0, 8002846 <HTS221_HUM_GetHumidity+0x92>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80027dc:	a904      	add	r1, sp, #16
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 f95b 	bl	8002a9a <hts221_hum_rh_point_1_get>
 80027e4:	bb90      	cbnz	r0, 800284c <HTS221_HUM_GetHumidity+0x98>
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80027ec:	a905      	add	r1, sp, #20
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f8f8 	bl	80029e4 <hts221_humidity_raw_get>
 80027f4:	4604      	mov	r4, r0
 80027f6:	bb60      	cbnz	r0, 8002852 <HTS221_HUM_GetHumidity+0x9e>
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80027f8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80027fc:	ee00 3a10 	vmov	s0, r3
 8002800:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002804:	a801      	add	r0, sp, #4
 8002806:	f7ff fe97 	bl	8002538 <Linear_Interpolation>
 800280a:	ed85 0a00 	vstr	s0, [r5]
  if (*Value < 0.0f)
 800280e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	d40d      	bmi.n	8002834 <HTS221_HUM_GetHumidity+0x80>
  if (*Value > 100.0f)
 8002818:	ed95 7a00 	vldr	s14, [r5]
 800281c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002858 <HTS221_HUM_GetHumidity+0xa4>
 8002820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	dd01      	ble.n	800282e <HTS221_HUM_GetHumidity+0x7a>
    *Value = 100.0f;
 800282a:	edc5 7a00 	vstr	s15, [r5]
}
 800282e:	4620      	mov	r0, r4
 8002830:	b007      	add	sp, #28
 8002832:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 8002834:	2300      	movs	r3, #0
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	e7ee      	b.n	8002818 <HTS221_HUM_GetHumidity+0x64>
    return HTS221_ERROR;
 800283a:	f04f 34ff 	mov.w	r4, #4294967295
 800283e:	e7f6      	b.n	800282e <HTS221_HUM_GetHumidity+0x7a>
    return HTS221_ERROR;
 8002840:	f04f 34ff 	mov.w	r4, #4294967295
 8002844:	e7f3      	b.n	800282e <HTS221_HUM_GetHumidity+0x7a>
    return HTS221_ERROR;
 8002846:	f04f 34ff 	mov.w	r4, #4294967295
 800284a:	e7f0      	b.n	800282e <HTS221_HUM_GetHumidity+0x7a>
    return HTS221_ERROR;
 800284c:	f04f 34ff 	mov.w	r4, #4294967295
 8002850:	e7ed      	b.n	800282e <HTS221_HUM_GetHumidity+0x7a>
    return HTS221_ERROR;
 8002852:	f04f 34ff 	mov.w	r4, #4294967295
 8002856:	e7ea      	b.n	800282e <HTS221_HUM_GetHumidity+0x7a>
 8002858:	42c80000 	.word	0x42c80000

0800285c <HTS221_TEMP_GetTemperature>:
{
 800285c:	b530      	push	{r4, r5, lr}
 800285e:	b087      	sub	sp, #28
 8002860:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002862:	f100 0420 	add.w	r4, r0, #32
 8002866:	a901      	add	r1, sp, #4
 8002868:	4620      	mov	r0, r4
 800286a:	f000 f9a7 	bl	8002bbc <hts221_temp_adc_point_0_get>
 800286e:	bb28      	cbnz	r0, 80028bc <HTS221_TEMP_GetTemperature+0x60>
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002870:	a902      	add	r1, sp, #8
 8002872:	4620      	mov	r0, r4
 8002874:	f000 f928 	bl	8002ac8 <hts221_temp_deg_point_0_get>
 8002878:	bb18      	cbnz	r0, 80028c2 <HTS221_TEMP_GetTemperature+0x66>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800287a:	a903      	add	r1, sp, #12
 800287c:	4620      	mov	r0, r4
 800287e:	f000 f9b4 	bl	8002bea <hts221_temp_adc_point_1_get>
 8002882:	bb08      	cbnz	r0, 80028c8 <HTS221_TEMP_GetTemperature+0x6c>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002884:	a904      	add	r1, sp, #16
 8002886:	4620      	mov	r0, r4
 8002888:	f000 f944 	bl	8002b14 <hts221_temp_deg_point_1_get>
 800288c:	b9f8      	cbnz	r0, 80028ce <HTS221_TEMP_GetTemperature+0x72>
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 800288e:	2300      	movs	r3, #0
 8002890:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002894:	a905      	add	r1, sp, #20
 8002896:	4620      	mov	r0, r4
 8002898:	f000 f8b6 	bl	8002a08 <hts221_temperature_raw_get>
 800289c:	4604      	mov	r4, r0
 800289e:	b9c8      	cbnz	r0, 80028d4 <HTS221_TEMP_GetTemperature+0x78>
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80028a0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80028a4:	ee00 3a10 	vmov	s0, r3
 80028a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80028ac:	a801      	add	r0, sp, #4
 80028ae:	f7ff fe43 	bl	8002538 <Linear_Interpolation>
 80028b2:	ed85 0a00 	vstr	s0, [r5]
}
 80028b6:	4620      	mov	r0, r4
 80028b8:	b007      	add	sp, #28
 80028ba:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 80028bc:	f04f 34ff 	mov.w	r4, #4294967295
 80028c0:	e7f9      	b.n	80028b6 <HTS221_TEMP_GetTemperature+0x5a>
    return HTS221_ERROR;
 80028c2:	f04f 34ff 	mov.w	r4, #4294967295
 80028c6:	e7f6      	b.n	80028b6 <HTS221_TEMP_GetTemperature+0x5a>
    return HTS221_ERROR;
 80028c8:	f04f 34ff 	mov.w	r4, #4294967295
 80028cc:	e7f3      	b.n	80028b6 <HTS221_TEMP_GetTemperature+0x5a>
    return HTS221_ERROR;
 80028ce:	f04f 34ff 	mov.w	r4, #4294967295
 80028d2:	e7f0      	b.n	80028b6 <HTS221_TEMP_GetTemperature+0x5a>
    return HTS221_ERROR;
 80028d4:	f04f 34ff 	mov.w	r4, #4294967295
 80028d8:	e7ed      	b.n	80028b6 <HTS221_TEMP_GetTemperature+0x5a>
	...

080028dc <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 80028dc:	b1c8      	cbz	r0, 8002912 <HTS221_RegisterBusIO+0x36>
{
 80028de:	b508      	push	{r3, lr}
 80028e0:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80028e2:	680a      	ldr	r2, [r1, #0]
 80028e4:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80028e6:	6848      	ldr	r0, [r1, #4]
 80028e8:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80028ea:	6888      	ldr	r0, [r1, #8]
 80028ec:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80028ee:	7b08      	ldrb	r0, [r1, #12]
 80028f0:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80028f2:	6908      	ldr	r0, [r1, #16]
 80028f4:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80028f6:	6948      	ldr	r0, [r1, #20]
 80028f8:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80028fa:	6988      	ldr	r0, [r1, #24]
 80028fc:	6198      	str	r0, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80028fe:	4808      	ldr	r0, [pc, #32]	; (8002920 <HTS221_RegisterBusIO+0x44>)
 8002900:	6258      	str	r0, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002902:	4808      	ldr	r0, [pc, #32]	; (8002924 <HTS221_RegisterBusIO+0x48>)
 8002904:	6218      	str	r0, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002906:	69c9      	ldr	r1, [r1, #28]
 8002908:	6299      	str	r1, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800290a:	62db      	str	r3, [r3, #44]	; 0x2c
    if (pObj->IO.Init != NULL)
 800290c:	b122      	cbz	r2, 8002918 <HTS221_RegisterBusIO+0x3c>
      ret = pObj->IO.Init();
 800290e:	4790      	blx	r2
}
 8002910:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 8002912:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002916:	4770      	bx	lr
      ret = HTS221_ERROR;
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800291c:	e7f8      	b.n	8002910 <HTS221_RegisterBusIO+0x34>
 800291e:	bf00      	nop
 8002920:	0800256b 	.word	0x0800256b
 8002924:	08002589 	.word	0x08002589

08002928 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8002928:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800292a:	6844      	ldr	r4, [r0, #4]
 800292c:	68c0      	ldr	r0, [r0, #12]
 800292e:	47a0      	blx	r4

  return ret;
}
 8002930:	bd10      	pop	{r4, pc}

08002932 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002932:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002934:	6804      	ldr	r4, [r0, #0]
 8002936:	68c0      	ldr	r0, [r0, #12]
 8002938:	47a0      	blx	r4

  return ret;
}
 800293a:	bd10      	pop	{r4, pc}

0800293c <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800293c:	b530      	push	{r4, r5, lr}
 800293e:	b083      	sub	sp, #12
 8002940:	4604      	mov	r4, r0
 8002942:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002944:	2301      	movs	r3, #1
 8002946:	aa01      	add	r2, sp, #4
 8002948:	2120      	movs	r1, #32
 800294a:	f7ff ffed 	bl	8002928 <hts221_read_reg>

  if (ret == 0)
 800294e:	b108      	cbz	r0, 8002954 <hts221_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002950:	b003      	add	sp, #12
 8002952:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 8002954:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002958:	f365 0301 	bfi	r3, r5, #0, #2
 800295c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002960:	2301      	movs	r3, #1
 8002962:	aa01      	add	r2, sp, #4
 8002964:	2120      	movs	r1, #32
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ffe3 	bl	8002932 <hts221_write_reg>
  return ret;
 800296c:	e7f0      	b.n	8002950 <hts221_data_rate_set+0x14>

0800296e <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800296e:	b510      	push	{r4, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	460c      	mov	r4, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002974:	2301      	movs	r3, #1
 8002976:	aa01      	add	r2, sp, #4
 8002978:	2120      	movs	r1, #32
 800297a:	f7ff ffd5 	bl	8002928 <hts221_read_reg>

  switch (reg.odr)
 800297e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b03      	cmp	r3, #3
 8002988:	d810      	bhi.n	80029ac <hts221_data_rate_get+0x3e>
 800298a:	e8df f003 	tbb	[pc, r3]
 800298e:	0602      	.short	0x0602
 8002990:	0c09      	.short	0x0c09
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002992:	2300      	movs	r3, #0
 8002994:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8002996:	b002      	add	sp, #8
 8002998:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 800299a:	2301      	movs	r3, #1
 800299c:	7023      	strb	r3, [r4, #0]
      break;
 800299e:	e7fa      	b.n	8002996 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_7Hz;
 80029a0:	2302      	movs	r3, #2
 80029a2:	7023      	strb	r3, [r4, #0]
      break;
 80029a4:	e7f7      	b.n	8002996 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_12Hz5;
 80029a6:	2303      	movs	r3, #3
 80029a8:	7023      	strb	r3, [r4, #0]
      break;
 80029aa:	e7f4      	b.n	8002996 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_ND;
 80029ac:	2304      	movs	r3, #4
 80029ae:	7023      	strb	r3, [r4, #0]
  return ret;
 80029b0:	e7f1      	b.n	8002996 <hts221_data_rate_get+0x28>

080029b2 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80029b2:	b530      	push	{r4, r5, lr}
 80029b4:	b083      	sub	sp, #12
 80029b6:	4604      	mov	r4, r0
 80029b8:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80029ba:	2301      	movs	r3, #1
 80029bc:	aa01      	add	r2, sp, #4
 80029be:	2120      	movs	r1, #32
 80029c0:	f7ff ffb2 	bl	8002928 <hts221_read_reg>

  if (ret == 0)
 80029c4:	b108      	cbz	r0, 80029ca <hts221_block_data_update_set+0x18>
    reg.bdu = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80029c6:	b003      	add	sp, #12
 80029c8:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80029ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029ce:	f365 0382 	bfi	r3, r5, #2, #1
 80029d2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80029d6:	2301      	movs	r3, #1
 80029d8:	aa01      	add	r2, sp, #4
 80029da:	2120      	movs	r1, #32
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff ffa8 	bl	8002932 <hts221_write_reg>
  return ret;
 80029e2:	e7f0      	b.n	80029c6 <hts221_block_data_update_set+0x14>

080029e4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80029ea:	2302      	movs	r3, #2
 80029ec:	aa01      	add	r2, sp, #4
 80029ee:	2128      	movs	r1, #40	; 0x28
 80029f0:	f7ff ff9a 	bl	8002928 <hts221_read_reg>
  *val = (int16_t)buff[1];
 80029f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80029f8:	8022      	strh	r2, [r4, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80029fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a02:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8002a04:	b002      	add	sp, #8
 8002a06:	bd10      	pop	{r4, pc}

08002a08 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002a0e:	2302      	movs	r3, #2
 8002a10:	aa01      	add	r2, sp, #4
 8002a12:	212a      	movs	r1, #42	; 0x2a
 8002a14:	f7ff ff88 	bl	8002928 <hts221_read_reg>
  *val = (int16_t)buff[1];
 8002a18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a1c:	8022      	strh	r2, [r4, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002a1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a26:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002a2c:	b508      	push	{r3, lr}
 8002a2e:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002a30:	2301      	movs	r3, #1
 8002a32:	210f      	movs	r1, #15
 8002a34:	f7ff ff78 	bl	8002928 <hts221_read_reg>

  return ret;
}
 8002a38:	bd08      	pop	{r3, pc}

08002a3a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a3a:	b530      	push	{r4, r5, lr}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	4604      	mov	r4, r0
 8002a40:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a42:	2301      	movs	r3, #1
 8002a44:	aa01      	add	r2, sp, #4
 8002a46:	2120      	movs	r1, #32
 8002a48:	f7ff ff6e 	bl	8002928 <hts221_read_reg>

  if (ret == 0)
 8002a4c:	b108      	cbz	r0, 8002a52 <hts221_power_on_set+0x18>
    reg.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002a4e:	b003      	add	sp, #12
 8002a50:	bd30      	pop	{r4, r5, pc}
    reg.pd = val;
 8002a52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a56:	f365 13c7 	bfi	r3, r5, #7, #1
 8002a5a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a5e:	2301      	movs	r3, #1
 8002a60:	aa01      	add	r2, sp, #4
 8002a62:	2120      	movs	r1, #32
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ff64 	bl	8002932 <hts221_write_reg>
  return ret;
 8002a6a:	e7f0      	b.n	8002a4e <hts221_power_on_set+0x14>

08002a6c <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	460c      	mov	r4, r1
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002a72:	2301      	movs	r3, #1
 8002a74:	f10d 0207 	add.w	r2, sp, #7
 8002a78:	2130      	movs	r1, #48	; 0x30
 8002a7a:	f7ff ff55 	bl	8002928 <hts221_read_reg>
  *val = coeff / 2.0f;
 8002a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a92:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002a96:	b002      	add	sp, #8
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	460c      	mov	r4, r1
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f10d 0207 	add.w	r2, sp, #7
 8002aa6:	2131      	movs	r1, #49	; 0x31
 8002aa8:	f7ff ff3e 	bl	8002928 <hts221_read_reg>
  *val = coeff / 2.0f;
 8002aac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd10      	pop	{r4, pc}

08002ac8 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ac8:	b530      	push	{r4, r5, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	4604      	mov	r4, r0
 8002ace:	460d      	mov	r5, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f10d 0203 	add.w	r2, sp, #3
 8002ad6:	2132      	movs	r1, #50	; 0x32
 8002ad8:	f7ff ff26 	bl	8002928 <hts221_read_reg>

  if (ret == 0)
 8002adc:	b108      	cbz	r0, 8002ae2 <hts221_temp_deg_point_0_get+0x1a>
    coeff_h = reg.t0_msb;
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
  }

  return ret;
}
 8002ade:	b003      	add	sp, #12
 8002ae0:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	aa01      	add	r2, sp, #4
 8002ae6:	2135      	movs	r1, #53	; 0x35
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff ff1d 	bl	8002928 <hts221_read_reg>
    coeff_h = reg.t0_msb;
 8002aee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002af2:	f002 0203 	and.w	r2, r2, #3
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002af6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002afa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b06:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0e:	edc5 7a00 	vstr	s15, [r5]
  return ret;
 8002b12:	e7e4      	b.n	8002ade <hts221_temp_deg_point_0_get+0x16>

08002b14 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b14:	b530      	push	{r4, r5, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	4604      	mov	r4, r0
 8002b1a:	460d      	mov	r5, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f10d 0203 	add.w	r2, sp, #3
 8002b22:	2133      	movs	r1, #51	; 0x33
 8002b24:	f7ff ff00 	bl	8002928 <hts221_read_reg>

  if (ret == 0)
 8002b28:	b108      	cbz	r0, 8002b2e <hts221_temp_deg_point_1_get+0x1a>
    coeff_h = reg.t1_msb;
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
  }

  return ret;
}
 8002b2a:	b003      	add	sp, #12
 8002b2c:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002b2e:	2301      	movs	r3, #1
 8002b30:	aa01      	add	r2, sp, #4
 8002b32:	2135      	movs	r1, #53	; 0x35
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fef7 	bl	8002928 <hts221_read_reg>
    coeff_h = reg.t1_msb;
 8002b3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002b3e:	f3c2 0281 	ubfx	r2, r2, #2, #2
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002b42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b52:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	edc5 7a00 	vstr	s15, [r5]
  return ret;
 8002b5e:	e7e4      	b.n	8002b2a <hts221_temp_deg_point_1_get+0x16>

08002b60 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002b66:	2302      	movs	r3, #2
 8002b68:	aa01      	add	r2, sp, #4
 8002b6a:	2136      	movs	r1, #54	; 0x36
 8002b6c:	f7ff fedc 	bl	8002928 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002b70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002b74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b7c:	b21b      	sxth	r3, r3
  *val = coeff * 1.0f;
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b86:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd10      	pop	{r4, pc}

08002b8e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002b94:	2302      	movs	r3, #2
 8002b96:	aa01      	add	r2, sp, #4
 8002b98:	213a      	movs	r1, #58	; 0x3a
 8002b9a:	f7ff fec5 	bl	8002928 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002b9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ba6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002baa:	b21b      	sxth	r3, r3
  *val = coeff * 1.0f;
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd10      	pop	{r4, pc}

08002bbc <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	aa01      	add	r2, sp, #4
 8002bc6:	213c      	movs	r1, #60	; 0x3c
 8002bc8:	f7ff feae 	bl	8002928 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002bcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002bd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bd8:	b21b      	sxth	r3, r3
  *val = coeff * 1.0f;
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002be6:	b002      	add	sp, #8
 8002be8:	bd10      	pop	{r4, pc}

08002bea <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002bea:	b510      	push	{r4, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	460c      	mov	r4, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	aa01      	add	r2, sp, #4
 8002bf4:	213e      	movs	r1, #62	; 0x3e
 8002bf6:	f7ff fe97 	bl	8002928 <hts221_read_reg>
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002bfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002bfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c02:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c06:	b21b      	sxth	r3, r3
  *val = coeff * 1.0f;
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c10:	edc4 7a00 	vstr	s15, [r4]

  return ret;
}
 8002c14:	b002      	add	sp, #8
 8002c16:	bd10      	pop	{r4, pc}

08002c18 <LIS2DW12_GetCapabilities>:
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8002c20:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002c22:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002c24:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8002c26:	2310      	movs	r3, #16
 8002c28:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8002c2a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002c30:	4a01      	ldr	r2, [pc, #4]	; (8002c38 <LIS2DW12_GetCapabilities+0x20>)
 8002c32:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002c34:	618b      	str	r3, [r1, #24]
  return LIS2DW12_OK;
}
 8002c36:	4770      	bx	lr
 8002c38:	44c80000 	.word	0x44c80000

08002c3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002c3c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002c40:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002c44:	eddf 7a26 	vldr	s15, [pc, #152]	; 8002ce0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8002c48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	d933      	bls.n	8002cba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7e>
                  : (Odr <=   25.0f) ?   25.0f
 8002c52:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002c56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d930      	bls.n	8002cc2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x86>
                  : (Odr <=   50.0f) ?   50.0f
 8002c60:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002c64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d92b      	bls.n	8002cc6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8a>
                  : (Odr <=  100.0f) ?  100.0f
 8002c6e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002c72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	d926      	bls.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8e>
                  : (Odr <=  200.0f) ?  200.0f
 8002c7c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8002ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
 8002c80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d921      	bls.n	8002cce <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
                  : (Odr <=  400.0f) ?  400.0f
 8002c8a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002cec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002c8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	d91c      	bls.n	8002cd2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x96>
                  : (Odr <=  800.0f) ?  800.0f
 8002c98:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb4>
 8002c9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	d917      	bls.n	8002cd6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9a>
                  :                    1600.0f;
 8002ca6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8002caa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	d812      	bhi.n	8002cda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9e>
 8002cb4:	ee17 3a90 	vmov	r3, s15
 8002cb8:	e000      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   12.5f) ?   12.5f
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002cbc:	6343      	str	r3, [r0, #52]	; 0x34

  return LIS2DW12_OK;
}
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	4770      	bx	lr
                  : (Odr <=   25.0f) ?   25.0f
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8002cc4:	e7fa      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=   50.0f) ?   50.0f
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8002cc8:	e7f8      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  100.0f) ?  100.0f
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8002ccc:	e7f6      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  200.0f) ?  200.0f
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8002cd0:	e7f4      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  400.0f) ?  400.0f
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8002cd4:	e7f2      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  : (Odr <=  800.0f) ?  800.0f
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8002cd8:	e7f0      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
                  :                    1600.0f;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8002cdc:	e7ee      	b.n	8002cbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 8002cde:	bf00      	nop
 8002ce0:	3fcccccd 	.word	0x3fcccccd
 8002ce4:	42480000 	.word	0x42480000
 8002ce8:	42c80000 	.word	0x42c80000
 8002cec:	43480000 	.word	0x43480000
 8002cf0:	43c80000 	.word	0x43c80000
 8002cf4:	44480000 	.word	0x44480000
 8002cf8:	3fcccccd 	.word	0x3fcccccd
 8002cfc:	41480000 	.word	0x41480000
 8002d00:	41c80000 	.word	0x41c80000
 8002d04:	42480000 	.word	0x42480000
 8002d08:	42c80000 	.word	0x42c80000
 8002d0c:	43480000 	.word	0x43480000
 8002d10:	43c80000 	.word	0x43c80000
 8002d14:	44c80000 	.word	0x44c80000

08002d18 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d18:	b510      	push	{r4, lr}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d1a:	6944      	ldr	r4, [r0, #20]
 8002d1c:	7b00      	ldrb	r0, [r0, #12]
 8002d1e:	47a0      	blx	r4
}
 8002d20:	bd10      	pop	{r4, pc}

08002d22 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d22:	b510      	push	{r4, lr}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d24:	6904      	ldr	r4, [r0, #16]
 8002d26:	7b00      	ldrb	r0, [r0, #12]
 8002d28:	47a0      	blx	r4
}
 8002d2a:	bd10      	pop	{r4, pc}

08002d2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
{
 8002d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d30:	ed2d 8b02 	vpush	{d8}
 8002d34:	4604      	mov	r4, r0
 8002d36:	eeb0 8a40 	vmov.f32	s16, s0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	4616      	mov	r6, r2
  switch (Mode)
 8002d3e:	1e4b      	subs	r3, r1, #1
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d803      	bhi.n	8002d4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20>
 8002d44:	e8df f003 	tbb	[pc, r3]
 8002d48:	7c6b5b13 	.word	0x7c6b5b13
      switch (Noise)
 8002d4c:	2e01      	cmp	r6, #1
 8002d4e:	d00b      	beq.n	8002d68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x3c>
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002d50:	f04f 0804 	mov.w	r8, #4
      if (Odr < 12.5f)
 8002d54:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002d58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d510      	bpl.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 12.5f;
 8002d62:	eeb2 8a09 	vmov.f32	s16, #41	; 0x41480000  12.5
 8002d66:	e00d      	b.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002d68:	f04f 0814 	mov.w	r8, #20
 8002d6c:	e7f2      	b.n	8002d54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x28>
      switch (Noise)
 8002d6e:	2e01      	cmp	r6, #1
 8002d70:	d042      	beq.n	8002df8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xcc>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002d72:	f04f 0803 	mov.w	r8, #3
      if (Odr > 200.0f)
 8002d76:	eddf 7a51 	vldr	s15, [pc, #324]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002d7a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dc6e      	bgt.n	8002e62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x136>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002d84:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8002ec0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002d88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	d96a      	bls.n	8002e68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002d92:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002d96:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	d979      	bls.n	8002e94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002da0:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002da4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d974      	bls.n	8002e98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x16c>
 8002dae:	eddf 7a45 	vldr	s15, [pc, #276]	; 8002ec4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x198>
 8002db2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d96f      	bls.n	8002e9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x170>
 8002dbc:	eddf 7a42 	vldr	s15, [pc, #264]	; 8002ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x19c>
 8002dc0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d96a      	bls.n	8002ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x174>
 8002dca:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002dce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d965      	bls.n	8002ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x178>
 8002dd8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8002ecc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 8002ddc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d960      	bls.n	8002ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17c>
 8002de6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8002ed0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a4>
 8002dea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	d85b      	bhi.n	8002eac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x180>
 8002df4:	2108      	movs	r1, #8
 8002df6:	e038      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002df8:	f04f 0813 	mov.w	r8, #19
 8002dfc:	e7bb      	b.n	8002d76 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x4a>
      switch (Noise)
 8002dfe:	2e01      	cmp	r6, #1
 8002e00:	d00a      	beq.n	8002e18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xec>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002e02:	4688      	mov	r8, r1
      if (Odr > 200.0f)
 8002e04:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	ddb8      	ble.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8002e12:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e16:	e7b5      	b.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002e18:	f04f 0812 	mov.w	r8, #18
 8002e1c:	e7f2      	b.n	8002e04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xd8>
      switch (Noise)
 8002e1e:	2e01      	cmp	r6, #1
 8002e20:	d00b      	beq.n	8002e3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002e22:	f04f 0801 	mov.w	r8, #1
      if (Odr > 200.0f)
 8002e26:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e2a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e32:	dda7      	ble.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8002e34:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e38:	e7a4      	b.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002e3a:	f04f 0811 	mov.w	r8, #17
 8002e3e:	e7f2      	b.n	8002e26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
      switch (Noise)
 8002e40:	2e01      	cmp	r6, #1
 8002e42:	d00b      	beq.n	8002e5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x130>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002e44:	f04f 0800 	mov.w	r8, #0
      if (Odr > 200.0f)
 8002e48:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	dd96      	ble.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
        Odr = 200.0f;
 8002e56:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e5a:	e793      	b.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002e5c:	f04f 0810 	mov.w	r8, #16
 8002e60:	e7f2      	b.n	8002e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11c>
        Odr = 200.0f;
 8002e62:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8002ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002e66:	e78d      	b.n	8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x58>
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002e68:	2101      	movs	r1, #1
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002e6a:	f104 0720 	add.w	r7, r4, #32
 8002e6e:	4638      	mov	r0, r7
 8002e70:	f000 fbf2 	bl	8003658 <lis2dw12_data_rate_set>
 8002e74:	b9e0      	cbnz	r0, 8002eb0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x184>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002e76:	4641      	mov	r1, r8
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f000 fb4b 	bl	8003514 <lis2dw12_power_mode_set>
 8002e7e:	b9d0      	cbnz	r0, 8002eb6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18a>
  pObj->acc_odr = Odr;
 8002e80:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8002e84:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002e88:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 8002e8c:	ecbd 8b02 	vpop	{d8}
 8002e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002e94:	2102      	movs	r1, #2
 8002e96:	e7e8      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8002e98:	2103      	movs	r1, #3
 8002e9a:	e7e6      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	e7e4      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8002ea0:	2105      	movs	r1, #5
 8002ea2:	e7e2      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8002ea4:	2106      	movs	r1, #6
 8002ea6:	e7e0      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8002ea8:	2107      	movs	r1, #7
 8002eaa:	e7de      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
 8002eac:	2109      	movs	r1, #9
 8002eae:	e7dc      	b.n	8002e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13e>
    return LIS2DW12_ERROR;
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	e7ea      	b.n	8002e8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
    return LIS2DW12_ERROR;
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	e7e7      	b.n	8002e8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
 8002ebc:	43480000 	.word	0x43480000
 8002ec0:	3fcccccd 	.word	0x3fcccccd
 8002ec4:	42480000 	.word	0x42480000
 8002ec8:	42c80000 	.word	0x42c80000
 8002ecc:	43c80000 	.word	0x43c80000
 8002ed0:	44480000 	.word	0x44480000

08002ed4 <LIS2DW12_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002ed4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d00e      	beq.n	8002efa <LIS2DW12_ACC_Enable+0x26>
{
 8002edc:	b510      	push	{r4, lr}
 8002ede:	4604      	mov	r4, r0
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002ee0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8002ee4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8002ee8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8002eec:	f7ff ff1e 	bl	8002d2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002ef0:	b928      	cbnz	r0, 8002efe <LIS2DW12_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8002ef8:	bd10      	pop	{r4, pc}
    return LIS2DW12_OK;
 8002efa:	2000      	movs	r0, #0
}
 8002efc:	4770      	bx	lr
    return LIS2DW12_ERROR;
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	e7f9      	b.n	8002ef8 <LIS2DW12_ACC_Enable+0x24>

08002f04 <LIS2DW12_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8002f04:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002f08:	b90b      	cbnz	r3, 8002f0e <LIS2DW12_ACC_Disable+0xa>
    return LIS2DW12_OK;
 8002f0a:	2000      	movs	r0, #0
}
 8002f0c:	4770      	bx	lr
{
 8002f0e:	b510      	push	{r4, lr}
 8002f10:	4604      	mov	r4, r0
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002f12:	2100      	movs	r1, #0
 8002f14:	3020      	adds	r0, #32
 8002f16:	f000 fb9f 	bl	8003658 <lis2dw12_data_rate_set>
 8002f1a:	b910      	cbnz	r0, 8002f22 <LIS2DW12_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 8002f1c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8002f20:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8002f22:	f04f 30ff 	mov.w	r0, #4294967295
 8002f26:	e7fb      	b.n	8002f20 <LIS2DW12_ACC_Disable+0x1c>

08002f28 <LIS2DW12_DeInit>:
{
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002f2c:	f7ff ffea 	bl	8002f04 <LIS2DW12_ACC_Disable>
 8002f30:	b948      	cbnz	r0, 8002f46 <LIS2DW12_DeInit+0x1e>
  pObj->acc_odr = 0.0f;
 8002f32:	2300      	movs	r3, #0
 8002f34:	6363      	str	r3, [r4, #52]	; 0x34
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002f3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  pObj->is_initialized = 0;
 8002f40:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8002f44:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4a:	e7fb      	b.n	8002f44 <LIS2DW12_DeInit+0x1c>

08002f4c <LIS2DW12_Init>:
{
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4604      	mov	r4, r0
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002f50:	f100 0520 	add.w	r5, r0, #32
 8002f54:	2101      	movs	r1, #1
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 fc8c 	bl	8003874 <lis2dw12_auto_increment_set>
 8002f5c:	bb10      	cbnz	r0, 8002fa4 <LIS2DW12_Init+0x58>
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 fc0a 	bl	800377a <lis2dw12_block_data_update_set>
 8002f66:	bb00      	cbnz	r0, 8002faa <LIS2DW12_Init+0x5e>
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 fc9b 	bl	80038a6 <lis2dw12_fifo_mode_set>
 8002f70:	b9f0      	cbnz	r0, 8002fb0 <LIS2DW12_Init+0x64>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002f72:	2104      	movs	r1, #4
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 facd 	bl	8003514 <lis2dw12_power_mode_set>
 8002f7a:	b9e0      	cbnz	r0, 8002fb6 <LIS2DW12_Init+0x6a>
  pObj->acc_odr = 100.0f;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <LIS2DW12_Init+0x7c>)
 8002f7e:	6363      	str	r3, [r4, #52]	; 0x34
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002f80:	2100      	movs	r1, #0
 8002f82:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002f86:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 fb64 	bl	8003658 <lis2dw12_data_rate_set>
 8002f90:	b9a0      	cbnz	r0, 8002fbc <LIS2DW12_Init+0x70>
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002f92:	2100      	movs	r1, #0
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fc09 	bl	80037ac <lis2dw12_full_scale_set>
 8002f9a:	b990      	cbnz	r0, 8002fc2 <LIS2DW12_Init+0x76>
  pObj->is_initialized = 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2DW12_ERROR;
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	e7fb      	b.n	8002fa2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	e7f8      	b.n	8002fa2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e7f5      	b.n	8002fa2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fba:	e7f2      	b.n	8002fa2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	e7ef      	b.n	8002fa2 <LIS2DW12_Init+0x56>
    return LIS2DW12_ERROR;
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	e7ec      	b.n	8002fa2 <LIS2DW12_Init+0x56>
 8002fc8:	42c80000 	.word	0x42c80000

08002fcc <LIS2DW12_ACC_SetFullScale>:
{
 8002fcc:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LIS2DW12_4g
 8002fce:	2902      	cmp	r1, #2
 8002fd0:	dd05      	ble.n	8002fde <LIS2DW12_ACC_SetFullScale+0x12>
 8002fd2:	2904      	cmp	r1, #4
 8002fd4:	dd09      	ble.n	8002fea <LIS2DW12_ACC_SetFullScale+0x1e>
 8002fd6:	2908      	cmp	r1, #8
 8002fd8:	dc09      	bgt.n	8002fee <LIS2DW12_ACC_SetFullScale+0x22>
 8002fda:	2102      	movs	r1, #2
 8002fdc:	e000      	b.n	8002fe0 <LIS2DW12_ACC_SetFullScale+0x14>
 8002fde:	2100      	movs	r1, #0
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002fe0:	3020      	adds	r0, #32
 8002fe2:	f000 fbe3 	bl	80037ac <lis2dw12_full_scale_set>
 8002fe6:	b920      	cbnz	r0, 8002ff2 <LIS2DW12_ACC_SetFullScale+0x26>
}
 8002fe8:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LIS2DW12_4g
 8002fea:	2101      	movs	r1, #1
 8002fec:	e7f8      	b.n	8002fe0 <LIS2DW12_ACC_SetFullScale+0x14>
 8002fee:	2103      	movs	r1, #3
 8002ff0:	e7f6      	b.n	8002fe0 <LIS2DW12_ACC_SetFullScale+0x14>
    return LIS2DW12_ERROR;
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff6:	e7f7      	b.n	8002fe8 <LIS2DW12_ACC_SetFullScale+0x1c>

08002ff8 <LIS2DW12_ReadID>:
{
 8002ff8:	b508      	push	{r3, lr}
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002ffa:	3020      	adds	r0, #32
 8002ffc:	f000 fc33 	bl	8003866 <lis2dw12_device_id_get>
 8003000:	b900      	cbnz	r0, 8003004 <LIS2DW12_ReadID+0xc>
}
 8003002:	bd08      	pop	{r3, pc}
    return LIS2DW12_ERROR;
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	e7fb      	b.n	8003002 <LIS2DW12_ReadID+0xa>

0800300a <LIS2DW12_ACC_GetFullScale>:
{
 800300a:	b510      	push	{r4, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	460c      	mov	r4, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003010:	f10d 0107 	add.w	r1, sp, #7
 8003014:	3020      	adds	r0, #32
 8003016:	f000 fbe2 	bl	80037de <lis2dw12_full_scale_get>
 800301a:	b9c0      	cbnz	r0, 800304e <LIS2DW12_ACC_GetFullScale+0x44>
  switch (fs_low_level)
 800301c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d810      	bhi.n	8003046 <LIS2DW12_ACC_GetFullScale+0x3c>
 8003024:	e8df f003 	tbb	[pc, r3]
 8003028:	0c090602 	.word	0x0c090602
      *FullScale =  2;
 800302c:	2302      	movs	r3, #2
 800302e:	6023      	str	r3, [r4, #0]
}
 8003030:	b002      	add	sp, #8
 8003032:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8003034:	2304      	movs	r3, #4
 8003036:	6023      	str	r3, [r4, #0]
      break;
 8003038:	e7fa      	b.n	8003030 <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale =  8;
 800303a:	2308      	movs	r3, #8
 800303c:	6023      	str	r3, [r4, #0]
      break;
 800303e:	e7f7      	b.n	8003030 <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8003040:	2310      	movs	r3, #16
 8003042:	6023      	str	r3, [r4, #0]
      break;
 8003044:	e7f4      	b.n	8003030 <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = -1;
 8003046:	f04f 30ff 	mov.w	r0, #4294967295
 800304a:	6020      	str	r0, [r4, #0]
      break;
 800304c:	e7f0      	b.n	8003030 <LIS2DW12_ACC_GetFullScale+0x26>
    return LIS2DW12_ERROR;
 800304e:	f04f 30ff 	mov.w	r0, #4294967295
 8003052:	e7ed      	b.n	8003030 <LIS2DW12_ACC_GetFullScale+0x26>

08003054 <LIS2DW12_ACC_GetSensitivity>:
{
 8003054:	b530      	push	{r4, r5, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	460d      	mov	r5, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800305a:	f100 0420 	add.w	r4, r0, #32
 800305e:	f10d 0107 	add.w	r1, sp, #7
 8003062:	4620      	mov	r0, r4
 8003064:	f000 fbbb 	bl	80037de <lis2dw12_full_scale_get>
 8003068:	2800      	cmp	r0, #0
 800306a:	d152      	bne.n	8003112 <LIS2DW12_ACC_GetSensitivity+0xbe>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800306c:	f10d 0106 	add.w	r1, sp, #6
 8003070:	4620      	mov	r0, r4
 8003072:	f000 fa87 	bl	8003584 <lis2dw12_power_mode_get>
 8003076:	2800      	cmp	r0, #0
 8003078:	d14e      	bne.n	8003118 <LIS2DW12_ACC_GetSensitivity+0xc4>
  switch (mode)
 800307a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800307e:	2b1b      	cmp	r3, #27
 8003080:	d841      	bhi.n	8003106 <LIS2DW12_ACC_GetSensitivity+0xb2>
 8003082:	e8df f003 	tbb	[pc, r3]
 8003086:	270e      	.short	0x270e
 8003088:	40272727 	.word	0x40272727
 800308c:	270e4040 	.word	0x270e4040
 8003090:	40402727 	.word	0x40402727
 8003094:	270e4040 	.word	0x270e4040
 8003098:	40272727 	.word	0x40272727
 800309c:	270e4040 	.word	0x270e4040
 80030a0:	2727      	.short	0x2727
      switch (full_scale)
 80030a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d80f      	bhi.n	80030ca <LIS2DW12_ACC_GetSensitivity+0x76>
 80030aa:	e8df f003 	tbb	[pc, r3]
 80030ae:	0502      	.short	0x0502
 80030b0:	0b08      	.short	0x0b08
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <LIS2DW12_ACC_GetSensitivity+0xcc>)
 80030b4:	602b      	str	r3, [r5, #0]
          break;
 80030b6:	e02a      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80030ba:	602b      	str	r3, [r5, #0]
          break;
 80030bc:	e027      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <LIS2DW12_ACC_GetSensitivity+0xd4>)
 80030c0:	602b      	str	r3, [r5, #0]
          break;
 80030c2:	e024      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <LIS2DW12_ACC_GetSensitivity+0xd8>)
 80030c6:	602b      	str	r3, [r5, #0]
          break;
 80030c8:	e021      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = -1.0f;
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 80030cc:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 80030ce:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 80030d2:	e01c      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
      switch (full_scale)
 80030d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d80f      	bhi.n	80030fc <LIS2DW12_ACC_GetSensitivity+0xa8>
 80030dc:	e8df f003 	tbb	[pc, r3]
 80030e0:	0b080502 	.word	0x0b080502
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <LIS2DW12_ACC_GetSensitivity+0xe0>)
 80030e6:	602b      	str	r3, [r5, #0]
          break;
 80030e8:	e011      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <LIS2DW12_ACC_GetSensitivity+0xe4>)
 80030ec:	602b      	str	r3, [r5, #0]
          break;
 80030ee:	e00e      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <LIS2DW12_ACC_GetSensitivity+0xcc>)
 80030f2:	602b      	str	r3, [r5, #0]
          break;
 80030f4:	e00b      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80030f8:	602b      	str	r3, [r5, #0]
          break;
 80030fa:	e008      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
          *Sensitivity = -1.0f;
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 80030fe:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003104:	e003      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
      *Sensitivity = -1.0f;
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003108:	602b      	str	r3, [r5, #0]
      ret = LIS2DW12_ERROR;
 800310a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800310e:	b003      	add	sp, #12
 8003110:	bd30      	pop	{r4, r5, pc}
    return LIS2DW12_ERROR;
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	e7fa      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
    return LIS2DW12_ERROR;
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	e7f7      	b.n	800310e <LIS2DW12_ACC_GetSensitivity+0xba>
 800311e:	bf00      	nop
 8003120:	3f79db23 	.word	0x3f79db23
 8003124:	3ff9db23 	.word	0x3ff9db23
 8003128:	4079db23 	.word	0x4079db23
 800312c:	40f9db23 	.word	0x40f9db23
 8003130:	bf800000 	.word	0xbf800000
 8003134:	3e79db23 	.word	0x3e79db23
 8003138:	3ef9db23 	.word	0x3ef9db23

0800313c <LIS2DW12_ACC_GetOutputDataRate>:
{
 800313c:	b530      	push	{r4, r5, lr}
 800313e:	b083      	sub	sp, #12
 8003140:	460d      	mov	r5, r1
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003142:	f100 0420 	add.w	r4, r0, #32
 8003146:	f10d 0107 	add.w	r1, sp, #7
 800314a:	4620      	mov	r0, r4
 800314c:	f000 fab5 	bl	80036ba <lis2dw12_data_rate_get>
 8003150:	2800      	cmp	r0, #0
 8003152:	f040 80bd 	bne.w	80032d0 <LIS2DW12_ACC_GetOutputDataRate+0x194>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003156:	f10d 0106 	add.w	r1, sp, #6
 800315a:	4620      	mov	r0, r4
 800315c:	f000 fa12 	bl	8003584 <lis2dw12_power_mode_get>
 8003160:	2800      	cmp	r0, #0
 8003162:	f040 80b8 	bne.w	80032d6 <LIS2DW12_ACC_GetOutputDataRate+0x19a>
  switch (odr_low_level)
 8003166:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800316a:	2b32      	cmp	r3, #50	; 0x32
 800316c:	f200 80ab 	bhi.w	80032c6 <LIS2DW12_ACC_GetOutputDataRate+0x18a>
 8003170:	e8df f003 	tbb	[pc, r3]
 8003174:	403d1e1a 	.word	0x403d1e1a
 8003178:	4c494643 	.word	0x4c494643
 800317c:	a9a98a6b 	.word	0xa9a98a6b
 8003180:	a9a9a9a9 	.word	0xa9a9a9a9
 8003184:	a91aa9a9 	.word	0xa91aa9a9
 8003188:	a9a9a9a9 	.word	0xa9a9a9a9
 800318c:	a9a9a9a9 	.word	0xa9a9a9a9
 8003190:	a9a9a9a9 	.word	0xa9a9a9a9
 8003194:	a9a9a9a9 	.word	0xa9a9a9a9
 8003198:	a9a9a9a9 	.word	0xa9a9a9a9
 800319c:	a9a9a9a9 	.word	0xa9a9a9a9
 80031a0:	a9a9a9a9 	.word	0xa9a9a9a9
 80031a4:	a9a9      	.short	0xa9a9
 80031a6:	1a          	.byte	0x1a
 80031a7:	00          	.byte	0x00
      *Odr = 0.0f;
 80031a8:	2300      	movs	r3, #0
 80031aa:	602b      	str	r3, [r5, #0]
}
 80031ac:	b003      	add	sp, #12
 80031ae:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 80031b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80031b4:	2b1b      	cmp	r3, #27
 80031b6:	d815      	bhi.n	80031e4 <LIS2DW12_ACC_GetOutputDataRate+0xa8>
 80031b8:	e8df f003 	tbb	[pc, r3]
 80031bc:	11111111 	.word	0x11111111
 80031c0:	1414140e 	.word	0x1414140e
 80031c4:	11111111 	.word	0x11111111
 80031c8:	14141414 	.word	0x14141414
 80031cc:	11111111 	.word	0x11111111
 80031d0:	1414140e 	.word	0x1414140e
 80031d4:	11111111 	.word	0x11111111
          *Odr = 12.5f;
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <LIS2DW12_ACC_GetOutputDataRate+0x1a0>)
 80031da:	602b      	str	r3, [r5, #0]
          break;
 80031dc:	e7e6      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 1.6f;
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <LIS2DW12_ACC_GetOutputDataRate+0x1a4>)
 80031e0:	602b      	str	r3, [r5, #0]
          break;
 80031e2:	e7e3      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 80031e6:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 80031ec:	e7de      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 12.5f;
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <LIS2DW12_ACC_GetOutputDataRate+0x1a0>)
 80031f0:	602b      	str	r3, [r5, #0]
      break;
 80031f2:	e7db      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 25.0f;
 80031f4:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <LIS2DW12_ACC_GetOutputDataRate+0x1ac>)
 80031f6:	602b      	str	r3, [r5, #0]
      break;
 80031f8:	e7d8      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 50.0f;
 80031fa:	4b3c      	ldr	r3, [pc, #240]	; (80032ec <LIS2DW12_ACC_GetOutputDataRate+0x1b0>)
 80031fc:	602b      	str	r3, [r5, #0]
      break;
 80031fe:	e7d5      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 100.0f;
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <LIS2DW12_ACC_GetOutputDataRate+0x1b4>)
 8003202:	602b      	str	r3, [r5, #0]
      break;
 8003204:	e7d2      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = 200.0f;
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 8003208:	602b      	str	r3, [r5, #0]
      break;
 800320a:	e7cf      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 800320c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003210:	2b1b      	cmp	r3, #27
 8003212:	d815      	bhi.n	8003240 <LIS2DW12_ACC_GetOutputDataRate+0x104>
 8003214:	e8df f003 	tbb	[pc, r3]
 8003218:	11111111 	.word	0x11111111
 800321c:	1414140e 	.word	0x1414140e
 8003220:	11111111 	.word	0x11111111
 8003224:	14141414 	.word	0x14141414
 8003228:	11111111 	.word	0x11111111
 800322c:	1414140e 	.word	0x1414140e
 8003230:	11111111 	.word	0x11111111
          *Odr = 400.0f;
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <LIS2DW12_ACC_GetOutputDataRate+0x1bc>)
 8003236:	602b      	str	r3, [r5, #0]
          break;
 8003238:	e7b8      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 200.0f;
 800323a:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 800323c:	602b      	str	r3, [r5, #0]
          break;
 800323e:	e7b5      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8003242:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003248:	e7b0      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 800324a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800324e:	2b1b      	cmp	r3, #27
 8003250:	d815      	bhi.n	800327e <LIS2DW12_ACC_GetOutputDataRate+0x142>
 8003252:	e8df f003 	tbb	[pc, r3]
 8003256:	1111      	.short	0x1111
 8003258:	140e1111 	.word	0x140e1111
 800325c:	11111414 	.word	0x11111414
 8003260:	14141111 	.word	0x14141111
 8003264:	11111414 	.word	0x11111414
 8003268:	140e1111 	.word	0x140e1111
 800326c:	11111414 	.word	0x11111414
 8003270:	1111      	.short	0x1111
          *Odr = 800.0f;
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <LIS2DW12_ACC_GetOutputDataRate+0x1c0>)
 8003274:	602b      	str	r3, [r5, #0]
          break;
 8003276:	e799      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 200.0f;
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 800327a:	602b      	str	r3, [r5, #0]
          break;
 800327c:	e796      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 8003280:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8003282:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 8003286:	e791      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      switch (mode)
 8003288:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800328c:	2b1b      	cmp	r3, #27
 800328e:	d815      	bhi.n	80032bc <LIS2DW12_ACC_GetOutputDataRate+0x180>
 8003290:	e8df f003 	tbb	[pc, r3]
 8003294:	11111111 	.word	0x11111111
 8003298:	1414140e 	.word	0x1414140e
 800329c:	11111111 	.word	0x11111111
 80032a0:	14141414 	.word	0x14141414
 80032a4:	11111111 	.word	0x11111111
 80032a8:	1414140e 	.word	0x1414140e
 80032ac:	11111111 	.word	0x11111111
          *Odr = 1600.0f;
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <LIS2DW12_ACC_GetOutputDataRate+0x1c4>)
 80032b2:	602b      	str	r3, [r5, #0]
          break;
 80032b4:	e77a      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = 200.0f;
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>)
 80032b8:	602b      	str	r3, [r5, #0]
          break;
 80032ba:	e777      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
          *Odr = -1.0f;
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 80032be:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
          break;
 80032c4:	e772      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
      *Odr = -1.0f;
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 80032c8:	602b      	str	r3, [r5, #0]
      ret = LIS2DW12_ERROR;
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 80032ce:	e76d      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
    return LIS2DW12_ERROR;
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	e76a      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
    return LIS2DW12_ERROR;
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	e767      	b.n	80031ac <LIS2DW12_ACC_GetOutputDataRate+0x70>
 80032dc:	41480000 	.word	0x41480000
 80032e0:	3fcccccd 	.word	0x3fcccccd
 80032e4:	bf800000 	.word	0xbf800000
 80032e8:	41c80000 	.word	0x41c80000
 80032ec:	42480000 	.word	0x42480000
 80032f0:	42c80000 	.word	0x42c80000
 80032f4:	43480000 	.word	0x43480000
 80032f8:	43c80000 	.word	0x43c80000
 80032fc:	44480000 	.word	0x44480000
 8003300:	44c80000 	.word	0x44c80000

08003304 <LIS2DW12_ACC_GetAxesRaw>:
{
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	460d      	mov	r5, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800330a:	f100 0420 	add.w	r4, r0, #32
 800330e:	f10d 0107 	add.w	r1, sp, #7
 8003312:	4620      	mov	r0, r4
 8003314:	f000 f936 	bl	8003584 <lis2dw12_power_mode_get>
 8003318:	2800      	cmp	r0, #0
 800331a:	d14c      	bne.n	80033b6 <LIS2DW12_ACC_GetAxesRaw+0xb2>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800331c:	a902      	add	r1, sp, #8
 800331e:	4620      	mov	r0, r4
 8003320:	f000 fa7f 	bl	8003822 <lis2dw12_acceleration_raw_get>
 8003324:	2800      	cmp	r0, #0
 8003326:	d149      	bne.n	80033bc <LIS2DW12_ACC_GetAxesRaw+0xb8>
  switch (mode)
 8003328:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800332c:	2b1b      	cmp	r3, #27
 800332e:	d848      	bhi.n	80033c2 <LIS2DW12_ACC_GetAxesRaw+0xbe>
 8003330:	e8df f003 	tbb	[pc, r3]
 8003334:	2828280e 	.word	0x2828280e
 8003338:	47474728 	.word	0x47474728
 800333c:	2828280e 	.word	0x2828280e
 8003340:	47474747 	.word	0x47474747
 8003344:	2828280e 	.word	0x2828280e
 8003348:	47474728 	.word	0x47474728
 800334c:	2828280e 	.word	0x2828280e
      Value->x = (data_raw.i16bit[0] / 16);
 8003350:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db0f      	blt.n	8003378 <LIS2DW12_ACC_GetAxesRaw+0x74>
 8003358:	111b      	asrs	r3, r3, #4
 800335a:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800335c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0b      	blt.n	800337c <LIS2DW12_ACC_GetAxesRaw+0x78>
 8003364:	111b      	asrs	r3, r3, #4
 8003366:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003368:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db07      	blt.n	8003380 <LIS2DW12_ACC_GetAxesRaw+0x7c>
 8003370:	111b      	asrs	r3, r3, #4
 8003372:	80ab      	strh	r3, [r5, #4]
}
 8003374:	b005      	add	sp, #20
 8003376:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 8003378:	330f      	adds	r3, #15
 800337a:	e7ed      	b.n	8003358 <LIS2DW12_ACC_GetAxesRaw+0x54>
      Value->y = (data_raw.i16bit[1] / 16);
 800337c:	330f      	adds	r3, #15
 800337e:	e7f1      	b.n	8003364 <LIS2DW12_ACC_GetAxesRaw+0x60>
      Value->z = (data_raw.i16bit[2] / 16);
 8003380:	330f      	adds	r3, #15
 8003382:	e7f5      	b.n	8003370 <LIS2DW12_ACC_GetAxesRaw+0x6c>
      Value->x = (data_raw.i16bit[0] / 4);
 8003384:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0e      	blt.n	80033aa <LIS2DW12_ACC_GetAxesRaw+0xa6>
 800338c:	109b      	asrs	r3, r3, #2
 800338e:	802b      	strh	r3, [r5, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003390:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <LIS2DW12_ACC_GetAxesRaw+0xaa>
 8003398:	109b      	asrs	r3, r3, #2
 800339a:	806b      	strh	r3, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800339c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db06      	blt.n	80033b2 <LIS2DW12_ACC_GetAxesRaw+0xae>
 80033a4:	109b      	asrs	r3, r3, #2
 80033a6:	80ab      	strh	r3, [r5, #4]
      break;
 80033a8:	e7e4      	b.n	8003374 <LIS2DW12_ACC_GetAxesRaw+0x70>
      Value->x = (data_raw.i16bit[0] / 4);
 80033aa:	3303      	adds	r3, #3
 80033ac:	e7ee      	b.n	800338c <LIS2DW12_ACC_GetAxesRaw+0x88>
      Value->y = (data_raw.i16bit[1] / 4);
 80033ae:	3303      	adds	r3, #3
 80033b0:	e7f2      	b.n	8003398 <LIS2DW12_ACC_GetAxesRaw+0x94>
      Value->z = (data_raw.i16bit[2] / 4);
 80033b2:	3303      	adds	r3, #3
 80033b4:	e7f6      	b.n	80033a4 <LIS2DW12_ACC_GetAxesRaw+0xa0>
    return LIS2DW12_ERROR;
 80033b6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ba:	e7db      	b.n	8003374 <LIS2DW12_ACC_GetAxesRaw+0x70>
    return LIS2DW12_ERROR;
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	e7d8      	b.n	8003374 <LIS2DW12_ACC_GetAxesRaw+0x70>
  switch (mode)
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
 80033c6:	e7d5      	b.n	8003374 <LIS2DW12_ACC_GetAxesRaw+0x70>

080033c8 <LIS2DW12_ACC_GetAxes>:
{
 80033c8:	b530      	push	{r4, r5, lr}
 80033ca:	b085      	sub	sp, #20
 80033cc:	4605      	mov	r5, r0
 80033ce:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80033d4:	a902      	add	r1, sp, #8
 80033d6:	f7ff ff95 	bl	8003304 <LIS2DW12_ACC_GetAxesRaw>
 80033da:	bb60      	cbnz	r0, 8003436 <LIS2DW12_ACC_GetAxes+0x6e>
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80033dc:	a901      	add	r1, sp, #4
 80033de:	4628      	mov	r0, r5
 80033e0:	f7ff fe38 	bl	8003054 <LIS2DW12_ACC_GetSensitivity>
 80033e4:	bb50      	cbnz	r0, 800343c <LIS2DW12_ACC_GetAxes+0x74>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80033e6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80033ea:	ee07 3a10 	vmov	s14, r3
 80033ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033f2:	eddd 7a01 	vldr	s15, [sp, #4]
 80033f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80033fe:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003402:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003406:	ee07 3a10 	vmov	s14, r3
 800340a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800340e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003412:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003416:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800341a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800341e:	ee07 3a10 	vmov	s14, r3
 8003422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003432:	b005      	add	sp, #20
 8003434:	bd30      	pop	{r4, r5, pc}
    return LIS2DW12_ERROR;
 8003436:	f04f 30ff 	mov.w	r0, #4294967295
 800343a:	e7fa      	b.n	8003432 <LIS2DW12_ACC_GetAxes+0x6a>
    return LIS2DW12_ERROR;
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	e7f7      	b.n	8003432 <LIS2DW12_ACC_GetAxes+0x6a>

08003442 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
{
 8003442:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8003444:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003448:	2b01      	cmp	r3, #1
 800344a:	d002      	beq.n	8003452 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x10>
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800344c:	f7ff fbf6 	bl	8002c3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
}
 8003450:	bd08      	pop	{r3, pc}
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003452:	f7ff fc6b 	bl	8002d2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003456:	e7fb      	b.n	8003450 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0xe>

08003458 <LIS2DW12_ACC_SetOutputDataRate>:
{
 8003458:	b508      	push	{r3, lr}
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800345a:	2200      	movs	r2, #0
 800345c:	4611      	mov	r1, r2
 800345e:	f7ff fff0 	bl	8003442 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
}
 8003462:	bd08      	pop	{r3, pc}

08003464 <LIS2DW12_Write_Reg>:
{
 8003464:	b500      	push	{lr}
 8003466:	b083      	sub	sp, #12
 8003468:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 800346c:	2301      	movs	r3, #1
 800346e:	f10d 0207 	add.w	r2, sp, #7
 8003472:	3020      	adds	r0, #32
 8003474:	f000 f849 	bl	800350a <lis2dw12_write_reg>
 8003478:	b910      	cbnz	r0, 8003480 <LIS2DW12_Write_Reg+0x1c>
}
 800347a:	b003      	add	sp, #12
 800347c:	f85d fb04 	ldr.w	pc, [sp], #4
    return LIS2DW12_ERROR;
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	e7f9      	b.n	800347a <LIS2DW12_Write_Reg+0x16>
	...

08003488 <LIS2DW12_RegisterBusIO>:
  if (pObj == NULL)
 8003488:	2800      	cmp	r0, #0
 800348a:	d02b      	beq.n	80034e4 <LIS2DW12_RegisterBusIO+0x5c>
{
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8003490:	680b      	ldr	r3, [r1, #0]
 8003492:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003494:	684a      	ldr	r2, [r1, #4]
 8003496:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003498:	688a      	ldr	r2, [r1, #8]
 800349a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800349c:	7b0a      	ldrb	r2, [r1, #12]
 800349e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80034a0:	690a      	ldr	r2, [r1, #16]
 80034a2:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80034a4:	694a      	ldr	r2, [r1, #20]
 80034a6:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80034a8:	698a      	ldr	r2, [r1, #24]
 80034aa:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80034ac:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <LIS2DW12_RegisterBusIO+0x70>)
 80034ae:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <LIS2DW12_RegisterBusIO+0x74>)
 80034b2:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80034b4:	69ca      	ldr	r2, [r1, #28]
 80034b6:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80034b8:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 80034ba:	b1b3      	cbz	r3, 80034ea <LIS2DW12_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80034bc:	4798      	blx	r3
 80034be:	b9b8      	cbnz	r0, 80034f0 <LIS2DW12_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d000      	beq.n	80034c8 <LIS2DW12_RegisterBusIO+0x40>
}
 80034c6:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80034c8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1fa      	bne.n	80034c6 <LIS2DW12_RegisterBusIO+0x3e>
          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80034d0:	2205      	movs	r2, #5
 80034d2:	2121      	movs	r1, #33	; 0x21
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7ff ffc5 	bl	8003464 <LIS2DW12_Write_Reg>
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0f3      	beq.n	80034c6 <LIS2DW12_RegisterBusIO+0x3e>
            ret = LIS2DW12_ERROR;
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80034e2:	e7f0      	b.n	80034c6 <LIS2DW12_RegisterBusIO+0x3e>
    ret = LIS2DW12_ERROR;
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034e8:	4770      	bx	lr
      ret = LIS2DW12_ERROR;
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	e7ea      	b.n	80034c6 <LIS2DW12_RegisterBusIO+0x3e>
      ret = LIS2DW12_ERROR;
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	e7e7      	b.n	80034c6 <LIS2DW12_RegisterBusIO+0x3e>
 80034f6:	bf00      	nop
 80034f8:	08002d19 	.word	0x08002d19
 80034fc:	08002d23 	.word	0x08002d23

08003500 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003500:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003502:	6844      	ldr	r4, [r0, #4]
 8003504:	68c0      	ldr	r0, [r0, #12]
 8003506:	47a0      	blx	r4

  return ret;
}
 8003508:	bd10      	pop	{r4, pc}

0800350a <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800350a:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800350c:	6804      	ldr	r4, [r0, #0]
 800350e:	68c0      	ldr	r0, [r0, #12]
 8003510:	47a0      	blx	r4

  return ret;
}
 8003512:	bd10      	pop	{r4, pc}

08003514 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8003514:	b530      	push	{r4, r5, lr}
 8003516:	b083      	sub	sp, #12
 8003518:	4605      	mov	r5, r0
 800351a:	460c      	mov	r4, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800351c:	2301      	movs	r3, #1
 800351e:	aa01      	add	r2, sp, #4
 8003520:	2120      	movs	r1, #32
 8003522:	f7ff ffed 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 8003526:	b118      	cbz	r0, 8003530 <lis2dw12_power_mode_set+0x1c>
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0)
 8003528:	b1b0      	cbz	r0, 8003558 <lis2dw12_power_mode_set+0x44>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  if (ret == 0)
 800352a:	b1e0      	cbz	r0, 8003566 <lis2dw12_power_mode_set+0x52>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  return ret;
}
 800352c:	b003      	add	sp, #12
 800352e:	bd30      	pop	{r4, r5, pc}
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003530:	f3c4 0381 	ubfx	r3, r4, #2, #2
 8003534:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003538:	f363 0283 	bfi	r2, r3, #2, #2
 800353c:	f88d 2004 	strb.w	r2, [sp, #4]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003540:	b2d3      	uxtb	r3, r2
 8003542:	f364 0301 	bfi	r3, r4, #0, #2
 8003546:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800354a:	2301      	movs	r3, #1
 800354c:	aa01      	add	r2, sp, #4
 800354e:	2120      	movs	r1, #32
 8003550:	4628      	mov	r0, r5
 8003552:	f7ff ffda 	bl	800350a <lis2dw12_write_reg>
 8003556:	e7e7      	b.n	8003528 <lis2dw12_power_mode_set+0x14>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003558:	2301      	movs	r3, #1
 800355a:	466a      	mov	r2, sp
 800355c:	2125      	movs	r1, #37	; 0x25
 800355e:	4628      	mov	r0, r5
 8003560:	f7ff ffce 	bl	8003500 <lis2dw12_read_reg>
 8003564:	e7e1      	b.n	800352a <lis2dw12_power_mode_set+0x16>
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003566:	f3c4 1100 	ubfx	r1, r4, #4, #1
 800356a:	f89d 3000 	ldrb.w	r3, [sp]
 800356e:	f361 0382 	bfi	r3, r1, #2, #1
 8003572:	f88d 3000 	strb.w	r3, [sp]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003576:	2301      	movs	r3, #1
 8003578:	466a      	mov	r2, sp
 800357a:	2125      	movs	r1, #37	; 0x25
 800357c:	4628      	mov	r0, r5
 800357e:	f7ff ffc4 	bl	800350a <lis2dw12_write_reg>
  return ret;
 8003582:	e7d3      	b.n	800352c <lis2dw12_power_mode_set+0x18>

08003584 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003584:	b530      	push	{r4, r5, lr}
 8003586:	b083      	sub	sp, #12
 8003588:	4604      	mov	r4, r0
 800358a:	460d      	mov	r5, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800358c:	2301      	movs	r3, #1
 800358e:	aa01      	add	r2, sp, #4
 8003590:	2120      	movs	r1, #32
 8003592:	f7ff ffb5 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 8003596:	b108      	cbz	r0, 800359c <lis2dw12_power_mode_get+0x18>
        break;
    }
  }

  return ret;
}
 8003598:	b003      	add	sp, #12
 800359a:	bd30      	pop	{r4, r5, pc}
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800359c:	2301      	movs	r3, #1
 800359e:	466a      	mov	r2, sp
 80035a0:	2125      	movs	r1, #37	; 0x25
 80035a2:	4620      	mov	r0, r4
 80035a4:	f7ff ffac 	bl	8003500 <lis2dw12_read_reg>
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80035a8:	f89d 3000 	ldrb.w	r3, [sp]
 80035ac:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80035b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80035b4:	f002 030c 	and.w	r3, r2, #12
 80035b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode))
 80035bc:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80035c0:	4413      	add	r3, r2
 80035c2:	2b1b      	cmp	r3, #27
 80035c4:	d845      	bhi.n	8003652 <lis2dw12_power_mode_get+0xce>
 80035c6:	e8df f003 	tbb	[pc, r3]
 80035ca:	171a      	.short	0x171a
 80035cc:	440e1114 	.word	0x440e1114
 80035d0:	23264444 	.word	0x23264444
 80035d4:	44441d20 	.word	0x44441d20
 80035d8:	32354444 	.word	0x32354444
 80035dc:	44292c2f 	.word	0x44292c2f
 80035e0:	3e414444 	.word	0x3e414444
 80035e4:	383b      	.short	0x383b
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80035e6:	2304      	movs	r3, #4
 80035e8:	702b      	strb	r3, [r5, #0]
        break;
 80035ea:	e7d5      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80035ec:	2303      	movs	r3, #3
 80035ee:	702b      	strb	r3, [r5, #0]
        break;
 80035f0:	e7d2      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80035f2:	2302      	movs	r3, #2
 80035f4:	702b      	strb	r3, [r5, #0]
        break;
 80035f6:	e7cf      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80035f8:	2301      	movs	r3, #1
 80035fa:	702b      	strb	r3, [r5, #0]
        break;
 80035fc:	e7cc      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80035fe:	2300      	movs	r3, #0
 8003600:	702b      	strb	r3, [r5, #0]
        break;
 8003602:	e7c9      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8003604:	230b      	movs	r3, #11
 8003606:	702b      	strb	r3, [r5, #0]
        break;
 8003608:	e7c6      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800360a:	230a      	movs	r3, #10
 800360c:	702b      	strb	r3, [r5, #0]
        break;
 800360e:	e7c3      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003610:	2309      	movs	r3, #9
 8003612:	702b      	strb	r3, [r5, #0]
        break;
 8003614:	e7c0      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003616:	2308      	movs	r3, #8
 8003618:	702b      	strb	r3, [r5, #0]
        break;
 800361a:	e7bd      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800361c:	2314      	movs	r3, #20
 800361e:	702b      	strb	r3, [r5, #0]
        break;
 8003620:	e7ba      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003622:	2313      	movs	r3, #19
 8003624:	702b      	strb	r3, [r5, #0]
        break;
 8003626:	e7b7      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003628:	2312      	movs	r3, #18
 800362a:	702b      	strb	r3, [r5, #0]
        break;
 800362c:	e7b4      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800362e:	2311      	movs	r3, #17
 8003630:	702b      	strb	r3, [r5, #0]
        break;
 8003632:	e7b1      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003634:	2310      	movs	r3, #16
 8003636:	702b      	strb	r3, [r5, #0]
        break;
 8003638:	e7ae      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 800363a:	231b      	movs	r3, #27
 800363c:	702b      	strb	r3, [r5, #0]
        break;
 800363e:	e7ab      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003640:	231a      	movs	r3, #26
 8003642:	702b      	strb	r3, [r5, #0]
        break;
 8003644:	e7a8      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003646:	2319      	movs	r3, #25
 8003648:	702b      	strb	r3, [r5, #0]
        break;
 800364a:	e7a5      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 800364c:	2318      	movs	r3, #24
 800364e:	702b      	strb	r3, [r5, #0]
        break;
 8003650:	e7a2      	b.n	8003598 <lis2dw12_power_mode_get+0x14>
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003652:	2304      	movs	r3, #4
 8003654:	702b      	strb	r3, [r5, #0]
  return ret;
 8003656:	e79f      	b.n	8003598 <lis2dw12_power_mode_get+0x14>

08003658 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003658:	b530      	push	{r4, r5, lr}
 800365a:	b083      	sub	sp, #12
 800365c:	4605      	mov	r5, r0
 800365e:	460c      	mov	r4, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003660:	2301      	movs	r3, #1
 8003662:	aa01      	add	r2, sp, #4
 8003664:	2120      	movs	r1, #32
 8003666:	f7ff ff4b 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 800366a:	b118      	cbz	r0, 8003674 <lis2dw12_data_rate_set+0x1c>
  {
    ctrl1.odr = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0)
 800366c:	b178      	cbz	r0, 800368e <lis2dw12_data_rate_set+0x36>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  if (ret == 0)
 800366e:	b1a8      	cbz	r0, 800369c <lis2dw12_data_rate_set+0x44>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  return ret;
}
 8003670:	b003      	add	sp, #12
 8003672:	bd30      	pop	{r4, r5, pc}
    ctrl1.odr = (uint8_t) val;
 8003674:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003678:	f364 1307 	bfi	r3, r4, #4, #4
 800367c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003680:	2301      	movs	r3, #1
 8003682:	aa01      	add	r2, sp, #4
 8003684:	2120      	movs	r1, #32
 8003686:	4628      	mov	r0, r5
 8003688:	f7ff ff3f 	bl	800350a <lis2dw12_write_reg>
 800368c:	e7ee      	b.n	800366c <lis2dw12_data_rate_set+0x14>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800368e:	2301      	movs	r3, #1
 8003690:	466a      	mov	r2, sp
 8003692:	2122      	movs	r1, #34	; 0x22
 8003694:	4628      	mov	r0, r5
 8003696:	f7ff ff33 	bl	8003500 <lis2dw12_read_reg>
 800369a:	e7e8      	b.n	800366e <lis2dw12_data_rate_set+0x16>
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800369c:	f3c4 1101 	ubfx	r1, r4, #4, #2
 80036a0:	f89d 3000 	ldrb.w	r3, [sp]
 80036a4:	f361 0301 	bfi	r3, r1, #0, #2
 80036a8:	f88d 3000 	strb.w	r3, [sp]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80036ac:	2301      	movs	r3, #1
 80036ae:	466a      	mov	r2, sp
 80036b0:	2122      	movs	r1, #34	; 0x22
 80036b2:	4628      	mov	r0, r5
 80036b4:	f7ff ff29 	bl	800350a <lis2dw12_write_reg>
  return ret;
 80036b8:	e7da      	b.n	8003670 <lis2dw12_data_rate_set+0x18>

080036ba <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80036ba:	b530      	push	{r4, r5, lr}
 80036bc:	b083      	sub	sp, #12
 80036be:	4604      	mov	r4, r0
 80036c0:	460d      	mov	r5, r1
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80036c2:	2301      	movs	r3, #1
 80036c4:	aa01      	add	r2, sp, #4
 80036c6:	2120      	movs	r1, #32
 80036c8:	f7ff ff1a 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 80036cc:	b108      	cbz	r0, 80036d2 <lis2dw12_data_rate_get+0x18>
        break;
    }
  }

  return ret;
}
 80036ce:	b003      	add	sp, #12
 80036d0:	bd30      	pop	{r4, r5, pc}
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80036d2:	2301      	movs	r3, #1
 80036d4:	466a      	mov	r2, sp
 80036d6:	2122      	movs	r1, #34	; 0x22
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff11 	bl	8003500 <lis2dw12_read_reg>
    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80036de:	f89d 3000 	ldrb.w	r3, [sp]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80036f0:	2b32      	cmp	r3, #50	; 0x32
 80036f2:	d83f      	bhi.n	8003774 <lis2dw12_data_rate_get+0xba>
 80036f4:	e8df f003 	tbb	[pc, r3]
 80036f8:	23201d1a 	.word	0x23201d1a
 80036fc:	2f2c2926 	.word	0x2f2c2926
 8003700:	3e3e3532 	.word	0x3e3e3532
 8003704:	3e3e3e3e 	.word	0x3e3e3e3e
 8003708:	3e3b3e3e 	.word	0x3e3b3e3e
 800370c:	3e3e3e3e 	.word	0x3e3e3e3e
 8003710:	3e3e3e3e 	.word	0x3e3e3e3e
 8003714:	3e3e3e3e 	.word	0x3e3e3e3e
 8003718:	3e3e3e3e 	.word	0x3e3e3e3e
 800371c:	3e3e3e3e 	.word	0x3e3e3e3e
 8003720:	3e3e3e3e 	.word	0x3e3e3e3e
 8003724:	3e3e3e3e 	.word	0x3e3e3e3e
 8003728:	3e3e      	.short	0x3e3e
 800372a:	38          	.byte	0x38
 800372b:	00          	.byte	0x00
        *val = LIS2DW12_XL_ODR_OFF;
 800372c:	2300      	movs	r3, #0
 800372e:	702b      	strb	r3, [r5, #0]
        break;
 8003730:	e7cd      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003732:	2301      	movs	r3, #1
 8003734:	702b      	strb	r3, [r5, #0]
        break;
 8003736:	e7ca      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003738:	2302      	movs	r3, #2
 800373a:	702b      	strb	r3, [r5, #0]
        break;
 800373c:	e7c7      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_25Hz;
 800373e:	2303      	movs	r3, #3
 8003740:	702b      	strb	r3, [r5, #0]
        break;
 8003742:	e7c4      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_50Hz;
 8003744:	2304      	movs	r3, #4
 8003746:	702b      	strb	r3, [r5, #0]
        break;
 8003748:	e7c1      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_100Hz;
 800374a:	2305      	movs	r3, #5
 800374c:	702b      	strb	r3, [r5, #0]
        break;
 800374e:	e7be      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_200Hz;
 8003750:	2306      	movs	r3, #6
 8003752:	702b      	strb	r3, [r5, #0]
        break;
 8003754:	e7bb      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_400Hz;
 8003756:	2307      	movs	r3, #7
 8003758:	702b      	strb	r3, [r5, #0]
        break;
 800375a:	e7b8      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_800Hz;
 800375c:	2308      	movs	r3, #8
 800375e:	702b      	strb	r3, [r5, #0]
        break;
 8003760:	e7b5      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003762:	2309      	movs	r3, #9
 8003764:	702b      	strb	r3, [r5, #0]
        break;
 8003766:	e7b2      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003768:	2332      	movs	r3, #50	; 0x32
 800376a:	702b      	strb	r3, [r5, #0]
        break;
 800376c:	e7af      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 800376e:	2312      	movs	r3, #18
 8003770:	702b      	strb	r3, [r5, #0]
        break;
 8003772:	e7ac      	b.n	80036ce <lis2dw12_data_rate_get+0x14>
        *val = LIS2DW12_XL_ODR_OFF;
 8003774:	2300      	movs	r3, #0
 8003776:	702b      	strb	r3, [r5, #0]
  return ret;
 8003778:	e7a9      	b.n	80036ce <lis2dw12_data_rate_get+0x14>

0800377a <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800377a:	b530      	push	{r4, r5, lr}
 800377c:	b083      	sub	sp, #12
 800377e:	4604      	mov	r4, r0
 8003780:	460d      	mov	r5, r1
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003782:	2301      	movs	r3, #1
 8003784:	aa01      	add	r2, sp, #4
 8003786:	2121      	movs	r1, #33	; 0x21
 8003788:	f7ff feba 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 800378c:	b108      	cbz	r0, 8003792 <lis2dw12_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800378e:	b003      	add	sp, #12
 8003790:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8003792:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003796:	f365 03c3 	bfi	r3, r5, #3, #1
 800379a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800379e:	2301      	movs	r3, #1
 80037a0:	aa01      	add	r2, sp, #4
 80037a2:	2121      	movs	r1, #33	; 0x21
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff feb0 	bl	800350a <lis2dw12_write_reg>
  return ret;
 80037aa:	e7f0      	b.n	800378e <lis2dw12_block_data_update_set+0x14>

080037ac <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80037ac:	b530      	push	{r4, r5, lr}
 80037ae:	b083      	sub	sp, #12
 80037b0:	4604      	mov	r4, r0
 80037b2:	460d      	mov	r5, r1
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80037b4:	2301      	movs	r3, #1
 80037b6:	aa01      	add	r2, sp, #4
 80037b8:	2125      	movs	r1, #37	; 0x25
 80037ba:	f7ff fea1 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 80037be:	b108      	cbz	r0, 80037c4 <lis2dw12_full_scale_set+0x18>
    reg.fs = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80037c0:	b003      	add	sp, #12
 80037c2:	bd30      	pop	{r4, r5, pc}
    reg.fs = (uint8_t) val;
 80037c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037c8:	f365 1305 	bfi	r3, r5, #4, #2
 80037cc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80037d0:	2301      	movs	r3, #1
 80037d2:	aa01      	add	r2, sp, #4
 80037d4:	2125      	movs	r1, #37	; 0x25
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7ff fe97 	bl	800350a <lis2dw12_write_reg>
  return ret;
 80037dc:	e7f0      	b.n	80037c0 <lis2dw12_full_scale_set+0x14>

080037de <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80037de:	b510      	push	{r4, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	460c      	mov	r4, r1
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80037e4:	2301      	movs	r3, #1
 80037e6:	aa01      	add	r2, sp, #4
 80037e8:	2125      	movs	r1, #37	; 0x25
 80037ea:	f7ff fe89 	bl	8003500 <lis2dw12_read_reg>

  switch (reg.fs)
 80037ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037f2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d810      	bhi.n	800381c <lis2dw12_full_scale_get+0x3e>
 80037fa:	e8df f003 	tbb	[pc, r3]
 80037fe:	0602      	.short	0x0602
 8003800:	0c09      	.short	0x0c09
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003802:	2300      	movs	r3, #0
 8003804:	7023      	strb	r3, [r4, #0]
      *val = LIS2DW12_2g;
      break;
  }

  return ret;
}
 8003806:	b002      	add	sp, #8
 8003808:	bd10      	pop	{r4, pc}
      *val = LIS2DW12_4g;
 800380a:	2301      	movs	r3, #1
 800380c:	7023      	strb	r3, [r4, #0]
      break;
 800380e:	e7fa      	b.n	8003806 <lis2dw12_full_scale_get+0x28>
      *val = LIS2DW12_8g;
 8003810:	2302      	movs	r3, #2
 8003812:	7023      	strb	r3, [r4, #0]
      break;
 8003814:	e7f7      	b.n	8003806 <lis2dw12_full_scale_get+0x28>
      *val = LIS2DW12_16g;
 8003816:	2303      	movs	r3, #3
 8003818:	7023      	strb	r3, [r4, #0]
      break;
 800381a:	e7f4      	b.n	8003806 <lis2dw12_full_scale_get+0x28>
      *val = LIS2DW12_2g;
 800381c:	2300      	movs	r3, #0
 800381e:	7023      	strb	r3, [r4, #0]
  return ret;
 8003820:	e7f1      	b.n	8003806 <lis2dw12_full_scale_get+0x28>

08003822 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003822:	b510      	push	{r4, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003828:	2306      	movs	r3, #6
 800382a:	466a      	mov	r2, sp
 800382c:	2128      	movs	r1, #40	; 0x28
 800382e:	f7ff fe67 	bl	8003500 <lis2dw12_read_reg>
  val[0] = (int16_t)buff[1];
 8003832:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003836:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003838:	f89d 3000 	ldrb.w	r3, [sp]
 800383c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003840:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8003842:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003846:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003848:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800384c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003850:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8003852:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003856:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003858:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800385c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003860:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8003862:	b002      	add	sp, #8
 8003864:	bd10      	pop	{r4, pc}

08003866 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003866:	b508      	push	{r3, lr}
 8003868:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800386a:	2301      	movs	r3, #1
 800386c:	210f      	movs	r1, #15
 800386e:	f7ff fe47 	bl	8003500 <lis2dw12_read_reg>

  return ret;
}
 8003872:	bd08      	pop	{r3, pc}

08003874 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003874:	b530      	push	{r4, r5, lr}
 8003876:	b083      	sub	sp, #12
 8003878:	4604      	mov	r4, r0
 800387a:	460d      	mov	r5, r1
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800387c:	2301      	movs	r3, #1
 800387e:	aa01      	add	r2, sp, #4
 8003880:	2121      	movs	r1, #33	; 0x21
 8003882:	f7ff fe3d 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 8003886:	b108      	cbz	r0, 800388c <lis2dw12_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8003888:	b003      	add	sp, #12
 800388a:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 800388c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003890:	f365 0382 	bfi	r3, r5, #2, #1
 8003894:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003898:	2301      	movs	r3, #1
 800389a:	aa01      	add	r2, sp, #4
 800389c:	2121      	movs	r1, #33	; 0x21
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fe33 	bl	800350a <lis2dw12_write_reg>
  return ret;
 80038a4:	e7f0      	b.n	8003888 <lis2dw12_auto_increment_set+0x14>

080038a6 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80038a6:	b530      	push	{r4, r5, lr}
 80038a8:	b083      	sub	sp, #12
 80038aa:	4604      	mov	r4, r0
 80038ac:	460d      	mov	r5, r1
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80038ae:	2301      	movs	r3, #1
 80038b0:	aa01      	add	r2, sp, #4
 80038b2:	212e      	movs	r1, #46	; 0x2e
 80038b4:	f7ff fe24 	bl	8003500 <lis2dw12_read_reg>

  if (ret == 0)
 80038b8:	b108      	cbz	r0, 80038be <lis2dw12_fifo_mode_set+0x18>
    reg.fmode = (uint8_t) val;
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80038ba:	b003      	add	sp, #12
 80038bc:	bd30      	pop	{r4, r5, pc}
    reg.fmode = (uint8_t) val;
 80038be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038c2:	f365 1347 	bfi	r3, r5, #5, #3
 80038c6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80038ca:	2301      	movs	r3, #1
 80038cc:	aa01      	add	r2, sp, #4
 80038ce:	212e      	movs	r1, #46	; 0x2e
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff fe1a 	bl	800350a <lis2dw12_write_reg>
  return ret;
 80038d6:	e7f0      	b.n	80038ba <lis2dw12_fifo_mode_set+0x14>

080038d8 <LIS2MDL_GetCapabilities>:
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80038d8:	2000      	movs	r0, #0
 80038da:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 80038dc:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 80038e2:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 80038e4:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 80038e6:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 80038e8:	2332      	movs	r3, #50	; 0x32
 80038ea:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80038ec:	2300      	movs	r3, #0
 80038ee:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80038f0:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80038f2:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <LIS2MDL_GetCapabilities+0x20>)
 80038f4:	618b      	str	r3, [r1, #24]
  return LIS2MDL_OK;
}
 80038f6:	4770      	bx	lr
 80038f8:	42c80000 	.word	0x42c80000

080038fc <LIS2MDL_MAG_GetSensitivity>:
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80038fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003900:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8003902:	2000      	movs	r0, #0
 8003904:	4770      	bx	lr

08003906 <LIS2MDL_MAG_GetFullScale>:
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 8003906:	2332      	movs	r3, #50	; 0x32
 8003908:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr

0800390e <LIS2MDL_MAG_SetFullScale>:
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 800390e:	2000      	movs	r0, #0
 8003910:	4770      	bx	lr

08003912 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003912:	b510      	push	{r4, lr}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003914:	6884      	ldr	r4, [r0, #8]
 8003916:	b13c      	cbz	r4, 8003928 <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003918:	2c03      	cmp	r4, #3
 800391a:	d00b      	beq.n	8003934 <ReadMagRegWrap+0x22>
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800391c:	6944      	ldr	r4, [r0, #20]
 800391e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003922:	7b00      	ldrb	r0, [r0, #12]
 8003924:	47a0      	blx	r4
  }
}
 8003926:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003928:	6944      	ldr	r4, [r0, #20]
 800392a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800392e:	7b00      	ldrb	r0, [r0, #12]
 8003930:	47a0      	blx	r4
 8003932:	e7f8      	b.n	8003926 <ReadMagRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003934:	6944      	ldr	r4, [r0, #20]
 8003936:	7b00      	ldrb	r0, [r0, #12]
 8003938:	47a0      	blx	r4
 800393a:	e7f4      	b.n	8003926 <ReadMagRegWrap+0x14>

0800393c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800393c:	b510      	push	{r4, lr}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800393e:	6884      	ldr	r4, [r0, #8]
 8003940:	b13c      	cbz	r4, 8003952 <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003942:	2c03      	cmp	r4, #3
 8003944:	d00b      	beq.n	800395e <WriteMagRegWrap+0x22>
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003946:	6904      	ldr	r4, [r0, #16]
 8003948:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800394c:	7b00      	ldrb	r0, [r0, #12]
 800394e:	47a0      	blx	r4
  }
}
 8003950:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003952:	6904      	ldr	r4, [r0, #16]
 8003954:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003958:	7b00      	ldrb	r0, [r0, #12]
 800395a:	47a0      	blx	r4
 800395c:	e7f8      	b.n	8003950 <WriteMagRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800395e:	6904      	ldr	r4, [r0, #16]
 8003960:	7b00      	ldrb	r0, [r0, #12]
 8003962:	47a0      	blx	r4
 8003964:	e7f4      	b.n	8003950 <WriteMagRegWrap+0x14>

08003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003966:	b570      	push	{r4, r5, r6, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	4616      	mov	r6, r2
 800396c:	461d      	mov	r5, r3
 800396e:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t shub_reg_access_dis = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800397e:	233d      	movs	r3, #61	; 0x3d
 8003980:	f88d 3015 	strb.w	r3, [sp, #21]
  uint8_t slv0_add = 0x15U;
  uint8_t slv0_subadd = 0x16U;
  uint8_t slave0_config = 0x17U;
  uint8_t master_config = 0x14U;
  uint8_t write_once_i2c_en = 0x44U;
 8003984:	2344      	movs	r3, #68	; 0x44
 8003986:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t status_master_mainpage = 0x39U;
  uint8_t sens_hub_endop = 0x01U;
  uint8_t lsm6dsox_outx_h_a = 0x29U;
  uint8_t lsm6dsox_status_reg = 0x1EU;
  uint8_t xlda = 0x01U;
  uint8_t len = (uint8_t)Length;
 800398a:	f88d 5013 	strb.w	r5, [sp, #19]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800398e:	f100 0420 	add.w	r4, r0, #32
 8003992:	2301      	movs	r3, #1
 8003994:	f10d 0217 	add.w	r2, sp, #23
 8003998:	4619      	mov	r1, r3
 800399a:	4620      	mov	r0, r4
 800399c:	f000 fbb7 	bl	800410e <lis2mdl_write_reg>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	f040 8081 	bne.w	8003aa8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80039a6:	2301      	movs	r3, #1
 80039a8:	f10d 0215 	add.w	r2, sp, #21
 80039ac:	2115      	movs	r1, #21
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 fbad 	bl	800410e <lis2mdl_write_reg>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d17a      	bne.n	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x148>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80039b8:	2301      	movs	r3, #1
 80039ba:	f10d 0207 	add.w	r2, sp, #7
 80039be:	2116      	movs	r1, #22
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 fba4 	bl	800410e <lis2mdl_write_reg>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d174      	bne.n	8003ab4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x14e>
  {
    return LIS2MDL_ERROR;
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80039ca:	2301      	movs	r3, #1
 80039cc:	f10d 0213 	add.w	r2, sp, #19
 80039d0:	2117      	movs	r1, #23
 80039d2:	4620      	mov	r0, r4
 80039d4:	f000 fb9b 	bl	800410e <lis2mdl_write_reg>
 80039d8:	2800      	cmp	r0, #0
 80039da:	d16e      	bne.n	8003aba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x154>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80039dc:	2301      	movs	r3, #1
 80039de:	aa05      	add	r2, sp, #20
 80039e0:	2114      	movs	r1, #20
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 fb93 	bl	800410e <lis2mdl_write_reg>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d169      	bne.n	8003ac0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x15a>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80039ec:	2301      	movs	r3, #1
 80039ee:	f10d 0216 	add.w	r2, sp, #22
 80039f2:	4619      	mov	r1, r3
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 fb8a 	bl	800410e <lis2mdl_write_reg>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d163      	bne.n	8003ac6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x160>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80039fe:	2301      	movs	r3, #1
 8003a00:	f10d 0212 	add.w	r2, sp, #18
 8003a04:	2110      	movs	r1, #16
 8003a06:	4620      	mov	r0, r4
 8003a08:	f000 fb7c 	bl	8004104 <lis2mdl_read_reg>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d15d      	bne.n	8003acc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x166>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003a10:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003a14:	b913      	cbnz	r3, 8003a1c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xb6>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003a16:	2340      	movs	r3, #64	; 0x40
 8003a18:	f88d 3012 	strb.w	r3, [sp, #18]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f10d 0212 	add.w	r2, sp, #18
 8003a22:	2110      	movs	r1, #16
 8003a24:	4620      	mov	r0, r4
 8003a26:	f000 fb72 	bl	800410e <lis2mdl_write_reg>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d151      	bne.n	8003ad2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x16c>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003a2e:	2306      	movs	r3, #6
 8003a30:	aa02      	add	r2, sp, #8
 8003a32:	2129      	movs	r1, #41	; 0x29
 8003a34:	4620      	mov	r0, r4
 8003a36:	f000 fb65 	bl	8004104 <lis2mdl_read_reg>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d14c      	bne.n	8003ad8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f10d 0211 	add.w	r2, sp, #17
 8003a44:	211e      	movs	r1, #30
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 fb5c 	bl	8004104 <lis2mdl_read_reg>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d146      	bne.n	8003ade <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x178>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 8003a50:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8003a54:	f011 0f01 	tst.w	r1, #1
 8003a58:	d0f1      	beq.n	8003a3e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xd8>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f10d 0211 	add.w	r2, sp, #17
 8003a60:	2139      	movs	r1, #57	; 0x39
 8003a62:	4620      	mov	r0, r4
 8003a64:	f000 fb4e 	bl	8004104 <lis2mdl_read_reg>
 8003a68:	bbe8      	cbnz	r0, 8003ae6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x180>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003a6a:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8003a6e:	f011 0f01 	tst.w	r1, #1
 8003a72:	d0f2      	beq.n	8003a5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xf4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003a74:	2301      	movs	r3, #1
 8003a76:	f10d 0217 	add.w	r2, sp, #23
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f000 fb46 	bl	800410e <lis2mdl_write_reg>
 8003a82:	bb98      	cbnz	r0, 8003aec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x186>
  {
    return LIS2MDL_ERROR;
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003a84:	462b      	mov	r3, r5
 8003a86:	4632      	mov	r2, r6
 8003a88:	2102      	movs	r1, #2
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 fb3a 	bl	8004104 <lis2mdl_read_reg>
 8003a90:	bb78      	cbnz	r0, 8003af2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x18c>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003a92:	2301      	movs	r3, #1
 8003a94:	f10d 0216 	add.w	r2, sp, #22
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 fb37 	bl	800410e <lis2mdl_write_reg>
 8003aa0:	b1f8      	cbz	r0, 8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
  {
    return LIS2MDL_ERROR;
 8003aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa6:	e01c      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	e019      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	e016      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	e013      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295
 8003abe:	e010      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e00d      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aca:	e00a      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e007      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e004      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	e001      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
      return LIS2MDL_ERROR;
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return LIS2MDL_OK;
}
 8003ae2:	b006      	add	sp, #24
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
      return LIS2MDL_ERROR;
 8003ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aea:	e7fa      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	e7f7      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>
    return LIS2MDL_ERROR;
 8003af2:	f04f 30ff 	mov.w	r0, #4294967295
 8003af6:	e7f4      	b.n	8003ae2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x17c>

08003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003af8:	b530      	push	{r4, r5, lr}
 8003afa:	b087      	sub	sp, #28
 8003afc:	4615      	mov	r5, r2
 8003afe:	f88d 1007 	strb.w	r1, [sp, #7]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
  uint8_t shub_reg_access_en = 0x40U;
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t shub_reg_access_dis = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003b0e:	223c      	movs	r2, #60	; 0x3c
 8003b10:	f88d 2015 	strb.w	r2, [sp, #21]
  uint8_t slv0_add = 0x15U;
  uint8_t slv0_subadd = 0x16U;
  uint8_t slave0_config = 0x17U;
  uint8_t shub_odr_104 = 0x00U;
 8003b14:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t master_config = 0x14U;
  uint8_t write_once_i2c_en = 0x44U;
 8003b18:	2344      	movs	r3, #68	; 0x44
 8003b1a:	f88d 3013 	strb.w	r3, [sp, #19]
  uint8_t datawrite_slv0 = 0x0EU;
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003b1e:	f100 0420 	add.w	r4, r0, #32
 8003b22:	2301      	movs	r3, #1
 8003b24:	f10d 0217 	add.w	r2, sp, #23
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 faef 	bl	800410e <lis2mdl_write_reg>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d16c      	bne.n	8003c0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x116>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003b34:	2301      	movs	r3, #1
 8003b36:	f10d 0215 	add.w	r2, sp, #21
 8003b3a:	2115      	movs	r1, #21
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f000 fae6 	bl	800410e <lis2mdl_write_reg>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d166      	bne.n	8003c14 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11c>
  {
    return LIS2MDL_ERROR;
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003b46:	2301      	movs	r3, #1
 8003b48:	f10d 0207 	add.w	r2, sp, #7
 8003b4c:	2116      	movs	r1, #22
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 fadd 	bl	800410e <lis2mdl_write_reg>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d160      	bne.n	8003c1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x122>
  {
    return LIS2MDL_ERROR;
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003b58:	2301      	movs	r3, #1
 8003b5a:	aa05      	add	r2, sp, #20
 8003b5c:	2117      	movs	r1, #23
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f000 fad5 	bl	800410e <lis2mdl_write_reg>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d15b      	bne.n	8003c20 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x128>
  {
    return LIS2MDL_ERROR;
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003b68:	2301      	movs	r3, #1
 8003b6a:	462a      	mov	r2, r5
 8003b6c:	210e      	movs	r1, #14
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 facd 	bl	800410e <lis2mdl_write_reg>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d156      	bne.n	8003c26 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x12e>
  {
    return LIS2MDL_ERROR;
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f10d 0213 	add.w	r2, sp, #19
 8003b7e:	2114      	movs	r1, #20
 8003b80:	4620      	mov	r0, r4
 8003b82:	f000 fac4 	bl	800410e <lis2mdl_write_reg>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d150      	bne.n	8003c2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x134>
  {
    return LIS2MDL_ERROR;
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f10d 0216 	add.w	r2, sp, #22
 8003b90:	4619      	mov	r1, r3
 8003b92:	4620      	mov	r0, r4
 8003b94:	f000 fabb 	bl	800410e <lis2mdl_write_reg>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d14a      	bne.n	8003c32 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13a>
  {
    return LIS2MDL_ERROR;
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f10d 0212 	add.w	r2, sp, #18
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 faad 	bl	8004104 <lis2mdl_read_reg>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d144      	bne.n	8003c38 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x140>
  {
    return LIS2MDL_ERROR;
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003bae:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003bb2:	b913      	cbnz	r3, 8003bba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc2>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003bb4:	2340      	movs	r3, #64	; 0x40
 8003bb6:	f88d 3012 	strb.w	r3, [sp, #18]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f10d 0212 	add.w	r2, sp, #18
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 faa3 	bl	800410e <lis2mdl_write_reg>
 8003bc8:	bbc8      	cbnz	r0, 8003c3e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x146>
  {
    return LIS2MDL_ERROR;
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003bca:	2306      	movs	r3, #6
 8003bcc:	aa02      	add	r2, sp, #8
 8003bce:	2129      	movs	r1, #41	; 0x29
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 fa97 	bl	8004104 <lis2mdl_read_reg>
 8003bd6:	bba8      	cbnz	r0, 8003c44 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x14c>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f10d 0211 	add.w	r2, sp, #17
 8003bde:	211e      	movs	r1, #30
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 fa8f 	bl	8004104 <lis2mdl_read_reg>
 8003be6:	bb80      	cbnz	r0, 8003c4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x152>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & xlda) != xlda);
 8003be8:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003bec:	f013 0f01 	tst.w	r3, #1
 8003bf0:	d0f2      	beq.n	8003bd8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f10d 0211 	add.w	r2, sp, #17
 8003bf8:	2139      	movs	r1, #57	; 0x39
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 fa82 	bl	8004104 <lis2mdl_read_reg>
 8003c00:	4602      	mov	r2, r0
 8003c02:	bb38      	cbnz	r0, 8003c54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15c>
    {
      return LIS2MDL_ERROR;
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003c04:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	daf2      	bge.n	8003bf2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xfa>
 8003c0c:	e01f      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c12:	e01c      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	e019      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1e:	e016      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	e013      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c26:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2a:	e010      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	e00d      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	e00a      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	e007      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c42:	e004      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
    return LIS2MDL_ERROR;
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	e001      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>
      return LIS2MDL_ERROR;
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295

  return LIS2MDL_OK;
}
 8003c4e:	4610      	mov	r0, r2
 8003c50:	b007      	add	sp, #28
 8003c52:	bd30      	pop	{r4, r5, pc}
      return LIS2MDL_ERROR;
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	e7f9      	b.n	8003c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x156>

08003c5a <LIS2MDL_Init>:
{
 8003c5a:	b530      	push	{r4, r5, lr}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c60:	6883      	ldr	r3, [r0, #8]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d01f      	beq.n	8003ca6 <LIS2MDL_Init+0x4c>
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003c66:	f100 0520 	add.w	r5, r0, #32
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f000 faa7 	bl	80041c0 <lis2mdl_block_data_update_set>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d156      	bne.n	8003d24 <LIS2MDL_Init+0xca>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003c76:	2102      	movs	r1, #2
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f000 fa4d 	bl	8004118 <lis2mdl_operating_mode_set>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d153      	bne.n	8003d2a <LIS2MDL_Init+0xd0>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003c82:	2103      	movs	r1, #3
 8003c84:	4628      	mov	r0, r5
 8003c86:	f000 fa60 	bl	800414a <lis2mdl_data_rate_set>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d150      	bne.n	8003d30 <LIS2MDL_Init+0xd6>
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4628      	mov	r0, r5
 8003c92:	f000 fad7 	bl	8004244 <lis2mdl_self_test_set>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d14d      	bne.n	8003d36 <LIS2MDL_Init+0xdc>
  pObj->is_initialized = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return LIS2MDL_OK;
 8003ca0:	2000      	movs	r0, #0
}
 8003ca2:	b003      	add	sp, #12
 8003ca4:	bd30      	pop	{r4, r5, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	466a      	mov	r2, sp
 8003caa:	2162      	movs	r1, #98	; 0x62
 8003cac:	f7ff fe5b 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003cb0:	bb78      	cbnz	r0, 8003d12 <LIS2MDL_Init+0xb8>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	aa01      	add	r2, sp, #4
 8003cb6:	2160      	movs	r1, #96	; 0x60
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fe54 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003cbe:	bb58      	cbnz	r0, 8003d18 <LIS2MDL_Init+0xbe>
    reg_c.bdu = PROPERTY_ENABLE;
 8003cc0:	f89d 3000 	ldrb.w	r3, [sp]
 8003cc4:	f043 0310 	orr.w	r3, r3, #16
 8003cc8:	f88d 3000 	strb.w	r3, [sp]
    reg_c.self_test = PROPERTY_DISABLE;
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f36f 0341 	bfc	r3, #1, #1
 8003cd2:	f88d 3000 	strb.w	r3, [sp]
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003cd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f362 0301 	bfi	r3, r2, #0, #2
 8003ce0:	f88d 3004 	strb.w	r3, [sp, #4]
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 030c 	orr.w	r3, r3, #12
 8003cea:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003cee:	2301      	movs	r3, #1
 8003cf0:	466a      	mov	r2, sp
 8003cf2:	2162      	movs	r1, #98	; 0x62
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff feff 	bl	8003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003cfa:	b980      	cbnz	r0, 8003d1e <LIS2MDL_Init+0xc4>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	aa01      	add	r2, sp, #4
 8003d00:	2160      	movs	r1, #96	; 0x60
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7ff fef8 	bl	8003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d0c6      	beq.n	8003c9a <LIS2MDL_Init+0x40>
      return LIS2MDL_ERROR;
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e7c7      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d12:	f04f 30ff 	mov.w	r0, #4294967295
 8003d16:	e7c4      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	e7c1      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	e7be      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	e7bb      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	e7b8      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	e7b5      	b.n	8003ca2 <LIS2MDL_Init+0x48>
      return LIS2MDL_ERROR;
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	e7b2      	b.n	8003ca2 <LIS2MDL_Init+0x48>

08003d3c <LIS2MDL_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8003d3c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d027      	beq.n	8003d94 <LIS2MDL_MAG_Enable+0x58>
{
 8003d44:	b510      	push	{r4, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d4a:	6883      	ldr	r3, [r0, #8]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d00a      	beq.n	8003d66 <LIS2MDL_MAG_Enable+0x2a>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003d50:	2100      	movs	r1, #0
 8003d52:	3020      	adds	r0, #32
 8003d54:	f000 f9e0 	bl	8004118 <lis2mdl_operating_mode_set>
 8003d58:	bb08      	cbnz	r0, 8003d9e <LIS2MDL_MAG_Enable+0x62>
  pObj->mag_is_enabled = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return LIS2MDL_OK;
 8003d60:	2000      	movs	r0, #0
}
 8003d62:	b002      	add	sp, #8
 8003d64:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d66:	2301      	movs	r3, #1
 8003d68:	aa01      	add	r2, sp, #4
 8003d6a:	2160      	movs	r1, #96	; 0x60
 8003d6c:	f7ff fdfb 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d70:	b990      	cbnz	r0, 8003d98 <LIS2MDL_MAG_Enable+0x5c>
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003d72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003d76:	f36f 0301 	bfc	r3, #0, #2
 8003d7a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d7e:	2301      	movs	r3, #1
 8003d80:	aa01      	add	r2, sp, #4
 8003d82:	2160      	movs	r1, #96	; 0x60
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7ff feb7 	bl	8003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d0e5      	beq.n	8003d5a <LIS2MDL_MAG_Enable+0x1e>
      return LIS2MDL_ERROR;
 8003d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d92:	e7e6      	b.n	8003d62 <LIS2MDL_MAG_Enable+0x26>
    return LIS2MDL_OK;
 8003d94:	2000      	movs	r0, #0
}
 8003d96:	4770      	bx	lr
      return LIS2MDL_ERROR;
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	e7e1      	b.n	8003d62 <LIS2MDL_MAG_Enable+0x26>
      return LIS2MDL_ERROR;
 8003d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003da2:	e7de      	b.n	8003d62 <LIS2MDL_MAG_Enable+0x26>

08003da4 <LIS2MDL_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8003da4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003da8:	b33b      	cbz	r3, 8003dfa <LIS2MDL_MAG_Disable+0x56>
{
 8003daa:	b510      	push	{r4, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	4604      	mov	r4, r0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003db0:	6883      	ldr	r3, [r0, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d009      	beq.n	8003dca <LIS2MDL_MAG_Disable+0x26>
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003db6:	2102      	movs	r1, #2
 8003db8:	3020      	adds	r0, #32
 8003dba:	f000 f9ad 	bl	8004118 <lis2mdl_operating_mode_set>
 8003dbe:	bb08      	cbnz	r0, 8003e04 <LIS2MDL_MAG_Disable+0x60>
  pObj->mag_is_enabled = 0;
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd10      	pop	{r4, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003dca:	2301      	movs	r3, #1
 8003dcc:	aa01      	add	r2, sp, #4
 8003dce:	2160      	movs	r1, #96	; 0x60
 8003dd0:	f7ff fdc9 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003dd4:	b998      	cbnz	r0, 8003dfe <LIS2MDL_MAG_Disable+0x5a>
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003dd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f362 0301 	bfi	r3, r2, #0, #2
 8003de0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003de4:	2301      	movs	r3, #1
 8003de6:	aa01      	add	r2, sp, #4
 8003de8:	2160      	movs	r1, #96	; 0x60
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7ff fe84 	bl	8003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d0e5      	beq.n	8003dc0 <LIS2MDL_MAG_Disable+0x1c>
      return LIS2MDL_ERROR;
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	e7e5      	b.n	8003dc6 <LIS2MDL_MAG_Disable+0x22>
    return LIS2MDL_OK;
 8003dfa:	2000      	movs	r0, #0
}
 8003dfc:	4770      	bx	lr
      return LIS2MDL_ERROR;
 8003dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003e02:	e7e0      	b.n	8003dc6 <LIS2MDL_MAG_Disable+0x22>
      return LIS2MDL_ERROR;
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	e7dd      	b.n	8003dc6 <LIS2MDL_MAG_Disable+0x22>

08003e0a <LIS2MDL_DeInit>:
{
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	4604      	mov	r4, r0
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003e0e:	f7ff ffc9 	bl	8003da4 <LIS2MDL_MAG_Disable>
 8003e12:	b910      	cbnz	r0, 8003e1a <LIS2MDL_DeInit+0x10>
  pObj->is_initialized = 0;
 8003e14:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8003e18:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8003e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1e:	e7fb      	b.n	8003e18 <LIS2MDL_DeInit+0xe>

08003e20 <LIS2MDL_MAG_SetOutputDataRate>:
{
 8003e20:	b530      	push	{r4, r5, lr}
 8003e22:	b083      	sub	sp, #12
 8003e24:	4604      	mov	r4, r0
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003e26:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003e2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	d90f      	bls.n	8003e54 <LIS2MDL_MAG_SetOutputDataRate+0x34>
 8003e34:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003e38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e40:	d914      	bls.n	8003e6c <LIS2MDL_MAG_SetOutputDataRate+0x4c>
 8003e42:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003eb0 <LIS2MDL_MAG_SetOutputDataRate+0x90>
 8003e46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4e:	d80f      	bhi.n	8003e70 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003e50:	2502      	movs	r5, #2
 8003e52:	e000      	b.n	8003e56 <LIS2MDL_MAG_SetOutputDataRate+0x36>
 8003e54:	2500      	movs	r5, #0
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e56:	68a3      	ldr	r3, [r4, #8]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d00b      	beq.n	8003e74 <LIS2MDL_MAG_SetOutputDataRate+0x54>
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f104 0020 	add.w	r0, r4, #32
 8003e62:	f000 f972 	bl	800414a <lis2mdl_data_rate_set>
 8003e66:	bb00      	cbnz	r0, 8003eaa <LIS2MDL_MAG_SetOutputDataRate+0x8a>
}
 8003e68:	b003      	add	sp, #12
 8003e6a:	bd30      	pop	{r4, r5, pc}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003e6c:	2501      	movs	r5, #1
 8003e6e:	e7f2      	b.n	8003e56 <LIS2MDL_MAG_SetOutputDataRate+0x36>
 8003e70:	2503      	movs	r5, #3
 8003e72:	e7f0      	b.n	8003e56 <LIS2MDL_MAG_SetOutputDataRate+0x36>
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003e74:	2301      	movs	r3, #1
 8003e76:	aa01      	add	r2, sp, #4
 8003e78:	2160      	movs	r1, #96	; 0x60
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff fd73 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003e80:	b980      	cbnz	r0, 8003ea4 <LIS2MDL_MAG_SetOutputDataRate+0x84>
    reg_a.odr = new_odr;
 8003e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e86:	f365 0383 	bfi	r3, r5, #2, #2
 8003e8a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003e8e:	2301      	movs	r3, #1
 8003e90:	aa01      	add	r2, sp, #4
 8003e92:	2160      	movs	r1, #96	; 0x60
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff fe2f 	bl	8003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d0e4      	beq.n	8003e68 <LIS2MDL_MAG_SetOutputDataRate+0x48>
      return LIS2MDL_ERROR;
 8003e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea2:	e7e1      	b.n	8003e68 <LIS2MDL_MAG_SetOutputDataRate+0x48>
      return LIS2MDL_ERROR;
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e7de      	b.n	8003e68 <LIS2MDL_MAG_SetOutputDataRate+0x48>
      return LIS2MDL_ERROR;
 8003eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003eae:	e7db      	b.n	8003e68 <LIS2MDL_MAG_SetOutputDataRate+0x48>
 8003eb0:	42480000 	.word	0x42480000

08003eb4 <LIS2MDL_ReadID>:
{
 8003eb4:	b508      	push	{r3, lr}
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003eb6:	6883      	ldr	r3, [r0, #8]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d006      	beq.n	8003eca <LIS2MDL_ReadID+0x16>
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003ebc:	3020      	adds	r0, #32
 8003ebe:	f000 f9ba 	bl	8004236 <lis2mdl_device_id_get>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	b960      	cbnz	r0, 8003ee0 <LIS2MDL_ReadID+0x2c>
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	bd08      	pop	{r3, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003eca:	2301      	movs	r3, #1
 8003ecc:	460a      	mov	r2, r1
 8003ece:	214f      	movs	r1, #79	; 0x4f
 8003ed0:	f7ff fd49 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d0f5      	beq.n	8003ec6 <LIS2MDL_ReadID+0x12>
      return LIS2MDL_ERROR;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e7f2      	b.n	8003ec6 <LIS2MDL_ReadID+0x12>
      return LIS2MDL_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	e7ef      	b.n	8003ec6 <LIS2MDL_ReadID+0x12>
	...

08003ee8 <LIS2MDL_MAG_GetOutputDataRate>:
{
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003eee:	f10d 0107 	add.w	r1, sp, #7
 8003ef2:	3020      	adds	r0, #32
 8003ef4:	f000 f942 	bl	800417c <lis2mdl_data_rate_get>
 8003ef8:	b9a0      	cbnz	r0, 8003f24 <LIS2MDL_MAG_GetOutputDataRate+0x3c>
  switch (odr_low_level)
 8003efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d813      	bhi.n	8003f2a <LIS2MDL_MAG_GetOutputDataRate+0x42>
 8003f02:	e8df f003 	tbb	[pc, r3]
 8003f06:	0602      	.short	0x0602
 8003f08:	0c09      	.short	0x0c09
      *Odr = 10.0f;
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 8003f0c:	6023      	str	r3, [r4, #0]
}
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <LIS2MDL_MAG_GetOutputDataRate+0x4c>)
 8003f14:	6023      	str	r3, [r4, #0]
      break;
 8003f16:	e7fa      	b.n	8003f0e <LIS2MDL_MAG_GetOutputDataRate+0x26>
      *Odr = 50.0f;
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <LIS2MDL_MAG_GetOutputDataRate+0x50>)
 8003f1a:	6023      	str	r3, [r4, #0]
      break;
 8003f1c:	e7f7      	b.n	8003f0e <LIS2MDL_MAG_GetOutputDataRate+0x26>
      *Odr = 100.0f;
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <LIS2MDL_MAG_GetOutputDataRate+0x54>)
 8003f20:	6023      	str	r3, [r4, #0]
      break;
 8003f22:	e7f4      	b.n	8003f0e <LIS2MDL_MAG_GetOutputDataRate+0x26>
    return LIS2MDL_ERROR;
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	e7f1      	b.n	8003f0e <LIS2MDL_MAG_GetOutputDataRate+0x26>
  switch (odr_low_level)
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2e:	e7ee      	b.n	8003f0e <LIS2MDL_MAG_GetOutputDataRate+0x26>
 8003f30:	41200000 	.word	0x41200000
 8003f34:	41a00000 	.word	0x41a00000
 8003f38:	42480000 	.word	0x42480000
 8003f3c:	42c80000 	.word	0x42c80000

08003f40 <LIS2MDL_MAG_GetAxesRaw>:
{
 8003f40:	b510      	push	{r4, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	460c      	mov	r4, r1
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003f46:	4669      	mov	r1, sp
 8003f48:	3020      	adds	r0, #32
 8003f4a:	f000 f952 	bl	80041f2 <lis2mdl_magnetic_raw_get>
 8003f4e:	b950      	cbnz	r0, 8003f66 <LIS2MDL_MAG_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8003f50:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003f54:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003f56:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003f5a:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003f5c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003f60:	80a3      	strh	r3, [r4, #4]
}
 8003f62:	b002      	add	sp, #8
 8003f64:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	e7fa      	b.n	8003f62 <LIS2MDL_MAG_GetAxesRaw+0x22>

08003f6c <LIS2MDL_MAG_GetAxes>:
{
 8003f6c:	b530      	push	{r4, r5, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	4604      	mov	r4, r0
 8003f72:	460d      	mov	r5, r1
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f74:	6883      	ldr	r3, [r0, #8]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d032      	beq.n	8003fe0 <LIS2MDL_MAG_GetAxes+0x74>
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003f7a:	a902      	add	r1, sp, #8
 8003f7c:	3020      	adds	r0, #32
 8003f7e:	f000 f938 	bl	80041f2 <lis2mdl_magnetic_raw_get>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d154      	bne.n	8004030 <LIS2MDL_MAG_GetAxes+0xc4>
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003f86:	a901      	add	r1, sp, #4
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff fcb7 	bl	80038fc <LIS2MDL_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003f8e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003f92:	ee07 3a10 	vmov	s14, r3
 8003f96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f9a:	eddd 7a01 	vldr	s15, [sp, #4]
 8003f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fa2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003fa6:	ed85 7a00 	vstr	s14, [r5]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003faa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003fae:	ee07 3a10 	vmov	s14, r3
 8003fb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003fbe:	ed85 7a01 	vstr	s14, [r5, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003fc2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003fc6:	ee07 3a10 	vmov	s14, r3
 8003fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fd6:	edc5 7a02 	vstr	s15, [r5, #8]
  return LIS2MDL_OK;
 8003fda:	2000      	movs	r0, #0
}
 8003fdc:	b007      	add	sp, #28
 8003fde:	bd30      	pop	{r4, r5, pc}
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003fe0:	2306      	movs	r3, #6
 8003fe2:	aa04      	add	r2, sp, #16
 8003fe4:	2168      	movs	r1, #104	; 0x68
 8003fe6:	f7ff fcbe 	bl	8003966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fea:	b9f0      	cbnz	r0, 800402a <LIS2MDL_MAG_GetAxes+0xbe>
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003fec:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003ff0:	f8ad 2008 	strh.w	r2, [sp, #8]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003ff4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003ff8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ffc:	f8ad 3008 	strh.w	r3, [sp, #8]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004000:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004004:	f8ad 200a 	strh.w	r2, [sp, #10]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004008:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800400c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004010:	f8ad 300a 	strh.w	r3, [sp, #10]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004014:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004018:	f8ad 200c 	strh.w	r2, [sp, #12]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800401c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004020:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004024:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004028:	e7ad      	b.n	8003f86 <LIS2MDL_MAG_GetAxes+0x1a>
      return LIS2MDL_ERROR;
 800402a:	f04f 30ff 	mov.w	r0, #4294967295
 800402e:	e7d5      	b.n	8003fdc <LIS2MDL_MAG_GetAxes+0x70>
      return LIS2MDL_ERROR;
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	e7d2      	b.n	8003fdc <LIS2MDL_MAG_GetAxes+0x70>

08004036 <LIS2MDL_Write_Reg>:
{
 8004036:	b500      	push	{lr}
 8004038:	b083      	sub	sp, #12
 800403a:	f88d 2007 	strb.w	r2, [sp, #7]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800403e:	6883      	ldr	r3, [r0, #8]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d00b      	beq.n	800405c <LIS2MDL_Write_Reg+0x26>
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004044:	2301      	movs	r3, #1
 8004046:	f10d 0207 	add.w	r2, sp, #7
 800404a:	3020      	adds	r0, #32
 800404c:	f000 f85f 	bl	800410e <lis2mdl_write_reg>
 8004050:	4603      	mov	r3, r0
 8004052:	b970      	cbnz	r0, 8004072 <LIS2MDL_Write_Reg+0x3c>
}
 8004054:	4618      	mov	r0, r3
 8004056:	b003      	add	sp, #12
 8004058:	f85d fb04 	ldr.w	pc, [sp], #4
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800405c:	2301      	movs	r3, #1
 800405e:	f10d 0207 	add.w	r2, sp, #7
 8004062:	f7ff fd49 	bl	8003af8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004066:	4603      	mov	r3, r0
 8004068:	2800      	cmp	r0, #0
 800406a:	d0f3      	beq.n	8004054 <LIS2MDL_Write_Reg+0x1e>
      return LIS2MDL_ERROR;
 800406c:	f04f 33ff 	mov.w	r3, #4294967295
 8004070:	e7f0      	b.n	8004054 <LIS2MDL_Write_Reg+0x1e>
      return LIS2MDL_ERROR;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	e7ed      	b.n	8004054 <LIS2MDL_Write_Reg+0x1e>

08004078 <LIS2MDL_RegisterBusIO>:
  if (pObj == NULL)
 8004078:	2800      	cmp	r0, #0
 800407a:	d033      	beq.n	80040e4 <LIS2MDL_RegisterBusIO+0x6c>
{
 800407c:	b510      	push	{r4, lr}
 800407e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8004080:	680b      	ldr	r3, [r1, #0]
 8004082:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004084:	684a      	ldr	r2, [r1, #4]
 8004086:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004088:	688a      	ldr	r2, [r1, #8]
 800408a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800408c:	7b0a      	ldrb	r2, [r1, #12]
 800408e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004090:	690a      	ldr	r2, [r1, #16]
 8004092:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004094:	694a      	ldr	r2, [r1, #20]
 8004096:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004098:	698a      	ldr	r2, [r1, #24]
 800409a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800409c:	4a17      	ldr	r2, [pc, #92]	; (80040fc <LIS2MDL_RegisterBusIO+0x84>)
 800409e:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80040a0:	4a17      	ldr	r2, [pc, #92]	; (8004100 <LIS2MDL_RegisterBusIO+0x88>)
 80040a2:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80040a4:	69ca      	ldr	r2, [r1, #28]
 80040a6:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80040a8:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 80040aa:	b1f3      	cbz	r3, 80040ea <LIS2MDL_RegisterBusIO+0x72>
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80040ac:	4798      	blx	r3
 80040ae:	b9f8      	cbnz	r0, 80040f0 <LIS2MDL_RegisterBusIO+0x78>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80040b0:	68a3      	ldr	r3, [r4, #8]
 80040b2:	b163      	cbz	r3, 80040ce <LIS2MDL_RegisterBusIO+0x56>
        if (pObj->is_initialized == 0U)
 80040b4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80040b8:	b94a      	cbnz	r2, 80040ce <LIS2MDL_RegisterBusIO+0x56>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d008      	beq.n	80040d0 <LIS2MDL_RegisterBusIO+0x58>
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d005      	beq.n	80040ce <LIS2MDL_RegisterBusIO+0x56>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80040c2:	2101      	movs	r1, #1
 80040c4:	f104 0020 	add.w	r0, r4, #32
 80040c8:	f000 f8d5 	bl	8004276 <lis2mdl_i2c_interface_set>
 80040cc:	b998      	cbnz	r0, 80040f6 <LIS2MDL_RegisterBusIO+0x7e>
}
 80040ce:	bd10      	pop	{r4, pc}
            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80040d0:	2234      	movs	r2, #52	; 0x34
 80040d2:	2162      	movs	r1, #98	; 0x62
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7ff ffae 	bl	8004036 <LIS2MDL_Write_Reg>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d0f7      	beq.n	80040ce <LIS2MDL_RegisterBusIO+0x56>
              return LIS2MDL_ERROR;
 80040de:	f04f 30ff 	mov.w	r0, #4294967295
 80040e2:	e7f4      	b.n	80040ce <LIS2MDL_RegisterBusIO+0x56>
    ret = LIS2MDL_ERROR;
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80040e8:	4770      	bx	lr
      ret = LIS2MDL_ERROR;
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295
 80040ee:	e7ee      	b.n	80040ce <LIS2MDL_RegisterBusIO+0x56>
      ret = LIS2MDL_ERROR;
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e7eb      	b.n	80040ce <LIS2MDL_RegisterBusIO+0x56>
              return LIS2MDL_ERROR;
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	e7e8      	b.n	80040ce <LIS2MDL_RegisterBusIO+0x56>
 80040fc:	08003913 	.word	0x08003913
 8004100:	0800393d 	.word	0x0800393d

08004104 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004104:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004106:	6844      	ldr	r4, [r0, #4]
 8004108:	68c0      	ldr	r0, [r0, #12]
 800410a:	47a0      	blx	r4

  return ret;
}
 800410c:	bd10      	pop	{r4, pc}

0800410e <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800410e:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004110:	6804      	ldr	r4, [r0, #0]
 8004112:	68c0      	ldr	r0, [r0, #12]
 8004114:	47a0      	blx	r4

  return ret;
}
 8004116:	bd10      	pop	{r4, pc}

08004118 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004118:	b530      	push	{r4, r5, lr}
 800411a:	b083      	sub	sp, #12
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004120:	2301      	movs	r3, #1
 8004122:	aa01      	add	r2, sp, #4
 8004124:	2160      	movs	r1, #96	; 0x60
 8004126:	f7ff ffed 	bl	8004104 <lis2mdl_read_reg>

  if (ret == 0)
 800412a:	b108      	cbz	r0, 8004130 <lis2mdl_operating_mode_set+0x18>
    reg.md = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800412c:	b003      	add	sp, #12
 800412e:	bd30      	pop	{r4, r5, pc}
    reg.md = (uint8_t)val;
 8004130:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004134:	f365 0301 	bfi	r3, r5, #0, #2
 8004138:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800413c:	2301      	movs	r3, #1
 800413e:	aa01      	add	r2, sp, #4
 8004140:	2160      	movs	r1, #96	; 0x60
 8004142:	4620      	mov	r0, r4
 8004144:	f7ff ffe3 	bl	800410e <lis2mdl_write_reg>
  return ret;
 8004148:	e7f0      	b.n	800412c <lis2mdl_operating_mode_set+0x14>

0800414a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800414a:	b530      	push	{r4, r5, lr}
 800414c:	b083      	sub	sp, #12
 800414e:	4604      	mov	r4, r0
 8004150:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004152:	2301      	movs	r3, #1
 8004154:	aa01      	add	r2, sp, #4
 8004156:	2160      	movs	r1, #96	; 0x60
 8004158:	f7ff ffd4 	bl	8004104 <lis2mdl_read_reg>

  if (ret == 0)
 800415c:	b108      	cbz	r0, 8004162 <lis2mdl_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800415e:	b003      	add	sp, #12
 8004160:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 8004162:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004166:	f365 0383 	bfi	r3, r5, #2, #2
 800416a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800416e:	2301      	movs	r3, #1
 8004170:	aa01      	add	r2, sp, #4
 8004172:	2160      	movs	r1, #96	; 0x60
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff ffca 	bl	800410e <lis2mdl_write_reg>
  return ret;
 800417a:	e7f0      	b.n	800415e <lis2mdl_data_rate_set+0x14>

0800417c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800417c:	b510      	push	{r4, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	460c      	mov	r4, r1
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004182:	2301      	movs	r3, #1
 8004184:	aa01      	add	r2, sp, #4
 8004186:	2160      	movs	r1, #96	; 0x60
 8004188:	f7ff ffbc 	bl	8004104 <lis2mdl_read_reg>

  switch (reg.odr)
 800418c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004190:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004194:	2b03      	cmp	r3, #3
 8004196:	d810      	bhi.n	80041ba <lis2mdl_data_rate_get+0x3e>
 8004198:	e8df f003 	tbb	[pc, r3]
 800419c:	0c090602 	.word	0x0c090602
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80041a0:	2300      	movs	r3, #0
 80041a2:	7023      	strb	r3, [r4, #0]
      *val = LIS2MDL_ODR_10Hz;
      break;
  }

  return ret;
}
 80041a4:	b002      	add	sp, #8
 80041a6:	bd10      	pop	{r4, pc}
      *val = LIS2MDL_ODR_20Hz;
 80041a8:	2301      	movs	r3, #1
 80041aa:	7023      	strb	r3, [r4, #0]
      break;
 80041ac:	e7fa      	b.n	80041a4 <lis2mdl_data_rate_get+0x28>
      *val = LIS2MDL_ODR_50Hz;
 80041ae:	2302      	movs	r3, #2
 80041b0:	7023      	strb	r3, [r4, #0]
      break;
 80041b2:	e7f7      	b.n	80041a4 <lis2mdl_data_rate_get+0x28>
      *val = LIS2MDL_ODR_100Hz;
 80041b4:	2303      	movs	r3, #3
 80041b6:	7023      	strb	r3, [r4, #0]
      break;
 80041b8:	e7f4      	b.n	80041a4 <lis2mdl_data_rate_get+0x28>
      *val = LIS2MDL_ODR_10Hz;
 80041ba:	2300      	movs	r3, #0
 80041bc:	7023      	strb	r3, [r4, #0]
  return ret;
 80041be:	e7f1      	b.n	80041a4 <lis2mdl_data_rate_get+0x28>

080041c0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041c0:	b530      	push	{r4, r5, lr}
 80041c2:	b083      	sub	sp, #12
 80041c4:	4604      	mov	r4, r0
 80041c6:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041c8:	2301      	movs	r3, #1
 80041ca:	aa01      	add	r2, sp, #4
 80041cc:	2162      	movs	r1, #98	; 0x62
 80041ce:	f7ff ff99 	bl	8004104 <lis2mdl_read_reg>

  if (ret == 0)
 80041d2:	b108      	cbz	r0, 80041d8 <lis2mdl_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80041d4:	b003      	add	sp, #12
 80041d6:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80041d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041dc:	f365 1304 	bfi	r3, r5, #4, #1
 80041e0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041e4:	2301      	movs	r3, #1
 80041e6:	aa01      	add	r2, sp, #4
 80041e8:	2162      	movs	r1, #98	; 0x62
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7ff ff8f 	bl	800410e <lis2mdl_write_reg>
  return ret;
 80041f0:	e7f0      	b.n	80041d4 <lis2mdl_block_data_update_set+0x14>

080041f2 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80041f2:	b510      	push	{r4, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80041f8:	2306      	movs	r3, #6
 80041fa:	466a      	mov	r2, sp
 80041fc:	2168      	movs	r1, #104	; 0x68
 80041fe:	f7ff ff81 	bl	8004104 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
 8004202:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004206:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004208:	f89d 3000 	ldrb.w	r3, [sp]
 800420c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004210:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8004212:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004216:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004218:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800421c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004220:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8004222:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004226:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800422c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004230:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8004232:	b002      	add	sp, #8
 8004234:	bd10      	pop	{r4, pc}

08004236 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004236:	b508      	push	{r3, lr}
 8004238:	460a      	mov	r2, r1
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800423a:	2301      	movs	r3, #1
 800423c:	214f      	movs	r1, #79	; 0x4f
 800423e:	f7ff ff61 	bl	8004104 <lis2mdl_read_reg>

  return ret;
}
 8004242:	bd08      	pop	{r3, pc}

08004244 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004244:	b530      	push	{r4, r5, lr}
 8004246:	b083      	sub	sp, #12
 8004248:	4604      	mov	r4, r0
 800424a:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800424c:	2301      	movs	r3, #1
 800424e:	aa01      	add	r2, sp, #4
 8004250:	2162      	movs	r1, #98	; 0x62
 8004252:	f7ff ff57 	bl	8004104 <lis2mdl_read_reg>

  if (ret == 0)
 8004256:	b108      	cbz	r0, 800425c <lis2mdl_self_test_set+0x18>
    reg.self_test = val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004258:	b003      	add	sp, #12
 800425a:	bd30      	pop	{r4, r5, pc}
    reg.self_test = val;
 800425c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004260:	f365 0341 	bfi	r3, r5, #1, #1
 8004264:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004268:	2301      	movs	r3, #1
 800426a:	aa01      	add	r2, sp, #4
 800426c:	2162      	movs	r1, #98	; 0x62
 800426e:	4620      	mov	r0, r4
 8004270:	f7ff ff4d 	bl	800410e <lis2mdl_write_reg>
  return ret;
 8004274:	e7f0      	b.n	8004258 <lis2mdl_self_test_set+0x14>

08004276 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004276:	b530      	push	{r4, r5, lr}
 8004278:	b083      	sub	sp, #12
 800427a:	4604      	mov	r4, r0
 800427c:	460d      	mov	r5, r1
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800427e:	2301      	movs	r3, #1
 8004280:	aa01      	add	r2, sp, #4
 8004282:	2162      	movs	r1, #98	; 0x62
 8004284:	f7ff ff3e 	bl	8004104 <lis2mdl_read_reg>

  if (ret == 0)
 8004288:	b108      	cbz	r0, 800428e <lis2mdl_i2c_interface_set+0x18>
    reg.i2c_dis = (uint8_t)val;
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800428a:	b003      	add	sp, #12
 800428c:	bd30      	pop	{r4, r5, pc}
    reg.i2c_dis = (uint8_t)val;
 800428e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004292:	f365 1345 	bfi	r3, r5, #5, #1
 8004296:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800429a:	2301      	movs	r3, #1
 800429c:	aa01      	add	r2, sp, #4
 800429e:	2162      	movs	r1, #98	; 0x62
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff ff34 	bl	800410e <lis2mdl_write_reg>
  return ret;
 80042a6:	e7f0      	b.n	800428a <lis2mdl_i2c_interface_set+0x14>

080042a8 <LPS22HH_GetCapabilities>:
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80042a8:	2000      	movs	r0, #0
 80042aa:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 80042b0:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 80042b2:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80042b4:	2300      	movs	r3, #0
 80042b6:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80042b8:	4b01      	ldr	r3, [pc, #4]	; (80042c0 <LPS22HH_GetCapabilities+0x18>)
 80042ba:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80042bc:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 80042be:	4770      	bx	lr
 80042c0:	43480000 	.word	0x43480000

080042c4 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80042c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80042c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	d924      	bls.n	800431c <LPS22HH_SetOutputDataRate_When_Disabled+0x58>
 80042d2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80042d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d922      	bls.n	8004326 <LPS22HH_SetOutputDataRate_When_Disabled+0x62>
 80042e0:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80042e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d91d      	bls.n	800432a <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 80042ee:	eddf 7a13 	vldr	s15, [pc, #76]	; 800433c <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 80042f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	d918      	bls.n	800432e <LPS22HH_SetOutputDataRate_When_Disabled+0x6a>
 80042fc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004340 <LPS22HH_SetOutputDataRate_When_Disabled+0x7c>
 8004300:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	d913      	bls.n	8004332 <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 800430a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004344 <LPS22HH_SetOutputDataRate_When_Disabled+0x80>
 800430e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d80e      	bhi.n	8004336 <LPS22HH_SetOutputDataRate_When_Disabled+0x72>
 8004318:	2306      	movs	r3, #6
 800431a:	e000      	b.n	800431e <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 800431c:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800431e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
}
 8004322:	2000      	movs	r0, #0
 8004324:	4770      	bx	lr
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004326:	2302      	movs	r3, #2
 8004328:	e7f9      	b.n	800431e <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 800432a:	2303      	movs	r3, #3
 800432c:	e7f7      	b.n	800431e <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 800432e:	2304      	movs	r3, #4
 8004330:	e7f5      	b.n	800431e <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 8004332:	2305      	movs	r3, #5
 8004334:	e7f3      	b.n	800431e <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 8004336:	2307      	movs	r3, #7
 8004338:	e7f1      	b.n	800431e <LPS22HH_SetOutputDataRate_When_Disabled+0x5a>
 800433a:	bf00      	nop
 800433c:	42480000 	.word	0x42480000
 8004340:	42960000 	.word	0x42960000
 8004344:	42c80000 	.word	0x42c80000

08004348 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004348:	b510      	push	{r4, lr}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800434a:	6944      	ldr	r4, [r0, #20]
 800434c:	7b00      	ldrb	r0, [r0, #12]
 800434e:	47a0      	blx	r4
}
 8004350:	bd10      	pop	{r4, pc}

08004352 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004352:	b510      	push	{r4, lr}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004354:	6904      	ldr	r4, [r0, #16]
 8004356:	7b00      	ldrb	r0, [r0, #12]
 8004358:	47a0      	blx	r4
}
 800435a:	bd10      	pop	{r4, pc}

0800435c <LPS22HH_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 800435c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004360:	2b01      	cmp	r3, #1
 8004362:	d00b      	beq.n	800437c <LPS22HH_PRESS_Enable+0x20>
{
 8004364:	b510      	push	{r4, lr}
 8004366:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004368:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 800436c:	3020      	adds	r0, #32
 800436e:	f000 fa2c 	bl	80047ca <lps22hh_data_rate_set>
 8004372:	b928      	cbnz	r0, 8004380 <LPS22HH_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800437a:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 800437c:	2000      	movs	r0, #0
}
 800437e:	4770      	bx	lr
    return LPS22HH_ERROR;
 8004380:	f04f 30ff 	mov.w	r0, #4294967295
 8004384:	e7f9      	b.n	800437a <LPS22HH_PRESS_Enable+0x1e>

08004386 <LPS22HH_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8004386:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800438a:	2b01      	cmp	r3, #1
 800438c:	d00b      	beq.n	80043a6 <LPS22HH_TEMP_Enable+0x20>
{
 800438e:	b510      	push	{r4, lr}
 8004390:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004392:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 8004396:	3020      	adds	r0, #32
 8004398:	f000 fa17 	bl	80047ca <lps22hh_data_rate_set>
 800439c:	b928      	cbnz	r0, 80043aa <LPS22HH_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 80043a4:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 80043a6:	2000      	movs	r0, #0
}
 80043a8:	4770      	bx	lr
    return LPS22HH_ERROR;
 80043aa:	f04f 30ff 	mov.w	r0, #4294967295
 80043ae:	e7f9      	b.n	80043a4 <LPS22HH_TEMP_Enable+0x1e>

080043b0 <LPS22HH_Initialize>:
{
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4605      	mov	r5, r0
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80043b4:	f100 0420 	add.w	r4, r0, #32
 80043b8:	2111      	movs	r1, #17
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 fb05 	bl	80049ca <lps22hh_i3c_interface_set>
 80043c0:	b9b8      	cbnz	r0, 80043f2 <LPS22HH_Initialize+0x42>
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80043c2:	2110      	movs	r1, #16
 80043c4:	4620      	mov	r0, r4
 80043c6:	f000 fa00 	bl	80047ca <lps22hh_data_rate_set>
 80043ca:	b9a8      	cbnz	r0, 80043f8 <LPS22HH_Initialize+0x48>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80043cc:	2100      	movs	r1, #0
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 fae2 	bl	8004998 <lps22hh_lp_bandwidth_set>
 80043d4:	b998      	cbnz	r0, 80043fe <LPS22HH_Initialize+0x4e>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80043d6:	2101      	movs	r1, #1
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 f9dd 	bl	8004798 <lps22hh_block_data_update_set>
 80043de:	b988      	cbnz	r0, 8004404 <LPS22HH_Initialize+0x54>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80043e0:	2101      	movs	r1, #1
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 fabf 	bl	8004966 <lps22hh_auto_increment_set>
 80043e8:	b978      	cbnz	r0, 800440a <LPS22HH_Initialize+0x5a>
  pObj->last_odr = LPS22HH_25_Hz;
 80043ea:	2303      	movs	r3, #3
 80043ec:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
    return LPS22HH_ERROR;
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	e7fb      	b.n	80043f0 <LPS22HH_Initialize+0x40>
    return LPS22HH_ERROR;
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e7f8      	b.n	80043f0 <LPS22HH_Initialize+0x40>
    return LPS22HH_ERROR;
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	e7f5      	b.n	80043f0 <LPS22HH_Initialize+0x40>
    return LPS22HH_ERROR;
 8004404:	f04f 30ff 	mov.w	r0, #4294967295
 8004408:	e7f2      	b.n	80043f0 <LPS22HH_Initialize+0x40>
    return LPS22HH_ERROR;
 800440a:	f04f 30ff 	mov.w	r0, #4294967295
 800440e:	e7ef      	b.n	80043f0 <LPS22HH_Initialize+0x40>

08004410 <LPS22HH_Init>:
{
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8004414:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004418:	b123      	cbz	r3, 8004424 <LPS22HH_Init+0x14>
  pObj->is_initialized = 1U;
 800441a:	2301      	movs	r3, #1
 800441c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return LPS22HH_OK;
 8004420:	2000      	movs	r0, #0
}
 8004422:	bd10      	pop	{r4, pc}
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004424:	f7ff ffc4 	bl	80043b0 <LPS22HH_Initialize>
 8004428:	2800      	cmp	r0, #0
 800442a:	d0f6      	beq.n	800441a <LPS22HH_Init+0xa>
      return LPS22HH_ERROR;
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	e7f7      	b.n	8004422 <LPS22HH_Init+0x12>

08004432 <LPS22HH_ReadID>:
{
 8004432:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004434:	3020      	adds	r0, #32
 8004436:	f000 fa8f 	bl	8004958 <lps22hh_device_id_get>
 800443a:	b900      	cbnz	r0, 800443e <LPS22HH_ReadID+0xc>
}
 800443c:	bd08      	pop	{r3, pc}
    return LPS22HH_ERROR;
 800443e:	f04f 30ff 	mov.w	r0, #4294967295
 8004442:	e7fb      	b.n	800443c <LPS22HH_ReadID+0xa>

08004444 <LPS22HH_PRESS_Disable>:
{
 8004444:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8004446:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800444a:	b1c3      	cbz	r3, 800447e <LPS22HH_PRESS_Disable+0x3a>
 800444c:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800444e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004452:	b11b      	cbz	r3, 800445c <LPS22HH_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 8004454:	2000      	movs	r0, #0
 8004456:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 800445a:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800445c:	f100 0520 	add.w	r5, r0, #32
 8004460:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f9e8 	bl	800483a <lps22hh_data_rate_get>
 800446a:	b950      	cbnz	r0, 8004482 <LPS22HH_PRESS_Disable+0x3e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800446c:	2100      	movs	r1, #0
 800446e:	4628      	mov	r0, r5
 8004470:	f000 f9ab 	bl	80047ca <lps22hh_data_rate_set>
 8004474:	2800      	cmp	r0, #0
 8004476:	d0ed      	beq.n	8004454 <LPS22HH_PRESS_Disable+0x10>
      return LPS22HH_ERROR;
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	e7ed      	b.n	800445a <LPS22HH_PRESS_Disable+0x16>
    return LPS22HH_OK;
 800447e:	2000      	movs	r0, #0
 8004480:	e7eb      	b.n	800445a <LPS22HH_PRESS_Disable+0x16>
      return LPS22HH_ERROR;
 8004482:	f04f 30ff 	mov.w	r0, #4294967295
 8004486:	e7e8      	b.n	800445a <LPS22HH_PRESS_Disable+0x16>

08004488 <LPS22HH_GetOutputDataRate>:
{
 8004488:	b510      	push	{r4, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800448e:	f10d 0107 	add.w	r1, sp, #7
 8004492:	3020      	adds	r0, #32
 8004494:	f000 f9d1 	bl	800483a <lps22hh_data_rate_get>
 8004498:	bb18      	cbnz	r0, 80044e2 <LPS22HH_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 800449a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800449e:	2b07      	cmp	r3, #7
 80044a0:	d822      	bhi.n	80044e8 <LPS22HH_GetOutputDataRate+0x60>
 80044a2:	e8df f003 	tbb	[pc, r3]
 80044a6:	0804      	.short	0x0804
 80044a8:	15120f0c 	.word	0x15120f0c
 80044ac:	1b18      	.short	0x1b18
      *Odr = 0.0f;
 80044ae:	2300      	movs	r3, #0
 80044b0:	6023      	str	r3, [r4, #0]
}
 80044b2:	b002      	add	sp, #8
 80044b4:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 80044b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044ba:	6023      	str	r3, [r4, #0]
      break;
 80044bc:	e7f9      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 10.0f;
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <LPS22HH_GetOutputDataRate+0x68>)
 80044c0:	6023      	str	r3, [r4, #0]
      break;
 80044c2:	e7f6      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 25.0f;
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <LPS22HH_GetOutputDataRate+0x6c>)
 80044c6:	6023      	str	r3, [r4, #0]
      break;
 80044c8:	e7f3      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 50.0f;
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <LPS22HH_GetOutputDataRate+0x70>)
 80044cc:	6023      	str	r3, [r4, #0]
      break;
 80044ce:	e7f0      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 75.0f;
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <LPS22HH_GetOutputDataRate+0x74>)
 80044d2:	6023      	str	r3, [r4, #0]
      break;
 80044d4:	e7ed      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 100.0f;
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <LPS22HH_GetOutputDataRate+0x78>)
 80044d8:	6023      	str	r3, [r4, #0]
      break;
 80044da:	e7ea      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
      *Odr = 200.0f;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <LPS22HH_GetOutputDataRate+0x7c>)
 80044de:	6023      	str	r3, [r4, #0]
      break;
 80044e0:	e7e7      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
    return LPS22HH_ERROR;
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	e7e4      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
  switch (odr_low_level)
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e7e1      	b.n	80044b2 <LPS22HH_GetOutputDataRate+0x2a>
 80044ee:	bf00      	nop
 80044f0:	41200000 	.word	0x41200000
 80044f4:	41c80000 	.word	0x41c80000
 80044f8:	42480000 	.word	0x42480000
 80044fc:	42960000 	.word	0x42960000
 8004500:	42c80000 	.word	0x42c80000
 8004504:	43480000 	.word	0x43480000

08004508 <LPS22HH_PRESS_GetOutputDataRate>:
{
 8004508:	b508      	push	{r3, lr}
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800450a:	f7ff ffbd 	bl	8004488 <LPS22HH_GetOutputDataRate>
}
 800450e:	bd08      	pop	{r3, pc}

08004510 <LPS22HH_TEMP_GetOutputDataRate>:
{
 8004510:	b508      	push	{r3, lr}
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004512:	f7ff ffb9 	bl	8004488 <LPS22HH_GetOutputDataRate>
}
 8004516:	bd08      	pop	{r3, pc}

08004518 <LPS22HH_SetOutputDataRate_When_Enabled>:
{
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4604      	mov	r4, r0
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800451c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004520:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	d924      	bls.n	8004574 <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 800452a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800452e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	d92b      	bls.n	8004590 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 8004538:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800453c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	d926      	bls.n	8004594 <LPS22HH_SetOutputDataRate_When_Enabled+0x7c>
 8004546:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80045b0 <LPS22HH_SetOutputDataRate_When_Enabled+0x98>
 800454a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	d921      	bls.n	8004598 <LPS22HH_SetOutputDataRate_When_Enabled+0x80>
 8004554:	eddf 7a17 	vldr	s15, [pc, #92]	; 80045b4 <LPS22HH_SetOutputDataRate_When_Enabled+0x9c>
 8004558:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	d91c      	bls.n	800459c <LPS22HH_SetOutputDataRate_When_Enabled+0x84>
 8004562:	eddf 7a15 	vldr	s15, [pc, #84]	; 80045b8 <LPS22HH_SetOutputDataRate_When_Enabled+0xa0>
 8004566:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456e:	d817      	bhi.n	80045a0 <LPS22HH_SetOutputDataRate_When_Enabled+0x88>
 8004570:	2106      	movs	r1, #6
 8004572:	e000      	b.n	8004576 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
 8004574:	2101      	movs	r1, #1
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004576:	f104 0520 	add.w	r5, r4, #32
 800457a:	4628      	mov	r0, r5
 800457c:	f000 f925 	bl	80047ca <lps22hh_data_rate_set>
 8004580:	b980      	cbnz	r0, 80045a4 <LPS22HH_SetOutputDataRate_When_Enabled+0x8c>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004582:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8004586:	4628      	mov	r0, r5
 8004588:	f000 f957 	bl	800483a <lps22hh_data_rate_get>
 800458c:	b968      	cbnz	r0, 80045aa <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
}
 800458e:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004590:	2102      	movs	r1, #2
 8004592:	e7f0      	b.n	8004576 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
 8004594:	2103      	movs	r1, #3
 8004596:	e7ee      	b.n	8004576 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
 8004598:	2104      	movs	r1, #4
 800459a:	e7ec      	b.n	8004576 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
 800459c:	2105      	movs	r1, #5
 800459e:	e7ea      	b.n	8004576 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
 80045a0:	2107      	movs	r1, #7
 80045a2:	e7e8      	b.n	8004576 <LPS22HH_SetOutputDataRate_When_Enabled+0x5e>
    return LPS22HH_ERROR;
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	e7f1      	b.n	800458e <LPS22HH_SetOutputDataRate_When_Enabled+0x76>
    return LPS22HH_ERROR;
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	e7ee      	b.n	800458e <LPS22HH_SetOutputDataRate_When_Enabled+0x76>
 80045b0:	42480000 	.word	0x42480000
 80045b4:	42960000 	.word	0x42960000
 80045b8:	42c80000 	.word	0x42c80000

080045bc <LPS22HH_PRESS_SetOutputDataRate>:
{
 80045bc:	b508      	push	{r3, lr}
  if (pObj->press_is_enabled == 1U)
 80045be:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d002      	beq.n	80045cc <LPS22HH_PRESS_SetOutputDataRate+0x10>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80045c6:	f7ff fe7d 	bl	80042c4 <LPS22HH_SetOutputDataRate_When_Disabled>
}
 80045ca:	bd08      	pop	{r3, pc}
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80045cc:	f7ff ffa4 	bl	8004518 <LPS22HH_SetOutputDataRate_When_Enabled>
 80045d0:	e7fb      	b.n	80045ca <LPS22HH_PRESS_SetOutputDataRate+0xe>

080045d2 <LPS22HH_TEMP_SetOutputDataRate>:
{
 80045d2:	b508      	push	{r3, lr}
  if (pObj->temp_is_enabled == 1U)
 80045d4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d002      	beq.n	80045e2 <LPS22HH_TEMP_SetOutputDataRate+0x10>
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80045dc:	f7ff fe72 	bl	80042c4 <LPS22HH_SetOutputDataRate_When_Disabled>
}
 80045e0:	bd08      	pop	{r3, pc}
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80045e2:	f7ff ff99 	bl	8004518 <LPS22HH_SetOutputDataRate_When_Enabled>
 80045e6:	e7fb      	b.n	80045e0 <LPS22HH_TEMP_SetOutputDataRate+0xe>

080045e8 <LPS22HH_TEMP_Disable>:
{
 80045e8:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 80045ea:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80045ee:	b1c3      	cbz	r3, 8004622 <LPS22HH_TEMP_Disable+0x3a>
 80045f0:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 80045f2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80045f6:	b11b      	cbz	r3, 8004600 <LPS22HH_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 80045f8:	2000      	movs	r0, #0
 80045fa:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
}
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004600:	f100 0520 	add.w	r5, r0, #32
 8004604:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004608:	4628      	mov	r0, r5
 800460a:	f000 f916 	bl	800483a <lps22hh_data_rate_get>
 800460e:	b950      	cbnz	r0, 8004626 <LPS22HH_TEMP_Disable+0x3e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004610:	2100      	movs	r1, #0
 8004612:	4628      	mov	r0, r5
 8004614:	f000 f8d9 	bl	80047ca <lps22hh_data_rate_set>
 8004618:	2800      	cmp	r0, #0
 800461a:	d0ed      	beq.n	80045f8 <LPS22HH_TEMP_Disable+0x10>
      return LPS22HH_ERROR;
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	e7ed      	b.n	80045fe <LPS22HH_TEMP_Disable+0x16>
    return LPS22HH_OK;
 8004622:	2000      	movs	r0, #0
 8004624:	e7eb      	b.n	80045fe <LPS22HH_TEMP_Disable+0x16>
      return LPS22HH_ERROR;
 8004626:	f04f 30ff 	mov.w	r0, #4294967295
 800462a:	e7e8      	b.n	80045fe <LPS22HH_TEMP_Disable+0x16>

0800462c <LPS22HH_DeInit>:
{
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8004630:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	d003      	beq.n	8004640 <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8004638:	2000      	movs	r0, #0
 800463a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 800463e:	bd10      	pop	{r4, pc}
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8004640:	f7ff ff00 	bl	8004444 <LPS22HH_PRESS_Disable>
 8004644:	b938      	cbnz	r0, 8004656 <LPS22HH_DeInit+0x2a>
    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff ffce 	bl	80045e8 <LPS22HH_TEMP_Disable>
 800464c:	2800      	cmp	r0, #0
 800464e:	d0f3      	beq.n	8004638 <LPS22HH_DeInit+0xc>
      return LPS22HH_ERROR;
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	e7f3      	b.n	800463e <LPS22HH_DeInit+0x12>
      return LPS22HH_ERROR;
 8004656:	f04f 30ff 	mov.w	r0, #4294967295
 800465a:	e7f0      	b.n	800463e <LPS22HH_DeInit+0x12>

0800465c <LPS22HH_PRESS_GetPressure>:
{
 800465c:	b530      	push	{r4, r5, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	460c      	mov	r4, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004662:	2300      	movs	r3, #0
 8004664:	9301      	str	r3, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004666:	a901      	add	r1, sp, #4
 8004668:	3020      	adds	r0, #32
 800466a:	f000 f94a 	bl	8004902 <lps22hh_pressure_raw_get>
 800466e:	b940      	cbnz	r0, 8004682 <LPS22HH_PRESS_GetPressure+0x26>
 8004670:	4605      	mov	r5, r0
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004672:	9801      	ldr	r0, [sp, #4]
 8004674:	f000 f878 	bl	8004768 <lps22hh_from_lsb_to_hpa>
 8004678:	ed84 0a00 	vstr	s0, [r4]
}
 800467c:	4628      	mov	r0, r5
 800467e:	b003      	add	sp, #12
 8004680:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004682:	f04f 35ff 	mov.w	r5, #4294967295
 8004686:	e7f9      	b.n	800467c <LPS22HH_PRESS_GetPressure+0x20>

08004688 <LPS22HH_TEMP_GetTemperature>:
{
 8004688:	b530      	push	{r4, r5, lr}
 800468a:	b083      	sub	sp, #12
 800468c:	460c      	mov	r4, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800468e:	2300      	movs	r3, #0
 8004690:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004694:	a901      	add	r1, sp, #4
 8004696:	3020      	adds	r0, #32
 8004698:	f000 f94c 	bl	8004934 <lps22hh_temperature_raw_get>
 800469c:	b948      	cbnz	r0, 80046b2 <LPS22HH_TEMP_GetTemperature+0x2a>
 800469e:	4605      	mov	r5, r0
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80046a0:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80046a4:	f000 f86c 	bl	8004780 <lps22hh_from_lsb_to_celsius>
 80046a8:	ed84 0a00 	vstr	s0, [r4]
}
 80046ac:	4628      	mov	r0, r5
 80046ae:	b003      	add	sp, #12
 80046b0:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 80046b2:	f04f 35ff 	mov.w	r5, #4294967295
 80046b6:	e7f9      	b.n	80046ac <LPS22HH_TEMP_GetTemperature+0x24>

080046b8 <LPS22HH_Write_Reg>:
{
 80046b8:	b500      	push	{lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80046c0:	2301      	movs	r3, #1
 80046c2:	f10d 0207 	add.w	r2, sp, #7
 80046c6:	3020      	adds	r0, #32
 80046c8:	f000 f849 	bl	800475e <lps22hh_write_reg>
 80046cc:	b910      	cbnz	r0, 80046d4 <LPS22HH_Write_Reg+0x1c>
}
 80046ce:	b003      	add	sp, #12
 80046d0:	f85d fb04 	ldr.w	pc, [sp], #4
    return LPS22HH_ERROR;
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	e7f9      	b.n	80046ce <LPS22HH_Write_Reg+0x16>
	...

080046dc <LPS22HH_RegisterBusIO>:
  if (pObj == NULL)
 80046dc:	2800      	cmp	r0, #0
 80046de:	d02b      	beq.n	8004738 <LPS22HH_RegisterBusIO+0x5c>
{
 80046e0:	b510      	push	{r4, lr}
 80046e2:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80046e4:	680b      	ldr	r3, [r1, #0]
 80046e6:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80046e8:	684a      	ldr	r2, [r1, #4]
 80046ea:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046ec:	688a      	ldr	r2, [r1, #8]
 80046ee:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80046f0:	7b0a      	ldrb	r2, [r1, #12]
 80046f2:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80046f4:	690a      	ldr	r2, [r1, #16]
 80046f6:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80046f8:	694a      	ldr	r2, [r1, #20]
 80046fa:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80046fc:	698a      	ldr	r2, [r1, #24]
 80046fe:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004700:	4a12      	ldr	r2, [pc, #72]	; (800474c <LPS22HH_RegisterBusIO+0x70>)
 8004702:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004704:	4a12      	ldr	r2, [pc, #72]	; (8004750 <LPS22HH_RegisterBusIO+0x74>)
 8004706:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004708:	69ca      	ldr	r2, [r1, #28]
 800470a:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800470c:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 800470e:	b1b3      	cbz	r3, 800473e <LPS22HH_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004710:	4798      	blx	r3
 8004712:	b9b8      	cbnz	r0, 8004744 <LPS22HH_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d000      	beq.n	800471c <LPS22HH_RegisterBusIO+0x40>
}
 800471a:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 800471c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1fa      	bne.n	800471a <LPS22HH_RegisterBusIO+0x3e>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004724:	2201      	movs	r2, #1
 8004726:	2110      	movs	r1, #16
 8004728:	4620      	mov	r0, r4
 800472a:	f7ff ffc5 	bl	80046b8 <LPS22HH_Write_Reg>
 800472e:	2800      	cmp	r0, #0
 8004730:	d0f3      	beq.n	800471a <LPS22HH_RegisterBusIO+0x3e>
            ret = LPS22HH_ERROR;
 8004732:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004736:	e7f0      	b.n	800471a <LPS22HH_RegisterBusIO+0x3e>
    ret = LPS22HH_ERROR;
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
}
 800473c:	4770      	bx	lr
      ret = LPS22HH_ERROR;
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	e7ea      	b.n	800471a <LPS22HH_RegisterBusIO+0x3e>
      ret = LPS22HH_ERROR;
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	e7e7      	b.n	800471a <LPS22HH_RegisterBusIO+0x3e>
 800474a:	bf00      	nop
 800474c:	08004349 	.word	0x08004349
 8004750:	08004353 	.word	0x08004353

08004754 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004754:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004756:	6844      	ldr	r4, [r0, #4]
 8004758:	68c0      	ldr	r0, [r0, #12]
 800475a:	47a0      	blx	r4

  return ret;
}
 800475c:	bd10      	pop	{r4, pc}

0800475e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800475e:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004760:	6804      	ldr	r4, [r0, #0]
 8004762:	68c0      	ldr	r0, [r0, #12]
 8004764:	47a0      	blx	r4

  return ret;
}
 8004766:	bd10      	pop	{r4, pc}

08004768 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004768:	ee07 0a90 	vmov	s15, r0
  return ((float_t) lsb / 1048576.0f);
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8004770:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800477c <lps22hh_from_lsb_to_hpa+0x14>
 8004774:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	35800000 	.word	0x35800000

08004780 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004780:	ee07 0a90 	vmov	s15, r0
  return ((float_t) lsb / 100.0f);
 8004784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004788:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004794 <lps22hh_from_lsb_to_celsius+0x14>
 800478c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	42c80000 	.word	0x42c80000

08004798 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004798:	b530      	push	{r4, r5, lr}
 800479a:	b083      	sub	sp, #12
 800479c:	4604      	mov	r4, r0
 800479e:	460d      	mov	r5, r1
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80047a0:	2301      	movs	r3, #1
 80047a2:	aa01      	add	r2, sp, #4
 80047a4:	2110      	movs	r1, #16
 80047a6:	f7ff ffd5 	bl	8004754 <lps22hh_read_reg>

  if (ret == 0)
 80047aa:	b108      	cbz	r0, 80047b0 <lps22hh_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80047ac:	b003      	add	sp, #12
 80047ae:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80047b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80047b4:	f365 0341 	bfi	r3, r5, #1, #1
 80047b8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80047bc:	2301      	movs	r3, #1
 80047be:	aa01      	add	r2, sp, #4
 80047c0:	2110      	movs	r1, #16
 80047c2:	4620      	mov	r0, r4
 80047c4:	f7ff ffcb 	bl	800475e <lps22hh_write_reg>
  return ret;
 80047c8:	e7f0      	b.n	80047ac <lps22hh_block_data_update_set+0x14>

080047ca <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80047ca:	b530      	push	{r4, r5, lr}
 80047cc:	b083      	sub	sp, #12
 80047ce:	4605      	mov	r5, r0
 80047d0:	460c      	mov	r4, r1
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80047d2:	2301      	movs	r3, #1
 80047d4:	aa01      	add	r2, sp, #4
 80047d6:	2110      	movs	r1, #16
 80047d8:	f7ff ffbc 	bl	8004754 <lps22hh_read_reg>

  if (ret == 0)
 80047dc:	b118      	cbz	r0, 80047e6 <lps22hh_data_rate_set+0x1c>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
  }

  if (ret == 0)
 80047de:	b148      	cbz	r0, 80047f4 <lps22hh_data_rate_set+0x2a>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
 80047e0:	b1a8      	cbz	r0, 800480e <lps22hh_data_rate_set+0x44>
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
}
 80047e2:	b003      	add	sp, #12
 80047e4:	bd30      	pop	{r4, r5, pc}
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80047e6:	2301      	movs	r3, #1
 80047e8:	466a      	mov	r2, sp
 80047ea:	2111      	movs	r1, #17
 80047ec:	4628      	mov	r0, r5
 80047ee:	f7ff ffb1 	bl	8004754 <lps22hh_read_reg>
 80047f2:	e7f4      	b.n	80047de <lps22hh_data_rate_set+0x14>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80047f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80047f8:	f364 1306 	bfi	r3, r4, #4, #3
 80047fc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004800:	2301      	movs	r3, #1
 8004802:	aa01      	add	r2, sp, #4
 8004804:	2110      	movs	r1, #16
 8004806:	4628      	mov	r0, r5
 8004808:	f7ff ffa9 	bl	800475e <lps22hh_write_reg>
 800480c:	e7e8      	b.n	80047e0 <lps22hh_data_rate_set+0x16>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800480e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8004812:	f89d 3000 	ldrb.w	r3, [sp]
 8004816:	f362 0341 	bfi	r3, r2, #1, #1
 800481a:	f88d 3000 	strb.w	r3, [sp]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800481e:	f3c4 01c0 	ubfx	r1, r4, #3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f361 0300 	bfi	r3, r1, #0, #1
 8004828:	f88d 3000 	strb.w	r3, [sp]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800482c:	2301      	movs	r3, #1
 800482e:	466a      	mov	r2, sp
 8004830:	2111      	movs	r1, #17
 8004832:	4628      	mov	r0, r5
 8004834:	f7ff ff93 	bl	800475e <lps22hh_write_reg>
  return ret;
 8004838:	e7d3      	b.n	80047e2 <lps22hh_data_rate_set+0x18>

0800483a <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 800483a:	b530      	push	{r4, r5, lr}
 800483c:	b083      	sub	sp, #12
 800483e:	4604      	mov	r4, r0
 8004840:	460d      	mov	r5, r1
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004842:	2301      	movs	r3, #1
 8004844:	aa01      	add	r2, sp, #4
 8004846:	2110      	movs	r1, #16
 8004848:	f7ff ff84 	bl	8004754 <lps22hh_read_reg>

  if (ret == 0)
 800484c:	b110      	cbz	r0, 8004854 <lps22hh_data_rate_get+0x1a>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
  }

  if (ret == 0)
 800484e:	b140      	cbz	r0, 8004862 <lps22hh_data_rate_get+0x28>
        break;
    }
  }

  return ret;
}
 8004850:	b003      	add	sp, #12
 8004852:	bd30      	pop	{r4, r5, pc}
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004854:	2301      	movs	r3, #1
 8004856:	466a      	mov	r2, sp
 8004858:	2111      	movs	r1, #17
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff ff7a 	bl	8004754 <lps22hh_read_reg>
 8004860:	e7f5      	b.n	800484e <lps22hh_data_rate_get+0x14>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004862:	2301      	movs	r3, #1
 8004864:	466a      	mov	r2, sp
 8004866:	2111      	movs	r1, #17
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff ff73 	bl	8004754 <lps22hh_read_reg>
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800486e:	f89d 2000 	ldrb.w	r2, [sp]
 8004872:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8004876:	f002 0301 	and.w	r3, r2, #1
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl_reg1.odr))
 8004880:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004884:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004888:	4413      	add	r3, r2
 800488a:	2b15      	cmp	r3, #21
 800488c:	d836      	bhi.n	80048fc <lps22hh_data_rate_get+0xc2>
 800488e:	e8df f003 	tbb	[pc, r3]
 8004892:	110b      	.short	0x110b
 8004894:	1d1a1714 	.word	0x1d1a1714
 8004898:	350e322f 	.word	0x350e322f
 800489c:	35353535 	.word	0x35353535
 80048a0:	20353535 	.word	0x20353535
 80048a4:	2c292623 	.word	0x2c292623
        *val = LPS22HH_POWER_DOWN;
 80048a8:	2300      	movs	r3, #0
 80048aa:	702b      	strb	r3, [r5, #0]
        break;
 80048ac:	e7d0      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_ONE_SHOOT;
 80048ae:	2308      	movs	r3, #8
 80048b0:	702b      	strb	r3, [r5, #0]
        break;
 80048b2:	e7cd      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_1_Hz;
 80048b4:	2301      	movs	r3, #1
 80048b6:	702b      	strb	r3, [r5, #0]
        break;
 80048b8:	e7ca      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_10_Hz;
 80048ba:	2302      	movs	r3, #2
 80048bc:	702b      	strb	r3, [r5, #0]
        break;
 80048be:	e7c7      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_25_Hz;
 80048c0:	2303      	movs	r3, #3
 80048c2:	702b      	strb	r3, [r5, #0]
        break;
 80048c4:	e7c4      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_50_Hz;
 80048c6:	2304      	movs	r3, #4
 80048c8:	702b      	strb	r3, [r5, #0]
        break;
 80048ca:	e7c1      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_75_Hz;
 80048cc:	2305      	movs	r3, #5
 80048ce:	702b      	strb	r3, [r5, #0]
        break;
 80048d0:	e7be      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80048d2:	2311      	movs	r3, #17
 80048d4:	702b      	strb	r3, [r5, #0]
        break;
 80048d6:	e7bb      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80048d8:	2312      	movs	r3, #18
 80048da:	702b      	strb	r3, [r5, #0]
        break;
 80048dc:	e7b8      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80048de:	2313      	movs	r3, #19
 80048e0:	702b      	strb	r3, [r5, #0]
        break;
 80048e2:	e7b5      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80048e4:	2314      	movs	r3, #20
 80048e6:	702b      	strb	r3, [r5, #0]
        break;
 80048e8:	e7b2      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80048ea:	2315      	movs	r3, #21
 80048ec:	702b      	strb	r3, [r5, #0]
        break;
 80048ee:	e7af      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_100_Hz;
 80048f0:	2306      	movs	r3, #6
 80048f2:	702b      	strb	r3, [r5, #0]
        break;
 80048f4:	e7ac      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_200_Hz;
 80048f6:	2307      	movs	r3, #7
 80048f8:	702b      	strb	r3, [r5, #0]
        break;
 80048fa:	e7a9      	b.n	8004850 <lps22hh_data_rate_get+0x16>
        *val = LPS22HH_POWER_DOWN;
 80048fc:	2300      	movs	r3, #0
 80048fe:	702b      	strb	r3, [r5, #0]
  return ret;
 8004900:	e7a6      	b.n	8004850 <lps22hh_data_rate_get+0x16>

08004902 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004902:	b510      	push	{r4, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	460c      	mov	r4, r1
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004908:	2303      	movs	r3, #3
 800490a:	aa01      	add	r2, sp, #4
 800490c:	2128      	movs	r1, #40	; 0x28
 800490e:	f7ff ff21 	bl	8004754 <lps22hh_read_reg>
  *buff = reg[2];
 8004912:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004916:	6022      	str	r2, [r4, #0]
  *buff = (*buff * 256) + reg[1];
 8004918:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800491c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8004920:	6022      	str	r2, [r4, #0]
  *buff = (*buff * 256) + reg[0];
 8004922:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004926:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800492a:	6023      	str	r3, [r4, #0]
  *buff *= 256;
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	6023      	str	r3, [r4, #0]

  return ret;
}
 8004930:	b002      	add	sp, #8
 8004932:	bd10      	pop	{r4, pc}

08004934 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004934:	b510      	push	{r4, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	460c      	mov	r4, r1
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800493a:	2302      	movs	r3, #2
 800493c:	aa01      	add	r2, sp, #4
 800493e:	212b      	movs	r1, #43	; 0x2b
 8004940:	f7ff ff08 	bl	8004754 <lps22hh_read_reg>
  *buff = reg[1];
 8004944:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004948:	8022      	strh	r2, [r4, #0]
  *buff = (*buff * 256) + reg[0];
 800494a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800494e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004952:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8004954:	b002      	add	sp, #8
 8004956:	bd10      	pop	{r4, pc}

08004958 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004958:	b508      	push	{r3, lr}
 800495a:	460a      	mov	r2, r1
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800495c:	2301      	movs	r3, #1
 800495e:	210f      	movs	r1, #15
 8004960:	f7ff fef8 	bl	8004754 <lps22hh_read_reg>

  return ret;
}
 8004964:	bd08      	pop	{r3, pc}

08004966 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004966:	b530      	push	{r4, r5, lr}
 8004968:	b083      	sub	sp, #12
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800496e:	2301      	movs	r3, #1
 8004970:	aa01      	add	r2, sp, #4
 8004972:	2111      	movs	r1, #17
 8004974:	f7ff feee 	bl	8004754 <lps22hh_read_reg>

  if (ret == 0)
 8004978:	b108      	cbz	r0, 800497e <lps22hh_auto_increment_set+0x18>
    reg.if_add_inc = val;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800497a:	b003      	add	sp, #12
 800497c:	bd30      	pop	{r4, r5, pc}
    reg.if_add_inc = val;
 800497e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004982:	f365 1304 	bfi	r3, r5, #4, #1
 8004986:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800498a:	2301      	movs	r3, #1
 800498c:	aa01      	add	r2, sp, #4
 800498e:	2111      	movs	r1, #17
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff fee4 	bl	800475e <lps22hh_write_reg>
  return ret;
 8004996:	e7f0      	b.n	800497a <lps22hh_auto_increment_set+0x14>

08004998 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8004998:	b530      	push	{r4, r5, lr}
 800499a:	b083      	sub	sp, #12
 800499c:	4604      	mov	r4, r0
 800499e:	460d      	mov	r5, r1
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80049a0:	2301      	movs	r3, #1
 80049a2:	aa01      	add	r2, sp, #4
 80049a4:	2110      	movs	r1, #16
 80049a6:	f7ff fed5 	bl	8004754 <lps22hh_read_reg>

  if (ret == 0)
 80049aa:	b108      	cbz	r0, 80049b0 <lps22hh_lp_bandwidth_set+0x18>
    reg.lpfp_cfg = (uint8_t)val;
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80049ac:	b003      	add	sp, #12
 80049ae:	bd30      	pop	{r4, r5, pc}
    reg.lpfp_cfg = (uint8_t)val;
 80049b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80049b4:	f365 0383 	bfi	r3, r5, #2, #2
 80049b8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80049bc:	2301      	movs	r3, #1
 80049be:	aa01      	add	r2, sp, #4
 80049c0:	2110      	movs	r1, #16
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff fecb 	bl	800475e <lps22hh_write_reg>
  return ret;
 80049c8:	e7f0      	b.n	80049ac <lps22hh_lp_bandwidth_set+0x14>

080049ca <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80049ca:	b530      	push	{r4, r5, lr}
 80049cc:	b083      	sub	sp, #12
 80049ce:	4605      	mov	r5, r0
 80049d0:	460c      	mov	r4, r1
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80049d2:	2301      	movs	r3, #1
 80049d4:	aa01      	add	r2, sp, #4
 80049d6:	210e      	movs	r1, #14
 80049d8:	f7ff febc 	bl	8004754 <lps22hh_read_reg>

  if (ret == 0)
 80049dc:	b108      	cbz	r0, 80049e2 <lps22hh_i3c_interface_set+0x18>
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80049de:	b003      	add	sp, #12
 80049e0:	bd30      	pop	{r4, r5, pc}
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80049e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80049e6:	f364 0341 	bfi	r3, r4, #1, #1
 80049ea:	f88d 3004 	strb.w	r3, [sp, #4]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80049ee:	f3c4 1100 	ubfx	r1, r4, #4, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f361 13c7 	bfi	r3, r1, #7, #1
 80049f8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80049fc:	2301      	movs	r3, #1
 80049fe:	aa01      	add	r2, sp, #4
 8004a00:	210e      	movs	r1, #14
 8004a02:	4628      	mov	r0, r5
 8004a04:	f7ff feab 	bl	800475e <lps22hh_write_reg>
  return ret;
 8004a08:	e7e9      	b.n	80049de <lps22hh_i3c_interface_set+0x14>
	...

08004a0c <LSM6DSO_GetCapabilities>:
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8004a10:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 8004a12:	2000      	movs	r0, #0
 8004a14:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8004a16:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004a18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004a1c:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8004a1e:	2310      	movs	r3, #16
 8004a20:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 8004a22:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <LSM6DSO_GetCapabilities+0x24>)
 8004a26:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004a28:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	618b      	str	r3, [r1, #24]
  return LSM6DSO_OK;
}
 8004a2e:	4770      	bx	lr
 8004a30:	45d02000 	.word	0x45d02000

08004a34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004a34:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8004af4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8004a38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a40:	d940      	bls.n	8004ac4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004a42:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8004a46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	d93e      	bls.n	8004ace <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8004a50:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004a54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	d939      	bls.n	8004ad2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9e>
 8004a5e:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004af8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8004a62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d934      	bls.n	8004ad6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa2>
 8004a6c:	eddf 7a23 	vldr	s15, [pc, #140]	; 8004afc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc8>
 8004a70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d92f      	bls.n	8004ada <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004a7a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004b00 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xcc>
 8004a7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	d92a      	bls.n	8004ade <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8004a88:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004b04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>
 8004a8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a94:	d925      	bls.n	8004ae2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xae>
 8004a96:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004b08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	d920      	bls.n	8004ae6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb2>
 8004aa4:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004b0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>
 8004aa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d91b      	bls.n	8004aea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb6>
 8004ab2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004b10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8004ab6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004abe:	d816      	bhi.n	8004aee <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xba>
 8004ac0:	2309      	movs	r3, #9
 8004ac2:	e000      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ac4:	230b      	movs	r3, #11
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004ac6:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
}
 8004aca:	2000      	movs	r0, #0
 8004acc:	4770      	bx	lr
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e7f9      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e7f7      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e7f5      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ada:	2304      	movs	r3, #4
 8004adc:	e7f3      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e7f1      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ae2:	2306      	movs	r3, #6
 8004ae4:	e7ef      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004ae6:	2307      	movs	r3, #7
 8004ae8:	e7ed      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004aea:	2308      	movs	r3, #8
 8004aec:	e7eb      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004aee:	230a      	movs	r3, #10
 8004af0:	e7e9      	b.n	8004ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004af2:	bf00      	nop
 8004af4:	3fcccccd 	.word	0x3fcccccd
 8004af8:	42500000 	.word	0x42500000
 8004afc:	42d00000 	.word	0x42d00000
 8004b00:	43500000 	.word	0x43500000
 8004b04:	43d08000 	.word	0x43d08000
 8004b08:	44504000 	.word	0x44504000
 8004b0c:	44d06000 	.word	0x44d06000
 8004b10:	45505000 	.word	0x45505000

08004b14 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004b14:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8004b18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b20:	d939      	bls.n	8004b96 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x82>
 8004b22:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004b26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	d937      	bls.n	8004ba0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x8c>
 8004b30:	eddf 7a23 	vldr	s15, [pc, #140]	; 8004bc0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8004b34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d932      	bls.n	8004ba4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004b3e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004bc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8004b42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4a:	d92d      	bls.n	8004ba8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x94>
 8004b4c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004bc8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 8004b50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b58:	d928      	bls.n	8004bac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x98>
 8004b5a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004bcc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 8004b5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b66:	d923      	bls.n	8004bb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8004b68:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004bd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004b6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	d91e      	bls.n	8004bb4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 8004b76:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004bd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 8004b7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b82:	d919      	bls.n	8004bb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8004b84:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 8004b88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	d814      	bhi.n	8004bbc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 8004b92:	2309      	movs	r3, #9
 8004b94:	e000      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004b96:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004b98:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
}
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	4770      	bx	lr
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e7f9      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e7f7      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	e7f5      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004bac:	2305      	movs	r3, #5
 8004bae:	e7f3      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004bb0:	2306      	movs	r3, #6
 8004bb2:	e7f1      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004bb4:	2307      	movs	r3, #7
 8004bb6:	e7ef      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	e7ed      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004bbc:	230a      	movs	r3, #10
 8004bbe:	e7eb      	b.n	8004b98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x84>
 8004bc0:	42500000 	.word	0x42500000
 8004bc4:	42d00000 	.word	0x42d00000
 8004bc8:	43500000 	.word	0x43500000
 8004bcc:	43d08000 	.word	0x43d08000
 8004bd0:	44504000 	.word	0x44504000
 8004bd4:	44d06000 	.word	0x44d06000
 8004bd8:	45505000 	.word	0x45505000

08004bdc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004bdc:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004bde:	6944      	ldr	r4, [r0, #20]
 8004be0:	7b00      	ldrb	r0, [r0, #12]
 8004be2:	47a0      	blx	r4
}
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004be6:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004be8:	6904      	ldr	r4, [r0, #16]
 8004bea:	7b00      	ldrb	r0, [r0, #12]
 8004bec:	47a0      	blx	r4
}
 8004bee:	bd10      	pop	{r4, pc}

08004bf0 <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8004bf0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d00b      	beq.n	8004c10 <LSM6DSO_ACC_Enable+0x20>
{
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8004bfc:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 8004c00:	3020      	adds	r0, #32
 8004c02:	f000 ffcd 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 8004c06:	b928      	cbnz	r0, 8004c14 <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8004c0e:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8004c10:	2000      	movs	r0, #0
}
 8004c12:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	e7f9      	b.n	8004c0e <LSM6DSO_ACC_Enable+0x1e>
	...

08004c1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
{
 8004c1c:	b508      	push	{r3, lr}
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004c1e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004ce4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc8>
 8004c22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2a:	d940      	bls.n	8004cae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x92>
 8004c2c:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8004c30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c38:	d93f      	bls.n	8004cba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9e>
 8004c3a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004c3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d93a      	bls.n	8004cbe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa2>
 8004c48:	eddf 7a27 	vldr	s15, [pc, #156]	; 8004ce8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xcc>
 8004c4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d935      	bls.n	8004cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004c56:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004cec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8004c5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d930      	bls.n	8004cc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8004c64:	eddf 7a22 	vldr	s15, [pc, #136]	; 8004cf0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	d92b      	bls.n	8004cca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xae>
 8004c72:	eddf 7a20 	vldr	s15, [pc, #128]	; 8004cf4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8004c76:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	d926      	bls.n	8004cce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb2>
 8004c80:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8004cf8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
 8004c84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	d921      	bls.n	8004cd2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb6>
 8004c8e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004cfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe0>
 8004c92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	d91c      	bls.n	8004cd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xba>
 8004c9c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004d00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe4>
 8004ca0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	d817      	bhi.n	8004cda <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8004caa:	2109      	movs	r1, #9
 8004cac:	e000      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cae:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004cb0:	3020      	adds	r0, #32
 8004cb2:	f000 ff75 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 8004cb6:	b990      	cbnz	r0, 8004cde <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc2>
}
 8004cb8:	bd08      	pop	{r3, pc}
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004cba:	2101      	movs	r1, #1
 8004cbc:	e7f8      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	e7f6      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	e7f4      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	e7f2      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cca:	2105      	movs	r1, #5
 8004ccc:	e7f0      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cce:	2106      	movs	r1, #6
 8004cd0:	e7ee      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cd2:	2107      	movs	r1, #7
 8004cd4:	e7ec      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cd6:	2108      	movs	r1, #8
 8004cd8:	e7ea      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8004cda:	210a      	movs	r1, #10
 8004cdc:	e7e8      	b.n	8004cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
    return LSM6DSO_ERROR;
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce2:	e7e9      	b.n	8004cb8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9c>
 8004ce4:	3fcccccd 	.word	0x3fcccccd
 8004ce8:	42500000 	.word	0x42500000
 8004cec:	42d00000 	.word	0x42d00000
 8004cf0:	43500000 	.word	0x43500000
 8004cf4:	43d08000 	.word	0x43d08000
 8004cf8:	44504000 	.word	0x44504000
 8004cfc:	44d06000 	.word	0x44d06000
 8004d00:	45505000 	.word	0x45505000

08004d04 <LSM6DSO_ACC_SetFullScale>:
{
 8004d04:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 8004d06:	2902      	cmp	r1, #2
 8004d08:	dd05      	ble.n	8004d16 <LSM6DSO_ACC_SetFullScale+0x12>
 8004d0a:	2904      	cmp	r1, #4
 8004d0c:	dd09      	ble.n	8004d22 <LSM6DSO_ACC_SetFullScale+0x1e>
 8004d0e:	2908      	cmp	r1, #8
 8004d10:	dc09      	bgt.n	8004d26 <LSM6DSO_ACC_SetFullScale+0x22>
 8004d12:	2103      	movs	r1, #3
 8004d14:	e000      	b.n	8004d18 <LSM6DSO_ACC_SetFullScale+0x14>
 8004d16:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004d18:	3020      	adds	r0, #32
 8004d1a:	f000 fd2d 	bl	8005778 <lsm6dso_xl_full_scale_set>
 8004d1e:	b920      	cbnz	r0, 8004d2a <LSM6DSO_ACC_SetFullScale+0x26>
}
 8004d20:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 8004d22:	2102      	movs	r1, #2
 8004d24:	e7f8      	b.n	8004d18 <LSM6DSO_ACC_SetFullScale+0x14>
 8004d26:	2101      	movs	r1, #1
 8004d28:	e7f6      	b.n	8004d18 <LSM6DSO_ACC_SetFullScale+0x14>
    return LSM6DSO_ERROR;
 8004d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2e:	e7f7      	b.n	8004d20 <LSM6DSO_ACC_SetFullScale+0x1c>

08004d30 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8004d30:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d00b      	beq.n	8004d50 <LSM6DSO_GYRO_Enable+0x20>
{
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004d3c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8004d40:	3020      	adds	r0, #32
 8004d42:	f000 ffb5 	bl	8005cb0 <lsm6dso_gy_data_rate_set>
 8004d46:	b928      	cbnz	r0, 8004d54 <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8004d4e:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8004d50:	2000      	movs	r0, #0
}
 8004d52:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	e7f9      	b.n	8004d4e <LSM6DSO_GYRO_Enable+0x1e>
	...

08004d5c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
{
 8004d5c:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004d5e:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8004d62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	d939      	bls.n	8004de0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x84>
 8004d6c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004d70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	d938      	bls.n	8004dec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004d7a:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004e14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb8>
 8004d7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d86:	d933      	bls.n	8004df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8004d88:	eddf 7a23 	vldr	s15, [pc, #140]	; 8004e18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004d8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d92e      	bls.n	8004df4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x98>
 8004d96:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004e1c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8004d9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d929      	bls.n	8004df8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8004da4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004e20 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 8004da8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db0:	d924      	bls.n	8004dfc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 8004db2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004e24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 8004db6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	d91f      	bls.n	8004e00 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8004dc0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004e28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 8004dc4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	d91a      	bls.n	8004e04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8004dce:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004e2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 8004dd2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	d815      	bhi.n	8004e08 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8004ddc:	2109      	movs	r1, #9
 8004dde:	e000      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004de0:	2101      	movs	r1, #1
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004de2:	3020      	adds	r0, #32
 8004de4:	f000 ff64 	bl	8005cb0 <lsm6dso_gy_data_rate_set>
 8004de8:	b980      	cbnz	r0, 8004e0c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb0>
}
 8004dea:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004dec:	2102      	movs	r1, #2
 8004dee:	e7f8      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004df0:	2103      	movs	r1, #3
 8004df2:	e7f6      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004df4:	2104      	movs	r1, #4
 8004df6:	e7f4      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004df8:	2105      	movs	r1, #5
 8004dfa:	e7f2      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004dfc:	2106      	movs	r1, #6
 8004dfe:	e7f0      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004e00:	2107      	movs	r1, #7
 8004e02:	e7ee      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004e04:	2108      	movs	r1, #8
 8004e06:	e7ec      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8004e08:	210a      	movs	r1, #10
 8004e0a:	e7ea      	b.n	8004de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSO_ERROR;
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e7eb      	b.n	8004dea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 8004e12:	bf00      	nop
 8004e14:	42500000 	.word	0x42500000
 8004e18:	42d00000 	.word	0x42d00000
 8004e1c:	43500000 	.word	0x43500000
 8004e20:	43d08000 	.word	0x43d08000
 8004e24:	44504000 	.word	0x44504000
 8004e28:	44d06000 	.word	0x44d06000
 8004e2c:	45505000 	.word	0x45505000

08004e30 <LSM6DSO_Init>:
{
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8004e34:	f100 0420 	add.w	r4, r0, #32
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fe24 	bl	8005a88 <lsm6dso_i3c_disable_set>
 8004e40:	bb60      	cbnz	r0, 8004e9c <LSM6DSO_Init+0x6c>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004e42:	2101      	movs	r1, #1
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 fe06 	bl	8005a56 <lsm6dso_auto_increment_set>
 8004e4a:	bb50      	cbnz	r0, 8004ea2 <LSM6DSO_Init+0x72>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 fd84 	bl	800595c <lsm6dso_block_data_update_set>
 8004e54:	bb40      	cbnz	r0, 8004ea8 <LSM6DSO_Init+0x78>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8004e56:	2100      	movs	r1, #0
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 fe45 	bl	8005ae8 <lsm6dso_fifo_mode_set>
 8004e5e:	bb30      	cbnz	r0, 8004eae <LSM6DSO_Init+0x7e>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004e60:	2304      	movs	r3, #4
 8004e62:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004e66:	2100      	movs	r1, #0
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f000 fe99 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 8004e6e:	bb08      	cbnz	r0, 8004eb4 <LSM6DSO_Init+0x84>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004e70:	2100      	movs	r1, #0
 8004e72:	4620      	mov	r0, r4
 8004e74:	f000 fc80 	bl	8005778 <lsm6dso_xl_full_scale_set>
 8004e78:	b9f8      	cbnz	r0, 8004eba <LSM6DSO_Init+0x8a>
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004e80:	2100      	movs	r1, #0
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 ff14 	bl	8005cb0 <lsm6dso_gy_data_rate_set>
 8004e88:	b9d0      	cbnz	r0, 8004ec0 <LSM6DSO_Init+0x90>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004e8a:	2106      	movs	r1, #6
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 fceb 	bl	8005868 <lsm6dso_gy_full_scale_set>
 8004e92:	b9c0      	cbnz	r0, 8004ec6 <LSM6DSO_Init+0x96>
  pObj->is_initialized = 1;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e7fb      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	e7f8      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	e7f5      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	e7f2      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	e7ef      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e7ec      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	e7e9      	b.n	8004e9a <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eca:	e7e6      	b.n	8004e9a <LSM6DSO_Init+0x6a>

08004ecc <LSM6DSO_GYRO_SetFullScale>:
{
 8004ecc:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004ece:	297d      	cmp	r1, #125	; 0x7d
 8004ed0:	dd09      	ble.n	8004ee6 <LSM6DSO_GYRO_SetFullScale+0x1a>
 8004ed2:	29fa      	cmp	r1, #250	; 0xfa
 8004ed4:	dd0d      	ble.n	8004ef2 <LSM6DSO_GYRO_SetFullScale+0x26>
 8004ed6:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8004eda:	dd0c      	ble.n	8004ef6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8004edc:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004ee0:	dc0b      	bgt.n	8004efa <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004ee2:	2104      	movs	r1, #4
 8004ee4:	e000      	b.n	8004ee8 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8004ee6:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004ee8:	3020      	adds	r0, #32
 8004eea:	f000 fcbd 	bl	8005868 <lsm6dso_gy_full_scale_set>
 8004eee:	b930      	cbnz	r0, 8004efe <LSM6DSO_GYRO_SetFullScale+0x32>
}
 8004ef0:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	e7f8      	b.n	8004ee8 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	e7f6      	b.n	8004ee8 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8004efa:	2106      	movs	r1, #6
 8004efc:	e7f4      	b.n	8004ee8 <LSM6DSO_GYRO_SetFullScale+0x1c>
    return LSM6DSO_ERROR;
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
 8004f02:	e7f5      	b.n	8004ef0 <LSM6DSO_GYRO_SetFullScale+0x24>

08004f04 <LSM6DSO_ReadID>:
{
 8004f04:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8004f06:	3020      	adds	r0, #32
 8004f08:	f000 fd9e 	bl	8005a48 <lsm6dso_device_id_get>
 8004f0c:	b900      	cbnz	r0, 8004f10 <LSM6DSO_ReadID+0xc>
}
 8004f0e:	bd08      	pop	{r3, pc}
    return LSM6DSO_ERROR;
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e7fb      	b.n	8004f0e <LSM6DSO_ReadID+0xa>

08004f16 <LSM6DSO_ACC_Disable>:
{
 8004f16:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8004f18:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004f1c:	b90b      	cbnz	r3, 8004f22 <LSM6DSO_ACC_Disable+0xc>
    return LSM6DSO_OK;
 8004f1e:	2000      	movs	r0, #0
}
 8004f20:	bd38      	pop	{r3, r4, r5, pc}
 8004f22:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004f24:	f100 0520 	add.w	r5, r0, #32
 8004f28:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 fc5e 	bl	80057ee <lsm6dso_xl_data_rate_get>
 8004f32:	b938      	cbnz	r0, 8004f44 <LSM6DSO_ACC_Disable+0x2e>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004f34:	2100      	movs	r1, #0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 fe32 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 8004f3c:	b928      	cbnz	r0, 8004f4a <LSM6DSO_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8004f3e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  return LSM6DSO_OK;
 8004f42:	e7ed      	b.n	8004f20 <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	e7ea      	b.n	8004f20 <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	e7e7      	b.n	8004f20 <LSM6DSO_ACC_Disable+0xa>

08004f50 <LSM6DSO_ACC_GetOutputDataRate>:
{
 8004f50:	b510      	push	{r4, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004f56:	f10d 0107 	add.w	r1, sp, #7
 8004f5a:	3020      	adds	r0, #32
 8004f5c:	f000 fc47 	bl	80057ee <lsm6dso_xl_data_rate_get>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d130      	bne.n	8004fc6 <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 8004f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f68:	2b0b      	cmp	r3, #11
 8004f6a:	d82f      	bhi.n	8004fcc <LSM6DSO_ACC_GetOutputDataRate+0x7c>
 8004f6c:	e8df f003 	tbb	[pc, r3]
 8004f70:	13100d06 	.word	0x13100d06
 8004f74:	1f1c1916 	.word	0x1f1c1916
 8004f78:	0a282522 	.word	0x0a282522
      *Odr = 0.0f;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6023      	str	r3, [r4, #0]
}
 8004f80:	b002      	add	sp, #8
 8004f82:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 8004f86:	6023      	str	r3, [r4, #0]
      break;
 8004f88:	e7fa      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 8004f8c:	6023      	str	r3, [r4, #0]
      break;
 8004f8e:	e7f7      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 8004f92:	6023      	str	r3, [r4, #0]
      break;
 8004f94:	e7f4      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 8004f98:	6023      	str	r3, [r4, #0]
      break;
 8004f9a:	e7f1      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 8004f9e:	6023      	str	r3, [r4, #0]
      break;
 8004fa0:	e7ee      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 8004fa4:	6023      	str	r3, [r4, #0]
      break;
 8004fa6:	e7eb      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8004fa8:	4b10      	ldr	r3, [pc, #64]	; (8004fec <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 8004faa:	6023      	str	r3, [r4, #0]
      break;
 8004fac:	e7e8      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 8004fb0:	6023      	str	r3, [r4, #0]
      break;
 8004fb2:	e7e5      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 8004fb6:	6023      	str	r3, [r4, #0]
      break;
 8004fb8:	e7e2      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8004fba:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <LSM6DSO_ACC_GetOutputDataRate+0xa8>)
 8004fbc:	6023      	str	r3, [r4, #0]
      break;
 8004fbe:	e7df      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <LSM6DSO_ACC_GetOutputDataRate+0xac>)
 8004fc2:	6023      	str	r3, [r4, #0]
      break;
 8004fc4:	e7dc      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	e7d9      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	e7d6      	b.n	8004f80 <LSM6DSO_ACC_GetOutputDataRate+0x30>
 8004fd2:	bf00      	nop
 8004fd4:	3fcccccd 	.word	0x3fcccccd
 8004fd8:	41480000 	.word	0x41480000
 8004fdc:	41d00000 	.word	0x41d00000
 8004fe0:	42500000 	.word	0x42500000
 8004fe4:	42d00000 	.word	0x42d00000
 8004fe8:	43500000 	.word	0x43500000
 8004fec:	43d08000 	.word	0x43d08000
 8004ff0:	44504000 	.word	0x44504000
 8004ff4:	44d06000 	.word	0x44d06000
 8004ff8:	45505000 	.word	0x45505000
 8004ffc:	45d05800 	.word	0x45d05800

08005000 <LSM6DSO_ACC_GetSensitivity>:
{
 8005000:	b510      	push	{r4, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005006:	f10d 0107 	add.w	r1, sp, #7
 800500a:	3020      	adds	r0, #32
 800500c:	f000 fbcd 	bl	80057aa <lsm6dso_xl_full_scale_get>
 8005010:	b9a0      	cbnz	r0, 800503c <LSM6DSO_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 8005012:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d813      	bhi.n	8005042 <LSM6DSO_ACC_GetSensitivity+0x42>
 800501a:	e8df f003 	tbb	[pc, r3]
 800501e:	0c02      	.short	0x0c02
 8005020:	0906      	.short	0x0906
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <LSM6DSO_ACC_GetSensitivity+0x48>)
 8005024:	6023      	str	r3, [r4, #0]
}
 8005026:	b002      	add	sp, #8
 8005028:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800502a:	4b08      	ldr	r3, [pc, #32]	; (800504c <LSM6DSO_ACC_GetSensitivity+0x4c>)
 800502c:	6023      	str	r3, [r4, #0]
      break;
 800502e:	e7fa      	b.n	8005026 <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <LSM6DSO_ACC_GetSensitivity+0x50>)
 8005032:	6023      	str	r3, [r4, #0]
      break;
 8005034:	e7f7      	b.n	8005026 <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <LSM6DSO_ACC_GetSensitivity+0x54>)
 8005038:	6023      	str	r3, [r4, #0]
      break;
 800503a:	e7f4      	b.n	8005026 <LSM6DSO_ACC_GetSensitivity+0x26>
    return LSM6DSO_ERROR;
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e7f1      	b.n	8005026 <LSM6DSO_ACC_GetSensitivity+0x26>
  switch (full_scale)
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	e7ee      	b.n	8005026 <LSM6DSO_ACC_GetSensitivity+0x26>
 8005048:	3d79db23 	.word	0x3d79db23
 800504c:	3df9db23 	.word	0x3df9db23
 8005050:	3e79db23 	.word	0x3e79db23
 8005054:	3ef9db23 	.word	0x3ef9db23

08005058 <LSM6DSO_ACC_GetFullScale>:
{
 8005058:	b510      	push	{r4, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800505e:	f10d 0107 	add.w	r1, sp, #7
 8005062:	3020      	adds	r0, #32
 8005064:	f000 fba1 	bl	80057aa <lsm6dso_xl_full_scale_get>
 8005068:	b9a0      	cbnz	r0, 8005094 <LSM6DSO_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 800506a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d813      	bhi.n	800509a <LSM6DSO_ACC_GetFullScale+0x42>
 8005072:	e8df f003 	tbb	[pc, r3]
 8005076:	0c02      	.short	0x0c02
 8005078:	0906      	.short	0x0906
      *FullScale =  2;
 800507a:	2302      	movs	r3, #2
 800507c:	6023      	str	r3, [r4, #0]
}
 800507e:	b002      	add	sp, #8
 8005080:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8005082:	2304      	movs	r3, #4
 8005084:	6023      	str	r3, [r4, #0]
      break;
 8005086:	e7fa      	b.n	800507e <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8005088:	2308      	movs	r3, #8
 800508a:	6023      	str	r3, [r4, #0]
      break;
 800508c:	e7f7      	b.n	800507e <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale = 16;
 800508e:	2310      	movs	r3, #16
 8005090:	6023      	str	r3, [r4, #0]
      break;
 8005092:	e7f4      	b.n	800507e <LSM6DSO_ACC_GetFullScale+0x26>
    return LSM6DSO_ERROR;
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	e7f1      	b.n	800507e <LSM6DSO_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	e7ee      	b.n	800507e <LSM6DSO_ACC_GetFullScale+0x26>

080050a0 <LSM6DSO_ACC_GetAxesRaw>:
{
 80050a0:	b510      	push	{r4, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80050a6:	4669      	mov	r1, sp
 80050a8:	3020      	adds	r0, #32
 80050aa:	f000 fc92 	bl	80059d2 <lsm6dso_acceleration_raw_get>
 80050ae:	b950      	cbnz	r0, 80050c6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80050b0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80050b4:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80050b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80050ba:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80050bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80050c0:	80a3      	strh	r3, [r4, #4]
}
 80050c2:	b002      	add	sp, #8
 80050c4:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	e7fa      	b.n	80050c2 <LSM6DSO_ACC_GetAxesRaw+0x22>

080050cc <LSM6DSO_ACC_GetAxes>:
{
 80050cc:	b530      	push	{r4, r5, lr}
 80050ce:	b085      	sub	sp, #20
 80050d0:	4605      	mov	r5, r0
 80050d2:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 80050d4:	2300      	movs	r3, #0
 80050d6:	9301      	str	r3, [sp, #4]
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80050d8:	a902      	add	r1, sp, #8
 80050da:	3020      	adds	r0, #32
 80050dc:	f000 fc79 	bl	80059d2 <lsm6dso_acceleration_raw_get>
 80050e0:	bb60      	cbnz	r0, 800513c <LSM6DSO_ACC_GetAxes+0x70>
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80050e2:	a901      	add	r1, sp, #4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f7ff ff8b 	bl	8005000 <LSM6DSO_ACC_GetSensitivity>
 80050ea:	bb50      	cbnz	r0, 8005142 <LSM6DSO_ACC_GetAxes+0x76>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80050ec:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80050f0:	ee07 3a10 	vmov	s14, r3
 80050f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80050fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005100:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005104:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005108:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800510c:	ee07 3a10 	vmov	s14, r3
 8005110:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005118:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800511c:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005120:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005124:	ee07 3a10 	vmov	s14, r3
 8005128:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800512c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005134:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8005138:	b005      	add	sp, #20
 800513a:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e7fa      	b.n	8005138 <LSM6DSO_ACC_GetAxes+0x6c>
    return LSM6DSO_ERROR;
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	e7f7      	b.n	8005138 <LSM6DSO_ACC_GetAxes+0x6c>

08005148 <LSM6DSO_GYRO_Disable>:
{
 8005148:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 800514a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800514e:	b90b      	cbnz	r3, 8005154 <LSM6DSO_GYRO_Disable+0xc>
    return LSM6DSO_OK;
 8005150:	2000      	movs	r0, #0
}
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005156:	f100 0520 	add.w	r5, r0, #32
 800515a:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800515e:	4628      	mov	r0, r5
 8005160:	f000 fbc2 	bl	80058e8 <lsm6dso_gy_data_rate_get>
 8005164:	b938      	cbnz	r0, 8005176 <LSM6DSO_GYRO_Disable+0x2e>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005166:	2100      	movs	r1, #0
 8005168:	4628      	mov	r0, r5
 800516a:	f000 fda1 	bl	8005cb0 <lsm6dso_gy_data_rate_set>
 800516e:	b928      	cbnz	r0, 800517c <LSM6DSO_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 8005170:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return LSM6DSO_OK;
 8005174:	e7ed      	b.n	8005152 <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 8005176:	f04f 30ff 	mov.w	r0, #4294967295
 800517a:	e7ea      	b.n	8005152 <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	e7e7      	b.n	8005152 <LSM6DSO_GYRO_Disable+0xa>

08005182 <LSM6DSO_DeInit>:
{
 8005182:	b510      	push	{r4, lr}
 8005184:	4604      	mov	r4, r0
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005186:	f7ff fec6 	bl	8004f16 <LSM6DSO_ACC_Disable>
 800518a:	b950      	cbnz	r0, 80051a2 <LSM6DSO_DeInit+0x20>
  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff ffdb 	bl	8005148 <LSM6DSO_GYRO_Disable>
 8005192:	b948      	cbnz	r0, 80051a8 <LSM6DSO_DeInit+0x26>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005194:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005198:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  pObj->is_initialized = 0;
 800519c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 80051a0:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	e7fb      	b.n	80051a0 <LSM6DSO_DeInit+0x1e>
    return LSM6DSO_ERROR;
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e7f8      	b.n	80051a0 <LSM6DSO_DeInit+0x1e>
	...

080051b0 <LSM6DSO_GYRO_GetOutputDataRate>:
{
 80051b0:	b510      	push	{r4, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80051b6:	f10d 0107 	add.w	r1, sp, #7
 80051ba:	3020      	adds	r0, #32
 80051bc:	f000 fb94 	bl	80058e8 <lsm6dso_gy_data_rate_get>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d12d      	bne.n	8005220 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 80051c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051c8:	2b0a      	cmp	r3, #10
 80051ca:	d82c      	bhi.n	8005226 <LSM6DSO_GYRO_GetOutputDataRate+0x76>
 80051cc:	e8df f003 	tbb	[pc, r3]
 80051d0:	100d0a06 	.word	0x100d0a06
 80051d4:	1c191613 	.word	0x1c191613
 80051d8:	221f      	.short	0x221f
 80051da:	25          	.byte	0x25
 80051db:	00          	.byte	0x00
      *Odr = 0.0f;
 80051dc:	2300      	movs	r3, #0
 80051de:	6023      	str	r3, [r4, #0]
}
 80051e0:	b002      	add	sp, #8
 80051e2:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 80051e6:	6023      	str	r3, [r4, #0]
      break;
 80051e8:	e7fa      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 80051ec:	6023      	str	r3, [r4, #0]
      break;
 80051ee:	e7f7      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80051f0:	4b10      	ldr	r3, [pc, #64]	; (8005234 <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 80051f2:	6023      	str	r3, [r4, #0]
      break;
 80051f4:	e7f4      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 80051f8:	6023      	str	r3, [r4, #0]
      break;
 80051fa:	e7f1      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 80051fe:	6023      	str	r3, [r4, #0]
      break;
 8005200:	e7ee      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 8005204:	6023      	str	r3, [r4, #0]
      break;
 8005206:	e7eb      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 800520a:	6023      	str	r3, [r4, #0]
      break;
 800520c:	e7e8      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 8005210:	6023      	str	r3, [r4, #0]
      break;
 8005212:	e7e5      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 8005216:	6023      	str	r3, [r4, #0]
      break;
 8005218:	e7e2      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <LSM6DSO_GYRO_GetOutputDataRate+0xa0>)
 800521c:	6023      	str	r3, [r4, #0]
      break;
 800521e:	e7df      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	e7dc      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8005226:	f04f 30ff 	mov.w	r0, #4294967295
 800522a:	e7d9      	b.n	80051e0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 800522c:	41480000 	.word	0x41480000
 8005230:	41d00000 	.word	0x41d00000
 8005234:	42500000 	.word	0x42500000
 8005238:	42d00000 	.word	0x42d00000
 800523c:	43500000 	.word	0x43500000
 8005240:	43d08000 	.word	0x43d08000
 8005244:	44504000 	.word	0x44504000
 8005248:	44d06000 	.word	0x44d06000
 800524c:	45505000 	.word	0x45505000
 8005250:	45d05800 	.word	0x45d05800

08005254 <LSM6DSO_GYRO_GetSensitivity>:
{
 8005254:	b510      	push	{r4, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800525a:	f10d 0107 	add.w	r1, sp, #7
 800525e:	3020      	adds	r0, #32
 8005260:	f000 fb1b 	bl	800589a <lsm6dso_gy_full_scale_get>
 8005264:	b9c8      	cbnz	r0, 800529a <LSM6DSO_GYRO_GetSensitivity+0x46>
  switch (full_scale)
 8005266:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800526a:	2b06      	cmp	r3, #6
 800526c:	d818      	bhi.n	80052a0 <LSM6DSO_GYRO_GetSensitivity+0x4c>
 800526e:	e8df f003 	tbb	[pc, r3]
 8005272:	0408      	.short	0x0408
 8005274:	170e170b 	.word	0x170e170b
 8005278:	11          	.byte	0x11
 8005279:	00          	.byte	0x00
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <LSM6DSO_GYRO_GetSensitivity+0x54>)
 800527c:	6023      	str	r3, [r4, #0]
}
 800527e:	b002      	add	sp, #8
 8005280:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <LSM6DSO_GYRO_GetSensitivity+0x58>)
 8005284:	6023      	str	r3, [r4, #0]
      break;
 8005286:	e7fa      	b.n	800527e <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 800528a:	6023      	str	r3, [r4, #0]
      break;
 800528c:	e7f7      	b.n	800527e <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <LSM6DSO_GYRO_GetSensitivity+0x60>)
 8005290:	6023      	str	r3, [r4, #0]
      break;
 8005292:	e7f4      	b.n	800527e <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <LSM6DSO_GYRO_GetSensitivity+0x64>)
 8005296:	6023      	str	r3, [r4, #0]
      break;
 8005298:	e7f1      	b.n	800527e <LSM6DSO_GYRO_GetSensitivity+0x2a>
    return LSM6DSO_ERROR;
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	e7ee      	b.n	800527e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  switch (full_scale)
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e7eb      	b.n	800527e <LSM6DSO_GYRO_GetSensitivity+0x2a>
 80052a6:	bf00      	nop
 80052a8:	408c0000 	.word	0x408c0000
 80052ac:	410c0000 	.word	0x410c0000
 80052b0:	418c0000 	.word	0x418c0000
 80052b4:	420c0000 	.word	0x420c0000
 80052b8:	428c0000 	.word	0x428c0000

080052bc <LSM6DSO_GYRO_GetFullScale>:
{
 80052bc:	b510      	push	{r4, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80052c2:	f10d 0107 	add.w	r1, sp, #7
 80052c6:	3020      	adds	r0, #32
 80052c8:	f000 fae7 	bl	800589a <lsm6dso_gy_full_scale_get>
 80052cc:	b9e0      	cbnz	r0, 8005308 <LSM6DSO_GYRO_GetFullScale+0x4c>
  switch (fs_low_level)
 80052ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d81b      	bhi.n	800530e <LSM6DSO_GYRO_GetFullScale+0x52>
 80052d6:	e8df f003 	tbb	[pc, r3]
 80052da:	0408      	.short	0x0408
 80052dc:	1a0f1a0b 	.word	0x1a0f1a0b
 80052e0:	13          	.byte	0x13
 80052e1:	00          	.byte	0x00
      *FullScale =  125;
 80052e2:	237d      	movs	r3, #125	; 0x7d
 80052e4:	6023      	str	r3, [r4, #0]
}
 80052e6:	b002      	add	sp, #8
 80052e8:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 80052ea:	23fa      	movs	r3, #250	; 0xfa
 80052ec:	6023      	str	r3, [r4, #0]
      break;
 80052ee:	e7fa      	b.n	80052e6 <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale =  500;
 80052f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80052f4:	6023      	str	r3, [r4, #0]
      break;
 80052f6:	e7f6      	b.n	80052e6 <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 1000;
 80052f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052fc:	6023      	str	r3, [r4, #0]
      break;
 80052fe:	e7f2      	b.n	80052e6 <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 2000;
 8005300:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005304:	6023      	str	r3, [r4, #0]
      break;
 8005306:	e7ee      	b.n	80052e6 <LSM6DSO_GYRO_GetFullScale+0x2a>
    return LSM6DSO_ERROR;
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e7eb      	b.n	80052e6 <LSM6DSO_GYRO_GetFullScale+0x2a>
  switch (fs_low_level)
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	e7e8      	b.n	80052e6 <LSM6DSO_GYRO_GetFullScale+0x2a>

08005314 <LSM6DSO_GYRO_GetAxesRaw>:
{
 8005314:	b510      	push	{r4, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800531a:	4669      	mov	r1, sp
 800531c:	3020      	adds	r0, #32
 800531e:	f000 fb36 	bl	800598e <lsm6dso_angular_rate_raw_get>
 8005322:	b950      	cbnz	r0, 800533a <LSM6DSO_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8005324:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005328:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 800532a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800532e:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8005330:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005334:	80a3      	strh	r3, [r4, #4]
}
 8005336:	b002      	add	sp, #8
 8005338:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800533a:	f04f 30ff 	mov.w	r0, #4294967295
 800533e:	e7fa      	b.n	8005336 <LSM6DSO_GYRO_GetAxesRaw+0x22>

08005340 <LSM6DSO_GYRO_GetAxes>:
{
 8005340:	b530      	push	{r4, r5, lr}
 8005342:	b085      	sub	sp, #20
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005348:	a902      	add	r1, sp, #8
 800534a:	3020      	adds	r0, #32
 800534c:	f000 fb1f 	bl	800598e <lsm6dso_angular_rate_raw_get>
 8005350:	bb60      	cbnz	r0, 80053ac <LSM6DSO_GYRO_GetAxes+0x6c>
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005352:	a901      	add	r1, sp, #4
 8005354:	4628      	mov	r0, r5
 8005356:	f7ff ff7d 	bl	8005254 <LSM6DSO_GYRO_GetSensitivity>
 800535a:	bb50      	cbnz	r0, 80053b2 <LSM6DSO_GYRO_GetAxes+0x72>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800535c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005360:	ee07 3a10 	vmov	s14, r3
 8005364:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005368:	eddd 7a01 	vldr	s15, [sp, #4]
 800536c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005370:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005374:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005378:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800537c:	ee07 3a10 	vmov	s14, r3
 8005380:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005388:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800538c:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005390:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005394:	ee07 3a10 	vmov	s14, r3
 8005398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800539c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a4:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80053a8:	b005      	add	sp, #20
 80053aa:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	e7fa      	b.n	80053a8 <LSM6DSO_GYRO_GetAxes+0x68>
    return LSM6DSO_ERROR;
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	e7f7      	b.n	80053a8 <LSM6DSO_GYRO_GetAxes+0x68>

080053b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
{
 80053b8:	b530      	push	{r4, r5, lr}
 80053ba:	ed2d 8b02 	vpush	{d8}
 80053be:	b083      	sub	sp, #12
 80053c0:	4604      	mov	r4, r0
 80053c2:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 80053c6:	2901      	cmp	r1, #1
 80053c8:	d061      	beq.n	800548e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xd6>
 80053ca:	2902      	cmp	r1, #2
 80053cc:	f000 80aa 	beq.w	8005524 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x16c>
 80053d0:	b129      	cbz	r1, 80053de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x26>
 80053d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80053d6:	b003      	add	sp, #12
 80053d8:	ecbd 8b02 	vpop	{d8}
 80053dc:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80053de:	f100 0520 	add.w	r5, r0, #32
 80053e2:	2301      	movs	r3, #1
 80053e4:	466a      	mov	r2, sp
 80053e6:	2114      	movs	r1, #20
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 f9bb 	bl	8005764 <lsm6dso_read_reg>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d147      	bne.n	8005482 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
      if (val1.xl_ulp_en != 0U)
 80053f2:	f99d 3000 	ldrsb.w	r3, [sp]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da10      	bge.n	800541c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x64>
        if (pObj->acc_is_enabled == 1U)
 80053fa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d02a      	beq.n	8005458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa0>
        val1.xl_ulp_en = 0;
 8005402:	f89d 3000 	ldrb.w	r3, [sp]
 8005406:	f36f 13c7 	bfc	r3, #7, #1
 800540a:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800540e:	2301      	movs	r3, #1
 8005410:	466a      	mov	r2, sp
 8005412:	2114      	movs	r1, #20
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f9aa 	bl	800576e <lsm6dso_write_reg>
 800541a:	bb90      	cbnz	r0, 8005482 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800541c:	2301      	movs	r3, #1
 800541e:	aa01      	add	r2, sp, #4
 8005420:	2115      	movs	r1, #21
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f99e 	bl	8005764 <lsm6dso_read_reg>
 8005428:	bb58      	cbnz	r0, 8005482 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
      if (val2.xl_hm_mode != 0U)
 800542a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800542e:	f013 0f10 	tst.w	r3, #16
 8005432:	d118      	bne.n	8005466 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xae>
      if (newOdr < 12.5f)
 8005434:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8005438:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800543c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005440:	d422      	bmi.n	8005488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xd0>
  if (pObj->acc_is_enabled == 1U)
 8005442:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005446:	2b01      	cmp	r3, #1
 8005448:	f000 80c4 	beq.w	80055d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x21c>
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800544c:	eeb0 0a48 	vmov.f32	s0, s16
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff faef 	bl	8004a34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005456:	e7be      	b.n	80053d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005458:	2100      	movs	r1, #0
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fba0 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 8005460:	2800      	cmp	r0, #0
 8005462:	d0ce      	beq.n	8005402 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4a>
 8005464:	e00d      	b.n	8005482 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xca>
        val2.xl_hm_mode = 0U;
 8005466:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800546a:	f36f 1304 	bfc	r3, #4, #1
 800546e:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005472:	2301      	movs	r3, #1
 8005474:	aa01      	add	r2, sp, #4
 8005476:	2115      	movs	r1, #21
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f978 	bl	800576e <lsm6dso_write_reg>
 800547e:	2800      	cmp	r0, #0
 8005480:	d0d8      	beq.n	8005434 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        return LSM6DSO_ERROR;
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	e7a6      	b.n	80053d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
        newOdr = 12.5f;
 8005488:	eeb2 8a09 	vmov.f32	s16, #41	; 0x41480000  12.5
  if (ret == LSM6DSO_ERROR)
 800548c:	e7d9      	b.n	8005442 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800548e:	f100 0520 	add.w	r5, r0, #32
 8005492:	2301      	movs	r3, #1
 8005494:	466a      	mov	r2, sp
 8005496:	2114      	movs	r1, #20
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f963 	bl	8005764 <lsm6dso_read_reg>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d13d      	bne.n	800551e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
      if (val1.xl_ulp_en != 0U)
 80054a2:	f99d 3000 	ldrsb.w	r3, [sp]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da10      	bge.n	80054cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x114>
        if (pObj->acc_is_enabled == 1U)
 80054aa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d022      	beq.n	80054f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x140>
        val1.xl_ulp_en = 0;
 80054b2:	f89d 3000 	ldrb.w	r3, [sp]
 80054b6:	f36f 13c7 	bfc	r3, #7, #1
 80054ba:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80054be:	2301      	movs	r3, #1
 80054c0:	466a      	mov	r2, sp
 80054c2:	2114      	movs	r1, #20
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 f952 	bl	800576e <lsm6dso_write_reg>
 80054ca:	bb40      	cbnz	r0, 800551e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80054cc:	2301      	movs	r3, #1
 80054ce:	aa01      	add	r2, sp, #4
 80054d0:	2115      	movs	r1, #21
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 f946 	bl	8005764 <lsm6dso_read_reg>
 80054d8:	bb08      	cbnz	r0, 800551e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
      if (val2.xl_hm_mode == 0U)
 80054da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054de:	f013 0f10 	tst.w	r3, #16
 80054e2:	d010      	beq.n	8005506 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x14e>
      if (newOdr > 208.0f)
 80054e4:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80055e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
 80054e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	dda7      	ble.n	8005442 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
        newOdr = 208.0f;
 80054f2:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 80055e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
  if (ret == LSM6DSO_ERROR)
 80054f6:	e7a4      	b.n	8005442 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80054f8:	2100      	movs	r1, #0
 80054fa:	4628      	mov	r0, r5
 80054fc:	f000 fb50 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 8005500:	2800      	cmp	r0, #0
 8005502:	d0d6      	beq.n	80054b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfa>
 8005504:	e00b      	b.n	800551e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x166>
        val2.xl_hm_mode = 1U;
 8005506:	f043 0310 	orr.w	r3, r3, #16
 800550a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800550e:	2301      	movs	r3, #1
 8005510:	aa01      	add	r2, sp, #4
 8005512:	2115      	movs	r1, #21
 8005514:	4628      	mov	r0, r5
 8005516:	f000 f92a 	bl	800576e <lsm6dso_write_reg>
 800551a:	2800      	cmp	r0, #0
 800551c:	d0e2      	beq.n	80054e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x12c>
        return LSM6DSO_ERROR;
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	e758      	b.n	80053d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005524:	f100 0520 	add.w	r5, r0, #32
 8005528:	2301      	movs	r3, #1
 800552a:	aa01      	add	r2, sp, #4
 800552c:	2115      	movs	r1, #21
 800552e:	4628      	mov	r0, r5
 8005530:	f000 f918 	bl	8005764 <lsm6dso_read_reg>
 8005534:	2800      	cmp	r0, #0
 8005536:	d143      	bne.n	80055c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      if (val2.xl_hm_mode != 0U)
 8005538:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800553c:	f013 0f10 	tst.w	r3, #16
 8005540:	d12a      	bne.n	8005598 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e0>
      if (pObj->gyro_is_enabled == 1U)
 8005542:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005546:	2b01      	cmp	r3, #1
 8005548:	d035      	beq.n	80055b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1fe>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800554a:	2301      	movs	r3, #1
 800554c:	466a      	mov	r2, sp
 800554e:	2114      	movs	r1, #20
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f907 	bl	8005764 <lsm6dso_read_reg>
 8005556:	bb98      	cbnz	r0, 80055c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      if (val1.xl_ulp_en == 0U)
 8005558:	f99d 3000 	ldrsb.w	r3, [sp]
 800555c:	2b00      	cmp	r3, #0
 800555e:	db10      	blt.n	8005582 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ca>
        if (pObj->acc_is_enabled == 1U)
 8005560:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005564:	2b01      	cmp	r3, #1
 8005566:	d02e      	beq.n	80055c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20e>
        val1.xl_ulp_en = 1U;
 8005568:	f89d 3000 	ldrb.w	r3, [sp]
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005574:	2301      	movs	r3, #1
 8005576:	466a      	mov	r2, sp
 8005578:	2114      	movs	r1, #20
 800557a:	4628      	mov	r0, r5
 800557c:	f000 f8f7 	bl	800576e <lsm6dso_write_reg>
 8005580:	b9f0      	cbnz	r0, 80055c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      if (newOdr > 208.0f)
 8005582:	eddf 7a17 	vldr	s15, [pc, #92]	; 80055e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
 8005586:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	f77f af58 	ble.w	8005442 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
        newOdr = 208.0f;
 8005592:	ed9f 8a13 	vldr	s16, [pc, #76]	; 80055e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x228>
  if (ret == LSM6DSO_ERROR)
 8005596:	e754      	b.n	8005442 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x8a>
        val2.xl_hm_mode = 0U;
 8005598:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800559c:	f36f 1304 	bfc	r3, #4, #1
 80055a0:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80055a4:	2301      	movs	r3, #1
 80055a6:	aa01      	add	r2, sp, #4
 80055a8:	2115      	movs	r1, #21
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f8df 	bl	800576e <lsm6dso_write_reg>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d0c6      	beq.n	8005542 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
 80055b4:	e004      	b.n	80055c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff fdc6 	bl	8005148 <LSM6DSO_GYRO_Disable>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0c4      	beq.n	800554a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x192>
        return LSM6DSO_ERROR;
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	e707      	b.n	80053d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80055c6:	2100      	movs	r1, #0
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 fae9 	bl	8005ba0 <lsm6dso_xl_data_rate_set>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0ca      	beq.n	8005568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1b0>
 80055d2:	e7f5      	b.n	80055c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80055d4:	eeb0 0a48 	vmov.f32	s0, s16
 80055d8:	4620      	mov	r0, r4
 80055da:	f7ff fb1f 	bl	8004c1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80055de:	e6fa      	b.n	80053d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e>
 80055e0:	43500000 	.word	0x43500000

080055e4 <LSM6DSO_ACC_SetOutputDataRate>:
{
 80055e4:	b508      	push	{r3, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80055e6:	2100      	movs	r1, #0
 80055e8:	f7ff fee6 	bl	80053b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
}
 80055ec:	bd08      	pop	{r3, pc}
	...

080055f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
{
 80055f0:	b530      	push	{r4, r5, lr}
 80055f2:	ed2d 8b02 	vpush	{d8}
 80055f6:	b083      	sub	sp, #12
 80055f8:	4604      	mov	r4, r0
 80055fa:	eeb0 8a40 	vmov.f32	s16, s0
  switch (Mode)
 80055fe:	b139      	cbz	r1, 8005610 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x20>
 8005600:	2901      	cmp	r1, #1
 8005602:	d02d      	beq.n	8005660 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x70>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005608:	b003      	add	sp, #12
 800560a:	ecbd 8b02 	vpop	{d8}
 800560e:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005610:	f100 0520 	add.w	r5, r0, #32
 8005614:	2301      	movs	r3, #1
 8005616:	aa01      	add	r2, sp, #4
 8005618:	2116      	movs	r1, #22
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f8a2 	bl	8005764 <lsm6dso_read_reg>
 8005620:	b9d8      	cbnz	r0, 800565a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x6a>
      if (val1.g_hm_mode != 0U)
 8005622:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	db09      	blt.n	800563e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x4e>
  if (pObj->gyro_is_enabled == 1U)
 800562a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800562e:	2b01      	cmp	r3, #1
 8005630:	d03e      	beq.n	80056b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc0>
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005632:	eeb0 0a48 	vmov.f32	s0, s16
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff fa6c 	bl	8004b14 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800563c:	e7e4      	b.n	8005608 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
        val1.g_hm_mode = 0U;
 800563e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005642:	f36f 13c7 	bfc	r3, #7, #1
 8005646:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800564a:	2301      	movs	r3, #1
 800564c:	aa01      	add	r2, sp, #4
 800564e:	2116      	movs	r1, #22
 8005650:	4628      	mov	r0, r5
 8005652:	f000 f88c 	bl	800576e <lsm6dso_write_reg>
 8005656:	2800      	cmp	r0, #0
 8005658:	d0e7      	beq.n	800562a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3a>
        return LSM6DSO_ERROR;
 800565a:	f04f 30ff 	mov.w	r0, #4294967295
 800565e:	e7d3      	b.n	8005608 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005660:	f100 0520 	add.w	r5, r0, #32
 8005664:	2301      	movs	r3, #1
 8005666:	aa01      	add	r2, sp, #4
 8005668:	2116      	movs	r1, #22
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f87a 	bl	8005764 <lsm6dso_read_reg>
 8005670:	b9d8      	cbnz	r0, 80056aa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xba>
      if (val1.g_hm_mode == 0U)
 8005672:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da09      	bge.n	800568e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x9e>
      if (newOdr > 208.0f)
 800567a:	eddf 7a10 	vldr	s15, [pc, #64]	; 80056bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xcc>
 800567e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005686:	ddd0      	ble.n	800562a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3a>
        newOdr = 208.0f;
 8005688:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80056bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xcc>
  if (ret == LSM6DSO_ERROR)
 800568c:	e7cd      	b.n	800562a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x3a>
        val1.g_hm_mode = 1U;
 800568e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800569a:	2301      	movs	r3, #1
 800569c:	aa01      	add	r2, sp, #4
 800569e:	2116      	movs	r1, #22
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 f864 	bl	800576e <lsm6dso_write_reg>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d0e7      	beq.n	800567a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x8a>
        return LSM6DSO_ERROR;
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295
 80056ae:	e7ab      	b.n	8005608 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80056b0:	eeb0 0a48 	vmov.f32	s0, s16
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff fb51 	bl	8004d5c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80056ba:	e7a5      	b.n	8005608 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x18>
 80056bc:	43500000 	.word	0x43500000

080056c0 <LSM6DSO_GYRO_SetOutputDataRate>:
{
 80056c0:	b508      	push	{r3, lr}
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80056c2:	2100      	movs	r1, #0
 80056c4:	f7ff ff94 	bl	80055f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
}
 80056c8:	bd08      	pop	{r3, pc}

080056ca <LSM6DSO_Write_Reg>:
{
 80056ca:	b500      	push	{lr}
 80056cc:	b083      	sub	sp, #12
 80056ce:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80056d2:	2301      	movs	r3, #1
 80056d4:	f10d 0207 	add.w	r2, sp, #7
 80056d8:	3020      	adds	r0, #32
 80056da:	f000 f848 	bl	800576e <lsm6dso_write_reg>
 80056de:	b910      	cbnz	r0, 80056e6 <LSM6DSO_Write_Reg+0x1c>
}
 80056e0:	b003      	add	sp, #12
 80056e2:	f85d fb04 	ldr.w	pc, [sp], #4
    return LSM6DSO_ERROR;
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	e7f9      	b.n	80056e0 <LSM6DSO_Write_Reg+0x16>

080056ec <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d02b      	beq.n	8005748 <LSM6DSO_RegisterBusIO+0x5c>
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 80056f4:	680b      	ldr	r3, [r1, #0]
 80056f6:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80056f8:	684a      	ldr	r2, [r1, #4]
 80056fa:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80056fc:	688a      	ldr	r2, [r1, #8]
 80056fe:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8005700:	7b0a      	ldrb	r2, [r1, #12]
 8005702:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005704:	690a      	ldr	r2, [r1, #16]
 8005706:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005708:	694a      	ldr	r2, [r1, #20]
 800570a:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800570c:	698a      	ldr	r2, [r1, #24]
 800570e:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005710:	4a12      	ldr	r2, [pc, #72]	; (800575c <LSM6DSO_RegisterBusIO+0x70>)
 8005712:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005714:	4a12      	ldr	r2, [pc, #72]	; (8005760 <LSM6DSO_RegisterBusIO+0x74>)
 8005716:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005718:	69ca      	ldr	r2, [r1, #28]
 800571a:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800571c:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 800571e:	b1b3      	cbz	r3, 800574e <LSM6DSO_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005720:	4798      	blx	r3
 8005722:	b9b8      	cbnz	r0, 8005754 <LSM6DSO_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d000      	beq.n	800572c <LSM6DSO_RegisterBusIO+0x40>
}
 800572a:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 800572c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1fa      	bne.n	800572a <LSM6DSO_RegisterBusIO+0x3e>
          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005734:	220c      	movs	r2, #12
 8005736:	2112      	movs	r1, #18
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff ffc6 	bl	80056ca <LSM6DSO_Write_Reg>
 800573e:	2800      	cmp	r0, #0
 8005740:	d0f3      	beq.n	800572a <LSM6DSO_RegisterBusIO+0x3e>
            ret = LSM6DSO_ERROR;
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005746:	e7f0      	b.n	800572a <LSM6DSO_RegisterBusIO+0x3e>
    ret = LSM6DSO_ERROR;
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
}
 800574c:	4770      	bx	lr
      ret = LSM6DSO_ERROR;
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	e7ea      	b.n	800572a <LSM6DSO_RegisterBusIO+0x3e>
      ret = LSM6DSO_ERROR;
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e7e7      	b.n	800572a <LSM6DSO_RegisterBusIO+0x3e>
 800575a:	bf00      	nop
 800575c:	08004bdd 	.word	0x08004bdd
 8005760:	08004be7 	.word	0x08004be7

08005764 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005764:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005766:	6844      	ldr	r4, [r0, #4]
 8005768:	68c0      	ldr	r0, [r0, #12]
 800576a:	47a0      	blx	r4

  return ret;
}
 800576c:	bd10      	pop	{r4, pc}

0800576e <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800576e:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005770:	6804      	ldr	r4, [r0, #0]
 8005772:	68c0      	ldr	r0, [r0, #12]
 8005774:	47a0      	blx	r4

  return ret;
}
 8005776:	bd10      	pop	{r4, pc}

08005778 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005778:	b530      	push	{r4, r5, lr}
 800577a:	b083      	sub	sp, #12
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005780:	2301      	movs	r3, #1
 8005782:	aa01      	add	r2, sp, #4
 8005784:	2110      	movs	r1, #16
 8005786:	f7ff ffed 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 800578a:	b108      	cbz	r0, 8005790 <lsm6dso_xl_full_scale_set+0x18>
    reg.fs_xl = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800578c:	b003      	add	sp, #12
 800578e:	bd30      	pop	{r4, r5, pc}
    reg.fs_xl = (uint8_t) val;
 8005790:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005794:	f365 0383 	bfi	r3, r5, #2, #2
 8005798:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800579c:	2301      	movs	r3, #1
 800579e:	aa01      	add	r2, sp, #4
 80057a0:	2110      	movs	r1, #16
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff ffe3 	bl	800576e <lsm6dso_write_reg>
  return ret;
 80057a8:	e7f0      	b.n	800578c <lsm6dso_xl_full_scale_set+0x14>

080057aa <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80057aa:	b510      	push	{r4, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80057b0:	2301      	movs	r3, #1
 80057b2:	aa01      	add	r2, sp, #4
 80057b4:	2110      	movs	r1, #16
 80057b6:	f7ff ffd5 	bl	8005764 <lsm6dso_read_reg>

  switch (reg.fs_xl)
 80057ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d810      	bhi.n	80057e8 <lsm6dso_xl_full_scale_get+0x3e>
 80057c6:	e8df f003 	tbb	[pc, r3]
 80057ca:	0602      	.short	0x0602
 80057cc:	0c09      	.short	0x0c09
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80057ce:	2300      	movs	r3, #0
 80057d0:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_2g;
      break;
  }

  return ret;
}
 80057d2:	b002      	add	sp, #8
 80057d4:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_16g;
 80057d6:	2301      	movs	r3, #1
 80057d8:	7023      	strb	r3, [r4, #0]
      break;
 80057da:	e7fa      	b.n	80057d2 <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_4g;
 80057dc:	2302      	movs	r3, #2
 80057de:	7023      	strb	r3, [r4, #0]
      break;
 80057e0:	e7f7      	b.n	80057d2 <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_8g;
 80057e2:	2303      	movs	r3, #3
 80057e4:	7023      	strb	r3, [r4, #0]
      break;
 80057e6:	e7f4      	b.n	80057d2 <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_2g;
 80057e8:	2300      	movs	r3, #0
 80057ea:	7023      	strb	r3, [r4, #0]
  return ret;
 80057ec:	e7f1      	b.n	80057d2 <lsm6dso_xl_full_scale_get+0x28>

080057ee <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80057ee:	b510      	push	{r4, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80057f4:	2301      	movs	r3, #1
 80057f6:	aa01      	add	r2, sp, #4
 80057f8:	2110      	movs	r1, #16
 80057fa:	f7ff ffb3 	bl	8005764 <lsm6dso_read_reg>

  switch (reg.odr_xl)
 80057fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	2b0b      	cmp	r3, #11
 8005806:	d82c      	bhi.n	8005862 <lsm6dso_xl_data_rate_get+0x74>
 8005808:	e8df f003 	tbb	[pc, r3]
 800580c:	100d0a06 	.word	0x100d0a06
 8005810:	1c191613 	.word	0x1c191613
 8005814:	2825221f 	.word	0x2825221f
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005818:	2300      	movs	r3, #0
 800581a:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_XL_ODR_OFF;
      break;
  }

  return ret;
}
 800581c:	b002      	add	sp, #8
 800581e:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005820:	2301      	movs	r3, #1
 8005822:	7023      	strb	r3, [r4, #0]
      break;
 8005824:	e7fa      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_26Hz;
 8005826:	2302      	movs	r3, #2
 8005828:	7023      	strb	r3, [r4, #0]
      break;
 800582a:	e7f7      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_52Hz;
 800582c:	2303      	movs	r3, #3
 800582e:	7023      	strb	r3, [r4, #0]
      break;
 8005830:	e7f4      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_104Hz;
 8005832:	2304      	movs	r3, #4
 8005834:	7023      	strb	r3, [r4, #0]
      break;
 8005836:	e7f1      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_208Hz;
 8005838:	2305      	movs	r3, #5
 800583a:	7023      	strb	r3, [r4, #0]
      break;
 800583c:	e7ee      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_417Hz;
 800583e:	2306      	movs	r3, #6
 8005840:	7023      	strb	r3, [r4, #0]
      break;
 8005842:	e7eb      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_833Hz;
 8005844:	2307      	movs	r3, #7
 8005846:	7023      	strb	r3, [r4, #0]
      break;
 8005848:	e7e8      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1667Hz;
 800584a:	2308      	movs	r3, #8
 800584c:	7023      	strb	r3, [r4, #0]
      break;
 800584e:	e7e5      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005850:	2309      	movs	r3, #9
 8005852:	7023      	strb	r3, [r4, #0]
      break;
 8005854:	e7e2      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005856:	230a      	movs	r3, #10
 8005858:	7023      	strb	r3, [r4, #0]
      break;
 800585a:	e7df      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1Hz6;
 800585c:	230b      	movs	r3, #11
 800585e:	7023      	strb	r3, [r4, #0]
      break;
 8005860:	e7dc      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_OFF;
 8005862:	2300      	movs	r3, #0
 8005864:	7023      	strb	r3, [r4, #0]
  return ret;
 8005866:	e7d9      	b.n	800581c <lsm6dso_xl_data_rate_get+0x2e>

08005868 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005868:	b530      	push	{r4, r5, lr}
 800586a:	b083      	sub	sp, #12
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005870:	2301      	movs	r3, #1
 8005872:	aa01      	add	r2, sp, #4
 8005874:	2111      	movs	r1, #17
 8005876:	f7ff ff75 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 800587a:	b108      	cbz	r0, 8005880 <lsm6dso_gy_full_scale_set+0x18>
    reg.fs_g = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800587c:	b003      	add	sp, #12
 800587e:	bd30      	pop	{r4, r5, pc}
    reg.fs_g = (uint8_t) val;
 8005880:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005884:	f365 0343 	bfi	r3, r5, #1, #3
 8005888:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800588c:	2301      	movs	r3, #1
 800588e:	aa01      	add	r2, sp, #4
 8005890:	2111      	movs	r1, #17
 8005892:	4620      	mov	r0, r4
 8005894:	f7ff ff6b 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005898:	e7f0      	b.n	800587c <lsm6dso_gy_full_scale_set+0x14>

0800589a <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800589a:	b510      	push	{r4, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058a0:	2301      	movs	r3, #1
 80058a2:	aa01      	add	r2, sp, #4
 80058a4:	2111      	movs	r1, #17
 80058a6:	f7ff ff5d 	bl	8005764 <lsm6dso_read_reg>

  switch (reg.fs_g)
 80058aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058ae:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d815      	bhi.n	80058e2 <lsm6dso_gy_full_scale_get+0x48>
 80058b6:	e8df f003 	tbb	[pc, r3]
 80058ba:	0804      	.short	0x0804
 80058bc:	140e140b 	.word	0x140e140b
 80058c0:	11          	.byte	0x11
 80058c1:	00          	.byte	0x00
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80058c2:	2300      	movs	r3, #0
 80058c4:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_250dps;
      break;
  }

  return ret;
}
 80058c6:	b002      	add	sp, #8
 80058c8:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_125dps;
 80058ca:	2301      	movs	r3, #1
 80058cc:	7023      	strb	r3, [r4, #0]
      break;
 80058ce:	e7fa      	b.n	80058c6 <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_500dps;
 80058d0:	2302      	movs	r3, #2
 80058d2:	7023      	strb	r3, [r4, #0]
      break;
 80058d4:	e7f7      	b.n	80058c6 <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_1000dps;
 80058d6:	2304      	movs	r3, #4
 80058d8:	7023      	strb	r3, [r4, #0]
      break;
 80058da:	e7f4      	b.n	80058c6 <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_2000dps;
 80058dc:	2306      	movs	r3, #6
 80058de:	7023      	strb	r3, [r4, #0]
      break;
 80058e0:	e7f1      	b.n	80058c6 <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_250dps;
 80058e2:	2300      	movs	r3, #0
 80058e4:	7023      	strb	r3, [r4, #0]
  return ret;
 80058e6:	e7ee      	b.n	80058c6 <lsm6dso_gy_full_scale_get+0x2c>

080058e8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80058e8:	b510      	push	{r4, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80058ee:	2301      	movs	r3, #1
 80058f0:	aa01      	add	r2, sp, #4
 80058f2:	2111      	movs	r1, #17
 80058f4:	f7ff ff36 	bl	8005764 <lsm6dso_read_reg>

  switch (reg.odr_g)
 80058f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	2b0a      	cmp	r3, #10
 8005900:	d829      	bhi.n	8005956 <lsm6dso_gy_data_rate_get+0x6e>
 8005902:	e8df f003 	tbb	[pc, r3]
 8005906:	0a06      	.short	0x0a06
 8005908:	1613100d 	.word	0x1613100d
 800590c:	221f1c19 	.word	0x221f1c19
 8005910:	25          	.byte	0x25
 8005911:	00          	.byte	0x00
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005912:	2300      	movs	r3, #0
 8005914:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_GY_ODR_OFF;
      break;
  }

  return ret;
}
 8005916:	b002      	add	sp, #8
 8005918:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_GY_ODR_12Hz5;
 800591a:	2301      	movs	r3, #1
 800591c:	7023      	strb	r3, [r4, #0]
      break;
 800591e:	e7fa      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_26Hz;
 8005920:	2302      	movs	r3, #2
 8005922:	7023      	strb	r3, [r4, #0]
      break;
 8005924:	e7f7      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_52Hz;
 8005926:	2303      	movs	r3, #3
 8005928:	7023      	strb	r3, [r4, #0]
      break;
 800592a:	e7f4      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_104Hz;
 800592c:	2304      	movs	r3, #4
 800592e:	7023      	strb	r3, [r4, #0]
      break;
 8005930:	e7f1      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_208Hz;
 8005932:	2305      	movs	r3, #5
 8005934:	7023      	strb	r3, [r4, #0]
      break;
 8005936:	e7ee      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_417Hz;
 8005938:	2306      	movs	r3, #6
 800593a:	7023      	strb	r3, [r4, #0]
      break;
 800593c:	e7eb      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_833Hz;
 800593e:	2307      	movs	r3, #7
 8005940:	7023      	strb	r3, [r4, #0]
      break;
 8005942:	e7e8      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005944:	2308      	movs	r3, #8
 8005946:	7023      	strb	r3, [r4, #0]
      break;
 8005948:	e7e5      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_3333Hz;
 800594a:	2309      	movs	r3, #9
 800594c:	7023      	strb	r3, [r4, #0]
      break;
 800594e:	e7e2      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005950:	230a      	movs	r3, #10
 8005952:	7023      	strb	r3, [r4, #0]
      break;
 8005954:	e7df      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_OFF;
 8005956:	2300      	movs	r3, #0
 8005958:	7023      	strb	r3, [r4, #0]
  return ret;
 800595a:	e7dc      	b.n	8005916 <lsm6dso_gy_data_rate_get+0x2e>

0800595c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800595c:	b530      	push	{r4, r5, lr}
 800595e:	b083      	sub	sp, #12
 8005960:	4604      	mov	r4, r0
 8005962:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005964:	2301      	movs	r3, #1
 8005966:	aa01      	add	r2, sp, #4
 8005968:	2112      	movs	r1, #18
 800596a:	f7ff fefb 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 800596e:	b108      	cbz	r0, 8005974 <lsm6dso_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005970:	b003      	add	sp, #12
 8005972:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 8005974:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005978:	f365 1386 	bfi	r3, r5, #6, #1
 800597c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005980:	2301      	movs	r3, #1
 8005982:	aa01      	add	r2, sp, #4
 8005984:	2112      	movs	r1, #18
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff fef1 	bl	800576e <lsm6dso_write_reg>
  return ret;
 800598c:	e7f0      	b.n	8005970 <lsm6dso_block_data_update_set+0x14>

0800598e <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800598e:	b510      	push	{r4, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005994:	2306      	movs	r3, #6
 8005996:	466a      	mov	r2, sp
 8005998:	2122      	movs	r1, #34	; 0x22
 800599a:	f7ff fee3 	bl	8005764 <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
 800599e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80059a2:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059a4:	f89d 3000 	ldrb.w	r3, [sp]
 80059a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059ac:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 80059ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80059b2:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80059b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059bc:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 80059be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80059c2:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80059c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059cc:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80059ce:	b002      	add	sp, #8
 80059d0:	bd10      	pop	{r4, pc}

080059d2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80059d2:	b510      	push	{r4, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80059d8:	2306      	movs	r3, #6
 80059da:	466a      	mov	r2, sp
 80059dc:	2128      	movs	r1, #40	; 0x28
 80059de:	f7ff fec1 	bl	8005764 <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
 80059e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80059e6:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059e8:	f89d 3000 	ldrb.w	r3, [sp]
 80059ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059f0:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 80059f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80059f6:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80059fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a00:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8005a02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005a06:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a10:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8005a12:	b002      	add	sp, #8
 8005a14:	bd10      	pop	{r4, pc}

08005a16 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005a16:	b530      	push	{r4, r5, lr}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	460d      	mov	r5, r1
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005a1e:	2301      	movs	r3, #1
 8005a20:	aa01      	add	r2, sp, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	f7ff fe9e 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 8005a28:	b108      	cbz	r0, 8005a2e <lsm6dso_mem_bank_set+0x18>
    reg.reg_access = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005a2a:	b003      	add	sp, #12
 8005a2c:	bd30      	pop	{r4, r5, pc}
    reg.reg_access = (uint8_t)val;
 8005a2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a32:	f365 1387 	bfi	r3, r5, #6, #2
 8005a36:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	aa01      	add	r2, sp, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff fe94 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005a46:	e7f0      	b.n	8005a2a <lsm6dso_mem_bank_set+0x14>

08005a48 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a48:	b508      	push	{r3, lr}
 8005a4a:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	210f      	movs	r1, #15
 8005a50:	f7ff fe88 	bl	8005764 <lsm6dso_read_reg>

  return ret;
}
 8005a54:	bd08      	pop	{r3, pc}

08005a56 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a56:	b530      	push	{r4, r5, lr}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005a5e:	2301      	movs	r3, #1
 8005a60:	aa01      	add	r2, sp, #4
 8005a62:	2112      	movs	r1, #18
 8005a64:	f7ff fe7e 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 8005a68:	b108      	cbz	r0, 8005a6e <lsm6dso_auto_increment_set+0x18>
    reg.if_inc = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005a6a:	b003      	add	sp, #12
 8005a6c:	bd30      	pop	{r4, r5, pc}
    reg.if_inc = val;
 8005a6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a72:	f365 0382 	bfi	r3, r5, #2, #1
 8005a76:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	aa01      	add	r2, sp, #4
 8005a7e:	2112      	movs	r1, #18
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7ff fe74 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005a86:	e7f0      	b.n	8005a6a <lsm6dso_auto_increment_set+0x14>

08005a88 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005a88:	b530      	push	{r4, r5, lr}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	460c      	mov	r4, r1
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005a90:	2301      	movs	r3, #1
 8005a92:	466a      	mov	r2, sp
 8005a94:	2118      	movs	r1, #24
 8005a96:	f7ff fe65 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 8005a9a:	b118      	cbz	r0, 8005aa4 <lsm6dso_i3c_disable_set+0x1c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8005a9c:	b180      	cbz	r0, 8005ac0 <lsm6dso_i3c_disable_set+0x38>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005a9e:	b1b0      	cbz	r0, 8005ace <lsm6dso_i3c_disable_set+0x46>
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 8005aa0:	b003      	add	sp, #12
 8005aa2:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005aa4:	09e3      	lsrs	r3, r4, #7
 8005aa6:	f89d 2000 	ldrb.w	r2, [sp]
 8005aaa:	f363 0241 	bfi	r2, r3, #1, #1
 8005aae:	f88d 2000 	strb.w	r2, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	466a      	mov	r2, sp
 8005ab6:	2118      	movs	r1, #24
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f7ff fe58 	bl	800576e <lsm6dso_write_reg>
 8005abe:	e7ed      	b.n	8005a9c <lsm6dso_i3c_disable_set+0x14>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	aa01      	add	r2, sp, #4
 8005ac4:	2162      	movs	r1, #98	; 0x62
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f7ff fe4c 	bl	8005764 <lsm6dso_read_reg>
 8005acc:	e7e7      	b.n	8005a9e <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005ace:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ad2:	f364 03c4 	bfi	r3, r4, #3, #2
 8005ad6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005ada:	2301      	movs	r3, #1
 8005adc:	aa01      	add	r2, sp, #4
 8005ade:	2162      	movs	r1, #98	; 0x62
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f7ff fe44 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005ae6:	e7db      	b.n	8005aa0 <lsm6dso_i3c_disable_set+0x18>

08005ae8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005ae8:	b530      	push	{r4, r5, lr}
 8005aea:	b083      	sub	sp, #12
 8005aec:	4604      	mov	r4, r0
 8005aee:	460d      	mov	r5, r1
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005af0:	2301      	movs	r3, #1
 8005af2:	aa01      	add	r2, sp, #4
 8005af4:	210a      	movs	r1, #10
 8005af6:	f7ff fe35 	bl	8005764 <lsm6dso_read_reg>

  if (ret == 0)
 8005afa:	b108      	cbz	r0, 8005b00 <lsm6dso_fifo_mode_set+0x18>
    reg.fifo_mode = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8005afc:	b003      	add	sp, #12
 8005afe:	bd30      	pop	{r4, r5, pc}
    reg.fifo_mode = (uint8_t)val;
 8005b00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b04:	f365 0302 	bfi	r3, r5, #0, #3
 8005b08:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	aa01      	add	r2, sp, #4
 8005b10:	210a      	movs	r1, #10
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff fe2b 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005b18:	e7f0      	b.n	8005afc <lsm6dso_fifo_mode_set+0x14>

08005b1a <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005b1a:	b538      	push	{r3, r4, r5, lr}
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005b20:	2102      	movs	r1, #2
 8005b22:	f7ff ff78 	bl	8005a16 <lsm6dso_mem_bank_set>

  if (ret == 0)
 8005b26:	b108      	cbz	r0, 8005b2c <lsm6dso_fsm_enable_get+0x12>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
  }

  if (ret == 0)
 8005b28:	b138      	cbz	r0, 8005b3a <lsm6dso_fsm_enable_get+0x20>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	462a      	mov	r2, r5
 8005b30:	2146      	movs	r1, #70	; 0x46
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff fe16 	bl	8005764 <lsm6dso_read_reg>
 8005b38:	e7f6      	b.n	8005b28 <lsm6dso_fsm_enable_get+0xe>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f7ff ff6a 	bl	8005a16 <lsm6dso_mem_bank_set>
  return ret;
 8005b42:	e7f2      	b.n	8005b2a <lsm6dso_fsm_enable_get+0x10>

08005b44 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005b44:	b530      	push	{r4, r5, lr}
 8005b46:	b083      	sub	sp, #12
 8005b48:	4605      	mov	r5, r0
 8005b4a:	460c      	mov	r4, r1
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	f7ff ff62 	bl	8005a16 <lsm6dso_mem_bank_set>

  if (ret == 0)
 8005b52:	b150      	cbz	r0, 8005b6a <lsm6dso_fsm_data_rate_get+0x26>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005b54:	b9b0      	cbnz	r0, 8005b84 <lsm6dso_fsm_data_rate_get+0x40>
  {
    switch (reg.fsm_odr)
 8005b56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b5a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d81b      	bhi.n	8005b9a <lsm6dso_fsm_data_rate_get+0x56>
 8005b62:	e8df f003 	tbb	[pc, r3]
 8005b66:	1109      	.short	0x1109
 8005b68:	1714      	.short	0x1714
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	aa01      	add	r2, sp, #4
 8005b6e:	215f      	movs	r1, #95	; 0x5f
 8005b70:	4628      	mov	r0, r5
 8005b72:	f7ff fdf7 	bl	8005764 <lsm6dso_read_reg>
 8005b76:	e7ed      	b.n	8005b54 <lsm6dso_fsm_data_rate_get+0x10>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	7023      	strb	r3, [r4, #0]
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
        break;
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f7ff ff49 	bl	8005a16 <lsm6dso_mem_bank_set>
  }

  return ret;
}
 8005b84:	b003      	add	sp, #12
 8005b86:	bd30      	pop	{r4, r5, pc}
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	7023      	strb	r3, [r4, #0]
        break;
 8005b8c:	e7f6      	b.n	8005b7c <lsm6dso_fsm_data_rate_get+0x38>
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	7023      	strb	r3, [r4, #0]
        break;
 8005b92:	e7f3      	b.n	8005b7c <lsm6dso_fsm_data_rate_get+0x38>
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005b94:	2303      	movs	r3, #3
 8005b96:	7023      	strb	r3, [r4, #0]
        break;
 8005b98:	e7f0      	b.n	8005b7c <lsm6dso_fsm_data_rate_get+0x38>
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	7023      	strb	r3, [r4, #0]
        break;
 8005b9e:	e7ed      	b.n	8005b7c <lsm6dso_fsm_data_rate_get+0x38>

08005ba0 <lsm6dso_xl_data_rate_set>:
{
 8005ba0:	b530      	push	{r4, r5, lr}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005ba8:	a901      	add	r1, sp, #4
 8005baa:	f7ff ffb6 	bl	8005b1a <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8005bae:	bb88      	cbnz	r0, 8005c14 <lsm6dso_xl_data_rate_set+0x74>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005bb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005bb4:	f002 0301 	and.w	r3, r2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005bb8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005bbc:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005bbe:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005bc2:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005bc4:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005bc8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005bca:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005bce:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005bd0:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005bd4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005bd6:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005bda:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005bdc:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005be0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005be4:	f002 0101 	and.w	r1, r2, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005be8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005bea:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005bee:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005bf0:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005bf4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005bf6:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005bfa:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005bfc:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005c00:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005c02:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005c06:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8005c08:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005c0c:	430b      	orrs	r3, r1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c0e:	ea53 13d2 	orrs.w	r3, r3, r2, lsr #7
 8005c12:	d105      	bne.n	8005c20 <lsm6dso_xl_data_rate_set+0x80>
  if (ret == 0)
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d037      	beq.n	8005c88 <lsm6dso_xl_data_rate_set+0xe8>
  if (ret == 0)
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d03c      	beq.n	8005c96 <lsm6dso_xl_data_rate_set+0xf6>
}
 8005c1c:	b003      	add	sp, #12
 8005c1e:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005c20:	f10d 0103 	add.w	r1, sp, #3
 8005c24:	4620      	mov	r0, r4
 8005c26:	f7ff ff8d 	bl	8005b44 <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1f2      	bne.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
        switch (fsm_odr)
 8005c2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d8ee      	bhi.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
 8005c36:	e8df f003 	tbb	[pc, r3]
 8005c3a:	0602      	.short	0x0602
 8005c3c:	120b      	.short	0x120b
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	d1e8      	bne.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005c42:	2501      	movs	r5, #1
 8005c44:	e7e6      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c46:	b19d      	cbz	r5, 8005c70 <lsm6dso_xl_data_rate_set+0xd0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005c48:	2d01      	cmp	r5, #1
 8005c4a:	d1e3      	bne.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005c4c:	2502      	movs	r5, #2
 8005c4e:	e7e1      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c50:	b185      	cbz	r5, 8005c74 <lsm6dso_xl_data_rate_set+0xd4>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005c52:	2d01      	cmp	r5, #1
 8005c54:	d010      	beq.n	8005c78 <lsm6dso_xl_data_rate_set+0xd8>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005c56:	2d02      	cmp	r5, #2
 8005c58:	d1dc      	bne.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c5a:	2503      	movs	r5, #3
 8005c5c:	e7da      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
            if (val == LSM6DSO_XL_ODR_OFF)
 8005c5e:	b16d      	cbz	r5, 8005c7c <lsm6dso_xl_data_rate_set+0xdc>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8005c60:	2d01      	cmp	r5, #1
 8005c62:	d00d      	beq.n	8005c80 <lsm6dso_xl_data_rate_set+0xe0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8005c64:	2d02      	cmp	r5, #2
 8005c66:	d00d      	beq.n	8005c84 <lsm6dso_xl_data_rate_set+0xe4>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005c68:	2d03      	cmp	r5, #3
 8005c6a:	d1d3      	bne.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005c6c:	2504      	movs	r5, #4
 8005c6e:	e7d1      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005c70:	2502      	movs	r5, #2
 8005c72:	e7cf      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c74:	2503      	movs	r5, #3
 8005c76:	e7cd      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c78:	2503      	movs	r5, #3
 8005c7a:	e7cb      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005c7c:	2504      	movs	r5, #4
 8005c7e:	e7c9      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005c80:	2504      	movs	r5, #4
 8005c82:	e7c7      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005c84:	2504      	movs	r5, #4
 8005c86:	e7c5      	b.n	8005c14 <lsm6dso_xl_data_rate_set+0x74>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005c88:	2301      	movs	r3, #1
 8005c8a:	466a      	mov	r2, sp
 8005c8c:	2110      	movs	r1, #16
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7ff fd68 	bl	8005764 <lsm6dso_read_reg>
 8005c94:	e7c0      	b.n	8005c18 <lsm6dso_xl_data_rate_set+0x78>
    reg.odr_xl = (uint8_t) odr_xl;
 8005c96:	f89d 3000 	ldrb.w	r3, [sp]
 8005c9a:	f365 1307 	bfi	r3, r5, #4, #4
 8005c9e:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	466a      	mov	r2, sp
 8005ca6:	2110      	movs	r1, #16
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7ff fd60 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005cae:	e7b5      	b.n	8005c1c <lsm6dso_xl_data_rate_set+0x7c>

08005cb0 <lsm6dso_gy_data_rate_set>:
{
 8005cb0:	b530      	push	{r4, r5, lr}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005cb8:	a901      	add	r1, sp, #4
 8005cba:	f7ff ff2e 	bl	8005b1a <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8005cbe:	bb88      	cbnz	r0, 8005d24 <lsm6dso_gy_data_rate_set+0x74>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005cc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005cc4:	f002 0301 	and.w	r3, r2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005cc8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ccc:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005cce:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005cd2:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005cd4:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005cd8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005cda:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005cde:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ce0:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ce4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005ce6:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005cea:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005cec:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005cf0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005cf4:	f002 0101 	and.w	r1, r2, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005cf8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005cfa:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005cfe:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005d00:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005d04:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005d06:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8005d0a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005d0c:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005d10:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005d12:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8005d16:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8005d18:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005d1c:	430b      	orrs	r3, r1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d1e:	ea53 13d2 	orrs.w	r3, r3, r2, lsr #7
 8005d22:	d105      	bne.n	8005d30 <lsm6dso_gy_data_rate_set+0x80>
  if (ret == 0)
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d037      	beq.n	8005d98 <lsm6dso_gy_data_rate_set+0xe8>
  if (ret == 0)
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d03c      	beq.n	8005da6 <lsm6dso_gy_data_rate_set+0xf6>
}
 8005d2c:	b003      	add	sp, #12
 8005d2e:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005d30:	f10d 0103 	add.w	r1, sp, #3
 8005d34:	4620      	mov	r0, r4
 8005d36:	f7ff ff05 	bl	8005b44 <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d1f2      	bne.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
        switch (fsm_odr)
 8005d3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d8ee      	bhi.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
 8005d46:	e8df f003 	tbb	[pc, r3]
 8005d4a:	0602      	.short	0x0602
 8005d4c:	120b      	.short	0x120b
            if (val == LSM6DSO_GY_ODR_OFF)
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	d1e8      	bne.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005d52:	2501      	movs	r5, #1
 8005d54:	e7e6      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
            if (val == LSM6DSO_GY_ODR_OFF)
 8005d56:	b19d      	cbz	r5, 8005d80 <lsm6dso_gy_data_rate_set+0xd0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005d58:	2d01      	cmp	r5, #1
 8005d5a:	d1e3      	bne.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005d5c:	2502      	movs	r5, #2
 8005d5e:	e7e1      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
            if (val == LSM6DSO_GY_ODR_OFF)
 8005d60:	b185      	cbz	r5, 8005d84 <lsm6dso_gy_data_rate_set+0xd4>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005d62:	2d01      	cmp	r5, #1
 8005d64:	d010      	beq.n	8005d88 <lsm6dso_gy_data_rate_set+0xd8>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005d66:	2d02      	cmp	r5, #2
 8005d68:	d1dc      	bne.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005d6a:	2503      	movs	r5, #3
 8005d6c:	e7da      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
            if (val == LSM6DSO_GY_ODR_OFF)
 8005d6e:	b16d      	cbz	r5, 8005d8c <lsm6dso_gy_data_rate_set+0xdc>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005d70:	2d01      	cmp	r5, #1
 8005d72:	d00d      	beq.n	8005d90 <lsm6dso_gy_data_rate_set+0xe0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8005d74:	2d02      	cmp	r5, #2
 8005d76:	d00d      	beq.n	8005d94 <lsm6dso_gy_data_rate_set+0xe4>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8005d78:	2d03      	cmp	r5, #3
 8005d7a:	d1d3      	bne.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d7c:	2504      	movs	r5, #4
 8005d7e:	e7d1      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005d80:	2502      	movs	r5, #2
 8005d82:	e7cf      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005d84:	2503      	movs	r5, #3
 8005d86:	e7cd      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005d88:	2503      	movs	r5, #3
 8005d8a:	e7cb      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d8c:	2504      	movs	r5, #4
 8005d8e:	e7c9      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d90:	2504      	movs	r5, #4
 8005d92:	e7c7      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005d94:	2504      	movs	r5, #4
 8005d96:	e7c5      	b.n	8005d24 <lsm6dso_gy_data_rate_set+0x74>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005d98:	2301      	movs	r3, #1
 8005d9a:	466a      	mov	r2, sp
 8005d9c:	2111      	movs	r1, #17
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff fce0 	bl	8005764 <lsm6dso_read_reg>
 8005da4:	e7c0      	b.n	8005d28 <lsm6dso_gy_data_rate_set+0x78>
    reg.odr_g = (uint8_t) odr_gy;
 8005da6:	f89d 3000 	ldrb.w	r3, [sp]
 8005daa:	f365 1307 	bfi	r3, r5, #4, #4
 8005dae:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005db2:	2301      	movs	r3, #1
 8005db4:	466a      	mov	r2, sp
 8005db6:	2111      	movs	r1, #17
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7ff fcd8 	bl	800576e <lsm6dso_write_reg>
  return ret;
 8005dbe:	e7b5      	b.n	8005d2c <lsm6dso_gy_data_rate_set+0x7c>

08005dc0 <STTS751_GetCapabilities>:
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 0;
 8005dc4:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8005dca:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8005dd0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8005dd4:	608a      	str	r2, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8005dd6:	60cb      	str	r3, [r1, #12]
  return STTS751_OK;
}
 8005dd8:	4770      	bx	lr

08005dda <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005dda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dde:	461e      	mov	r6, r3
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8005de0:	6883      	ldr	r3, [r0, #8]
 8005de2:	b1b3      	cbz	r3, 8005e12 <ReadRegWrap+0x38>
  int32_t ret = STTS751_OK;
 8005de4:	2300      	movs	r3, #0
      }
    }
  }

  return ret;
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (i = 0; i < Length; i++)
 8005dec:	3401      	adds	r4, #1
 8005dee:	b2a4      	uxth	r4, r4
 8005df0:	42b4      	cmp	r4, r6
 8005df2:	d2f8      	bcs.n	8005de6 <ReadRegWrap+0xc>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005df4:	eb04 0109 	add.w	r1, r4, r9
 8005df8:	2301      	movs	r3, #1
 8005dfa:	eb08 0204 	add.w	r2, r8, r4
 8005dfe:	b289      	uxth	r1, r1
 8005e00:	7b28      	ldrb	r0, [r5, #12]
 8005e02:	696f      	ldr	r7, [r5, #20]
 8005e04:	47b8      	blx	r7
      if (ret != STTS751_OK)
 8005e06:	4603      	mov	r3, r0
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0ef      	beq.n	8005dec <ReadRegWrap+0x12>
        return STTS751_ERROR;
 8005e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e10:	e7e9      	b.n	8005de6 <ReadRegWrap+0xc>
 8005e12:	4605      	mov	r5, r0
 8005e14:	4689      	mov	r9, r1
 8005e16:	4690      	mov	r8, r2
  int32_t ret = STTS751_OK;
 8005e18:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 8005e1a:	461c      	mov	r4, r3
 8005e1c:	e7e8      	b.n	8005df0 <ReadRegWrap+0x16>

08005e1e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e22:	461e      	mov	r6, r3
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8005e24:	6883      	ldr	r3, [r0, #8]
 8005e26:	b1b3      	cbz	r3, 8005e56 <WriteRegWrap+0x38>
  int32_t ret = STTS751_OK;
 8005e28:	2300      	movs	r3, #0
      }
    }
  }

  return ret;
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (i = 0; i < Length; i++)
 8005e30:	3401      	adds	r4, #1
 8005e32:	b2a4      	uxth	r4, r4
 8005e34:	42b4      	cmp	r4, r6
 8005e36:	d2f8      	bcs.n	8005e2a <WriteRegWrap+0xc>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005e38:	eb04 0109 	add.w	r1, r4, r9
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	eb08 0204 	add.w	r2, r8, r4
 8005e42:	b289      	uxth	r1, r1
 8005e44:	7b28      	ldrb	r0, [r5, #12]
 8005e46:	692f      	ldr	r7, [r5, #16]
 8005e48:	47b8      	blx	r7
      if (ret != STTS751_OK)
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d0ef      	beq.n	8005e30 <WriteRegWrap+0x12>
        return STTS751_ERROR;
 8005e50:	f04f 33ff 	mov.w	r3, #4294967295
 8005e54:	e7e9      	b.n	8005e2a <WriteRegWrap+0xc>
 8005e56:	4605      	mov	r5, r0
 8005e58:	4689      	mov	r9, r1
 8005e5a:	4690      	mov	r8, r2
  int32_t ret = STTS751_OK;
 8005e5c:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 8005e5e:	461c      	mov	r4, r3
 8005e60:	e7e8      	b.n	8005e34 <WriteRegWrap+0x16>

08005e62 <STTS751_Init>:
{
 8005e62:	b538      	push	{r3, r4, r5, lr}
 8005e64:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8005e66:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005e6a:	b123      	cbz	r3, 8005e76 <STTS751_Init+0x14>
  pObj->is_initialized = 1;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return STTS751_OK;
 8005e72:	2000      	movs	r0, #0
}
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8005e76:	f100 0520 	add.w	r5, r0, #32
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 fa92 	bl	80063a6 <stts751_pin_event_route_set>
 8005e82:	b980      	cbnz	r0, 8005ea6 <STTS751_Init+0x44>
    pObj->temp_odr = 1.0f;
 8005e84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005e88:	6363      	str	r3, [r4, #52]	; 0x34
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 fa33 	bl	80062f8 <stts751_resolution_set>
 8005e92:	b958      	cbnz	r0, 8005eac <STTS751_Init+0x4a>
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f99c 	bl	80061d4 <stts751_temp_data_rate_set>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d0e5      	beq.n	8005e6c <STTS751_Init+0xa>
      return STTS751_ERROR;
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e7e6      	b.n	8005e74 <STTS751_Init+0x12>
      return STTS751_ERROR;
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	e7e3      	b.n	8005e74 <STTS751_Init+0x12>
      return STTS751_ERROR;
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	e7e0      	b.n	8005e74 <STTS751_Init+0x12>

08005eb2 <STTS751_ReadID>:
{
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	460c      	mov	r4, r1
  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8005eb8:	a901      	add	r1, sp, #4
 8005eba:	3020      	adds	r0, #32
 8005ebc:	f000 fa8c 	bl	80063d8 <stts751_device_id_get>
 8005ec0:	b920      	cbnz	r0, 8005ecc <STTS751_ReadID+0x1a>
  *Id = buf.manufacturer_id;
 8005ec2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005ec6:	7023      	strb	r3, [r4, #0]
}
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	e7fa      	b.n	8005ec8 <STTS751_ReadID+0x16>

08005ed2 <STTS751_TEMP_GetOutputDataRate>:
{
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	460c      	mov	r4, r1
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8005ed8:	f10d 0107 	add.w	r1, sp, #7
 8005edc:	3020      	adds	r0, #32
 8005ede:	f000 f9b7 	bl	8006250 <stts751_temp_data_rate_get>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d13c      	bne.n	8005f60 <STTS751_TEMP_GetOutputDataRate+0x8e>
  switch (odr_low_level)
 8005ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005eea:	2b09      	cmp	r3, #9
 8005eec:	d808      	bhi.n	8005f00 <STTS751_TEMP_GetOutputDataRate+0x2e>
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	d839      	bhi.n	8005f66 <STTS751_TEMP_GetOutputDataRate+0x94>
 8005ef2:	e8df f003 	tbb	[pc, r3]
 8005ef6:	110d      	.short	0x110d
 8005ef8:	211d1915 	.word	0x211d1915
 8005efc:	312d2925 	.word	0x312d2925
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d001      	beq.n	8005f08 <STTS751_TEMP_GetOutputDataRate+0x36>
 8005f04:	2b90      	cmp	r3, #144	; 0x90
 8005f06:	d131      	bne.n	8005f6c <STTS751_TEMP_GetOutputDataRate+0x9a>
      *Odr = 0.0f;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6023      	str	r3, [r4, #0]
}
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd10      	pop	{r4, pc}
      *Odr = 0.0625f;
 8005f10:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8005f14:	6023      	str	r3, [r4, #0]
      break;
 8005f16:	e7f9      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.125f;
 8005f18:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8005f1c:	6023      	str	r3, [r4, #0]
      break;
 8005f1e:	e7f5      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.250f;
 8005f20:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005f24:	6023      	str	r3, [r4, #0]
      break;
 8005f26:	e7f1      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 0.500f;
 8005f28:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8005f2c:	6023      	str	r3, [r4, #0]
      break;
 8005f2e:	e7ed      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 1.0f;
 8005f30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005f34:	6023      	str	r3, [r4, #0]
      break;
 8005f36:	e7e9      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 2.0f;
 8005f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f3c:	6023      	str	r3, [r4, #0]
      break;
 8005f3e:	e7e5      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 4.0f;
 8005f40:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8005f44:	6023      	str	r3, [r4, #0]
      break;
 8005f46:	e7e1      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 8.0f;
 8005f48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005f4c:	6023      	str	r3, [r4, #0]
      break;
 8005f4e:	e7dd      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 16.0f;
 8005f50:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8005f54:	6023      	str	r3, [r4, #0]
      break;
 8005f56:	e7d9      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
      *Odr = 32.0f;
 8005f58:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8005f5c:	6023      	str	r3, [r4, #0]
      break;
 8005f5e:	e7d5      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
    return STTS751_ERROR;
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	e7d2      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
  switch (odr_low_level)
 8005f66:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6a:	e7cf      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	e7cc      	b.n	8005f0c <STTS751_TEMP_GetOutputDataRate+0x3a>

08005f72 <STTS751_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8005f72:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005f76:	b90b      	cbnz	r3, 8005f7c <STTS751_TEMP_Disable+0xa>
    return STTS751_OK;
 8005f78:	2000      	movs	r0, #0
}
 8005f7a:	4770      	bx	lr
{
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4604      	mov	r4, r0
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8005f80:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8005f84:	f7ff ffa5 	bl	8005ed2 <STTS751_TEMP_GetOutputDataRate>
 8005f88:	b940      	cbnz	r0, 8005f9c <STTS751_TEMP_Disable+0x2a>
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	f104 0020 	add.w	r0, r4, #32
 8005f90:	f000 f920 	bl	80061d4 <stts751_temp_data_rate_set>
 8005f94:	b928      	cbnz	r0, 8005fa2 <STTS751_TEMP_Disable+0x30>
  pObj->temp_is_enabled = 0;
 8005f96:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8005f9a:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	e7fb      	b.n	8005f9a <STTS751_TEMP_Disable+0x28>
    return STTS751_ERROR;
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	e7f8      	b.n	8005f9a <STTS751_TEMP_Disable+0x28>

08005fa8 <STTS751_DeInit>:
{
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8005fac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d003      	beq.n	8005fbc <STTS751_DeInit+0x14>
  pObj->is_initialized = 0;
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8005fba:	bd10      	pop	{r4, pc}
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8005fbc:	f7ff ffd9 	bl	8005f72 <STTS751_TEMP_Disable>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d0f7      	beq.n	8005fb4 <STTS751_DeInit+0xc>
      return STTS751_ERROR;
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	e7f7      	b.n	8005fba <STTS751_DeInit+0x12>
	...

08005fcc <STTS751_TEMP_SetOutputDataRate>:
{
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	ed2d 8b02 	vpush	{d8}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	eeb0 8a40 	vmov.f32	s16, s0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005fd8:	f100 0420 	add.w	r4, r0, #32
 8005fdc:	f10d 0107 	add.w	r1, sp, #7
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 f9a2 	bl	800632a <stts751_resolution_get>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f040 8084 	bne.w	80060f4 <STTS751_TEMP_SetOutputDataRate+0x128>
  if (Odr == 16.0f && res == STTS751_12bit)
 8005fec:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8005ff0:	eeb4 8a67 	vcmp.f32	s16, s15
 8005ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff8:	d103      	bne.n	8006002 <STTS751_TEMP_SetOutputDataRate+0x36>
 8005ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d04d      	beq.n	800609e <STTS751_TEMP_SetOutputDataRate+0xd2>
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8006002:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8006100 <STTS751_TEMP_SetOutputDataRate+0x134>
 8006006:	eeb4 8a67 	vcmp.f32	s16, s15
 800600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600e:	d105      	bne.n	800601c <STTS751_TEMP_SetOutputDataRate+0x50>
 8006010:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d04b      	beq.n	80060b0 <STTS751_TEMP_SetOutputDataRate+0xe4>
 8006018:	2b01      	cmp	r3, #1
 800601a:	d049      	beq.n	80060b0 <STTS751_TEMP_SetOutputDataRate+0xe4>
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800601c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006104 <STTS751_TEMP_SetOutputDataRate+0x138>
 8006020:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006028:	d94b      	bls.n	80060c2 <STTS751_TEMP_SetOutputDataRate+0xf6>
 800602a:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 800602e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006036:	d94d      	bls.n	80060d4 <STTS751_TEMP_SetOutputDataRate+0x108>
 8006038:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800603c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006044:	d948      	bls.n	80060d8 <STTS751_TEMP_SetOutputDataRate+0x10c>
 8006046:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800604a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800604e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006052:	d943      	bls.n	80060dc <STTS751_TEMP_SetOutputDataRate+0x110>
 8006054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006058:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800605c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006060:	d93e      	bls.n	80060e0 <STTS751_TEMP_SetOutputDataRate+0x114>
 8006062:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006066:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606e:	d939      	bls.n	80060e4 <STTS751_TEMP_SetOutputDataRate+0x118>
 8006070:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8006074:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	d934      	bls.n	80060e8 <STTS751_TEMP_SetOutputDataRate+0x11c>
 800607e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006082:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608a:	d92f      	bls.n	80060ec <STTS751_TEMP_SetOutputDataRate+0x120>
 800608c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8006090:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006098:	d82a      	bhi.n	80060f0 <STTS751_TEMP_SetOutputDataRate+0x124>
 800609a:	2108      	movs	r1, #8
 800609c:	e012      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 800609e:	2101      	movs	r1, #1
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f929 	bl	80062f8 <stts751_resolution_set>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d0ab      	beq.n	8006002 <STTS751_TEMP_SetOutputDataRate+0x36>
      return STTS751_ERROR;
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	e00d      	b.n	80060cc <STTS751_TEMP_SetOutputDataRate+0x100>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80060b0:	2100      	movs	r1, #0
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 f920 	bl	80062f8 <stts751_resolution_set>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d0af      	beq.n	800601c <STTS751_TEMP_SetOutputDataRate+0x50>
      return STTS751_ERROR;
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	e004      	b.n	80060cc <STTS751_TEMP_SetOutputDataRate+0x100>
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80060c2:	2100      	movs	r1, #0
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 f885 	bl	80061d4 <stts751_temp_data_rate_set>
 80060ca:	b9b0      	cbnz	r0, 80060fa <STTS751_TEMP_SetOutputDataRate+0x12e>
}
 80060cc:	b002      	add	sp, #8
 80060ce:	ecbd 8b02 	vpop	{d8}
 80060d2:	bd10      	pop	{r4, pc}
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80060d4:	2101      	movs	r1, #1
 80060d6:	e7f5      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060d8:	2102      	movs	r1, #2
 80060da:	e7f3      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060dc:	2103      	movs	r1, #3
 80060de:	e7f1      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060e0:	2104      	movs	r1, #4
 80060e2:	e7ef      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060e4:	2105      	movs	r1, #5
 80060e6:	e7ed      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060e8:	2106      	movs	r1, #6
 80060ea:	e7eb      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060ec:	2107      	movs	r1, #7
 80060ee:	e7e9      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
 80060f0:	2109      	movs	r1, #9
 80060f2:	e7e7      	b.n	80060c4 <STTS751_TEMP_SetOutputDataRate+0xf8>
    return STTS751_ERROR;
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e7e8      	b.n	80060cc <STTS751_TEMP_SetOutputDataRate+0x100>
    return STTS751_ERROR;
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	e7e5      	b.n	80060cc <STTS751_TEMP_SetOutputDataRate+0x100>
 8006100:	42000000 	.word	0x42000000
 8006104:	3d800000 	.word	0x3d800000

08006108 <STTS751_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8006108:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800610c:	2b01      	cmp	r3, #1
 800610e:	d00a      	beq.n	8006126 <STTS751_TEMP_Enable+0x1e>
{
 8006110:	b510      	push	{r4, lr}
 8006112:	4604      	mov	r4, r0
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8006114:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8006118:	f7ff ff58 	bl	8005fcc <STTS751_TEMP_SetOutputDataRate>
 800611c:	b928      	cbnz	r0, 800612a <STTS751_TEMP_Enable+0x22>
  pObj->temp_is_enabled = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8006124:	bd10      	pop	{r4, pc}
    return STTS751_OK;
 8006126:	2000      	movs	r0, #0
}
 8006128:	4770      	bx	lr
    return STTS751_ERROR;
 800612a:	f04f 30ff 	mov.w	r0, #4294967295
 800612e:	e7f9      	b.n	8006124 <STTS751_TEMP_Enable+0x1c>

08006130 <STTS751_TEMP_GetTemperature>:
{
 8006130:	b530      	push	{r4, r5, lr}
 8006132:	b083      	sub	sp, #12
 8006134:	460c      	mov	r4, r1
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8006136:	f10d 0106 	add.w	r1, sp, #6
 800613a:	3020      	adds	r0, #32
 800613c:	f000 f917 	bl	800636e <stts751_temperature_raw_get>
 8006140:	b948      	cbnz	r0, 8006156 <STTS751_TEMP_GetTemperature+0x26>
 8006142:	4605      	mov	r5, r0
  *Value = stts751_from_lsb_to_celsius(raw_value);
 8006144:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8006148:	f000 f838 	bl	80061bc <stts751_from_lsb_to_celsius>
 800614c:	ed84 0a00 	vstr	s0, [r4]
}
 8006150:	4628      	mov	r0, r5
 8006152:	b003      	add	sp, #12
 8006154:	bd30      	pop	{r4, r5, pc}
    return STTS751_ERROR;
 8006156:	f04f 35ff 	mov.w	r5, #4294967295
 800615a:	e7f9      	b.n	8006150 <STTS751_TEMP_GetTemperature+0x20>

0800615c <STTS751_RegisterBusIO>:
  if (pObj == NULL)
 800615c:	b1c8      	cbz	r0, 8006192 <STTS751_RegisterBusIO+0x36>
{
 800615e:	b508      	push	{r3, lr}
 8006160:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8006162:	680a      	ldr	r2, [r1, #0]
 8006164:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006166:	6848      	ldr	r0, [r1, #4]
 8006168:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800616a:	6888      	ldr	r0, [r1, #8]
 800616c:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800616e:	7b08      	ldrb	r0, [r1, #12]
 8006170:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006172:	6908      	ldr	r0, [r1, #16]
 8006174:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006176:	6948      	ldr	r0, [r1, #20]
 8006178:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800617a:	6988      	ldr	r0, [r1, #24]
 800617c:	6198      	str	r0, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800617e:	4808      	ldr	r0, [pc, #32]	; (80061a0 <STTS751_RegisterBusIO+0x44>)
 8006180:	6258      	str	r0, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006182:	4808      	ldr	r0, [pc, #32]	; (80061a4 <STTS751_RegisterBusIO+0x48>)
 8006184:	6218      	str	r0, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006186:	69c9      	ldr	r1, [r1, #28]
 8006188:	6299      	str	r1, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800618a:	62db      	str	r3, [r3, #44]	; 0x2c
    if (pObj->IO.Init != NULL)
 800618c:	b122      	cbz	r2, 8006198 <STTS751_RegisterBusIO+0x3c>
      ret = pObj->IO.Init();
 800618e:	4790      	blx	r2
}
 8006190:	bd08      	pop	{r3, pc}
    ret = STTS751_ERROR;
 8006192:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006196:	4770      	bx	lr
      ret = STTS751_ERROR;
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800619c:	e7f8      	b.n	8006190 <STTS751_RegisterBusIO+0x34>
 800619e:	bf00      	nop
 80061a0:	08005ddb 	.word	0x08005ddb
 80061a4:	08005e1f 	.word	0x08005e1f

080061a8 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80061a8:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061aa:	6844      	ldr	r4, [r0, #4]
 80061ac:	68c0      	ldr	r0, [r0, #12]
 80061ae:	47a0      	blx	r4

  return ret;
}
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80061b2:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061b4:	6804      	ldr	r4, [r0, #0]
 80061b6:	68c0      	ldr	r0, [r0, #12]
 80061b8:	47a0      	blx	r4

  return ret;
}
 80061ba:	bd10      	pop	{r4, pc}

080061bc <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80061bc:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb) / 256.0f;
 80061c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80061c4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80061d0 <stts751_from_lsb_to_celsius+0x14>
 80061c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	3b800000 	.word	0x3b800000

080061d4 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80061d4:	b530      	push	{r4, r5, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	4605      	mov	r5, r0
 80061da:	460c      	mov	r4, r1
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80061dc:	23aa      	movs	r3, #170	; 0xaa
 80061de:	f88d 3007 	strb.w	r3, [sp, #7]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80061e2:	2301      	movs	r3, #1
 80061e4:	aa02      	add	r2, sp, #8
 80061e6:	2104      	movs	r1, #4
 80061e8:	f7ff ffde 	bl	80061a8 <stts751_read_reg>
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80061ec:	b130      	cbz	r0, 80061fc <stts751_temp_data_rate_set+0x28>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80061ee:	b190      	cbz	r0, 8006216 <stts751_temp_data_rate_set+0x42>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80061f0:	b1c0      	cbz	r0, 8006224 <stts751_temp_data_rate_set+0x50>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80061f2:	b908      	cbnz	r0, 80061f8 <stts751_temp_data_rate_set+0x24>
 80061f4:	2c90      	cmp	r4, #144	; 0x90
 80061f6:	d023      	beq.n	8006240 <stts751_temp_data_rate_set+0x6c>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
  }

  return ret;
}
 80061f8:	b005      	add	sp, #20
 80061fa:	bd30      	pop	{r4, r5, pc}
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80061fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006200:	f364 0303 	bfi	r3, r4, #0, #4
 8006204:	f88d 3008 	strb.w	r3, [sp, #8]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8006208:	2301      	movs	r3, #1
 800620a:	aa02      	add	r2, sp, #8
 800620c:	2104      	movs	r1, #4
 800620e:	4628      	mov	r0, r5
 8006210:	f7ff ffcf 	bl	80061b2 <stts751_write_reg>
 8006214:	e7eb      	b.n	80061ee <stts751_temp_data_rate_set+0x1a>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8006216:	2301      	movs	r3, #1
 8006218:	aa03      	add	r2, sp, #12
 800621a:	2103      	movs	r1, #3
 800621c:	4628      	mov	r0, r5
 800621e:	f7ff ffc3 	bl	80061a8 <stts751_read_reg>
 8006222:	e7e5      	b.n	80061f0 <stts751_temp_data_rate_set+0x1c>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8006224:	09e3      	lsrs	r3, r4, #7
 8006226:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800622a:	f363 1286 	bfi	r2, r3, #6, #1
 800622e:	f88d 200c 	strb.w	r2, [sp, #12]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8006232:	2301      	movs	r3, #1
 8006234:	aa03      	add	r2, sp, #12
 8006236:	2103      	movs	r1, #3
 8006238:	4628      	mov	r0, r5
 800623a:	f7ff ffba 	bl	80061b2 <stts751_write_reg>
 800623e:	e7d8      	b.n	80061f2 <stts751_temp_data_rate_set+0x1e>
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8006240:	2301      	movs	r3, #1
 8006242:	f10d 0207 	add.w	r2, sp, #7
 8006246:	210f      	movs	r1, #15
 8006248:	4628      	mov	r0, r5
 800624a:	f7ff ffb2 	bl	80061b2 <stts751_write_reg>
  return ret;
 800624e:	e7d3      	b.n	80061f8 <stts751_temp_data_rate_set+0x24>

08006250 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8006250:	b530      	push	{r4, r5, lr}
 8006252:	b083      	sub	sp, #12
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8006258:	2301      	movs	r3, #1
 800625a:	aa01      	add	r2, sp, #4
 800625c:	2104      	movs	r1, #4
 800625e:	f7ff ffa3 	bl	80061a8 <stts751_read_reg>
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8006262:	b1b0      	cbz	r0, 8006292 <stts751_temp_data_rate_get+0x42>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8006264:	f89d 3000 	ldrb.w	r3, [sp]
 8006268:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800626c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006278:	2b09      	cmp	r3, #9
 800627a:	dc11      	bgt.n	80062a0 <stts751_temp_data_rate_get+0x50>
 800627c:	2b00      	cmp	r3, #0
 800627e:	db38      	blt.n	80062f2 <stts751_temp_data_rate_get+0xa2>
 8006280:	2b09      	cmp	r3, #9
 8006282:	d836      	bhi.n	80062f2 <stts751_temp_data_rate_get+0xa2>
 8006284:	e8df f003 	tbb	[pc, r3]
 8006288:	201d1a17 	.word	0x201d1a17
 800628c:	2c292623 	.word	0x2c292623
 8006290:	322f      	.short	0x322f
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8006292:	2301      	movs	r3, #1
 8006294:	466a      	mov	r2, sp
 8006296:	2103      	movs	r1, #3
 8006298:	4628      	mov	r0, r5
 800629a:	f7ff ff85 	bl	80061a8 <stts751_read_reg>
 800629e:	e7e1      	b.n	8006264 <stts751_temp_data_rate_get+0x14>
  switch ((configuration.stop << 7) + conversion_rate.conv)
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d004      	beq.n	80062ae <stts751_temp_data_rate_get+0x5e>
 80062a4:	2b90      	cmp	r3, #144	; 0x90
 80062a6:	d124      	bne.n	80062f2 <stts751_temp_data_rate_get+0xa2>
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
      break;

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80062a8:	2390      	movs	r3, #144	; 0x90
 80062aa:	7023      	strb	r3, [r4, #0]
      break;
 80062ac:	e001      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_OFF;
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	7023      	strb	r3, [r4, #0]
      *val = STTS751_TEMP_ODR_OFF;
      break;
  }

  return ret;
}
 80062b2:	b003      	add	sp, #12
 80062b4:	bd30      	pop	{r4, r5, pc}
      *val = STTS751_TEMP_ODR_62mHz5;
 80062b6:	2300      	movs	r3, #0
 80062b8:	7023      	strb	r3, [r4, #0]
      break;
 80062ba:	e7fa      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_125mHz;
 80062bc:	2301      	movs	r3, #1
 80062be:	7023      	strb	r3, [r4, #0]
      break;
 80062c0:	e7f7      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_250mHz;
 80062c2:	2302      	movs	r3, #2
 80062c4:	7023      	strb	r3, [r4, #0]
      break;
 80062c6:	e7f4      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_500mHz;
 80062c8:	2303      	movs	r3, #3
 80062ca:	7023      	strb	r3, [r4, #0]
      break;
 80062cc:	e7f1      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_1Hz;
 80062ce:	2304      	movs	r3, #4
 80062d0:	7023      	strb	r3, [r4, #0]
      break;
 80062d2:	e7ee      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_2Hz;
 80062d4:	2305      	movs	r3, #5
 80062d6:	7023      	strb	r3, [r4, #0]
      break;
 80062d8:	e7eb      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_4Hz;
 80062da:	2306      	movs	r3, #6
 80062dc:	7023      	strb	r3, [r4, #0]
      break;
 80062de:	e7e8      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_8Hz;
 80062e0:	2307      	movs	r3, #7
 80062e2:	7023      	strb	r3, [r4, #0]
      break;
 80062e4:	e7e5      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_16Hz;
 80062e6:	2308      	movs	r3, #8
 80062e8:	7023      	strb	r3, [r4, #0]
      break;
 80062ea:	e7e2      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_32Hz;
 80062ec:	2309      	movs	r3, #9
 80062ee:	7023      	strb	r3, [r4, #0]
      break;
 80062f0:	e7df      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>
      *val = STTS751_TEMP_ODR_OFF;
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	7023      	strb	r3, [r4, #0]
  return ret;
 80062f6:	e7dc      	b.n	80062b2 <stts751_temp_data_rate_get+0x62>

080062f8 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80062f8:	b530      	push	{r4, r5, lr}
 80062fa:	b083      	sub	sp, #12
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8006300:	2301      	movs	r3, #1
 8006302:	aa01      	add	r2, sp, #4
 8006304:	2103      	movs	r1, #3
 8006306:	f7ff ff4f 	bl	80061a8 <stts751_read_reg>

  if (ret == 0)
 800630a:	b108      	cbz	r0, 8006310 <stts751_resolution_set+0x18>
    reg.tres = (uint8_t) val;
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800630c:	b003      	add	sp, #12
 800630e:	bd30      	pop	{r4, r5, pc}
    reg.tres = (uint8_t) val;
 8006310:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006314:	f365 0383 	bfi	r3, r5, #2, #2
 8006318:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800631c:	2301      	movs	r3, #1
 800631e:	aa01      	add	r2, sp, #4
 8006320:	2103      	movs	r1, #3
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff ff45 	bl	80061b2 <stts751_write_reg>
  return ret;
 8006328:	e7f0      	b.n	800630c <stts751_resolution_set+0x14>

0800632a <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800632a:	b510      	push	{r4, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	460c      	mov	r4, r1
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8006330:	2301      	movs	r3, #1
 8006332:	aa01      	add	r2, sp, #4
 8006334:	2103      	movs	r1, #3
 8006336:	f7ff ff37 	bl	80061a8 <stts751_read_reg>

  switch (reg.tres)
 800633a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800633e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006342:	2b03      	cmp	r3, #3
 8006344:	d810      	bhi.n	8006368 <stts751_resolution_get+0x3e>
 8006346:	e8df f003 	tbb	[pc, r3]
 800634a:	0906      	.short	0x0906
 800634c:	0c02      	.short	0x0c02
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 800634e:	2302      	movs	r3, #2
 8006350:	7023      	strb	r3, [r4, #0]
      *val = STTS751_9bit;
      break;
  }

  return ret;
}
 8006352:	b002      	add	sp, #8
 8006354:	bd10      	pop	{r4, pc}
      *val = STTS751_10bit;
 8006356:	2300      	movs	r3, #0
 8006358:	7023      	strb	r3, [r4, #0]
      break;
 800635a:	e7fa      	b.n	8006352 <stts751_resolution_get+0x28>
      *val = STTS751_11bit;
 800635c:	2301      	movs	r3, #1
 800635e:	7023      	strb	r3, [r4, #0]
      break;
 8006360:	e7f7      	b.n	8006352 <stts751_resolution_get+0x28>
      *val = STTS751_12bit;
 8006362:	2303      	movs	r3, #3
 8006364:	7023      	strb	r3, [r4, #0]
      break;
 8006366:	e7f4      	b.n	8006352 <stts751_resolution_get+0x28>
      *val = STTS751_9bit;
 8006368:	2302      	movs	r3, #2
 800636a:	7023      	strb	r3, [r4, #0]
  return ret;
 800636c:	e7f1      	b.n	8006352 <stts751_resolution_get+0x28>

0800636e <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800636e:	b530      	push	{r4, r5, lr}
 8006370:	b083      	sub	sp, #12
 8006372:	4605      	mov	r5, r0
 8006374:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8006376:	2301      	movs	r3, #1
 8006378:	f10d 0205 	add.w	r2, sp, #5
 800637c:	2100      	movs	r1, #0
 800637e:	f7ff ff13 	bl	80061a8 <stts751_read_reg>
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8006382:	b108      	cbz	r0, 8006388 <stts751_temperature_raw_get+0x1a>
    *val = (int16_t)buff[1];
    *val = (*val * 256) + (int16_t)buff[0];
  }

  return ret;
}
 8006384:	b003      	add	sp, #12
 8006386:	bd30      	pop	{r4, r5, pc}
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8006388:	2301      	movs	r3, #1
 800638a:	aa01      	add	r2, sp, #4
 800638c:	2102      	movs	r1, #2
 800638e:	4628      	mov	r0, r5
 8006390:	f7ff ff0a 	bl	80061a8 <stts751_read_reg>
    *val = (int16_t)buff[1];
 8006394:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006398:	8022      	strh	r2, [r4, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 800639a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800639e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80063a2:	8023      	strh	r3, [r4, #0]
  return ret;
 80063a4:	e7ee      	b.n	8006384 <stts751_temperature_raw_get+0x16>

080063a6 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063a6:	b530      	push	{r4, r5, lr}
 80063a8:	b083      	sub	sp, #12
 80063aa:	4604      	mov	r4, r0
 80063ac:	460d      	mov	r5, r1
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80063ae:	2301      	movs	r3, #1
 80063b0:	aa01      	add	r2, sp, #4
 80063b2:	2103      	movs	r1, #3
 80063b4:	f7ff fef8 	bl	80061a8 <stts751_read_reg>

  if (ret == 0)
 80063b8:	b108      	cbz	r0, 80063be <stts751_pin_event_route_set+0x18>
    reg.mask1 = val;
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80063ba:	b003      	add	sp, #12
 80063bc:	bd30      	pop	{r4, r5, pc}
    reg.mask1 = val;
 80063be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80063c2:	f365 13c7 	bfi	r3, r5, #7, #1
 80063c6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80063ca:	2301      	movs	r3, #1
 80063cc:	aa01      	add	r2, sp, #4
 80063ce:	2103      	movs	r1, #3
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7ff feee 	bl	80061b2 <stts751_write_reg>
  return ret;
 80063d6:	e7f0      	b.n	80063ba <stts751_pin_event_route_set+0x14>

080063d8 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	460c      	mov	r4, r1
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80063de:	2301      	movs	r3, #1
 80063e0:	460a      	mov	r2, r1
 80063e2:	21fd      	movs	r1, #253	; 0xfd
 80063e4:	f7ff fee0 	bl	80061a8 <stts751_read_reg>
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 80063e8:	b108      	cbz	r0, 80063ee <stts751_device_id_get+0x16>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 80063ea:	b138      	cbz	r0, 80063fc <stts751_device_id_get+0x24>
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
}
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80063ee:	2301      	movs	r3, #1
 80063f0:	18e2      	adds	r2, r4, r3
 80063f2:	21fe      	movs	r1, #254	; 0xfe
 80063f4:	4628      	mov	r0, r5
 80063f6:	f7ff fed7 	bl	80061a8 <stts751_read_reg>
 80063fa:	e7f6      	b.n	80063ea <stts751_device_id_get+0x12>
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80063fc:	2301      	movs	r3, #1
 80063fe:	1ca2      	adds	r2, r4, #2
 8006400:	21ff      	movs	r1, #255	; 0xff
 8006402:	4628      	mov	r0, r5
 8006404:	f7ff fed0 	bl	80061a8 <stts751_read_reg>
  return ret;
 8006408:	e7f0      	b.n	80063ec <stts751_device_id_get+0x14>
	...

0800640c <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	b08e      	sub	sp, #56	; 0x38
 8006410:	4604      	mov	r4, r0
  int32_t                ret = BSP_ERROR_NONE;
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8006412:	2300      	movs	r3, #0
 8006414:	9308      	str	r3, [sp, #32]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8006416:	23bf      	movs	r3, #191	; 0xbf
 8006418:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  io_ctx.Init        = IKS01A3_I2C_Init;
 800641c:	4b35      	ldr	r3, [pc, #212]	; (80064f4 <HTS221_0_Probe+0xe8>)
 800641e:	9306      	str	r3, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006420:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <HTS221_0_Probe+0xec>)
 8006422:	9307      	str	r3, [sp, #28]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006424:	4b35      	ldr	r3, [pc, #212]	; (80064fc <HTS221_0_Probe+0xf0>)
 8006426:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006428:	4b35      	ldr	r3, [pc, #212]	; (8006500 <HTS221_0_Probe+0xf4>)
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.GetTick     = IKS01A3_GetTick;
 800642c:	4b35      	ldr	r3, [pc, #212]	; (8006504 <HTS221_0_Probe+0xf8>)
 800642e:	930c      	str	r3, [sp, #48]	; 0x30

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006430:	a906      	add	r1, sp, #24
 8006432:	4835      	ldr	r0, [pc, #212]	; (8006508 <HTS221_0_Probe+0xfc>)
 8006434:	f7fc fa52 	bl	80028dc <HTS221_RegisterBusIO>
 8006438:	2800      	cmp	r0, #0
 800643a:	d14e      	bne.n	80064da <HTS221_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800643c:	f10d 0117 	add.w	r1, sp, #23
 8006440:	4831      	ldr	r0, [pc, #196]	; (8006508 <HTS221_0_Probe+0xfc>)
 8006442:	f7fc f97b 	bl	800273c <HTS221_ReadID>
 8006446:	4605      	mov	r5, r0
 8006448:	2800      	cmp	r0, #0
 800644a:	d149      	bne.n	80064e0 <HTS221_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 800644c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006450:	2bbc      	cmp	r3, #188	; 0xbc
 8006452:	d148      	bne.n	80064e6 <HTS221_0_Probe+0xda>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8006454:	4e2c      	ldr	r6, [pc, #176]	; (8006508 <HTS221_0_Probe+0xfc>)
 8006456:	a901      	add	r1, sp, #4
 8006458:	4630      	mov	r0, r6
 800645a:	f7fc f85f 	bl	800251c <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800645e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006462:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006466:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                           uint32_t)cap.Humidity << 2);
 800646a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800646e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8006472:	4926      	ldr	r1, [pc, #152]	; (800650c <HTS221_0_Probe+0x100>)
 8006474:	600b      	str	r3, [r1, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8006476:	4b26      	ldr	r3, [pc, #152]	; (8006510 <HTS221_0_Probe+0x104>)
 8006478:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800647a:	4b26      	ldr	r3, [pc, #152]	; (8006514 <HTS221_0_Probe+0x108>)
 800647c:	4926      	ldr	r1, [pc, #152]	; (8006518 <HTS221_0_Probe+0x10c>)
 800647e:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8006480:	f014 0f01 	tst.w	r4, #1
 8006484:	d001      	beq.n	800648a <HTS221_0_Probe+0x7e>
 8006486:	2a01      	cmp	r2, #1
 8006488:	d00d      	beq.n	80064a6 <HTS221_0_Probe+0x9a>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800648a:	f014 0f04 	tst.w	r4, #4
 800648e:	d003      	beq.n	8006498 <HTS221_0_Probe+0x8c>
 8006490:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d011      	beq.n	80064bc <HTS221_0_Probe+0xb0>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8006498:	b915      	cbnz	r5, 80064a0 <HTS221_0_Probe+0x94>
 800649a:	f014 0f02 	tst.w	r4, #2
 800649e:	d125      	bne.n	80064ec <HTS221_0_Probe+0xe0>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 80064a0:	4628      	mov	r0, r5
 80064a2:	b00e      	add	sp, #56	; 0x38
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80064a6:	4b1d      	ldr	r3, [pc, #116]	; (800651c <HTS221_0_Probe+0x110>)
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HTS221_0_Probe+0x114>)
 80064aa:	601a      	str	r2, [r3, #0]
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80064ac:	680b      	ldr	r3, [r1, #0]
 80064ae:	4630      	mov	r0, r6
 80064b0:	4798      	blx	r3
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d0e9      	beq.n	800648a <HTS221_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064b6:	f06f 0504 	mvn.w	r5, #4
 80064ba:	e7ed      	b.n	8006498 <HTS221_0_Probe+0x8c>
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80064bc:	4b17      	ldr	r3, [pc, #92]	; (800651c <HTS221_0_Probe+0x110>)
 80064be:	4a19      	ldr	r2, [pc, #100]	; (8006524 <HTS221_0_Probe+0x118>)
 80064c0:	609a      	str	r2, [r3, #8]
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <HTS221_0_Probe+0x108>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a11      	ldr	r2, [pc, #68]	; (8006510 <HTS221_0_Probe+0x104>)
 80064ca:	6810      	ldr	r0, [r2, #0]
 80064cc:	4798      	blx	r3
 80064ce:	4605      	mov	r5, r0
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0e2      	beq.n	800649a <HTS221_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064d4:	f06f 0504 	mvn.w	r5, #4
 80064d8:	e7e2      	b.n	80064a0 <HTS221_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80064da:	f06f 0506 	mvn.w	r5, #6
 80064de:	e7df      	b.n	80064a0 <HTS221_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80064e0:	f06f 0506 	mvn.w	r5, #6
 80064e4:	e7dc      	b.n	80064a0 <HTS221_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80064e6:	f06f 0506 	mvn.w	r5, #6
 80064ea:	e7d9      	b.n	80064a0 <HTS221_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80064ec:	f06f 0504 	mvn.w	r5, #4
  return ret;
 80064f0:	e7d6      	b.n	80064a0 <HTS221_0_Probe+0x94>
 80064f2:	bf00      	nop
 80064f4:	080023b1 	.word	0x080023b1
 80064f8:	08002249 	.word	0x08002249
 80064fc:	080022bd 	.word	0x080022bd
 8006500:	08002281 	.word	0x08002281
 8006504:	080022f9 	.word	0x080022f9
 8006508:	2000f670 	.word	0x2000f670
 800650c:	2000f634 	.word	0x2000f634
 8006510:	2000f628 	.word	0x2000f628
 8006514:	2000f640 	.word	0x2000f640
 8006518:	20000008 	.word	0x20000008
 800651c:	2000f64c 	.word	0x2000f64c
 8006520:	2000002c 	.word	0x2000002c
 8006524:	20000018 	.word	0x20000018

08006528 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	b08e      	sub	sp, #56	; 0x38
 800652c:	4604      	mov	r4, r0
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8006532:	23bb      	movs	r3, #187	; 0xbb
 8006534:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006538:	4b35      	ldr	r3, [pc, #212]	; (8006610 <LPS22HH_0_Probe+0xe8>)
 800653a:	9306      	str	r3, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <LPS22HH_0_Probe+0xec>)
 800653e:	9307      	str	r3, [sp, #28]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006540:	4b35      	ldr	r3, [pc, #212]	; (8006618 <LPS22HH_0_Probe+0xf0>)
 8006542:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006544:	4b35      	ldr	r3, [pc, #212]	; (800661c <LPS22HH_0_Probe+0xf4>)
 8006546:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006548:	4b35      	ldr	r3, [pc, #212]	; (8006620 <LPS22HH_0_Probe+0xf8>)
 800654a:	930c      	str	r3, [sp, #48]	; 0x30

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800654c:	a906      	add	r1, sp, #24
 800654e:	4835      	ldr	r0, [pc, #212]	; (8006624 <LPS22HH_0_Probe+0xfc>)
 8006550:	f7fe f8c4 	bl	80046dc <LPS22HH_RegisterBusIO>
 8006554:	2800      	cmp	r0, #0
 8006556:	d14e      	bne.n	80065f6 <LPS22HH_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8006558:	f10d 0117 	add.w	r1, sp, #23
 800655c:	4831      	ldr	r0, [pc, #196]	; (8006624 <LPS22HH_0_Probe+0xfc>)
 800655e:	f7fd ff68 	bl	8004432 <LPS22HH_ReadID>
 8006562:	4605      	mov	r5, r0
 8006564:	2800      	cmp	r0, #0
 8006566:	d149      	bne.n	80065fc <LPS22HH_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 8006568:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800656c:	2bb3      	cmp	r3, #179	; 0xb3
 800656e:	d148      	bne.n	8006602 <LPS22HH_0_Probe+0xda>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8006570:	4e2c      	ldr	r6, [pc, #176]	; (8006624 <LPS22HH_0_Probe+0xfc>)
 8006572:	a901      	add	r1, sp, #4
 8006574:	4630      	mov	r0, r6
 8006576:	f7fd fe97 	bl	80042a8 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800657a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800657e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006582:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                            uint32_t)cap.Humidity << 2);
 8006586:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800658a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800658e:	4926      	ldr	r1, [pc, #152]	; (8006628 <LPS22HH_0_Probe+0x100>)
 8006590:	604b      	str	r3, [r1, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8006592:	4b26      	ldr	r3, [pc, #152]	; (800662c <LPS22HH_0_Probe+0x104>)
 8006594:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <LPS22HH_0_Probe+0x108>)
 8006598:	4926      	ldr	r1, [pc, #152]	; (8006634 <LPS22HH_0_Probe+0x10c>)
 800659a:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800659c:	f014 0f01 	tst.w	r4, #1
 80065a0:	d001      	beq.n	80065a6 <LPS22HH_0_Probe+0x7e>
 80065a2:	2a01      	cmp	r2, #1
 80065a4:	d00d      	beq.n	80065c2 <LPS22HH_0_Probe+0x9a>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80065a6:	f014 0f02 	tst.w	r4, #2
 80065aa:	d003      	beq.n	80065b4 <LPS22HH_0_Probe+0x8c>
 80065ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d011      	beq.n	80065d8 <LPS22HH_0_Probe+0xb0>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80065b4:	b915      	cbnz	r5, 80065bc <LPS22HH_0_Probe+0x94>
 80065b6:	f014 0f04 	tst.w	r4, #4
 80065ba:	d125      	bne.n	8006608 <LPS22HH_0_Probe+0xe0>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80065bc:	4628      	mov	r0, r5
 80065be:	b00e      	add	sp, #56	; 0x38
 80065c0:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <LPS22HH_0_Probe+0x110>)
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <LPS22HH_0_Probe+0x114>)
 80065c6:	60da      	str	r2, [r3, #12]
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80065c8:	680b      	ldr	r3, [r1, #0]
 80065ca:	4630      	mov	r0, r6
 80065cc:	4798      	blx	r3
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d0e9      	beq.n	80065a6 <LPS22HH_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065d2:	f06f 0504 	mvn.w	r5, #4
 80065d6:	e7ed      	b.n	80065b4 <LPS22HH_0_Probe+0x8c>
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80065d8:	4b17      	ldr	r3, [pc, #92]	; (8006638 <LPS22HH_0_Probe+0x110>)
 80065da:	4a19      	ldr	r2, [pc, #100]	; (8006640 <LPS22HH_0_Probe+0x118>)
 80065dc:	611a      	str	r2, [r3, #16]
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80065de:	4b14      	ldr	r3, [pc, #80]	; (8006630 <LPS22HH_0_Probe+0x108>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a11      	ldr	r2, [pc, #68]	; (800662c <LPS22HH_0_Probe+0x104>)
 80065e6:	6850      	ldr	r0, [r2, #4]
 80065e8:	4798      	blx	r3
 80065ea:	4605      	mov	r5, r0
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0e2      	beq.n	80065b6 <LPS22HH_0_Probe+0x8e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80065f0:	f06f 0504 	mvn.w	r5, #4
 80065f4:	e7e2      	b.n	80065bc <LPS22HH_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80065f6:	f06f 0506 	mvn.w	r5, #6
 80065fa:	e7df      	b.n	80065bc <LPS22HH_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80065fc:	f06f 0506 	mvn.w	r5, #6
 8006600:	e7dc      	b.n	80065bc <LPS22HH_0_Probe+0x94>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006602:	f06f 0506 	mvn.w	r5, #6
 8006606:	e7d9      	b.n	80065bc <LPS22HH_0_Probe+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006608:	f06f 0504 	mvn.w	r5, #4
  return ret;
 800660c:	e7d6      	b.n	80065bc <LPS22HH_0_Probe+0x94>
 800660e:	bf00      	nop
 8006610:	080023b1 	.word	0x080023b1
 8006614:	08002249 	.word	0x08002249
 8006618:	080022bd 	.word	0x080022bd
 800661c:	08002281 	.word	0x08002281
 8006620:	080022f9 	.word	0x080022f9
 8006624:	2000f6a4 	.word	0x2000f6a4
 8006628:	2000f634 	.word	0x2000f634
 800662c:	2000f628 	.word	0x2000f628
 8006630:	2000f640 	.word	0x2000f640
 8006634:	200000a8 	.word	0x200000a8
 8006638:	2000f64c 	.word	0x2000f64c
 800663c:	200000cc 	.word	0x200000cc
 8006640:	200000b8 	.word	0x200000b8

08006644 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	b08e      	sub	sp, #56	; 0x38
 8006648:	4604      	mov	r4, r0
  int32_t                 ret = BSP_ERROR_NONE;
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800664a:	2300      	movs	r3, #0
 800664c:	9308      	str	r3, [sp, #32]
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800664e:	2395      	movs	r3, #149	; 0x95
 8006650:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006654:	4b2d      	ldr	r3, [pc, #180]	; (800670c <STTS751_0_Probe+0xc8>)
 8006656:	9306      	str	r3, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006658:	4b2d      	ldr	r3, [pc, #180]	; (8006710 <STTS751_0_Probe+0xcc>)
 800665a:	9307      	str	r3, [sp, #28]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800665c:	4b2d      	ldr	r3, [pc, #180]	; (8006714 <STTS751_0_Probe+0xd0>)
 800665e:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006660:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <STTS751_0_Probe+0xd4>)
 8006662:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006664:	4b2d      	ldr	r3, [pc, #180]	; (800671c <STTS751_0_Probe+0xd8>)
 8006666:	930c      	str	r3, [sp, #48]	; 0x30

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006668:	a906      	add	r1, sp, #24
 800666a:	482d      	ldr	r0, [pc, #180]	; (8006720 <STTS751_0_Probe+0xdc>)
 800666c:	f7ff fd76 	bl	800615c <STTS751_RegisterBusIO>
 8006670:	2800      	cmp	r0, #0
 8006672:	d13b      	bne.n	80066ec <STTS751_0_Probe+0xa8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8006674:	f10d 0117 	add.w	r1, sp, #23
 8006678:	4829      	ldr	r0, [pc, #164]	; (8006720 <STTS751_0_Probe+0xdc>)
 800667a:	f7ff fc1a 	bl	8005eb2 <STTS751_ReadID>
 800667e:	4605      	mov	r5, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	d136      	bne.n	80066f2 <STTS751_0_Probe+0xae>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != STTS751_ID_MAN)
 8006684:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006688:	2b53      	cmp	r3, #83	; 0x53
 800668a:	d135      	bne.n	80066f8 <STTS751_0_Probe+0xb4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800668c:	4e24      	ldr	r6, [pc, #144]	; (8006720 <STTS751_0_Probe+0xdc>)
 800668e:	a901      	add	r1, sp, #4
 8006690:	4630      	mov	r0, r6
 8006692:	f7ff fb95 	bl	8005dc0 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006696:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800669a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800669e:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                            uint32_t)cap.Humidity << 2);
 80066a2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80066a6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80066aa:	491e      	ldr	r1, [pc, #120]	; (8006724 <STTS751_0_Probe+0xe0>)
 80066ac:	608b      	str	r3, [r1, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80066ae:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <STTS751_0_Probe+0xe4>)
 80066b0:	609e      	str	r6, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80066b2:	4b1e      	ldr	r3, [pc, #120]	; (800672c <STTS751_0_Probe+0xe8>)
 80066b4:	491e      	ldr	r1, [pc, #120]	; (8006730 <STTS751_0_Probe+0xec>)
 80066b6:	6099      	str	r1, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80066b8:	f014 0f01 	tst.w	r4, #1
 80066bc:	d001      	beq.n	80066c2 <STTS751_0_Probe+0x7e>
 80066be:	2a01      	cmp	r2, #1
 80066c0:	d009      	beq.n	80066d6 <STTS751_0_Probe+0x92>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80066c2:	f014 0f04 	tst.w	r4, #4
 80066c6:	d11a      	bne.n	80066fe <STTS751_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80066c8:	b915      	cbnz	r5, 80066d0 <STTS751_0_Probe+0x8c>
 80066ca:	f014 0f02 	tst.w	r4, #2
 80066ce:	d119      	bne.n	8006704 <STTS751_0_Probe+0xc0>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 80066d0:	4628      	mov	r0, r5
 80066d2:	b00e      	add	sp, #56	; 0x38
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80066d6:	4b17      	ldr	r3, [pc, #92]	; (8006734 <STTS751_0_Probe+0xf0>)
 80066d8:	4a17      	ldr	r2, [pc, #92]	; (8006738 <STTS751_0_Probe+0xf4>)
 80066da:	619a      	str	r2, [r3, #24]
      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 80066dc:	680b      	ldr	r3, [r1, #0]
 80066de:	4630      	mov	r0, r6
 80066e0:	4798      	blx	r3
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d0ed      	beq.n	80066c2 <STTS751_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80066e6:	f06f 0504 	mvn.w	r5, #4
 80066ea:	e7ed      	b.n	80066c8 <STTS751_0_Probe+0x84>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066ec:	f06f 0506 	mvn.w	r5, #6
 80066f0:	e7ee      	b.n	80066d0 <STTS751_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066f2:	f06f 0506 	mvn.w	r5, #6
 80066f6:	e7eb      	b.n	80066d0 <STTS751_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80066f8:	f06f 0506 	mvn.w	r5, #6
 80066fc:	e7e8      	b.n	80066d0 <STTS751_0_Probe+0x8c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80066fe:	f06f 0504 	mvn.w	r5, #4
 8006702:	e7e5      	b.n	80066d0 <STTS751_0_Probe+0x8c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006704:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8006708:	e7e2      	b.n	80066d0 <STTS751_0_Probe+0x8c>
 800670a:	bf00      	nop
 800670c:	080023b1 	.word	0x080023b1
 8006710:	08002249 	.word	0x08002249
 8006714:	080022bd 	.word	0x080022bd
 8006718:	08002281 	.word	0x08002281
 800671c:	080022f9 	.word	0x080022f9
 8006720:	2000f6d8 	.word	0x2000f6d8
 8006724:	2000f634 	.word	0x2000f634
 8006728:	2000f628 	.word	0x2000f628
 800672c:	2000f640 	.word	0x2000f640
 8006730:	20000138 	.word	0x20000138
 8006734:	2000f64c 	.word	0x2000f64c
 8006738:	20000148 	.word	0x20000148

0800673c <IKS01A3_ENV_SENSOR_Init>:
{
 800673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	4604      	mov	r4, r0
 8006744:	460f      	mov	r7, r1
  switch (Instance)
 8006746:	2801      	cmp	r0, #1
 8006748:	d030      	beq.n	80067ac <IKS01A3_ENV_SENSOR_Init+0x70>
 800674a:	2802      	cmp	r0, #2
 800674c:	d054      	beq.n	80067f8 <IKS01A3_ENV_SENSOR_Init+0xbc>
 800674e:	b110      	cbz	r0, 8006756 <IKS01A3_ENV_SENSOR_Init+0x1a>
 8006750:	f06f 0001 	mvn.w	r0, #1
 8006754:	e095      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8006756:	4608      	mov	r0, r1
 8006758:	f7ff fe58 	bl	800640c <HTS221_0_Probe>
 800675c:	2800      	cmp	r0, #0
 800675e:	f040 8093 	bne.w	8006888 <IKS01A3_ENV_SENSOR_Init+0x14c>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006762:	4b52      	ldr	r3, [pc, #328]	; (80068ac <IKS01A3_ENV_SENSOR_Init+0x170>)
 8006764:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	4669      	mov	r1, sp
 800676c:	4a50      	ldr	r2, [pc, #320]	; (80068b0 <IKS01A3_ENV_SENSOR_Init+0x174>)
 800676e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006772:	4798      	blx	r3
 8006774:	2800      	cmp	r0, #0
 8006776:	f040 808a 	bne.w	800688e <IKS01A3_ENV_SENSOR_Init+0x152>
      if (cap.Temperature == 1U)
 800677a:	f89d 3000 	ldrb.w	r3, [sp]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d00b      	beq.n	800679a <IKS01A3_ENV_SENSOR_Init+0x5e>
  uint32_t component_functions = 0;
 8006782:	46a0      	mov	r8, r4
      if (cap.Humidity == 1U)
 8006784:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d009      	beq.n	80067a0 <IKS01A3_ENV_SENSOR_Init+0x64>
      if (cap.Pressure == 1U)
 800678c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d008      	beq.n	80067a6 <IKS01A3_ENV_SENSOR_Init+0x6a>
  uint32_t component_functions = 0;
 8006794:	2600      	movs	r6, #0
 8006796:	2501      	movs	r5, #1
 8006798:	e057      	b.n	800684a <IKS01A3_ENV_SENSOR_Init+0x10e>
        component_functions |= ENV_TEMPERATURE;
 800679a:	f04f 0801 	mov.w	r8, #1
 800679e:	e7f1      	b.n	8006784 <IKS01A3_ENV_SENSOR_Init+0x48>
        component_functions |= ENV_HUMIDITY;
 80067a0:	f048 0804 	orr.w	r8, r8, #4
 80067a4:	e7f2      	b.n	800678c <IKS01A3_ENV_SENSOR_Init+0x50>
        component_functions |= ENV_PRESSURE;
 80067a6:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 80067aa:	e7f3      	b.n	8006794 <IKS01A3_ENV_SENSOR_Init+0x58>
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 80067ac:	4608      	mov	r0, r1
 80067ae:	f7ff febb 	bl	8006528 <LPS22HH_0_Probe>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d16e      	bne.n	8006894 <IKS01A3_ENV_SENSOR_Init+0x158>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80067b6:	4b3d      	ldr	r3, [pc, #244]	; (80068ac <IKS01A3_ENV_SENSOR_Init+0x170>)
 80067b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	4669      	mov	r1, sp
 80067c0:	4a3b      	ldr	r2, [pc, #236]	; (80068b0 <IKS01A3_ENV_SENSOR_Init+0x174>)
 80067c2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80067c6:	4798      	blx	r3
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d166      	bne.n	800689a <IKS01A3_ENV_SENSOR_Init+0x15e>
      if (cap.Temperature == 1U)
 80067cc:	f89d 3000 	ldrb.w	r3, [sp]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d00c      	beq.n	80067ee <IKS01A3_ENV_SENSOR_Init+0xb2>
  uint32_t component_functions = 0;
 80067d4:	f04f 0800 	mov.w	r8, #0
      if (cap.Humidity == 1U)
 80067d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d008      	beq.n	80067f2 <IKS01A3_ENV_SENSOR_Init+0xb6>
      if (cap.Pressure == 1U)
 80067e0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d1d5      	bne.n	8006794 <IKS01A3_ENV_SENSOR_Init+0x58>
        component_functions |= ENV_PRESSURE;
 80067e8:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 80067ec:	e7d2      	b.n	8006794 <IKS01A3_ENV_SENSOR_Init+0x58>
        component_functions |= ENV_TEMPERATURE;
 80067ee:	46a0      	mov	r8, r4
 80067f0:	e7f2      	b.n	80067d8 <IKS01A3_ENV_SENSOR_Init+0x9c>
        component_functions |= ENV_HUMIDITY;
 80067f2:	f048 0804 	orr.w	r8, r8, #4
 80067f6:	e7f3      	b.n	80067e0 <IKS01A3_ENV_SENSOR_Init+0xa4>
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 80067f8:	4608      	mov	r0, r1
 80067fa:	f7ff ff23 	bl	8006644 <STTS751_0_Probe>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d14e      	bne.n	80068a0 <IKS01A3_ENV_SENSOR_Init+0x164>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006802:	4b2a      	ldr	r3, [pc, #168]	; (80068ac <IKS01A3_ENV_SENSOR_Init+0x170>)
 8006804:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	4669      	mov	r1, sp
 800680c:	4a28      	ldr	r2, [pc, #160]	; (80068b0 <IKS01A3_ENV_SENSOR_Init+0x174>)
 800680e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006812:	4798      	blx	r3
 8006814:	2800      	cmp	r0, #0
 8006816:	d146      	bne.n	80068a6 <IKS01A3_ENV_SENSOR_Init+0x16a>
      if (cap.Temperature == 1U)
 8006818:	f89d 3000 	ldrb.w	r3, [sp]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d00c      	beq.n	800683a <IKS01A3_ENV_SENSOR_Init+0xfe>
  uint32_t component_functions = 0;
 8006820:	f04f 0800 	mov.w	r8, #0
      if (cap.Humidity == 1U)
 8006824:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d009      	beq.n	8006840 <IKS01A3_ENV_SENSOR_Init+0x104>
      if (cap.Pressure == 1U)
 800682c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d1af      	bne.n	8006794 <IKS01A3_ENV_SENSOR_Init+0x58>
        component_functions |= ENV_PRESSURE;
 8006834:	f048 0802 	orr.w	r8, r8, #2
  if (ret != BSP_ERROR_NONE)
 8006838:	e7ac      	b.n	8006794 <IKS01A3_ENV_SENSOR_Init+0x58>
        component_functions |= ENV_TEMPERATURE;
 800683a:	f04f 0801 	mov.w	r8, #1
 800683e:	e7f1      	b.n	8006824 <IKS01A3_ENV_SENSOR_Init+0xe8>
        component_functions |= ENV_HUMIDITY;
 8006840:	f048 0804 	orr.w	r8, r8, #4
 8006844:	e7f2      	b.n	800682c <IKS01A3_ENV_SENSOR_Init+0xf0>
    function = function << 1;
 8006846:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8006848:	3601      	adds	r6, #1
 800684a:	2e02      	cmp	r6, #2
 800684c:	d818      	bhi.n	8006880 <IKS01A3_ENV_SENSOR_Init+0x144>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800684e:	ea35 0307 	bics.w	r3, r5, r7
 8006852:	d1f8      	bne.n	8006846 <IKS01A3_ENV_SENSOR_Init+0x10a>
 8006854:	ea35 0308 	bics.w	r3, r5, r8
 8006858:	d1f5      	bne.n	8006846 <IKS01A3_ENV_SENSOR_Init+0x10a>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800685a:	4b16      	ldr	r3, [pc, #88]	; (80068b4 <IKS01A3_ENV_SENSOR_Init+0x178>)
 800685c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006860:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006864:	4413      	add	r3, r2
 8006866:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <IKS01A3_ENV_SENSOR_Init+0x17c>)
 8006868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <IKS01A3_ENV_SENSOR_Init+0x174>)
 8006870:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006874:	4798      	blx	r3
 8006876:	2800      	cmp	r0, #0
 8006878:	d0e5      	beq.n	8006846 <IKS01A3_ENV_SENSOR_Init+0x10a>
        return BSP_ERROR_COMPONENT_FAILURE;
 800687a:	f06f 0004 	mvn.w	r0, #4
 800687e:	e000      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
 8006880:	2000      	movs	r0, #0
}
 8006882:	b004      	add	sp, #16
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	e7f9      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800688e:	f06f 0006 	mvn.w	r0, #6
 8006892:	e7f6      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	e7f3      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800689a:	f06f 0006 	mvn.w	r0, #6
 800689e:	e7f0      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e7ed      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80068a6:	f06f 0006 	mvn.w	r0, #6
 80068aa:	e7ea      	b.n	8006882 <IKS01A3_ENV_SENSOR_Init+0x146>
 80068ac:	2000f640 	.word	0x2000f640
 80068b0:	2000f628 	.word	0x2000f628
 80068b4:	0800f3c8 	.word	0x0800f3c8
 80068b8:	2000f64c 	.word	0x2000f64c

080068bc <IKS01A3_ENV_SENSOR_Enable>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80068bc:	2802      	cmp	r0, #2
 80068be:	d819      	bhi.n	80068f4 <IKS01A3_ENV_SENSOR_Enable+0x38>
{
 80068c0:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <IKS01A3_ENV_SENSOR_Enable+0x44>)
 80068c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80068c8:	ea31 0303 	bics.w	r3, r1, r3
 80068cc:	d115      	bne.n	80068fa <IKS01A3_ENV_SENSOR_Enable+0x3e>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <IKS01A3_ENV_SENSOR_Enable+0x48>)
 80068d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80068d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80068d8:	4413      	add	r3, r2
 80068da:	4a0b      	ldr	r2, [pc, #44]	; (8006908 <IKS01A3_ENV_SENSOR_Enable+0x4c>)
 80068dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <IKS01A3_ENV_SENSOR_Enable+0x50>)
 80068e4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80068e8:	4798      	blx	r3
 80068ea:	b900      	cbnz	r0, 80068ee <IKS01A3_ENV_SENSOR_Enable+0x32>
}
 80068ec:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068ee:	f06f 0004 	mvn.w	r0, #4
 80068f2:	e7fb      	b.n	80068ec <IKS01A3_ENV_SENSOR_Enable+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80068f4:	f06f 0001 	mvn.w	r0, #1
}
 80068f8:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 80068fa:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80068fe:	e7f5      	b.n	80068ec <IKS01A3_ENV_SENSOR_Enable+0x30>
 8006900:	2000f634 	.word	0x2000f634
 8006904:	0800f3c8 	.word	0x0800f3c8
 8006908:	2000f64c 	.word	0x2000f64c
 800690c:	2000f628 	.word	0x2000f628

08006910 <IKS01A3_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8006910:	2802      	cmp	r0, #2
 8006912:	d81b      	bhi.n	800694c <IKS01A3_ENV_SENSOR_GetValue+0x3c>
{
 8006914:	b508      	push	{r3, lr}
 8006916:	460b      	mov	r3, r1
 8006918:	4611      	mov	r1, r2
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800691a:	4a0f      	ldr	r2, [pc, #60]	; (8006958 <IKS01A3_ENV_SENSOR_GetValue+0x48>)
 800691c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006920:	ea33 0202 	bics.w	r2, r3, r2
 8006924:	d115      	bne.n	8006952 <IKS01A3_ENV_SENSOR_GetValue+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8006926:	4a0d      	ldr	r2, [pc, #52]	; (800695c <IKS01A3_ENV_SENSOR_GetValue+0x4c>)
 8006928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800692c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006930:	4413      	add	r3, r2
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <IKS01A3_ENV_SENSOR_GetValue+0x50>)
 8006934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <IKS01A3_ENV_SENSOR_GetValue+0x54>)
 800693c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006940:	4798      	blx	r3
 8006942:	b900      	cbnz	r0, 8006946 <IKS01A3_ENV_SENSOR_GetValue+0x36>
}
 8006944:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006946:	f06f 0004 	mvn.w	r0, #4
 800694a:	e7fb      	b.n	8006944 <IKS01A3_ENV_SENSOR_GetValue+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 800694c:	f06f 0001 	mvn.w	r0, #1
}
 8006950:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8006952:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006956:	e7f5      	b.n	8006944 <IKS01A3_ENV_SENSOR_GetValue+0x34>
 8006958:	2000f634 	.word	0x2000f634
 800695c:	0800f3c8 	.word	0x0800f3c8
 8006960:	2000f64c 	.word	0x2000f64c
 8006964:	2000f628 	.word	0x2000f628

08006968 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	b090      	sub	sp, #64	; 0x40
 800696c:	4604      	mov	r4, r0
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800696e:	2300      	movs	r3, #0
 8006970:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8006972:	23d7      	movs	r3, #215	; 0xd7
 8006974:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006978:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <LSM6DSO_0_Probe+0xec>)
 800697a:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <LSM6DSO_0_Probe+0xf0>)
 800697e:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006980:	4b36      	ldr	r3, [pc, #216]	; (8006a5c <LSM6DSO_0_Probe+0xf4>)
 8006982:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006984:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <LSM6DSO_0_Probe+0xf8>)
 8006986:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006988:	4b36      	ldr	r3, [pc, #216]	; (8006a64 <LSM6DSO_0_Probe+0xfc>)
 800698a:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 800698c:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <LSM6DSO_0_Probe+0x100>)
 800698e:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8006990:	a908      	add	r1, sp, #32
 8006992:	4836      	ldr	r0, [pc, #216]	; (8006a6c <LSM6DSO_0_Probe+0x104>)
 8006994:	f7fe feaa 	bl	80056ec <LSM6DSO_RegisterBusIO>
 8006998:	2800      	cmp	r0, #0
 800699a:	d14e      	bne.n	8006a3a <LSM6DSO_0_Probe+0xd2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800699c:	f10d 011f 	add.w	r1, sp, #31
 80069a0:	4832      	ldr	r0, [pc, #200]	; (8006a6c <LSM6DSO_0_Probe+0x104>)
 80069a2:	f7fe faaf 	bl	8004f04 <LSM6DSO_ReadID>
 80069a6:	4605      	mov	r5, r0
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d149      	bne.n	8006a40 <LSM6DSO_0_Probe+0xd8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSO_ID)
 80069ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80069b0:	2b6c      	cmp	r3, #108	; 0x6c
 80069b2:	d148      	bne.n	8006a46 <LSM6DSO_0_Probe+0xde>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80069b4:	4e2d      	ldr	r6, [pc, #180]	; (8006a6c <LSM6DSO_0_Probe+0x104>)
 80069b6:	4669      	mov	r1, sp
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7fe f827 	bl	8004a0c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80069be:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80069c2:	f89d 3000 	ldrb.w	r3, [sp]
 80069c6:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80069ca:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80069ce:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80069d2:	4927      	ldr	r1, [pc, #156]	; (8006a70 <LSM6DSO_0_Probe+0x108>)
 80069d4:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80069d6:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <LSM6DSO_0_Probe+0x10c>)
 80069d8:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80069da:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <LSM6DSO_0_Probe+0x110>)
 80069dc:	4927      	ldr	r1, [pc, #156]	; (8006a7c <LSM6DSO_0_Probe+0x114>)
 80069de:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80069e0:	f014 0f01 	tst.w	r4, #1
 80069e4:	d001      	beq.n	80069ea <LSM6DSO_0_Probe+0x82>
 80069e6:	2a01      	cmp	r2, #1
 80069e8:	d00d      	beq.n	8006a06 <LSM6DSO_0_Probe+0x9e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80069ea:	f014 0f02 	tst.w	r4, #2
 80069ee:	d003      	beq.n	80069f8 <LSM6DSO_0_Probe+0x90>
 80069f0:	f89d 3000 	ldrb.w	r3, [sp]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d011      	beq.n	8006a1c <LSM6DSO_0_Probe+0xb4>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80069f8:	b915      	cbnz	r5, 8006a00 <LSM6DSO_0_Probe+0x98>
 80069fa:	f014 0f04 	tst.w	r4, #4
 80069fe:	d125      	bne.n	8006a4c <LSM6DSO_0_Probe+0xe4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8006a00:	4628      	mov	r0, r5
 8006a02:	b010      	add	sp, #64	; 0x40
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8006a06:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <LSM6DSO_0_Probe+0x118>)
 8006a08:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <LSM6DSO_0_Probe+0x11c>)
 8006a0a:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006a0c:	680b      	ldr	r3, [r1, #0]
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4798      	blx	r3
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0e9      	beq.n	80069ea <LSM6DSO_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a16:	f06f 0504 	mvn.w	r5, #4
 8006a1a:	e7ed      	b.n	80069f8 <LSM6DSO_0_Probe+0x90>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <LSM6DSO_0_Probe+0x118>)
 8006a1e:	4a1a      	ldr	r2, [pc, #104]	; (8006a88 <LSM6DSO_0_Probe+0x120>)
 8006a20:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <LSM6DSO_0_Probe+0x110>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <LSM6DSO_0_Probe+0x10c>)
 8006a2a:	6810      	ldr	r0, [r2, #0]
 8006a2c:	4798      	blx	r3
 8006a2e:	4605      	mov	r5, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0e2      	beq.n	80069fa <LSM6DSO_0_Probe+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a34:	f06f 0504 	mvn.w	r5, #4
 8006a38:	e7e2      	b.n	8006a00 <LSM6DSO_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a3a:	f06f 0506 	mvn.w	r5, #6
 8006a3e:	e7df      	b.n	8006a00 <LSM6DSO_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a40:	f06f 0506 	mvn.w	r5, #6
 8006a44:	e7dc      	b.n	8006a00 <LSM6DSO_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a46:	f06f 0506 	mvn.w	r5, #6
 8006a4a:	e7d9      	b.n	8006a00 <LSM6DSO_0_Probe+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a4c:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8006a50:	e7d6      	b.n	8006a00 <LSM6DSO_0_Probe+0x98>
 8006a52:	bf00      	nop
 8006a54:	080023b1 	.word	0x080023b1
 8006a58:	08002249 	.word	0x08002249
 8006a5c:	080022bd 	.word	0x080022bd
 8006a60:	08002281 	.word	0x08002281
 8006a64:	080022f9 	.word	0x080022f9
 8006a68:	080071f1 	.word	0x080071f1
 8006a6c:	2000f7c8 	.word	0x2000f7c8
 8006a70:	2000f71c 	.word	0x2000f71c
 8006a74:	2000f710 	.word	0x2000f710
 8006a78:	2000f728 	.word	0x2000f728
 8006a7c:	20000104 	.word	0x20000104
 8006a80:	2000f734 	.word	0x2000f734
 8006a84:	20000114 	.word	0x20000114
 8006a88:	200000e0 	.word	0x200000e0

08006a8c <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	b090      	sub	sp, #64	; 0x40
 8006a90:	4604      	mov	r4, r0
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8006a92:	2300      	movs	r3, #0
 8006a94:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8006a96:	2333      	movs	r3, #51	; 0x33
 8006a98:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006a9c:	4b2e      	ldr	r3, [pc, #184]	; (8006b58 <LIS2DW12_0_Probe+0xcc>)
 8006a9e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <LIS2DW12_0_Probe+0xd0>)
 8006aa2:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006aa4:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <LIS2DW12_0_Probe+0xd4>)
 8006aa6:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006aa8:	4b2e      	ldr	r3, [pc, #184]	; (8006b64 <LIS2DW12_0_Probe+0xd8>)
 8006aaa:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006aac:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <LIS2DW12_0_Probe+0xdc>)
 8006aae:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 8006ab0:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <LIS2DW12_0_Probe+0xe0>)
 8006ab2:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8006ab4:	a908      	add	r1, sp, #32
 8006ab6:	482e      	ldr	r0, [pc, #184]	; (8006b70 <LIS2DW12_0_Probe+0xe4>)
 8006ab8:	f7fc fce6 	bl	8003488 <LIS2DW12_RegisterBusIO>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d13b      	bne.n	8006b38 <LIS2DW12_0_Probe+0xac>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8006ac0:	f10d 011f 	add.w	r1, sp, #31
 8006ac4:	482a      	ldr	r0, [pc, #168]	; (8006b70 <LIS2DW12_0_Probe+0xe4>)
 8006ac6:	f7fc fa97 	bl	8002ff8 <LIS2DW12_ReadID>
 8006aca:	4605      	mov	r5, r0
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d136      	bne.n	8006b3e <LIS2DW12_0_Probe+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2DW12_ID)
 8006ad0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006ad4:	2b44      	cmp	r3, #68	; 0x44
 8006ad6:	d135      	bne.n	8006b44 <LIS2DW12_0_Probe+0xb8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006ad8:	4e25      	ldr	r6, [pc, #148]	; (8006b70 <LIS2DW12_0_Probe+0xe4>)
 8006ada:	4669      	mov	r1, sp
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7fc f89b 	bl	8002c18 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006ae2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006ae6:	f89d 2000 	ldrb.w	r2, [sp]
 8006aea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006aee:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8006af2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8006af6:	491f      	ldr	r1, [pc, #124]	; (8006b74 <LIS2DW12_0_Probe+0xe8>)
 8006af8:	604b      	str	r3, [r1, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <LIS2DW12_0_Probe+0xec>)
 8006afc:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006afe:	4b1f      	ldr	r3, [pc, #124]	; (8006b7c <LIS2DW12_0_Probe+0xf0>)
 8006b00:	491f      	ldr	r1, [pc, #124]	; (8006b80 <LIS2DW12_0_Probe+0xf4>)
 8006b02:	6059      	str	r1, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006b04:	f014 0f02 	tst.w	r4, #2
 8006b08:	d001      	beq.n	8006b0e <LIS2DW12_0_Probe+0x82>
 8006b0a:	2a01      	cmp	r2, #1
 8006b0c:	d009      	beq.n	8006b22 <LIS2DW12_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b0e:	f014 0f01 	tst.w	r4, #1
 8006b12:	d11a      	bne.n	8006b4a <LIS2DW12_0_Probe+0xbe>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006b14:	b915      	cbnz	r5, 8006b1c <LIS2DW12_0_Probe+0x90>
 8006b16:	f014 0f04 	tst.w	r4, #4
 8006b1a:	d119      	bne.n	8006b50 <LIS2DW12_0_Probe+0xc4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	b010      	add	sp, #64	; 0x40
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b22:	4b18      	ldr	r3, [pc, #96]	; (8006b84 <LIS2DW12_0_Probe+0xf8>)
 8006b24:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <LIS2DW12_0_Probe+0xfc>)
 8006b26:	611a      	str	r2, [r3, #16]
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006b28:	680b      	ldr	r3, [r1, #0]
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	4798      	blx	r3
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d0ed      	beq.n	8006b0e <LIS2DW12_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b32:	f06f 0504 	mvn.w	r5, #4
 8006b36:	e7ed      	b.n	8006b14 <LIS2DW12_0_Probe+0x88>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b38:	f06f 0506 	mvn.w	r5, #6
 8006b3c:	e7ee      	b.n	8006b1c <LIS2DW12_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b3e:	f06f 0506 	mvn.w	r5, #6
 8006b42:	e7eb      	b.n	8006b1c <LIS2DW12_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b44:	f06f 0506 	mvn.w	r5, #6
 8006b48:	e7e8      	b.n	8006b1c <LIS2DW12_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b4a:	f06f 0504 	mvn.w	r5, #4
 8006b4e:	e7e5      	b.n	8006b1c <LIS2DW12_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b50:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8006b54:	e7e2      	b.n	8006b1c <LIS2DW12_0_Probe+0x90>
 8006b56:	bf00      	nop
 8006b58:	080023b1 	.word	0x080023b1
 8006b5c:	08002249 	.word	0x08002249
 8006b60:	080022bd 	.word	0x080022bd
 8006b64:	08002281 	.word	0x08002281
 8006b68:	080022f9 	.word	0x080022f9
 8006b6c:	080071f1 	.word	0x080071f1
 8006b70:	2000f758 	.word	0x2000f758
 8006b74:	2000f71c 	.word	0x2000f71c
 8006b78:	2000f710 	.word	0x2000f710
 8006b7c:	2000f728 	.word	0x2000f728
 8006b80:	20000064 	.word	0x20000064
 8006b84:	2000f734 	.word	0x2000f734
 8006b88:	20000040 	.word	0x20000040

08006b8c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	b090      	sub	sp, #64	; 0x40
 8006b90:	4604      	mov	r4, r0
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006b92:	2300      	movs	r3, #0
 8006b94:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006b96:	233d      	movs	r3, #61	; 0x3d
 8006b98:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006b9c:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <LIS2MDL_0_Probe+0xcc>)
 8006b9e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <LIS2MDL_0_Probe+0xd0>)
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006ba4:	4b2e      	ldr	r3, [pc, #184]	; (8006c60 <LIS2MDL_0_Probe+0xd4>)
 8006ba6:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006ba8:	4b2e      	ldr	r3, [pc, #184]	; (8006c64 <LIS2MDL_0_Probe+0xd8>)
 8006baa:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006bac:	4b2e      	ldr	r3, [pc, #184]	; (8006c68 <LIS2MDL_0_Probe+0xdc>)
 8006bae:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 8006bb0:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <LIS2MDL_0_Probe+0xe0>)
 8006bb2:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006bb4:	a908      	add	r1, sp, #32
 8006bb6:	482e      	ldr	r0, [pc, #184]	; (8006c70 <LIS2MDL_0_Probe+0xe4>)
 8006bb8:	f7fd fa5e 	bl	8004078 <LIS2MDL_RegisterBusIO>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d13b      	bne.n	8006c38 <LIS2MDL_0_Probe+0xac>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006bc0:	f10d 011f 	add.w	r1, sp, #31
 8006bc4:	482a      	ldr	r0, [pc, #168]	; (8006c70 <LIS2MDL_0_Probe+0xe4>)
 8006bc6:	f7fd f975 	bl	8003eb4 <LIS2MDL_ReadID>
 8006bca:	4605      	mov	r5, r0
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d136      	bne.n	8006c3e <LIS2MDL_0_Probe+0xb2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 8006bd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d135      	bne.n	8006c44 <LIS2MDL_0_Probe+0xb8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006bd8:	4e25      	ldr	r6, [pc, #148]	; (8006c70 <LIS2MDL_0_Probe+0xe4>)
 8006bda:	4669      	mov	r1, sp
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7fc fe7b 	bl	80038d8 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006be2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006be6:	f89d 2000 	ldrb.w	r2, [sp]
 8006bea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006bee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006bf2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8006bf6:	491f      	ldr	r1, [pc, #124]	; (8006c74 <LIS2MDL_0_Probe+0xe8>)
 8006bf8:	608b      	str	r3, [r1, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <LIS2MDL_0_Probe+0xec>)
 8006bfc:	609e      	str	r6, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006bfe:	4b1f      	ldr	r3, [pc, #124]	; (8006c7c <LIS2MDL_0_Probe+0xf0>)
 8006c00:	491f      	ldr	r1, [pc, #124]	; (8006c80 <LIS2MDL_0_Probe+0xf4>)
 8006c02:	6099      	str	r1, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006c04:	f014 0f04 	tst.w	r4, #4
 8006c08:	d001      	beq.n	8006c0e <LIS2MDL_0_Probe+0x82>
 8006c0a:	2a01      	cmp	r2, #1
 8006c0c:	d009      	beq.n	8006c22 <LIS2MDL_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006c0e:	f014 0f02 	tst.w	r4, #2
 8006c12:	d11a      	bne.n	8006c4a <LIS2MDL_0_Probe+0xbe>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006c14:	b915      	cbnz	r5, 8006c1c <LIS2MDL_0_Probe+0x90>
 8006c16:	f014 0f01 	tst.w	r4, #1
 8006c1a:	d119      	bne.n	8006c50 <LIS2MDL_0_Probe+0xc4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	b010      	add	sp, #64	; 0x40
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006c22:	4b18      	ldr	r3, [pc, #96]	; (8006c84 <LIS2MDL_0_Probe+0xf8>)
 8006c24:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <LIS2MDL_0_Probe+0xfc>)
 8006c26:	621a      	str	r2, [r3, #32]
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006c28:	680b      	ldr	r3, [r1, #0]
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	4798      	blx	r3
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d0ed      	beq.n	8006c0e <LIS2MDL_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c32:	f06f 0504 	mvn.w	r5, #4
 8006c36:	e7ed      	b.n	8006c14 <LIS2MDL_0_Probe+0x88>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c38:	f06f 0506 	mvn.w	r5, #6
 8006c3c:	e7ee      	b.n	8006c1c <LIS2MDL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c3e:	f06f 0506 	mvn.w	r5, #6
 8006c42:	e7eb      	b.n	8006c1c <LIS2MDL_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c44:	f06f 0506 	mvn.w	r5, #6
 8006c48:	e7e8      	b.n	8006c1c <LIS2MDL_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c4a:	f06f 0504 	mvn.w	r5, #4
 8006c4e:	e7e5      	b.n	8006c1c <LIS2MDL_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c50:	f06f 0504 	mvn.w	r5, #4
  return ret;
 8006c54:	e7e2      	b.n	8006c1c <LIS2MDL_0_Probe+0x90>
 8006c56:	bf00      	nop
 8006c58:	080023b1 	.word	0x080023b1
 8006c5c:	08002249 	.word	0x08002249
 8006c60:	080022bd 	.word	0x080022bd
 8006c64:	08002281 	.word	0x08002281
 8006c68:	080022f9 	.word	0x080022f9
 8006c6c:	080071f1 	.word	0x080071f1
 8006c70:	2000f794 	.word	0x2000f794
 8006c74:	2000f71c 	.word	0x2000f71c
 8006c78:	2000f710 	.word	0x2000f710
 8006c7c:	2000f728 	.word	0x2000f728
 8006c80:	20000074 	.word	0x20000074
 8006c84:	2000f734 	.word	0x2000f734
 8006c88:	20000084 	.word	0x20000084

08006c8c <IKS01A3_MOTION_SENSOR_Init>:
{
 8006c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c90:	b088      	sub	sp, #32
 8006c92:	4604      	mov	r4, r0
 8006c94:	460f      	mov	r7, r1
  switch (Instance)
 8006c96:	2801      	cmp	r0, #1
 8006c98:	d030      	beq.n	8006cfc <IKS01A3_MOTION_SENSOR_Init+0x70>
 8006c9a:	2802      	cmp	r0, #2
 8006c9c:	d055      	beq.n	8006d4a <IKS01A3_MOTION_SENSOR_Init+0xbe>
 8006c9e:	b110      	cbz	r0, 8006ca6 <IKS01A3_MOTION_SENSOR_Init+0x1a>
 8006ca0:	f06f 0001 	mvn.w	r0, #1
 8006ca4:	e095      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	f7ff fe5e 	bl	8006968 <LSM6DSO_0_Probe>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f040 8093 	bne.w	8006dd8 <IKS01A3_MOTION_SENSOR_Init+0x14c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006cb2:	4b52      	ldr	r3, [pc, #328]	; (8006dfc <IKS01A3_MOTION_SENSOR_Init+0x170>)
 8006cb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	a901      	add	r1, sp, #4
 8006cbc:	4a50      	ldr	r2, [pc, #320]	; (8006e00 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 8006cbe:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006cc2:	4798      	blx	r3
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f040 808a 	bne.w	8006dde <IKS01A3_MOTION_SENSOR_Init+0x152>
      if (cap.Acc == 1U)
 8006cca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d00b      	beq.n	8006cea <IKS01A3_MOTION_SENSOR_Init+0x5e>
  uint32_t component_functions = 0;
 8006cd2:	46a0      	mov	r8, r4
      if (cap.Gyro == 1U)
 8006cd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d009      	beq.n	8006cf0 <IKS01A3_MOTION_SENSOR_Init+0x64>
      if (cap.Magneto == 1U)
 8006cdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d008      	beq.n	8006cf6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
  uint32_t component_functions = 0;
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	2501      	movs	r5, #1
 8006ce8:	e057      	b.n	8006d9a <IKS01A3_MOTION_SENSOR_Init+0x10e>
        component_functions |= MOTION_ACCELERO;
 8006cea:	f04f 0802 	mov.w	r8, #2
 8006cee:	e7f1      	b.n	8006cd4 <IKS01A3_MOTION_SENSOR_Init+0x48>
        component_functions |= MOTION_GYRO;
 8006cf0:	f048 0801 	orr.w	r8, r8, #1
 8006cf4:	e7f2      	b.n	8006cdc <IKS01A3_MOTION_SENSOR_Init+0x50>
        component_functions |= MOTION_MAGNETO;
 8006cf6:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8006cfa:	e7f3      	b.n	8006ce4 <IKS01A3_MOTION_SENSOR_Init+0x58>
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	f7ff fec5 	bl	8006a8c <LIS2DW12_0_Probe>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d16e      	bne.n	8006de4 <IKS01A3_MOTION_SENSOR_Init+0x158>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006d06:	4b3d      	ldr	r3, [pc, #244]	; (8006dfc <IKS01A3_MOTION_SENSOR_Init+0x170>)
 8006d08:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	a901      	add	r1, sp, #4
 8006d10:	4a3b      	ldr	r2, [pc, #236]	; (8006e00 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 8006d12:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006d16:	4798      	blx	r3
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d166      	bne.n	8006dea <IKS01A3_MOTION_SENSOR_Init+0x15e>
      if (cap.Acc == 1U)
 8006d1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d00c      	beq.n	8006d3e <IKS01A3_MOTION_SENSOR_Init+0xb2>
  uint32_t component_functions = 0;
 8006d24:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8006d28:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d009      	beq.n	8006d44 <IKS01A3_MOTION_SENSOR_Init+0xb8>
      if (cap.Magneto == 1U)
 8006d30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d1d5      	bne.n	8006ce4 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 8006d38:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8006d3c:	e7d2      	b.n	8006ce4 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 8006d3e:	f04f 0802 	mov.w	r8, #2
 8006d42:	e7f1      	b.n	8006d28 <IKS01A3_MOTION_SENSOR_Init+0x9c>
        component_functions |= MOTION_GYRO;
 8006d44:	f048 0801 	orr.w	r8, r8, #1
 8006d48:	e7f2      	b.n	8006d30 <IKS01A3_MOTION_SENSOR_Init+0xa4>
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8006d4a:	4608      	mov	r0, r1
 8006d4c:	f7ff ff1e 	bl	8006b8c <LIS2MDL_0_Probe>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d14d      	bne.n	8006df0 <IKS01A3_MOTION_SENSOR_Init+0x164>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <IKS01A3_MOTION_SENSOR_Init+0x170>)
 8006d56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	a901      	add	r1, sp, #4
 8006d5e:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 8006d60:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006d64:	4798      	blx	r3
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d145      	bne.n	8006df6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      if (cap.Acc == 1U)
 8006d6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d00c      	beq.n	8006d8c <IKS01A3_MOTION_SENSOR_Init+0x100>
  uint32_t component_functions = 0;
 8006d72:	f04f 0800 	mov.w	r8, #0
      if (cap.Gyro == 1U)
 8006d76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d008      	beq.n	8006d90 <IKS01A3_MOTION_SENSOR_Init+0x104>
      if (cap.Magneto == 1U)
 8006d7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d1ae      	bne.n	8006ce4 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_MAGNETO;
 8006d86:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8006d8a:	e7ab      	b.n	8006ce4 <IKS01A3_MOTION_SENSOR_Init+0x58>
        component_functions |= MOTION_ACCELERO;
 8006d8c:	46a0      	mov	r8, r4
 8006d8e:	e7f2      	b.n	8006d76 <IKS01A3_MOTION_SENSOR_Init+0xea>
        component_functions |= MOTION_GYRO;
 8006d90:	f048 0801 	orr.w	r8, r8, #1
 8006d94:	e7f3      	b.n	8006d7e <IKS01A3_MOTION_SENSOR_Init+0xf2>
    function = function << 1;
 8006d96:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006d98:	3601      	adds	r6, #1
 8006d9a:	2e02      	cmp	r6, #2
 8006d9c:	d818      	bhi.n	8006dd0 <IKS01A3_MOTION_SENSOR_Init+0x144>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006d9e:	ea35 0307 	bics.w	r3, r5, r7
 8006da2:	d1f8      	bne.n	8006d96 <IKS01A3_MOTION_SENSOR_Init+0x10a>
 8006da4:	ea35 0308 	bics.w	r3, r5, r8
 8006da8:	d1f5      	bne.n	8006d96 <IKS01A3_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <IKS01A3_MOTION_SENSOR_Init+0x178>)
 8006dac:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006db0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006db4:	4413      	add	r3, r2
 8006db6:	4a14      	ldr	r2, [pc, #80]	; (8006e08 <IKS01A3_MOTION_SENSOR_Init+0x17c>)
 8006db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a10      	ldr	r2, [pc, #64]	; (8006e00 <IKS01A3_MOTION_SENSOR_Init+0x174>)
 8006dc0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8006dc4:	4798      	blx	r3
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0e5      	beq.n	8006d96 <IKS01A3_MOTION_SENSOR_Init+0x10a>
        return BSP_ERROR_COMPONENT_FAILURE;
 8006dca:	f06f 0004 	mvn.w	r0, #4
 8006dce:	e000      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
 8006dd0:	2000      	movs	r0, #0
}
 8006dd2:	b008      	add	sp, #32
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BSP_ERROR_NO_INIT;
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e7f9      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006dde:	f06f 0006 	mvn.w	r0, #6
 8006de2:	e7f6      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	e7f3      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006dea:	f06f 0006 	mvn.w	r0, #6
 8006dee:	e7f0      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_NO_INIT;
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	e7ed      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006df6:	f06f 0006 	mvn.w	r0, #6
 8006dfa:	e7ea      	b.n	8006dd2 <IKS01A3_MOTION_SENSOR_Init+0x146>
 8006dfc:	2000f728 	.word	0x2000f728
 8006e00:	2000f710 	.word	0x2000f710
 8006e04:	0800f3dc 	.word	0x0800f3dc
 8006e08:	2000f734 	.word	0x2000f734

08006e0c <IKS01A3_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006e0c:	2802      	cmp	r0, #2
 8006e0e:	d819      	bhi.n	8006e44 <IKS01A3_MOTION_SENSOR_Enable+0x38>
{
 8006e10:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006e12:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <IKS01A3_MOTION_SENSOR_Enable+0x44>)
 8006e14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006e18:	ea31 0303 	bics.w	r3, r1, r3
 8006e1c:	d115      	bne.n	8006e4a <IKS01A3_MOTION_SENSOR_Enable+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <IKS01A3_MOTION_SENSOR_Enable+0x48>)
 8006e20:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8006e24:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	4a0b      	ldr	r2, [pc, #44]	; (8006e58 <IKS01A3_MOTION_SENSOR_Enable+0x4c>)
 8006e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <IKS01A3_MOTION_SENSOR_Enable+0x50>)
 8006e34:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006e38:	4798      	blx	r3
 8006e3a:	b900      	cbnz	r0, 8006e3e <IKS01A3_MOTION_SENSOR_Enable+0x32>
}
 8006e3c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e3e:	f06f 0004 	mvn.w	r0, #4
 8006e42:	e7fb      	b.n	8006e3c <IKS01A3_MOTION_SENSOR_Enable+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8006e44:	f06f 0001 	mvn.w	r0, #1
}
 8006e48:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8006e4a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006e4e:	e7f5      	b.n	8006e3c <IKS01A3_MOTION_SENSOR_Enable+0x30>
 8006e50:	2000f71c 	.word	0x2000f71c
 8006e54:	0800f3dc 	.word	0x0800f3dc
 8006e58:	2000f734 	.word	0x2000f734
 8006e5c:	2000f710 	.word	0x2000f710

08006e60 <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006e60:	2802      	cmp	r0, #2
 8006e62:	d81b      	bhi.n	8006e9c <IKS01A3_MOTION_SENSOR_GetAxes+0x3c>
{
 8006e64:	b508      	push	{r3, lr}
 8006e66:	460b      	mov	r3, r1
 8006e68:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006e6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ea8 <IKS01A3_MOTION_SENSOR_GetAxes+0x48>)
 8006e6c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006e70:	ea33 0202 	bics.w	r2, r3, r2
 8006e74:	d115      	bne.n	8006ea2 <IKS01A3_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006e76:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 8006e78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e7c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006e80:	4413      	add	r3, r2
 8006e82:	4a0b      	ldr	r2, [pc, #44]	; (8006eb0 <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
 8006e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <IKS01A3_MOTION_SENSOR_GetAxes+0x54>)
 8006e8c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006e90:	4798      	blx	r3
 8006e92:	b900      	cbnz	r0, 8006e96 <IKS01A3_MOTION_SENSOR_GetAxes+0x36>
}
 8006e94:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e96:	f06f 0004 	mvn.w	r0, #4
 8006e9a:	e7fb      	b.n	8006e94 <IKS01A3_MOTION_SENSOR_GetAxes+0x34>
    ret = BSP_ERROR_WRONG_PARAM;
 8006e9c:	f06f 0001 	mvn.w	r0, #1
}
 8006ea0:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8006ea2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006ea6:	e7f5      	b.n	8006e94 <IKS01A3_MOTION_SENSOR_GetAxes+0x34>
 8006ea8:	2000f71c 	.word	0x2000f71c
 8006eac:	0800f3dc 	.word	0x0800f3dc
 8006eb0:	2000f734 	.word	0x2000f734
 8006eb4:	2000f710 	.word	0x2000f710

08006eb8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8006eb8:	b530      	push	{r4, r5, lr}
 8006eba:	b089      	sub	sp, #36	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	9401      	str	r4, [sp, #4]
 8006ec0:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <LED_USER_GPIO_Init+0x60>)
 8006ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8006eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ecc:	f002 0201 	and.w	r2, r2, #1
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	9a01      	ldr	r2, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed4:	9403      	str	r4, [sp, #12]
 8006ed6:	9404      	str	r4, [sp, #16]
 8006ed8:	9405      	str	r4, [sp, #20]
 8006eda:	9406      	str	r4, [sp, #24]
 8006edc:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ede:	9402      	str	r4, [sp, #8]
 8006ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	9302      	str	r3, [sp, #8]
 8006ef0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8006ef2:	4d0a      	ldr	r5, [pc, #40]	; (8006f1c <LED_USER_GPIO_Init+0x64>)
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	2120      	movs	r1, #32
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f000 fb9a 	bl	8007632 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8006efe:	2320      	movs	r3, #32
 8006f00:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f02:	2301      	movs	r3, #1
 8006f04:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f06:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f08:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8006f0a:	a903      	add	r1, sp, #12
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f000 fa21 	bl	8007354 <HAL_GPIO_Init>

}
 8006f12:	b009      	add	sp, #36	; 0x24
 8006f14:	bd30      	pop	{r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	40020000 	.word	0x40020000

08006f20 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8006f20:	b500      	push	{lr}
 8006f22:	b089      	sub	sp, #36	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f24:	2300      	movs	r3, #0
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <BUTTON_USER_GPIO_Init+0x54>)
 8006f2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006f2c:	f041 0104 	orr.w	r1, r1, #4
 8006f30:	6311      	str	r1, [r2, #48]	; 0x30
 8006f32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006f34:	f001 0104 	and.w	r1, r1, #4
 8006f38:	9101      	str	r1, [sp, #4]
 8006f3a:	9901      	ldr	r1, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	9304      	str	r3, [sp, #16]
 8006f40:	9305      	str	r3, [sp, #20]
 8006f42:	9306      	str	r3, [sp, #24]
 8006f44:	9307      	str	r3, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f46:	9302      	str	r3, [sp, #8]
 8006f48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f4a:	f043 0304 	orr.w	r3, r3, #4
 8006f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	9302      	str	r3, [sp, #8]
 8006f58:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8006f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f5e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006f60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006f64:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006f66:	a903      	add	r1, sp, #12
 8006f68:	4803      	ldr	r0, [pc, #12]	; (8006f78 <BUTTON_USER_GPIO_Init+0x58>)
 8006f6a:	f000 f9f3 	bl	8007354 <HAL_GPIO_Init>

}
 8006f6e:	b009      	add	sp, #36	; 0x24
 8006f70:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f74:	40023800 	.word	0x40023800
 8006f78:	40020800 	.word	0x40020800

08006f7c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f80:	2400      	movs	r4, #0
 8006f82:	9401      	str	r4, [sp, #4]
 8006f84:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <USART2_MspInit+0x64>)
 8006f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8006f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f90:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006f94:	9201      	str	r2, [sp, #4]
 8006f96:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f98:	9402      	str	r4, [sp, #8]
 8006f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	9302      	str	r3, [sp, #8]
 8006faa:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006fac:	2304      	movs	r3, #4
 8006fae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fb0:	2702      	movs	r7, #2
 8006fb2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006fb8:	2607      	movs	r6, #7
 8006fba:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006fbc:	4d09      	ldr	r5, [pc, #36]	; (8006fe4 <USART2_MspInit+0x68>)
 8006fbe:	a903      	add	r1, sp, #12
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f9c7 	bl	8007354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fca:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fcc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fce:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006fd0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006fd2:	a903      	add	r1, sp, #12
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 f9bd 	bl	8007354 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8006fda:	b009      	add	sp, #36	; 0x24
 8006fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	40020000 	.word	0x40020000

08006fe8 <BSP_LED_Init>:
{
 8006fe8:	b508      	push	{r3, lr}
  LedGpioInit[Led]();
 8006fea:	f7ff ff65 	bl	8006eb8 <LED_USER_GPIO_Init>
}
 8006fee:	2000      	movs	r0, #0
 8006ff0:	bd08      	pop	{r3, pc}
	...

08006ff4 <BSP_LED_On>:
{
 8006ff4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	2120      	movs	r1, #32
 8006ffa:	4802      	ldr	r0, [pc, #8]	; (8007004 <BSP_LED_On+0x10>)
 8006ffc:	f000 fb19 	bl	8007632 <HAL_GPIO_WritePin>
}
 8007000:	2000      	movs	r0, #0
 8007002:	bd08      	pop	{r3, pc}
 8007004:	40020000 	.word	0x40020000

08007008 <BSP_LED_Off>:
{
 8007008:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800700a:	2200      	movs	r2, #0
 800700c:	2120      	movs	r1, #32
 800700e:	4802      	ldr	r0, [pc, #8]	; (8007018 <BSP_LED_Off+0x10>)
 8007010:	f000 fb0f 	bl	8007632 <HAL_GPIO_WritePin>
}
 8007014:	2000      	movs	r0, #0
 8007016:	bd08      	pop	{r3, pc}
 8007018:	40020000 	.word	0x40020000

0800701c <BSP_LED_Toggle>:
{
 800701c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800701e:	2120      	movs	r1, #32
 8007020:	4802      	ldr	r0, [pc, #8]	; (800702c <BSP_LED_Toggle+0x10>)
 8007022:	f000 fb0c 	bl	800763e <HAL_GPIO_TogglePin>
}
 8007026:	2000      	movs	r0, #0
 8007028:	bd08      	pop	{r3, pc}
 800702a:	bf00      	nop
 800702c:	40020000 	.word	0x40020000

08007030 <BSP_PB_Init>:
{
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4605      	mov	r5, r0
 8007034:	460c      	mov	r4, r1
  ButtonGpioInit[Button]();
 8007036:	f7ff ff73 	bl	8006f20 <BUTTON_USER_GPIO_Init>
  if (ButtonMode == BUTTON_MODE_EXTI)
 800703a:	2c01      	cmp	r4, #1
 800703c:	d001      	beq.n	8007042 <BSP_PB_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 800703e:	2000      	movs	r0, #0
}
 8007040:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8007042:	480f      	ldr	r0, [pc, #60]	; (8007080 <BSP_PB_Init+0x50>)
 8007044:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8007048:	490e      	ldr	r1, [pc, #56]	; (8007084 <BSP_PB_Init+0x54>)
 800704a:	4628      	mov	r0, r5
 800704c:	f000 f969 	bl	8007322 <HAL_EXTI_GetHandle>
 8007050:	b978      	cbnz	r0, 8007072 <BSP_PB_Init+0x42>
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8007052:	4a0d      	ldr	r2, [pc, #52]	; (8007088 <BSP_PB_Init+0x58>)
 8007054:	2100      	movs	r1, #0
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f95c 	bl	8007314 <HAL_EXTI_RegisterCallback>
 800705c:	b960      	cbnz	r0, 8007078 <BSP_PB_Init+0x48>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800705e:	2200      	movs	r2, #0
 8007060:	210f      	movs	r1, #15
 8007062:	2028      	movs	r0, #40	; 0x28
 8007064:	f000 f8ea 	bl	800723c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8007068:	2028      	movs	r0, #40	; 0x28
 800706a:	f000 f91f 	bl	80072ac <HAL_NVIC_EnableIRQ>
  int32_t ret = BSP_ERROR_NONE;
 800706e:	2000      	movs	r0, #0
 8007070:	e7e6      	b.n	8007040 <BSP_PB_Init+0x10>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007072:	f06f 0003 	mvn.w	r0, #3
 8007076:	e7e3      	b.n	8007040 <BSP_PB_Init+0x10>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007078:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800707c:	e7e0      	b.n	8007040 <BSP_PB_Init+0x10>
 800707e:	bf00      	nop
 8007080:	20000160 	.word	0x20000160
 8007084:	0600000d 	.word	0x0600000d
 8007088:	080070a5 	.word	0x080070a5

0800708c <BSP_PB_GetState>:
{
 800708c:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800708e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007092:	4803      	ldr	r0, [pc, #12]	; (80070a0 <BSP_PB_GetState+0x14>)
 8007094:	f000 fac6 	bl	8007624 <HAL_GPIO_ReadPin>
}
 8007098:	fab0 f080 	clz	r0, r0
 800709c:	0940      	lsrs	r0, r0, #5
 800709e:	bd08      	pop	{r3, pc}
 80070a0:	40020800 	.word	0x40020800

080070a4 <BUTTON_USER_EXTI_Callback>:
{
 80070a4:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80070a6:	2000      	movs	r0, #0
 80070a8:	f7fa fa80 	bl	80015ac <BSP_PB_Callback>
}
 80070ac:	bd08      	pop	{r3, pc}
	...

080070b0 <MX_USART2_UART_Init>:
{
 80070b0:	b508      	push	{r3, lr}
  huart->Instance = USART2;
 80070b2:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <MX_USART2_UART_Init+0x28>)
 80070b4:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate = 115200;
 80070b6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070ba:	6042      	str	r2, [r0, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80070bc:	2200      	movs	r2, #0
 80070be:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80070c0:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80070c2:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80070c4:	210c      	movs	r1, #12
 80070c6:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070c8:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80070ca:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80070cc:	f002 f8e1 	bl	8009292 <HAL_UART_Init>
 80070d0:	b100      	cbz	r0, 80070d4 <MX_USART2_UART_Init+0x24>
    ret = HAL_ERROR;
 80070d2:	2001      	movs	r0, #1
}
 80070d4:	bd08      	pop	{r3, pc}
 80070d6:	bf00      	nop
 80070d8:	40004400 	.word	0x40004400

080070dc <BSP_COM_Init>:
  if(COM > COMn)
 80070dc:	2801      	cmp	r0, #1
 80070de:	d812      	bhi.n	8007106 <BSP_COM_Init+0x2a>
{
 80070e0:	b510      	push	{r4, lr}
     hcom_uart[COM].Instance = COM_USART[COM];
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <BSP_COM_Init+0x38>)
 80070e4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80070e8:	4c0b      	ldr	r4, [pc, #44]	; (8007118 <BSP_COM_Init+0x3c>)
 80070ea:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 80070ee:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    USART2_MspInit(&hcom_uart[COM]);
 80070f2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff ff40 	bl	8006f7c <USART2_MspInit>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7ff ffd7 	bl	80070b0 <MX_USART2_UART_Init>
 8007102:	b918      	cbnz	r0, 800710c <BSP_COM_Init+0x30>
}
 8007104:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007106:	f06f 0001 	mvn.w	r0, #1
}
 800710a:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800710c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007110:	e7f8      	b.n	8007104 <BSP_COM_Init+0x28>
 8007112:	bf00      	nop
 8007114:	2000015c 	.word	0x2000015c
 8007118:	2000f804 	.word	0x2000f804

0800711c <__io_putchar>:
{
 800711c:	b510      	push	{r4, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	9001      	str	r0, [sp, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <__io_putchar+0x28>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800712a:	0098      	lsls	r0, r3, #2
 800712c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007130:	2201      	movs	r2, #1
 8007132:	a901      	add	r1, sp, #4
 8007134:	4c04      	ldr	r4, [pc, #16]	; (8007148 <__io_putchar+0x2c>)
 8007136:	4420      	add	r0, r4
 8007138:	f002 f8da 	bl	80092f0 <HAL_UART_Transmit>
}
 800713c:	9801      	ldr	r0, [sp, #4]
 800713e:	b002      	add	sp, #8
 8007140:	bd10      	pop	{r4, pc}
 8007142:	bf00      	nop
 8007144:	2000f800 	.word	0x2000f800
 8007148:	2000f804 	.word	0x2000f804

0800714c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800714c:	b510      	push	{r4, lr}
 800714e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <HAL_InitTick+0x40>)
 8007152:	7818      	ldrb	r0, [r3, #0]
 8007154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007158:	fbb3 f3f0 	udiv	r3, r3, r0
 800715c:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <HAL_InitTick+0x44>)
 800715e:	6810      	ldr	r0, [r2, #0]
 8007160:	fbb0 f0f3 	udiv	r0, r0, r3
 8007164:	f000 f8c2 	bl	80072ec <HAL_SYSTICK_Config>
 8007168:	b968      	cbnz	r0, 8007186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800716a:	2c0f      	cmp	r4, #15
 800716c:	d901      	bls.n	8007172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800716e:	2001      	movs	r0, #1
 8007170:	e00a      	b.n	8007188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007172:	2200      	movs	r2, #0
 8007174:	4621      	mov	r1, r4
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	f000 f85f 	bl	800723c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_InitTick+0x48>)
 8007180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007182:	2000      	movs	r0, #0
 8007184:	e000      	b.n	8007188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8007186:	2001      	movs	r0, #1
}
 8007188:	bd10      	pop	{r4, pc}
 800718a:	bf00      	nop
 800718c:	20000168 	.word	0x20000168
 8007190:	20000004 	.word	0x20000004
 8007194:	2000016c 	.word	0x2000016c

08007198 <HAL_Init>:
{
 8007198:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <HAL_Init+0x30>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071b4:	2003      	movs	r0, #3
 80071b6:	f000 f82f 	bl	8007218 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80071ba:	2000      	movs	r0, #0
 80071bc:	f7ff ffc6 	bl	800714c <HAL_InitTick>
  HAL_MspInit();
 80071c0:	f7fa fed8 	bl	8001f74 <HAL_MspInit>
}
 80071c4:	2000      	movs	r0, #0
 80071c6:	bd08      	pop	{r3, pc}
 80071c8:	40023c00 	.word	0x40023c00

080071cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80071cc:	4a03      	ldr	r2, [pc, #12]	; (80071dc <HAL_IncTick+0x10>)
 80071ce:	6811      	ldr	r1, [r2, #0]
 80071d0:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <HAL_IncTick+0x14>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	440b      	add	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]
}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	2000f848 	.word	0x2000f848
 80071e0:	20000168 	.word	0x20000168

080071e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80071e4:	4b01      	ldr	r3, [pc, #4]	; (80071ec <HAL_GetTick+0x8>)
 80071e6:	6818      	ldr	r0, [r3, #0]
}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	2000f848 	.word	0x2000f848

080071f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80071f4:	f7ff fff6 	bl	80071e4 <HAL_GetTick>
 80071f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80071fe:	d002      	beq.n	8007206 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007200:	4b04      	ldr	r3, [pc, #16]	; (8007214 <HAL_Delay+0x24>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007206:	f7ff ffed 	bl	80071e4 <HAL_GetTick>
 800720a:	1b40      	subs	r0, r0, r5
 800720c:	42a0      	cmp	r0, r4
 800720e:	d3fa      	bcc.n	8007206 <HAL_Delay+0x16>
  {
  }
}
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	20000168 	.word	0x20000168

08007218 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007218:	4a07      	ldr	r2, [pc, #28]	; (8007238 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800721a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800721c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007224:	0200      	lsls	r0, r0, #8
 8007226:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800722a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800722c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007234:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007236:	4770      	bx	lr
 8007238:	e000ed00 	.word	0xe000ed00

0800723c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800723c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800723e:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <HAL_NVIC_SetPriority+0x68>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007246:	f1c3 0c07 	rsb	ip, r3, #7
 800724a:	f1bc 0f04 	cmp.w	ip, #4
 800724e:	bf28      	it	cs
 8007250:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007254:	f103 0e04 	add.w	lr, r3, #4
 8007258:	f1be 0f06 	cmp.w	lr, #6
 800725c:	d918      	bls.n	8007290 <HAL_NVIC_SetPriority+0x54>
 800725e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007260:	f04f 3eff 	mov.w	lr, #4294967295
 8007264:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007268:	ea21 010c 	bic.w	r1, r1, ip
 800726c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800726e:	fa0e f303 	lsl.w	r3, lr, r3
 8007272:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007276:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007278:	2800      	cmp	r0, #0
 800727a:	db0b      	blt.n	8007294 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800727c:	0109      	lsls	r1, r1, #4
 800727e:	b2c9      	uxtb	r1, r1
 8007280:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007284:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007288:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800728c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007290:	2300      	movs	r3, #0
 8007292:	e7e5      	b.n	8007260 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007294:	f000 000f 	and.w	r0, r0, #15
 8007298:	0109      	lsls	r1, r1, #4
 800729a:	b2c9      	uxtb	r1, r1
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <HAL_NVIC_SetPriority+0x6c>)
 800729e:	5419      	strb	r1, [r3, r0]
 80072a0:	e7f4      	b.n	800728c <HAL_NVIC_SetPriority+0x50>
 80072a2:	bf00      	nop
 80072a4:	e000ed00 	.word	0xe000ed00
 80072a8:	e000ed14 	.word	0xe000ed14

080072ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80072ac:	2800      	cmp	r0, #0
 80072ae:	db07      	blt.n	80072c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072b0:	f000 021f 	and.w	r2, r0, #31
 80072b4:	0940      	lsrs	r0, r0, #5
 80072b6:	2301      	movs	r3, #1
 80072b8:	4093      	lsls	r3, r2
 80072ba:	4a02      	ldr	r2, [pc, #8]	; (80072c4 <HAL_NVIC_EnableIRQ+0x18>)
 80072bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	e000e100 	.word	0xe000e100

080072c8 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80072c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072cc:	4905      	ldr	r1, [pc, #20]	; (80072e4 <HAL_NVIC_SystemReset+0x1c>)
 80072ce:	68ca      	ldr	r2, [r1, #12]
 80072d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072d4:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <HAL_NVIC_SystemReset+0x20>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60cb      	str	r3, [r1, #12]
 80072da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80072de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80072e0:	e7fd      	b.n	80072de <HAL_NVIC_SystemReset+0x16>
 80072e2:	bf00      	nop
 80072e4:	e000ed00 	.word	0xe000ed00
 80072e8:	05fa0004 	.word	0x05fa0004

080072ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072ec:	3801      	subs	r0, #1
 80072ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80072f2:	d20b      	bcs.n	800730c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072f8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072fa:	4a05      	ldr	r2, [pc, #20]	; (8007310 <HAL_SYSTICK_Config+0x24>)
 80072fc:	21f0      	movs	r1, #240	; 0xf0
 80072fe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007302:	2000      	movs	r0, #0
 8007304:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007306:	2207      	movs	r2, #7
 8007308:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800730a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800730c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800730e:	4770      	bx	lr
 8007310:	e000ed00 	.word	0xe000ed00

08007314 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007314:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8007316:	4608      	mov	r0, r1
 8007318:	b909      	cbnz	r1, 800731e <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800731a:	605a      	str	r2, [r3, #4]
      break;
 800731c:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800731e:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8007320:	4770      	bx	lr

08007322 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007322:	b110      	cbz	r0, 800732a <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007324:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8007326:	2000      	movs	r0, #0
 8007328:	4770      	bx	lr
    return HAL_ERROR;
 800732a:	2001      	movs	r0, #1
  }
}
 800732c:	4770      	bx	lr
	...

08007330 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007330:	b508      	push	{r3, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007332:	6803      	ldr	r3, [r0, #0]
 8007334:	f003 021f 	and.w	r2, r3, #31
 8007338:	2301      	movs	r3, #1
 800733a:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800733c:	4a04      	ldr	r2, [pc, #16]	; (8007350 <HAL_EXTI_IRQHandler+0x20>)
 800733e:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 8007340:	421a      	tst	r2, r3
 8007342:	d004      	beq.n	800734e <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007344:	4a02      	ldr	r2, [pc, #8]	; (8007350 <HAL_EXTI_IRQHandler+0x20>)
 8007346:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007348:	6843      	ldr	r3, [r0, #4]
 800734a:	b103      	cbz	r3, 800734e <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 800734c:	4798      	blx	r3
    }
  }
}
 800734e:	bd08      	pop	{r3, pc}
 8007350:	40013c00 	.word	0x40013c00

08007354 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007354:	2300      	movs	r3, #0
 8007356:	2b0f      	cmp	r3, #15
 8007358:	f200 80d2 	bhi.w	8007500 <HAL_GPIO_Init+0x1ac>
{
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	e060      	b.n	8007424 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007362:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007364:	005e      	lsls	r6, r3, #1
 8007366:	2403      	movs	r4, #3
 8007368:	40b4      	lsls	r4, r6
 800736a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800736e:	68cc      	ldr	r4, [r1, #12]
 8007370:	40b4      	lsls	r4, r6
 8007372:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8007374:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007376:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007378:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800737c:	684c      	ldr	r4, [r1, #4]
 800737e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8007382:	409a      	lsls	r2, r3
 8007384:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8007386:	6042      	str	r2, [r0, #4]
 8007388:	e05a      	b.n	8007440 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800738a:	08dc      	lsrs	r4, r3, #3
 800738c:	3408      	adds	r4, #8
 800738e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007392:	f003 0207 	and.w	r2, r3, #7
 8007396:	0095      	lsls	r5, r2, #2
 8007398:	220f      	movs	r2, #15
 800739a:	40aa      	lsls	r2, r5
 800739c:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073a0:	690a      	ldr	r2, [r1, #16]
 80073a2:	40aa      	lsls	r2, r5
 80073a4:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80073a8:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80073ac:	e05c      	b.n	8007468 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80073ae:	2204      	movs	r2, #4
 80073b0:	e000      	b.n	80073b4 <HAL_GPIO_Init+0x60>
 80073b2:	2200      	movs	r2, #0
 80073b4:	fa02 f20e 	lsl.w	r2, r2, lr
 80073b8:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073ba:	3402      	adds	r4, #2
 80073bc:	4d51      	ldr	r5, [pc, #324]	; (8007504 <HAL_GPIO_Init+0x1b0>)
 80073be:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073c2:	4a51      	ldr	r2, [pc, #324]	; (8007508 <HAL_GPIO_Init+0x1b4>)
 80073c4:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80073c6:	ea6f 020c 	mvn.w	r2, ip
 80073ca:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073ce:	684e      	ldr	r6, [r1, #4]
 80073d0:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80073d4:	d001      	beq.n	80073da <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80073d6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80073da:	4c4b      	ldr	r4, [pc, #300]	; (8007508 <HAL_GPIO_Init+0x1b4>)
 80073dc:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80073de:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80073e0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073e4:	684e      	ldr	r6, [r1, #4]
 80073e6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80073ea:	d001      	beq.n	80073f0 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80073ec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80073f0:	4c45      	ldr	r4, [pc, #276]	; (8007508 <HAL_GPIO_Init+0x1b4>)
 80073f2:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80073f4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80073f6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073fa:	684e      	ldr	r6, [r1, #4]
 80073fc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8007400:	d001      	beq.n	8007406 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8007402:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8007406:	4c40      	ldr	r4, [pc, #256]	; (8007508 <HAL_GPIO_Init+0x1b4>)
 8007408:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800740a:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800740c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800740e:	684d      	ldr	r5, [r1, #4]
 8007410:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8007414:	d001      	beq.n	800741a <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8007416:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800741a:	4c3b      	ldr	r4, [pc, #236]	; (8007508 <HAL_GPIO_Init+0x1b4>)
 800741c:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800741e:	3301      	adds	r3, #1
 8007420:	2b0f      	cmp	r3, #15
 8007422:	d86b      	bhi.n	80074fc <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8007424:	2201      	movs	r2, #1
 8007426:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007428:	680c      	ldr	r4, [r1, #0]
 800742a:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800742e:	ea32 0404 	bics.w	r4, r2, r4
 8007432:	d1f4      	bne.n	800741e <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007434:	684c      	ldr	r4, [r1, #4]
 8007436:	f004 0403 	and.w	r4, r4, #3
 800743a:	3c01      	subs	r4, #1
 800743c:	2c01      	cmp	r4, #1
 800743e:	d990      	bls.n	8007362 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007440:	684a      	ldr	r2, [r1, #4]
 8007442:	f002 0203 	and.w	r2, r2, #3
 8007446:	2a03      	cmp	r2, #3
 8007448:	d009      	beq.n	800745e <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 800744a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800744c:	005d      	lsls	r5, r3, #1
 800744e:	2203      	movs	r2, #3
 8007450:	40aa      	lsls	r2, r5
 8007452:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007456:	688a      	ldr	r2, [r1, #8]
 8007458:	40aa      	lsls	r2, r5
 800745a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800745c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800745e:	684a      	ldr	r2, [r1, #4]
 8007460:	f002 0203 	and.w	r2, r2, #3
 8007464:	2a02      	cmp	r2, #2
 8007466:	d090      	beq.n	800738a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8007468:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800746a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800746e:	2203      	movs	r2, #3
 8007470:	fa02 f20e 	lsl.w	r2, r2, lr
 8007474:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007478:	684a      	ldr	r2, [r1, #4]
 800747a:	f002 0203 	and.w	r2, r2, #3
 800747e:	fa02 f20e 	lsl.w	r2, r2, lr
 8007482:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8007484:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007486:	684a      	ldr	r2, [r1, #4]
 8007488:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800748c:	d0c7      	beq.n	800741e <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800748e:	2200      	movs	r2, #0
 8007490:	9201      	str	r2, [sp, #4]
 8007492:	4a1e      	ldr	r2, [pc, #120]	; (800750c <HAL_GPIO_Init+0x1b8>)
 8007494:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8007496:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800749a:	6454      	str	r4, [r2, #68]	; 0x44
 800749c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800749e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80074a6:	089c      	lsrs	r4, r3, #2
 80074a8:	1ca5      	adds	r5, r4, #2
 80074aa:	4a16      	ldr	r2, [pc, #88]	; (8007504 <HAL_GPIO_Init+0x1b0>)
 80074ac:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80074b0:	f003 0203 	and.w	r2, r3, #3
 80074b4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80074b8:	220f      	movs	r2, #15
 80074ba:	fa02 f20e 	lsl.w	r2, r2, lr
 80074be:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80074c2:	4a13      	ldr	r2, [pc, #76]	; (8007510 <HAL_GPIO_Init+0x1bc>)
 80074c4:	4290      	cmp	r0, r2
 80074c6:	f43f af74 	beq.w	80073b2 <HAL_GPIO_Init+0x5e>
 80074ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074ce:	4290      	cmp	r0, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_GPIO_Init+0x19c>
 80074d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074d6:	4290      	cmp	r0, r2
 80074d8:	d00c      	beq.n	80074f4 <HAL_GPIO_Init+0x1a0>
 80074da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074de:	4290      	cmp	r0, r2
 80074e0:	d00a      	beq.n	80074f8 <HAL_GPIO_Init+0x1a4>
 80074e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074e6:	4290      	cmp	r0, r2
 80074e8:	f43f af61 	beq.w	80073ae <HAL_GPIO_Init+0x5a>
 80074ec:	2207      	movs	r2, #7
 80074ee:	e761      	b.n	80073b4 <HAL_GPIO_Init+0x60>
 80074f0:	2201      	movs	r2, #1
 80074f2:	e75f      	b.n	80073b4 <HAL_GPIO_Init+0x60>
 80074f4:	2202      	movs	r2, #2
 80074f6:	e75d      	b.n	80073b4 <HAL_GPIO_Init+0x60>
 80074f8:	2203      	movs	r2, #3
 80074fa:	e75b      	b.n	80073b4 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 80074fc:	b002      	add	sp, #8
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40013800 	.word	0x40013800
 8007508:	40013c00 	.word	0x40013c00
 800750c:	40023800 	.word	0x40023800
 8007510:	40020000 	.word	0x40020000

08007514 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007514:	2300      	movs	r3, #0
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d87c      	bhi.n	8007614 <HAL_GPIO_DeInit+0x100>
{
 800751a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751c:	e02d      	b.n	800757a <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800751e:	2504      	movs	r5, #4
 8007520:	e000      	b.n	8007524 <HAL_GPIO_DeInit+0x10>
 8007522:	2500      	movs	r5, #0
 8007524:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007528:	45a4      	cmp	ip, r4
 800752a:	d057      	beq.n	80075dc <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800752c:	6804      	ldr	r4, [r0, #0]
 800752e:	005d      	lsls	r5, r3, #1
 8007530:	f04f 0c03 	mov.w	ip, #3
 8007534:	fa0c fc05 	lsl.w	ip, ip, r5
 8007538:	ea24 040c 	bic.w	r4, r4, ip
 800753c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800753e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8007542:	f10e 0e08 	add.w	lr, lr, #8
 8007546:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800754a:	f003 0507 	and.w	r5, r3, #7
 800754e:	00ae      	lsls	r6, r5, #2
 8007550:	250f      	movs	r5, #15
 8007552:	40b5      	lsls	r5, r6
 8007554:	ea24 0405 	bic.w	r4, r4, r5
 8007558:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800755c:	68c4      	ldr	r4, [r0, #12]
 800755e:	ea24 040c 	bic.w	r4, r4, ip
 8007562:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007564:	6844      	ldr	r4, [r0, #4]
 8007566:	ea24 0202 	bic.w	r2, r4, r2
 800756a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800756c:	6882      	ldr	r2, [r0, #8]
 800756e:	ea22 020c 	bic.w	r2, r2, ip
 8007572:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007574:	3301      	adds	r3, #1
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d84b      	bhi.n	8007612 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 800757a:	2201      	movs	r2, #1
 800757c:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 800757e:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8007582:	ea32 0401 	bics.w	r4, r2, r1
 8007586:	d1f5      	bne.n	8007574 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007588:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800758c:	f10e 0502 	add.w	r5, lr, #2
 8007590:	4c21      	ldr	r4, [pc, #132]	; (8007618 <HAL_GPIO_DeInit+0x104>)
 8007592:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007596:	f003 0c03 	and.w	ip, r3, #3
 800759a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800759e:	250f      	movs	r5, #15
 80075a0:	fa05 f70c 	lsl.w	r7, r5, ip
 80075a4:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80075a6:	4d1d      	ldr	r5, [pc, #116]	; (800761c <HAL_GPIO_DeInit+0x108>)
 80075a8:	42a8      	cmp	r0, r5
 80075aa:	d0ba      	beq.n	8007522 <HAL_GPIO_DeInit+0xe>
 80075ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80075b0:	42a8      	cmp	r0, r5
 80075b2:	d00d      	beq.n	80075d0 <HAL_GPIO_DeInit+0xbc>
 80075b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80075b8:	42a8      	cmp	r0, r5
 80075ba:	d00b      	beq.n	80075d4 <HAL_GPIO_DeInit+0xc0>
 80075bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80075c0:	42a8      	cmp	r0, r5
 80075c2:	d009      	beq.n	80075d8 <HAL_GPIO_DeInit+0xc4>
 80075c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80075c8:	42a8      	cmp	r0, r5
 80075ca:	d0a8      	beq.n	800751e <HAL_GPIO_DeInit+0xa>
 80075cc:	2507      	movs	r5, #7
 80075ce:	e7a9      	b.n	8007524 <HAL_GPIO_DeInit+0x10>
 80075d0:	2501      	movs	r5, #1
 80075d2:	e7a7      	b.n	8007524 <HAL_GPIO_DeInit+0x10>
 80075d4:	2502      	movs	r5, #2
 80075d6:	e7a5      	b.n	8007524 <HAL_GPIO_DeInit+0x10>
 80075d8:	2503      	movs	r5, #3
 80075da:	e7a3      	b.n	8007524 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80075dc:	4c10      	ldr	r4, [pc, #64]	; (8007620 <HAL_GPIO_DeInit+0x10c>)
 80075de:	6825      	ldr	r5, [r4, #0]
 80075e0:	ea25 0506 	bic.w	r5, r5, r6
 80075e4:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80075e6:	6865      	ldr	r5, [r4, #4]
 80075e8:	ea25 0506 	bic.w	r5, r5, r6
 80075ec:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80075ee:	68e5      	ldr	r5, [r4, #12]
 80075f0:	ea25 0506 	bic.w	r5, r5, r6
 80075f4:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80075f6:	68a5      	ldr	r5, [r4, #8]
 80075f8:	ea25 0606 	bic.w	r6, r5, r6
 80075fc:	60a6      	str	r6, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80075fe:	4e06      	ldr	r6, [pc, #24]	; (8007618 <HAL_GPIO_DeInit+0x104>)
 8007600:	f10e 0402 	add.w	r4, lr, #2
 8007604:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8007608:	ea25 0507 	bic.w	r5, r5, r7
 800760c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8007610:	e78c      	b.n	800752c <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8007612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40013800 	.word	0x40013800
 800761c:	40020000 	.word	0x40020000
 8007620:	40013c00 	.word	0x40013c00

08007624 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007624:	6903      	ldr	r3, [r0, #16]
 8007626:	4219      	tst	r1, r3
 8007628:	d001      	beq.n	800762e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800762a:	2001      	movs	r0, #1
 800762c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800762e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8007630:	4770      	bx	lr

08007632 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007632:	b10a      	cbz	r2, 8007638 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007634:	6181      	str	r1, [r0, #24]
 8007636:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007638:	0409      	lsls	r1, r1, #16
 800763a:	6181      	str	r1, [r0, #24]
  }
}
 800763c:	4770      	bx	lr

0800763e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800763e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007640:	ea01 0203 	and.w	r2, r1, r3
 8007644:	ea21 0103 	bic.w	r1, r1, r3
 8007648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800764c:	6181      	str	r1, [r0, #24]
}
 800764e:	4770      	bx	lr

08007650 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007650:	6803      	ldr	r3, [r0, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007658:	d101      	bne.n	800765e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800765a:	2000      	movs	r0, #0
}
 800765c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800765e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007662:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8007664:	2300      	movs	r3, #0
 8007666:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007668:	2220      	movs	r2, #32
 800766a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800766e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007672:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007674:	f042 0204 	orr.w	r2, r2, #4
 8007678:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800767a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800767e:	2001      	movs	r0, #1
 8007680:	4770      	bx	lr

08007682 <I2C_WaitOnFlagUntilTimeout>:
{
 8007682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007686:	4607      	mov	r7, r0
 8007688:	460d      	mov	r5, r1
 800768a:	4690      	mov	r8, r2
 800768c:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800768e:	e024      	b.n	80076da <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007690:	f7ff fda8 	bl	80071e4 <HAL_GetTick>
 8007694:	9b06      	ldr	r3, [sp, #24]
 8007696:	1ac0      	subs	r0, r0, r3
 8007698:	42b0      	cmp	r0, r6
 800769a:	d800      	bhi.n	800769e <I2C_WaitOnFlagUntilTimeout+0x1c>
 800769c:	b9ee      	cbnz	r6, 80076da <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800769e:	2300      	movs	r3, #0
 80076a0:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80076a2:	2220      	movs	r2, #32
 80076a4:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80076a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80076ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ae:	f042 0220 	orr.w	r2, r2, #32
 80076b2:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80076b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 80076b8:	2001      	movs	r0, #1
 80076ba:	e01e      	b.n	80076fa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	699c      	ldr	r4, [r3, #24]
 80076c0:	ea25 0c04 	bic.w	ip, r5, r4
 80076c4:	fa1f fc8c 	uxth.w	ip, ip
 80076c8:	fabc fc8c 	clz	ip, ip
 80076cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80076d0:	45e0      	cmp	r8, ip
 80076d2:	d111      	bne.n	80076f8 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80076d4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80076d8:	d1da      	bne.n	8007690 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076da:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d1ec      	bne.n	80076bc <I2C_WaitOnFlagUntilTimeout+0x3a>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	ea25 0c03 	bic.w	ip, r5, r3
 80076ea:	fa1f fc8c 	uxth.w	ip, ip
 80076ee:	fabc fc8c 	clz	ip, ip
 80076f2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80076f6:	e7eb      	b.n	80076d0 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 80076f8:	2000      	movs	r0, #0
}
 80076fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80076fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	4605      	mov	r5, r0
 8007704:	460e      	mov	r6, r1
 8007706:	4617      	mov	r7, r2
 8007708:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800770a:	e03d      	b.n	8007788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007712:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800771a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800771c:	2300      	movs	r3, #0
 800771e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007720:	2220      	movs	r2, #32
 8007722:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007726:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800772a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800772c:	f042 0204 	orr.w	r2, r2, #4
 8007730:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007732:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007736:	2001      	movs	r0, #1
 8007738:	e034      	b.n	80077a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773a:	f7ff fd53 	bl	80071e4 <HAL_GetTick>
 800773e:	eba0 0008 	sub.w	r0, r0, r8
 8007742:	42b8      	cmp	r0, r7
 8007744:	d800      	bhi.n	8007748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8007746:	b9ff      	cbnz	r7, 8007788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007748:	2300      	movs	r3, #0
 800774a:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800774c:	2220      	movs	r2, #32
 800774e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007752:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007756:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007758:	f042 0220 	orr.w	r2, r2, #32
 800775c:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800775e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8007762:	2001      	movs	r0, #1
 8007764:	e01e      	b.n	80077a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	699c      	ldr	r4, [r3, #24]
 800776a:	ea26 0404 	bic.w	r4, r6, r4
 800776e:	b2a4      	uxth	r4, r4
 8007770:	3c00      	subs	r4, #0
 8007772:	bf18      	it	ne
 8007774:	2401      	movne	r4, #1
 8007776:	b1a4      	cbz	r4, 80077a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	695a      	ldr	r2, [r3, #20]
 800777c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007780:	d1c4      	bne.n	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8007782:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007786:	d1d8      	bne.n	800773a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007788:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800778c:	2b01      	cmp	r3, #1
 800778e:	d1ea      	bne.n	8007766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	695c      	ldr	r4, [r3, #20]
 8007794:	ea26 0404 	bic.w	r4, r6, r4
 8007798:	b2a4      	uxth	r4, r4
 800779a:	3c00      	subs	r4, #0
 800779c:	bf18      	it	ne
 800779e:	2401      	movne	r4, #1
 80077a0:	e7e9      	b.n	8007776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 80077a2:	2000      	movs	r0, #0
}
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077a8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4604      	mov	r4, r0
 80077ac:	460d      	mov	r5, r1
 80077ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077b8:	d11c      	bne.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff ff48 	bl	8007650 <I2C_IsAcknowledgeFailed>
 80077c0:	b9d0      	cbnz	r0, 80077f8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80077c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80077c6:	d0f3      	beq.n	80077b0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c8:	f7ff fd0c 	bl	80071e4 <HAL_GetTick>
 80077cc:	1b80      	subs	r0, r0, r6
 80077ce:	42a8      	cmp	r0, r5
 80077d0:	d801      	bhi.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	d1ec      	bne.n	80077b0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077da:	2220      	movs	r2, #32
 80077dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80077e6:	f042 0220 	orr.w	r2, r2, #32
 80077ea:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80077ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80077f0:	2001      	movs	r0, #1
 80077f2:	e000      	b.n	80077f6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80077f4:	2000      	movs	r0, #0
}
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80077f8:	2001      	movs	r0, #1
 80077fa:	e7fc      	b.n	80077f6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080077fc <I2C_RequestMemoryWrite>:
{
 80077fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007800:	b085      	sub	sp, #20
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	4691      	mov	r9, r2
 8007808:	461f      	mov	r7, r3
 800780a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800780e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007810:	6803      	ldr	r3, [r0, #0]
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007818:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800781a:	9600      	str	r6, [sp, #0]
 800781c:	4643      	mov	r3, r8
 800781e:	2200      	movs	r2, #0
 8007820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007824:	f7ff ff2d 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 8007828:	b960      	cbnz	r0, 8007844 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8007830:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007832:	4633      	mov	r3, r6
 8007834:	4642      	mov	r2, r8
 8007836:	4926      	ldr	r1, [pc, #152]	; (80078d0 <I2C_RequestMemoryWrite+0xd4>)
 8007838:	4620      	mov	r0, r4
 800783a:	f7ff ff60 	bl	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800783e:	b168      	cbz	r0, 800785c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8007840:	2001      	movs	r0, #1
 8007842:	e008      	b.n	8007856 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f413 7f80 	tst.w	r3, #256	; 0x100
 800784c:	d002      	beq.n	8007854 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800784e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007852:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007854:	2003      	movs	r0, #3
}
 8007856:	b005      	add	sp, #20
 8007858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800785c:	2300      	movs	r3, #0
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	695a      	ldr	r2, [r3, #20]
 8007864:	9203      	str	r2, [sp, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800786c:	4632      	mov	r2, r6
 800786e:	4641      	mov	r1, r8
 8007870:	4620      	mov	r0, r4
 8007872:	f7ff ff99 	bl	80077a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007876:	b930      	cbnz	r0, 8007886 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007878:	2f01      	cmp	r7, #1
 800787a:	d10f      	bne.n	800789c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	fa5f f689 	uxtb.w	r6, r9
 8007882:	611e      	str	r6, [r3, #16]
 8007884:	e7e7      	b.n	8007856 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007888:	2b04      	cmp	r3, #4
 800788a:	d001      	beq.n	8007890 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 800788c:	2001      	movs	r0, #1
 800788e:	e7e2      	b.n	8007856 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	6813      	ldr	r3, [r2, #0]
 8007894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e7f7      	b.n	800788c <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80078a2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a4:	4632      	mov	r2, r6
 80078a6:	4641      	mov	r1, r8
 80078a8:	4620      	mov	r0, r4
 80078aa:	f7ff ff7d 	bl	80077a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80078ae:	b920      	cbnz	r0, 80078ba <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	fa5f f689 	uxtb.w	r6, r9
 80078b6:	611e      	str	r6, [r3, #16]
 80078b8:	e7cd      	b.n	8007856 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d001      	beq.n	80078c4 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80078c0:	2001      	movs	r0, #1
 80078c2:	e7c8      	b.n	8007856 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c4:	6822      	ldr	r2, [r4, #0]
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e7f7      	b.n	80078c0 <I2C_RequestMemoryWrite+0xc4>
 80078d0:	00010002 	.word	0x00010002

080078d4 <I2C_RequestMemoryRead>:
{
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	4616      	mov	r6, r2
 80078e0:	4699      	mov	r9, r3
 80078e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80078e4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e8:	6802      	ldr	r2, [r0, #0]
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078f0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f2:	6803      	ldr	r3, [r0, #0]
 80078f4:	6819      	ldr	r1, [r3, #0]
 80078f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80078fa:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078fc:	f8cd 8000 	str.w	r8, [sp]
 8007900:	463b      	mov	r3, r7
 8007902:	2200      	movs	r2, #0
 8007904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007908:	f7ff febb 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 800790c:	b970      	cbnz	r0, 800792c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800790e:	fa5f fa85 	uxtb.w	sl, r5
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8007918:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800791a:	4643      	mov	r3, r8
 800791c:	463a      	mov	r2, r7
 800791e:	4941      	ldr	r1, [pc, #260]	; (8007a24 <I2C_RequestMemoryRead+0x150>)
 8007920:	4620      	mov	r0, r4
 8007922:	f7ff feec 	bl	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007926:	b168      	cbz	r0, 8007944 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8007928:	2001      	movs	r0, #1
 800792a:	e008      	b.n	800793e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007934:	d002      	beq.n	800793c <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800793a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800793c:	2003      	movs	r0, #3
}
 800793e:	b004      	add	sp, #16
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007944:	2300      	movs	r3, #0
 8007946:	9303      	str	r3, [sp, #12]
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	9203      	str	r2, [sp, #12]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007954:	4642      	mov	r2, r8
 8007956:	4639      	mov	r1, r7
 8007958:	4620      	mov	r0, r4
 800795a:	f7ff ff25 	bl	80077a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800795e:	b980      	cbnz	r0, 8007982 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007960:	f1b9 0f01 	cmp.w	r9, #1
 8007964:	d118      	bne.n	8007998 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	b2f6      	uxtb	r6, r6
 800796a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800796c:	4642      	mov	r2, r8
 800796e:	4639      	mov	r1, r7
 8007970:	4620      	mov	r0, r4
 8007972:	f7ff ff19 	bl	80077a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007976:	b368      	cbz	r0, 80079d4 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800797a:	2b04      	cmp	r3, #4
 800797c:	d024      	beq.n	80079c8 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800797e:	2001      	movs	r0, #1
 8007980:	e7dd      	b.n	800793e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007984:	2b04      	cmp	r3, #4
 8007986:	d001      	beq.n	800798c <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8007988:	2001      	movs	r0, #1
 800798a:	e7d8      	b.n	800793e <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	6813      	ldr	r3, [r2, #0]
 8007990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	e7f7      	b.n	8007988 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	0a32      	lsrs	r2, r6, #8
 800799c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800799e:	4642      	mov	r2, r8
 80079a0:	4639      	mov	r1, r7
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7ff ff00 	bl	80077a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80079a8:	b918      	cbnz	r0, 80079b2 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	b2f6      	uxtb	r6, r6
 80079ae:	611e      	str	r6, [r3, #16]
 80079b0:	e7dc      	b.n	800796c <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d001      	beq.n	80079bc <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 80079b8:	2001      	movs	r0, #1
 80079ba:	e7c0      	b.n	800793e <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e7f7      	b.n	80079b8 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e7d4      	b.n	800797e <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	6813      	ldr	r3, [r2, #0]
 80079d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079dc:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079de:	f8cd 8000 	str.w	r8, [sp]
 80079e2:	463b      	mov	r3, r7
 80079e4:	2200      	movs	r2, #0
 80079e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff fe49 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 80079f0:	b968      	cbnz	r0, 8007a0e <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	f04a 0301 	orr.w	r3, sl, #1
 80079f8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079fa:	4643      	mov	r3, r8
 80079fc:	463a      	mov	r2, r7
 80079fe:	4909      	ldr	r1, [pc, #36]	; (8007a24 <I2C_RequestMemoryRead+0x150>)
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7ff fe7c 	bl	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d099      	beq.n	800793e <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	e797      	b.n	800793e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007a16:	d002      	beq.n	8007a1e <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007a1e:	2003      	movs	r0, #3
 8007a20:	e78d      	b.n	800793e <I2C_RequestMemoryRead+0x6a>
 8007a22:	bf00      	nop
 8007a24:	00010002 	.word	0x00010002

08007a28 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f013 0f04 	tst.w	r3, #4
 8007a38:	d11c      	bne.n	8007a74 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7ff fe08 	bl	8007650 <I2C_IsAcknowledgeFailed>
 8007a40:	b9d0      	cbnz	r0, 8007a78 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007a42:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007a46:	d0f3      	beq.n	8007a30 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a48:	f7ff fbcc 	bl	80071e4 <HAL_GetTick>
 8007a4c:	1b80      	subs	r0, r0, r6
 8007a4e:	42a8      	cmp	r0, r5
 8007a50:	d801      	bhi.n	8007a56 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	d1ec      	bne.n	8007a30 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a66:	f042 0220 	orr.w	r2, r2, #32
 8007a6a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007a6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007a70:	2001      	movs	r0, #1
 8007a72:	e000      	b.n	8007a76 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007a74:	2000      	movs	r0, #0
}
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e7fc      	b.n	8007a76 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08007a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4605      	mov	r5, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	6959      	ldr	r1, [r3, #20]
 8007a88:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007a8c:	d129      	bne.n	8007ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a8e:	6959      	ldr	r1, [r3, #20]
 8007a90:	f011 0f10 	tst.w	r1, #16
 8007a94:	d115      	bne.n	8007ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a96:	f7ff fba5 	bl	80071e4 <HAL_GetTick>
 8007a9a:	1b80      	subs	r0, r0, r6
 8007a9c:	42a0      	cmp	r0, r4
 8007a9e:	d801      	bhi.n	8007aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8007aa0:	2c00      	cmp	r4, #0
 8007aa2:	d1ef      	bne.n	8007a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aae:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ab2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007ab4:	f042 0220 	orr.w	r2, r2, #32
 8007ab8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007aba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007abe:	2001      	movs	r0, #1
}
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ac2:	f06f 0210 	mvn.w	r2, #16
 8007ac6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007acc:	2220      	movs	r2, #32
 8007ace:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ad6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007ad8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007ada:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7ee      	b.n	8007ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e7ec      	b.n	8007ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

08007ae6 <HAL_I2C_MspInit>:
}
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f000 80cc 	beq.w	8007c86 <HAL_I2C_Init+0x19e>
{
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007af2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d077      	beq.n	8007bea <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007afa:	2324      	movs	r3, #36	; 0x24
 8007afc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	6813      	ldr	r3, [r2, #0]
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b0a:	6822      	ldr	r2, [r4, #0]
 8007b0c:	6813      	ldr	r3, [r2, #0]
 8007b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b12:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b14:	6822      	ldr	r2, [r4, #0]
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b1c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b1e:	f000 fe21 	bl	8008764 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	4b5a      	ldr	r3, [pc, #360]	; (8007c90 <HAL_I2C_Init+0x1a8>)
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d864      	bhi.n	8007bf4 <HAL_I2C_Init+0x10c>
 8007b2a:	4b5a      	ldr	r3, [pc, #360]	; (8007c94 <HAL_I2C_Init+0x1ac>)
 8007b2c:	4298      	cmp	r0, r3
 8007b2e:	bf8c      	ite	hi
 8007b30:	2300      	movhi	r3, #0
 8007b32:	2301      	movls	r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 80a8 	bne.w	8007c8a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8007b3a:	4957      	ldr	r1, [pc, #348]	; (8007c98 <HAL_I2C_Init+0x1b0>)
 8007b3c:	fba1 3100 	umull	r3, r1, r1, r0
 8007b40:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	686a      	ldr	r2, [r5, #4]
 8007b46:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007b4a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8007b4e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b50:	6821      	ldr	r1, [r4, #0]
 8007b52:	6a0a      	ldr	r2, [r1, #32]
 8007b54:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007b58:	6866      	ldr	r6, [r4, #4]
 8007b5a:	4d4d      	ldr	r5, [pc, #308]	; (8007c90 <HAL_I2C_Init+0x1a8>)
 8007b5c:	42ae      	cmp	r6, r5
 8007b5e:	d84f      	bhi.n	8007c00 <HAL_I2C_Init+0x118>
 8007b60:	3301      	adds	r3, #1
 8007b62:	4313      	orrs	r3, r2
 8007b64:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b66:	6821      	ldr	r1, [r4, #0]
 8007b68:	69ca      	ldr	r2, [r1, #28]
 8007b6a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8007b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b72:	6866      	ldr	r6, [r4, #4]
 8007b74:	4b46      	ldr	r3, [pc, #280]	; (8007c90 <HAL_I2C_Init+0x1a8>)
 8007b76:	429e      	cmp	r6, r3
 8007b78:	d84c      	bhi.n	8007c14 <HAL_I2C_Init+0x12c>
 8007b7a:	1e43      	subs	r3, r0, #1
 8007b7c:	0076      	lsls	r6, r6, #1
 8007b7e:	fbb3 f3f6 	udiv	r3, r3, r6
 8007b82:	3301      	adds	r3, #1
 8007b84:	f640 70fc 	movw	r0, #4092	; 0xffc
 8007b88:	4203      	tst	r3, r0
 8007b8a:	d078      	beq.n	8007c7e <HAL_I2C_Init+0x196>
 8007b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b90:	4313      	orrs	r3, r2
 8007b92:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b94:	6821      	ldr	r1, [r4, #0]
 8007b96:	680b      	ldr	r3, [r1, #0]
 8007b98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b9c:	69e2      	ldr	r2, [r4, #28]
 8007b9e:	6a20      	ldr	r0, [r4, #32]
 8007ba0:	4302      	orrs	r2, r0
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ba6:	6821      	ldr	r1, [r4, #0]
 8007ba8:	688b      	ldr	r3, [r1, #8]
 8007baa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	68e0      	ldr	r0, [r4, #12]
 8007bb6:	4302      	orrs	r2, r0
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bbc:	6821      	ldr	r1, [r4, #0]
 8007bbe:	68cb      	ldr	r3, [r1, #12]
 8007bc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bc4:	6962      	ldr	r2, [r4, #20]
 8007bc6:	69a0      	ldr	r0, [r4, #24]
 8007bc8:	4302      	orrs	r2, r0
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	6813      	ldr	r3, [r2, #0]
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bd8:	2000      	movs	r0, #0
 8007bda:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007be2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8007be8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007bea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8007bee:	f7ff ff7a 	bl	8007ae6 <HAL_I2C_MspInit>
 8007bf2:	e782      	b.n	8007afa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bf4:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <HAL_I2C_Init+0x1b4>)
 8007bf6:	4298      	cmp	r0, r3
 8007bf8:	bf8c      	ite	hi
 8007bfa:	2300      	movhi	r3, #0
 8007bfc:	2301      	movls	r3, #1
 8007bfe:	e799      	b.n	8007b34 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c00:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8007c04:	fb05 f303 	mul.w	r3, r5, r3
 8007c08:	4d25      	ldr	r5, [pc, #148]	; (8007ca0 <HAL_I2C_Init+0x1b8>)
 8007c0a:	fba5 5303 	umull	r5, r3, r5, r3
 8007c0e:	099b      	lsrs	r3, r3, #6
 8007c10:	3301      	adds	r3, #1
 8007c12:	e7a6      	b.n	8007b62 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	b9bb      	cbnz	r3, 8007c48 <HAL_I2C_Init+0x160>
 8007c18:	1e45      	subs	r5, r0, #1
 8007c1a:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8007c1e:	fbb5 f5fc 	udiv	r5, r5, ip
 8007c22:	3501      	adds	r5, #1
 8007c24:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007c28:	fab5 f585 	clz	r5, r5
 8007c2c:	096d      	lsrs	r5, r5, #5
 8007c2e:	bb45      	cbnz	r5, 8007c82 <HAL_I2C_Init+0x19a>
 8007c30:	b9c3      	cbnz	r3, 8007c64 <HAL_I2C_Init+0x17c>
 8007c32:	3801      	subs	r0, #1
 8007c34:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c46:	e7a3      	b.n	8007b90 <HAL_I2C_Init+0xa8>
 8007c48:	1e45      	subs	r5, r0, #1
 8007c4a:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 8007c4e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8007c52:	fbb5 f5fc 	udiv	r5, r5, ip
 8007c56:	3501      	adds	r5, #1
 8007c58:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007c5c:	fab5 f585 	clz	r5, r5
 8007c60:	096d      	lsrs	r5, r5, #5
 8007c62:	e7e4      	b.n	8007c2e <HAL_I2C_Init+0x146>
 8007c64:	3801      	subs	r0, #1
 8007c66:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8007c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c72:	3301      	adds	r3, #1
 8007c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c7c:	e788      	b.n	8007b90 <HAL_I2C_Init+0xa8>
 8007c7e:	2304      	movs	r3, #4
 8007c80:	e786      	b.n	8007b90 <HAL_I2C_Init+0xa8>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e784      	b.n	8007b90 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8007c86:	2001      	movs	r0, #1
}
 8007c88:	4770      	bx	lr
    return HAL_ERROR;
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	e7ac      	b.n	8007be8 <HAL_I2C_Init+0x100>
 8007c8e:	bf00      	nop
 8007c90:	000186a0 	.word	0x000186a0
 8007c94:	001e847f 	.word	0x001e847f
 8007c98:	431bde83 	.word	0x431bde83
 8007c9c:	003d08ff 	.word	0x003d08ff
 8007ca0:	10624dd3 	.word	0x10624dd3

08007ca4 <HAL_I2C_MspDeInit>:
}
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8007ca6:	b1a8      	cbz	r0, 8007cd4 <HAL_I2C_DeInit+0x2e>
{
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cac:	2324      	movs	r3, #36	; 0x24
 8007cae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007cb2:	6802      	ldr	r2, [r0, #0]
 8007cb4:	6813      	ldr	r3, [r2, #0]
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007cbc:	f7ff fff2 	bl	8007ca4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007cc4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cc8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8007cce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007cd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007cd4:	2001      	movs	r0, #1
}
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_I2C_Mem_Write>:
{
 8007cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	4699      	mov	r9, r3
 8007ce6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007ce8:	f7ff fa7c 	bl	80071e4 <HAL_GetTick>
 8007cec:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cee:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8007cf2:	b2c0      	uxtb	r0, r0
 8007cf4:	2820      	cmp	r0, #32
 8007cf6:	d003      	beq.n	8007d00 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8007cf8:	2002      	movs	r0, #2
}
 8007cfa:	b003      	add	sp, #12
 8007cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d00:	9500      	str	r5, [sp, #0]
 8007d02:	2319      	movs	r3, #25
 8007d04:	2201      	movs	r2, #1
 8007d06:	494b      	ldr	r1, [pc, #300]	; (8007e34 <HAL_I2C_Mem_Write+0x15c>)
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff fcba 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f040 8089 	bne.w	8007e26 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8007d14:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f000 8086 	beq.w	8007e2a <HAL_I2C_Mem_Write+0x152>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	f012 0f01 	tst.w	r2, #1
 8007d2c:	d103      	bne.n	8007d36 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	6813      	ldr	r3, [r2, #0]
 8007d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d3e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d40:	2321      	movs	r3, #33	; 0x21
 8007d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d46:	2340      	movs	r3, #64	; 0x40
 8007d48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d52:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d54:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007d58:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d5c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d5e:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <HAL_I2C_Mem_Write+0x160>)
 8007d60:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d62:	9501      	str	r5, [sp, #4]
 8007d64:	9600      	str	r6, [sp, #0]
 8007d66:	464b      	mov	r3, r9
 8007d68:	4642      	mov	r2, r8
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fd45 	bl	80077fc <I2C_RequestMemoryWrite>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d15b      	bne.n	8007e2e <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8007d76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d035      	beq.n	8007de8 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d7c:	462a      	mov	r2, r5
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7ff fd11 	bl	80077a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d86:	bb20      	cbnz	r0, 8007dd2 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007d90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d92:	1c53      	adds	r3, r2, #1
 8007d94:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007d96:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007d98:	3901      	subs	r1, #1
 8007d9a:	b289      	uxth	r1, r1
 8007d9c:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007d9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	6958      	ldr	r0, [r3, #20]
 8007dac:	f010 0f04 	tst.w	r0, #4
 8007db0:	d0e1      	beq.n	8007d76 <HAL_I2C_Mem_Write+0x9e>
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d0df      	beq.n	8007d76 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007db6:	7852      	ldrb	r2, [r2, #1]
 8007db8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007dc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8007dc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007dd0:	e7d1      	b.n	8007d76 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8007dd8:	2001      	movs	r0, #1
 8007dda:	e78e      	b.n	8007cfa <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	6813      	ldr	r3, [r2, #0]
 8007de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	e7f7      	b.n	8007dd8 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007de8:	462a      	mov	r2, r5
 8007dea:	4631      	mov	r1, r6
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff fe1b 	bl	8007a28 <I2C_WaitOnBTFFlagUntilTimeout>
 8007df2:	b150      	cbz	r0, 8007e0a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d001      	beq.n	8007dfe <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e77d      	b.n	8007cfa <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e7f7      	b.n	8007dfa <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e12:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e14:	2320      	movs	r3, #32
 8007e16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8007e20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8007e24:	e769      	b.n	8007cfa <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8007e26:	2002      	movs	r0, #2
 8007e28:	e767      	b.n	8007cfa <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8007e2a:	2002      	movs	r0, #2
 8007e2c:	e765      	b.n	8007cfa <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8007e2e:	2001      	movs	r0, #1
 8007e30:	e763      	b.n	8007cfa <HAL_I2C_Mem_Write+0x22>
 8007e32:	bf00      	nop
 8007e34:	00100002 	.word	0x00100002
 8007e38:	ffff0000 	.word	0xffff0000

08007e3c <HAL_I2C_Mem_Read>:
{
 8007e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e40:	b087      	sub	sp, #28
 8007e42:	4604      	mov	r4, r0
 8007e44:	460f      	mov	r7, r1
 8007e46:	4690      	mov	r8, r2
 8007e48:	4699      	mov	r9, r3
 8007e4a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007e4c:	f7ff f9ca 	bl	80071e4 <HAL_GetTick>
 8007e50:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e52:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8007e56:	b2c0      	uxtb	r0, r0
 8007e58:	2820      	cmp	r0, #32
 8007e5a:	d004      	beq.n	8007e66 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8007e5c:	2702      	movs	r7, #2
}
 8007e5e:	4638      	mov	r0, r7
 8007e60:	b007      	add	sp, #28
 8007e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e66:	9500      	str	r5, [sp, #0]
 8007e68:	2319      	movs	r3, #25
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	4988      	ldr	r1, [pc, #544]	; (8008090 <HAL_I2C_Mem_Read+0x254>)
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff fc07 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f040 8143 	bne.w	8008100 <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 8007e7a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	f000 8140 	beq.w	8008104 <HAL_I2C_Mem_Read+0x2c8>
 8007e84:	2301      	movs	r3, #1
 8007e86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	f012 0f01 	tst.w	r2, #1
 8007e92:	d103      	bne.n	8007e9c <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ea4:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ea6:	2322      	movs	r3, #34	; 0x22
 8007ea8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eac:	2340      	movs	r3, #64	; 0x40
 8007eae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8007eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eb8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007eba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007ebe:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ec0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ec2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ec4:	4b73      	ldr	r3, [pc, #460]	; (8008094 <HAL_I2C_Mem_Read+0x258>)
 8007ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ec8:	9501      	str	r5, [sp, #4]
 8007eca:	9600      	str	r6, [sp, #0]
 8007ecc:	464b      	mov	r3, r9
 8007ece:	4642      	mov	r2, r8
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fcfe 	bl	80078d4 <I2C_RequestMemoryRead>
 8007ed8:	4607      	mov	r7, r0
 8007eda:	2800      	cmp	r0, #0
 8007edc:	f040 8114 	bne.w	8008108 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 8007ee0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ee2:	b95b      	cbnz	r3, 8007efc <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ee4:	9302      	str	r3, [sp, #8]
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	9202      	str	r2, [sp, #8]
 8007ef0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	e075      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d00a      	beq.n	8007f16 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d01a      	beq.n	8007f3a <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f04:	2300      	movs	r3, #0
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	695a      	ldr	r2, [r3, #20]
 8007f0c:	9205      	str	r2, [sp, #20]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	9305      	str	r3, [sp, #20]
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	e068      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	6813      	ldr	r3, [r2, #0]
 8007f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f1e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f20:	2300      	movs	r3, #0
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	695a      	ldr	r2, [r3, #20]
 8007f28:	9203      	str	r2, [sp, #12]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	9203      	str	r2, [sp, #12]
 8007f2e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	e056      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	6813      	ldr	r3, [r2, #0]
 8007f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f42:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f44:	6822      	ldr	r2, [r4, #0]
 8007f46:	6813      	ldr	r3, [r2, #0]
 8007f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f4c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	695a      	ldr	r2, [r3, #20]
 8007f56:	9204      	str	r2, [sp, #16]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	e043      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f60:	462a      	mov	r2, r5
 8007f62:	4631      	mov	r1, r6
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7ff fd89 	bl	8007a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f040 80ce 	bne.w	800810c <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f76:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007f7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007f80:	3b01      	subs	r3, #1
 8007f82:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007f8e:	e02b      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f90:	9500      	str	r5, [sp, #0]
 8007f92:	4633      	mov	r3, r6
 8007f94:	2200      	movs	r2, #0
 8007f96:	4940      	ldr	r1, [pc, #256]	; (8008098 <HAL_I2C_Mem_Read+0x25c>)
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7ff fb72 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f040 80b6 	bne.w	8008110 <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa4:	6822      	ldr	r2, [r4, #0]
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fac:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fb4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007fb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007fb8:	1c53      	adds	r3, r2, #1
 8007fba:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007fbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007fc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007fd8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007fde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007fe8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d07f      	beq.n	80080ee <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d854      	bhi.n	800809c <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d0b4      	beq.n	8007f60 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d0ca      	beq.n	8007f90 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ffa:	9500      	str	r5, [sp, #0]
 8007ffc:	4633      	mov	r3, r6
 8007ffe:	2200      	movs	r2, #0
 8008000:	4925      	ldr	r1, [pc, #148]	; (8008098 <HAL_I2C_Mem_Read+0x25c>)
 8008002:	4620      	mov	r0, r4
 8008004:	f7ff fb3d 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 8008008:	2800      	cmp	r0, #0
 800800a:	f040 8083 	bne.w	8008114 <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	6813      	ldr	r3, [r2, #0]
 8008012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008016:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800801e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008022:	3301      	adds	r3, #1
 8008024:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008026:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008028:	3b01      	subs	r3, #1
 800802a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800802c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800802e:	b29b      	uxth	r3, r3
 8008030:	3b01      	subs	r3, #1
 8008032:	b29b      	uxth	r3, r3
 8008034:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008036:	9500      	str	r5, [sp, #0]
 8008038:	4633      	mov	r3, r6
 800803a:	2200      	movs	r2, #0
 800803c:	4916      	ldr	r1, [pc, #88]	; (8008098 <HAL_I2C_Mem_Read+0x25c>)
 800803e:	4620      	mov	r0, r4
 8008040:	f7ff fb1f 	bl	8007682 <I2C_WaitOnFlagUntilTimeout>
 8008044:	2800      	cmp	r0, #0
 8008046:	d167      	bne.n	8008118 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008050:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	691a      	ldr	r2, [r3, #16]
 8008056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008058:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800805a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800805c:	1c53      	adds	r3, r2, #1
 800805e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008060:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008062:	3b01      	subs	r3, #1
 8008064:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008066:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29b      	uxth	r3, r3
 800806e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8008076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008078:	3301      	adds	r3, #1
 800807a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800807c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800807e:	3b01      	subs	r3, #1
 8008080:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008082:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800808c:	e7ac      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
 800808e:	bf00      	nop
 8008090:	00100002 	.word	0x00100002
 8008094:	ffff0000 	.word	0xffff0000
 8008098:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800809c:	462a      	mov	r2, r5
 800809e:	4631      	mov	r1, r6
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7ff fceb 	bl	8007a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d138      	bne.n	800811c <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80080b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080b4:	1c53      	adds	r3, r2, #1
 80080b6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80080b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80080ba:	3b01      	subs	r3, #1
 80080bc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80080be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	6959      	ldr	r1, [r3, #20]
 80080cc:	f011 0f04 	tst.w	r1, #4
 80080d0:	d08a      	beq.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80080d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d8:	3301      	adds	r3, #1
 80080da:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80080dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80080de:	3b01      	subs	r3, #1
 80080e0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80080e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	8563      	strh	r3, [r4, #42]	; 0x2a
 80080ec:	e77c      	b.n	8007fe8 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80080ee:	2320      	movs	r3, #32
 80080f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80080fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80080fe:	e6ae      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8008100:	2702      	movs	r7, #2
 8008102:	e6ac      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8008104:	2702      	movs	r7, #2
 8008106:	e6aa      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8008108:	2701      	movs	r7, #1
 800810a:	e6a8      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800810c:	2701      	movs	r7, #1
 800810e:	e6a6      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8008110:	2701      	movs	r7, #1
 8008112:	e6a4      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8008114:	2701      	movs	r7, #1
 8008116:	e6a2      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8008118:	2701      	movs	r7, #1
 800811a:	e6a0      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 800811c:	2701      	movs	r7, #1
 800811e:	e69e      	b.n	8007e5e <HAL_I2C_Mem_Read+0x22>

08008120 <HAL_I2C_GetState>:
  return hi2c->State;
 8008120:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8008124:	4770      	bx	lr

08008126 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008126:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8008128:	4770      	bx	lr
	...

0800812c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800812c:	2800      	cmp	r0, #0
 800812e:	f000 81e0 	beq.w	80084f2 <HAL_RCC_OscConfig+0x3c6>
{
 8008132:	b570      	push	{r4, r5, r6, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008138:	6803      	ldr	r3, [r0, #0]
 800813a:	f013 0f01 	tst.w	r3, #1
 800813e:	d03b      	beq.n	80081b8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008140:	4b9f      	ldr	r3, [pc, #636]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
 8008148:	2b04      	cmp	r3, #4
 800814a:	d02c      	beq.n	80081a6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800814c:	4b9c      	ldr	r3, [pc, #624]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008154:	2b08      	cmp	r3, #8
 8008156:	d021      	beq.n	800819c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815e:	d04f      	beq.n	8008200 <HAL_RCC_OscConfig+0xd4>
 8008160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008164:	d052      	beq.n	800820c <HAL_RCC_OscConfig+0xe0>
 8008166:	4b96      	ldr	r3, [pc, #600]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008176:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d050      	beq.n	8008220 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800817e:	f7ff f831 	bl	80071e4 <HAL_GetTick>
 8008182:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008184:	4b8e      	ldr	r3, [pc, #568]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800818c:	d114      	bne.n	80081b8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800818e:	f7ff f829 	bl	80071e4 <HAL_GetTick>
 8008192:	1b40      	subs	r0, r0, r5
 8008194:	2864      	cmp	r0, #100	; 0x64
 8008196:	d9f5      	bls.n	8008184 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8008198:	2003      	movs	r0, #3
 800819a:	e1b1      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800819c:	4b88      	ldr	r3, [pc, #544]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80081a4:	d0d8      	beq.n	8008158 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a6:	4b86      	ldr	r3, [pc, #536]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80081ae:	d003      	beq.n	80081b8 <HAL_RCC_OscConfig+0x8c>
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 819f 	beq.w	80084f6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	f013 0f02 	tst.w	r3, #2
 80081be:	d054      	beq.n	800826a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081c0:	4b7f      	ldr	r3, [pc, #508]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f013 0f0c 	tst.w	r3, #12
 80081c8:	d03e      	beq.n	8008248 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ca:	4b7d      	ldr	r3, [pc, #500]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	d033      	beq.n	800823e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081d6:	68e3      	ldr	r3, [r4, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d068      	beq.n	80082ae <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081dc:	4b79      	ldr	r3, [pc, #484]	; (80083c4 <HAL_RCC_OscConfig+0x298>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e2:	f7fe ffff 	bl	80071e4 <HAL_GetTick>
 80081e6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081e8:	4b75      	ldr	r3, [pc, #468]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f013 0f02 	tst.w	r3, #2
 80081f0:	d154      	bne.n	800829c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081f2:	f7fe fff7 	bl	80071e4 <HAL_GetTick>
 80081f6:	1b40      	subs	r0, r0, r5
 80081f8:	2802      	cmp	r0, #2
 80081fa:	d9f5      	bls.n	80081e8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80081fc:	2003      	movs	r0, #3
 80081fe:	e17f      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008200:	4a6f      	ldr	r2, [pc, #444]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e7b5      	b.n	8008178 <HAL_RCC_OscConfig+0x4c>
 800820c:	4b6c      	ldr	r3, [pc, #432]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e7ab      	b.n	8008178 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8008220:	f7fe ffe0 	bl	80071e4 <HAL_GetTick>
 8008224:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008226:	4b66      	ldr	r3, [pc, #408]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800822e:	d0c3      	beq.n	80081b8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008230:	f7fe ffd8 	bl	80071e4 <HAL_GetTick>
 8008234:	1b40      	subs	r0, r0, r5
 8008236:	2864      	cmp	r0, #100	; 0x64
 8008238:	d9f5      	bls.n	8008226 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800823a:	2003      	movs	r0, #3
 800823c:	e160      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800823e:	4b60      	ldr	r3, [pc, #384]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008246:	d1c6      	bne.n	80081d6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008248:	4b5d      	ldr	r3, [pc, #372]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f013 0f02 	tst.w	r3, #2
 8008250:	d003      	beq.n	800825a <HAL_RCC_OscConfig+0x12e>
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	2b01      	cmp	r3, #1
 8008256:	f040 8150 	bne.w	80084fa <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800825a:	4a59      	ldr	r2, [pc, #356]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800825c:	6813      	ldr	r3, [r2, #0]
 800825e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008262:	6921      	ldr	r1, [r4, #16]
 8008264:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008268:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f013 0f08 	tst.w	r3, #8
 8008270:	d042      	beq.n	80082f8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008272:	6963      	ldr	r3, [r4, #20]
 8008274:	b36b      	cbz	r3, 80082d2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008276:	4b53      	ldr	r3, [pc, #332]	; (80083c4 <HAL_RCC_OscConfig+0x298>)
 8008278:	2201      	movs	r2, #1
 800827a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827e:	f7fe ffb1 	bl	80071e4 <HAL_GetTick>
 8008282:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008284:	4b4e      	ldr	r3, [pc, #312]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008288:	f013 0f02 	tst.w	r3, #2
 800828c:	d134      	bne.n	80082f8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800828e:	f7fe ffa9 	bl	80071e4 <HAL_GetTick>
 8008292:	1b40      	subs	r0, r0, r5
 8008294:	2802      	cmp	r0, #2
 8008296:	d9f5      	bls.n	8008284 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008298:	2003      	movs	r0, #3
 800829a:	e131      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829c:	4a48      	ldr	r2, [pc, #288]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80082a4:	6921      	ldr	r1, [r4, #16]
 80082a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	e7dd      	b.n	800826a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80082ae:	4b45      	ldr	r3, [pc, #276]	; (80083c4 <HAL_RCC_OscConfig+0x298>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082b4:	f7fe ff96 	bl	80071e4 <HAL_GetTick>
 80082b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082ba:	4b41      	ldr	r3, [pc, #260]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f013 0f02 	tst.w	r3, #2
 80082c2:	d0d2      	beq.n	800826a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082c4:	f7fe ff8e 	bl	80071e4 <HAL_GetTick>
 80082c8:	1b40      	subs	r0, r0, r5
 80082ca:	2802      	cmp	r0, #2
 80082cc:	d9f5      	bls.n	80082ba <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80082ce:	2003      	movs	r0, #3
 80082d0:	e116      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d2:	4b3c      	ldr	r3, [pc, #240]	; (80083c4 <HAL_RCC_OscConfig+0x298>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082da:	f7fe ff83 	bl	80071e4 <HAL_GetTick>
 80082de:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082e0:	4b37      	ldr	r3, [pc, #220]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80082e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e4:	f013 0f02 	tst.w	r3, #2
 80082e8:	d006      	beq.n	80082f8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082ea:	f7fe ff7b 	bl	80071e4 <HAL_GetTick>
 80082ee:	1b40      	subs	r0, r0, r5
 80082f0:	2802      	cmp	r0, #2
 80082f2:	d9f5      	bls.n	80082e0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80082f4:	2003      	movs	r0, #3
 80082f6:	e103      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	f013 0f04 	tst.w	r3, #4
 80082fe:	d077      	beq.n	80083f0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008300:	4b2f      	ldr	r3, [pc, #188]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008308:	d133      	bne.n	8008372 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800830a:	2300      	movs	r3, #0
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008312:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008316:	641a      	str	r2, [r3, #64]	; 0x40
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008322:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008324:	4b28      	ldr	r3, [pc, #160]	; (80083c8 <HAL_RCC_OscConfig+0x29c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f413 7f80 	tst.w	r3, #256	; 0x100
 800832c:	d023      	beq.n	8008376 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d034      	beq.n	800839e <HAL_RCC_OscConfig+0x272>
 8008334:	2b05      	cmp	r3, #5
 8008336:	d038      	beq.n	80083aa <HAL_RCC_OscConfig+0x27e>
 8008338:	4b21      	ldr	r3, [pc, #132]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 800833a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	671a      	str	r2, [r3, #112]	; 0x70
 8008342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008344:	f022 0204 	bic.w	r2, r2, #4
 8008348:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d03d      	beq.n	80083cc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008350:	f7fe ff48 	bl	80071e4 <HAL_GetTick>
 8008354:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	f013 0f02 	tst.w	r3, #2
 800835e:	d146      	bne.n	80083ee <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008360:	f7fe ff40 	bl	80071e4 <HAL_GetTick>
 8008364:	1b80      	subs	r0, r0, r6
 8008366:	f241 3388 	movw	r3, #5000	; 0x1388
 800836a:	4298      	cmp	r0, r3
 800836c:	d9f3      	bls.n	8008356 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800836e:	2003      	movs	r0, #3
 8008370:	e0c6      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8008372:	2500      	movs	r5, #0
 8008374:	e7d6      	b.n	8008324 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008376:	4a14      	ldr	r2, [pc, #80]	; (80083c8 <HAL_RCC_OscConfig+0x29c>)
 8008378:	6813      	ldr	r3, [r2, #0]
 800837a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008380:	f7fe ff30 	bl	80071e4 <HAL_GetTick>
 8008384:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <HAL_RCC_OscConfig+0x29c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800838e:	d1ce      	bne.n	800832e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008390:	f7fe ff28 	bl	80071e4 <HAL_GetTick>
 8008394:	1b80      	subs	r0, r0, r6
 8008396:	2802      	cmp	r0, #2
 8008398:	d9f5      	bls.n	8008386 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800839a:	2003      	movs	r0, #3
 800839c:	e0b0      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800839e:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80083a0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80083a2:	f043 0301 	orr.w	r3, r3, #1
 80083a6:	6713      	str	r3, [r2, #112]	; 0x70
 80083a8:	e7cf      	b.n	800834a <HAL_RCC_OscConfig+0x21e>
 80083aa:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <HAL_RCC_OscConfig+0x294>)
 80083ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ae:	f042 0204 	orr.w	r2, r2, #4
 80083b2:	671a      	str	r2, [r3, #112]	; 0x70
 80083b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	671a      	str	r2, [r3, #112]	; 0x70
 80083bc:	e7c5      	b.n	800834a <HAL_RCC_OscConfig+0x21e>
 80083be:	bf00      	nop
 80083c0:	40023800 	.word	0x40023800
 80083c4:	42470000 	.word	0x42470000
 80083c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083cc:	f7fe ff0a 	bl	80071e4 <HAL_GetTick>
 80083d0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083d2:	4b52      	ldr	r3, [pc, #328]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	f013 0f02 	tst.w	r3, #2
 80083da:	d008      	beq.n	80083ee <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083dc:	f7fe ff02 	bl	80071e4 <HAL_GetTick>
 80083e0:	1b80      	subs	r0, r0, r6
 80083e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80083e6:	4298      	cmp	r0, r3
 80083e8:	d9f3      	bls.n	80083d2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80083ea:	2003      	movs	r0, #3
 80083ec:	e088      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083ee:	b9ed      	cbnz	r5, 800842c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083f0:	69a3      	ldr	r3, [r4, #24]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8083 	beq.w	80084fe <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083f8:	4a48      	ldr	r2, [pc, #288]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 80083fa:	6892      	ldr	r2, [r2, #8]
 80083fc:	f002 020c 	and.w	r2, r2, #12
 8008400:	2a08      	cmp	r2, #8
 8008402:	d051      	beq.n	80084a8 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008404:	2b02      	cmp	r3, #2
 8008406:	d017      	beq.n	8008438 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008408:	4b45      	ldr	r3, [pc, #276]	; (8008520 <HAL_RCC_OscConfig+0x3f4>)
 800840a:	2200      	movs	r2, #0
 800840c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800840e:	f7fe fee9 	bl	80071e4 <HAL_GetTick>
 8008412:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008414:	4b41      	ldr	r3, [pc, #260]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800841c:	d042      	beq.n	80084a4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800841e:	f7fe fee1 	bl	80071e4 <HAL_GetTick>
 8008422:	1b00      	subs	r0, r0, r4
 8008424:	2802      	cmp	r0, #2
 8008426:	d9f5      	bls.n	8008414 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008428:	2003      	movs	r0, #3
 800842a:	e069      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800842c:	4a3b      	ldr	r2, [pc, #236]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 800842e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008434:	6413      	str	r3, [r2, #64]	; 0x40
 8008436:	e7db      	b.n	80083f0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8008438:	4b39      	ldr	r3, [pc, #228]	; (8008520 <HAL_RCC_OscConfig+0x3f4>)
 800843a:	2200      	movs	r2, #0
 800843c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800843e:	f7fe fed1 	bl	80071e4 <HAL_GetTick>
 8008442:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008444:	4b35      	ldr	r3, [pc, #212]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800844c:	d006      	beq.n	800845c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844e:	f7fe fec9 	bl	80071e4 <HAL_GetTick>
 8008452:	1b40      	subs	r0, r0, r5
 8008454:	2802      	cmp	r0, #2
 8008456:	d9f5      	bls.n	8008444 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8008458:	2003      	movs	r0, #3
 800845a:	e051      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800845c:	69e3      	ldr	r3, [r4, #28]
 800845e:	6a22      	ldr	r2, [r4, #32]
 8008460:	4313      	orrs	r3, r2
 8008462:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008464:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800846a:	0852      	lsrs	r2, r2, #1
 800846c:	3a01      	subs	r2, #1
 800846e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008474:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008478:	4a28      	ldr	r2, [pc, #160]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 800847a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800847c:	4b28      	ldr	r3, [pc, #160]	; (8008520 <HAL_RCC_OscConfig+0x3f4>)
 800847e:	2201      	movs	r2, #1
 8008480:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008482:	f7fe feaf 	bl	80071e4 <HAL_GetTick>
 8008486:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008488:	4b24      	ldr	r3, [pc, #144]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008490:	d106      	bne.n	80084a0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008492:	f7fe fea7 	bl	80071e4 <HAL_GetTick>
 8008496:	1b00      	subs	r0, r0, r4
 8008498:	2802      	cmp	r0, #2
 800849a:	d9f5      	bls.n	8008488 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800849c:	2003      	movs	r0, #3
 800849e:	e02f      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80084a0:	2000      	movs	r0, #0
 80084a2:	e02d      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
 80084a4:	2000      	movs	r0, #0
 80084a6:	e02b      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d02b      	beq.n	8008504 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80084ac:	4b1b      	ldr	r3, [pc, #108]	; (800851c <HAL_RCC_OscConfig+0x3f0>)
 80084ae:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80084b4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d126      	bne.n	8008508 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084be:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d123      	bne.n	800850c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084c6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80084ca:	401a      	ands	r2, r3
 80084cc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80084d0:	d11e      	bne.n	8008510 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084d2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80084d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80084d8:	0852      	lsrs	r2, r2, #1
 80084da:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084dc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80084e0:	d118      	bne.n	8008514 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084e2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80084e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084e8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80084ec:	d114      	bne.n	8008518 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80084ee:	2000      	movs	r0, #0
 80084f0:	e006      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80084f2:	2001      	movs	r0, #1
}
 80084f4:	4770      	bx	lr
        return HAL_ERROR;
 80084f6:	2001      	movs	r0, #1
 80084f8:	e002      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80084fa:	2001      	movs	r0, #1
 80084fc:	e000      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80084fe:	2000      	movs	r0, #0
}
 8008500:	b002      	add	sp, #8
 8008502:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008504:	2001      	movs	r0, #1
 8008506:	e7fb      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8008508:	2001      	movs	r0, #1
 800850a:	e7f9      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
 800850c:	2001      	movs	r0, #1
 800850e:	e7f7      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
 8008510:	2001      	movs	r0, #1
 8008512:	e7f5      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
 8008514:	2001      	movs	r0, #1
 8008516:	e7f3      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
 8008518:	2001      	movs	r0, #1
 800851a:	e7f1      	b.n	8008500 <HAL_RCC_OscConfig+0x3d4>
 800851c:	40023800 	.word	0x40023800
 8008520:	42470000 	.word	0x42470000

08008524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008524:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008526:	4b31      	ldr	r3, [pc, #196]	; (80085ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 030c 	and.w	r3, r3, #12
 800852e:	2b04      	cmp	r3, #4
 8008530:	d057      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0xbe>
 8008532:	2b08      	cmp	r3, #8
 8008534:	d157      	bne.n	80085e6 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008536:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008544:	d02a      	beq.n	800859c <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8008548:	6859      	ldr	r1, [r3, #4]
 800854a:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800854e:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8008552:	ebb1 000c 	subs.w	r0, r1, ip
 8008556:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800855a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800855e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008562:	0181      	lsls	r1, r0, #6
 8008564:	1a09      	subs	r1, r1, r0
 8008566:	eb63 030e 	sbc.w	r3, r3, lr
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008570:	00c9      	lsls	r1, r1, #3
 8008572:	eb11 0c0c 	adds.w	ip, r1, ip
 8008576:	f143 0300 	adc.w	r3, r3, #0
 800857a:	0259      	lsls	r1, r3, #9
 800857c:	2300      	movs	r3, #0
 800857e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8008582:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8008586:	f7f8 fb17 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800858a:	4b18      	ldr	r3, [pc, #96]	; (80085ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008592:	3301      	adds	r3, #1
 8008594:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8008596:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800859a:	e025      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800859c:	4b13      	ldr	r3, [pc, #76]	; (80085ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800859e:	6859      	ldr	r1, [r3, #4]
 80085a0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80085a4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80085a8:	ebb1 000c 	subs.w	r0, r1, ip
 80085ac:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80085b0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80085b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80085b8:	0181      	lsls	r1, r0, #6
 80085ba:	1a09      	subs	r1, r1, r0
 80085bc:	eb63 030e 	sbc.w	r3, r3, lr
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085c6:	00c9      	lsls	r1, r1, #3
 80085c8:	eb11 0c0c 	adds.w	ip, r1, ip
 80085cc:	f143 0300 	adc.w	r3, r3, #0
 80085d0:	0299      	lsls	r1, r3, #10
 80085d2:	2300      	movs	r3, #0
 80085d4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80085d8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80085dc:	f7f8 faec 	bl	8000bb8 <__aeabi_uldivmod>
 80085e0:	e7d3      	b.n	800858a <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 80085e2:	4803      	ldr	r0, [pc, #12]	; (80085f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80085e4:	e000      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085e6:	4803      	ldr	r0, [pc, #12]	; (80085f4 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80085e8:	bd08      	pop	{r3, pc}
 80085ea:	bf00      	nop
 80085ec:	40023800 	.word	0x40023800
 80085f0:	007a1200 	.word	0x007a1200
 80085f4:	00f42400 	.word	0x00f42400

080085f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f000 809b 	beq.w	8008734 <HAL_RCC_ClockConfig+0x13c>
{
 80085fe:	b570      	push	{r4, r5, r6, lr}
 8008600:	460d      	mov	r5, r1
 8008602:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008604:	4b4f      	ldr	r3, [pc, #316]	; (8008744 <HAL_RCC_ClockConfig+0x14c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	428b      	cmp	r3, r1
 800860e:	d208      	bcs.n	8008622 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008610:	b2cb      	uxtb	r3, r1
 8008612:	4a4c      	ldr	r2, [pc, #304]	; (8008744 <HAL_RCC_ClockConfig+0x14c>)
 8008614:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008616:	6813      	ldr	r3, [r2, #0]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	428b      	cmp	r3, r1
 800861e:	f040 808b 	bne.w	8008738 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	f013 0f02 	tst.w	r3, #2
 8008628:	d017      	beq.n	800865a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800862a:	f013 0f04 	tst.w	r3, #4
 800862e:	d004      	beq.n	800863a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008630:	4a45      	ldr	r2, [pc, #276]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 8008632:	6893      	ldr	r3, [r2, #8]
 8008634:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008638:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	f013 0f08 	tst.w	r3, #8
 8008640:	d004      	beq.n	800864c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008642:	4a41      	ldr	r2, [pc, #260]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 8008644:	6893      	ldr	r3, [r2, #8]
 8008646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800864a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800864c:	4a3e      	ldr	r2, [pc, #248]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 800864e:	6893      	ldr	r3, [r2, #8]
 8008650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008654:	68a1      	ldr	r1, [r4, #8]
 8008656:	430b      	orrs	r3, r1
 8008658:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	f013 0f01 	tst.w	r3, #1
 8008660:	d032      	beq.n	80086c8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d021      	beq.n	80086ac <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008668:	1e9a      	subs	r2, r3, #2
 800866a:	2a01      	cmp	r2, #1
 800866c:	d925      	bls.n	80086ba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	4a36      	ldr	r2, [pc, #216]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 8008670:	6812      	ldr	r2, [r2, #0]
 8008672:	f012 0f02 	tst.w	r2, #2
 8008676:	d061      	beq.n	800873c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008678:	4933      	ldr	r1, [pc, #204]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 800867a:	688a      	ldr	r2, [r1, #8]
 800867c:	f022 0203 	bic.w	r2, r2, #3
 8008680:	4313      	orrs	r3, r2
 8008682:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008684:	f7fe fdae 	bl	80071e4 <HAL_GetTick>
 8008688:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 030c 	and.w	r3, r3, #12
 8008692:	6862      	ldr	r2, [r4, #4]
 8008694:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008698:	d016      	beq.n	80086c8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800869a:	f7fe fda3 	bl	80071e4 <HAL_GetTick>
 800869e:	1b80      	subs	r0, r0, r6
 80086a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80086a4:	4298      	cmp	r0, r3
 80086a6:	d9f0      	bls.n	800868a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80086a8:	2003      	movs	r0, #3
 80086aa:	e042      	b.n	8008732 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ac:	4a26      	ldr	r2, [pc, #152]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 80086ae:	6812      	ldr	r2, [r2, #0]
 80086b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80086b4:	d1e0      	bne.n	8008678 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80086b6:	2001      	movs	r0, #1
 80086b8:	e03b      	b.n	8008732 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086ba:	4a23      	ldr	r2, [pc, #140]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80086c2:	d1d9      	bne.n	8008678 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80086c4:	2001      	movs	r0, #1
 80086c6:	e034      	b.n	8008732 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086c8:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <HAL_RCC_ClockConfig+0x14c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	d907      	bls.n	80086e4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086d4:	b2ea      	uxtb	r2, r5
 80086d6:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <HAL_RCC_ClockConfig+0x14c>)
 80086d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	d12d      	bne.n	8008740 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	f013 0f04 	tst.w	r3, #4
 80086ea:	d006      	beq.n	80086fa <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086ec:	4a16      	ldr	r2, [pc, #88]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 80086ee:	6893      	ldr	r3, [r2, #8]
 80086f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80086f4:	68e1      	ldr	r1, [r4, #12]
 80086f6:	430b      	orrs	r3, r1
 80086f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	f013 0f08 	tst.w	r3, #8
 8008700:	d007      	beq.n	8008712 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008702:	4a11      	ldr	r2, [pc, #68]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 8008704:	6893      	ldr	r3, [r2, #8]
 8008706:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800870a:	6921      	ldr	r1, [r4, #16]
 800870c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008710:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008712:	f7ff ff07 	bl	8008524 <HAL_RCC_GetSysClockFreq>
 8008716:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <HAL_RCC_ClockConfig+0x150>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800871e:	4a0b      	ldr	r2, [pc, #44]	; (800874c <HAL_RCC_ClockConfig+0x154>)
 8008720:	5cd3      	ldrb	r3, [r2, r3]
 8008722:	40d8      	lsrs	r0, r3
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <HAL_RCC_ClockConfig+0x158>)
 8008726:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <HAL_RCC_ClockConfig+0x15c>)
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	f7fe fd0e 	bl	800714c <HAL_InitTick>
  return HAL_OK;
 8008730:	2000      	movs	r0, #0
}
 8008732:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008734:	2001      	movs	r0, #1
}
 8008736:	4770      	bx	lr
      return HAL_ERROR;
 8008738:	2001      	movs	r0, #1
 800873a:	e7fa      	b.n	8008732 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800873c:	2001      	movs	r0, #1
 800873e:	e7f8      	b.n	8008732 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8008740:	2001      	movs	r0, #1
 8008742:	e7f6      	b.n	8008732 <HAL_RCC_ClockConfig+0x13a>
 8008744:	40023c00 	.word	0x40023c00
 8008748:	40023800 	.word	0x40023800
 800874c:	0800f3b0 	.word	0x0800f3b0
 8008750:	20000004 	.word	0x20000004
 8008754:	2000016c 	.word	0x2000016c

08008758 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8008758:	4b01      	ldr	r3, [pc, #4]	; (8008760 <HAL_RCC_GetHCLKFreq+0x8>)
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	20000004 	.word	0x20000004

08008764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008764:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008766:	f7ff fff7 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 800876a:	4b04      	ldr	r3, [pc, #16]	; (800877c <HAL_RCC_GetPCLK1Freq+0x18>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008772:	4a03      	ldr	r2, [pc, #12]	; (8008780 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008774:	5cd3      	ldrb	r3, [r2, r3]
}
 8008776:	40d8      	lsrs	r0, r3
 8008778:	bd08      	pop	{r3, pc}
 800877a:	bf00      	nop
 800877c:	40023800 	.word	0x40023800
 8008780:	0800f3c0 	.word	0x0800f3c0

08008784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008784:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008786:	f7ff ffe7 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 800878a:	4b04      	ldr	r3, [pc, #16]	; (800879c <HAL_RCC_GetPCLK2Freq+0x18>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008792:	4a03      	ldr	r2, [pc, #12]	; (80087a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008794:	5cd3      	ldrb	r3, [r2, r3]
}
 8008796:	40d8      	lsrs	r0, r3
 8008798:	bd08      	pop	{r3, pc}
 800879a:	bf00      	nop
 800879c:	40023800 	.word	0x40023800
 80087a0:	0800f3c0 	.word	0x0800f3c0

080087a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	4605      	mov	r5, r0
 80087ac:	4688      	mov	r8, r1
 80087ae:	4617      	mov	r7, r2
 80087b0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087b2:	f7fe fd17 	bl	80071e4 <HAL_GetTick>
 80087b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b8:	1a1b      	subs	r3, r3, r0
 80087ba:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80087be:	f7fe fd11 	bl	80071e4 <HAL_GetTick>
 80087c2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087c4:	4b2b      	ldr	r3, [pc, #172]	; (8008874 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80087cc:	fb09 f303 	mul.w	r3, r9, r3
 80087d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	689c      	ldr	r4, [r3, #8]
 80087d6:	ea38 0304 	bics.w	r3, r8, r4
 80087da:	bf0c      	ite	eq
 80087dc:	f04f 0c01 	moveq.w	ip, #1
 80087e0:	f04f 0c00 	movne.w	ip, #0
 80087e4:	45bc      	cmp	ip, r7
 80087e6:	d040      	beq.n	800886a <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80087ec:	d0f1      	beq.n	80087d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087ee:	f7fe fcf9 	bl	80071e4 <HAL_GetTick>
 80087f2:	eba0 000a 	sub.w	r0, r0, sl
 80087f6:	4548      	cmp	r0, r9
 80087f8:	d20a      	bcs.n	8008810 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	d007      	beq.n	8008810 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008800:	9a01      	ldr	r2, [sp, #4]
 8008802:	b102      	cbz	r2, 8008806 <SPI_WaitFlagStateUntilTimeout+0x62>
 8008804:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	3b01      	subs	r3, #1
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	4691      	mov	r9, r2
 800880e:	e7e0      	b.n	80087d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008810:	682a      	ldr	r2, [r5, #0]
 8008812:	6853      	ldr	r3, [r2, #4]
 8008814:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008818:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800881a:	686b      	ldr	r3, [r5, #4]
 800881c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008820:	d00b      	beq.n	800883a <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008822:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008828:	d014      	beq.n	8008854 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800882a:	2301      	movs	r3, #1
 800882c:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8008830:	2300      	movs	r3, #0
 8008832:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8008836:	2003      	movs	r0, #3
 8008838:	e018      	b.n	800886c <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800883a:	68ab      	ldr	r3, [r5, #8]
 800883c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008840:	d002      	beq.n	8008848 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008846:	d1ec      	bne.n	8008822 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8008848:	682a      	ldr	r2, [r5, #0]
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	e7e6      	b.n	8008822 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8008854:	682a      	ldr	r2, [r5, #0]
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	682a      	ldr	r2, [r5, #0]
 8008860:	6813      	ldr	r3, [r2, #0]
 8008862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e7df      	b.n	800882a <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 800886a:	2000      	movs	r0, #0
}
 800886c:	b002      	add	sp, #8
 800886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008872:	bf00      	nop
 8008874:	20000004 	.word	0x20000004

08008878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008878:	b510      	push	{r4, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <SPI_EndRxTxTransaction+0x60>)
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	4b16      	ldr	r3, [pc, #88]	; (80088dc <SPI_EndRxTxTransaction+0x64>)
 8008884:	fba3 3000 	umull	r3, r0, r3, r0
 8008888:	0d40      	lsrs	r0, r0, #21
 800888a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800888e:	fb03 f000 	mul.w	r0, r3, r0
 8008892:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008894:	6863      	ldr	r3, [r4, #4]
 8008896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800889a:	d00b      	beq.n	80088b4 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	b1bb      	cbz	r3, 80088d0 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088ae:	d1f5      	bne.n	800889c <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80088b0:	2000      	movs	r0, #0
 80088b2:	e00e      	b.n	80088d2 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088b4:	9200      	str	r2, [sp, #0]
 80088b6:	460b      	mov	r3, r1
 80088b8:	2200      	movs	r2, #0
 80088ba:	2180      	movs	r1, #128	; 0x80
 80088bc:	4620      	mov	r0, r4
 80088be:	f7ff ff71 	bl	80087a4 <SPI_WaitFlagStateUntilTimeout>
 80088c2:	b130      	cbz	r0, 80088d2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088c6:	f043 0320 	orr.w	r3, r3, #32
 80088ca:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80088cc:	2003      	movs	r0, #3
 80088ce:	e000      	b.n	80088d2 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80088d0:	2000      	movs	r0, #0
}
 80088d2:	b004      	add	sp, #16
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	20000004 	.word	0x20000004
 80088dc:	165e9f81 	.word	0x165e9f81

080088e0 <HAL_SPI_MspInit>:
}
 80088e0:	4770      	bx	lr

080088e2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d05a      	beq.n	800899c <HAL_SPI_Init+0xba>
{
 80088e6:	b510      	push	{r4, lr}
 80088e8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088ec:	b933      	cbnz	r3, 80088fc <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088ee:	6843      	ldr	r3, [r0, #4]
 80088f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088f4:	d005      	beq.n	8008902 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61c3      	str	r3, [r0, #28]
 80088fa:	e002      	b.n	8008902 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088fc:	2300      	movs	r3, #0
 80088fe:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008900:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008902:	2300      	movs	r3, #0
 8008904:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008906:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800890a:	2b00      	cmp	r3, #0
 800890c:	d040      	beq.n	8008990 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800890e:	2302      	movs	r3, #2
 8008910:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800891e:	6863      	ldr	r3, [r4, #4]
 8008920:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008924:	68a2      	ldr	r2, [r4, #8]
 8008926:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800892a:	4313      	orrs	r3, r2
 800892c:	68e2      	ldr	r2, [r4, #12]
 800892e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008932:	4313      	orrs	r3, r2
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	f002 0202 	and.w	r2, r2, #2
 800893a:	4313      	orrs	r3, r2
 800893c:	6962      	ldr	r2, [r4, #20]
 800893e:	f002 0201 	and.w	r2, r2, #1
 8008942:	4313      	orrs	r3, r2
 8008944:	69a2      	ldr	r2, [r4, #24]
 8008946:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800894a:	4313      	orrs	r3, r2
 800894c:	69e2      	ldr	r2, [r4, #28]
 800894e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008952:	4313      	orrs	r3, r2
 8008954:	6a22      	ldr	r2, [r4, #32]
 8008956:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800895a:	4313      	orrs	r3, r2
 800895c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800895e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008962:	6821      	ldr	r1, [r4, #0]
 8008964:	4313      	orrs	r3, r2
 8008966:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008968:	8b63      	ldrh	r3, [r4, #26]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008970:	f002 0210 	and.w	r2, r2, #16
 8008974:	6821      	ldr	r1, [r4, #0]
 8008976:	4313      	orrs	r3, r2
 8008978:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	69d3      	ldr	r3, [r2, #28]
 800897e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008982:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008984:	2000      	movs	r0, #0
 8008986:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008988:	2301      	movs	r3, #1
 800898a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800898e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008990:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff ffa3 	bl	80088e0 <HAL_SPI_MspInit>
 800899a:	e7b8      	b.n	800890e <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800899c:	2001      	movs	r0, #1
}
 800899e:	4770      	bx	lr

080089a0 <HAL_SPI_TransmitReceive>:
{
 80089a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089a4:	b083      	sub	sp, #12
 80089a6:	461f      	mov	r7, r3
 80089a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80089aa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	f000 8110 	beq.w	8008bd4 <HAL_SPI_TransmitReceive+0x234>
 80089b4:	4604      	mov	r4, r0
 80089b6:	4688      	mov	r8, r1
 80089b8:	4691      	mov	r9, r2
 80089ba:	2301      	movs	r3, #1
 80089bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80089c0:	f7fe fc10 	bl	80071e4 <HAL_GetTick>
 80089c4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80089c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80089ca:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80089cc:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d00a      	beq.n	80089e8 <HAL_SPI_TransmitReceive+0x48>
 80089d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80089d6:	f040 80e3 	bne.w	8008ba0 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089da:	68a2      	ldr	r2, [r4, #8]
 80089dc:	2a00      	cmp	r2, #0
 80089de:	f040 80e9 	bne.w	8008bb4 <HAL_SPI_TransmitReceive+0x214>
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	f040 80e8 	bne.w	8008bb8 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089e8:	f1b8 0f00 	cmp.w	r8, #0
 80089ec:	f000 80e6 	beq.w	8008bbc <HAL_SPI_TransmitReceive+0x21c>
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	f000 80e4 	beq.w	8008bc0 <HAL_SPI_TransmitReceive+0x220>
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	f000 80e3 	beq.w	8008bc4 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089fe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d002      	beq.n	8008a0e <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a08:	2305      	movs	r3, #5
 8008a0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a12:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a16:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a18:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a1a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a1e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a20:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8008a22:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a24:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008a2e:	d103      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a36:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a38:	68e3      	ldr	r3, [r4, #12]
 8008a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a3e:	d011      	beq.n	8008a64 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	b10b      	cbz	r3, 8008a48 <HAL_SPI_TransmitReceive+0xa8>
 8008a44:	2f01      	cmp	r7, #1
 8008a46:	d10b      	bne.n	8008a60 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	7812      	ldrb	r2, [r2, #0]
 8008a4e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a52:	3301      	adds	r3, #1
 8008a54:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8008a56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8008a60:	2701      	movs	r7, #1
 8008a62:	e06b      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	b10b      	cbz	r3, 8008a6c <HAL_SPI_TransmitReceive+0xcc>
 8008a68:	2f01      	cmp	r7, #1
 8008a6a:	d10b      	bne.n	8008a84 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	8812      	ldrh	r2, [r2, #0]
 8008a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a76:	3302      	adds	r3, #2
 8008a78:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8008a7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8008a84:	2701      	movs	r7, #1
 8008a86:	e01c      	b.n	8008ac2 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	f012 0f01 	tst.w	r2, #1
 8008a90:	d00e      	beq.n	8008ab0 <HAL_SPI_TransmitReceive+0x110>
 8008a92:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008a94:	b292      	uxth	r2, r2
 8008a96:	b15a      	cbz	r2, 8008ab0 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8008aa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008aae:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ab0:	f7fe fb98 	bl	80071e4 <HAL_GetTick>
 8008ab4:	1b80      	subs	r0, r0, r6
 8008ab6:	42a8      	cmp	r0, r5
 8008ab8:	d303      	bcc.n	8008ac2 <HAL_SPI_TransmitReceive+0x122>
 8008aba:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008abe:	f040 8083 	bne.w	8008bc8 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ac2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	b91b      	cbnz	r3, 8008ad0 <HAL_SPI_TransmitReceive+0x130>
 8008ac8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d053      	beq.n	8008b78 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	f012 0f02 	tst.w	r2, #2
 8008ad8:	d0d6      	beq.n	8008a88 <HAL_SPI_TransmitReceive+0xe8>
 8008ada:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008adc:	b292      	uxth	r2, r2
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	d0d2      	beq.n	8008a88 <HAL_SPI_TransmitReceive+0xe8>
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	d0d0      	beq.n	8008a88 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ae6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008ae8:	8812      	ldrh	r2, [r2, #0]
 8008aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008aee:	3302      	adds	r3, #2
 8008af0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8008af2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8008afc:	2700      	movs	r7, #0
 8008afe:	e7c3      	b.n	8008a88 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	f012 0f01 	tst.w	r2, #1
 8008b08:	d00e      	beq.n	8008b28 <HAL_SPI_TransmitReceive+0x188>
 8008b0a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008b0c:	b292      	uxth	r2, r2
 8008b0e:	b15a      	cbz	r2, 8008b28 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b18:	3301      	adds	r3, #1
 8008b1a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8008b1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b01      	subs	r3, #1
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008b26:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b28:	f7fe fb5c 	bl	80071e4 <HAL_GetTick>
 8008b2c:	1b83      	subs	r3, r0, r6
 8008b2e:	42ab      	cmp	r3, r5
 8008b30:	d302      	bcc.n	8008b38 <HAL_SPI_TransmitReceive+0x198>
 8008b32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008b36:	d149      	bne.n	8008bcc <HAL_SPI_TransmitReceive+0x22c>
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	d049      	beq.n	8008bd0 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	b913      	cbnz	r3, 8008b48 <HAL_SPI_TransmitReceive+0x1a8>
 8008b42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	b1bb      	cbz	r3, 8008b78 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	f012 0f02 	tst.w	r2, #2
 8008b50:	d0d6      	beq.n	8008b00 <HAL_SPI_TransmitReceive+0x160>
 8008b52:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008b54:	b292      	uxth	r2, r2
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	d0d2      	beq.n	8008b00 <HAL_SPI_TransmitReceive+0x160>
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	d0d0      	beq.n	8008b00 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008b60:	7812      	ldrb	r2, [r2, #0]
 8008b62:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8008b64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008b66:	3301      	adds	r3, #1
 8008b68:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8008b6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8008b74:	2700      	movs	r7, #0
 8008b76:	e7c3      	b.n	8008b00 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b78:	4632      	mov	r2, r6
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff fe7b 	bl	8008878 <SPI_EndRxTxTransaction>
 8008b82:	b948      	cbnz	r0, 8008b98 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b84:	68a3      	ldr	r3, [r4, #8]
 8008b86:	b963      	cbnz	r3, 8008ba2 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	9201      	str	r2, [sp, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	e004      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b98:	2320      	movs	r3, #32
 8008b9a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008b9c:	2001      	movs	r0, #1
    goto error;
 8008b9e:	e000      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8008ba0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008bae:	b003      	add	sp, #12
 8008bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8008bb4:	2002      	movs	r0, #2
 8008bb6:	e7f4      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
 8008bb8:	2002      	movs	r0, #2
 8008bba:	e7f2      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	e7f0      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	e7ee      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	e7ec      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8008bc8:	2003      	movs	r0, #3
 8008bca:	e7ea      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8008bcc:	2003      	movs	r0, #3
 8008bce:	e7e8      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
 8008bd0:	2003      	movs	r0, #3
 8008bd2:	e7e6      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8008bd4:	2002      	movs	r0, #2
 8008bd6:	e7ea      	b.n	8008bae <HAL_SPI_TransmitReceive+0x20e>

08008bd8 <HAL_SPI_GetState>:
  return hspi->State;
 8008bd8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8008bdc:	4770      	bx	lr

08008bde <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bde:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008be0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be2:	6a04      	ldr	r4, [r0, #32]
 8008be4:	f024 0401 	bic.w	r4, r4, #1
 8008be8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bea:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bec:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bf0:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bf4:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8008bf8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bfa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008bfc:	6203      	str	r3, [r0, #32]
}
 8008bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c04:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c06:	6a04      	ldr	r4, [r0, #32]
 8008c08:	f024 0410 	bic.w	r4, r4, #16
 8008c0c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c0e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8008c10:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c12:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c16:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c1e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c22:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008c24:	6203      	str	r3, [r0, #32]
}
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c2c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c32:	430b      	orrs	r3, r1
 8008c34:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c38:	6083      	str	r3, [r0, #8]
}
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008c3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d12f      	bne.n	8008ca6 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008c46:	2302      	movs	r3, #2
 8008c48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c4c:	6802      	ldr	r2, [r0, #0]
 8008c4e:	68d3      	ldr	r3, [r2, #12]
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c56:	6803      	ldr	r3, [r0, #0]
 8008c58:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <HAL_TIM_Base_Start_IT+0x74>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d018      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x54>
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c62:	d015      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x54>
 8008c64:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d011      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x54>
 8008c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00d      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x54>
 8008c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d009      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x54>
 8008c7c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d005      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c96:	2a06      	cmp	r2, #6
 8008c98:	d007      	beq.n	8008caa <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	f042 0201 	orr.w	r2, r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	4770      	bx	lr
    return HAL_ERROR;
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	4770      	bx	lr
  return HAL_OK;
 8008caa:	2000      	movs	r0, #0
}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40010000 	.word	0x40010000

08008cb4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008cb4:	6802      	ldr	r2, [r0, #0]
 8008cb6:	68d3      	ldr	r3, [r2, #12]
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8008cbe:	6803      	ldr	r3, [r0, #0]
 8008cc0:	6a19      	ldr	r1, [r3, #32]
 8008cc2:	f241 1211 	movw	r2, #4369	; 0x1111
 8008cc6:	4211      	tst	r1, r2
 8008cc8:	d108      	bne.n	8008cdc <HAL_TIM_Base_Stop_IT+0x28>
 8008cca:	6a19      	ldr	r1, [r3, #32]
 8008ccc:	f240 4244 	movw	r2, #1092	; 0x444
 8008cd0:	4211      	tst	r1, r2
 8008cd2:	d103      	bne.n	8008cdc <HAL_TIM_Base_Stop_IT+0x28>
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	f022 0201 	bic.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_TIM_PeriodElapsedCallback>:
}
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008ce8:	4770      	bx	lr

08008cea <HAL_TIM_IC_CaptureCallback>:
}
 8008cea:	4770      	bx	lr

08008cec <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008cec:	4770      	bx	lr

08008cee <HAL_TIM_TriggerCallback>:
}
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_IRQHandler>:
{
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cf4:	6803      	ldr	r3, [r0, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	f012 0f02 	tst.w	r2, #2
 8008cfc:	d011      	beq.n	8008d22 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	f012 0f02 	tst.w	r2, #2
 8008d04:	d00d      	beq.n	8008d22 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d06:	f06f 0202 	mvn.w	r2, #2
 8008d0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d10:	6803      	ldr	r3, [r0, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	f013 0f03 	tst.w	r3, #3
 8008d18:	d070      	beq.n	8008dfc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8008d1a:	f7ff ffe6 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	f012 0f04 	tst.w	r2, #4
 8008d2a:	d012      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	f012 0f04 	tst.w	r2, #4
 8008d32:	d00e      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d34:	f06f 0204 	mvn.w	r2, #4
 8008d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008d46:	d05f      	beq.n	8008e08 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f7ff ffce 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	691a      	ldr	r2, [r3, #16]
 8008d56:	f012 0f08 	tst.w	r2, #8
 8008d5a:	d012      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	f012 0f08 	tst.w	r2, #8
 8008d62:	d00e      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d64:	f06f 0208 	mvn.w	r2, #8
 8008d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6a:	2304      	movs	r3, #4
 8008d6c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f013 0f03 	tst.w	r3, #3
 8008d76:	d04e      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f7ff ffb6 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	f012 0f10 	tst.w	r2, #16
 8008d8a:	d012      	beq.n	8008db2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	f012 0f10 	tst.w	r2, #16
 8008d92:	d00e      	beq.n	8008db2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d94:	f06f 0210 	mvn.w	r2, #16
 8008d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d9a:	2308      	movs	r3, #8
 8008d9c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008da6:	d03d      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7ff ff9e 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dae:	2300      	movs	r3, #0
 8008db0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	691a      	ldr	r2, [r3, #16]
 8008db6:	f012 0f01 	tst.w	r2, #1
 8008dba:	d003      	beq.n	8008dc4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	f012 0f01 	tst.w	r2, #1
 8008dc2:	d136      	bne.n	8008e32 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008dcc:	d003      	beq.n	8008dd6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008dd4:	d134      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	691a      	ldr	r2, [r3, #16]
 8008dda:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008dde:	d003      	beq.n	8008de8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008de6:	d132      	bne.n	8008e4e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	f012 0f20 	tst.w	r2, #32
 8008df0:	d003      	beq.n	8008dfa <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	f012 0f20 	tst.w	r2, #32
 8008df8:	d130      	bne.n	8008e5c <HAL_TIM_IRQHandler+0x16c>
}
 8008dfa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dfc:	f7ff ff74 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff ff73 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
 8008e06:	e78a      	b.n	8008d1e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff ff6d 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f7ff ff6c 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
 8008e14:	e79b      	b.n	8008d4e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff ff66 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7ff ff65 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
 8008e22:	e7ac      	b.n	8008d7e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e24:	4620      	mov	r0, r4
 8008e26:	f7ff ff5f 	bl	8008ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f7ff ff5e 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
 8008e30:	e7bd      	b.n	8008dae <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e32:	f06f 0201 	mvn.w	r2, #1
 8008e36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f7ff ff54 	bl	8008ce6 <HAL_TIM_PeriodElapsedCallback>
 8008e3e:	e7c1      	b.n	8008dc4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f955 	bl	80090f6 <HAL_TIMEx_BreakCallback>
 8008e4c:	e7c3      	b.n	8008dd6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e52:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff ff4a 	bl	8008cee <HAL_TIM_TriggerCallback>
 8008e5a:	e7c5      	b.n	8008de8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e5c:	f06f 0220 	mvn.w	r2, #32
 8008e60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 f946 	bl	80090f4 <HAL_TIMEx_CommutCallback>
}
 8008e68:	e7c7      	b.n	8008dfa <HAL_TIM_IRQHandler+0x10a>
	...

08008e6c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008e6c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e6e:	4a25      	ldr	r2, [pc, #148]	; (8008f04 <TIM_Base_SetConfig+0x98>)
 8008e70:	4290      	cmp	r0, r2
 8008e72:	d00e      	beq.n	8008e92 <TIM_Base_SetConfig+0x26>
 8008e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008e78:	d00b      	beq.n	8008e92 <TIM_Base_SetConfig+0x26>
 8008e7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008e7e:	4290      	cmp	r0, r2
 8008e80:	d007      	beq.n	8008e92 <TIM_Base_SetConfig+0x26>
 8008e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e86:	4290      	cmp	r0, r2
 8008e88:	d003      	beq.n	8008e92 <TIM_Base_SetConfig+0x26>
 8008e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e8e:	4290      	cmp	r0, r2
 8008e90:	d103      	bne.n	8008e9a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008e96:	684a      	ldr	r2, [r1, #4]
 8008e98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <TIM_Base_SetConfig+0x98>)
 8008e9c:	4290      	cmp	r0, r2
 8008e9e:	d01a      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008ea0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008ea4:	d017      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008ea6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008eaa:	4290      	cmp	r0, r2
 8008eac:	d013      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eb2:	4290      	cmp	r0, r2
 8008eb4:	d00f      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eba:	4290      	cmp	r0, r2
 8008ebc:	d00b      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008ebe:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008ec2:	4290      	cmp	r0, r2
 8008ec4:	d007      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eca:	4290      	cmp	r0, r2
 8008ecc:	d003      	beq.n	8008ed6 <TIM_Base_SetConfig+0x6a>
 8008ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ed2:	4290      	cmp	r0, r2
 8008ed4:	d103      	bne.n	8008ede <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eda:	68ca      	ldr	r2, [r1, #12]
 8008edc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee2:	694a      	ldr	r2, [r1, #20]
 8008ee4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ee6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ee8:	688b      	ldr	r3, [r1, #8]
 8008eea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008eec:	680b      	ldr	r3, [r1, #0]
 8008eee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ef0:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <TIM_Base_SetConfig+0x98>)
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	d002      	beq.n	8008efc <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	6143      	str	r3, [r0, #20]
}
 8008efa:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8008efc:	690b      	ldr	r3, [r1, #16]
 8008efe:	6303      	str	r3, [r0, #48]	; 0x30
 8008f00:	e7f9      	b.n	8008ef6 <TIM_Base_SetConfig+0x8a>
 8008f02:	bf00      	nop
 8008f04:	40010000 	.word	0x40010000

08008f08 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008f08:	b340      	cbz	r0, 8008f5c <HAL_TIM_Base_Init+0x54>
{
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008f0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008f12:	b1f3      	cbz	r3, 8008f52 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008f14:	2302      	movs	r3, #2
 8008f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008f20:	f7ff ffa4 	bl	8008e6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008f2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008f32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008f36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008f4e:	2000      	movs	r0, #0
}
 8008f50:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008f52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008f56:	f7f9 f82d 	bl	8001fb4 <HAL_TIM_Base_MspInit>
 8008f5a:	e7db      	b.n	8008f14 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008f5c:	2001      	movs	r0, #1
}
 8008f5e:	4770      	bx	lr

08008f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f60:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f62:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f64:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f68:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f72:	6082      	str	r2, [r0, #8]
}
 8008f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008f7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d078      	beq.n	8009074 <HAL_TIM_ConfigClockSource+0xfa>
{
 8008f82:	b510      	push	{r4, lr}
 8008f84:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008f86:	2301      	movs	r3, #1
 8008f88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008f92:	6802      	ldr	r2, [r0, #0]
 8008f94:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8008f9e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008fa0:	680b      	ldr	r3, [r1, #0]
 8008fa2:	2b60      	cmp	r3, #96	; 0x60
 8008fa4:	d04c      	beq.n	8009040 <HAL_TIM_ConfigClockSource+0xc6>
 8008fa6:	d829      	bhi.n	8008ffc <HAL_TIM_ConfigClockSource+0x82>
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d054      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0xdc>
 8008fac:	d90c      	bls.n	8008fc8 <HAL_TIM_ConfigClockSource+0x4e>
 8008fae:	2b50      	cmp	r3, #80	; 0x50
 8008fb0:	d122      	bne.n	8008ff8 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fb2:	68ca      	ldr	r2, [r1, #12]
 8008fb4:	6849      	ldr	r1, [r1, #4]
 8008fb6:	6800      	ldr	r0, [r0, #0]
 8008fb8:	f7ff fe11 	bl	8008bde <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fbc:	2150      	movs	r1, #80	; 0x50
 8008fbe:	6820      	ldr	r0, [r4, #0]
 8008fc0:	f7ff fe34 	bl	8008c2c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008fc4:	2000      	movs	r0, #0
      break;
 8008fc6:	e005      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d00d      	beq.n	8008fe8 <HAL_TIM_ConfigClockSource+0x6e>
 8008fcc:	d909      	bls.n	8008fe2 <HAL_TIM_ConfigClockSource+0x68>
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d00a      	beq.n	8008fe8 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8008fd2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008fe0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8008fe2:	b10b      	cbz	r3, 8008fe8 <HAL_TIM_ConfigClockSource+0x6e>
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d105      	bne.n	8008ff4 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	f7ff fe1e 	bl	8008c2c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008ff0:	2000      	movs	r0, #0
      break;
 8008ff2:	e7ef      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	e7ed      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	e7eb      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009000:	d034      	beq.n	800906c <HAL_TIM_ConfigClockSource+0xf2>
 8009002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009006:	d10c      	bne.n	8009022 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8009008:	68cb      	ldr	r3, [r1, #12]
 800900a:	684a      	ldr	r2, [r1, #4]
 800900c:	6889      	ldr	r1, [r1, #8]
 800900e:	6800      	ldr	r0, [r0, #0]
 8009010:	f7ff ffa6 	bl	8008f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	6893      	ldr	r3, [r2, #8]
 8009018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800901c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800901e:	2000      	movs	r0, #0
      break;
 8009020:	e7d8      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8009022:	2b70      	cmp	r3, #112	; 0x70
 8009024:	d124      	bne.n	8009070 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8009026:	68cb      	ldr	r3, [r1, #12]
 8009028:	684a      	ldr	r2, [r1, #4]
 800902a:	6889      	ldr	r1, [r1, #8]
 800902c:	6800      	ldr	r0, [r0, #0]
 800902e:	f7ff ff97 	bl	8008f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009036:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800903a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800903c:	2000      	movs	r0, #0
      break;
 800903e:	e7c9      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009040:	68ca      	ldr	r2, [r1, #12]
 8009042:	6849      	ldr	r1, [r1, #4]
 8009044:	6800      	ldr	r0, [r0, #0]
 8009046:	f7ff fddd 	bl	8008c04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800904a:	2160      	movs	r1, #96	; 0x60
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	f7ff fded 	bl	8008c2c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009052:	2000      	movs	r0, #0
      break;
 8009054:	e7be      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009056:	68ca      	ldr	r2, [r1, #12]
 8009058:	6849      	ldr	r1, [r1, #4]
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	f7ff fdbf 	bl	8008bde <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009060:	2140      	movs	r1, #64	; 0x40
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	f7ff fde2 	bl	8008c2c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009068:	2000      	movs	r0, #0
      break;
 800906a:	e7b3      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800906c:	2000      	movs	r0, #0
 800906e:	e7b1      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8009070:	2001      	movs	r0, #1
 8009072:	e7af      	b.n	8008fd4 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8009074:	2002      	movs	r0, #2
}
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009078:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800907c:	2b01      	cmp	r3, #1
 800907e:	d035      	beq.n	80090ec <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8009080:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8009082:	2301      	movs	r3, #1
 8009084:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009088:	2302      	movs	r3, #2
 800908a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800908e:	6803      	ldr	r3, [r0, #0]
 8009090:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009092:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009094:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009098:	680a      	ldr	r2, [r1, #0]
 800909a:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800909e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a0:	6803      	ldr	r3, [r0, #0]
 80090a2:	4a13      	ldr	r2, [pc, #76]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d012      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ac:	d00f      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d00b      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d007      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d003      	beq.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090c6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d104      	bne.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ce:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090d2:	684a      	ldr	r2, [r1, #4]
 80090d4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090d6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d8:	2301      	movs	r3, #1
 80090da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090de:	2300      	movs	r3, #0
 80090e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80090e4:	4618      	mov	r0, r3
}
 80090e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80090ec:	2002      	movs	r0, #2
}
 80090ee:	4770      	bx	lr
 80090f0:	40010000 	.word	0x40010000

080090f4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090f4:	4770      	bx	lr

080090f6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090f6:	4770      	bx	lr

080090f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	6913      	ldr	r3, [r2, #16]
 8009100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009104:	68c1      	ldr	r1, [r0, #12]
 8009106:	430b      	orrs	r3, r1
 8009108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800910a:	6883      	ldr	r3, [r0, #8]
 800910c:	6902      	ldr	r2, [r0, #16]
 800910e:	4313      	orrs	r3, r2
 8009110:	6942      	ldr	r2, [r0, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	69c2      	ldr	r2, [r0, #28]
 8009116:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8009118:	6801      	ldr	r1, [r0, #0]
 800911a:	68cb      	ldr	r3, [r1, #12]
 800911c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009120:	f023 030c 	bic.w	r3, r3, #12
 8009124:	4313      	orrs	r3, r2
 8009126:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	6953      	ldr	r3, [r2, #20]
 800912c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009130:	6981      	ldr	r1, [r0, #24]
 8009132:	430b      	orrs	r3, r1
 8009134:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009136:	6803      	ldr	r3, [r0, #0]
 8009138:	4a31      	ldr	r2, [pc, #196]	; (8009200 <UART_SetConfig+0x108>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d006      	beq.n	800914c <UART_SetConfig+0x54>
 800913e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009142:	4293      	cmp	r3, r2
 8009144:	d002      	beq.n	800914c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009146:	f7ff fb0d 	bl	8008764 <HAL_RCC_GetPCLK1Freq>
 800914a:	e001      	b.n	8009150 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800914c:	f7ff fb1a 	bl	8008784 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009150:	69e3      	ldr	r3, [r4, #28]
 8009152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009156:	d029      	beq.n	80091ac <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009158:	2100      	movs	r1, #0
 800915a:	1803      	adds	r3, r0, r0
 800915c:	4149      	adcs	r1, r1
 800915e:	181b      	adds	r3, r3, r0
 8009160:	f141 0100 	adc.w	r1, r1, #0
 8009164:	00c9      	lsls	r1, r1, #3
 8009166:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	1818      	adds	r0, r3, r0
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009174:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8009178:	f141 0100 	adc.w	r1, r1, #0
 800917c:	f7f7 fd1c 	bl	8000bb8 <__aeabi_uldivmod>
 8009180:	4d20      	ldr	r5, [pc, #128]	; (8009204 <UART_SetConfig+0x10c>)
 8009182:	fba5 3200 	umull	r3, r2, r5, r0
 8009186:	0951      	lsrs	r1, r2, #5
 8009188:	2364      	movs	r3, #100	; 0x64
 800918a:	fb03 0311 	mls	r3, r3, r1, r0
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	3332      	adds	r3, #50	; 0x32
 8009192:	fba5 2303 	umull	r2, r3, r5, r3
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800919c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	6821      	ldr	r1, [r4, #0]
 80091a6:	4413      	add	r3, r2
 80091a8:	608b      	str	r3, [r1, #8]
  }
}
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091ac:	2300      	movs	r3, #0
 80091ae:	1802      	adds	r2, r0, r0
 80091b0:	eb43 0103 	adc.w	r1, r3, r3
 80091b4:	1812      	adds	r2, r2, r0
 80091b6:	f141 0100 	adc.w	r1, r1, #0
 80091ba:	00c9      	lsls	r1, r1, #3
 80091bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091c0:	00d2      	lsls	r2, r2, #3
 80091c2:	1810      	adds	r0, r2, r0
 80091c4:	f141 0100 	adc.w	r1, r1, #0
 80091c8:	6862      	ldr	r2, [r4, #4]
 80091ca:	1892      	adds	r2, r2, r2
 80091cc:	415b      	adcs	r3, r3
 80091ce:	f7f7 fcf3 	bl	8000bb8 <__aeabi_uldivmod>
 80091d2:	4d0c      	ldr	r5, [pc, #48]	; (8009204 <UART_SetConfig+0x10c>)
 80091d4:	fba5 3200 	umull	r3, r2, r5, r0
 80091d8:	0951      	lsrs	r1, r2, #5
 80091da:	2364      	movs	r3, #100	; 0x64
 80091dc:	fb03 0311 	mls	r3, r3, r1, r0
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	3332      	adds	r3, #50	; 0x32
 80091e4:	fba5 2303 	umull	r2, r3, r5, r3
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	005a      	lsls	r2, r3, #1
 80091ec:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80091f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80091f4:	f003 0307 	and.w	r3, r3, #7
 80091f8:	6821      	ldr	r1, [r4, #0]
 80091fa:	4413      	add	r3, r2
 80091fc:	608b      	str	r3, [r1, #8]
 80091fe:	e7d4      	b.n	80091aa <UART_SetConfig+0xb2>
 8009200:	40011000 	.word	0x40011000
 8009204:	51eb851f 	.word	0x51eb851f

08009208 <UART_WaitOnFlagUntilTimeout>:
{
 8009208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800920c:	4605      	mov	r5, r0
 800920e:	460f      	mov	r7, r1
 8009210:	4616      	mov	r6, r2
 8009212:	4699      	mov	r9, r3
 8009214:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009218:	682c      	ldr	r4, [r5, #0]
 800921a:	6824      	ldr	r4, [r4, #0]
 800921c:	ea37 0304 	bics.w	r3, r7, r4
 8009220:	bf0c      	ite	eq
 8009222:	f04f 0c01 	moveq.w	ip, #1
 8009226:	f04f 0c00 	movne.w	ip, #0
 800922a:	45b4      	cmp	ip, r6
 800922c:	d12d      	bne.n	800928a <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800922e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009232:	d0f1      	beq.n	8009218 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009234:	f1b8 0f00 	cmp.w	r8, #0
 8009238:	d005      	beq.n	8009246 <UART_WaitOnFlagUntilTimeout+0x3e>
 800923a:	f7fd ffd3 	bl	80071e4 <HAL_GetTick>
 800923e:	eba0 0009 	sub.w	r0, r0, r9
 8009242:	4540      	cmp	r0, r8
 8009244:	d9e8      	bls.n	8009218 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009246:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	f102 030c 	add.w	r3, r2, #12
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	320c      	adds	r2, #12
 8009256:	e842 3100 	strex	r1, r3, [r2]
 800925a:	2900      	cmp	r1, #0
 800925c:	d1f3      	bne.n	8009246 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800925e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	f102 0314 	add.w	r3, r2, #20
 8009264:	e853 3f00 	ldrex	r3, [r3]
 8009268:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	3214      	adds	r2, #20
 800926e:	e842 3100 	strex	r1, r3, [r2]
 8009272:	2900      	cmp	r1, #0
 8009274:	d1f3      	bne.n	800925e <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 8009276:	2320      	movs	r3, #32
 8009278:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800927c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8009280:	2300      	movs	r3, #0
 8009282:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8009286:	2003      	movs	r0, #3
 8009288:	e000      	b.n	800928c <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 800928a:	2000      	movs	r0, #0
}
 800928c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009290 <HAL_UART_MspInit>:
}
 8009290:	4770      	bx	lr

08009292 <HAL_UART_Init>:
  if (huart == NULL)
 8009292:	b358      	cbz	r0, 80092ec <HAL_UART_Init+0x5a>
{
 8009294:	b510      	push	{r4, lr}
 8009296:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009298:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800929c:	b30b      	cbz	r3, 80092e2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800929e:	2324      	movs	r3, #36	; 0x24
 80092a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	68d3      	ldr	r3, [r2, #12]
 80092a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7ff ff22 	bl	80090f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	6913      	ldr	r3, [r2, #16]
 80092b8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80092bc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	6953      	ldr	r3, [r2, #20]
 80092c2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80092c6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80092c8:	6822      	ldr	r2, [r4, #0]
 80092ca:	68d3      	ldr	r3, [r2, #12]
 80092cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80092d0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d2:	2000      	movs	r0, #0
 80092d4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092d6:	2320      	movs	r3, #32
 80092d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80092e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80092e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80092e6:	f7ff ffd3 	bl	8009290 <HAL_UART_MspInit>
 80092ea:	e7d8      	b.n	800929e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80092ec:	2001      	movs	r0, #1
}
 80092ee:	4770      	bx	lr

080092f0 <HAL_UART_Transmit>:
{
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80092f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b20      	cmp	r3, #32
 8009300:	d154      	bne.n	80093ac <HAL_UART_Transmit+0xbc>
 8009302:	4604      	mov	r4, r0
 8009304:	460d      	mov	r5, r1
 8009306:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009308:	2900      	cmp	r1, #0
 800930a:	d053      	beq.n	80093b4 <HAL_UART_Transmit+0xc4>
 800930c:	2a00      	cmp	r2, #0
 800930e:	d053      	beq.n	80093b8 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8009310:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d051      	beq.n	80093bc <HAL_UART_Transmit+0xcc>
 8009318:	2301      	movs	r3, #1
 800931a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931e:	2300      	movs	r3, #0
 8009320:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009322:	2321      	movs	r3, #33	; 0x21
 8009324:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8009328:	f7fd ff5c 	bl	80071e4 <HAL_GetTick>
 800932c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800932e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8009332:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933c:	d005      	beq.n	800934a <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800933e:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8009342:	2300      	movs	r3, #0
 8009344:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8009348:	e012      	b.n	8009370 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	b113      	cbz	r3, 8009354 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800934e:	f04f 0800 	mov.w	r8, #0
 8009352:	e7f6      	b.n	8009342 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8009354:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009356:	2500      	movs	r5, #0
 8009358:	e7f3      	b.n	8009342 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800935a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800935e:	6822      	ldr	r2, [r4, #0]
 8009360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009364:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009366:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8009368:	b292      	uxth	r2, r2
 800936a:	3a01      	subs	r2, #1
 800936c:	b292      	uxth	r2, r2
 800936e:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009370:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009372:	b29b      	uxth	r3, r3
 8009374:	b173      	cbz	r3, 8009394 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009376:	9600      	str	r6, [sp, #0]
 8009378:	463b      	mov	r3, r7
 800937a:	2200      	movs	r2, #0
 800937c:	2180      	movs	r1, #128	; 0x80
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff ff42 	bl	8009208 <UART_WaitOnFlagUntilTimeout>
 8009384:	b9e0      	cbnz	r0, 80093c0 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8009386:	2d00      	cmp	r5, #0
 8009388:	d0e7      	beq.n	800935a <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800938a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009392:	e7e8      	b.n	8009366 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009394:	9600      	str	r6, [sp, #0]
 8009396:	463b      	mov	r3, r7
 8009398:	2200      	movs	r2, #0
 800939a:	2140      	movs	r1, #64	; 0x40
 800939c:	4620      	mov	r0, r4
 800939e:	f7ff ff33 	bl	8009208 <UART_WaitOnFlagUntilTimeout>
 80093a2:	b978      	cbnz	r0, 80093c4 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80093a4:	2320      	movs	r3, #32
 80093a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80093aa:	e000      	b.n	80093ae <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80093ac:	2002      	movs	r0, #2
}
 80093ae:	b002      	add	sp, #8
 80093b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80093b4:	2001      	movs	r0, #1
 80093b6:	e7fa      	b.n	80093ae <HAL_UART_Transmit+0xbe>
 80093b8:	2001      	movs	r0, #1
 80093ba:	e7f8      	b.n	80093ae <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80093bc:	2002      	movs	r0, #2
 80093be:	e7f6      	b.n	80093ae <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80093c0:	2003      	movs	r0, #3
 80093c2:	e7f4      	b.n	80093ae <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80093c4:	2003      	movs	r0, #3
 80093c6:	e7f2      	b.n	80093ae <HAL_UART_Transmit+0xbe>

080093c8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80093c8:	b510      	push	{r4, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80093ce:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 80093d2:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 80093d6:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80093da:	2100      	movs	r1, #0
 80093dc:	9101      	str	r1, [sp, #4]
 80093de:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093e2:	9104      	str	r1, [sp, #16]
 80093e4:	9105      	str	r1, [sp, #20]
 80093e6:	9106      	str	r1, [sp, #24]
 80093e8:	9107      	str	r1, [sp, #28]
 80093ea:	9108      	str	r1, [sp, #32]
 80093ec:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 80093ee:	233f      	movs	r3, #63	; 0x3f
 80093f0:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 80093f4:	238a      	movs	r3, #138	; 0x8a
 80093f6:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80093fe:	2303      	movs	r3, #3
 8009400:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 8009402:	ab01      	add	r3, sp, #4
 8009404:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8009406:	2307      	movs	r3, #7
 8009408:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800940a:	a804      	add	r0, sp, #16
 800940c:	f000 fc94 	bl	8009d38 <hci_send_req>
 8009410:	2800      	cmp	r0, #0
 8009412:	db0f      	blt.n	8009434 <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8009414:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009418:	b950      	cbnz	r0, 8009430 <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800941a:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 800941e:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009420:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 8009424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009426:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009428:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 800942c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800942e:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8009430:	b00a      	add	sp, #40	; 0x28
 8009432:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8009434:	20ff      	movs	r0, #255	; 0xff
 8009436:	e7fb      	b.n	8009430 <aci_gap_init_IDB05A1+0x68>

08009438 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	460e      	mov	r6, r1
 800943e:	4615      	mov	r5, r2
 8009440:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009442:	f88d 000c 	strb.w	r0, [sp, #12]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009446:	2100      	movs	r1, #0
 8009448:	9101      	str	r1, [sp, #4]
 800944a:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800944e:	9104      	str	r1, [sp, #16]
 8009450:	9105      	str	r1, [sp, #20]
 8009452:	9106      	str	r1, [sp, #24]
 8009454:	9107      	str	r1, [sp, #28]
 8009456:	9108      	str	r1, [sp, #32]
 8009458:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 800945a:	233f      	movs	r3, #63	; 0x3f
 800945c:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8009460:	238a      	movs	r3, #138	; 0x8a
 8009462:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8009466:	ab03      	add	r3, sp, #12
 8009468:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800946a:	2301      	movs	r3, #1
 800946c:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 800946e:	ab01      	add	r3, sp, #4
 8009470:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8009472:	2307      	movs	r3, #7
 8009474:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009476:	a804      	add	r0, sp, #16
 8009478:	f000 fc5e 	bl	8009d38 <hci_send_req>
 800947c:	2800      	cmp	r0, #0
 800947e:	db0d      	blt.n	800949c <aci_gap_init_IDB04A1+0x64>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8009480:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009484:	b940      	cbnz	r0, 8009498 <aci_gap_init_IDB04A1+0x60>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8009486:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 800948a:	8033      	strh	r3, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800948c:	f8bd 3007 	ldrh.w	r3, [sp, #7]
 8009490:	802b      	strh	r3, [r5, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009492:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8009496:	8023      	strh	r3, [r4, #0]
  
  return 0;
}
 8009498:	b00a      	add	sp, #40	; 0x28
 800949a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800949c:	20ff      	movs	r0, #255	; 0xff
 800949e:	e7fb      	b.n	8009498 <aci_gap_init_IDB04A1+0x60>

080094a0 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	b092      	sub	sp, #72	; 0x48
 80094a4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80094a8:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80094ac:	192e      	adds	r6, r5, r4
 80094ae:	360e      	adds	r6, #14
 80094b0:	2e28      	cmp	r6, #40	; 0x28
 80094b2:	d851      	bhi.n	8009558 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 80094b4:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80094b8:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80094bc:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 80094c0:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 80094c4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80094c8:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 80094cc:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80094d0:	ae01      	add	r6, sp, #4
 80094d2:	462a      	mov	r2, r5
 80094d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094d6:	a803      	add	r0, sp, #12
 80094d8:	f002 f8f3 	bl	800b6c2 <memcpy>
  indx +=  LocalNameLen;
 80094dc:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 80094e0:	aa12      	add	r2, sp, #72	; 0x48
 80094e2:	fa52 f383 	uxtab	r3, r2, r3
 80094e6:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 80094ea:	3509      	adds	r5, #9
 80094ec:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80094ee:	4622      	mov	r2, r4
 80094f0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094f2:	1970      	adds	r0, r6, r5
 80094f4:	f002 f8e5 	bl	800b6c2 <memcpy>
  indx +=  ServiceUUIDLen;  
 80094f8:	442c      	add	r4, r5
 80094fa:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80094fc:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8009500:	446b      	add	r3, sp
 8009502:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009506:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 800950a:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800950c:	aa12      	add	r2, sp, #72	; 0x48
 800950e:	fa52 f383 	uxtab	r3, r2, r3
 8009512:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8009516:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 800951a:	3404      	adds	r4, #4
 800951c:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800951e:	2100      	movs	r1, #0
 8009520:	910c      	str	r1, [sp, #48]	; 0x30
 8009522:	910d      	str	r1, [sp, #52]	; 0x34
 8009524:	910e      	str	r1, [sp, #56]	; 0x38
 8009526:	910f      	str	r1, [sp, #60]	; 0x3c
 8009528:	9110      	str	r1, [sp, #64]	; 0x40
 800952a:	9111      	str	r1, [sp, #68]	; 0x44
  rq.ogf = OGF_VENDOR_CMD;
 800952c:	233f      	movs	r3, #63	; 0x3f
 800952e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009532:	2383      	movs	r3, #131	; 0x83
 8009534:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 8009538:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 800953a:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 800953c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8009540:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 8009542:	2301      	movs	r3, #1
 8009544:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8009546:	a80c      	add	r0, sp, #48	; 0x30
 8009548:	f000 fbf6 	bl	8009d38 <hci_send_req>
 800954c:	2800      	cmp	r0, #0
 800954e:	db05      	blt.n	800955c <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009550:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 8009554:	b012      	add	sp, #72	; 0x48
 8009556:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009558:	2042      	movs	r0, #66	; 0x42
 800955a:	e7fb      	b.n	8009554 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 800955c:	20ff      	movs	r0, #255	; 0xff
 800955e:	e7f9      	b.n	8009554 <aci_gap_set_discoverable+0xb4>

08009560 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009560:	b500      	push	{lr}
 8009562:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009564:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 8009568:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800956c:	b161      	cbz	r1, 8009588 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800956e:	f8d2 c000 	ldr.w	ip, [r2]
 8009572:	6850      	ldr	r0, [r2, #4]
 8009574:	6891      	ldr	r1, [r2, #8]
 8009576:	68d2      	ldr	r2, [r2, #12]
 8009578:	f8cd c006 	str.w	ip, [sp, #6]
 800957c:	f8cd 000a 	str.w	r0, [sp, #10]
 8009580:	f8cd 100e 	str.w	r1, [sp, #14]
 8009584:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009588:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 800958c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8009590:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 8009594:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8009598:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 800959c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800959e:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 80095a2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80095a6:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095aa:	2100      	movs	r1, #0
 80095ac:	9108      	str	r1, [sp, #32]
 80095ae:	9109      	str	r1, [sp, #36]	; 0x24
 80095b0:	910a      	str	r1, [sp, #40]	; 0x28
 80095b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80095b4:	910c      	str	r1, [sp, #48]	; 0x30
 80095b6:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 80095b8:	233f      	movs	r3, #63	; 0x3f
 80095ba:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80095be:	2386      	movs	r3, #134	; 0x86
 80095c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 80095c4:	ab01      	add	r3, sp, #4
 80095c6:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 80095c8:	231a      	movs	r3, #26
 80095ca:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 80095cc:	f10d 0303 	add.w	r3, sp, #3
 80095d0:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 80095d2:	2301      	movs	r3, #1
 80095d4:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 80095d6:	a808      	add	r0, sp, #32
 80095d8:	f000 fbae 	bl	8009d38 <hci_send_req>
 80095dc:	2800      	cmp	r0, #0
 80095de:	db04      	blt.n	80095ea <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80095e0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 80095e4:	b00f      	add	sp, #60	; 0x3c
 80095e6:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 80095ea:	20ff      	movs	r0, #255	; 0xff
 80095ec:	e7fa      	b.n	80095e4 <aci_gap_set_auth_requirement+0x84>

080095ee <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80095ee:	b500      	push	{lr}
 80095f0:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 80095f2:	f8ad 0008 	strh.w	r0, [sp, #8]
  cp.scanWindow = htobs(scanWindow);
 80095f6:	f8ad 100a 	strh.w	r1, [sp, #10]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 80095fa:	f88d 200c 	strb.w	r2, [sp, #12]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	f8cd 200d 	str.w	r2, [sp, #13]
 8009604:	889b      	ldrh	r3, [r3, #4]
 8009606:	f8ad 3011 	strh.w	r3, [sp, #17]
  cp.own_bdaddr_type = own_bdaddr_type;
 800960a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800960e:	f88d 3013 	strb.w	r3, [sp, #19]
  cp.conn_min_interval = htobs(conn_min_interval);
 8009612:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8009616:	f8ad 3014 	strh.w	r3, [sp, #20]
  cp.conn_max_interval = htobs(conn_max_interval);
 800961a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800961e:	f8ad 3016 	strh.w	r3, [sp, #22]
  cp.conn_latency = htobs(conn_latency);
 8009622:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8009626:	f8ad 3018 	strh.w	r3, [sp, #24]
  cp.supervision_timeout = htobs(supervision_timeout);
 800962a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800962e:	f8ad 301a 	strh.w	r3, [sp, #26]
  cp.min_conn_length = htobs(min_conn_length);
 8009632:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8009636:	f8ad 301c 	strh.w	r3, [sp, #28]
  cp.max_conn_length = htobs(max_conn_length);
 800963a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800963e:	f8ad 301e 	strh.w	r3, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009642:	2100      	movs	r1, #0
 8009644:	9108      	str	r1, [sp, #32]
 8009646:	9109      	str	r1, [sp, #36]	; 0x24
 8009648:	910a      	str	r1, [sp, #40]	; 0x28
 800964a:	910b      	str	r1, [sp, #44]	; 0x2c
 800964c:	910c      	str	r1, [sp, #48]	; 0x30
 800964e:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 8009650:	233f      	movs	r3, #63	; 0x3f
 8009652:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8009656:	239c      	movs	r3, #156	; 0x9c
 8009658:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800965c:	ab02      	add	r3, sp, #8
 800965e:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 8009660:	2318      	movs	r3, #24
 8009662:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.event = EVT_CMD_STATUS;
 8009664:	230f      	movs	r3, #15
 8009666:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 8009668:	f10d 0307 	add.w	r3, sp, #7
 800966c:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 800966e:	2301      	movs	r3, #1
 8009670:	930d      	str	r3, [sp, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009672:	a808      	add	r0, sp, #32
 8009674:	f000 fb60 	bl	8009d38 <hci_send_req>
 8009678:	2800      	cmp	r0, #0
 800967a:	db04      	blt.n	8009686 <aci_gap_create_connection+0x98>
    return BLE_STATUS_TIMEOUT;

  return status;
 800967c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009680:	b00f      	add	sp, #60	; 0x3c
 8009682:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009686:	20ff      	movs	r0, #255	; 0xff
 8009688:	e7fa      	b.n	8009680 <aci_gap_create_connection+0x92>

0800968a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800968a:	b500      	push	{lr}
 800968c:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800968e:	2100      	movs	r1, #0
 8009690:	9102      	str	r1, [sp, #8]
 8009692:	9103      	str	r1, [sp, #12]
 8009694:	9104      	str	r1, [sp, #16]
 8009696:	9105      	str	r1, [sp, #20]
 8009698:	9106      	str	r1, [sp, #24]
 800969a:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800969c:	233f      	movs	r3, #63	; 0x3f
 800969e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80096a2:	f240 1301 	movw	r3, #257	; 0x101
 80096a6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80096aa:	f10d 0307 	add.w	r3, sp, #7
 80096ae:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 80096b0:	2301      	movs	r3, #1
 80096b2:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80096b4:	a802      	add	r0, sp, #8
 80096b6:	f000 fb3f 	bl	8009d38 <hci_send_req>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	db04      	blt.n	80096c8 <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 80096be:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80096c2:	b009      	add	sp, #36	; 0x24
 80096c4:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 80096c8:	20ff      	movs	r0, #255	; 0xff
 80096ca:	e7fa      	b.n	80096c2 <aci_gatt_init+0x38>

080096cc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	b08c      	sub	sp, #48	; 0x30
 80096d0:	4616      	mov	r6, r2
 80096d2:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 80096d4:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 80096d8:	2801      	cmp	r0, #1
 80096da:	d038      	beq.n	800974e <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80096dc:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80096de:	4622      	mov	r2, r4
 80096e0:	f10d 0001 	add.w	r0, sp, #1
 80096e4:	f001 ffed 	bl	800b6c2 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 80096e8:	f104 0331 	add.w	r3, r4, #49	; 0x31
 80096ec:	446b      	add	r3, sp
 80096ee:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 80096f2:	f104 0332 	add.w	r3, r4, #50	; 0x32
 80096f6:	eb0d 0203 	add.w	r2, sp, r3
 80096fa:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 80096fe:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009700:	ab05      	add	r3, sp, #20
 8009702:	2100      	movs	r1, #0
 8009704:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009708:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800970c:	9106      	str	r1, [sp, #24]
 800970e:	9107      	str	r1, [sp, #28]
 8009710:	9108      	str	r1, [sp, #32]
 8009712:	9109      	str	r1, [sp, #36]	; 0x24
 8009714:	910a      	str	r1, [sp, #40]	; 0x28
 8009716:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 8009718:	223f      	movs	r2, #63	; 0x3f
 800971a:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800971e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009722:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 8009726:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 800972a:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800972c:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800972e:	2303      	movs	r3, #3
 8009730:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 8009732:	a806      	add	r0, sp, #24
 8009734:	f000 fb00 	bl	8009d38 <hci_send_req>
 8009738:	2800      	cmp	r0, #0
 800973a:	db0a      	blt.n	8009752 <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800973c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8009740:	b918      	cbnz	r0, 800974a <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8009742:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 8009746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009748:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800974a:	b00c      	add	sp, #48	; 0x30
 800974c:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 800974e:	2402      	movs	r4, #2
 8009750:	e7c5      	b.n	80096de <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 8009752:	20ff      	movs	r0, #255	; 0xff
 8009754:	e7f9      	b.n	800974a <aci_gatt_add_serv+0x7e>

08009756 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009756:	b530      	push	{r4, r5, lr}
 8009758:	b08f      	sub	sp, #60	; 0x3c
 800975a:	460c      	mov	r4, r1
 800975c:	4611      	mov	r1, r2
 800975e:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009760:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 8009764:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 8009768:	2c01      	cmp	r4, #1
 800976a:	d056      	beq.n	800981a <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800976c:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800976e:	4622      	mov	r2, r4
 8009770:	f10d 0003 	add.w	r0, sp, #3
 8009774:	f001 ffa5 	bl	800b6c2 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8009778:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 800977c:	eb0d 0203 	add.w	r2, sp, r3
 8009780:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 8009784:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8009788:	446b      	add	r3, sp
 800978a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800978e:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 8009792:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 8009796:	446b      	add	r3, sp
 8009798:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800979c:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80097a0:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 80097a4:	446b      	add	r3, sp
 80097a6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80097aa:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 80097ae:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80097b2:	446b      	add	r3, sp
 80097b4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80097b8:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 80097bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80097c0:	446b      	add	r3, sp
 80097c2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80097c6:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 80097ca:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80097cc:	ab07      	add	r3, sp, #28
 80097ce:	2100      	movs	r1, #0
 80097d0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80097d4:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097d8:	9108      	str	r1, [sp, #32]
 80097da:	9109      	str	r1, [sp, #36]	; 0x24
 80097dc:	910a      	str	r1, [sp, #40]	; 0x28
 80097de:	910b      	str	r1, [sp, #44]	; 0x2c
 80097e0:	910c      	str	r1, [sp, #48]	; 0x30
 80097e2:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 80097e4:	223f      	movs	r2, #63	; 0x3f
 80097e6:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 80097ea:	f44f 7282 	mov.w	r2, #260	; 0x104
 80097ee:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 80097f2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 80097f6:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 80097f8:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80097fa:	2303      	movs	r3, #3
 80097fc:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 80097fe:	a808      	add	r0, sp, #32
 8009800:	f000 fa9a 	bl	8009d38 <hci_send_req>
 8009804:	2800      	cmp	r0, #0
 8009806:	db0a      	blt.n	800981e <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8009808:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800980c:	b918      	cbnz	r0, 8009816 <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800980e:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 8009812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009814:	801a      	strh	r2, [r3, #0]

  return 0;
}
 8009816:	b00f      	add	sp, #60	; 0x3c
 8009818:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 800981a:	2402      	movs	r4, #2
 800981c:	e7a7      	b.n	800976e <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 800981e:	20ff      	movs	r0, #255	; 0xff
 8009820:	e7f9      	b.n	8009816 <aci_gatt_add_char+0xc0>

08009822 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009822:	2b7a      	cmp	r3, #122	; 0x7a
 8009824:	d831      	bhi.n	800988a <aci_gatt_update_char_value+0x68>
{
 8009826:	b510      	push	{r4, lr}
 8009828:	b0a8      	sub	sp, #160	; 0xa0
 800982a:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800982c:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009830:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 8009834:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 8009838:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800983c:	461a      	mov	r2, r3
 800983e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009840:	f10d 000a 	add.w	r0, sp, #10
 8009844:	f001 ff3d 	bl	800b6c2 <memcpy>
  indx +=  charValueLen;
 8009848:	3406      	adds	r4, #6
 800984a:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800984c:	2100      	movs	r1, #0
 800984e:	9122      	str	r1, [sp, #136]	; 0x88
 8009850:	9123      	str	r1, [sp, #140]	; 0x8c
 8009852:	9124      	str	r1, [sp, #144]	; 0x90
 8009854:	9125      	str	r1, [sp, #148]	; 0x94
 8009856:	9126      	str	r1, [sp, #152]	; 0x98
 8009858:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800985a:	233f      	movs	r3, #63	; 0x3f
 800985c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009860:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009864:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009868:	ab01      	add	r3, sp, #4
 800986a:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800986c:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800986e:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009872:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 8009878:	a822      	add	r0, sp, #136	; 0x88
 800987a:	f000 fa5d 	bl	8009d38 <hci_send_req>
 800987e:	2800      	cmp	r0, #0
 8009880:	db05      	blt.n	800988e <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009882:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 8009886:	b028      	add	sp, #160	; 0xa0
 8009888:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800988a:	2042      	movs	r0, #66	; 0x42
}
 800988c:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800988e:	20ff      	movs	r0, #255	; 0xff
 8009890:	e7f9      	b.n	8009886 <aci_gatt_update_char_value+0x64>

08009892 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8009892:	b510      	push	{r4, lr}
 8009894:	b08c      	sub	sp, #48	; 0x30
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8009896:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  start_handle = htobs(start_handle);
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800989a:	f8ad 1002 	strh.w	r1, [sp, #2]
  indx += 2;
  
  end_handle = htobs(end_handle);
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 800989e:	f8ad 2004 	strh.w	r2, [sp, #4]
  indx += 2;
  
  buffer[indx] = charUuidType;
 80098a2:	f88d 3006 	strb.w	r3, [sp, #6]
  indx++;
    
  if(charUuidType == 0x01){
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d028      	beq.n	80098fc <aci_gatt_disc_charac_by_uuid+0x6a>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80098aa:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80098ac:	4622      	mov	r2, r4
 80098ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80098b0:	f10d 0007 	add.w	r0, sp, #7
 80098b4:	f001 ff05 	bl	800b6c2 <memcpy>
  indx +=  uuid_len;
 80098b8:	3407      	adds	r4, #7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098ba:	2100      	movs	r1, #0
 80098bc:	9106      	str	r1, [sp, #24]
 80098be:	9107      	str	r1, [sp, #28]
 80098c0:	9108      	str	r1, [sp, #32]
 80098c2:	9109      	str	r1, [sp, #36]	; 0x24
 80098c4:	910a      	str	r1, [sp, #40]	; 0x28
 80098c6:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 80098c8:	233f      	movs	r3, #63	; 0x3f
 80098ca:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80098ce:	f44f 738b 	mov.w	r3, #278	; 0x116
 80098d2:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.cparam = (void *)buffer;
 80098d6:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 80098da:	9409      	str	r4, [sp, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 80098dc:	230f      	movs	r3, #15
 80098de:	9307      	str	r3, [sp, #28]
  rq.rparam = &status;
 80098e0:	f10d 0317 	add.w	r3, sp, #23
 80098e4:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 80098ea:	a806      	add	r0, sp, #24
 80098ec:	f000 fa24 	bl	8009d38 <hci_send_req>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	db05      	blt.n	8009900 <aci_gatt_disc_charac_by_uuid+0x6e>
    return BLE_STATUS_TIMEOUT;

  return status;
 80098f4:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 80098f8:	b00c      	add	sp, #48	; 0x30
 80098fa:	bd10      	pop	{r4, pc}
    uuid_len = 2;
 80098fc:	2402      	movs	r4, #2
 80098fe:	e7d5      	b.n	80098ac <aci_gatt_disc_charac_by_uuid+0x1a>
    return BLE_STATUS_TIMEOUT;
 8009900:	20ff      	movs	r0, #255	; 0xff
 8009902:	e7f9      	b.n	80098f8 <aci_gatt_disc_charac_by_uuid+0x66>

08009904 <aci_gatt_write_charac_descriptor>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8009904:	2a7b      	cmp	r2, #123	; 0x7b
 8009906:	d831      	bhi.n	800996c <aci_gatt_write_charac_descriptor+0x68>
{
 8009908:	b510      	push	{r4, lr}
 800990a:	b0a8      	sub	sp, #160	; 0xa0
 800990c:	468c      	mov	ip, r1
 800990e:	4614      	mov	r4, r2
 8009910:	4619      	mov	r1, r3
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8009912:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8009916:	f8ad c006 	strh.w	ip, [sp, #6]
  indx += 2;

  buffer[indx] = value_len;
 800991a:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800991e:	f10d 0009 	add.w	r0, sp, #9
 8009922:	f001 fece 	bl	800b6c2 <memcpy>
  indx +=  value_len;
 8009926:	3405      	adds	r4, #5
 8009928:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800992a:	2100      	movs	r1, #0
 800992c:	9122      	str	r1, [sp, #136]	; 0x88
 800992e:	9123      	str	r1, [sp, #140]	; 0x8c
 8009930:	9124      	str	r1, [sp, #144]	; 0x90
 8009932:	9125      	str	r1, [sp, #148]	; 0x94
 8009934:	9126      	str	r1, [sp, #152]	; 0x98
 8009936:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 8009938:	233f      	movs	r3, #63	; 0x3f
 800993a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800993e:	f240 1321 	movw	r3, #289	; 0x121
 8009942:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009946:	ab01      	add	r3, sp, #4
 8009948:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800994a:	9425      	str	r4, [sp, #148]	; 0x94
  rq.event = EVT_CMD_STATUS; 
 800994c:	230f      	movs	r3, #15
 800994e:	9323      	str	r3, [sp, #140]	; 0x8c
  rq.rparam = &status;
 8009950:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009954:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8009956:	2301      	movs	r3, #1
 8009958:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800995a:	a822      	add	r0, sp, #136	; 0x88
 800995c:	f000 f9ec 	bl	8009d38 <hci_send_req>
 8009960:	2800      	cmp	r0, #0
 8009962:	db05      	blt.n	8009970 <aci_gatt_write_charac_descriptor+0x6c>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009964:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 8009968:	b028      	add	sp, #160	; 0xa0
 800996a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800996c:	2042      	movs	r0, #66	; 0x42
}
 800996e:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8009970:	20ff      	movs	r0, #255	; 0xff
 8009972:	e7f9      	b.n	8009968 <aci_gatt_write_charac_descriptor+0x64>

08009974 <aci_gatt_write_without_response>:
{
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8009974:	2a14      	cmp	r2, #20
 8009976:	d82e      	bhi.n	80099d6 <aci_gatt_write_without_response+0x62>
{
 8009978:	b510      	push	{r4, lr}
 800997a:	b08e      	sub	sp, #56	; 0x38
 800997c:	468c      	mov	ip, r1
 800997e:	4614      	mov	r4, r2
 8009980:	4619      	mov	r1, r3
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 8009982:	f8ad 0004 	strh.w	r0, [sp, #4]
  cp.attr_handle = htobs(attr_handle);
 8009986:	f8ad c006 	strh.w	ip, [sp, #6]
  cp.val_len = val_len;
 800998a:	f88d 2008 	strb.w	r2, [sp, #8]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800998e:	f10d 0009 	add.w	r0, sp, #9
 8009992:	f001 fe96 	bl	800b6c2 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009996:	2100      	movs	r1, #0
 8009998:	9108      	str	r1, [sp, #32]
 800999a:	9109      	str	r1, [sp, #36]	; 0x24
 800999c:	910a      	str	r1, [sp, #40]	; 0x28
 800999e:	910b      	str	r1, [sp, #44]	; 0x2c
 80099a0:	910c      	str	r1, [sp, #48]	; 0x30
 80099a2:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 80099a4:	233f      	movs	r3, #63	; 0x3f
 80099a6:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 80099aa:	f240 1323 	movw	r3, #291	; 0x123
 80099ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 80099b2:	ab01      	add	r3, sp, #4
 80099b4:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80099b6:	3405      	adds	r4, #5
 80099b8:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &status;
 80099ba:	f10d 031f 	add.w	r3, sp, #31
 80099be:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 80099c0:	2301      	movs	r3, #1
 80099c2:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 80099c4:	a808      	add	r0, sp, #32
 80099c6:	f000 f9b7 	bl	8009d38 <hci_send_req>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	db05      	blt.n	80099da <aci_gatt_write_without_response+0x66>
    return BLE_STATUS_TIMEOUT;

  return status;
 80099ce:	f89d 001f 	ldrb.w	r0, [sp, #31]
}
 80099d2:	b00e      	add	sp, #56	; 0x38
 80099d4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80099d6:	2042      	movs	r0, #66	; 0x42
}
 80099d8:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 80099da:	20ff      	movs	r0, #255	; 0xff
 80099dc:	e7f9      	b.n	80099d2 <aci_gatt_write_without_response+0x5e>

080099de <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80099de:	b510      	push	{r4, lr}
 80099e0:	b0a8      	sub	sp, #160	; 0xa0
 80099e2:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80099e4:	297e      	cmp	r1, #126	; 0x7e
 80099e6:	d829      	bhi.n	8009a3c <aci_hal_write_config_data+0x5e>
 80099e8:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 80099ea:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 80099ee:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80099f2:	4622      	mov	r2, r4
 80099f4:	f10d 0006 	add.w	r0, sp, #6
 80099f8:	f001 fe63 	bl	800b6c2 <memcpy>
  indx +=  len;
 80099fc:	3402      	adds	r4, #2
 80099fe:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a00:	2100      	movs	r1, #0
 8009a02:	9122      	str	r1, [sp, #136]	; 0x88
 8009a04:	9123      	str	r1, [sp, #140]	; 0x8c
 8009a06:	9124      	str	r1, [sp, #144]	; 0x90
 8009a08:	9125      	str	r1, [sp, #148]	; 0x94
 8009a0a:	9126      	str	r1, [sp, #152]	; 0x98
 8009a0c:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 8009a0e:	233f      	movs	r3, #63	; 0x3f
 8009a10:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8009a14:	230c      	movs	r3, #12
 8009a16:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009a1a:	ab01      	add	r3, sp, #4
 8009a1c:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 8009a1e:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8009a20:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009a24:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 8009a2a:	a822      	add	r0, sp, #136	; 0x88
 8009a2c:	f000 f984 	bl	8009d38 <hci_send_req>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	db05      	blt.n	8009a40 <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009a34:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 8009a38:	b028      	add	sp, #160	; 0xa0
 8009a3a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009a3c:	2042      	movs	r0, #66	; 0x42
 8009a3e:	e7fb      	b.n	8009a38 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009a40:	20ff      	movs	r0, #255	; 0xff
 8009a42:	e7f9      	b.n	8009a38 <aci_hal_write_config_data+0x5a>

08009a44 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8009a44:	b500      	push	{lr}
 8009a46:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8009a48:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8009a4c:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a50:	2100      	movs	r1, #0
 8009a52:	9102      	str	r1, [sp, #8]
 8009a54:	9103      	str	r1, [sp, #12]
 8009a56:	9104      	str	r1, [sp, #16]
 8009a58:	9105      	str	r1, [sp, #20]
 8009a5a:	9106      	str	r1, [sp, #24]
 8009a5c:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 8009a5e:	233f      	movs	r3, #63	; 0x3f
 8009a60:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8009a64:	230f      	movs	r3, #15
 8009a66:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8009a6a:	ab01      	add	r3, sp, #4
 8009a6c:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8009a72:	f10d 0303 	add.w	r3, sp, #3
 8009a76:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009a7c:	a802      	add	r0, sp, #8
 8009a7e:	f000 f95b 	bl	8009d38 <hci_send_req>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	db04      	blt.n	8009a90 <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009a86:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 8009a8a:	b009      	add	sp, #36	; 0x24
 8009a8c:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009a90:	20ff      	movs	r0, #255	; 0xff
 8009a92:	e7fa      	b.n	8009a8a <aci_hal_set_tx_power_level+0x46>

08009a94 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009a94:	b530      	push	{r4, r5, lr}
 8009a96:	b085      	sub	sp, #20
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009a9c:	ab02      	add	r3, sp, #8
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	f10d 030a 	add.w	r3, sp, #10
 8009aa4:	f10d 020e 	add.w	r2, sp, #14
 8009aa8:	a903      	add	r1, sp, #12
 8009aaa:	f10d 000f 	add.w	r0, sp, #15
 8009aae:	f000 f83a 	bl	8009b26 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009ab2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8009ab6:	d115      	bne.n	8009ae4 <getBlueNRGVersion+0x50>
    *hwVersion = hci_revision >> 8;
 8009ab8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009abc:	0a1a      	lsrs	r2, r3, #8
 8009abe:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	8022      	strh	r2, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009ac6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009aca:	091b      	lsrs	r3, r3, #4
 8009acc:	011b      	lsls	r3, r3, #4
 8009ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	b21b      	sxth	r3, r3
 8009ad6:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009ad8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009adc:	f002 020f 	and.w	r2, r2, #15
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8009ae4:	b005      	add	sp, #20
 8009ae6:	bd30      	pop	{r4, r5, pc}

08009ae8 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009ae8:	b500      	push	{lr}
 8009aea:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009aec:	2100      	movs	r1, #0
 8009aee:	9102      	str	r1, [sp, #8]
 8009af0:	9103      	str	r1, [sp, #12]
 8009af2:	9104      	str	r1, [sp, #16]
 8009af4:	9105      	str	r1, [sp, #20]
 8009af6:	9106      	str	r1, [sp, #24]
 8009af8:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 8009afa:	2303      	movs	r3, #3
 8009afc:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8009b00:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8009b04:	f10d 0307 	add.w	r3, sp, #7
 8009b08:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009b0e:	a802      	add	r0, sp, #8
 8009b10:	f000 f912 	bl	8009d38 <hci_send_req>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	db04      	blt.n	8009b22 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8009b18:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009b1c:	b009      	add	sp, #36	; 0x24
 8009b1e:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009b22:	20ff      	movs	r0, #255	; 0xff
 8009b24:	e7fa      	b.n	8009b1c <hci_reset+0x34>

08009b26 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8009b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2a:	b08a      	sub	sp, #40	; 0x28
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4616      	mov	r6, r2
 8009b32:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009b34:	ac01      	add	r4, sp, #4
 8009b36:	2100      	movs	r1, #0
 8009b38:	9101      	str	r1, [sp, #4]
 8009b3a:	9102      	str	r1, [sp, #8]
 8009b3c:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b40:	9104      	str	r1, [sp, #16]
 8009b42:	9105      	str	r1, [sp, #20]
 8009b44:	9106      	str	r1, [sp, #24]
 8009b46:	9107      	str	r1, [sp, #28]
 8009b48:	9108      	str	r1, [sp, #32]
 8009b4a:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_INFO_PARAM;
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 8009b58:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009b5a:	2309      	movs	r3, #9
 8009b5c:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009b5e:	a804      	add	r0, sp, #16
 8009b60:	f000 f8ea 	bl	8009d38 <hci_send_req>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	db16      	blt.n	8009b96 <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8009b68:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009b6c:	b980      	cbnz	r0, 8009b90 <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8009b6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009b72:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 8009b76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009b7a:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009b7c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009b80:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009b82:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8009b86:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009b88:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 8009b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b8e:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8009b90:	b00a      	add	sp, #40	; 0x28
 8009b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8009b96:	20ff      	movs	r0, #255	; 0xff
 8009b98:	e7fa      	b.n	8009b90 <hci_le_read_local_version+0x6a>

08009b9a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9c:	b091      	sub	sp, #68	; 0x44
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009ba2:	af02      	add	r7, sp, #8
 8009ba4:	2620      	movs	r6, #32
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4638      	mov	r0, r7
 8009bac:	f001 fd97 	bl	800b6de <memset>
  scan_resp_cp.length = length;
 8009bb0:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	2c1f      	cmp	r4, #31
 8009bb8:	bf28      	it	cs
 8009bba:	221f      	movcs	r2, #31
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f10d 0009 	add.w	r0, sp, #9
 8009bc2:	f001 fd7e 	bl	800b6c2 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	910a      	str	r1, [sp, #40]	; 0x28
 8009bca:	910b      	str	r1, [sp, #44]	; 0x2c
 8009bcc:	910c      	str	r1, [sp, #48]	; 0x30
 8009bce:	910d      	str	r1, [sp, #52]	; 0x34
 8009bd0:	910e      	str	r1, [sp, #56]	; 0x38
 8009bd2:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_LE_CTL;
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009bda:	2309      	movs	r3, #9
 8009bdc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 8009be0:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009be2:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 8009be4:	f10d 0307 	add.w	r3, sp, #7
 8009be8:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 8009bea:	2301      	movs	r3, #1
 8009bec:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009bee:	a80a      	add	r0, sp, #40	; 0x28
 8009bf0:	f000 f8a2 	bl	8009d38 <hci_send_req>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	db03      	blt.n	8009c00 <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8009bf8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009bfc:	b011      	add	sp, #68	; 0x44
 8009bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8009c00:	20ff      	movs	r0, #255	; 0xff
 8009c02:	e7fb      	b.n	8009bfc <hci_le_set_scan_resp_data+0x62>

08009c04 <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009c04:	7a03      	ldrb	r3, [r0, #8]
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	d107      	bne.n	8009c1a <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009c0a:	7a82      	ldrb	r2, [r0, #10]
 8009c0c:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8009c10:	3b03      	subs	r3, #3
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d103      	bne.n	8009c1e <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 8009c16:	2000      	movs	r0, #0
 8009c18:	4770      	bx	lr
    return 1; /* Incorrect type */
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 8009c1e:	2002      	movs	r0, #2
}
 8009c20:	4770      	bx	lr
	...

08009c24 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009c24:	b510      	push	{r4, lr}
 8009c26:	b0a2      	sub	sp, #136	; 0x88
 8009c28:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009c2a:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 8009c2e:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 8009c32:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 8009c36:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009c40:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8009c44:	b2d1      	uxtb	r1, r2
 8009c46:	f8ad 0009 	strh.w	r0, [sp, #9]
 8009c4a:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009c4e:	4619      	mov	r1, r3
 8009c50:	a803      	add	r0, sp, #12
 8009c52:	f001 fd36 	bl	800b6c2 <memcpy>
  
  if (hciContext.io.Send)
 8009c56:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <send_cmd+0x44>)
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	b113      	cbz	r3, 8009c62 <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009c5c:	1d21      	adds	r1, r4, #4
 8009c5e:	a802      	add	r0, sp, #8
 8009c60:	4798      	blx	r3
  }
}
 8009c62:	b022      	add	sp, #136	; 0x88
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	bf00      	nop
 8009c68:	2000f84c 	.word	0x2000f84c

08009c6c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009c6c:	b500      	push	{lr}
 8009c6e:	b083      	sub	sp, #12
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009c70:	e007      	b.n	8009c82 <free_event_list+0x16>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009c72:	a901      	add	r1, sp, #4
 8009c74:	4807      	ldr	r0, [pc, #28]	; (8009c94 <free_event_list+0x28>)
 8009c76:	f000 f995 	bl	8009fa4 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009c7a:	9901      	ldr	r1, [sp, #4]
 8009c7c:	4806      	ldr	r0, [pc, #24]	; (8009c98 <free_event_list+0x2c>)
 8009c7e:	f000 f97a 	bl	8009f76 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009c82:	4805      	ldr	r0, [pc, #20]	; (8009c98 <free_event_list+0x2c>)
 8009c84:	f000 f9b0 	bl	8009fe8 <list_get_size>
 8009c88:	2801      	cmp	r0, #1
 8009c8a:	ddf2      	ble.n	8009c72 <free_event_list+0x6>
  }
}
 8009c8c:	b003      	add	sp, #12
 8009c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c92:	bf00      	nop
 8009c94:	2000fb30 	.word	0x2000fb30
 8009c98:	2000fb28 	.word	0x2000fb28

08009c9c <move_list>:
{
 8009c9c:	b530      	push	{r4, r5, lr}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 8009ca4:	e007      	b.n	8009cb6 <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 8009ca6:	a901      	add	r1, sp, #4
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 f98c 	bl	8009fc6 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009cae:	9901      	ldr	r1, [sp, #4]
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 f954 	bl	8009f5e <list_insert_head>
  while (!list_is_empty(src_list))
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 f945 	bl	8009f46 <list_is_empty>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d0f2      	beq.n	8009ca6 <move_list+0xa>
}
 8009cc0:	b003      	add	sp, #12
 8009cc2:	bd30      	pop	{r4, r5, pc}

08009cc4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009cc4:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 8009cc6:	b108      	cbz	r0, 8009ccc <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009cc8:	4a10      	ldr	r2, [pc, #64]	; (8009d0c <hci_init+0x48>)
 8009cca:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009ccc:	4810      	ldr	r0, [pc, #64]	; (8009d10 <hci_init+0x4c>)
 8009cce:	f000 f937 	bl	8009f40 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009cd2:	4810      	ldr	r0, [pc, #64]	; (8009d14 <hci_init+0x50>)
 8009cd4:	f000 f934 	bl	8009f40 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009cd8:	f7f7 ffee 	bl	8001cb8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009cdc:	2400      	movs	r4, #0
 8009cde:	e008      	b.n	8009cf2 <hci_init+0x2e>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009ce0:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <hci_init+0x54>)
 8009ce2:	218c      	movs	r1, #140	; 0x8c
 8009ce4:	fb01 3104 	mla	r1, r1, r4, r3
 8009ce8:	4809      	ldr	r0, [pc, #36]	; (8009d10 <hci_init+0x4c>)
 8009cea:	f000 f944 	bl	8009f76 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009cee:	3401      	adds	r4, #1
 8009cf0:	b2e4      	uxtb	r4, r4
 8009cf2:	2c04      	cmp	r4, #4
 8009cf4:	d9f4      	bls.n	8009ce0 <hci_init+0x1c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <hci_init+0x48>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	b10b      	cbz	r3, 8009d00 <hci_init+0x3c>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009d00:	4b02      	ldr	r3, [pc, #8]	; (8009d0c <hci_init+0x48>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	b103      	cbz	r3, 8009d08 <hci_init+0x44>
 8009d06:	4798      	blx	r3
}
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000f84c 	.word	0x2000f84c
 8009d10:	2000fb28 	.word	0x2000fb28
 8009d14:	2000fb30 	.word	0x2000fb30
 8009d18:	2000f86c 	.word	0x2000f86c

08009d1c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009d1c:	6802      	ldr	r2, [r0, #0]
 8009d1e:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <hci_register_io_bus+0x18>)
 8009d20:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8009d22:	68c2      	ldr	r2, [r0, #12]
 8009d24:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8009d26:	6902      	ldr	r2, [r0, #16]
 8009d28:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009d2a:	6982      	ldr	r2, [r0, #24]
 8009d2c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8009d2e:	6882      	ldr	r2, [r0, #8]
 8009d30:	609a      	str	r2, [r3, #8]
}
 8009d32:	4770      	bx	lr
 8009d34:	2000f84c 	.word	0x2000f84c

08009d38 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009d40:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d48:	8802      	ldrh	r2, [r0, #0]
 8009d4a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009d4e:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009d54:	a801      	add	r0, sp, #4
 8009d56:	f000 f8f3 	bl	8009f40 <list_init_head>

  free_event_list();
 8009d5a:	f7ff ff87 	bl	8009c6c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009d5e:	68ab      	ldr	r3, [r5, #8]
 8009d60:	7b2a      	ldrb	r2, [r5, #12]
 8009d62:	8869      	ldrh	r1, [r5, #2]
 8009d64:	8828      	ldrh	r0, [r5, #0]
 8009d66:	f7ff ff5d 	bl	8009c24 <send_cmd>
  
  if (async)
 8009d6a:	2c00      	cmp	r4, #0
 8009d6c:	f040 8083 	bne.w	8009e76 <hci_send_req+0x13e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009d70:	f7fd fa38 	bl	80071e4 <HAL_GetTick>
 8009d74:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009d76:	f7fd fa35 	bl	80071e4 <HAL_GetTick>
 8009d7a:	1b00      	subs	r0, r0, r4
 8009d7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009d80:	d822      	bhi.n	8009dc8 <hci_send_req+0x90>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009d82:	483e      	ldr	r0, [pc, #248]	; (8009e7c <hci_send_req+0x144>)
 8009d84:	f000 f8df 	bl	8009f46 <list_is_empty>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1f4      	bne.n	8009d76 <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009d8c:	a903      	add	r1, sp, #12
 8009d8e:	483b      	ldr	r0, [pc, #236]	; (8009e7c <hci_send_req+0x144>)
 8009d90:	f000 f908 	bl	8009fa4 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009d94:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009d96:	7a1a      	ldrb	r2, [r3, #8]
 8009d98:	2a04      	cmp	r2, #4
 8009d9a:	d128      	bne.n	8009dee <hci_send_req+0xb6>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009d9c:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009da0:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
 8009da4:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 8009da6:	7a5a      	ldrb	r2, [r3, #9]
 8009da8:	2a10      	cmp	r2, #16
 8009daa:	d00d      	beq.n	8009dc8 <hci_send_req+0x90>
 8009dac:	d819      	bhi.n	8009de2 <hci_send_req+0xaa>
 8009dae:	2a0e      	cmp	r2, #14
 8009db0:	d036      	beq.n	8009e20 <hci_send_req+0xe8>
 8009db2:	2a0f      	cmp	r2, #15
 8009db4:	d11b      	bne.n	8009dee <hci_send_req+0xb6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 8009db6:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 8009dba:	42b2      	cmp	r2, r6
 8009dbc:	d104      	bne.n	8009dc8 <hci_send_req+0x90>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009dbe:	686a      	ldr	r2, [r5, #4]
 8009dc0:	2a0f      	cmp	r2, #15
 8009dc2:	d024      	beq.n	8009e0e <hci_send_req+0xd6>
          if (cs->status) {
 8009dc4:	7adb      	ldrb	r3, [r3, #11]
 8009dc6:	b193      	cbz	r3, 8009dee <hci_send_req+0xb6>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009dc8:	9903      	ldr	r1, [sp, #12]
 8009dca:	b111      	cbz	r1, 8009dd2 <hci_send_req+0x9a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009dcc:	482c      	ldr	r0, [pc, #176]	; (8009e80 <hci_send_req+0x148>)
 8009dce:	f000 f8c6 	bl	8009f5e <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009dd2:	a901      	add	r1, sp, #4
 8009dd4:	4829      	ldr	r0, [pc, #164]	; (8009e7c <hci_send_req+0x144>)
 8009dd6:	f7ff ff61 	bl	8009c9c <move_list>

  return -1;
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 8009dde:	b004      	add	sp, #16
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 8009de2:	2a3e      	cmp	r2, #62	; 0x3e
 8009de4:	d103      	bne.n	8009dee <hci_send_req+0xb6>
        if (me->subevent != r->event)
 8009de6:	7ad9      	ldrb	r1, [r3, #11]
 8009de8:	686a      	ldr	r2, [r5, #4]
 8009dea:	4291      	cmp	r1, r2
 8009dec:	d030      	beq.n	8009e50 <hci_send_req+0x118>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009dee:	4824      	ldr	r0, [pc, #144]	; (8009e80 <hci_send_req+0x148>)
 8009df0:	f000 f8a9 	bl	8009f46 <list_is_empty>
 8009df4:	b120      	cbz	r0, 8009e00 <hci_send_req+0xc8>
 8009df6:	4821      	ldr	r0, [pc, #132]	; (8009e7c <hci_send_req+0x144>)
 8009df8:	f000 f8a5 	bl	8009f46 <list_is_empty>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d133      	bne.n	8009e68 <hci_send_req+0x130>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009e00:	9903      	ldr	r1, [sp, #12]
 8009e02:	a801      	add	r0, sp, #4
 8009e04:	f000 f8b7 	bl	8009f76 <list_insert_tail>
      hciReadPacket=NULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9303      	str	r3, [sp, #12]
 8009e0c:	e7b0      	b.n	8009d70 <hci_send_req+0x38>
        r->rlen = MIN(len, r->rlen);
 8009e0e:	696a      	ldr	r2, [r5, #20]
 8009e10:	42a2      	cmp	r2, r4
 8009e12:	bf28      	it	cs
 8009e14:	4622      	movcs	r2, r4
 8009e16:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009e18:	6928      	ldr	r0, [r5, #16]
 8009e1a:	f001 fc52 	bl	800b6c2 <memcpy>
        goto done;
 8009e1e:	e00d      	b.n	8009e3c <hci_send_req+0x104>
        if (cc->opcode != opcode)
 8009e20:	899a      	ldrh	r2, [r3, #12]
 8009e22:	42b2      	cmp	r2, r6
 8009e24:	d1d0      	bne.n	8009dc8 <hci_send_req+0x90>
        len -= EVT_CMD_COMPLETE_SIZE;
 8009e26:	1f82      	subs	r2, r0, #6
        r->rlen = MIN(len, r->rlen);
 8009e28:	6968      	ldr	r0, [r5, #20]
 8009e2a:	4282      	cmp	r2, r0
 8009e2c:	bf28      	it	cs
 8009e2e:	4602      	movcs	r2, r0
 8009e30:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009e32:	f103 010e 	add.w	r1, r3, #14
 8009e36:	6928      	ldr	r0, [r5, #16]
 8009e38:	f001 fc43 	bl	800b6c2 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009e3c:	9903      	ldr	r1, [sp, #12]
 8009e3e:	4810      	ldr	r0, [pc, #64]	; (8009e80 <hci_send_req+0x148>)
 8009e40:	f000 f88d 	bl	8009f5e <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009e44:	a901      	add	r1, sp, #4
 8009e46:	480d      	ldr	r0, [pc, #52]	; (8009e7c <hci_send_req+0x144>)
 8009e48:	f7ff ff28 	bl	8009c9c <move_list>
  return 0;
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e7c6      	b.n	8009dde <hci_send_req+0xa6>
        len -= 1;
 8009e50:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 8009e52:	696a      	ldr	r2, [r5, #20]
 8009e54:	4282      	cmp	r2, r0
 8009e56:	bf28      	it	cs
 8009e58:	4602      	movcs	r2, r0
 8009e5a:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009e5c:	f103 010c 	add.w	r1, r3, #12
 8009e60:	6928      	ldr	r0, [r5, #16]
 8009e62:	f001 fc2e 	bl	800b6c2 <memcpy>
        goto done;
 8009e66:	e7e9      	b.n	8009e3c <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009e68:	9903      	ldr	r1, [sp, #12]
 8009e6a:	4805      	ldr	r0, [pc, #20]	; (8009e80 <hci_send_req+0x148>)
 8009e6c:	f000 f883 	bl	8009f76 <list_insert_tail>
      hciReadPacket=NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	9303      	str	r3, [sp, #12]
 8009e74:	e77c      	b.n	8009d70 <hci_send_req+0x38>
    return 0;
 8009e76:	2000      	movs	r0, #0
 8009e78:	e7b1      	b.n	8009dde <hci_send_req+0xa6>
 8009e7a:	bf00      	nop
 8009e7c:	2000fb30 	.word	0x2000fb30
 8009e80:	2000fb28 	.word	0x2000fb28

08009e84 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009e84:	b500      	push	{lr}
 8009e86:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009e8c:	e006      	b.n	8009e9c <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009e8e:	9801      	ldr	r0, [sp, #4]
 8009e90:	3008      	adds	r0, #8
 8009e92:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009e94:	9901      	ldr	r1, [sp, #4]
 8009e96:	4809      	ldr	r0, [pc, #36]	; (8009ebc <hci_user_evt_proc+0x38>)
 8009e98:	f000 f86d 	bl	8009f76 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009e9c:	4808      	ldr	r0, [pc, #32]	; (8009ec0 <hci_user_evt_proc+0x3c>)
 8009e9e:	f000 f852 	bl	8009f46 <list_is_empty>
 8009ea2:	b940      	cbnz	r0, 8009eb6 <hci_user_evt_proc+0x32>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009ea4:	a901      	add	r1, sp, #4
 8009ea6:	4806      	ldr	r0, [pc, #24]	; (8009ec0 <hci_user_evt_proc+0x3c>)
 8009ea8:	f000 f87c 	bl	8009fa4 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <hci_user_evt_proc+0x40>)
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1ec      	bne.n	8009e8e <hci_user_evt_proc+0xa>
 8009eb4:	e7ee      	b.n	8009e94 <hci_user_evt_proc+0x10>
  }
}
 8009eb6:	b003      	add	sp, #12
 8009eb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ebc:	2000fb28 	.word	0x2000fb28
 8009ec0:	2000fb30 	.word	0x2000fb30
 8009ec4:	2000f84c 	.word	0x2000f84c

08009ec8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009ec8:	b530      	push	{r4, r5, lr}
 8009eca:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009ed0:	4818      	ldr	r0, [pc, #96]	; (8009f34 <hci_notify_asynch_evt+0x6c>)
 8009ed2:	f000 f838 	bl	8009f46 <list_is_empty>
 8009ed6:	b118      	cbz	r0, 8009ee0 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 8009ed8:	2401      	movs	r4, #1
  }
  return ret;

}
 8009eda:	4620      	mov	r0, r4
 8009edc:	b003      	add	sp, #12
 8009ede:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009ee0:	a901      	add	r1, sp, #4
 8009ee2:	4814      	ldr	r0, [pc, #80]	; (8009f34 <hci_notify_asynch_evt+0x6c>)
 8009ee4:	f000 f85e 	bl	8009fa4 <list_remove_head>
    if (hciContext.io.Receive)
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <hci_notify_asynch_evt+0x70>)
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	b1fb      	cbz	r3, 8009f2e <hci_notify_asynch_evt+0x66>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	9801      	ldr	r0, [sp, #4]
 8009ef2:	3008      	adds	r0, #8
 8009ef4:	4798      	blx	r3
      if (data_len > 0)
 8009ef6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8009efa:	d012      	beq.n	8009f22 <hci_notify_asynch_evt+0x5a>
        hciReadPacket->data_len = data_len;
 8009efc:	9d01      	ldr	r5, [sp, #4]
 8009efe:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7ff fe7e 	bl	8009c04 <verify_packet>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	b920      	cbnz	r0, 8009f16 <hci_notify_asynch_evt+0x4e>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	480b      	ldr	r0, [pc, #44]	; (8009f3c <hci_notify_asynch_evt+0x74>)
 8009f10:	f000 f831 	bl	8009f76 <list_insert_tail>
 8009f14:	e7e1      	b.n	8009eda <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009f16:	4629      	mov	r1, r5
 8009f18:	4806      	ldr	r0, [pc, #24]	; (8009f34 <hci_notify_asynch_evt+0x6c>)
 8009f1a:	f000 f820 	bl	8009f5e <list_insert_head>
  int32_t ret = 0;
 8009f1e:	2400      	movs	r4, #0
 8009f20:	e7db      	b.n	8009eda <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009f22:	9901      	ldr	r1, [sp, #4]
 8009f24:	4803      	ldr	r0, [pc, #12]	; (8009f34 <hci_notify_asynch_evt+0x6c>)
 8009f26:	f000 f81a 	bl	8009f5e <list_insert_head>
  int32_t ret = 0;
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	e7d5      	b.n	8009eda <hci_notify_asynch_evt+0x12>
 8009f2e:	2400      	movs	r4, #0
  return ret;
 8009f30:	e7d3      	b.n	8009eda <hci_notify_asynch_evt+0x12>
 8009f32:	bf00      	nop
 8009f34:	2000fb28 	.word	0x2000fb28
 8009f38:	2000f84c 	.word	0x2000f84c
 8009f3c:	2000fb30 	.word	0x2000fb30

08009f40 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8009f40:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8009f42:	6040      	str	r0, [r0, #4]
}
 8009f44:	4770      	bx	lr

08009f46 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f46:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f4a:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009f4c:	6802      	ldr	r2, [r0, #0]
 8009f4e:	4282      	cmp	r2, r0
 8009f50:	d003      	beq.n	8009f5a <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 8009f52:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f54:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8009f58:	4770      	bx	lr
    return_value = 1;
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	e7fa      	b.n	8009f54 <list_is_empty+0xe>

08009f5e <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f5e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f62:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009f64:	6802      	ldr	r2, [r0, #0]
 8009f66:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8009f68:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8009f6a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8009f6c:	680a      	ldr	r2, [r1, #0]
 8009f6e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f70:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009f74:	4770      	bx	lr

08009f76 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f76:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f7a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009f7c:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8009f7e:	6842      	ldr	r2, [r0, #4]
 8009f80:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8009f82:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8009f84:	684a      	ldr	r2, [r1, #4]
 8009f86:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f88:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009f8c:	4770      	bx	lr

08009f8e <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f8e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f92:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009f94:	6841      	ldr	r1, [r0, #4]
 8009f96:	6803      	ldr	r3, [r0, #0]
 8009f98:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 8009f9a:	6841      	ldr	r1, [r0, #4]
 8009f9c:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f9e:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009fa2:	4770      	bx	lr

08009fa4 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009fac:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009fae:	6800      	ldr	r0, [r0, #0]
 8009fb0:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 8009fb2:	f7ff ffec 	bl	8009f8e <list_remove_node>
  (*node)->next = NULL;
 8009fb6:	6822      	ldr	r2, [r4, #0]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009fbc:	6822      	ldr	r2, [r4, #0]
 8009fbe:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc0:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}

08009fc6 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009fc6:	b538      	push	{r3, r4, r5, lr}
 8009fc8:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009fce:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009fd0:	6840      	ldr	r0, [r0, #4]
 8009fd2:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 8009fd4:	f7ff ffdb 	bl	8009f8e <list_remove_node>
  (*node)->next = NULL;
 8009fd8:	6822      	ldr	r2, [r4, #0]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009fde:	6822      	ldr	r2, [r4, #0]
 8009fe0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fe2:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}

08009fe8 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009fe8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009fee:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009ff0:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 8009ff2:	2000      	movs	r0, #0
  while (temp != listHead)
 8009ff4:	e001      	b.n	8009ffa <list_get_size+0x12>
  {
    size++;
 8009ff6:	3001      	adds	r0, #1
    temp = temp->next;		
 8009ff8:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d1fb      	bne.n	8009ff6 <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ffe:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800a002:	4770      	bx	lr

0800a004 <arm_max_f32>:
 800a004:	f101 3cff 	add.w	ip, r1, #4294967295
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00a:	4607      	mov	r7, r0
 800a00c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800a010:	ecf7 7a01 	vldmia	r7!, {s15}
 800a014:	d060      	beq.n	800a0d8 <arm_max_f32+0xd4>
 800a016:	2400      	movs	r4, #0
 800a018:	3014      	adds	r0, #20
 800a01a:	4625      	mov	r5, r4
 800a01c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800a020:	ed10 7a04 	vldr	s14, [r0, #-16]
 800a024:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02c:	bf48      	it	mi
 800a02e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a032:	ed10 7a03 	vldr	s14, [r0, #-12]
 800a036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a03a:	bf48      	it	mi
 800a03c:	1c65      	addmi	r5, r4, #1
 800a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a042:	bf48      	it	mi
 800a044:	eef0 7a47 	vmovmi.f32	s15, s14
 800a048:	ed10 7a02 	vldr	s14, [r0, #-8]
 800a04c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a050:	bf48      	it	mi
 800a052:	1ca5      	addmi	r5, r4, #2
 800a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a058:	bf48      	it	mi
 800a05a:	eef0 7a47 	vmovmi.f32	s15, s14
 800a05e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a062:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a066:	bf48      	it	mi
 800a068:	1ce5      	addmi	r5, r4, #3
 800a06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06e:	f104 0404 	add.w	r4, r4, #4
 800a072:	bf44      	itt	mi
 800a074:	eef0 7a47 	vmovmi.f32	s15, s14
 800a078:	4625      	movmi	r5, r4
 800a07a:	42a6      	cmp	r6, r4
 800a07c:	f100 0010 	add.w	r0, r0, #16
 800a080:	d1ce      	bne.n	800a020 <arm_max_f32+0x1c>
 800a082:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800a086:	f01c 0003 	ands.w	r0, ip, #3
 800a08a:	d021      	beq.n	800a0d0 <arm_max_f32+0xcc>
 800a08c:	ed97 7a00 	vldr	s14, [r7]
 800a090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a098:	bfc4      	itt	gt
 800a09a:	eef0 7a47 	vmovgt.f32	s15, s14
 800a09e:	1a0d      	subgt	r5, r1, r0
 800a0a0:	3801      	subs	r0, #1
 800a0a2:	d015      	beq.n	800a0d0 <arm_max_f32+0xcc>
 800a0a4:	ed97 7a01 	vldr	s14, [r7, #4]
 800a0a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b0:	bf44      	itt	mi
 800a0b2:	eef0 7a47 	vmovmi.f32	s15, s14
 800a0b6:	1a0d      	submi	r5, r1, r0
 800a0b8:	2801      	cmp	r0, #1
 800a0ba:	d009      	beq.n	800a0d0 <arm_max_f32+0xcc>
 800a0bc:	ed97 7a02 	vldr	s14, [r7, #8]
 800a0c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c8:	bfc4      	itt	gt
 800a0ca:	eef0 7a47 	vmovgt.f32	s15, s14
 800a0ce:	4665      	movgt	r5, ip
 800a0d0:	edc2 7a00 	vstr	s15, [r2]
 800a0d4:	601d      	str	r5, [r3, #0]
 800a0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d8:	4675      	mov	r5, lr
 800a0da:	e7d4      	b.n	800a086 <arm_max_f32+0x82>

0800a0dc <arm_rfft_32_fast_init_f32>:
 800a0dc:	b178      	cbz	r0, 800a0fe <arm_rfft_32_fast_init_f32+0x22>
 800a0de:	b430      	push	{r4, r5}
 800a0e0:	4908      	ldr	r1, [pc, #32]	; (800a104 <arm_rfft_32_fast_init_f32+0x28>)
 800a0e2:	4a09      	ldr	r2, [pc, #36]	; (800a108 <arm_rfft_32_fast_init_f32+0x2c>)
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a0ea:	8003      	strh	r3, [r0, #0]
 800a0ec:	2520      	movs	r5, #32
 800a0ee:	2414      	movs	r4, #20
 800a0f0:	4b06      	ldr	r3, [pc, #24]	; (800a10c <arm_rfft_32_fast_init_f32+0x30>)
 800a0f2:	8205      	strh	r5, [r0, #16]
 800a0f4:	8184      	strh	r4, [r0, #12]
 800a0f6:	6143      	str	r3, [r0, #20]
 800a0f8:	bc30      	pop	{r4, r5}
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	4770      	bx	lr
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a102:	4770      	bx	lr
 800a104:	080103a0 	.word	0x080103a0
 800a108:	080154d8 	.word	0x080154d8
 800a10c:	08026258 	.word	0x08026258

0800a110 <arm_rfft_64_fast_init_f32>:
 800a110:	b178      	cbz	r0, 800a132 <arm_rfft_64_fast_init_f32+0x22>
 800a112:	b430      	push	{r4, r5}
 800a114:	4908      	ldr	r1, [pc, #32]	; (800a138 <arm_rfft_64_fast_init_f32+0x28>)
 800a116:	4a09      	ldr	r2, [pc, #36]	; (800a13c <arm_rfft_64_fast_init_f32+0x2c>)
 800a118:	2320      	movs	r3, #32
 800a11a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a11e:	8003      	strh	r3, [r0, #0]
 800a120:	2540      	movs	r5, #64	; 0x40
 800a122:	2430      	movs	r4, #48	; 0x30
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <arm_rfft_64_fast_init_f32+0x30>)
 800a126:	8205      	strh	r5, [r0, #16]
 800a128:	8184      	strh	r4, [r0, #12]
 800a12a:	6143      	str	r3, [r0, #20]
 800a12c:	bc30      	pop	{r4, r5}
 800a12e:	2000      	movs	r0, #0
 800a130:	4770      	bx	lr
 800a132:	f04f 30ff 	mov.w	r0, #4294967295
 800a136:	4770      	bx	lr
 800a138:	080124f8 	.word	0x080124f8
 800a13c:	08019d58 	.word	0x08019d58
 800a140:	0802aad8 	.word	0x0802aad8

0800a144 <arm_rfft_256_fast_init_f32>:
 800a144:	b180      	cbz	r0, 800a168 <arm_rfft_256_fast_init_f32+0x24>
 800a146:	b430      	push	{r4, r5}
 800a148:	4909      	ldr	r1, [pc, #36]	; (800a170 <arm_rfft_256_fast_init_f32+0x2c>)
 800a14a:	4a0a      	ldr	r2, [pc, #40]	; (800a174 <arm_rfft_256_fast_init_f32+0x30>)
 800a14c:	2380      	movs	r3, #128	; 0x80
 800a14e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a152:	8003      	strh	r3, [r0, #0]
 800a154:	f44f 7580 	mov.w	r5, #256	; 0x100
 800a158:	24d0      	movs	r4, #208	; 0xd0
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <arm_rfft_256_fast_init_f32+0x34>)
 800a15c:	8205      	strh	r5, [r0, #16]
 800a15e:	8184      	strh	r4, [r0, #12]
 800a160:	6143      	str	r3, [r0, #20]
 800a162:	bc30      	pop	{r4, r5}
 800a164:	2000      	movs	r0, #0
 800a166:	4770      	bx	lr
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	08010200 	.word	0x08010200
 800a174:	080150d8 	.word	0x080150d8
 800a178:	08025e58 	.word	0x08025e58

0800a17c <arm_rfft_512_fast_init_f32>:
 800a17c:	b190      	cbz	r0, 800a1a4 <arm_rfft_512_fast_init_f32+0x28>
 800a17e:	b430      	push	{r4, r5}
 800a180:	490a      	ldr	r1, [pc, #40]	; (800a1ac <arm_rfft_512_fast_init_f32+0x30>)
 800a182:	4a0b      	ldr	r2, [pc, #44]	; (800a1b0 <arm_rfft_512_fast_init_f32+0x34>)
 800a184:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a188:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a18c:	8003      	strh	r3, [r0, #0]
 800a18e:	f44f 7500 	mov.w	r5, #512	; 0x200
 800a192:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800a196:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <arm_rfft_512_fast_init_f32+0x38>)
 800a198:	8205      	strh	r5, [r0, #16]
 800a19a:	8184      	strh	r4, [r0, #12]
 800a19c:	6143      	str	r3, [r0, #20]
 800a19e:	bc30      	pop	{r4, r5}
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4770      	bx	lr
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	08012188 	.word	0x08012188
 800a1b0:	08019558 	.word	0x08019558
 800a1b4:	0802a2d8 	.word	0x0802a2d8

0800a1b8 <arm_rfft_1024_fast_init_f32>:
 800a1b8:	b190      	cbz	r0, 800a1e0 <arm_rfft_1024_fast_init_f32+0x28>
 800a1ba:	b430      	push	{r4, r5}
 800a1bc:	490a      	ldr	r1, [pc, #40]	; (800a1e8 <arm_rfft_1024_fast_init_f32+0x30>)
 800a1be:	4a0b      	ldr	r2, [pc, #44]	; (800a1ec <arm_rfft_1024_fast_init_f32+0x34>)
 800a1c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a1c8:	8003      	strh	r3, [r0, #0]
 800a1ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800a1ce:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800a1d2:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <arm_rfft_1024_fast_init_f32+0x38>)
 800a1d4:	8205      	strh	r5, [r0, #16]
 800a1d6:	8184      	strh	r4, [r0, #12]
 800a1d8:	6143      	str	r3, [r0, #20]
 800a1da:	bc30      	pop	{r4, r5}
 800a1dc:	2000      	movs	r0, #0
 800a1de:	4770      	bx	lr
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	08012558 	.word	0x08012558
 800a1ec:	08021e58 	.word	0x08021e58
 800a1f0:	08022e58 	.word	0x08022e58

0800a1f4 <arm_rfft_2048_fast_init_f32>:
 800a1f4:	b190      	cbz	r0, 800a21c <arm_rfft_2048_fast_init_f32+0x28>
 800a1f6:	b430      	push	{r4, r5}
 800a1f8:	490a      	ldr	r1, [pc, #40]	; (800a224 <arm_rfft_2048_fast_init_f32+0x30>)
 800a1fa:	4a0b      	ldr	r2, [pc, #44]	; (800a228 <arm_rfft_2048_fast_init_f32+0x34>)
 800a1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a200:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a204:	8003      	strh	r3, [r0, #0]
 800a206:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800a20a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800a20e:	4b07      	ldr	r3, [pc, #28]	; (800a22c <arm_rfft_2048_fast_init_f32+0x38>)
 800a210:	8205      	strh	r5, [r0, #16]
 800a212:	8184      	strh	r4, [r0, #12]
 800a214:	6143      	str	r3, [r0, #20]
 800a216:	bc30      	pop	{r4, r5}
 800a218:	2000      	movs	r0, #0
 800a21a:	4770      	bx	lr
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	0800f3f0 	.word	0x0800f3f0
 800a228:	080130d8 	.word	0x080130d8
 800a22c:	08023e58 	.word	0x08023e58

0800a230 <arm_rfft_4096_fast_init_f32>:
 800a230:	b190      	cbz	r0, 800a258 <arm_rfft_4096_fast_init_f32+0x28>
 800a232:	b430      	push	{r4, r5}
 800a234:	490a      	ldr	r1, [pc, #40]	; (800a260 <arm_rfft_4096_fast_init_f32+0x30>)
 800a236:	4a0b      	ldr	r2, [pc, #44]	; (800a264 <arm_rfft_4096_fast_init_f32+0x34>)
 800a238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a23c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a240:	8003      	strh	r3, [r0, #0]
 800a242:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800a246:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <arm_rfft_4096_fast_init_f32+0x38>)
 800a24c:	8205      	strh	r5, [r0, #16]
 800a24e:	8184      	strh	r4, [r0, #12]
 800a250:	6143      	str	r3, [r0, #20]
 800a252:	bc30      	pop	{r4, r5}
 800a254:	2000      	movs	r0, #0
 800a256:	4770      	bx	lr
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	080103c8 	.word	0x080103c8
 800a264:	08015558 	.word	0x08015558
 800a268:	080262d8 	.word	0x080262d8

0800a26c <arm_rfft_fast_init_f32>:
 800a26c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a270:	d01f      	beq.n	800a2b2 <arm_rfft_fast_init_f32+0x46>
 800a272:	d90b      	bls.n	800a28c <arm_rfft_fast_init_f32+0x20>
 800a274:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a278:	d019      	beq.n	800a2ae <arm_rfft_fast_init_f32+0x42>
 800a27a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a27e:	d012      	beq.n	800a2a6 <arm_rfft_fast_init_f32+0x3a>
 800a280:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a284:	d00d      	beq.n	800a2a2 <arm_rfft_fast_init_f32+0x36>
 800a286:	f04f 30ff 	mov.w	r0, #4294967295
 800a28a:	4770      	bx	lr
 800a28c:	2940      	cmp	r1, #64	; 0x40
 800a28e:	d00c      	beq.n	800a2aa <arm_rfft_fast_init_f32+0x3e>
 800a290:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a294:	d003      	beq.n	800a29e <arm_rfft_fast_init_f32+0x32>
 800a296:	2920      	cmp	r1, #32
 800a298:	d1f5      	bne.n	800a286 <arm_rfft_fast_init_f32+0x1a>
 800a29a:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <arm_rfft_fast_init_f32+0x4c>)
 800a29c:	4718      	bx	r3
 800a29e:	4b07      	ldr	r3, [pc, #28]	; (800a2bc <arm_rfft_fast_init_f32+0x50>)
 800a2a0:	4718      	bx	r3
 800a2a2:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <arm_rfft_fast_init_f32+0x54>)
 800a2a4:	4718      	bx	r3
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <arm_rfft_fast_init_f32+0x58>)
 800a2a8:	4718      	bx	r3
 800a2aa:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <arm_rfft_fast_init_f32+0x5c>)
 800a2ac:	e7f6      	b.n	800a29c <arm_rfft_fast_init_f32+0x30>
 800a2ae:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <arm_rfft_fast_init_f32+0x60>)
 800a2b0:	e7f4      	b.n	800a29c <arm_rfft_fast_init_f32+0x30>
 800a2b2:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <arm_rfft_fast_init_f32+0x64>)
 800a2b4:	e7f2      	b.n	800a29c <arm_rfft_fast_init_f32+0x30>
 800a2b6:	bf00      	nop
 800a2b8:	0800a0dd 	.word	0x0800a0dd
 800a2bc:	0800a145 	.word	0x0800a145
 800a2c0:	0800a1b9 	.word	0x0800a1b9
 800a2c4:	0800a231 	.word	0x0800a231
 800a2c8:	0800a111 	.word	0x0800a111
 800a2cc:	0800a1f5 	.word	0x0800a1f5
 800a2d0:	0800a17d 	.word	0x0800a17d

0800a2d4 <arm_cfft_radix8by2_f32>:
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	ed2d 8b08 	vpush	{d8-d11}
 800a2dc:	4607      	mov	r7, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	f8b7 c000 	ldrh.w	ip, [r7]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a2ea:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a2ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a2f2:	f000 80b0 	beq.w	800a456 <arm_cfft_radix8by2_f32+0x182>
 800a2f6:	008c      	lsls	r4, r1, #2
 800a2f8:	3410      	adds	r4, #16
 800a2fa:	f100 0310 	add.w	r3, r0, #16
 800a2fe:	1906      	adds	r6, r0, r4
 800a300:	3210      	adds	r2, #16
 800a302:	4444      	add	r4, r8
 800a304:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a308:	f108 0510 	add.w	r5, r8, #16
 800a30c:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a310:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a314:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a318:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a31c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a320:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a324:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a328:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a32c:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a330:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a334:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a338:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a33c:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a340:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a344:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a348:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a34c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a350:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a354:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a358:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a35c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a360:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a364:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a368:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a36c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a370:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a374:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a378:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a37c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a380:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a384:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a388:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a38c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a390:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a394:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a398:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a39c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a3a0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a3a4:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a3a8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a3ac:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a3b0:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a3b4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a3b8:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a3bc:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a3c0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a3c4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a3c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a3cc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a3d0:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a3d4:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a3d8:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a3dc:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a3e0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a3e4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a3e8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a3ec:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a3f0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a3f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a3f8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a3fc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a400:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a404:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a408:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a40c:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a410:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a414:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a418:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a41c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a420:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a424:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a428:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a42c:	3310      	adds	r3, #16
 800a42e:	4563      	cmp	r3, ip
 800a430:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a434:	f106 0610 	add.w	r6, r6, #16
 800a438:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a43c:	f102 0210 	add.w	r2, r2, #16
 800a440:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a444:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a448:	f105 0510 	add.w	r5, r5, #16
 800a44c:	f104 0410 	add.w	r4, r4, #16
 800a450:	f47f af5c 	bne.w	800a30c <arm_cfft_radix8by2_f32+0x38>
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	b28c      	uxth	r4, r1
 800a458:	4621      	mov	r1, r4
 800a45a:	2302      	movs	r3, #2
 800a45c:	f000 fc7a 	bl	800ad54 <arm_radix8_butterfly_f32>
 800a460:	ecbd 8b08 	vpop	{d8-d11}
 800a464:	4621      	mov	r1, r4
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	4640      	mov	r0, r8
 800a46a:	2302      	movs	r3, #2
 800a46c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	f000 bc70 	b.w	800ad54 <arm_radix8_butterfly_f32>

0800a474 <arm_cfft_radix8by4_f32>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	ed2d 8b0a 	vpush	{d8-d12}
 800a47c:	b08d      	sub	sp, #52	; 0x34
 800a47e:	460d      	mov	r5, r1
 800a480:	910b      	str	r1, [sp, #44]	; 0x2c
 800a482:	8801      	ldrh	r1, [r0, #0]
 800a484:	6842      	ldr	r2, [r0, #4]
 800a486:	900a      	str	r0, [sp, #40]	; 0x28
 800a488:	0849      	lsrs	r1, r1, #1
 800a48a:	008b      	lsls	r3, r1, #2
 800a48c:	18ee      	adds	r6, r5, r3
 800a48e:	18f0      	adds	r0, r6, r3
 800a490:	edd0 5a00 	vldr	s11, [r0]
 800a494:	edd5 7a00 	vldr	s15, [r5]
 800a498:	ed96 7a00 	vldr	s14, [r6]
 800a49c:	edd0 3a01 	vldr	s7, [r0, #4]
 800a4a0:	ed96 4a01 	vldr	s8, [r6, #4]
 800a4a4:	ed95 5a01 	vldr	s10, [r5, #4]
 800a4a8:	9008      	str	r0, [sp, #32]
 800a4aa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800a4ae:	18c7      	adds	r7, r0, r3
 800a4b0:	edd7 4a00 	vldr	s9, [r7]
 800a4b4:	ed97 3a01 	vldr	s6, [r7, #4]
 800a4b8:	9701      	str	r7, [sp, #4]
 800a4ba:	ee77 6a06 	vadd.f32	s13, s14, s12
 800a4be:	462c      	mov	r4, r5
 800a4c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a4c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a4c8:	ee16 ca90 	vmov	ip, s13
 800a4cc:	f844 cb08 	str.w	ip, [r4], #8
 800a4d0:	ee75 6a23 	vadd.f32	s13, s10, s7
 800a4d4:	edd6 5a01 	vldr	s11, [r6, #4]
 800a4d8:	edd7 2a01 	vldr	s5, [r7, #4]
 800a4dc:	9404      	str	r4, [sp, #16]
 800a4de:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a4e2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a4e6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a4ea:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a4ee:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a4f2:	0849      	lsrs	r1, r1, #1
 800a4f4:	f102 0e08 	add.w	lr, r2, #8
 800a4f8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a4fc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a500:	9109      	str	r1, [sp, #36]	; 0x24
 800a502:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a506:	f1a1 0902 	sub.w	r9, r1, #2
 800a50a:	f8cd e00c 	str.w	lr, [sp, #12]
 800a50e:	4631      	mov	r1, r6
 800a510:	ee13 ea90 	vmov	lr, s7
 800a514:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a518:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a51c:	4604      	mov	r4, r0
 800a51e:	edc5 5a01 	vstr	s11, [r5, #4]
 800a522:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a526:	f841 eb08 	str.w	lr, [r1], #8
 800a52a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a52e:	ee16 ea10 	vmov	lr, s12
 800a532:	ed86 5a01 	vstr	s10, [r6, #4]
 800a536:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a53a:	f844 eb08 	str.w	lr, [r4], #8
 800a53e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a542:	edc0 6a01 	vstr	s13, [r0, #4]
 800a546:	9405      	str	r4, [sp, #20]
 800a548:	4604      	mov	r4, r0
 800a54a:	ee17 0a90 	vmov	r0, s15
 800a54e:	9106      	str	r1, [sp, #24]
 800a550:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a554:	f102 0110 	add.w	r1, r2, #16
 800a558:	46bc      	mov	ip, r7
 800a55a:	9100      	str	r1, [sp, #0]
 800a55c:	f847 0b08 	str.w	r0, [r7], #8
 800a560:	f102 0118 	add.w	r1, r2, #24
 800a564:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a568:	9102      	str	r1, [sp, #8]
 800a56a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a56e:	9007      	str	r0, [sp, #28]
 800a570:	f000 8134 	beq.w	800a7dc <arm_cfft_radix8by4_f32+0x368>
 800a574:	f102 0920 	add.w	r9, r2, #32
 800a578:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a57c:	9a01      	ldr	r2, [sp, #4]
 800a57e:	f8dd a000 	ldr.w	sl, [sp]
 800a582:	3b0c      	subs	r3, #12
 800a584:	4683      	mov	fp, r0
 800a586:	4463      	add	r3, ip
 800a588:	f105 0e10 	add.w	lr, r5, #16
 800a58c:	f1a4 010c 	sub.w	r1, r4, #12
 800a590:	f104 0510 	add.w	r5, r4, #16
 800a594:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a598:	f1a2 040c 	sub.w	r4, r2, #12
 800a59c:	f106 0010 	add.w	r0, r6, #16
 800a5a0:	3210      	adds	r2, #16
 800a5a2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a5a6:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a5aa:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a5ae:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a5b2:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a5b6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a5ba:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a5be:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a5c2:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a5c6:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a5ca:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a5ce:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a5d2:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a5d6:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a5da:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a5de:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a5e2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a5e6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a5ea:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a5ee:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a5f2:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a5f6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a5fa:	ed94 7a02 	vldr	s14, [r4, #8]
 800a5fe:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a602:	ed91 ba02 	vldr	s22, [r1, #8]
 800a606:	edd3 9a02 	vldr	s19, [r3, #8]
 800a60a:	edd4 2a01 	vldr	s5, [r4, #4]
 800a60e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a612:	ed93 5a01 	vldr	s10, [r3, #4]
 800a616:	edd1 0a01 	vldr	s1, [r1, #4]
 800a61a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a61e:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a622:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a626:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a62a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a62e:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a632:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a636:	ed91 7a01 	vldr	s14, [r1, #4]
 800a63a:	edd3 8a01 	vldr	s17, [r3, #4]
 800a63e:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a642:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a646:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a64a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a64e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a652:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a656:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a65a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a65e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a662:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a666:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a66a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a66e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a672:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a676:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a67a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a67e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a682:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a686:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a68a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a68e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a692:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a696:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a69a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a69e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a6a2:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a6a6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a6aa:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a6ae:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a6b2:	edc1 8a01 	vstr	s17, [r1, #4]
 800a6b6:	ed81 aa02 	vstr	s20, [r1, #8]
 800a6ba:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a6be:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a6c2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a6c6:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a6ca:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a6ce:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a6d2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a6d6:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a6da:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a6de:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a6e2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a6e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a6ea:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a6ee:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a6f2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a6f6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a6fa:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a6fe:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a702:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a706:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a70a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a70e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a712:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a716:	ed84 7a01 	vstr	s14, [r4, #4]
 800a71a:	ed84 4a02 	vstr	s8, [r4, #8]
 800a71e:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a722:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a726:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a72a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a72e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a732:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a736:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a73a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a73e:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a742:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a746:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a74a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a74e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a752:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a756:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a75a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a75e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a762:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a766:	f1bb 0b01 	subs.w	fp, fp, #1
 800a76a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a76e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a772:	f10e 0e08 	add.w	lr, lr, #8
 800a776:	ed83 3a02 	vstr	s6, [r3, #8]
 800a77a:	ed83 7a01 	vstr	s14, [r3, #4]
 800a77e:	f1ac 0c08 	sub.w	ip, ip, #8
 800a782:	f10a 0a08 	add.w	sl, sl, #8
 800a786:	f100 0008 	add.w	r0, r0, #8
 800a78a:	f1a1 0108 	sub.w	r1, r1, #8
 800a78e:	f109 0910 	add.w	r9, r9, #16
 800a792:	f105 0508 	add.w	r5, r5, #8
 800a796:	f1a4 0408 	sub.w	r4, r4, #8
 800a79a:	f108 0818 	add.w	r8, r8, #24
 800a79e:	f102 0208 	add.w	r2, r2, #8
 800a7a2:	f1a3 0308 	sub.w	r3, r3, #8
 800a7a6:	f47f aefc 	bne.w	800a5a2 <arm_cfft_radix8by4_f32+0x12e>
 800a7aa:	9907      	ldr	r1, [sp, #28]
 800a7ac:	9800      	ldr	r0, [sp, #0]
 800a7ae:	00cb      	lsls	r3, r1, #3
 800a7b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a7b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a7b8:	9100      	str	r1, [sp, #0]
 800a7ba:	9904      	ldr	r1, [sp, #16]
 800a7bc:	4419      	add	r1, r3
 800a7be:	9104      	str	r1, [sp, #16]
 800a7c0:	9903      	ldr	r1, [sp, #12]
 800a7c2:	4419      	add	r1, r3
 800a7c4:	9103      	str	r1, [sp, #12]
 800a7c6:	9906      	ldr	r1, [sp, #24]
 800a7c8:	4419      	add	r1, r3
 800a7ca:	9106      	str	r1, [sp, #24]
 800a7cc:	9905      	ldr	r1, [sp, #20]
 800a7ce:	441f      	add	r7, r3
 800a7d0:	4419      	add	r1, r3
 800a7d2:	9b02      	ldr	r3, [sp, #8]
 800a7d4:	9105      	str	r1, [sp, #20]
 800a7d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7da:	9302      	str	r3, [sp, #8]
 800a7dc:	9904      	ldr	r1, [sp, #16]
 800a7de:	9805      	ldr	r0, [sp, #20]
 800a7e0:	ed91 4a00 	vldr	s8, [r1]
 800a7e4:	edd0 6a00 	vldr	s13, [r0]
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	ed97 3a00 	vldr	s6, [r7]
 800a7ee:	edd3 7a00 	vldr	s15, [r3]
 800a7f2:	edd0 4a01 	vldr	s9, [r0, #4]
 800a7f6:	edd1 3a01 	vldr	s7, [r1, #4]
 800a7fa:	ed97 2a01 	vldr	s4, [r7, #4]
 800a7fe:	ed93 7a01 	vldr	s14, [r3, #4]
 800a802:	9a03      	ldr	r2, [sp, #12]
 800a804:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a808:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a80c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a810:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a814:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a818:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a81c:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a820:	ed81 5a00 	vstr	s10, [r1]
 800a824:	ed93 5a01 	vldr	s10, [r3, #4]
 800a828:	edd7 4a01 	vldr	s9, [r7, #4]
 800a82c:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a830:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a834:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a838:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a83c:	ed81 5a01 	vstr	s10, [r1, #4]
 800a840:	edd2 1a00 	vldr	s3, [r2]
 800a844:	edd2 2a01 	vldr	s5, [r2, #4]
 800a848:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a84c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a850:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a854:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a858:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a85c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a860:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a864:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a868:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a86c:	edc3 2a00 	vstr	s5, [r3]
 800a870:	ed83 5a01 	vstr	s10, [r3, #4]
 800a874:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a87e:	ed93 4a01 	vldr	s8, [r3, #4]
 800a882:	ed93 5a00 	vldr	s10, [r3]
 800a886:	9b02      	ldr	r3, [sp, #8]
 800a888:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a88c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a890:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a894:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a898:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a89c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a8a0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a8a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a8a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a8ac:	ed80 6a01 	vstr	s12, [r0, #4]
 800a8b0:	edc0 5a00 	vstr	s11, [r0]
 800a8b4:	edd3 5a01 	vldr	s11, [r3, #4]
 800a8b8:	edd3 6a00 	vldr	s13, [r3]
 800a8bc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a8c0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a8c4:	ee27 6a26 	vmul.f32	s12, s14, s13
 800a8c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a8cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a8d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a8d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a8dc:	ed87 7a01 	vstr	s14, [r7, #4]
 800a8e0:	edc7 7a00 	vstr	s15, [r7]
 800a8e4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	686a      	ldr	r2, [r5, #4]
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	f000 fa31 	bl	800ad54 <arm_radix8_butterfly_f32>
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	686a      	ldr	r2, [r5, #4]
 800a8f8:	2304      	movs	r3, #4
 800a8fa:	f000 fa2b 	bl	800ad54 <arm_radix8_butterfly_f32>
 800a8fe:	9808      	ldr	r0, [sp, #32]
 800a900:	686a      	ldr	r2, [r5, #4]
 800a902:	4621      	mov	r1, r4
 800a904:	2304      	movs	r3, #4
 800a906:	f000 fa25 	bl	800ad54 <arm_radix8_butterfly_f32>
 800a90a:	686a      	ldr	r2, [r5, #4]
 800a90c:	9801      	ldr	r0, [sp, #4]
 800a90e:	4621      	mov	r1, r4
 800a910:	2304      	movs	r3, #4
 800a912:	b00d      	add	sp, #52	; 0x34
 800a914:	ecbd 8b0a 	vpop	{d8-d12}
 800a918:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	f000 ba1a 	b.w	800ad54 <arm_radix8_butterfly_f32>

0800a920 <arm_cfft_f32>:
 800a920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a924:	2a01      	cmp	r2, #1
 800a926:	4606      	mov	r6, r0
 800a928:	4617      	mov	r7, r2
 800a92a:	460c      	mov	r4, r1
 800a92c:	4698      	mov	r8, r3
 800a92e:	8805      	ldrh	r5, [r0, #0]
 800a930:	d056      	beq.n	800a9e0 <arm_cfft_f32+0xc0>
 800a932:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a936:	d063      	beq.n	800aa00 <arm_cfft_f32+0xe0>
 800a938:	d916      	bls.n	800a968 <arm_cfft_f32+0x48>
 800a93a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a93e:	d01a      	beq.n	800a976 <arm_cfft_f32+0x56>
 800a940:	d947      	bls.n	800a9d2 <arm_cfft_f32+0xb2>
 800a942:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a946:	d05b      	beq.n	800aa00 <arm_cfft_f32+0xe0>
 800a948:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a94c:	d105      	bne.n	800a95a <arm_cfft_f32+0x3a>
 800a94e:	2301      	movs	r3, #1
 800a950:	6872      	ldr	r2, [r6, #4]
 800a952:	4629      	mov	r1, r5
 800a954:	4620      	mov	r0, r4
 800a956:	f000 f9fd 	bl	800ad54 <arm_radix8_butterfly_f32>
 800a95a:	f1b8 0f00 	cmp.w	r8, #0
 800a95e:	d111      	bne.n	800a984 <arm_cfft_f32+0x64>
 800a960:	2f01      	cmp	r7, #1
 800a962:	d016      	beq.n	800a992 <arm_cfft_f32+0x72>
 800a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a968:	2d20      	cmp	r5, #32
 800a96a:	d049      	beq.n	800aa00 <arm_cfft_f32+0xe0>
 800a96c:	d935      	bls.n	800a9da <arm_cfft_f32+0xba>
 800a96e:	2d40      	cmp	r5, #64	; 0x40
 800a970:	d0ed      	beq.n	800a94e <arm_cfft_f32+0x2e>
 800a972:	2d80      	cmp	r5, #128	; 0x80
 800a974:	d1f1      	bne.n	800a95a <arm_cfft_f32+0x3a>
 800a976:	4621      	mov	r1, r4
 800a978:	4630      	mov	r0, r6
 800a97a:	f7ff fcab 	bl	800a2d4 <arm_cfft_radix8by2_f32>
 800a97e:	f1b8 0f00 	cmp.w	r8, #0
 800a982:	d0ed      	beq.n	800a960 <arm_cfft_f32+0x40>
 800a984:	68b2      	ldr	r2, [r6, #8]
 800a986:	89b1      	ldrh	r1, [r6, #12]
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 f89f 	bl	800aacc <arm_bitreversal_32>
 800a98e:	2f01      	cmp	r7, #1
 800a990:	d1e8      	bne.n	800a964 <arm_cfft_f32+0x44>
 800a992:	ee07 5a90 	vmov	s15, r5
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a99e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	d0de      	beq.n	800a964 <arm_cfft_f32+0x44>
 800a9a6:	f104 0108 	add.w	r1, r4, #8
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	429d      	cmp	r5, r3
 800a9b0:	f101 0108 	add.w	r1, r1, #8
 800a9b4:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a9b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a9bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a9c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a9c4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a9c8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a9cc:	d1ee      	bne.n	800a9ac <arm_cfft_f32+0x8c>
 800a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a9d6:	d0ba      	beq.n	800a94e <arm_cfft_f32+0x2e>
 800a9d8:	e7bf      	b.n	800a95a <arm_cfft_f32+0x3a>
 800a9da:	2d10      	cmp	r5, #16
 800a9dc:	d0cb      	beq.n	800a976 <arm_cfft_f32+0x56>
 800a9de:	e7bc      	b.n	800a95a <arm_cfft_f32+0x3a>
 800a9e0:	b19d      	cbz	r5, 800aa0a <arm_cfft_f32+0xea>
 800a9e2:	f101 030c 	add.w	r3, r1, #12
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a9ec:	3201      	adds	r2, #1
 800a9ee:	eef1 7a67 	vneg.f32	s15, s15
 800a9f2:	4295      	cmp	r5, r2
 800a9f4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a9f8:	f103 0308 	add.w	r3, r3, #8
 800a9fc:	d1f4      	bne.n	800a9e8 <arm_cfft_f32+0xc8>
 800a9fe:	e798      	b.n	800a932 <arm_cfft_f32+0x12>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff fd36 	bl	800a474 <arm_cfft_radix8by4_f32>
 800aa08:	e7a7      	b.n	800a95a <arm_cfft_f32+0x3a>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0aa      	beq.n	800a964 <arm_cfft_f32+0x44>
 800aa0e:	e7b9      	b.n	800a984 <arm_cfft_f32+0x64>

0800aa10 <arm_cfft_radix4_init_f32>:
 800aa10:	b410      	push	{r4}
 800aa12:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800aa16:	4c27      	ldr	r4, [pc, #156]	; (800aab4 <arm_cfft_radix4_init_f32+0xa4>)
 800aa18:	7082      	strb	r2, [r0, #2]
 800aa1a:	70c3      	strb	r3, [r0, #3]
 800aa1c:	8001      	strh	r1, [r0, #0]
 800aa1e:	6044      	str	r4, [r0, #4]
 800aa20:	d027      	beq.n	800aa72 <arm_cfft_radix4_init_f32+0x62>
 800aa22:	d911      	bls.n	800aa48 <arm_cfft_radix4_init_f32+0x38>
 800aa24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa28:	d02f      	beq.n	800aa8a <arm_cfft_radix4_init_f32+0x7a>
 800aa2a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800aa2e:	d11b      	bne.n	800aa68 <arm_cfft_radix4_init_f32+0x58>
 800aa30:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800aa34:	4b20      	ldr	r3, [pc, #128]	; (800aab8 <arm_cfft_radix4_init_f32+0xa8>)
 800aa36:	6102      	str	r2, [r0, #16]
 800aa38:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800aa3c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800aa40:	2000      	movs	r0, #0
 800aa42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	2910      	cmp	r1, #16
 800aa4a:	d028      	beq.n	800aa9e <arm_cfft_radix4_init_f32+0x8e>
 800aa4c:	2940      	cmp	r1, #64	; 0x40
 800aa4e:	d10b      	bne.n	800aa68 <arm_cfft_radix4_init_f32+0x58>
 800aa50:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 800aa54:	4b19      	ldr	r3, [pc, #100]	; (800aabc <arm_cfft_radix4_init_f32+0xac>)
 800aa56:	6102      	str	r2, [r0, #16]
 800aa58:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 800aa5c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800aa60:	2000      	movs	r0, #0
 800aa62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800aa76:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <arm_cfft_radix4_init_f32+0xb0>)
 800aa78:	6102      	str	r2, [r0, #16]
 800aa7a:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 800aa7e:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800aa82:	2000      	movs	r0, #0
 800aa84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800aa8e:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <arm_cfft_radix4_init_f32+0xb4>)
 800aa90:	6102      	str	r2, [r0, #16]
 800aa92:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800aa96:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	e7d1      	b.n	800aa42 <arm_cfft_radix4_init_f32+0x32>
 800aa9e:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <arm_cfft_radix4_init_f32+0xb8>)
 800aaa4:	6102      	str	r2, [r0, #16]
 800aaa6:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 800aaaa:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800aaae:	2000      	movs	r0, #0
 800aab0:	e7c7      	b.n	800aa42 <arm_cfft_radix4_init_f32+0x32>
 800aab2:	bf00      	nop
 800aab4:	08019e58 	.word	0x08019e58
 800aab8:	080128d8 	.word	0x080128d8
 800aabc:	08012956 	.word	0x08012956
 800aac0:	080128f6 	.word	0x080128f6
 800aac4:	080128de 	.word	0x080128de
 800aac8:	08012ad6 	.word	0x08012ad6

0800aacc <arm_bitreversal_32>:
 800aacc:	b1e9      	cbz	r1, 800ab0a <arm_bitreversal_32+0x3e>
 800aace:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad0:	2500      	movs	r5, #0
 800aad2:	f102 0e02 	add.w	lr, r2, #2
 800aad6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800aada:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800aade:	08a4      	lsrs	r4, r4, #2
 800aae0:	089b      	lsrs	r3, r3, #2
 800aae2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800aae6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800aaea:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800aaee:	00a6      	lsls	r6, r4, #2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	1d34      	adds	r4, r6, #4
 800aafa:	3502      	adds	r5, #2
 800aafc:	58c6      	ldr	r6, [r0, r3]
 800aafe:	5907      	ldr	r7, [r0, r4]
 800ab00:	50c7      	str	r7, [r0, r3]
 800ab02:	428d      	cmp	r5, r1
 800ab04:	5106      	str	r6, [r0, r4]
 800ab06:	d3e6      	bcc.n	800aad6 <arm_bitreversal_32+0xa>
 800ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0a:	4770      	bx	lr

0800ab0c <arm_cmplx_mag_f32>:
 800ab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab10:	ed2d 8b02 	vpush	{d8}
 800ab14:	0897      	lsrs	r7, r2, #2
 800ab16:	b084      	sub	sp, #16
 800ab18:	d077      	beq.n	800ac0a <arm_cmplx_mag_f32+0xfe>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	f100 0420 	add.w	r4, r0, #32
 800ab22:	f101 0510 	add.w	r5, r1, #16
 800ab26:	463e      	mov	r6, r7
 800ab28:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800ab2c:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800ab30:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ab34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ab38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ab40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab44:	f2c0 80c5 	blt.w	800acd2 <arm_cmplx_mag_f32+0x1c6>
 800ab48:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab50:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ab54:	f100 80cb 	bmi.w	800acee <arm_cmplx_mag_f32+0x1e2>
 800ab58:	ed05 8a04 	vstr	s16, [r5, #-16]
 800ab5c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800ab60:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800ab64:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ab68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ab6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ab74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab78:	f2c0 80a8 	blt.w	800accc <arm_cmplx_mag_f32+0x1c0>
 800ab7c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ab80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab84:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ab88:	f100 80a8 	bmi.w	800acdc <arm_cmplx_mag_f32+0x1d0>
 800ab8c:	ed05 8a03 	vstr	s16, [r5, #-12]
 800ab90:	ed14 0a04 	vldr	s0, [r4, #-16]
 800ab94:	ed54 7a03 	vldr	s15, [r4, #-12]
 800ab98:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ab9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aba0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aba4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abac:	f2c0 808b 	blt.w	800acc6 <arm_cmplx_mag_f32+0x1ba>
 800abb0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800abb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800abbc:	f100 80a9 	bmi.w	800ad12 <arm_cmplx_mag_f32+0x206>
 800abc0:	ed05 8a02 	vstr	s16, [r5, #-8]
 800abc4:	ed14 0a02 	vldr	s0, [r4, #-8]
 800abc8:	ed54 7a01 	vldr	s15, [r4, #-4]
 800abcc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800abd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800abd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800abd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800abdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe0:	db6e      	blt.n	800acc0 <arm_cmplx_mag_f32+0x1b4>
 800abe2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800abe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abea:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800abee:	f100 8087 	bmi.w	800ad00 <arm_cmplx_mag_f32+0x1f4>
 800abf2:	ed05 8a01 	vstr	s16, [r5, #-4]
 800abf6:	3e01      	subs	r6, #1
 800abf8:	f104 0420 	add.w	r4, r4, #32
 800abfc:	f105 0510 	add.w	r5, r5, #16
 800ac00:	d192      	bne.n	800ab28 <arm_cmplx_mag_f32+0x1c>
 800ac02:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800ac06:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ac0a:	f012 0203 	ands.w	r2, r2, #3
 800ac0e:	d052      	beq.n	800acb6 <arm_cmplx_mag_f32+0x1aa>
 800ac10:	ed90 0a00 	vldr	s0, [r0]
 800ac14:	edd0 7a01 	vldr	s15, [r0, #4]
 800ac18:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ac1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac20:	2300      	movs	r3, #0
 800ac22:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ac26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ac2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2e:	bfb8      	it	lt
 800ac30:	600b      	strlt	r3, [r1, #0]
 800ac32:	db08      	blt.n	800ac46 <arm_cmplx_mag_f32+0x13a>
 800ac34:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ac38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ac40:	d479      	bmi.n	800ad36 <arm_cmplx_mag_f32+0x22a>
 800ac42:	ed81 8a00 	vstr	s16, [r1]
 800ac46:	3a01      	subs	r2, #1
 800ac48:	d035      	beq.n	800acb6 <arm_cmplx_mag_f32+0x1aa>
 800ac4a:	ed90 0a02 	vldr	s0, [r0, #8]
 800ac4e:	edd0 7a03 	vldr	s15, [r0, #12]
 800ac52:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ac56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ac60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ac64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac68:	bfb8      	it	lt
 800ac6a:	604b      	strlt	r3, [r1, #4]
 800ac6c:	db08      	blt.n	800ac80 <arm_cmplx_mag_f32+0x174>
 800ac6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ac72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac76:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ac7a:	d453      	bmi.n	800ad24 <arm_cmplx_mag_f32+0x218>
 800ac7c:	ed81 8a01 	vstr	s16, [r1, #4]
 800ac80:	2a01      	cmp	r2, #1
 800ac82:	d018      	beq.n	800acb6 <arm_cmplx_mag_f32+0x1aa>
 800ac84:	ed90 0a04 	vldr	s0, [r0, #16]
 800ac88:	edd0 7a05 	vldr	s15, [r0, #20]
 800ac8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ac90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac94:	2300      	movs	r3, #0
 800ac96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ac9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ac9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca2:	db19      	blt.n	800acd8 <arm_cmplx_mag_f32+0x1cc>
 800aca4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800aca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acac:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800acb0:	d44a      	bmi.n	800ad48 <arm_cmplx_mag_f32+0x23c>
 800acb2:	ed81 8a02 	vstr	s16, [r1, #8]
 800acb6:	b004      	add	sp, #16
 800acb8:	ecbd 8b02 	vpop	{d8}
 800acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc0:	f845 8c04 	str.w	r8, [r5, #-4]
 800acc4:	e797      	b.n	800abf6 <arm_cmplx_mag_f32+0xea>
 800acc6:	f845 8c08 	str.w	r8, [r5, #-8]
 800acca:	e77b      	b.n	800abc4 <arm_cmplx_mag_f32+0xb8>
 800accc:	f845 8c0c 	str.w	r8, [r5, #-12]
 800acd0:	e75e      	b.n	800ab90 <arm_cmplx_mag_f32+0x84>
 800acd2:	f845 8c10 	str.w	r8, [r5, #-16]
 800acd6:	e741      	b.n	800ab5c <arm_cmplx_mag_f32+0x50>
 800acd8:	608b      	str	r3, [r1, #8]
 800acda:	e7ec      	b.n	800acb6 <arm_cmplx_mag_f32+0x1aa>
 800acdc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ace0:	9001      	str	r0, [sp, #4]
 800ace2:	f003 fb7b 	bl	800e3dc <sqrtf>
 800ace6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800acea:	9801      	ldr	r0, [sp, #4]
 800acec:	e74e      	b.n	800ab8c <arm_cmplx_mag_f32+0x80>
 800acee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800acf2:	9001      	str	r0, [sp, #4]
 800acf4:	f003 fb72 	bl	800e3dc <sqrtf>
 800acf8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800acfc:	9801      	ldr	r0, [sp, #4]
 800acfe:	e72b      	b.n	800ab58 <arm_cmplx_mag_f32+0x4c>
 800ad00:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ad04:	9001      	str	r0, [sp, #4]
 800ad06:	f003 fb69 	bl	800e3dc <sqrtf>
 800ad0a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ad0e:	9801      	ldr	r0, [sp, #4]
 800ad10:	e76f      	b.n	800abf2 <arm_cmplx_mag_f32+0xe6>
 800ad12:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ad16:	9001      	str	r0, [sp, #4]
 800ad18:	f003 fb60 	bl	800e3dc <sqrtf>
 800ad1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ad20:	9801      	ldr	r0, [sp, #4]
 800ad22:	e74d      	b.n	800abc0 <arm_cmplx_mag_f32+0xb4>
 800ad24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad28:	9201      	str	r2, [sp, #4]
 800ad2a:	f003 fb57 	bl	800e3dc <sqrtf>
 800ad2e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ad32:	9903      	ldr	r1, [sp, #12]
 800ad34:	e7a2      	b.n	800ac7c <arm_cmplx_mag_f32+0x170>
 800ad36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad3a:	9201      	str	r2, [sp, #4]
 800ad3c:	f003 fb4e 	bl	800e3dc <sqrtf>
 800ad40:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ad44:	9903      	ldr	r1, [sp, #12]
 800ad46:	e77c      	b.n	800ac42 <arm_cmplx_mag_f32+0x136>
 800ad48:	9101      	str	r1, [sp, #4]
 800ad4a:	f003 fb47 	bl	800e3dc <sqrtf>
 800ad4e:	9901      	ldr	r1, [sp, #4]
 800ad50:	e7af      	b.n	800acb2 <arm_cmplx_mag_f32+0x1a6>
 800ad52:	bf00      	nop

0800ad54 <arm_radix8_butterfly_f32>:
 800ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad58:	ed2d 8b10 	vpush	{d8-d15}
 800ad5c:	b095      	sub	sp, #84	; 0x54
 800ad5e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800ad62:	4603      	mov	r3, r0
 800ad64:	3304      	adds	r3, #4
 800ad66:	ed9f bab9 	vldr	s22, [pc, #740]	; 800b04c <arm_radix8_butterfly_f32+0x2f8>
 800ad6a:	9012      	str	r0, [sp, #72]	; 0x48
 800ad6c:	468b      	mov	fp, r1
 800ad6e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad70:	4689      	mov	r9, r1
 800ad72:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800ad76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad78:	960f      	str	r6, [sp, #60]	; 0x3c
 800ad7a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800ad7e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800ad82:	eb03 0508 	add.w	r5, r3, r8
 800ad86:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ad8a:	eb05 040e 	add.w	r4, r5, lr
 800ad8e:	0137      	lsls	r7, r6, #4
 800ad90:	eba6 030a 	sub.w	r3, r6, sl
 800ad94:	eb04 000e 	add.w	r0, r4, lr
 800ad98:	44b2      	add	sl, r6
 800ad9a:	1d3a      	adds	r2, r7, #4
 800ad9c:	9702      	str	r7, [sp, #8]
 800ad9e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ada2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800ada6:	ebae 0c06 	sub.w	ip, lr, r6
 800adaa:	9703      	str	r7, [sp, #12]
 800adac:	eb03 0708 	add.w	r7, r3, r8
 800adb0:	9701      	str	r7, [sp, #4]
 800adb2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800adb6:	9706      	str	r7, [sp, #24]
 800adb8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800adba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800adbe:	f10e 0104 	add.w	r1, lr, #4
 800adc2:	4439      	add	r1, r7
 800adc4:	443a      	add	r2, r7
 800adc6:	0137      	lsls	r7, r6, #4
 800adc8:	00f6      	lsls	r6, r6, #3
 800adca:	9704      	str	r7, [sp, #16]
 800adcc:	9605      	str	r6, [sp, #20]
 800adce:	9f01      	ldr	r7, [sp, #4]
 800add0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800add2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800add6:	f04f 0c00 	mov.w	ip, #0
 800adda:	edd4 6a00 	vldr	s13, [r4]
 800adde:	edd7 1a00 	vldr	s3, [r7]
 800ade2:	ed16 aa01 	vldr	s20, [r6, #-4]
 800ade6:	edd5 5a00 	vldr	s11, [r5]
 800adea:	ed52 9a01 	vldr	s19, [r2, #-4]
 800adee:	ed90 6a00 	vldr	s12, [r0]
 800adf2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800adf6:	ed93 3a00 	vldr	s6, [r3]
 800adfa:	ee39 0a86 	vadd.f32	s0, s19, s12
 800adfe:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ae02:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ae06:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ae0a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ae0e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ae12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae16:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ae1a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ae1e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800ae22:	ed85 4a00 	vstr	s8, [r5]
 800ae26:	edd1 6a00 	vldr	s13, [r1]
 800ae2a:	ed94 9a01 	vldr	s18, [r4, #4]
 800ae2e:	edd3 2a01 	vldr	s5, [r3, #4]
 800ae32:	edd7 8a01 	vldr	s17, [r7, #4]
 800ae36:	edd6 0a00 	vldr	s1, [r6]
 800ae3a:	edd5 3a01 	vldr	s7, [r5, #4]
 800ae3e:	ed90 8a01 	vldr	s16, [r0, #4]
 800ae42:	ed92 7a00 	vldr	s14, [r2]
 800ae46:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ae4a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800ae4e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800ae52:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800ae56:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800ae5a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ae5e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800ae62:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800ae66:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800ae6a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800ae6e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800ae72:	ee77 0a08 	vadd.f32	s1, s14, s16
 800ae76:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800ae7a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ae7e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800ae82:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800ae86:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ae8a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ae8e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ae92:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ae96:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ae9a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800ae9e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800aea2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800aea6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800aeaa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800aeae:	ee77 0a01 	vadd.f32	s1, s14, s2
 800aeb2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800aeb6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800aeba:	ee73 1a84 	vadd.f32	s3, s7, s8
 800aebe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800aec2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800aec6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aeca:	ee32 8a00 	vadd.f32	s16, s4, s0
 800aece:	ee33 1a45 	vsub.f32	s2, s6, s10
 800aed2:	ee32 2a40 	vsub.f32	s4, s4, s0
 800aed6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aeda:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800aede:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800aee2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800aee6:	ee34 6a67 	vsub.f32	s12, s8, s15
 800aeea:	ee75 4a87 	vadd.f32	s9, s11, s14
 800aeee:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800aef2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800aef6:	ee77 7a84 	vadd.f32	s15, s15, s8
 800aefa:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800aefe:	44dc      	add	ip, fp
 800af00:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800af04:	45e1      	cmp	r9, ip
 800af06:	ed86 8a00 	vstr	s16, [r6]
 800af0a:	ed85 2a01 	vstr	s4, [r5, #4]
 800af0e:	4456      	add	r6, sl
 800af10:	ed02 0a01 	vstr	s0, [r2, #-4]
 800af14:	4455      	add	r5, sl
 800af16:	edc0 6a00 	vstr	s13, [r0]
 800af1a:	ed82 1a00 	vstr	s2, [r2]
 800af1e:	ed80 5a01 	vstr	s10, [r0, #4]
 800af22:	4452      	add	r2, sl
 800af24:	ed01 3a01 	vstr	s6, [r1, #-4]
 800af28:	4450      	add	r0, sl
 800af2a:	edc7 2a00 	vstr	s5, [r7]
 800af2e:	edc4 4a00 	vstr	s9, [r4]
 800af32:	ed83 7a00 	vstr	s14, [r3]
 800af36:	edc1 5a00 	vstr	s11, [r1]
 800af3a:	edc7 3a01 	vstr	s7, [r7, #4]
 800af3e:	4451      	add	r1, sl
 800af40:	ed84 6a01 	vstr	s12, [r4, #4]
 800af44:	4457      	add	r7, sl
 800af46:	edc3 7a01 	vstr	s15, [r3, #4]
 800af4a:	4454      	add	r4, sl
 800af4c:	4453      	add	r3, sl
 800af4e:	f63f af44 	bhi.w	800adda <arm_radix8_butterfly_f32+0x86>
 800af52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af54:	2b07      	cmp	r3, #7
 800af56:	f240 81b7 	bls.w	800b2c8 <arm_radix8_butterfly_f32+0x574>
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	9903      	ldr	r1, [sp, #12]
 800af5e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af60:	9e05      	ldr	r6, [sp, #20]
 800af62:	9a04      	ldr	r2, [sp, #16]
 800af64:	f103 0c08 	add.w	ip, r3, #8
 800af68:	9b02      	ldr	r3, [sp, #8]
 800af6a:	3108      	adds	r1, #8
 800af6c:	f108 0808 	add.w	r8, r8, #8
 800af70:	1841      	adds	r1, r0, r1
 800af72:	3608      	adds	r6, #8
 800af74:	330c      	adds	r3, #12
 800af76:	4604      	mov	r4, r0
 800af78:	4444      	add	r4, r8
 800af7a:	18c3      	adds	r3, r0, r3
 800af7c:	9109      	str	r1, [sp, #36]	; 0x24
 800af7e:	1981      	adds	r1, r0, r6
 800af80:	f10e 0e08 	add.w	lr, lr, #8
 800af84:	3208      	adds	r2, #8
 800af86:	940b      	str	r4, [sp, #44]	; 0x2c
 800af88:	9107      	str	r1, [sp, #28]
 800af8a:	4604      	mov	r4, r0
 800af8c:	4601      	mov	r1, r0
 800af8e:	9304      	str	r3, [sp, #16]
 800af90:	f100 030c 	add.w	r3, r0, #12
 800af94:	4474      	add	r4, lr
 800af96:	f04f 0801 	mov.w	r8, #1
 800af9a:	1882      	adds	r2, r0, r2
 800af9c:	4461      	add	r1, ip
 800af9e:	9305      	str	r3, [sp, #20]
 800afa0:	464b      	mov	r3, r9
 800afa2:	940a      	str	r4, [sp, #40]	; 0x28
 800afa4:	46c1      	mov	r9, r8
 800afa6:	9208      	str	r2, [sp, #32]
 800afa8:	46d8      	mov	r8, fp
 800afaa:	9106      	str	r1, [sp, #24]
 800afac:	f04f 0e00 	mov.w	lr, #0
 800afb0:	469b      	mov	fp, r3
 800afb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afb6:	449e      	add	lr, r3
 800afb8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800afbc:	441a      	add	r2, r3
 800afbe:	920e      	str	r2, [sp, #56]	; 0x38
 800afc0:	441a      	add	r2, r3
 800afc2:	18d4      	adds	r4, r2, r3
 800afc4:	18e5      	adds	r5, r4, r3
 800afc6:	18ee      	adds	r6, r5, r3
 800afc8:	18f7      	adds	r7, r6, r3
 800afca:	eb07 0c03 	add.w	ip, r7, r3
 800afce:	920d      	str	r2, [sp, #52]	; 0x34
 800afd0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800afd4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800afd8:	910c      	str	r1, [sp, #48]	; 0x30
 800afda:	4419      	add	r1, r3
 800afdc:	9103      	str	r1, [sp, #12]
 800afde:	4419      	add	r1, r3
 800afe0:	18ca      	adds	r2, r1, r3
 800afe2:	9202      	str	r2, [sp, #8]
 800afe4:	441a      	add	r2, r3
 800afe6:	18d0      	adds	r0, r2, r3
 800afe8:	ed92 ea01 	vldr	s28, [r2, #4]
 800afec:	9a02      	ldr	r2, [sp, #8]
 800afee:	edd4 7a00 	vldr	s15, [r4]
 800aff2:	edd2 da01 	vldr	s27, [r2, #4]
 800aff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aff8:	ed91 da01 	vldr	s26, [r1, #4]
 800affc:	ed92 ca01 	vldr	s24, [r2, #4]
 800b000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b002:	9903      	ldr	r1, [sp, #12]
 800b004:	edcd 7a03 	vstr	s15, [sp, #12]
 800b008:	edd2 7a00 	vldr	s15, [r2]
 800b00c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b00e:	edcd 7a02 	vstr	s15, [sp, #8]
 800b012:	edd2 7a00 	vldr	s15, [r2]
 800b016:	edd0 ea01 	vldr	s29, [r0, #4]
 800b01a:	edd1 ca01 	vldr	s25, [r1, #4]
 800b01e:	eddc ba00 	vldr	s23, [ip]
 800b022:	edd7 aa00 	vldr	s21, [r7]
 800b026:	ed96 aa00 	vldr	s20, [r6]
 800b02a:	edd5 9a00 	vldr	s19, [r5]
 800b02e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b032:	4403      	add	r3, r0
 800b034:	ed93 fa01 	vldr	s30, [r3, #4]
 800b038:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b03c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b040:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b048:	46cc      	mov	ip, r9
 800b04a:	e001      	b.n	800b050 <arm_radix8_butterfly_f32+0x2fc>
 800b04c:	3f3504f3 	.word	0x3f3504f3
 800b050:	ed91 6a00 	vldr	s12, [r1]
 800b054:	ed93 5a00 	vldr	s10, [r3]
 800b058:	edd0 fa00 	vldr	s31, [r0]
 800b05c:	edd4 7a00 	vldr	s15, [r4]
 800b060:	ed95 7a00 	vldr	s14, [r5]
 800b064:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b068:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b06c:	ed92 2a00 	vldr	s4, [r2]
 800b070:	ed96 0a00 	vldr	s0, [r6]
 800b074:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b078:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b07c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b080:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b084:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b088:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b08c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b090:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b098:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b09c:	edd4 8a01 	vldr	s17, [r4, #4]
 800b0a0:	ed92 9a01 	vldr	s18, [r2, #4]
 800b0a4:	edd7 0a00 	vldr	s1, [r7]
 800b0a8:	edd1 2a01 	vldr	s5, [r1, #4]
 800b0ac:	ed95 7a01 	vldr	s14, [r5, #4]
 800b0b0:	ed93 6a01 	vldr	s12, [r3, #4]
 800b0b4:	edd0 5a01 	vldr	s11, [r0, #4]
 800b0b8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b0bc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b0c0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b0c4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b0c8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b0cc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b0d0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b0d4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b0d8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b0dc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b0e0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b0e4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b0e8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b0ec:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b0f0:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b0f4:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b0f8:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b0fc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b100:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b104:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b108:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b10c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b110:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b114:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b118:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b11c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b120:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b124:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b128:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b12c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b130:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b134:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b138:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b13c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b140:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b144:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b148:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b14c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b150:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b154:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b158:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b15c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b160:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b164:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b168:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b16c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b170:	eddd 1a02 	vldr	s3, [sp, #8]
 800b174:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b178:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b17c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b180:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b184:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b188:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b18c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b190:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b194:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b198:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b19c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b1a0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b1a4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b1a8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b1ac:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b1b0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b1b4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b1b8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b1bc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b1c0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b1c4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b1c8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b1cc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b1d0:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b1d4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b1d8:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b1dc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b1e0:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b1e4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b1e8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b1ec:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b1f0:	eddd 5a03 	vldr	s11, [sp, #12]
 800b1f4:	edc6 fa00 	vstr	s31, [r6]
 800b1f8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b1fc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b200:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b204:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b208:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b20c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b210:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b214:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b218:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b21c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b220:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b224:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b228:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b22c:	44c4      	add	ip, r8
 800b22e:	45e3      	cmp	fp, ip
 800b230:	edc3 3a00 	vstr	s7, [r3]
 800b234:	edc3 6a01 	vstr	s13, [r3, #4]
 800b238:	4456      	add	r6, sl
 800b23a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b23e:	edc7 0a00 	vstr	s1, [r7]
 800b242:	4453      	add	r3, sl
 800b244:	ed80 2a00 	vstr	s4, [r0]
 800b248:	edc0 2a01 	vstr	s5, [r0, #4]
 800b24c:	4457      	add	r7, sl
 800b24e:	edc2 1a00 	vstr	s3, [r2]
 800b252:	ed82 7a01 	vstr	s14, [r2, #4]
 800b256:	4450      	add	r0, sl
 800b258:	ed85 8a00 	vstr	s16, [r5]
 800b25c:	ed85 0a01 	vstr	s0, [r5, #4]
 800b260:	4452      	add	r2, sl
 800b262:	edc1 4a00 	vstr	s9, [r1]
 800b266:	4455      	add	r5, sl
 800b268:	ed81 3a01 	vstr	s6, [r1, #4]
 800b26c:	edc4 8a00 	vstr	s17, [r4]
 800b270:	ed84 6a01 	vstr	s12, [r4, #4]
 800b274:	4451      	add	r1, sl
 800b276:	4454      	add	r4, sl
 800b278:	f63f aeea 	bhi.w	800b050 <arm_radix8_butterfly_f32+0x2fc>
 800b27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b27e:	3308      	adds	r3, #8
 800b280:	930b      	str	r3, [sp, #44]	; 0x2c
 800b282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b284:	3308      	adds	r3, #8
 800b286:	930a      	str	r3, [sp, #40]	; 0x28
 800b288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28a:	3308      	adds	r3, #8
 800b28c:	9309      	str	r3, [sp, #36]	; 0x24
 800b28e:	9b08      	ldr	r3, [sp, #32]
 800b290:	3308      	adds	r3, #8
 800b292:	9308      	str	r3, [sp, #32]
 800b294:	9b07      	ldr	r3, [sp, #28]
 800b296:	3308      	adds	r3, #8
 800b298:	9307      	str	r3, [sp, #28]
 800b29a:	9b06      	ldr	r3, [sp, #24]
 800b29c:	3308      	adds	r3, #8
 800b29e:	9306      	str	r3, [sp, #24]
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	9b04      	ldr	r3, [sp, #16]
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ae:	f109 0901 	add.w	r9, r9, #1
 800b2b2:	454b      	cmp	r3, r9
 800b2b4:	f47f ae7d 	bne.w	800afb2 <arm_radix8_butterfly_f32+0x25e>
 800b2b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	46d9      	mov	r9, fp
 800b2c0:	9310      	str	r3, [sp, #64]	; 0x40
 800b2c2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b2c6:	e554      	b.n	800ad72 <arm_radix8_butterfly_f32+0x1e>
 800b2c8:	b015      	add	sp, #84	; 0x54
 800b2ca:	ecbd 8b10 	vpop	{d8-d15}
 800b2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d2:	bf00      	nop

0800b2d4 <__errno>:
 800b2d4:	4b01      	ldr	r3, [pc, #4]	; (800b2dc <__errno+0x8>)
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	20000170 	.word	0x20000170

0800b2e0 <__sflush_r>:
 800b2e0:	898a      	ldrh	r2, [r1, #12]
 800b2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	0710      	lsls	r0, r2, #28
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	d458      	bmi.n	800b3a0 <__sflush_r+0xc0>
 800b2ee:	684b      	ldr	r3, [r1, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dc05      	bgt.n	800b300 <__sflush_r+0x20>
 800b2f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dc02      	bgt.n	800b300 <__sflush_r+0x20>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b302:	2e00      	cmp	r6, #0
 800b304:	d0f9      	beq.n	800b2fa <__sflush_r+0x1a>
 800b306:	2300      	movs	r3, #0
 800b308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b30c:	682f      	ldr	r7, [r5, #0]
 800b30e:	602b      	str	r3, [r5, #0]
 800b310:	d032      	beq.n	800b378 <__sflush_r+0x98>
 800b312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b314:	89a3      	ldrh	r3, [r4, #12]
 800b316:	075a      	lsls	r2, r3, #29
 800b318:	d505      	bpl.n	800b326 <__sflush_r+0x46>
 800b31a:	6863      	ldr	r3, [r4, #4]
 800b31c:	1ac0      	subs	r0, r0, r3
 800b31e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b320:	b10b      	cbz	r3, 800b326 <__sflush_r+0x46>
 800b322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b324:	1ac0      	subs	r0, r0, r3
 800b326:	2300      	movs	r3, #0
 800b328:	4602      	mov	r2, r0
 800b32a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b32c:	6a21      	ldr	r1, [r4, #32]
 800b32e:	4628      	mov	r0, r5
 800b330:	47b0      	blx	r6
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	d106      	bne.n	800b346 <__sflush_r+0x66>
 800b338:	6829      	ldr	r1, [r5, #0]
 800b33a:	291d      	cmp	r1, #29
 800b33c:	d82c      	bhi.n	800b398 <__sflush_r+0xb8>
 800b33e:	4a2a      	ldr	r2, [pc, #168]	; (800b3e8 <__sflush_r+0x108>)
 800b340:	40ca      	lsrs	r2, r1
 800b342:	07d6      	lsls	r6, r2, #31
 800b344:	d528      	bpl.n	800b398 <__sflush_r+0xb8>
 800b346:	2200      	movs	r2, #0
 800b348:	6062      	str	r2, [r4, #4]
 800b34a:	04d9      	lsls	r1, r3, #19
 800b34c:	6922      	ldr	r2, [r4, #16]
 800b34e:	6022      	str	r2, [r4, #0]
 800b350:	d504      	bpl.n	800b35c <__sflush_r+0x7c>
 800b352:	1c42      	adds	r2, r0, #1
 800b354:	d101      	bne.n	800b35a <__sflush_r+0x7a>
 800b356:	682b      	ldr	r3, [r5, #0]
 800b358:	b903      	cbnz	r3, 800b35c <__sflush_r+0x7c>
 800b35a:	6560      	str	r0, [r4, #84]	; 0x54
 800b35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b35e:	602f      	str	r7, [r5, #0]
 800b360:	2900      	cmp	r1, #0
 800b362:	d0ca      	beq.n	800b2fa <__sflush_r+0x1a>
 800b364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b368:	4299      	cmp	r1, r3
 800b36a:	d002      	beq.n	800b372 <__sflush_r+0x92>
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 f9bf 	bl	800b6f0 <_free_r>
 800b372:	2000      	movs	r0, #0
 800b374:	6360      	str	r0, [r4, #52]	; 0x34
 800b376:	e7c1      	b.n	800b2fc <__sflush_r+0x1c>
 800b378:	6a21      	ldr	r1, [r4, #32]
 800b37a:	2301      	movs	r3, #1
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b0      	blx	r6
 800b380:	1c41      	adds	r1, r0, #1
 800b382:	d1c7      	bne.n	800b314 <__sflush_r+0x34>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0c4      	beq.n	800b314 <__sflush_r+0x34>
 800b38a:	2b1d      	cmp	r3, #29
 800b38c:	d001      	beq.n	800b392 <__sflush_r+0xb2>
 800b38e:	2b16      	cmp	r3, #22
 800b390:	d101      	bne.n	800b396 <__sflush_r+0xb6>
 800b392:	602f      	str	r7, [r5, #0]
 800b394:	e7b1      	b.n	800b2fa <__sflush_r+0x1a>
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	e7ad      	b.n	800b2fc <__sflush_r+0x1c>
 800b3a0:	690f      	ldr	r7, [r1, #16]
 800b3a2:	2f00      	cmp	r7, #0
 800b3a4:	d0a9      	beq.n	800b2fa <__sflush_r+0x1a>
 800b3a6:	0793      	lsls	r3, r2, #30
 800b3a8:	680e      	ldr	r6, [r1, #0]
 800b3aa:	bf08      	it	eq
 800b3ac:	694b      	ldreq	r3, [r1, #20]
 800b3ae:	600f      	str	r7, [r1, #0]
 800b3b0:	bf18      	it	ne
 800b3b2:	2300      	movne	r3, #0
 800b3b4:	eba6 0807 	sub.w	r8, r6, r7
 800b3b8:	608b      	str	r3, [r1, #8]
 800b3ba:	f1b8 0f00 	cmp.w	r8, #0
 800b3be:	dd9c      	ble.n	800b2fa <__sflush_r+0x1a>
 800b3c0:	6a21      	ldr	r1, [r4, #32]
 800b3c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3c4:	4643      	mov	r3, r8
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b0      	blx	r6
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	dc06      	bgt.n	800b3de <__sflush_r+0xfe>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	e78e      	b.n	800b2fc <__sflush_r+0x1c>
 800b3de:	4407      	add	r7, r0
 800b3e0:	eba8 0800 	sub.w	r8, r8, r0
 800b3e4:	e7e9      	b.n	800b3ba <__sflush_r+0xda>
 800b3e6:	bf00      	nop
 800b3e8:	20400001 	.word	0x20400001

0800b3ec <_fflush_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	690b      	ldr	r3, [r1, #16]
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	b913      	cbnz	r3, 800b3fc <_fflush_r+0x10>
 800b3f6:	2500      	movs	r5, #0
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	b118      	cbz	r0, 800b406 <_fflush_r+0x1a>
 800b3fe:	6983      	ldr	r3, [r0, #24]
 800b400:	b90b      	cbnz	r3, 800b406 <_fflush_r+0x1a>
 800b402:	f000 f899 	bl	800b538 <__sinit>
 800b406:	4b14      	ldr	r3, [pc, #80]	; (800b458 <_fflush_r+0x6c>)
 800b408:	429c      	cmp	r4, r3
 800b40a:	d11b      	bne.n	800b444 <_fflush_r+0x58>
 800b40c:	686c      	ldr	r4, [r5, #4]
 800b40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0ef      	beq.n	800b3f6 <_fflush_r+0xa>
 800b416:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b418:	07d0      	lsls	r0, r2, #31
 800b41a:	d404      	bmi.n	800b426 <_fflush_r+0x3a>
 800b41c:	0599      	lsls	r1, r3, #22
 800b41e:	d402      	bmi.n	800b426 <_fflush_r+0x3a>
 800b420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b422:	f000 f94c 	bl	800b6be <__retarget_lock_acquire_recursive>
 800b426:	4628      	mov	r0, r5
 800b428:	4621      	mov	r1, r4
 800b42a:	f7ff ff59 	bl	800b2e0 <__sflush_r>
 800b42e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b430:	07da      	lsls	r2, r3, #31
 800b432:	4605      	mov	r5, r0
 800b434:	d4e0      	bmi.n	800b3f8 <_fflush_r+0xc>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	059b      	lsls	r3, r3, #22
 800b43a:	d4dd      	bmi.n	800b3f8 <_fflush_r+0xc>
 800b43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43e:	f000 f93f 	bl	800b6c0 <__retarget_lock_release_recursive>
 800b442:	e7d9      	b.n	800b3f8 <_fflush_r+0xc>
 800b444:	4b05      	ldr	r3, [pc, #20]	; (800b45c <_fflush_r+0x70>)
 800b446:	429c      	cmp	r4, r3
 800b448:	d101      	bne.n	800b44e <_fflush_r+0x62>
 800b44a:	68ac      	ldr	r4, [r5, #8]
 800b44c:	e7df      	b.n	800b40e <_fflush_r+0x22>
 800b44e:	4b04      	ldr	r3, [pc, #16]	; (800b460 <_fflush_r+0x74>)
 800b450:	429c      	cmp	r4, r3
 800b452:	bf08      	it	eq
 800b454:	68ec      	ldreq	r4, [r5, #12]
 800b456:	e7da      	b.n	800b40e <_fflush_r+0x22>
 800b458:	0802abf8 	.word	0x0802abf8
 800b45c:	0802ac18 	.word	0x0802ac18
 800b460:	0802abd8 	.word	0x0802abd8

0800b464 <fflush>:
 800b464:	4601      	mov	r1, r0
 800b466:	b920      	cbnz	r0, 800b472 <fflush+0xe>
 800b468:	4b04      	ldr	r3, [pc, #16]	; (800b47c <fflush+0x18>)
 800b46a:	4905      	ldr	r1, [pc, #20]	; (800b480 <fflush+0x1c>)
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	f000 b8e1 	b.w	800b634 <_fwalk_reent>
 800b472:	4b04      	ldr	r3, [pc, #16]	; (800b484 <fflush+0x20>)
 800b474:	6818      	ldr	r0, [r3, #0]
 800b476:	f7ff bfb9 	b.w	800b3ec <_fflush_r>
 800b47a:	bf00      	nop
 800b47c:	0802ac38 	.word	0x0802ac38
 800b480:	0800b3ed 	.word	0x0800b3ed
 800b484:	20000170 	.word	0x20000170

0800b488 <std>:
 800b488:	2300      	movs	r3, #0
 800b48a:	b510      	push	{r4, lr}
 800b48c:	4604      	mov	r4, r0
 800b48e:	e9c0 3300 	strd	r3, r3, [r0]
 800b492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b496:	6083      	str	r3, [r0, #8]
 800b498:	8181      	strh	r1, [r0, #12]
 800b49a:	6643      	str	r3, [r0, #100]	; 0x64
 800b49c:	81c2      	strh	r2, [r0, #14]
 800b49e:	6183      	str	r3, [r0, #24]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	2208      	movs	r2, #8
 800b4a4:	305c      	adds	r0, #92	; 0x5c
 800b4a6:	f000 f91a 	bl	800b6de <memset>
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <std+0x38>)
 800b4ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b4ae:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <std+0x3c>)
 800b4b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4b2:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <std+0x40>)
 800b4b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4b6:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <std+0x44>)
 800b4b8:	6224      	str	r4, [r4, #32]
 800b4ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b4bc:	bd10      	pop	{r4, pc}
 800b4be:	bf00      	nop
 800b4c0:	0800c32d 	.word	0x0800c32d
 800b4c4:	0800c34f 	.word	0x0800c34f
 800b4c8:	0800c387 	.word	0x0800c387
 800b4cc:	0800c3ab 	.word	0x0800c3ab

0800b4d0 <_cleanup_r>:
 800b4d0:	4901      	ldr	r1, [pc, #4]	; (800b4d8 <_cleanup_r+0x8>)
 800b4d2:	f000 b8af 	b.w	800b634 <_fwalk_reent>
 800b4d6:	bf00      	nop
 800b4d8:	0800b3ed 	.word	0x0800b3ed

0800b4dc <__sfmoreglue>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	2268      	movs	r2, #104	; 0x68
 800b4e0:	1e4d      	subs	r5, r1, #1
 800b4e2:	4355      	muls	r5, r2
 800b4e4:	460e      	mov	r6, r1
 800b4e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4ea:	f000 f96d 	bl	800b7c8 <_malloc_r>
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	b140      	cbz	r0, 800b504 <__sfmoreglue+0x28>
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b4f8:	300c      	adds	r0, #12
 800b4fa:	60a0      	str	r0, [r4, #8]
 800b4fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b500:	f000 f8ed 	bl	800b6de <memset>
 800b504:	4620      	mov	r0, r4
 800b506:	bd70      	pop	{r4, r5, r6, pc}

0800b508 <__sfp_lock_acquire>:
 800b508:	4801      	ldr	r0, [pc, #4]	; (800b510 <__sfp_lock_acquire+0x8>)
 800b50a:	f000 b8d8 	b.w	800b6be <__retarget_lock_acquire_recursive>
 800b50e:	bf00      	nop
 800b510:	2000fb39 	.word	0x2000fb39

0800b514 <__sfp_lock_release>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__sfp_lock_release+0x8>)
 800b516:	f000 b8d3 	b.w	800b6c0 <__retarget_lock_release_recursive>
 800b51a:	bf00      	nop
 800b51c:	2000fb39 	.word	0x2000fb39

0800b520 <__sinit_lock_acquire>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__sinit_lock_acquire+0x8>)
 800b522:	f000 b8cc 	b.w	800b6be <__retarget_lock_acquire_recursive>
 800b526:	bf00      	nop
 800b528:	2000fb3a 	.word	0x2000fb3a

0800b52c <__sinit_lock_release>:
 800b52c:	4801      	ldr	r0, [pc, #4]	; (800b534 <__sinit_lock_release+0x8>)
 800b52e:	f000 b8c7 	b.w	800b6c0 <__retarget_lock_release_recursive>
 800b532:	bf00      	nop
 800b534:	2000fb3a 	.word	0x2000fb3a

0800b538 <__sinit>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	4604      	mov	r4, r0
 800b53c:	f7ff fff0 	bl	800b520 <__sinit_lock_acquire>
 800b540:	69a3      	ldr	r3, [r4, #24]
 800b542:	b11b      	cbz	r3, 800b54c <__sinit+0x14>
 800b544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b548:	f7ff bff0 	b.w	800b52c <__sinit_lock_release>
 800b54c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b550:	6523      	str	r3, [r4, #80]	; 0x50
 800b552:	4b13      	ldr	r3, [pc, #76]	; (800b5a0 <__sinit+0x68>)
 800b554:	4a13      	ldr	r2, [pc, #76]	; (800b5a4 <__sinit+0x6c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	62a2      	str	r2, [r4, #40]	; 0x28
 800b55a:	42a3      	cmp	r3, r4
 800b55c:	bf04      	itt	eq
 800b55e:	2301      	moveq	r3, #1
 800b560:	61a3      	streq	r3, [r4, #24]
 800b562:	4620      	mov	r0, r4
 800b564:	f000 f820 	bl	800b5a8 <__sfp>
 800b568:	6060      	str	r0, [r4, #4]
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 f81c 	bl	800b5a8 <__sfp>
 800b570:	60a0      	str	r0, [r4, #8]
 800b572:	4620      	mov	r0, r4
 800b574:	f000 f818 	bl	800b5a8 <__sfp>
 800b578:	2200      	movs	r2, #0
 800b57a:	60e0      	str	r0, [r4, #12]
 800b57c:	2104      	movs	r1, #4
 800b57e:	6860      	ldr	r0, [r4, #4]
 800b580:	f7ff ff82 	bl	800b488 <std>
 800b584:	68a0      	ldr	r0, [r4, #8]
 800b586:	2201      	movs	r2, #1
 800b588:	2109      	movs	r1, #9
 800b58a:	f7ff ff7d 	bl	800b488 <std>
 800b58e:	68e0      	ldr	r0, [r4, #12]
 800b590:	2202      	movs	r2, #2
 800b592:	2112      	movs	r1, #18
 800b594:	f7ff ff78 	bl	800b488 <std>
 800b598:	2301      	movs	r3, #1
 800b59a:	61a3      	str	r3, [r4, #24]
 800b59c:	e7d2      	b.n	800b544 <__sinit+0xc>
 800b59e:	bf00      	nop
 800b5a0:	0802ac38 	.word	0x0802ac38
 800b5a4:	0800b4d1 	.word	0x0800b4d1

0800b5a8 <__sfp>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	4607      	mov	r7, r0
 800b5ac:	f7ff ffac 	bl	800b508 <__sfp_lock_acquire>
 800b5b0:	4b1e      	ldr	r3, [pc, #120]	; (800b62c <__sfp+0x84>)
 800b5b2:	681e      	ldr	r6, [r3, #0]
 800b5b4:	69b3      	ldr	r3, [r6, #24]
 800b5b6:	b913      	cbnz	r3, 800b5be <__sfp+0x16>
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff ffbd 	bl	800b538 <__sinit>
 800b5be:	3648      	adds	r6, #72	; 0x48
 800b5c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	d503      	bpl.n	800b5d0 <__sfp+0x28>
 800b5c8:	6833      	ldr	r3, [r6, #0]
 800b5ca:	b30b      	cbz	r3, 800b610 <__sfp+0x68>
 800b5cc:	6836      	ldr	r6, [r6, #0]
 800b5ce:	e7f7      	b.n	800b5c0 <__sfp+0x18>
 800b5d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5d4:	b9d5      	cbnz	r5, 800b60c <__sfp+0x64>
 800b5d6:	4b16      	ldr	r3, [pc, #88]	; (800b630 <__sfp+0x88>)
 800b5d8:	60e3      	str	r3, [r4, #12]
 800b5da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5de:	6665      	str	r5, [r4, #100]	; 0x64
 800b5e0:	f000 f86c 	bl	800b6bc <__retarget_lock_init_recursive>
 800b5e4:	f7ff ff96 	bl	800b514 <__sfp_lock_release>
 800b5e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5f0:	6025      	str	r5, [r4, #0]
 800b5f2:	61a5      	str	r5, [r4, #24]
 800b5f4:	2208      	movs	r2, #8
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5fc:	f000 f86f 	bl	800b6de <memset>
 800b600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b608:	4620      	mov	r0, r4
 800b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b60c:	3468      	adds	r4, #104	; 0x68
 800b60e:	e7d9      	b.n	800b5c4 <__sfp+0x1c>
 800b610:	2104      	movs	r1, #4
 800b612:	4638      	mov	r0, r7
 800b614:	f7ff ff62 	bl	800b4dc <__sfmoreglue>
 800b618:	4604      	mov	r4, r0
 800b61a:	6030      	str	r0, [r6, #0]
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1d5      	bne.n	800b5cc <__sfp+0x24>
 800b620:	f7ff ff78 	bl	800b514 <__sfp_lock_release>
 800b624:	230c      	movs	r3, #12
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	e7ee      	b.n	800b608 <__sfp+0x60>
 800b62a:	bf00      	nop
 800b62c:	0802ac38 	.word	0x0802ac38
 800b630:	ffff0001 	.word	0xffff0001

0800b634 <_fwalk_reent>:
 800b634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b638:	4606      	mov	r6, r0
 800b63a:	4688      	mov	r8, r1
 800b63c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b640:	2700      	movs	r7, #0
 800b642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b646:	f1b9 0901 	subs.w	r9, r9, #1
 800b64a:	d505      	bpl.n	800b658 <_fwalk_reent+0x24>
 800b64c:	6824      	ldr	r4, [r4, #0]
 800b64e:	2c00      	cmp	r4, #0
 800b650:	d1f7      	bne.n	800b642 <_fwalk_reent+0xe>
 800b652:	4638      	mov	r0, r7
 800b654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b658:	89ab      	ldrh	r3, [r5, #12]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d907      	bls.n	800b66e <_fwalk_reent+0x3a>
 800b65e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b662:	3301      	adds	r3, #1
 800b664:	d003      	beq.n	800b66e <_fwalk_reent+0x3a>
 800b666:	4629      	mov	r1, r5
 800b668:	4630      	mov	r0, r6
 800b66a:	47c0      	blx	r8
 800b66c:	4307      	orrs	r7, r0
 800b66e:	3568      	adds	r5, #104	; 0x68
 800b670:	e7e9      	b.n	800b646 <_fwalk_reent+0x12>
	...

0800b674 <__libc_init_array>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	4d0d      	ldr	r5, [pc, #52]	; (800b6ac <__libc_init_array+0x38>)
 800b678:	4c0d      	ldr	r4, [pc, #52]	; (800b6b0 <__libc_init_array+0x3c>)
 800b67a:	1b64      	subs	r4, r4, r5
 800b67c:	10a4      	asrs	r4, r4, #2
 800b67e:	2600      	movs	r6, #0
 800b680:	42a6      	cmp	r6, r4
 800b682:	d109      	bne.n	800b698 <__libc_init_array+0x24>
 800b684:	4d0b      	ldr	r5, [pc, #44]	; (800b6b4 <__libc_init_array+0x40>)
 800b686:	4c0c      	ldr	r4, [pc, #48]	; (800b6b8 <__libc_init_array+0x44>)
 800b688:	f003 fd74 	bl	800f174 <_init>
 800b68c:	1b64      	subs	r4, r4, r5
 800b68e:	10a4      	asrs	r4, r4, #2
 800b690:	2600      	movs	r6, #0
 800b692:	42a6      	cmp	r6, r4
 800b694:	d105      	bne.n	800b6a2 <__libc_init_array+0x2e>
 800b696:	bd70      	pop	{r4, r5, r6, pc}
 800b698:	f855 3b04 	ldr.w	r3, [r5], #4
 800b69c:	4798      	blx	r3
 800b69e:	3601      	adds	r6, #1
 800b6a0:	e7ee      	b.n	800b680 <__libc_init_array+0xc>
 800b6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a6:	4798      	blx	r3
 800b6a8:	3601      	adds	r6, #1
 800b6aa:	e7f2      	b.n	800b692 <__libc_init_array+0x1e>
 800b6ac:	0802aff0 	.word	0x0802aff0
 800b6b0:	0802aff0 	.word	0x0802aff0
 800b6b4:	0802aff0 	.word	0x0802aff0
 800b6b8:	0802aff4 	.word	0x0802aff4

0800b6bc <__retarget_lock_init_recursive>:
 800b6bc:	4770      	bx	lr

0800b6be <__retarget_lock_acquire_recursive>:
 800b6be:	4770      	bx	lr

0800b6c0 <__retarget_lock_release_recursive>:
 800b6c0:	4770      	bx	lr

0800b6c2 <memcpy>:
 800b6c2:	440a      	add	r2, r1
 800b6c4:	4291      	cmp	r1, r2
 800b6c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6ca:	d100      	bne.n	800b6ce <memcpy+0xc>
 800b6cc:	4770      	bx	lr
 800b6ce:	b510      	push	{r4, lr}
 800b6d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6d8:	4291      	cmp	r1, r2
 800b6da:	d1f9      	bne.n	800b6d0 <memcpy+0xe>
 800b6dc:	bd10      	pop	{r4, pc}

0800b6de <memset>:
 800b6de:	4402      	add	r2, r0
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d100      	bne.n	800b6e8 <memset+0xa>
 800b6e6:	4770      	bx	lr
 800b6e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b6ec:	e7f9      	b.n	800b6e2 <memset+0x4>
	...

0800b6f0 <_free_r>:
 800b6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6f2:	2900      	cmp	r1, #0
 800b6f4:	d044      	beq.n	800b780 <_free_r+0x90>
 800b6f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6fa:	9001      	str	r0, [sp, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b702:	bfb8      	it	lt
 800b704:	18e4      	addlt	r4, r4, r3
 800b706:	f001 fe35 	bl	800d374 <__malloc_lock>
 800b70a:	4a1e      	ldr	r2, [pc, #120]	; (800b784 <_free_r+0x94>)
 800b70c:	9801      	ldr	r0, [sp, #4]
 800b70e:	6813      	ldr	r3, [r2, #0]
 800b710:	b933      	cbnz	r3, 800b720 <_free_r+0x30>
 800b712:	6063      	str	r3, [r4, #4]
 800b714:	6014      	str	r4, [r2, #0]
 800b716:	b003      	add	sp, #12
 800b718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b71c:	f001 be30 	b.w	800d380 <__malloc_unlock>
 800b720:	42a3      	cmp	r3, r4
 800b722:	d908      	bls.n	800b736 <_free_r+0x46>
 800b724:	6825      	ldr	r5, [r4, #0]
 800b726:	1961      	adds	r1, r4, r5
 800b728:	428b      	cmp	r3, r1
 800b72a:	bf01      	itttt	eq
 800b72c:	6819      	ldreq	r1, [r3, #0]
 800b72e:	685b      	ldreq	r3, [r3, #4]
 800b730:	1949      	addeq	r1, r1, r5
 800b732:	6021      	streq	r1, [r4, #0]
 800b734:	e7ed      	b.n	800b712 <_free_r+0x22>
 800b736:	461a      	mov	r2, r3
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	b10b      	cbz	r3, 800b740 <_free_r+0x50>
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	d9fa      	bls.n	800b736 <_free_r+0x46>
 800b740:	6811      	ldr	r1, [r2, #0]
 800b742:	1855      	adds	r5, r2, r1
 800b744:	42a5      	cmp	r5, r4
 800b746:	d10b      	bne.n	800b760 <_free_r+0x70>
 800b748:	6824      	ldr	r4, [r4, #0]
 800b74a:	4421      	add	r1, r4
 800b74c:	1854      	adds	r4, r2, r1
 800b74e:	42a3      	cmp	r3, r4
 800b750:	6011      	str	r1, [r2, #0]
 800b752:	d1e0      	bne.n	800b716 <_free_r+0x26>
 800b754:	681c      	ldr	r4, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	6053      	str	r3, [r2, #4]
 800b75a:	4421      	add	r1, r4
 800b75c:	6011      	str	r1, [r2, #0]
 800b75e:	e7da      	b.n	800b716 <_free_r+0x26>
 800b760:	d902      	bls.n	800b768 <_free_r+0x78>
 800b762:	230c      	movs	r3, #12
 800b764:	6003      	str	r3, [r0, #0]
 800b766:	e7d6      	b.n	800b716 <_free_r+0x26>
 800b768:	6825      	ldr	r5, [r4, #0]
 800b76a:	1961      	adds	r1, r4, r5
 800b76c:	428b      	cmp	r3, r1
 800b76e:	bf04      	itt	eq
 800b770:	6819      	ldreq	r1, [r3, #0]
 800b772:	685b      	ldreq	r3, [r3, #4]
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	bf04      	itt	eq
 800b778:	1949      	addeq	r1, r1, r5
 800b77a:	6021      	streq	r1, [r4, #0]
 800b77c:	6054      	str	r4, [r2, #4]
 800b77e:	e7ca      	b.n	800b716 <_free_r+0x26>
 800b780:	b003      	add	sp, #12
 800b782:	bd30      	pop	{r4, r5, pc}
 800b784:	2000fb3c 	.word	0x2000fb3c

0800b788 <sbrk_aligned>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	4e0e      	ldr	r6, [pc, #56]	; (800b7c4 <sbrk_aligned+0x3c>)
 800b78c:	460c      	mov	r4, r1
 800b78e:	6831      	ldr	r1, [r6, #0]
 800b790:	4605      	mov	r5, r0
 800b792:	b911      	cbnz	r1, 800b79a <sbrk_aligned+0x12>
 800b794:	f000 fd9a 	bl	800c2cc <_sbrk_r>
 800b798:	6030      	str	r0, [r6, #0]
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f000 fd95 	bl	800c2cc <_sbrk_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d00a      	beq.n	800b7bc <sbrk_aligned+0x34>
 800b7a6:	1cc4      	adds	r4, r0, #3
 800b7a8:	f024 0403 	bic.w	r4, r4, #3
 800b7ac:	42a0      	cmp	r0, r4
 800b7ae:	d007      	beq.n	800b7c0 <sbrk_aligned+0x38>
 800b7b0:	1a21      	subs	r1, r4, r0
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 fd8a 	bl	800c2cc <_sbrk_r>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d101      	bne.n	800b7c0 <sbrk_aligned+0x38>
 800b7bc:	f04f 34ff 	mov.w	r4, #4294967295
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	2000fb40 	.word	0x2000fb40

0800b7c8 <_malloc_r>:
 800b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7cc:	1ccd      	adds	r5, r1, #3
 800b7ce:	f025 0503 	bic.w	r5, r5, #3
 800b7d2:	3508      	adds	r5, #8
 800b7d4:	2d0c      	cmp	r5, #12
 800b7d6:	bf38      	it	cc
 800b7d8:	250c      	movcc	r5, #12
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	4607      	mov	r7, r0
 800b7de:	db01      	blt.n	800b7e4 <_malloc_r+0x1c>
 800b7e0:	42a9      	cmp	r1, r5
 800b7e2:	d905      	bls.n	800b7f0 <_malloc_r+0x28>
 800b7e4:	230c      	movs	r3, #12
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	4e2e      	ldr	r6, [pc, #184]	; (800b8ac <_malloc_r+0xe4>)
 800b7f2:	f001 fdbf 	bl	800d374 <__malloc_lock>
 800b7f6:	6833      	ldr	r3, [r6, #0]
 800b7f8:	461c      	mov	r4, r3
 800b7fa:	bb34      	cbnz	r4, 800b84a <_malloc_r+0x82>
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4638      	mov	r0, r7
 800b800:	f7ff ffc2 	bl	800b788 <sbrk_aligned>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	4604      	mov	r4, r0
 800b808:	d14d      	bne.n	800b8a6 <_malloc_r+0xde>
 800b80a:	6834      	ldr	r4, [r6, #0]
 800b80c:	4626      	mov	r6, r4
 800b80e:	2e00      	cmp	r6, #0
 800b810:	d140      	bne.n	800b894 <_malloc_r+0xcc>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	4631      	mov	r1, r6
 800b816:	4638      	mov	r0, r7
 800b818:	eb04 0803 	add.w	r8, r4, r3
 800b81c:	f000 fd56 	bl	800c2cc <_sbrk_r>
 800b820:	4580      	cmp	r8, r0
 800b822:	d13a      	bne.n	800b89a <_malloc_r+0xd2>
 800b824:	6821      	ldr	r1, [r4, #0]
 800b826:	3503      	adds	r5, #3
 800b828:	1a6d      	subs	r5, r5, r1
 800b82a:	f025 0503 	bic.w	r5, r5, #3
 800b82e:	3508      	adds	r5, #8
 800b830:	2d0c      	cmp	r5, #12
 800b832:	bf38      	it	cc
 800b834:	250c      	movcc	r5, #12
 800b836:	4629      	mov	r1, r5
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ffa5 	bl	800b788 <sbrk_aligned>
 800b83e:	3001      	adds	r0, #1
 800b840:	d02b      	beq.n	800b89a <_malloc_r+0xd2>
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	442b      	add	r3, r5
 800b846:	6023      	str	r3, [r4, #0]
 800b848:	e00e      	b.n	800b868 <_malloc_r+0xa0>
 800b84a:	6822      	ldr	r2, [r4, #0]
 800b84c:	1b52      	subs	r2, r2, r5
 800b84e:	d41e      	bmi.n	800b88e <_malloc_r+0xc6>
 800b850:	2a0b      	cmp	r2, #11
 800b852:	d916      	bls.n	800b882 <_malloc_r+0xba>
 800b854:	1961      	adds	r1, r4, r5
 800b856:	42a3      	cmp	r3, r4
 800b858:	6025      	str	r5, [r4, #0]
 800b85a:	bf18      	it	ne
 800b85c:	6059      	strne	r1, [r3, #4]
 800b85e:	6863      	ldr	r3, [r4, #4]
 800b860:	bf08      	it	eq
 800b862:	6031      	streq	r1, [r6, #0]
 800b864:	5162      	str	r2, [r4, r5]
 800b866:	604b      	str	r3, [r1, #4]
 800b868:	4638      	mov	r0, r7
 800b86a:	f104 060b 	add.w	r6, r4, #11
 800b86e:	f001 fd87 	bl	800d380 <__malloc_unlock>
 800b872:	f026 0607 	bic.w	r6, r6, #7
 800b876:	1d23      	adds	r3, r4, #4
 800b878:	1af2      	subs	r2, r6, r3
 800b87a:	d0b6      	beq.n	800b7ea <_malloc_r+0x22>
 800b87c:	1b9b      	subs	r3, r3, r6
 800b87e:	50a3      	str	r3, [r4, r2]
 800b880:	e7b3      	b.n	800b7ea <_malloc_r+0x22>
 800b882:	6862      	ldr	r2, [r4, #4]
 800b884:	42a3      	cmp	r3, r4
 800b886:	bf0c      	ite	eq
 800b888:	6032      	streq	r2, [r6, #0]
 800b88a:	605a      	strne	r2, [r3, #4]
 800b88c:	e7ec      	b.n	800b868 <_malloc_r+0xa0>
 800b88e:	4623      	mov	r3, r4
 800b890:	6864      	ldr	r4, [r4, #4]
 800b892:	e7b2      	b.n	800b7fa <_malloc_r+0x32>
 800b894:	4634      	mov	r4, r6
 800b896:	6876      	ldr	r6, [r6, #4]
 800b898:	e7b9      	b.n	800b80e <_malloc_r+0x46>
 800b89a:	230c      	movs	r3, #12
 800b89c:	603b      	str	r3, [r7, #0]
 800b89e:	4638      	mov	r0, r7
 800b8a0:	f001 fd6e 	bl	800d380 <__malloc_unlock>
 800b8a4:	e7a1      	b.n	800b7ea <_malloc_r+0x22>
 800b8a6:	6025      	str	r5, [r4, #0]
 800b8a8:	e7de      	b.n	800b868 <_malloc_r+0xa0>
 800b8aa:	bf00      	nop
 800b8ac:	2000fb3c 	.word	0x2000fb3c

0800b8b0 <__cvt>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	ec55 4b10 	vmov	r4, r5, d0
 800b8b8:	2d00      	cmp	r5, #0
 800b8ba:	460e      	mov	r6, r1
 800b8bc:	4619      	mov	r1, r3
 800b8be:	462b      	mov	r3, r5
 800b8c0:	bfbb      	ittet	lt
 800b8c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8c6:	461d      	movlt	r5, r3
 800b8c8:	2300      	movge	r3, #0
 800b8ca:	232d      	movlt	r3, #45	; 0x2d
 800b8cc:	700b      	strb	r3, [r1, #0]
 800b8ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8d4:	4691      	mov	r9, r2
 800b8d6:	f023 0820 	bic.w	r8, r3, #32
 800b8da:	bfbc      	itt	lt
 800b8dc:	4622      	movlt	r2, r4
 800b8de:	4614      	movlt	r4, r2
 800b8e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8e4:	d005      	beq.n	800b8f2 <__cvt+0x42>
 800b8e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b8ea:	d100      	bne.n	800b8ee <__cvt+0x3e>
 800b8ec:	3601      	adds	r6, #1
 800b8ee:	2102      	movs	r1, #2
 800b8f0:	e000      	b.n	800b8f4 <__cvt+0x44>
 800b8f2:	2103      	movs	r1, #3
 800b8f4:	ab03      	add	r3, sp, #12
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	ab02      	add	r3, sp, #8
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	ec45 4b10 	vmov	d0, r4, r5
 800b900:	4653      	mov	r3, sl
 800b902:	4632      	mov	r2, r6
 800b904:	f000 fec4 	bl	800c690 <_dtoa_r>
 800b908:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b90c:	4607      	mov	r7, r0
 800b90e:	d102      	bne.n	800b916 <__cvt+0x66>
 800b910:	f019 0f01 	tst.w	r9, #1
 800b914:	d022      	beq.n	800b95c <__cvt+0xac>
 800b916:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b91a:	eb07 0906 	add.w	r9, r7, r6
 800b91e:	d110      	bne.n	800b942 <__cvt+0x92>
 800b920:	783b      	ldrb	r3, [r7, #0]
 800b922:	2b30      	cmp	r3, #48	; 0x30
 800b924:	d10a      	bne.n	800b93c <__cvt+0x8c>
 800b926:	2200      	movs	r2, #0
 800b928:	2300      	movs	r3, #0
 800b92a:	4620      	mov	r0, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f5 f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b932:	b918      	cbnz	r0, 800b93c <__cvt+0x8c>
 800b934:	f1c6 0601 	rsb	r6, r6, #1
 800b938:	f8ca 6000 	str.w	r6, [sl]
 800b93c:	f8da 3000 	ldr.w	r3, [sl]
 800b940:	4499      	add	r9, r3
 800b942:	2200      	movs	r2, #0
 800b944:	2300      	movs	r3, #0
 800b946:	4620      	mov	r0, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	f7f5 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b94e:	b108      	cbz	r0, 800b954 <__cvt+0xa4>
 800b950:	f8cd 900c 	str.w	r9, [sp, #12]
 800b954:	2230      	movs	r2, #48	; 0x30
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	454b      	cmp	r3, r9
 800b95a:	d307      	bcc.n	800b96c <__cvt+0xbc>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b960:	1bdb      	subs	r3, r3, r7
 800b962:	4638      	mov	r0, r7
 800b964:	6013      	str	r3, [r2, #0]
 800b966:	b004      	add	sp, #16
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	1c59      	adds	r1, r3, #1
 800b96e:	9103      	str	r1, [sp, #12]
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	e7f0      	b.n	800b956 <__cvt+0xa6>

0800b974 <__exponent>:
 800b974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b976:	4603      	mov	r3, r0
 800b978:	2900      	cmp	r1, #0
 800b97a:	bfb8      	it	lt
 800b97c:	4249      	neglt	r1, r1
 800b97e:	f803 2b02 	strb.w	r2, [r3], #2
 800b982:	bfb4      	ite	lt
 800b984:	222d      	movlt	r2, #45	; 0x2d
 800b986:	222b      	movge	r2, #43	; 0x2b
 800b988:	2909      	cmp	r1, #9
 800b98a:	7042      	strb	r2, [r0, #1]
 800b98c:	dd2a      	ble.n	800b9e4 <__exponent+0x70>
 800b98e:	f10d 0407 	add.w	r4, sp, #7
 800b992:	46a4      	mov	ip, r4
 800b994:	270a      	movs	r7, #10
 800b996:	46a6      	mov	lr, r4
 800b998:	460a      	mov	r2, r1
 800b99a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b99e:	fb07 1516 	mls	r5, r7, r6, r1
 800b9a2:	3530      	adds	r5, #48	; 0x30
 800b9a4:	2a63      	cmp	r2, #99	; 0x63
 800b9a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	dcf1      	bgt.n	800b996 <__exponent+0x22>
 800b9b2:	3130      	adds	r1, #48	; 0x30
 800b9b4:	f1ae 0502 	sub.w	r5, lr, #2
 800b9b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b9bc:	1c44      	adds	r4, r0, #1
 800b9be:	4629      	mov	r1, r5
 800b9c0:	4561      	cmp	r1, ip
 800b9c2:	d30a      	bcc.n	800b9da <__exponent+0x66>
 800b9c4:	f10d 0209 	add.w	r2, sp, #9
 800b9c8:	eba2 020e 	sub.w	r2, r2, lr
 800b9cc:	4565      	cmp	r5, ip
 800b9ce:	bf88      	it	hi
 800b9d0:	2200      	movhi	r2, #0
 800b9d2:	4413      	add	r3, r2
 800b9d4:	1a18      	subs	r0, r3, r0
 800b9d6:	b003      	add	sp, #12
 800b9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9de:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b9e2:	e7ed      	b.n	800b9c0 <__exponent+0x4c>
 800b9e4:	2330      	movs	r3, #48	; 0x30
 800b9e6:	3130      	adds	r1, #48	; 0x30
 800b9e8:	7083      	strb	r3, [r0, #2]
 800b9ea:	70c1      	strb	r1, [r0, #3]
 800b9ec:	1d03      	adds	r3, r0, #4
 800b9ee:	e7f1      	b.n	800b9d4 <__exponent+0x60>

0800b9f0 <_printf_float>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	ed2d 8b02 	vpush	{d8}
 800b9f8:	b08d      	sub	sp, #52	; 0x34
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba00:	4616      	mov	r6, r2
 800ba02:	461f      	mov	r7, r3
 800ba04:	4605      	mov	r5, r0
 800ba06:	f001 fc31 	bl	800d26c <_localeconv_r>
 800ba0a:	f8d0 a000 	ldr.w	sl, [r0]
 800ba0e:	4650      	mov	r0, sl
 800ba10:	f7f4 fbe6 	bl	80001e0 <strlen>
 800ba14:	2300      	movs	r3, #0
 800ba16:	930a      	str	r3, [sp, #40]	; 0x28
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	9305      	str	r3, [sp, #20]
 800ba1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba20:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba24:	3307      	adds	r3, #7
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	f103 0208 	add.w	r2, r3, #8
 800ba2e:	f8c8 2000 	str.w	r2, [r8]
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba42:	9307      	str	r3, [sp, #28]
 800ba44:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba48:	ee08 0a10 	vmov	s16, r0
 800ba4c:	4b9f      	ldr	r3, [pc, #636]	; (800bccc <_printf_float+0x2dc>)
 800ba4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	f7f5 f871 	bl	8000b3c <__aeabi_dcmpun>
 800ba5a:	bb88      	cbnz	r0, 800bac0 <_printf_float+0xd0>
 800ba5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba60:	4b9a      	ldr	r3, [pc, #616]	; (800bccc <_printf_float+0x2dc>)
 800ba62:	f04f 32ff 	mov.w	r2, #4294967295
 800ba66:	f7f5 f84b 	bl	8000b00 <__aeabi_dcmple>
 800ba6a:	bb48      	cbnz	r0, 800bac0 <_printf_float+0xd0>
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4640      	mov	r0, r8
 800ba72:	4649      	mov	r1, r9
 800ba74:	f7f5 f83a 	bl	8000aec <__aeabi_dcmplt>
 800ba78:	b110      	cbz	r0, 800ba80 <_printf_float+0x90>
 800ba7a:	232d      	movs	r3, #45	; 0x2d
 800ba7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba80:	4b93      	ldr	r3, [pc, #588]	; (800bcd0 <_printf_float+0x2e0>)
 800ba82:	4894      	ldr	r0, [pc, #592]	; (800bcd4 <_printf_float+0x2e4>)
 800ba84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba88:	bf94      	ite	ls
 800ba8a:	4698      	movls	r8, r3
 800ba8c:	4680      	movhi	r8, r0
 800ba8e:	2303      	movs	r3, #3
 800ba90:	6123      	str	r3, [r4, #16]
 800ba92:	9b05      	ldr	r3, [sp, #20]
 800ba94:	f023 0204 	bic.w	r2, r3, #4
 800ba98:	6022      	str	r2, [r4, #0]
 800ba9a:	f04f 0900 	mov.w	r9, #0
 800ba9e:	9700      	str	r7, [sp, #0]
 800baa0:	4633      	mov	r3, r6
 800baa2:	aa0b      	add	r2, sp, #44	; 0x2c
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 f9d8 	bl	800be5c <_printf_common>
 800baac:	3001      	adds	r0, #1
 800baae:	f040 8090 	bne.w	800bbd2 <_printf_float+0x1e2>
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	b00d      	add	sp, #52	; 0x34
 800bab8:	ecbd 8b02 	vpop	{d8}
 800babc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac0:	4642      	mov	r2, r8
 800bac2:	464b      	mov	r3, r9
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f5 f838 	bl	8000b3c <__aeabi_dcmpun>
 800bacc:	b140      	cbz	r0, 800bae0 <_printf_float+0xf0>
 800bace:	464b      	mov	r3, r9
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bfbc      	itt	lt
 800bad4:	232d      	movlt	r3, #45	; 0x2d
 800bad6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bada:	487f      	ldr	r0, [pc, #508]	; (800bcd8 <_printf_float+0x2e8>)
 800badc:	4b7f      	ldr	r3, [pc, #508]	; (800bcdc <_printf_float+0x2ec>)
 800bade:	e7d1      	b.n	800ba84 <_printf_float+0x94>
 800bae0:	6863      	ldr	r3, [r4, #4]
 800bae2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bae6:	9206      	str	r2, [sp, #24]
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	d13f      	bne.n	800bb6c <_printf_float+0x17c>
 800baec:	2306      	movs	r3, #6
 800baee:	6063      	str	r3, [r4, #4]
 800baf0:	9b05      	ldr	r3, [sp, #20]
 800baf2:	6861      	ldr	r1, [r4, #4]
 800baf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800baf8:	2300      	movs	r3, #0
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	ab0a      	add	r3, sp, #40	; 0x28
 800bafe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb02:	ab09      	add	r3, sp, #36	; 0x24
 800bb04:	ec49 8b10 	vmov	d0, r8, r9
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	6022      	str	r2, [r4, #0]
 800bb0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7ff fecd 	bl	800b8b0 <__cvt>
 800bb16:	9b06      	ldr	r3, [sp, #24]
 800bb18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb1a:	2b47      	cmp	r3, #71	; 0x47
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	d108      	bne.n	800bb32 <_printf_float+0x142>
 800bb20:	1cc8      	adds	r0, r1, #3
 800bb22:	db02      	blt.n	800bb2a <_printf_float+0x13a>
 800bb24:	6863      	ldr	r3, [r4, #4]
 800bb26:	4299      	cmp	r1, r3
 800bb28:	dd41      	ble.n	800bbae <_printf_float+0x1be>
 800bb2a:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb2e:	fa5f fb8b 	uxtb.w	fp, fp
 800bb32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb36:	d820      	bhi.n	800bb7a <_printf_float+0x18a>
 800bb38:	3901      	subs	r1, #1
 800bb3a:	465a      	mov	r2, fp
 800bb3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb40:	9109      	str	r1, [sp, #36]	; 0x24
 800bb42:	f7ff ff17 	bl	800b974 <__exponent>
 800bb46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb48:	1813      	adds	r3, r2, r0
 800bb4a:	2a01      	cmp	r2, #1
 800bb4c:	4681      	mov	r9, r0
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	dc02      	bgt.n	800bb58 <_printf_float+0x168>
 800bb52:	6822      	ldr	r2, [r4, #0]
 800bb54:	07d2      	lsls	r2, r2, #31
 800bb56:	d501      	bpl.n	800bb5c <_printf_float+0x16c>
 800bb58:	3301      	adds	r3, #1
 800bb5a:	6123      	str	r3, [r4, #16]
 800bb5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d09c      	beq.n	800ba9e <_printf_float+0xae>
 800bb64:	232d      	movs	r3, #45	; 0x2d
 800bb66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb6a:	e798      	b.n	800ba9e <_printf_float+0xae>
 800bb6c:	9a06      	ldr	r2, [sp, #24]
 800bb6e:	2a47      	cmp	r2, #71	; 0x47
 800bb70:	d1be      	bne.n	800baf0 <_printf_float+0x100>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1bc      	bne.n	800baf0 <_printf_float+0x100>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e7b9      	b.n	800baee <_printf_float+0xfe>
 800bb7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb7e:	d118      	bne.n	800bbb2 <_printf_float+0x1c2>
 800bb80:	2900      	cmp	r1, #0
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	dd0b      	ble.n	800bb9e <_printf_float+0x1ae>
 800bb86:	6121      	str	r1, [r4, #16]
 800bb88:	b913      	cbnz	r3, 800bb90 <_printf_float+0x1a0>
 800bb8a:	6822      	ldr	r2, [r4, #0]
 800bb8c:	07d0      	lsls	r0, r2, #31
 800bb8e:	d502      	bpl.n	800bb96 <_printf_float+0x1a6>
 800bb90:	3301      	adds	r3, #1
 800bb92:	440b      	add	r3, r1
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	e7de      	b.n	800bb5c <_printf_float+0x16c>
 800bb9e:	b913      	cbnz	r3, 800bba6 <_printf_float+0x1b6>
 800bba0:	6822      	ldr	r2, [r4, #0]
 800bba2:	07d2      	lsls	r2, r2, #31
 800bba4:	d501      	bpl.n	800bbaa <_printf_float+0x1ba>
 800bba6:	3302      	adds	r3, #2
 800bba8:	e7f4      	b.n	800bb94 <_printf_float+0x1a4>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e7f2      	b.n	800bb94 <_printf_float+0x1a4>
 800bbae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	db05      	blt.n	800bbc4 <_printf_float+0x1d4>
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	6121      	str	r1, [r4, #16]
 800bbbc:	07d8      	lsls	r0, r3, #31
 800bbbe:	d5ea      	bpl.n	800bb96 <_printf_float+0x1a6>
 800bbc0:	1c4b      	adds	r3, r1, #1
 800bbc2:	e7e7      	b.n	800bb94 <_printf_float+0x1a4>
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	bfd4      	ite	le
 800bbc8:	f1c1 0202 	rsble	r2, r1, #2
 800bbcc:	2201      	movgt	r2, #1
 800bbce:	4413      	add	r3, r2
 800bbd0:	e7e0      	b.n	800bb94 <_printf_float+0x1a4>
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	055a      	lsls	r2, r3, #21
 800bbd6:	d407      	bmi.n	800bbe8 <_printf_float+0x1f8>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	4642      	mov	r2, r8
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4628      	mov	r0, r5
 800bbe0:	47b8      	blx	r7
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	d12c      	bne.n	800bc40 <_printf_float+0x250>
 800bbe6:	e764      	b.n	800bab2 <_printf_float+0xc2>
 800bbe8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bbec:	f240 80e0 	bls.w	800bdb0 <_printf_float+0x3c0>
 800bbf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f7f4 ff6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d034      	beq.n	800bc6a <_printf_float+0x27a>
 800bc00:	4a37      	ldr	r2, [pc, #220]	; (800bce0 <_printf_float+0x2f0>)
 800bc02:	2301      	movs	r3, #1
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	f43f af51 	beq.w	800bab2 <_printf_float+0xc2>
 800bc10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc14:	429a      	cmp	r2, r3
 800bc16:	db02      	blt.n	800bc1e <_printf_float+0x22e>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	07d8      	lsls	r0, r3, #31
 800bc1c:	d510      	bpl.n	800bc40 <_printf_float+0x250>
 800bc1e:	ee18 3a10 	vmov	r3, s16
 800bc22:	4652      	mov	r2, sl
 800bc24:	4631      	mov	r1, r6
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f43f af41 	beq.w	800bab2 <_printf_float+0xc2>
 800bc30:	f04f 0800 	mov.w	r8, #0
 800bc34:	f104 091a 	add.w	r9, r4, #26
 800bc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	4543      	cmp	r3, r8
 800bc3e:	dc09      	bgt.n	800bc54 <_printf_float+0x264>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	079b      	lsls	r3, r3, #30
 800bc44:	f100 8105 	bmi.w	800be52 <_printf_float+0x462>
 800bc48:	68e0      	ldr	r0, [r4, #12]
 800bc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc4c:	4298      	cmp	r0, r3
 800bc4e:	bfb8      	it	lt
 800bc50:	4618      	movlt	r0, r3
 800bc52:	e730      	b.n	800bab6 <_printf_float+0xc6>
 800bc54:	2301      	movs	r3, #1
 800bc56:	464a      	mov	r2, r9
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b8      	blx	r7
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f43f af27 	beq.w	800bab2 <_printf_float+0xc2>
 800bc64:	f108 0801 	add.w	r8, r8, #1
 800bc68:	e7e6      	b.n	800bc38 <_printf_float+0x248>
 800bc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	dc39      	bgt.n	800bce4 <_printf_float+0x2f4>
 800bc70:	4a1b      	ldr	r2, [pc, #108]	; (800bce0 <_printf_float+0x2f0>)
 800bc72:	2301      	movs	r3, #1
 800bc74:	4631      	mov	r1, r6
 800bc76:	4628      	mov	r0, r5
 800bc78:	47b8      	blx	r7
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	f43f af19 	beq.w	800bab2 <_printf_float+0xc2>
 800bc80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc84:	4313      	orrs	r3, r2
 800bc86:	d102      	bne.n	800bc8e <_printf_float+0x29e>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	07d9      	lsls	r1, r3, #31
 800bc8c:	d5d8      	bpl.n	800bc40 <_printf_float+0x250>
 800bc8e:	ee18 3a10 	vmov	r3, s16
 800bc92:	4652      	mov	r2, sl
 800bc94:	4631      	mov	r1, r6
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b8      	blx	r7
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	f43f af09 	beq.w	800bab2 <_printf_float+0xc2>
 800bca0:	f04f 0900 	mov.w	r9, #0
 800bca4:	f104 0a1a 	add.w	sl, r4, #26
 800bca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcaa:	425b      	negs	r3, r3
 800bcac:	454b      	cmp	r3, r9
 800bcae:	dc01      	bgt.n	800bcb4 <_printf_float+0x2c4>
 800bcb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb2:	e792      	b.n	800bbda <_printf_float+0x1ea>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f43f aef7 	beq.w	800bab2 <_printf_float+0xc2>
 800bcc4:	f109 0901 	add.w	r9, r9, #1
 800bcc8:	e7ee      	b.n	800bca8 <_printf_float+0x2b8>
 800bcca:	bf00      	nop
 800bccc:	7fefffff 	.word	0x7fefffff
 800bcd0:	0802ac3c 	.word	0x0802ac3c
 800bcd4:	0802ac40 	.word	0x0802ac40
 800bcd8:	0802ac48 	.word	0x0802ac48
 800bcdc:	0802ac44 	.word	0x0802ac44
 800bce0:	0802ac4c 	.word	0x0802ac4c
 800bce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bce8:	429a      	cmp	r2, r3
 800bcea:	bfa8      	it	ge
 800bcec:	461a      	movge	r2, r3
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	4691      	mov	r9, r2
 800bcf2:	dc37      	bgt.n	800bd64 <_printf_float+0x374>
 800bcf4:	f04f 0b00 	mov.w	fp, #0
 800bcf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcfc:	f104 021a 	add.w	r2, r4, #26
 800bd00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd02:	9305      	str	r3, [sp, #20]
 800bd04:	eba3 0309 	sub.w	r3, r3, r9
 800bd08:	455b      	cmp	r3, fp
 800bd0a:	dc33      	bgt.n	800bd74 <_printf_float+0x384>
 800bd0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd10:	429a      	cmp	r2, r3
 800bd12:	db3b      	blt.n	800bd8c <_printf_float+0x39c>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	07da      	lsls	r2, r3, #31
 800bd18:	d438      	bmi.n	800bd8c <_printf_float+0x39c>
 800bd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1c:	9a05      	ldr	r2, [sp, #20]
 800bd1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd20:	1a9a      	subs	r2, r3, r2
 800bd22:	eba3 0901 	sub.w	r9, r3, r1
 800bd26:	4591      	cmp	r9, r2
 800bd28:	bfa8      	it	ge
 800bd2a:	4691      	movge	r9, r2
 800bd2c:	f1b9 0f00 	cmp.w	r9, #0
 800bd30:	dc35      	bgt.n	800bd9e <_printf_float+0x3ae>
 800bd32:	f04f 0800 	mov.w	r8, #0
 800bd36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd3a:	f104 0a1a 	add.w	sl, r4, #26
 800bd3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	eba3 0309 	sub.w	r3, r3, r9
 800bd48:	4543      	cmp	r3, r8
 800bd4a:	f77f af79 	ble.w	800bc40 <_printf_float+0x250>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4652      	mov	r2, sl
 800bd52:	4631      	mov	r1, r6
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	f43f aeaa 	beq.w	800bab2 <_printf_float+0xc2>
 800bd5e:	f108 0801 	add.w	r8, r8, #1
 800bd62:	e7ec      	b.n	800bd3e <_printf_float+0x34e>
 800bd64:	4613      	mov	r3, r2
 800bd66:	4631      	mov	r1, r6
 800bd68:	4642      	mov	r2, r8
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	d1c0      	bne.n	800bcf4 <_printf_float+0x304>
 800bd72:	e69e      	b.n	800bab2 <_printf_float+0xc2>
 800bd74:	2301      	movs	r3, #1
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	9205      	str	r2, [sp, #20]
 800bd7c:	47b8      	blx	r7
 800bd7e:	3001      	adds	r0, #1
 800bd80:	f43f ae97 	beq.w	800bab2 <_printf_float+0xc2>
 800bd84:	9a05      	ldr	r2, [sp, #20]
 800bd86:	f10b 0b01 	add.w	fp, fp, #1
 800bd8a:	e7b9      	b.n	800bd00 <_printf_float+0x310>
 800bd8c:	ee18 3a10 	vmov	r3, s16
 800bd90:	4652      	mov	r2, sl
 800bd92:	4631      	mov	r1, r6
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b8      	blx	r7
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d1be      	bne.n	800bd1a <_printf_float+0x32a>
 800bd9c:	e689      	b.n	800bab2 <_printf_float+0xc2>
 800bd9e:	9a05      	ldr	r2, [sp, #20]
 800bda0:	464b      	mov	r3, r9
 800bda2:	4442      	add	r2, r8
 800bda4:	4631      	mov	r1, r6
 800bda6:	4628      	mov	r0, r5
 800bda8:	47b8      	blx	r7
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d1c1      	bne.n	800bd32 <_printf_float+0x342>
 800bdae:	e680      	b.n	800bab2 <_printf_float+0xc2>
 800bdb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdb2:	2a01      	cmp	r2, #1
 800bdb4:	dc01      	bgt.n	800bdba <_printf_float+0x3ca>
 800bdb6:	07db      	lsls	r3, r3, #31
 800bdb8:	d538      	bpl.n	800be2c <_printf_float+0x43c>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4642      	mov	r2, r8
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	47b8      	blx	r7
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	f43f ae74 	beq.w	800bab2 <_printf_float+0xc2>
 800bdca:	ee18 3a10 	vmov	r3, s16
 800bdce:	4652      	mov	r2, sl
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b8      	blx	r7
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	f43f ae6b 	beq.w	800bab2 <_printf_float+0xc2>
 800bddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bde0:	2200      	movs	r2, #0
 800bde2:	2300      	movs	r3, #0
 800bde4:	f7f4 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 800bde8:	b9d8      	cbnz	r0, 800be22 <_printf_float+0x432>
 800bdea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdec:	f108 0201 	add.w	r2, r8, #1
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b8      	blx	r7
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d10e      	bne.n	800be1a <_printf_float+0x42a>
 800bdfc:	e659      	b.n	800bab2 <_printf_float+0xc2>
 800bdfe:	2301      	movs	r3, #1
 800be00:	4652      	mov	r2, sl
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	f43f ae52 	beq.w	800bab2 <_printf_float+0xc2>
 800be0e:	f108 0801 	add.w	r8, r8, #1
 800be12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be14:	3b01      	subs	r3, #1
 800be16:	4543      	cmp	r3, r8
 800be18:	dcf1      	bgt.n	800bdfe <_printf_float+0x40e>
 800be1a:	464b      	mov	r3, r9
 800be1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be20:	e6dc      	b.n	800bbdc <_printf_float+0x1ec>
 800be22:	f04f 0800 	mov.w	r8, #0
 800be26:	f104 0a1a 	add.w	sl, r4, #26
 800be2a:	e7f2      	b.n	800be12 <_printf_float+0x422>
 800be2c:	2301      	movs	r3, #1
 800be2e:	4642      	mov	r2, r8
 800be30:	e7df      	b.n	800bdf2 <_printf_float+0x402>
 800be32:	2301      	movs	r3, #1
 800be34:	464a      	mov	r2, r9
 800be36:	4631      	mov	r1, r6
 800be38:	4628      	mov	r0, r5
 800be3a:	47b8      	blx	r7
 800be3c:	3001      	adds	r0, #1
 800be3e:	f43f ae38 	beq.w	800bab2 <_printf_float+0xc2>
 800be42:	f108 0801 	add.w	r8, r8, #1
 800be46:	68e3      	ldr	r3, [r4, #12]
 800be48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be4a:	1a5b      	subs	r3, r3, r1
 800be4c:	4543      	cmp	r3, r8
 800be4e:	dcf0      	bgt.n	800be32 <_printf_float+0x442>
 800be50:	e6fa      	b.n	800bc48 <_printf_float+0x258>
 800be52:	f04f 0800 	mov.w	r8, #0
 800be56:	f104 0919 	add.w	r9, r4, #25
 800be5a:	e7f4      	b.n	800be46 <_printf_float+0x456>

0800be5c <_printf_common>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	4616      	mov	r6, r2
 800be62:	4699      	mov	r9, r3
 800be64:	688a      	ldr	r2, [r1, #8]
 800be66:	690b      	ldr	r3, [r1, #16]
 800be68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be6c:	4293      	cmp	r3, r2
 800be6e:	bfb8      	it	lt
 800be70:	4613      	movlt	r3, r2
 800be72:	6033      	str	r3, [r6, #0]
 800be74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be78:	4607      	mov	r7, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	b10a      	cbz	r2, 800be82 <_printf_common+0x26>
 800be7e:	3301      	adds	r3, #1
 800be80:	6033      	str	r3, [r6, #0]
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	0699      	lsls	r1, r3, #26
 800be86:	bf42      	ittt	mi
 800be88:	6833      	ldrmi	r3, [r6, #0]
 800be8a:	3302      	addmi	r3, #2
 800be8c:	6033      	strmi	r3, [r6, #0]
 800be8e:	6825      	ldr	r5, [r4, #0]
 800be90:	f015 0506 	ands.w	r5, r5, #6
 800be94:	d106      	bne.n	800bea4 <_printf_common+0x48>
 800be96:	f104 0a19 	add.w	sl, r4, #25
 800be9a:	68e3      	ldr	r3, [r4, #12]
 800be9c:	6832      	ldr	r2, [r6, #0]
 800be9e:	1a9b      	subs	r3, r3, r2
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	dc26      	bgt.n	800bef2 <_printf_common+0x96>
 800bea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bea8:	1e13      	subs	r3, r2, #0
 800beaa:	6822      	ldr	r2, [r4, #0]
 800beac:	bf18      	it	ne
 800beae:	2301      	movne	r3, #1
 800beb0:	0692      	lsls	r2, r2, #26
 800beb2:	d42b      	bmi.n	800bf0c <_printf_common+0xb0>
 800beb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beb8:	4649      	mov	r1, r9
 800beba:	4638      	mov	r0, r7
 800bebc:	47c0      	blx	r8
 800bebe:	3001      	adds	r0, #1
 800bec0:	d01e      	beq.n	800bf00 <_printf_common+0xa4>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	68e5      	ldr	r5, [r4, #12]
 800bec6:	6832      	ldr	r2, [r6, #0]
 800bec8:	f003 0306 	and.w	r3, r3, #6
 800becc:	2b04      	cmp	r3, #4
 800bece:	bf08      	it	eq
 800bed0:	1aad      	subeq	r5, r5, r2
 800bed2:	68a3      	ldr	r3, [r4, #8]
 800bed4:	6922      	ldr	r2, [r4, #16]
 800bed6:	bf0c      	ite	eq
 800bed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bedc:	2500      	movne	r5, #0
 800bede:	4293      	cmp	r3, r2
 800bee0:	bfc4      	itt	gt
 800bee2:	1a9b      	subgt	r3, r3, r2
 800bee4:	18ed      	addgt	r5, r5, r3
 800bee6:	2600      	movs	r6, #0
 800bee8:	341a      	adds	r4, #26
 800beea:	42b5      	cmp	r5, r6
 800beec:	d11a      	bne.n	800bf24 <_printf_common+0xc8>
 800beee:	2000      	movs	r0, #0
 800bef0:	e008      	b.n	800bf04 <_printf_common+0xa8>
 800bef2:	2301      	movs	r3, #1
 800bef4:	4652      	mov	r2, sl
 800bef6:	4649      	mov	r1, r9
 800bef8:	4638      	mov	r0, r7
 800befa:	47c0      	blx	r8
 800befc:	3001      	adds	r0, #1
 800befe:	d103      	bne.n	800bf08 <_printf_common+0xac>
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf08:	3501      	adds	r5, #1
 800bf0a:	e7c6      	b.n	800be9a <_printf_common+0x3e>
 800bf0c:	18e1      	adds	r1, r4, r3
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	2030      	movs	r0, #48	; 0x30
 800bf12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf16:	4422      	add	r2, r4
 800bf18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf20:	3302      	adds	r3, #2
 800bf22:	e7c7      	b.n	800beb4 <_printf_common+0x58>
 800bf24:	2301      	movs	r3, #1
 800bf26:	4622      	mov	r2, r4
 800bf28:	4649      	mov	r1, r9
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	47c0      	blx	r8
 800bf2e:	3001      	adds	r0, #1
 800bf30:	d0e6      	beq.n	800bf00 <_printf_common+0xa4>
 800bf32:	3601      	adds	r6, #1
 800bf34:	e7d9      	b.n	800beea <_printf_common+0x8e>
	...

0800bf38 <_printf_i>:
 800bf38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	7e0f      	ldrb	r7, [r1, #24]
 800bf3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf40:	2f78      	cmp	r7, #120	; 0x78
 800bf42:	4691      	mov	r9, r2
 800bf44:	4680      	mov	r8, r0
 800bf46:	460c      	mov	r4, r1
 800bf48:	469a      	mov	sl, r3
 800bf4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf4e:	d807      	bhi.n	800bf60 <_printf_i+0x28>
 800bf50:	2f62      	cmp	r7, #98	; 0x62
 800bf52:	d80a      	bhi.n	800bf6a <_printf_i+0x32>
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	f000 80d8 	beq.w	800c10a <_printf_i+0x1d2>
 800bf5a:	2f58      	cmp	r7, #88	; 0x58
 800bf5c:	f000 80a3 	beq.w	800c0a6 <_printf_i+0x16e>
 800bf60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf68:	e03a      	b.n	800bfe0 <_printf_i+0xa8>
 800bf6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf6e:	2b15      	cmp	r3, #21
 800bf70:	d8f6      	bhi.n	800bf60 <_printf_i+0x28>
 800bf72:	a101      	add	r1, pc, #4	; (adr r1, 800bf78 <_printf_i+0x40>)
 800bf74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf78:	0800bfd1 	.word	0x0800bfd1
 800bf7c:	0800bfe5 	.word	0x0800bfe5
 800bf80:	0800bf61 	.word	0x0800bf61
 800bf84:	0800bf61 	.word	0x0800bf61
 800bf88:	0800bf61 	.word	0x0800bf61
 800bf8c:	0800bf61 	.word	0x0800bf61
 800bf90:	0800bfe5 	.word	0x0800bfe5
 800bf94:	0800bf61 	.word	0x0800bf61
 800bf98:	0800bf61 	.word	0x0800bf61
 800bf9c:	0800bf61 	.word	0x0800bf61
 800bfa0:	0800bf61 	.word	0x0800bf61
 800bfa4:	0800c0f1 	.word	0x0800c0f1
 800bfa8:	0800c015 	.word	0x0800c015
 800bfac:	0800c0d3 	.word	0x0800c0d3
 800bfb0:	0800bf61 	.word	0x0800bf61
 800bfb4:	0800bf61 	.word	0x0800bf61
 800bfb8:	0800c113 	.word	0x0800c113
 800bfbc:	0800bf61 	.word	0x0800bf61
 800bfc0:	0800c015 	.word	0x0800c015
 800bfc4:	0800bf61 	.word	0x0800bf61
 800bfc8:	0800bf61 	.word	0x0800bf61
 800bfcc:	0800c0db 	.word	0x0800c0db
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	1d1a      	adds	r2, r3, #4
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	602a      	str	r2, [r5, #0]
 800bfd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e0a3      	b.n	800c12c <_printf_i+0x1f4>
 800bfe4:	6820      	ldr	r0, [r4, #0]
 800bfe6:	6829      	ldr	r1, [r5, #0]
 800bfe8:	0606      	lsls	r6, r0, #24
 800bfea:	f101 0304 	add.w	r3, r1, #4
 800bfee:	d50a      	bpl.n	800c006 <_printf_i+0xce>
 800bff0:	680e      	ldr	r6, [r1, #0]
 800bff2:	602b      	str	r3, [r5, #0]
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	da03      	bge.n	800c000 <_printf_i+0xc8>
 800bff8:	232d      	movs	r3, #45	; 0x2d
 800bffa:	4276      	negs	r6, r6
 800bffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c000:	485e      	ldr	r0, [pc, #376]	; (800c17c <_printf_i+0x244>)
 800c002:	230a      	movs	r3, #10
 800c004:	e019      	b.n	800c03a <_printf_i+0x102>
 800c006:	680e      	ldr	r6, [r1, #0]
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c00e:	bf18      	it	ne
 800c010:	b236      	sxthne	r6, r6
 800c012:	e7ef      	b.n	800bff4 <_printf_i+0xbc>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	6820      	ldr	r0, [r4, #0]
 800c018:	1d19      	adds	r1, r3, #4
 800c01a:	6029      	str	r1, [r5, #0]
 800c01c:	0601      	lsls	r1, r0, #24
 800c01e:	d501      	bpl.n	800c024 <_printf_i+0xec>
 800c020:	681e      	ldr	r6, [r3, #0]
 800c022:	e002      	b.n	800c02a <_printf_i+0xf2>
 800c024:	0646      	lsls	r6, r0, #25
 800c026:	d5fb      	bpl.n	800c020 <_printf_i+0xe8>
 800c028:	881e      	ldrh	r6, [r3, #0]
 800c02a:	4854      	ldr	r0, [pc, #336]	; (800c17c <_printf_i+0x244>)
 800c02c:	2f6f      	cmp	r7, #111	; 0x6f
 800c02e:	bf0c      	ite	eq
 800c030:	2308      	moveq	r3, #8
 800c032:	230a      	movne	r3, #10
 800c034:	2100      	movs	r1, #0
 800c036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c03a:	6865      	ldr	r5, [r4, #4]
 800c03c:	60a5      	str	r5, [r4, #8]
 800c03e:	2d00      	cmp	r5, #0
 800c040:	bfa2      	ittt	ge
 800c042:	6821      	ldrge	r1, [r4, #0]
 800c044:	f021 0104 	bicge.w	r1, r1, #4
 800c048:	6021      	strge	r1, [r4, #0]
 800c04a:	b90e      	cbnz	r6, 800c050 <_printf_i+0x118>
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	d04d      	beq.n	800c0ec <_printf_i+0x1b4>
 800c050:	4615      	mov	r5, r2
 800c052:	fbb6 f1f3 	udiv	r1, r6, r3
 800c056:	fb03 6711 	mls	r7, r3, r1, r6
 800c05a:	5dc7      	ldrb	r7, [r0, r7]
 800c05c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c060:	4637      	mov	r7, r6
 800c062:	42bb      	cmp	r3, r7
 800c064:	460e      	mov	r6, r1
 800c066:	d9f4      	bls.n	800c052 <_printf_i+0x11a>
 800c068:	2b08      	cmp	r3, #8
 800c06a:	d10b      	bne.n	800c084 <_printf_i+0x14c>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	07de      	lsls	r6, r3, #31
 800c070:	d508      	bpl.n	800c084 <_printf_i+0x14c>
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	6861      	ldr	r1, [r4, #4]
 800c076:	4299      	cmp	r1, r3
 800c078:	bfde      	ittt	le
 800c07a:	2330      	movle	r3, #48	; 0x30
 800c07c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c080:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c084:	1b52      	subs	r2, r2, r5
 800c086:	6122      	str	r2, [r4, #16]
 800c088:	f8cd a000 	str.w	sl, [sp]
 800c08c:	464b      	mov	r3, r9
 800c08e:	aa03      	add	r2, sp, #12
 800c090:	4621      	mov	r1, r4
 800c092:	4640      	mov	r0, r8
 800c094:	f7ff fee2 	bl	800be5c <_printf_common>
 800c098:	3001      	adds	r0, #1
 800c09a:	d14c      	bne.n	800c136 <_printf_i+0x1fe>
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a0:	b004      	add	sp, #16
 800c0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a6:	4835      	ldr	r0, [pc, #212]	; (800c17c <_printf_i+0x244>)
 800c0a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0ac:	6829      	ldr	r1, [r5, #0]
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0b4:	6029      	str	r1, [r5, #0]
 800c0b6:	061d      	lsls	r5, r3, #24
 800c0b8:	d514      	bpl.n	800c0e4 <_printf_i+0x1ac>
 800c0ba:	07df      	lsls	r7, r3, #31
 800c0bc:	bf44      	itt	mi
 800c0be:	f043 0320 	orrmi.w	r3, r3, #32
 800c0c2:	6023      	strmi	r3, [r4, #0]
 800c0c4:	b91e      	cbnz	r6, 800c0ce <_printf_i+0x196>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	f023 0320 	bic.w	r3, r3, #32
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	2310      	movs	r3, #16
 800c0d0:	e7b0      	b.n	800c034 <_printf_i+0xfc>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	f043 0320 	orr.w	r3, r3, #32
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	2378      	movs	r3, #120	; 0x78
 800c0dc:	4828      	ldr	r0, [pc, #160]	; (800c180 <_printf_i+0x248>)
 800c0de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0e2:	e7e3      	b.n	800c0ac <_printf_i+0x174>
 800c0e4:	0659      	lsls	r1, r3, #25
 800c0e6:	bf48      	it	mi
 800c0e8:	b2b6      	uxthmi	r6, r6
 800c0ea:	e7e6      	b.n	800c0ba <_printf_i+0x182>
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	e7bb      	b.n	800c068 <_printf_i+0x130>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	6826      	ldr	r6, [r4, #0]
 800c0f4:	6961      	ldr	r1, [r4, #20]
 800c0f6:	1d18      	adds	r0, r3, #4
 800c0f8:	6028      	str	r0, [r5, #0]
 800c0fa:	0635      	lsls	r5, r6, #24
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	d501      	bpl.n	800c104 <_printf_i+0x1cc>
 800c100:	6019      	str	r1, [r3, #0]
 800c102:	e002      	b.n	800c10a <_printf_i+0x1d2>
 800c104:	0670      	lsls	r0, r6, #25
 800c106:	d5fb      	bpl.n	800c100 <_printf_i+0x1c8>
 800c108:	8019      	strh	r1, [r3, #0]
 800c10a:	2300      	movs	r3, #0
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	4615      	mov	r5, r2
 800c110:	e7ba      	b.n	800c088 <_printf_i+0x150>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	1d1a      	adds	r2, r3, #4
 800c116:	602a      	str	r2, [r5, #0]
 800c118:	681d      	ldr	r5, [r3, #0]
 800c11a:	6862      	ldr	r2, [r4, #4]
 800c11c:	2100      	movs	r1, #0
 800c11e:	4628      	mov	r0, r5
 800c120:	f7f4 f866 	bl	80001f0 <memchr>
 800c124:	b108      	cbz	r0, 800c12a <_printf_i+0x1f2>
 800c126:	1b40      	subs	r0, r0, r5
 800c128:	6060      	str	r0, [r4, #4]
 800c12a:	6863      	ldr	r3, [r4, #4]
 800c12c:	6123      	str	r3, [r4, #16]
 800c12e:	2300      	movs	r3, #0
 800c130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c134:	e7a8      	b.n	800c088 <_printf_i+0x150>
 800c136:	6923      	ldr	r3, [r4, #16]
 800c138:	462a      	mov	r2, r5
 800c13a:	4649      	mov	r1, r9
 800c13c:	4640      	mov	r0, r8
 800c13e:	47d0      	blx	sl
 800c140:	3001      	adds	r0, #1
 800c142:	d0ab      	beq.n	800c09c <_printf_i+0x164>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	079b      	lsls	r3, r3, #30
 800c148:	d413      	bmi.n	800c172 <_printf_i+0x23a>
 800c14a:	68e0      	ldr	r0, [r4, #12]
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	4298      	cmp	r0, r3
 800c150:	bfb8      	it	lt
 800c152:	4618      	movlt	r0, r3
 800c154:	e7a4      	b.n	800c0a0 <_printf_i+0x168>
 800c156:	2301      	movs	r3, #1
 800c158:	4632      	mov	r2, r6
 800c15a:	4649      	mov	r1, r9
 800c15c:	4640      	mov	r0, r8
 800c15e:	47d0      	blx	sl
 800c160:	3001      	adds	r0, #1
 800c162:	d09b      	beq.n	800c09c <_printf_i+0x164>
 800c164:	3501      	adds	r5, #1
 800c166:	68e3      	ldr	r3, [r4, #12]
 800c168:	9903      	ldr	r1, [sp, #12]
 800c16a:	1a5b      	subs	r3, r3, r1
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dcf2      	bgt.n	800c156 <_printf_i+0x21e>
 800c170:	e7eb      	b.n	800c14a <_printf_i+0x212>
 800c172:	2500      	movs	r5, #0
 800c174:	f104 0619 	add.w	r6, r4, #25
 800c178:	e7f5      	b.n	800c166 <_printf_i+0x22e>
 800c17a:	bf00      	nop
 800c17c:	0802ac4e 	.word	0x0802ac4e
 800c180:	0802ac5f 	.word	0x0802ac5f

0800c184 <iprintf>:
 800c184:	b40f      	push	{r0, r1, r2, r3}
 800c186:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <iprintf+0x2c>)
 800c188:	b513      	push	{r0, r1, r4, lr}
 800c18a:	681c      	ldr	r4, [r3, #0]
 800c18c:	b124      	cbz	r4, 800c198 <iprintf+0x14>
 800c18e:	69a3      	ldr	r3, [r4, #24]
 800c190:	b913      	cbnz	r3, 800c198 <iprintf+0x14>
 800c192:	4620      	mov	r0, r4
 800c194:	f7ff f9d0 	bl	800b538 <__sinit>
 800c198:	ab05      	add	r3, sp, #20
 800c19a:	9a04      	ldr	r2, [sp, #16]
 800c19c:	68a1      	ldr	r1, [r4, #8]
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f001 fe13 	bl	800ddcc <_vfiprintf_r>
 800c1a6:	b002      	add	sp, #8
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ac:	b004      	add	sp, #16
 800c1ae:	4770      	bx	lr
 800c1b0:	20000170 	.word	0x20000170

0800c1b4 <putchar>:
 800c1b4:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <putchar+0x28>)
 800c1b6:	b513      	push	{r0, r1, r4, lr}
 800c1b8:	681c      	ldr	r4, [r3, #0]
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	b134      	cbz	r4, 800c1cc <putchar+0x18>
 800c1be:	69a3      	ldr	r3, [r4, #24]
 800c1c0:	b923      	cbnz	r3, 800c1cc <putchar+0x18>
 800c1c2:	9001      	str	r0, [sp, #4]
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7ff f9b7 	bl	800b538 <__sinit>
 800c1ca:	9901      	ldr	r1, [sp, #4]
 800c1cc:	68a2      	ldr	r2, [r4, #8]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	b002      	add	sp, #8
 800c1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d6:	f001 bf29 	b.w	800e02c <_putc_r>
 800c1da:	bf00      	nop
 800c1dc:	20000170 	.word	0x20000170

0800c1e0 <_puts_r>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	460e      	mov	r6, r1
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	b118      	cbz	r0, 800c1f0 <_puts_r+0x10>
 800c1e8:	6983      	ldr	r3, [r0, #24]
 800c1ea:	b90b      	cbnz	r3, 800c1f0 <_puts_r+0x10>
 800c1ec:	f7ff f9a4 	bl	800b538 <__sinit>
 800c1f0:	69ab      	ldr	r3, [r5, #24]
 800c1f2:	68ac      	ldr	r4, [r5, #8]
 800c1f4:	b913      	cbnz	r3, 800c1fc <_puts_r+0x1c>
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f7ff f99e 	bl	800b538 <__sinit>
 800c1fc:	4b2c      	ldr	r3, [pc, #176]	; (800c2b0 <_puts_r+0xd0>)
 800c1fe:	429c      	cmp	r4, r3
 800c200:	d120      	bne.n	800c244 <_puts_r+0x64>
 800c202:	686c      	ldr	r4, [r5, #4]
 800c204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c206:	07db      	lsls	r3, r3, #31
 800c208:	d405      	bmi.n	800c216 <_puts_r+0x36>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	0598      	lsls	r0, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_puts_r+0x36>
 800c210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c212:	f7ff fa54 	bl	800b6be <__retarget_lock_acquire_recursive>
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	0719      	lsls	r1, r3, #28
 800c21a:	d51d      	bpl.n	800c258 <_puts_r+0x78>
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	b1db      	cbz	r3, 800c258 <_puts_r+0x78>
 800c220:	3e01      	subs	r6, #1
 800c222:	68a3      	ldr	r3, [r4, #8]
 800c224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c228:	3b01      	subs	r3, #1
 800c22a:	60a3      	str	r3, [r4, #8]
 800c22c:	bb39      	cbnz	r1, 800c27e <_puts_r+0x9e>
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da38      	bge.n	800c2a4 <_puts_r+0xc4>
 800c232:	4622      	mov	r2, r4
 800c234:	210a      	movs	r1, #10
 800c236:	4628      	mov	r0, r5
 800c238:	f000 f8bc 	bl	800c3b4 <__swbuf_r>
 800c23c:	3001      	adds	r0, #1
 800c23e:	d011      	beq.n	800c264 <_puts_r+0x84>
 800c240:	250a      	movs	r5, #10
 800c242:	e011      	b.n	800c268 <_puts_r+0x88>
 800c244:	4b1b      	ldr	r3, [pc, #108]	; (800c2b4 <_puts_r+0xd4>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d101      	bne.n	800c24e <_puts_r+0x6e>
 800c24a:	68ac      	ldr	r4, [r5, #8]
 800c24c:	e7da      	b.n	800c204 <_puts_r+0x24>
 800c24e:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <_puts_r+0xd8>)
 800c250:	429c      	cmp	r4, r3
 800c252:	bf08      	it	eq
 800c254:	68ec      	ldreq	r4, [r5, #12]
 800c256:	e7d5      	b.n	800c204 <_puts_r+0x24>
 800c258:	4621      	mov	r1, r4
 800c25a:	4628      	mov	r0, r5
 800c25c:	f000 f90e 	bl	800c47c <__swsetup_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	d0dd      	beq.n	800c220 <_puts_r+0x40>
 800c264:	f04f 35ff 	mov.w	r5, #4294967295
 800c268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c26a:	07da      	lsls	r2, r3, #31
 800c26c:	d405      	bmi.n	800c27a <_puts_r+0x9a>
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	059b      	lsls	r3, r3, #22
 800c272:	d402      	bmi.n	800c27a <_puts_r+0x9a>
 800c274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c276:	f7ff fa23 	bl	800b6c0 <__retarget_lock_release_recursive>
 800c27a:	4628      	mov	r0, r5
 800c27c:	bd70      	pop	{r4, r5, r6, pc}
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da04      	bge.n	800c28c <_puts_r+0xac>
 800c282:	69a2      	ldr	r2, [r4, #24]
 800c284:	429a      	cmp	r2, r3
 800c286:	dc06      	bgt.n	800c296 <_puts_r+0xb6>
 800c288:	290a      	cmp	r1, #10
 800c28a:	d004      	beq.n	800c296 <_puts_r+0xb6>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	1c5a      	adds	r2, r3, #1
 800c290:	6022      	str	r2, [r4, #0]
 800c292:	7019      	strb	r1, [r3, #0]
 800c294:	e7c5      	b.n	800c222 <_puts_r+0x42>
 800c296:	4622      	mov	r2, r4
 800c298:	4628      	mov	r0, r5
 800c29a:	f000 f88b 	bl	800c3b4 <__swbuf_r>
 800c29e:	3001      	adds	r0, #1
 800c2a0:	d1bf      	bne.n	800c222 <_puts_r+0x42>
 800c2a2:	e7df      	b.n	800c264 <_puts_r+0x84>
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	250a      	movs	r5, #10
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	6022      	str	r2, [r4, #0]
 800c2ac:	701d      	strb	r5, [r3, #0]
 800c2ae:	e7db      	b.n	800c268 <_puts_r+0x88>
 800c2b0:	0802abf8 	.word	0x0802abf8
 800c2b4:	0802ac18 	.word	0x0802ac18
 800c2b8:	0802abd8 	.word	0x0802abd8

0800c2bc <puts>:
 800c2bc:	4b02      	ldr	r3, [pc, #8]	; (800c2c8 <puts+0xc>)
 800c2be:	4601      	mov	r1, r0
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	f7ff bf8d 	b.w	800c1e0 <_puts_r>
 800c2c6:	bf00      	nop
 800c2c8:	20000170 	.word	0x20000170

0800c2cc <_sbrk_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d06      	ldr	r5, [pc, #24]	; (800c2e8 <_sbrk_r+0x1c>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f6 f8c8 	bl	800246c <_sbrk>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_sbrk_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_sbrk_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	2000fb44 	.word	0x2000fb44

0800c2ec <siprintf>:
 800c2ec:	b40e      	push	{r1, r2, r3}
 800c2ee:	b500      	push	{lr}
 800c2f0:	b09c      	sub	sp, #112	; 0x70
 800c2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c2f4:	9002      	str	r0, [sp, #8]
 800c2f6:	9006      	str	r0, [sp, #24]
 800c2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2fc:	4809      	ldr	r0, [pc, #36]	; (800c324 <siprintf+0x38>)
 800c2fe:	9107      	str	r1, [sp, #28]
 800c300:	9104      	str	r1, [sp, #16]
 800c302:	4909      	ldr	r1, [pc, #36]	; (800c328 <siprintf+0x3c>)
 800c304:	f853 2b04 	ldr.w	r2, [r3], #4
 800c308:	9105      	str	r1, [sp, #20]
 800c30a:	6800      	ldr	r0, [r0, #0]
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	a902      	add	r1, sp, #8
 800c310:	f001 fc32 	bl	800db78 <_svfiprintf_r>
 800c314:	9b02      	ldr	r3, [sp, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	701a      	strb	r2, [r3, #0]
 800c31a:	b01c      	add	sp, #112	; 0x70
 800c31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c320:	b003      	add	sp, #12
 800c322:	4770      	bx	lr
 800c324:	20000170 	.word	0x20000170
 800c328:	ffff0208 	.word	0xffff0208

0800c32c <__sread>:
 800c32c:	b510      	push	{r4, lr}
 800c32e:	460c      	mov	r4, r1
 800c330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c334:	f001 fec2 	bl	800e0bc <_read_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	bfab      	itete	ge
 800c33c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c33e:	89a3      	ldrhlt	r3, [r4, #12]
 800c340:	181b      	addge	r3, r3, r0
 800c342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c346:	bfac      	ite	ge
 800c348:	6563      	strge	r3, [r4, #84]	; 0x54
 800c34a:	81a3      	strhlt	r3, [r4, #12]
 800c34c:	bd10      	pop	{r4, pc}

0800c34e <__swrite>:
 800c34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c352:	461f      	mov	r7, r3
 800c354:	898b      	ldrh	r3, [r1, #12]
 800c356:	05db      	lsls	r3, r3, #23
 800c358:	4605      	mov	r5, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	4616      	mov	r6, r2
 800c35e:	d505      	bpl.n	800c36c <__swrite+0x1e>
 800c360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c364:	2302      	movs	r3, #2
 800c366:	2200      	movs	r2, #0
 800c368:	f000 ff84 	bl	800d274 <_lseek_r>
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c376:	81a3      	strh	r3, [r4, #12]
 800c378:	4632      	mov	r2, r6
 800c37a:	463b      	mov	r3, r7
 800c37c:	4628      	mov	r0, r5
 800c37e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c382:	f000 b869 	b.w	800c458 <_write_r>

0800c386 <__sseek>:
 800c386:	b510      	push	{r4, lr}
 800c388:	460c      	mov	r4, r1
 800c38a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38e:	f000 ff71 	bl	800d274 <_lseek_r>
 800c392:	1c43      	adds	r3, r0, #1
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	bf15      	itete	ne
 800c398:	6560      	strne	r0, [r4, #84]	; 0x54
 800c39a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c39e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3a2:	81a3      	strheq	r3, [r4, #12]
 800c3a4:	bf18      	it	ne
 800c3a6:	81a3      	strhne	r3, [r4, #12]
 800c3a8:	bd10      	pop	{r4, pc}

0800c3aa <__sclose>:
 800c3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ae:	f000 b8d3 	b.w	800c558 <_close_r>
	...

0800c3b4 <__swbuf_r>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	460e      	mov	r6, r1
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	b118      	cbz	r0, 800c3c6 <__swbuf_r+0x12>
 800c3be:	6983      	ldr	r3, [r0, #24]
 800c3c0:	b90b      	cbnz	r3, 800c3c6 <__swbuf_r+0x12>
 800c3c2:	f7ff f8b9 	bl	800b538 <__sinit>
 800c3c6:	4b21      	ldr	r3, [pc, #132]	; (800c44c <__swbuf_r+0x98>)
 800c3c8:	429c      	cmp	r4, r3
 800c3ca:	d12b      	bne.n	800c424 <__swbuf_r+0x70>
 800c3cc:	686c      	ldr	r4, [r5, #4]
 800c3ce:	69a3      	ldr	r3, [r4, #24]
 800c3d0:	60a3      	str	r3, [r4, #8]
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	071a      	lsls	r2, r3, #28
 800c3d6:	d52f      	bpl.n	800c438 <__swbuf_r+0x84>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	b36b      	cbz	r3, 800c438 <__swbuf_r+0x84>
 800c3dc:	6923      	ldr	r3, [r4, #16]
 800c3de:	6820      	ldr	r0, [r4, #0]
 800c3e0:	1ac0      	subs	r0, r0, r3
 800c3e2:	6963      	ldr	r3, [r4, #20]
 800c3e4:	b2f6      	uxtb	r6, r6
 800c3e6:	4283      	cmp	r3, r0
 800c3e8:	4637      	mov	r7, r6
 800c3ea:	dc04      	bgt.n	800c3f6 <__swbuf_r+0x42>
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	f7fe fffc 	bl	800b3ec <_fflush_r>
 800c3f4:	bb30      	cbnz	r0, 800c444 <__swbuf_r+0x90>
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	60a3      	str	r3, [r4, #8]
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	6022      	str	r2, [r4, #0]
 800c402:	701e      	strb	r6, [r3, #0]
 800c404:	6963      	ldr	r3, [r4, #20]
 800c406:	3001      	adds	r0, #1
 800c408:	4283      	cmp	r3, r0
 800c40a:	d004      	beq.n	800c416 <__swbuf_r+0x62>
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	07db      	lsls	r3, r3, #31
 800c410:	d506      	bpl.n	800c420 <__swbuf_r+0x6c>
 800c412:	2e0a      	cmp	r6, #10
 800c414:	d104      	bne.n	800c420 <__swbuf_r+0x6c>
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f7fe ffe7 	bl	800b3ec <_fflush_r>
 800c41e:	b988      	cbnz	r0, 800c444 <__swbuf_r+0x90>
 800c420:	4638      	mov	r0, r7
 800c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <__swbuf_r+0x9c>)
 800c426:	429c      	cmp	r4, r3
 800c428:	d101      	bne.n	800c42e <__swbuf_r+0x7a>
 800c42a:	68ac      	ldr	r4, [r5, #8]
 800c42c:	e7cf      	b.n	800c3ce <__swbuf_r+0x1a>
 800c42e:	4b09      	ldr	r3, [pc, #36]	; (800c454 <__swbuf_r+0xa0>)
 800c430:	429c      	cmp	r4, r3
 800c432:	bf08      	it	eq
 800c434:	68ec      	ldreq	r4, [r5, #12]
 800c436:	e7ca      	b.n	800c3ce <__swbuf_r+0x1a>
 800c438:	4621      	mov	r1, r4
 800c43a:	4628      	mov	r0, r5
 800c43c:	f000 f81e 	bl	800c47c <__swsetup_r>
 800c440:	2800      	cmp	r0, #0
 800c442:	d0cb      	beq.n	800c3dc <__swbuf_r+0x28>
 800c444:	f04f 37ff 	mov.w	r7, #4294967295
 800c448:	e7ea      	b.n	800c420 <__swbuf_r+0x6c>
 800c44a:	bf00      	nop
 800c44c:	0802abf8 	.word	0x0802abf8
 800c450:	0802ac18 	.word	0x0802ac18
 800c454:	0802abd8 	.word	0x0802abd8

0800c458 <_write_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	; (800c478 <_write_r+0x20>)
 800c45c:	4604      	mov	r4, r0
 800c45e:	4608      	mov	r0, r1
 800c460:	4611      	mov	r1, r2
 800c462:	2200      	movs	r2, #0
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	f7f5 ffe6 	bl	8002438 <_write>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_write_r+0x1e>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_write_r+0x1e>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	2000fb44 	.word	0x2000fb44

0800c47c <__swsetup_r>:
 800c47c:	4b32      	ldr	r3, [pc, #200]	; (800c548 <__swsetup_r+0xcc>)
 800c47e:	b570      	push	{r4, r5, r6, lr}
 800c480:	681d      	ldr	r5, [r3, #0]
 800c482:	4606      	mov	r6, r0
 800c484:	460c      	mov	r4, r1
 800c486:	b125      	cbz	r5, 800c492 <__swsetup_r+0x16>
 800c488:	69ab      	ldr	r3, [r5, #24]
 800c48a:	b913      	cbnz	r3, 800c492 <__swsetup_r+0x16>
 800c48c:	4628      	mov	r0, r5
 800c48e:	f7ff f853 	bl	800b538 <__sinit>
 800c492:	4b2e      	ldr	r3, [pc, #184]	; (800c54c <__swsetup_r+0xd0>)
 800c494:	429c      	cmp	r4, r3
 800c496:	d10f      	bne.n	800c4b8 <__swsetup_r+0x3c>
 800c498:	686c      	ldr	r4, [r5, #4]
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4a0:	0719      	lsls	r1, r3, #28
 800c4a2:	d42c      	bmi.n	800c4fe <__swsetup_r+0x82>
 800c4a4:	06dd      	lsls	r5, r3, #27
 800c4a6:	d411      	bmi.n	800c4cc <__swsetup_r+0x50>
 800c4a8:	2309      	movs	r3, #9
 800c4aa:	6033      	str	r3, [r6, #0]
 800c4ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b6:	e03e      	b.n	800c536 <__swsetup_r+0xba>
 800c4b8:	4b25      	ldr	r3, [pc, #148]	; (800c550 <__swsetup_r+0xd4>)
 800c4ba:	429c      	cmp	r4, r3
 800c4bc:	d101      	bne.n	800c4c2 <__swsetup_r+0x46>
 800c4be:	68ac      	ldr	r4, [r5, #8]
 800c4c0:	e7eb      	b.n	800c49a <__swsetup_r+0x1e>
 800c4c2:	4b24      	ldr	r3, [pc, #144]	; (800c554 <__swsetup_r+0xd8>)
 800c4c4:	429c      	cmp	r4, r3
 800c4c6:	bf08      	it	eq
 800c4c8:	68ec      	ldreq	r4, [r5, #12]
 800c4ca:	e7e6      	b.n	800c49a <__swsetup_r+0x1e>
 800c4cc:	0758      	lsls	r0, r3, #29
 800c4ce:	d512      	bpl.n	800c4f6 <__swsetup_r+0x7a>
 800c4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4d2:	b141      	cbz	r1, 800c4e6 <__swsetup_r+0x6a>
 800c4d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4d8:	4299      	cmp	r1, r3
 800c4da:	d002      	beq.n	800c4e2 <__swsetup_r+0x66>
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff f907 	bl	800b6f0 <_free_r>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	6363      	str	r3, [r4, #52]	; 0x34
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4ec:	81a3      	strh	r3, [r4, #12]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6063      	str	r3, [r4, #4]
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	f043 0308 	orr.w	r3, r3, #8
 800c4fc:	81a3      	strh	r3, [r4, #12]
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	b94b      	cbnz	r3, 800c516 <__swsetup_r+0x9a>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c50c:	d003      	beq.n	800c516 <__swsetup_r+0x9a>
 800c50e:	4621      	mov	r1, r4
 800c510:	4630      	mov	r0, r6
 800c512:	f000 fee7 	bl	800d2e4 <__smakebuf_r>
 800c516:	89a0      	ldrh	r0, [r4, #12]
 800c518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c51c:	f010 0301 	ands.w	r3, r0, #1
 800c520:	d00a      	beq.n	800c538 <__swsetup_r+0xbc>
 800c522:	2300      	movs	r3, #0
 800c524:	60a3      	str	r3, [r4, #8]
 800c526:	6963      	ldr	r3, [r4, #20]
 800c528:	425b      	negs	r3, r3
 800c52a:	61a3      	str	r3, [r4, #24]
 800c52c:	6923      	ldr	r3, [r4, #16]
 800c52e:	b943      	cbnz	r3, 800c542 <__swsetup_r+0xc6>
 800c530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c534:	d1ba      	bne.n	800c4ac <__swsetup_r+0x30>
 800c536:	bd70      	pop	{r4, r5, r6, pc}
 800c538:	0781      	lsls	r1, r0, #30
 800c53a:	bf58      	it	pl
 800c53c:	6963      	ldrpl	r3, [r4, #20]
 800c53e:	60a3      	str	r3, [r4, #8]
 800c540:	e7f4      	b.n	800c52c <__swsetup_r+0xb0>
 800c542:	2000      	movs	r0, #0
 800c544:	e7f7      	b.n	800c536 <__swsetup_r+0xba>
 800c546:	bf00      	nop
 800c548:	20000170 	.word	0x20000170
 800c54c:	0802abf8 	.word	0x0802abf8
 800c550:	0802ac18 	.word	0x0802ac18
 800c554:	0802abd8 	.word	0x0802abd8

0800c558 <_close_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d06      	ldr	r5, [pc, #24]	; (800c574 <_close_r+0x1c>)
 800c55c:	2300      	movs	r3, #0
 800c55e:	4604      	mov	r4, r0
 800c560:	4608      	mov	r0, r1
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	f7f5 ff76 	bl	8002454 <_close>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d102      	bne.n	800c572 <_close_r+0x1a>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	b103      	cbz	r3, 800c572 <_close_r+0x1a>
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	2000fb44 	.word	0x2000fb44

0800c578 <quorem>:
 800c578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	6903      	ldr	r3, [r0, #16]
 800c57e:	690c      	ldr	r4, [r1, #16]
 800c580:	42a3      	cmp	r3, r4
 800c582:	4607      	mov	r7, r0
 800c584:	f2c0 8081 	blt.w	800c68a <quorem+0x112>
 800c588:	3c01      	subs	r4, #1
 800c58a:	f101 0814 	add.w	r8, r1, #20
 800c58e:	f100 0514 	add.w	r5, r0, #20
 800c592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c59c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5b0:	d331      	bcc.n	800c616 <quorem+0x9e>
 800c5b2:	f04f 0e00 	mov.w	lr, #0
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	46ac      	mov	ip, r5
 800c5ba:	46f2      	mov	sl, lr
 800c5bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5c0:	b293      	uxth	r3, r2
 800c5c2:	fb06 e303 	mla	r3, r6, r3, lr
 800c5c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	ebaa 0303 	sub.w	r3, sl, r3
 800c5d0:	f8dc a000 	ldr.w	sl, [ip]
 800c5d4:	0c12      	lsrs	r2, r2, #16
 800c5d6:	fa13 f38a 	uxtah	r3, r3, sl
 800c5da:	fb06 e202 	mla	r2, r6, r2, lr
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	9b00      	ldr	r3, [sp, #0]
 800c5e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5e6:	b292      	uxth	r2, r2
 800c5e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5f4:	4581      	cmp	r9, r0
 800c5f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5fa:	f84c 3b04 	str.w	r3, [ip], #4
 800c5fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c602:	d2db      	bcs.n	800c5bc <quorem+0x44>
 800c604:	f855 300b 	ldr.w	r3, [r5, fp]
 800c608:	b92b      	cbnz	r3, 800c616 <quorem+0x9e>
 800c60a:	9b01      	ldr	r3, [sp, #4]
 800c60c:	3b04      	subs	r3, #4
 800c60e:	429d      	cmp	r5, r3
 800c610:	461a      	mov	r2, r3
 800c612:	d32e      	bcc.n	800c672 <quorem+0xfa>
 800c614:	613c      	str	r4, [r7, #16]
 800c616:	4638      	mov	r0, r7
 800c618:	f001 f93a 	bl	800d890 <__mcmp>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	db24      	blt.n	800c66a <quorem+0xf2>
 800c620:	3601      	adds	r6, #1
 800c622:	4628      	mov	r0, r5
 800c624:	f04f 0c00 	mov.w	ip, #0
 800c628:	f858 2b04 	ldr.w	r2, [r8], #4
 800c62c:	f8d0 e000 	ldr.w	lr, [r0]
 800c630:	b293      	uxth	r3, r2
 800c632:	ebac 0303 	sub.w	r3, ip, r3
 800c636:	0c12      	lsrs	r2, r2, #16
 800c638:	fa13 f38e 	uxtah	r3, r3, lr
 800c63c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c644:	b29b      	uxth	r3, r3
 800c646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c64a:	45c1      	cmp	r9, r8
 800c64c:	f840 3b04 	str.w	r3, [r0], #4
 800c650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c654:	d2e8      	bcs.n	800c628 <quorem+0xb0>
 800c656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c65e:	b922      	cbnz	r2, 800c66a <quorem+0xf2>
 800c660:	3b04      	subs	r3, #4
 800c662:	429d      	cmp	r5, r3
 800c664:	461a      	mov	r2, r3
 800c666:	d30a      	bcc.n	800c67e <quorem+0x106>
 800c668:	613c      	str	r4, [r7, #16]
 800c66a:	4630      	mov	r0, r6
 800c66c:	b003      	add	sp, #12
 800c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c672:	6812      	ldr	r2, [r2, #0]
 800c674:	3b04      	subs	r3, #4
 800c676:	2a00      	cmp	r2, #0
 800c678:	d1cc      	bne.n	800c614 <quorem+0x9c>
 800c67a:	3c01      	subs	r4, #1
 800c67c:	e7c7      	b.n	800c60e <quorem+0x96>
 800c67e:	6812      	ldr	r2, [r2, #0]
 800c680:	3b04      	subs	r3, #4
 800c682:	2a00      	cmp	r2, #0
 800c684:	d1f0      	bne.n	800c668 <quorem+0xf0>
 800c686:	3c01      	subs	r4, #1
 800c688:	e7eb      	b.n	800c662 <quorem+0xea>
 800c68a:	2000      	movs	r0, #0
 800c68c:	e7ee      	b.n	800c66c <quorem+0xf4>
	...

0800c690 <_dtoa_r>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	ed2d 8b04 	vpush	{d8-d9}
 800c698:	ec57 6b10 	vmov	r6, r7, d0
 800c69c:	b093      	sub	sp, #76	; 0x4c
 800c69e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6a4:	9106      	str	r1, [sp, #24]
 800c6a6:	ee10 aa10 	vmov	sl, s0
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c6b0:	46bb      	mov	fp, r7
 800c6b2:	b975      	cbnz	r5, 800c6d2 <_dtoa_r+0x42>
 800c6b4:	2010      	movs	r0, #16
 800c6b6:	f000 fe55 	bl	800d364 <malloc>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	6260      	str	r0, [r4, #36]	; 0x24
 800c6be:	b920      	cbnz	r0, 800c6ca <_dtoa_r+0x3a>
 800c6c0:	4ba7      	ldr	r3, [pc, #668]	; (800c960 <_dtoa_r+0x2d0>)
 800c6c2:	21ea      	movs	r1, #234	; 0xea
 800c6c4:	48a7      	ldr	r0, [pc, #668]	; (800c964 <_dtoa_r+0x2d4>)
 800c6c6:	f001 fd0b 	bl	800e0e0 <__assert_func>
 800c6ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6ce:	6005      	str	r5, [r0, #0]
 800c6d0:	60c5      	str	r5, [r0, #12]
 800c6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6d4:	6819      	ldr	r1, [r3, #0]
 800c6d6:	b151      	cbz	r1, 800c6ee <_dtoa_r+0x5e>
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	604a      	str	r2, [r1, #4]
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4093      	lsls	r3, r2
 800c6e0:	608b      	str	r3, [r1, #8]
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 fe92 	bl	800d40c <_Bfree>
 800c6e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	1e3b      	subs	r3, r7, #0
 800c6f0:	bfaa      	itet	ge
 800c6f2:	2300      	movge	r3, #0
 800c6f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c6f8:	f8c8 3000 	strge.w	r3, [r8]
 800c6fc:	4b9a      	ldr	r3, [pc, #616]	; (800c968 <_dtoa_r+0x2d8>)
 800c6fe:	bfbc      	itt	lt
 800c700:	2201      	movlt	r2, #1
 800c702:	f8c8 2000 	strlt.w	r2, [r8]
 800c706:	ea33 030b 	bics.w	r3, r3, fp
 800c70a:	d11b      	bne.n	800c744 <_dtoa_r+0xb4>
 800c70c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c70e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c718:	4333      	orrs	r3, r6
 800c71a:	f000 8592 	beq.w	800d242 <_dtoa_r+0xbb2>
 800c71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c720:	b963      	cbnz	r3, 800c73c <_dtoa_r+0xac>
 800c722:	4b92      	ldr	r3, [pc, #584]	; (800c96c <_dtoa_r+0x2dc>)
 800c724:	e022      	b.n	800c76c <_dtoa_r+0xdc>
 800c726:	4b92      	ldr	r3, [pc, #584]	; (800c970 <_dtoa_r+0x2e0>)
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	3308      	adds	r3, #8
 800c72c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	9801      	ldr	r0, [sp, #4]
 800c732:	b013      	add	sp, #76	; 0x4c
 800c734:	ecbd 8b04 	vpop	{d8-d9}
 800c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73c:	4b8b      	ldr	r3, [pc, #556]	; (800c96c <_dtoa_r+0x2dc>)
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	3303      	adds	r3, #3
 800c742:	e7f3      	b.n	800c72c <_dtoa_r+0x9c>
 800c744:	2200      	movs	r2, #0
 800c746:	2300      	movs	r3, #0
 800c748:	4650      	mov	r0, sl
 800c74a:	4659      	mov	r1, fp
 800c74c:	f7f4 f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c750:	ec4b ab19 	vmov	d9, sl, fp
 800c754:	4680      	mov	r8, r0
 800c756:	b158      	cbz	r0, 800c770 <_dtoa_r+0xe0>
 800c758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c75a:	2301      	movs	r3, #1
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 856b 	beq.w	800d23c <_dtoa_r+0xbac>
 800c766:	4883      	ldr	r0, [pc, #524]	; (800c974 <_dtoa_r+0x2e4>)
 800c768:	6018      	str	r0, [r3, #0]
 800c76a:	1e43      	subs	r3, r0, #1
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	e7df      	b.n	800c730 <_dtoa_r+0xa0>
 800c770:	ec4b ab10 	vmov	d0, sl, fp
 800c774:	aa10      	add	r2, sp, #64	; 0x40
 800c776:	a911      	add	r1, sp, #68	; 0x44
 800c778:	4620      	mov	r0, r4
 800c77a:	f001 f92f 	bl	800d9dc <__d2b>
 800c77e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c782:	ee08 0a10 	vmov	s16, r0
 800c786:	2d00      	cmp	r5, #0
 800c788:	f000 8084 	beq.w	800c894 <_dtoa_r+0x204>
 800c78c:	ee19 3a90 	vmov	r3, s19
 800c790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c798:	4656      	mov	r6, sl
 800c79a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c79e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7a6:	4b74      	ldr	r3, [pc, #464]	; (800c978 <_dtoa_r+0x2e8>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f3 fd73 	bl	8000298 <__aeabi_dsub>
 800c7b2:	a365      	add	r3, pc, #404	; (adr r3, 800c948 <_dtoa_r+0x2b8>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f7f3 ff26 	bl	8000608 <__aeabi_dmul>
 800c7bc:	a364      	add	r3, pc, #400	; (adr r3, 800c950 <_dtoa_r+0x2c0>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 fd6b 	bl	800029c <__adddf3>
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	460f      	mov	r7, r1
 800c7cc:	f7f3 feb2 	bl	8000534 <__aeabi_i2d>
 800c7d0:	a361      	add	r3, pc, #388	; (adr r3, 800c958 <_dtoa_r+0x2c8>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 ff17 	bl	8000608 <__aeabi_dmul>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4630      	mov	r0, r6
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	f7f3 fd5b 	bl	800029c <__adddf3>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	f7f4 f9bd 	bl	8000b68 <__aeabi_d2iz>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	9000      	str	r0, [sp, #0]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f978 	bl	8000aec <__aeabi_dcmplt>
 800c7fc:	b150      	cbz	r0, 800c814 <_dtoa_r+0x184>
 800c7fe:	9800      	ldr	r0, [sp, #0]
 800c800:	f7f3 fe98 	bl	8000534 <__aeabi_i2d>
 800c804:	4632      	mov	r2, r6
 800c806:	463b      	mov	r3, r7
 800c808:	f7f4 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800c80c:	b910      	cbnz	r0, 800c814 <_dtoa_r+0x184>
 800c80e:	9b00      	ldr	r3, [sp, #0]
 800c810:	3b01      	subs	r3, #1
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	9b00      	ldr	r3, [sp, #0]
 800c816:	2b16      	cmp	r3, #22
 800c818:	d85a      	bhi.n	800c8d0 <_dtoa_r+0x240>
 800c81a:	9a00      	ldr	r2, [sp, #0]
 800c81c:	4b57      	ldr	r3, [pc, #348]	; (800c97c <_dtoa_r+0x2ec>)
 800c81e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	ec51 0b19 	vmov	r0, r1, d9
 800c82a:	f7f4 f95f 	bl	8000aec <__aeabi_dcmplt>
 800c82e:	2800      	cmp	r0, #0
 800c830:	d050      	beq.n	800c8d4 <_dtoa_r+0x244>
 800c832:	9b00      	ldr	r3, [sp, #0]
 800c834:	3b01      	subs	r3, #1
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	2300      	movs	r3, #0
 800c83a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c83e:	1b5d      	subs	r5, r3, r5
 800c840:	1e6b      	subs	r3, r5, #1
 800c842:	9305      	str	r3, [sp, #20]
 800c844:	bf45      	ittet	mi
 800c846:	f1c5 0301 	rsbmi	r3, r5, #1
 800c84a:	9304      	strmi	r3, [sp, #16]
 800c84c:	2300      	movpl	r3, #0
 800c84e:	2300      	movmi	r3, #0
 800c850:	bf4c      	ite	mi
 800c852:	9305      	strmi	r3, [sp, #20]
 800c854:	9304      	strpl	r3, [sp, #16]
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	db3d      	blt.n	800c8d8 <_dtoa_r+0x248>
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	9a00      	ldr	r2, [sp, #0]
 800c860:	920a      	str	r2, [sp, #40]	; 0x28
 800c862:	4413      	add	r3, r2
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	2300      	movs	r3, #0
 800c868:	9307      	str	r3, [sp, #28]
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	2b09      	cmp	r3, #9
 800c86e:	f200 8089 	bhi.w	800c984 <_dtoa_r+0x2f4>
 800c872:	2b05      	cmp	r3, #5
 800c874:	bfc4      	itt	gt
 800c876:	3b04      	subgt	r3, #4
 800c878:	9306      	strgt	r3, [sp, #24]
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	f1a3 0302 	sub.w	r3, r3, #2
 800c880:	bfcc      	ite	gt
 800c882:	2500      	movgt	r5, #0
 800c884:	2501      	movle	r5, #1
 800c886:	2b03      	cmp	r3, #3
 800c888:	f200 8087 	bhi.w	800c99a <_dtoa_r+0x30a>
 800c88c:	e8df f003 	tbb	[pc, r3]
 800c890:	59383a2d 	.word	0x59383a2d
 800c894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c898:	441d      	add	r5, r3
 800c89a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	bfc1      	itttt	gt
 800c8a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8b2:	bfda      	itte	le
 800c8b4:	f1c3 0320 	rsble	r3, r3, #32
 800c8b8:	fa06 f003 	lslle.w	r0, r6, r3
 800c8bc:	4318      	orrgt	r0, r3
 800c8be:	f7f3 fe29 	bl	8000514 <__aeabi_ui2d>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8ca:	3d01      	subs	r5, #1
 800c8cc:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ce:	e76a      	b.n	800c7a6 <_dtoa_r+0x116>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e7b2      	b.n	800c83a <_dtoa_r+0x1aa>
 800c8d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8d6:	e7b1      	b.n	800c83c <_dtoa_r+0x1ac>
 800c8d8:	9b04      	ldr	r3, [sp, #16]
 800c8da:	9a00      	ldr	r2, [sp, #0]
 800c8dc:	1a9b      	subs	r3, r3, r2
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	4253      	negs	r3, r2
 800c8e2:	9307      	str	r3, [sp, #28]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e8:	e7bf      	b.n	800c86a <_dtoa_r+0x1da>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	9308      	str	r3, [sp, #32]
 800c8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dc55      	bgt.n	800c9a0 <_dtoa_r+0x310>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	e00c      	b.n	800c91a <_dtoa_r+0x28a>
 800c900:	2301      	movs	r3, #1
 800c902:	e7f3      	b.n	800c8ec <_dtoa_r+0x25c>
 800c904:	2300      	movs	r3, #0
 800c906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c908:	9308      	str	r3, [sp, #32]
 800c90a:	9b00      	ldr	r3, [sp, #0]
 800c90c:	4413      	add	r3, r2
 800c90e:	9302      	str	r3, [sp, #8]
 800c910:	3301      	adds	r3, #1
 800c912:	2b01      	cmp	r3, #1
 800c914:	9303      	str	r3, [sp, #12]
 800c916:	bfb8      	it	lt
 800c918:	2301      	movlt	r3, #1
 800c91a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c91c:	2200      	movs	r2, #0
 800c91e:	6042      	str	r2, [r0, #4]
 800c920:	2204      	movs	r2, #4
 800c922:	f102 0614 	add.w	r6, r2, #20
 800c926:	429e      	cmp	r6, r3
 800c928:	6841      	ldr	r1, [r0, #4]
 800c92a:	d93d      	bls.n	800c9a8 <_dtoa_r+0x318>
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fd2d 	bl	800d38c <_Balloc>
 800c932:	9001      	str	r0, [sp, #4]
 800c934:	2800      	cmp	r0, #0
 800c936:	d13b      	bne.n	800c9b0 <_dtoa_r+0x320>
 800c938:	4b11      	ldr	r3, [pc, #68]	; (800c980 <_dtoa_r+0x2f0>)
 800c93a:	4602      	mov	r2, r0
 800c93c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c940:	e6c0      	b.n	800c6c4 <_dtoa_r+0x34>
 800c942:	2301      	movs	r3, #1
 800c944:	e7df      	b.n	800c906 <_dtoa_r+0x276>
 800c946:	bf00      	nop
 800c948:	636f4361 	.word	0x636f4361
 800c94c:	3fd287a7 	.word	0x3fd287a7
 800c950:	8b60c8b3 	.word	0x8b60c8b3
 800c954:	3fc68a28 	.word	0x3fc68a28
 800c958:	509f79fb 	.word	0x509f79fb
 800c95c:	3fd34413 	.word	0x3fd34413
 800c960:	0802ac7d 	.word	0x0802ac7d
 800c964:	0802ac94 	.word	0x0802ac94
 800c968:	7ff00000 	.word	0x7ff00000
 800c96c:	0802ac79 	.word	0x0802ac79
 800c970:	0802ac70 	.word	0x0802ac70
 800c974:	0802ac4d 	.word	0x0802ac4d
 800c978:	3ff80000 	.word	0x3ff80000
 800c97c:	0802ad88 	.word	0x0802ad88
 800c980:	0802acef 	.word	0x0802acef
 800c984:	2501      	movs	r5, #1
 800c986:	2300      	movs	r3, #0
 800c988:	9306      	str	r3, [sp, #24]
 800c98a:	9508      	str	r5, [sp, #32]
 800c98c:	f04f 33ff 	mov.w	r3, #4294967295
 800c990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c994:	2200      	movs	r2, #0
 800c996:	2312      	movs	r3, #18
 800c998:	e7b0      	b.n	800c8fc <_dtoa_r+0x26c>
 800c99a:	2301      	movs	r3, #1
 800c99c:	9308      	str	r3, [sp, #32]
 800c99e:	e7f5      	b.n	800c98c <_dtoa_r+0x2fc>
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9a6:	e7b8      	b.n	800c91a <_dtoa_r+0x28a>
 800c9a8:	3101      	adds	r1, #1
 800c9aa:	6041      	str	r1, [r0, #4]
 800c9ac:	0052      	lsls	r2, r2, #1
 800c9ae:	e7b8      	b.n	800c922 <_dtoa_r+0x292>
 800c9b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b2:	9a01      	ldr	r2, [sp, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	2b0e      	cmp	r3, #14
 800c9ba:	f200 809d 	bhi.w	800caf8 <_dtoa_r+0x468>
 800c9be:	2d00      	cmp	r5, #0
 800c9c0:	f000 809a 	beq.w	800caf8 <_dtoa_r+0x468>
 800c9c4:	9b00      	ldr	r3, [sp, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd32      	ble.n	800ca30 <_dtoa_r+0x3a0>
 800c9ca:	4ab7      	ldr	r2, [pc, #732]	; (800cca8 <_dtoa_r+0x618>)
 800c9cc:	f003 030f 	and.w	r3, r3, #15
 800c9d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9d8:	9b00      	ldr	r3, [sp, #0]
 800c9da:	05d8      	lsls	r0, r3, #23
 800c9dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9e0:	d516      	bpl.n	800ca10 <_dtoa_r+0x380>
 800c9e2:	4bb2      	ldr	r3, [pc, #712]	; (800ccac <_dtoa_r+0x61c>)
 800c9e4:	ec51 0b19 	vmov	r0, r1, d9
 800c9e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9ec:	f7f3 ff36 	bl	800085c <__aeabi_ddiv>
 800c9f0:	f007 070f 	and.w	r7, r7, #15
 800c9f4:	4682      	mov	sl, r0
 800c9f6:	468b      	mov	fp, r1
 800c9f8:	2503      	movs	r5, #3
 800c9fa:	4eac      	ldr	r6, [pc, #688]	; (800ccac <_dtoa_r+0x61c>)
 800c9fc:	b957      	cbnz	r7, 800ca14 <_dtoa_r+0x384>
 800c9fe:	4642      	mov	r2, r8
 800ca00:	464b      	mov	r3, r9
 800ca02:	4650      	mov	r0, sl
 800ca04:	4659      	mov	r1, fp
 800ca06:	f7f3 ff29 	bl	800085c <__aeabi_ddiv>
 800ca0a:	4682      	mov	sl, r0
 800ca0c:	468b      	mov	fp, r1
 800ca0e:	e028      	b.n	800ca62 <_dtoa_r+0x3d2>
 800ca10:	2502      	movs	r5, #2
 800ca12:	e7f2      	b.n	800c9fa <_dtoa_r+0x36a>
 800ca14:	07f9      	lsls	r1, r7, #31
 800ca16:	d508      	bpl.n	800ca2a <_dtoa_r+0x39a>
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca20:	f7f3 fdf2 	bl	8000608 <__aeabi_dmul>
 800ca24:	3501      	adds	r5, #1
 800ca26:	4680      	mov	r8, r0
 800ca28:	4689      	mov	r9, r1
 800ca2a:	107f      	asrs	r7, r7, #1
 800ca2c:	3608      	adds	r6, #8
 800ca2e:	e7e5      	b.n	800c9fc <_dtoa_r+0x36c>
 800ca30:	f000 809b 	beq.w	800cb6a <_dtoa_r+0x4da>
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	4f9d      	ldr	r7, [pc, #628]	; (800ccac <_dtoa_r+0x61c>)
 800ca38:	425e      	negs	r6, r3
 800ca3a:	4b9b      	ldr	r3, [pc, #620]	; (800cca8 <_dtoa_r+0x618>)
 800ca3c:	f006 020f 	and.w	r2, r6, #15
 800ca40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	ec51 0b19 	vmov	r0, r1, d9
 800ca4c:	f7f3 fddc 	bl	8000608 <__aeabi_dmul>
 800ca50:	1136      	asrs	r6, r6, #4
 800ca52:	4682      	mov	sl, r0
 800ca54:	468b      	mov	fp, r1
 800ca56:	2300      	movs	r3, #0
 800ca58:	2502      	movs	r5, #2
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	d17a      	bne.n	800cb54 <_dtoa_r+0x4c4>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1d3      	bne.n	800ca0a <_dtoa_r+0x37a>
 800ca62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 8082 	beq.w	800cb6e <_dtoa_r+0x4de>
 800ca6a:	4b91      	ldr	r3, [pc, #580]	; (800ccb0 <_dtoa_r+0x620>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4659      	mov	r1, fp
 800ca72:	f7f4 f83b 	bl	8000aec <__aeabi_dcmplt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d079      	beq.n	800cb6e <_dtoa_r+0x4de>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d076      	beq.n	800cb6e <_dtoa_r+0x4de>
 800ca80:	9b02      	ldr	r3, [sp, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dd36      	ble.n	800caf4 <_dtoa_r+0x464>
 800ca86:	9b00      	ldr	r3, [sp, #0]
 800ca88:	4650      	mov	r0, sl
 800ca8a:	4659      	mov	r1, fp
 800ca8c:	1e5f      	subs	r7, r3, #1
 800ca8e:	2200      	movs	r2, #0
 800ca90:	4b88      	ldr	r3, [pc, #544]	; (800ccb4 <_dtoa_r+0x624>)
 800ca92:	f7f3 fdb9 	bl	8000608 <__aeabi_dmul>
 800ca96:	9e02      	ldr	r6, [sp, #8]
 800ca98:	4682      	mov	sl, r0
 800ca9a:	468b      	mov	fp, r1
 800ca9c:	3501      	adds	r5, #1
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7f3 fd48 	bl	8000534 <__aeabi_i2d>
 800caa4:	4652      	mov	r2, sl
 800caa6:	465b      	mov	r3, fp
 800caa8:	f7f3 fdae 	bl	8000608 <__aeabi_dmul>
 800caac:	4b82      	ldr	r3, [pc, #520]	; (800ccb8 <_dtoa_r+0x628>)
 800caae:	2200      	movs	r2, #0
 800cab0:	f7f3 fbf4 	bl	800029c <__adddf3>
 800cab4:	46d0      	mov	r8, sl
 800cab6:	46d9      	mov	r9, fp
 800cab8:	4682      	mov	sl, r0
 800caba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d158      	bne.n	800cb74 <_dtoa_r+0x4e4>
 800cac2:	4b7e      	ldr	r3, [pc, #504]	; (800ccbc <_dtoa_r+0x62c>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	4640      	mov	r0, r8
 800cac8:	4649      	mov	r1, r9
 800caca:	f7f3 fbe5 	bl	8000298 <__aeabi_dsub>
 800cace:	4652      	mov	r2, sl
 800cad0:	465b      	mov	r3, fp
 800cad2:	4680      	mov	r8, r0
 800cad4:	4689      	mov	r9, r1
 800cad6:	f7f4 f827 	bl	8000b28 <__aeabi_dcmpgt>
 800cada:	2800      	cmp	r0, #0
 800cadc:	f040 8295 	bne.w	800d00a <_dtoa_r+0x97a>
 800cae0:	4652      	mov	r2, sl
 800cae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cae6:	4640      	mov	r0, r8
 800cae8:	4649      	mov	r1, r9
 800caea:	f7f3 ffff 	bl	8000aec <__aeabi_dcmplt>
 800caee:	2800      	cmp	r0, #0
 800caf0:	f040 8289 	bne.w	800d006 <_dtoa_r+0x976>
 800caf4:	ec5b ab19 	vmov	sl, fp, d9
 800caf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f2c0 8148 	blt.w	800cd90 <_dtoa_r+0x700>
 800cb00:	9a00      	ldr	r2, [sp, #0]
 800cb02:	2a0e      	cmp	r2, #14
 800cb04:	f300 8144 	bgt.w	800cd90 <_dtoa_r+0x700>
 800cb08:	4b67      	ldr	r3, [pc, #412]	; (800cca8 <_dtoa_r+0x618>)
 800cb0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f280 80d5 	bge.w	800ccc4 <_dtoa_r+0x634>
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f300 80d1 	bgt.w	800ccc4 <_dtoa_r+0x634>
 800cb22:	f040 826f 	bne.w	800d004 <_dtoa_r+0x974>
 800cb26:	4b65      	ldr	r3, [pc, #404]	; (800ccbc <_dtoa_r+0x62c>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fd6b 	bl	8000608 <__aeabi_dmul>
 800cb32:	4652      	mov	r2, sl
 800cb34:	465b      	mov	r3, fp
 800cb36:	f7f3 ffed 	bl	8000b14 <__aeabi_dcmpge>
 800cb3a:	9e03      	ldr	r6, [sp, #12]
 800cb3c:	4637      	mov	r7, r6
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	f040 8245 	bne.w	800cfce <_dtoa_r+0x93e>
 800cb44:	9d01      	ldr	r5, [sp, #4]
 800cb46:	2331      	movs	r3, #49	; 0x31
 800cb48:	f805 3b01 	strb.w	r3, [r5], #1
 800cb4c:	9b00      	ldr	r3, [sp, #0]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	e240      	b.n	800cfd6 <_dtoa_r+0x946>
 800cb54:	07f2      	lsls	r2, r6, #31
 800cb56:	d505      	bpl.n	800cb64 <_dtoa_r+0x4d4>
 800cb58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb5c:	f7f3 fd54 	bl	8000608 <__aeabi_dmul>
 800cb60:	3501      	adds	r5, #1
 800cb62:	2301      	movs	r3, #1
 800cb64:	1076      	asrs	r6, r6, #1
 800cb66:	3708      	adds	r7, #8
 800cb68:	e777      	b.n	800ca5a <_dtoa_r+0x3ca>
 800cb6a:	2502      	movs	r5, #2
 800cb6c:	e779      	b.n	800ca62 <_dtoa_r+0x3d2>
 800cb6e:	9f00      	ldr	r7, [sp, #0]
 800cb70:	9e03      	ldr	r6, [sp, #12]
 800cb72:	e794      	b.n	800ca9e <_dtoa_r+0x40e>
 800cb74:	9901      	ldr	r1, [sp, #4]
 800cb76:	4b4c      	ldr	r3, [pc, #304]	; (800cca8 <_dtoa_r+0x618>)
 800cb78:	4431      	add	r1, r6
 800cb7a:	910d      	str	r1, [sp, #52]	; 0x34
 800cb7c:	9908      	ldr	r1, [sp, #32]
 800cb7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d043      	beq.n	800cc12 <_dtoa_r+0x582>
 800cb8a:	494d      	ldr	r1, [pc, #308]	; (800ccc0 <_dtoa_r+0x630>)
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	f7f3 fe65 	bl	800085c <__aeabi_ddiv>
 800cb92:	4652      	mov	r2, sl
 800cb94:	465b      	mov	r3, fp
 800cb96:	f7f3 fb7f 	bl	8000298 <__aeabi_dsub>
 800cb9a:	9d01      	ldr	r5, [sp, #4]
 800cb9c:	4682      	mov	sl, r0
 800cb9e:	468b      	mov	fp, r1
 800cba0:	4649      	mov	r1, r9
 800cba2:	4640      	mov	r0, r8
 800cba4:	f7f3 ffe0 	bl	8000b68 <__aeabi_d2iz>
 800cba8:	4606      	mov	r6, r0
 800cbaa:	f7f3 fcc3 	bl	8000534 <__aeabi_i2d>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7f3 fb6f 	bl	8000298 <__aeabi_dsub>
 800cbba:	3630      	adds	r6, #48	; 0x30
 800cbbc:	f805 6b01 	strb.w	r6, [r5], #1
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	4689      	mov	r9, r1
 800cbc8:	f7f3 ff90 	bl	8000aec <__aeabi_dcmplt>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d163      	bne.n	800cc98 <_dtoa_r+0x608>
 800cbd0:	4642      	mov	r2, r8
 800cbd2:	464b      	mov	r3, r9
 800cbd4:	4936      	ldr	r1, [pc, #216]	; (800ccb0 <_dtoa_r+0x620>)
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	f7f3 fb5e 	bl	8000298 <__aeabi_dsub>
 800cbdc:	4652      	mov	r2, sl
 800cbde:	465b      	mov	r3, fp
 800cbe0:	f7f3 ff84 	bl	8000aec <__aeabi_dcmplt>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	f040 80b5 	bne.w	800cd54 <_dtoa_r+0x6c4>
 800cbea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbec:	429d      	cmp	r5, r3
 800cbee:	d081      	beq.n	800caf4 <_dtoa_r+0x464>
 800cbf0:	4b30      	ldr	r3, [pc, #192]	; (800ccb4 <_dtoa_r+0x624>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4650      	mov	r0, sl
 800cbf6:	4659      	mov	r1, fp
 800cbf8:	f7f3 fd06 	bl	8000608 <__aeabi_dmul>
 800cbfc:	4b2d      	ldr	r3, [pc, #180]	; (800ccb4 <_dtoa_r+0x624>)
 800cbfe:	4682      	mov	sl, r0
 800cc00:	468b      	mov	fp, r1
 800cc02:	4640      	mov	r0, r8
 800cc04:	4649      	mov	r1, r9
 800cc06:	2200      	movs	r2, #0
 800cc08:	f7f3 fcfe 	bl	8000608 <__aeabi_dmul>
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	4689      	mov	r9, r1
 800cc10:	e7c6      	b.n	800cba0 <_dtoa_r+0x510>
 800cc12:	4650      	mov	r0, sl
 800cc14:	4659      	mov	r1, fp
 800cc16:	f7f3 fcf7 	bl	8000608 <__aeabi_dmul>
 800cc1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc1c:	9d01      	ldr	r5, [sp, #4]
 800cc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc20:	4682      	mov	sl, r0
 800cc22:	468b      	mov	fp, r1
 800cc24:	4649      	mov	r1, r9
 800cc26:	4640      	mov	r0, r8
 800cc28:	f7f3 ff9e 	bl	8000b68 <__aeabi_d2iz>
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	f7f3 fc81 	bl	8000534 <__aeabi_i2d>
 800cc32:	3630      	adds	r6, #48	; 0x30
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4640      	mov	r0, r8
 800cc3a:	4649      	mov	r1, r9
 800cc3c:	f7f3 fb2c 	bl	8000298 <__aeabi_dsub>
 800cc40:	f805 6b01 	strb.w	r6, [r5], #1
 800cc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc46:	429d      	cmp	r5, r3
 800cc48:	4680      	mov	r8, r0
 800cc4a:	4689      	mov	r9, r1
 800cc4c:	f04f 0200 	mov.w	r2, #0
 800cc50:	d124      	bne.n	800cc9c <_dtoa_r+0x60c>
 800cc52:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <_dtoa_r+0x630>)
 800cc54:	4650      	mov	r0, sl
 800cc56:	4659      	mov	r1, fp
 800cc58:	f7f3 fb20 	bl	800029c <__adddf3>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4640      	mov	r0, r8
 800cc62:	4649      	mov	r1, r9
 800cc64:	f7f3 ff60 	bl	8000b28 <__aeabi_dcmpgt>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d173      	bne.n	800cd54 <_dtoa_r+0x6c4>
 800cc6c:	4652      	mov	r2, sl
 800cc6e:	465b      	mov	r3, fp
 800cc70:	4913      	ldr	r1, [pc, #76]	; (800ccc0 <_dtoa_r+0x630>)
 800cc72:	2000      	movs	r0, #0
 800cc74:	f7f3 fb10 	bl	8000298 <__aeabi_dsub>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7f3 ff34 	bl	8000aec <__aeabi_dcmplt>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f43f af35 	beq.w	800caf4 <_dtoa_r+0x464>
 800cc8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc8c:	1e6b      	subs	r3, r5, #1
 800cc8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc94:	2b30      	cmp	r3, #48	; 0x30
 800cc96:	d0f8      	beq.n	800cc8a <_dtoa_r+0x5fa>
 800cc98:	9700      	str	r7, [sp, #0]
 800cc9a:	e049      	b.n	800cd30 <_dtoa_r+0x6a0>
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <_dtoa_r+0x624>)
 800cc9e:	f7f3 fcb3 	bl	8000608 <__aeabi_dmul>
 800cca2:	4680      	mov	r8, r0
 800cca4:	4689      	mov	r9, r1
 800cca6:	e7bd      	b.n	800cc24 <_dtoa_r+0x594>
 800cca8:	0802ad88 	.word	0x0802ad88
 800ccac:	0802ad60 	.word	0x0802ad60
 800ccb0:	3ff00000 	.word	0x3ff00000
 800ccb4:	40240000 	.word	0x40240000
 800ccb8:	401c0000 	.word	0x401c0000
 800ccbc:	40140000 	.word	0x40140000
 800ccc0:	3fe00000 	.word	0x3fe00000
 800ccc4:	9d01      	ldr	r5, [sp, #4]
 800ccc6:	4656      	mov	r6, sl
 800ccc8:	465f      	mov	r7, fp
 800ccca:	4642      	mov	r2, r8
 800cccc:	464b      	mov	r3, r9
 800ccce:	4630      	mov	r0, r6
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	f7f3 fdc3 	bl	800085c <__aeabi_ddiv>
 800ccd6:	f7f3 ff47 	bl	8000b68 <__aeabi_d2iz>
 800ccda:	4682      	mov	sl, r0
 800ccdc:	f7f3 fc2a 	bl	8000534 <__aeabi_i2d>
 800cce0:	4642      	mov	r2, r8
 800cce2:	464b      	mov	r3, r9
 800cce4:	f7f3 fc90 	bl	8000608 <__aeabi_dmul>
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4630      	mov	r0, r6
 800ccee:	4639      	mov	r1, r7
 800ccf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccf4:	f7f3 fad0 	bl	8000298 <__aeabi_dsub>
 800ccf8:	f805 6b01 	strb.w	r6, [r5], #1
 800ccfc:	9e01      	ldr	r6, [sp, #4]
 800ccfe:	9f03      	ldr	r7, [sp, #12]
 800cd00:	1bae      	subs	r6, r5, r6
 800cd02:	42b7      	cmp	r7, r6
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	d135      	bne.n	800cd76 <_dtoa_r+0x6e6>
 800cd0a:	f7f3 fac7 	bl	800029c <__adddf3>
 800cd0e:	4642      	mov	r2, r8
 800cd10:	464b      	mov	r3, r9
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	f7f3 ff07 	bl	8000b28 <__aeabi_dcmpgt>
 800cd1a:	b9d0      	cbnz	r0, 800cd52 <_dtoa_r+0x6c2>
 800cd1c:	4642      	mov	r2, r8
 800cd1e:	464b      	mov	r3, r9
 800cd20:	4630      	mov	r0, r6
 800cd22:	4639      	mov	r1, r7
 800cd24:	f7f3 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd28:	b110      	cbz	r0, 800cd30 <_dtoa_r+0x6a0>
 800cd2a:	f01a 0f01 	tst.w	sl, #1
 800cd2e:	d110      	bne.n	800cd52 <_dtoa_r+0x6c2>
 800cd30:	4620      	mov	r0, r4
 800cd32:	ee18 1a10 	vmov	r1, s16
 800cd36:	f000 fb69 	bl	800d40c <_Bfree>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9800      	ldr	r0, [sp, #0]
 800cd3e:	702b      	strb	r3, [r5, #0]
 800cd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd42:	3001      	adds	r0, #1
 800cd44:	6018      	str	r0, [r3, #0]
 800cd46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f43f acf1 	beq.w	800c730 <_dtoa_r+0xa0>
 800cd4e:	601d      	str	r5, [r3, #0]
 800cd50:	e4ee      	b.n	800c730 <_dtoa_r+0xa0>
 800cd52:	9f00      	ldr	r7, [sp, #0]
 800cd54:	462b      	mov	r3, r5
 800cd56:	461d      	mov	r5, r3
 800cd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd5c:	2a39      	cmp	r2, #57	; 0x39
 800cd5e:	d106      	bne.n	800cd6e <_dtoa_r+0x6de>
 800cd60:	9a01      	ldr	r2, [sp, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d1f7      	bne.n	800cd56 <_dtoa_r+0x6c6>
 800cd66:	9901      	ldr	r1, [sp, #4]
 800cd68:	2230      	movs	r2, #48	; 0x30
 800cd6a:	3701      	adds	r7, #1
 800cd6c:	700a      	strb	r2, [r1, #0]
 800cd6e:	781a      	ldrb	r2, [r3, #0]
 800cd70:	3201      	adds	r2, #1
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	e790      	b.n	800cc98 <_dtoa_r+0x608>
 800cd76:	4ba6      	ldr	r3, [pc, #664]	; (800d010 <_dtoa_r+0x980>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f7f3 fc45 	bl	8000608 <__aeabi_dmul>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	2300      	movs	r3, #0
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	f7f3 fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d09d      	beq.n	800ccca <_dtoa_r+0x63a>
 800cd8e:	e7cf      	b.n	800cd30 <_dtoa_r+0x6a0>
 800cd90:	9a08      	ldr	r2, [sp, #32]
 800cd92:	2a00      	cmp	r2, #0
 800cd94:	f000 80d7 	beq.w	800cf46 <_dtoa_r+0x8b6>
 800cd98:	9a06      	ldr	r2, [sp, #24]
 800cd9a:	2a01      	cmp	r2, #1
 800cd9c:	f300 80ba 	bgt.w	800cf14 <_dtoa_r+0x884>
 800cda0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	f000 80b2 	beq.w	800cf0c <_dtoa_r+0x87c>
 800cda8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdac:	9e07      	ldr	r6, [sp, #28]
 800cdae:	9d04      	ldr	r5, [sp, #16]
 800cdb0:	9a04      	ldr	r2, [sp, #16]
 800cdb2:	441a      	add	r2, r3
 800cdb4:	9204      	str	r2, [sp, #16]
 800cdb6:	9a05      	ldr	r2, [sp, #20]
 800cdb8:	2101      	movs	r1, #1
 800cdba:	441a      	add	r2, r3
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	9205      	str	r2, [sp, #20]
 800cdc0:	f000 fbdc 	bl	800d57c <__i2b>
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	2d00      	cmp	r5, #0
 800cdc8:	dd0c      	ble.n	800cde4 <_dtoa_r+0x754>
 800cdca:	9b05      	ldr	r3, [sp, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dd09      	ble.n	800cde4 <_dtoa_r+0x754>
 800cdd0:	42ab      	cmp	r3, r5
 800cdd2:	9a04      	ldr	r2, [sp, #16]
 800cdd4:	bfa8      	it	ge
 800cdd6:	462b      	movge	r3, r5
 800cdd8:	1ad2      	subs	r2, r2, r3
 800cdda:	9204      	str	r2, [sp, #16]
 800cddc:	9a05      	ldr	r2, [sp, #20]
 800cdde:	1aed      	subs	r5, r5, r3
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	b31b      	cbz	r3, 800ce30 <_dtoa_r+0x7a0>
 800cde8:	9b08      	ldr	r3, [sp, #32]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 80af 	beq.w	800cf4e <_dtoa_r+0x8be>
 800cdf0:	2e00      	cmp	r6, #0
 800cdf2:	dd13      	ble.n	800ce1c <_dtoa_r+0x78c>
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f000 fc7f 	bl	800d6fc <__pow5mult>
 800cdfe:	ee18 2a10 	vmov	r2, s16
 800ce02:	4601      	mov	r1, r0
 800ce04:	4607      	mov	r7, r0
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 fbce 	bl	800d5a8 <__multiply>
 800ce0c:	ee18 1a10 	vmov	r1, s16
 800ce10:	4680      	mov	r8, r0
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fafa 	bl	800d40c <_Bfree>
 800ce18:	ee08 8a10 	vmov	s16, r8
 800ce1c:	9b07      	ldr	r3, [sp, #28]
 800ce1e:	1b9a      	subs	r2, r3, r6
 800ce20:	d006      	beq.n	800ce30 <_dtoa_r+0x7a0>
 800ce22:	ee18 1a10 	vmov	r1, s16
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 fc68 	bl	800d6fc <__pow5mult>
 800ce2c:	ee08 0a10 	vmov	s16, r0
 800ce30:	2101      	movs	r1, #1
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fba2 	bl	800d57c <__i2b>
 800ce38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	f340 8088 	ble.w	800cf52 <_dtoa_r+0x8c2>
 800ce42:	461a      	mov	r2, r3
 800ce44:	4601      	mov	r1, r0
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 fc58 	bl	800d6fc <__pow5mult>
 800ce4c:	9b06      	ldr	r3, [sp, #24]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	4606      	mov	r6, r0
 800ce52:	f340 8081 	ble.w	800cf58 <_dtoa_r+0x8c8>
 800ce56:	f04f 0800 	mov.w	r8, #0
 800ce5a:	6933      	ldr	r3, [r6, #16]
 800ce5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce60:	6918      	ldr	r0, [r3, #16]
 800ce62:	f000 fb3b 	bl	800d4dc <__hi0bits>
 800ce66:	f1c0 0020 	rsb	r0, r0, #32
 800ce6a:	9b05      	ldr	r3, [sp, #20]
 800ce6c:	4418      	add	r0, r3
 800ce6e:	f010 001f 	ands.w	r0, r0, #31
 800ce72:	f000 8092 	beq.w	800cf9a <_dtoa_r+0x90a>
 800ce76:	f1c0 0320 	rsb	r3, r0, #32
 800ce7a:	2b04      	cmp	r3, #4
 800ce7c:	f340 808a 	ble.w	800cf94 <_dtoa_r+0x904>
 800ce80:	f1c0 001c 	rsb	r0, r0, #28
 800ce84:	9b04      	ldr	r3, [sp, #16]
 800ce86:	4403      	add	r3, r0
 800ce88:	9304      	str	r3, [sp, #16]
 800ce8a:	9b05      	ldr	r3, [sp, #20]
 800ce8c:	4403      	add	r3, r0
 800ce8e:	4405      	add	r5, r0
 800ce90:	9305      	str	r3, [sp, #20]
 800ce92:	9b04      	ldr	r3, [sp, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd07      	ble.n	800cea8 <_dtoa_r+0x818>
 800ce98:	ee18 1a10 	vmov	r1, s16
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 fc86 	bl	800d7b0 <__lshift>
 800cea4:	ee08 0a10 	vmov	s16, r0
 800cea8:	9b05      	ldr	r3, [sp, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	dd05      	ble.n	800ceba <_dtoa_r+0x82a>
 800ceae:	4631      	mov	r1, r6
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 fc7c 	bl	800d7b0 <__lshift>
 800ceb8:	4606      	mov	r6, r0
 800ceba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d06e      	beq.n	800cf9e <_dtoa_r+0x90e>
 800cec0:	ee18 0a10 	vmov	r0, s16
 800cec4:	4631      	mov	r1, r6
 800cec6:	f000 fce3 	bl	800d890 <__mcmp>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	da67      	bge.n	800cf9e <_dtoa_r+0x90e>
 800cece:	9b00      	ldr	r3, [sp, #0]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	ee18 1a10 	vmov	r1, s16
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	220a      	movs	r2, #10
 800ceda:	2300      	movs	r3, #0
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 fab7 	bl	800d450 <__multadd>
 800cee2:	9b08      	ldr	r3, [sp, #32]
 800cee4:	ee08 0a10 	vmov	s16, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 81b1 	beq.w	800d250 <_dtoa_r+0xbc0>
 800ceee:	2300      	movs	r3, #0
 800cef0:	4639      	mov	r1, r7
 800cef2:	220a      	movs	r2, #10
 800cef4:	4620      	mov	r0, r4
 800cef6:	f000 faab 	bl	800d450 <__multadd>
 800cefa:	9b02      	ldr	r3, [sp, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	4607      	mov	r7, r0
 800cf00:	f300 808e 	bgt.w	800d020 <_dtoa_r+0x990>
 800cf04:	9b06      	ldr	r3, [sp, #24]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	dc51      	bgt.n	800cfae <_dtoa_r+0x91e>
 800cf0a:	e089      	b.n	800d020 <_dtoa_r+0x990>
 800cf0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf12:	e74b      	b.n	800cdac <_dtoa_r+0x71c>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	1e5e      	subs	r6, r3, #1
 800cf18:	9b07      	ldr	r3, [sp, #28]
 800cf1a:	42b3      	cmp	r3, r6
 800cf1c:	bfbf      	itttt	lt
 800cf1e:	9b07      	ldrlt	r3, [sp, #28]
 800cf20:	9607      	strlt	r6, [sp, #28]
 800cf22:	1af2      	sublt	r2, r6, r3
 800cf24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf26:	bfb6      	itet	lt
 800cf28:	189b      	addlt	r3, r3, r2
 800cf2a:	1b9e      	subge	r6, r3, r6
 800cf2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	bfb8      	it	lt
 800cf32:	2600      	movlt	r6, #0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	bfb7      	itett	lt
 800cf38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf40:	1a9d      	sublt	r5, r3, r2
 800cf42:	2300      	movlt	r3, #0
 800cf44:	e734      	b.n	800cdb0 <_dtoa_r+0x720>
 800cf46:	9e07      	ldr	r6, [sp, #28]
 800cf48:	9d04      	ldr	r5, [sp, #16]
 800cf4a:	9f08      	ldr	r7, [sp, #32]
 800cf4c:	e73b      	b.n	800cdc6 <_dtoa_r+0x736>
 800cf4e:	9a07      	ldr	r2, [sp, #28]
 800cf50:	e767      	b.n	800ce22 <_dtoa_r+0x792>
 800cf52:	9b06      	ldr	r3, [sp, #24]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	dc18      	bgt.n	800cf8a <_dtoa_r+0x8fa>
 800cf58:	f1ba 0f00 	cmp.w	sl, #0
 800cf5c:	d115      	bne.n	800cf8a <_dtoa_r+0x8fa>
 800cf5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf62:	b993      	cbnz	r3, 800cf8a <_dtoa_r+0x8fa>
 800cf64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf68:	0d1b      	lsrs	r3, r3, #20
 800cf6a:	051b      	lsls	r3, r3, #20
 800cf6c:	b183      	cbz	r3, 800cf90 <_dtoa_r+0x900>
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	3301      	adds	r3, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9b05      	ldr	r3, [sp, #20]
 800cf76:	3301      	adds	r3, #1
 800cf78:	9305      	str	r3, [sp, #20]
 800cf7a:	f04f 0801 	mov.w	r8, #1
 800cf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f47f af6a 	bne.w	800ce5a <_dtoa_r+0x7ca>
 800cf86:	2001      	movs	r0, #1
 800cf88:	e76f      	b.n	800ce6a <_dtoa_r+0x7da>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	e7f6      	b.n	800cf7e <_dtoa_r+0x8ee>
 800cf90:	4698      	mov	r8, r3
 800cf92:	e7f4      	b.n	800cf7e <_dtoa_r+0x8ee>
 800cf94:	f43f af7d 	beq.w	800ce92 <_dtoa_r+0x802>
 800cf98:	4618      	mov	r0, r3
 800cf9a:	301c      	adds	r0, #28
 800cf9c:	e772      	b.n	800ce84 <_dtoa_r+0x7f4>
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dc37      	bgt.n	800d014 <_dtoa_r+0x984>
 800cfa4:	9b06      	ldr	r3, [sp, #24]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	dd34      	ble.n	800d014 <_dtoa_r+0x984>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	9302      	str	r3, [sp, #8]
 800cfae:	9b02      	ldr	r3, [sp, #8]
 800cfb0:	b96b      	cbnz	r3, 800cfce <_dtoa_r+0x93e>
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	2205      	movs	r2, #5
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f000 fa4a 	bl	800d450 <__multadd>
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	4606      	mov	r6, r0
 800cfc0:	ee18 0a10 	vmov	r0, s16
 800cfc4:	f000 fc64 	bl	800d890 <__mcmp>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	f73f adbb 	bgt.w	800cb44 <_dtoa_r+0x4b4>
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	9d01      	ldr	r5, [sp, #4]
 800cfd2:	43db      	mvns	r3, r3
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f000 fa15 	bl	800d40c <_Bfree>
 800cfe2:	2f00      	cmp	r7, #0
 800cfe4:	f43f aea4 	beq.w	800cd30 <_dtoa_r+0x6a0>
 800cfe8:	f1b8 0f00 	cmp.w	r8, #0
 800cfec:	d005      	beq.n	800cffa <_dtoa_r+0x96a>
 800cfee:	45b8      	cmp	r8, r7
 800cff0:	d003      	beq.n	800cffa <_dtoa_r+0x96a>
 800cff2:	4641      	mov	r1, r8
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 fa09 	bl	800d40c <_Bfree>
 800cffa:	4639      	mov	r1, r7
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 fa05 	bl	800d40c <_Bfree>
 800d002:	e695      	b.n	800cd30 <_dtoa_r+0x6a0>
 800d004:	2600      	movs	r6, #0
 800d006:	4637      	mov	r7, r6
 800d008:	e7e1      	b.n	800cfce <_dtoa_r+0x93e>
 800d00a:	9700      	str	r7, [sp, #0]
 800d00c:	4637      	mov	r7, r6
 800d00e:	e599      	b.n	800cb44 <_dtoa_r+0x4b4>
 800d010:	40240000 	.word	0x40240000
 800d014:	9b08      	ldr	r3, [sp, #32]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 80ca 	beq.w	800d1b0 <_dtoa_r+0xb20>
 800d01c:	9b03      	ldr	r3, [sp, #12]
 800d01e:	9302      	str	r3, [sp, #8]
 800d020:	2d00      	cmp	r5, #0
 800d022:	dd05      	ble.n	800d030 <_dtoa_r+0x9a0>
 800d024:	4639      	mov	r1, r7
 800d026:	462a      	mov	r2, r5
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 fbc1 	bl	800d7b0 <__lshift>
 800d02e:	4607      	mov	r7, r0
 800d030:	f1b8 0f00 	cmp.w	r8, #0
 800d034:	d05b      	beq.n	800d0ee <_dtoa_r+0xa5e>
 800d036:	6879      	ldr	r1, [r7, #4]
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 f9a7 	bl	800d38c <_Balloc>
 800d03e:	4605      	mov	r5, r0
 800d040:	b928      	cbnz	r0, 800d04e <_dtoa_r+0x9be>
 800d042:	4b87      	ldr	r3, [pc, #540]	; (800d260 <_dtoa_r+0xbd0>)
 800d044:	4602      	mov	r2, r0
 800d046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d04a:	f7ff bb3b 	b.w	800c6c4 <_dtoa_r+0x34>
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	3202      	adds	r2, #2
 800d052:	0092      	lsls	r2, r2, #2
 800d054:	f107 010c 	add.w	r1, r7, #12
 800d058:	300c      	adds	r0, #12
 800d05a:	f7fe fb32 	bl	800b6c2 <memcpy>
 800d05e:	2201      	movs	r2, #1
 800d060:	4629      	mov	r1, r5
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fba4 	bl	800d7b0 <__lshift>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	f103 0901 	add.w	r9, r3, #1
 800d06e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d072:	4413      	add	r3, r2
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	f00a 0301 	and.w	r3, sl, #1
 800d07a:	46b8      	mov	r8, r7
 800d07c:	9304      	str	r3, [sp, #16]
 800d07e:	4607      	mov	r7, r0
 800d080:	4631      	mov	r1, r6
 800d082:	ee18 0a10 	vmov	r0, s16
 800d086:	f7ff fa77 	bl	800c578 <quorem>
 800d08a:	4641      	mov	r1, r8
 800d08c:	9002      	str	r0, [sp, #8]
 800d08e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d092:	ee18 0a10 	vmov	r0, s16
 800d096:	f000 fbfb 	bl	800d890 <__mcmp>
 800d09a:	463a      	mov	r2, r7
 800d09c:	9003      	str	r0, [sp, #12]
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 fc11 	bl	800d8c8 <__mdiff>
 800d0a6:	68c2      	ldr	r2, [r0, #12]
 800d0a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	bb02      	cbnz	r2, 800d0f2 <_dtoa_r+0xa62>
 800d0b0:	4601      	mov	r1, r0
 800d0b2:	ee18 0a10 	vmov	r0, s16
 800d0b6:	f000 fbeb 	bl	800d890 <__mcmp>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	9207      	str	r2, [sp, #28]
 800d0c2:	f000 f9a3 	bl	800d40c <_Bfree>
 800d0c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0ca:	ea43 0102 	orr.w	r1, r3, r2
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	430b      	orrs	r3, r1
 800d0d2:	464d      	mov	r5, r9
 800d0d4:	d10f      	bne.n	800d0f6 <_dtoa_r+0xa66>
 800d0d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0da:	d02a      	beq.n	800d132 <_dtoa_r+0xaa2>
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	dd02      	ble.n	800d0e8 <_dtoa_r+0xa58>
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0e8:	f88b a000 	strb.w	sl, [fp]
 800d0ec:	e775      	b.n	800cfda <_dtoa_r+0x94a>
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	e7ba      	b.n	800d068 <_dtoa_r+0x9d8>
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	e7e2      	b.n	800d0bc <_dtoa_r+0xa2c>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	db04      	blt.n	800d106 <_dtoa_r+0xa76>
 800d0fc:	9906      	ldr	r1, [sp, #24]
 800d0fe:	430b      	orrs	r3, r1
 800d100:	9904      	ldr	r1, [sp, #16]
 800d102:	430b      	orrs	r3, r1
 800d104:	d122      	bne.n	800d14c <_dtoa_r+0xabc>
 800d106:	2a00      	cmp	r2, #0
 800d108:	ddee      	ble.n	800d0e8 <_dtoa_r+0xa58>
 800d10a:	ee18 1a10 	vmov	r1, s16
 800d10e:	2201      	movs	r2, #1
 800d110:	4620      	mov	r0, r4
 800d112:	f000 fb4d 	bl	800d7b0 <__lshift>
 800d116:	4631      	mov	r1, r6
 800d118:	ee08 0a10 	vmov	s16, r0
 800d11c:	f000 fbb8 	bl	800d890 <__mcmp>
 800d120:	2800      	cmp	r0, #0
 800d122:	dc03      	bgt.n	800d12c <_dtoa_r+0xa9c>
 800d124:	d1e0      	bne.n	800d0e8 <_dtoa_r+0xa58>
 800d126:	f01a 0f01 	tst.w	sl, #1
 800d12a:	d0dd      	beq.n	800d0e8 <_dtoa_r+0xa58>
 800d12c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d130:	d1d7      	bne.n	800d0e2 <_dtoa_r+0xa52>
 800d132:	2339      	movs	r3, #57	; 0x39
 800d134:	f88b 3000 	strb.w	r3, [fp]
 800d138:	462b      	mov	r3, r5
 800d13a:	461d      	mov	r5, r3
 800d13c:	3b01      	subs	r3, #1
 800d13e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d142:	2a39      	cmp	r2, #57	; 0x39
 800d144:	d071      	beq.n	800d22a <_dtoa_r+0xb9a>
 800d146:	3201      	adds	r2, #1
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	e746      	b.n	800cfda <_dtoa_r+0x94a>
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	dd07      	ble.n	800d160 <_dtoa_r+0xad0>
 800d150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d154:	d0ed      	beq.n	800d132 <_dtoa_r+0xaa2>
 800d156:	f10a 0301 	add.w	r3, sl, #1
 800d15a:	f88b 3000 	strb.w	r3, [fp]
 800d15e:	e73c      	b.n	800cfda <_dtoa_r+0x94a>
 800d160:	9b05      	ldr	r3, [sp, #20]
 800d162:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d166:	4599      	cmp	r9, r3
 800d168:	d047      	beq.n	800d1fa <_dtoa_r+0xb6a>
 800d16a:	ee18 1a10 	vmov	r1, s16
 800d16e:	2300      	movs	r3, #0
 800d170:	220a      	movs	r2, #10
 800d172:	4620      	mov	r0, r4
 800d174:	f000 f96c 	bl	800d450 <__multadd>
 800d178:	45b8      	cmp	r8, r7
 800d17a:	ee08 0a10 	vmov	s16, r0
 800d17e:	f04f 0300 	mov.w	r3, #0
 800d182:	f04f 020a 	mov.w	r2, #10
 800d186:	4641      	mov	r1, r8
 800d188:	4620      	mov	r0, r4
 800d18a:	d106      	bne.n	800d19a <_dtoa_r+0xb0a>
 800d18c:	f000 f960 	bl	800d450 <__multadd>
 800d190:	4680      	mov	r8, r0
 800d192:	4607      	mov	r7, r0
 800d194:	f109 0901 	add.w	r9, r9, #1
 800d198:	e772      	b.n	800d080 <_dtoa_r+0x9f0>
 800d19a:	f000 f959 	bl	800d450 <__multadd>
 800d19e:	4639      	mov	r1, r7
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	220a      	movs	r2, #10
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f000 f952 	bl	800d450 <__multadd>
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	e7f1      	b.n	800d194 <_dtoa_r+0xb04>
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	9302      	str	r3, [sp, #8]
 800d1b4:	9d01      	ldr	r5, [sp, #4]
 800d1b6:	ee18 0a10 	vmov	r0, s16
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	f7ff f9dc 	bl	800c578 <quorem>
 800d1c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1c4:	9b01      	ldr	r3, [sp, #4]
 800d1c6:	f805 ab01 	strb.w	sl, [r5], #1
 800d1ca:	1aea      	subs	r2, r5, r3
 800d1cc:	9b02      	ldr	r3, [sp, #8]
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	dd09      	ble.n	800d1e6 <_dtoa_r+0xb56>
 800d1d2:	ee18 1a10 	vmov	r1, s16
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	220a      	movs	r2, #10
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f000 f938 	bl	800d450 <__multadd>
 800d1e0:	ee08 0a10 	vmov	s16, r0
 800d1e4:	e7e7      	b.n	800d1b6 <_dtoa_r+0xb26>
 800d1e6:	9b02      	ldr	r3, [sp, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bfc8      	it	gt
 800d1ec:	461d      	movgt	r5, r3
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	bfd8      	it	le
 800d1f2:	2501      	movle	r5, #1
 800d1f4:	441d      	add	r5, r3
 800d1f6:	f04f 0800 	mov.w	r8, #0
 800d1fa:	ee18 1a10 	vmov	r1, s16
 800d1fe:	2201      	movs	r2, #1
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fad5 	bl	800d7b0 <__lshift>
 800d206:	4631      	mov	r1, r6
 800d208:	ee08 0a10 	vmov	s16, r0
 800d20c:	f000 fb40 	bl	800d890 <__mcmp>
 800d210:	2800      	cmp	r0, #0
 800d212:	dc91      	bgt.n	800d138 <_dtoa_r+0xaa8>
 800d214:	d102      	bne.n	800d21c <_dtoa_r+0xb8c>
 800d216:	f01a 0f01 	tst.w	sl, #1
 800d21a:	d18d      	bne.n	800d138 <_dtoa_r+0xaa8>
 800d21c:	462b      	mov	r3, r5
 800d21e:	461d      	mov	r5, r3
 800d220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d224:	2a30      	cmp	r2, #48	; 0x30
 800d226:	d0fa      	beq.n	800d21e <_dtoa_r+0xb8e>
 800d228:	e6d7      	b.n	800cfda <_dtoa_r+0x94a>
 800d22a:	9a01      	ldr	r2, [sp, #4]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d184      	bne.n	800d13a <_dtoa_r+0xaaa>
 800d230:	9b00      	ldr	r3, [sp, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	2331      	movs	r3, #49	; 0x31
 800d238:	7013      	strb	r3, [r2, #0]
 800d23a:	e6ce      	b.n	800cfda <_dtoa_r+0x94a>
 800d23c:	4b09      	ldr	r3, [pc, #36]	; (800d264 <_dtoa_r+0xbd4>)
 800d23e:	f7ff ba95 	b.w	800c76c <_dtoa_r+0xdc>
 800d242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d244:	2b00      	cmp	r3, #0
 800d246:	f47f aa6e 	bne.w	800c726 <_dtoa_r+0x96>
 800d24a:	4b07      	ldr	r3, [pc, #28]	; (800d268 <_dtoa_r+0xbd8>)
 800d24c:	f7ff ba8e 	b.w	800c76c <_dtoa_r+0xdc>
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	dcae      	bgt.n	800d1b4 <_dtoa_r+0xb24>
 800d256:	9b06      	ldr	r3, [sp, #24]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	f73f aea8 	bgt.w	800cfae <_dtoa_r+0x91e>
 800d25e:	e7a9      	b.n	800d1b4 <_dtoa_r+0xb24>
 800d260:	0802acef 	.word	0x0802acef
 800d264:	0802ac4c 	.word	0x0802ac4c
 800d268:	0802ac70 	.word	0x0802ac70

0800d26c <_localeconv_r>:
 800d26c:	4800      	ldr	r0, [pc, #0]	; (800d270 <_localeconv_r+0x4>)
 800d26e:	4770      	bx	lr
 800d270:	200002c4 	.word	0x200002c4

0800d274 <_lseek_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4d07      	ldr	r5, [pc, #28]	; (800d294 <_lseek_r+0x20>)
 800d278:	4604      	mov	r4, r0
 800d27a:	4608      	mov	r0, r1
 800d27c:	4611      	mov	r1, r2
 800d27e:	2200      	movs	r2, #0
 800d280:	602a      	str	r2, [r5, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	f7f5 f8f0 	bl	8002468 <_lseek>
 800d288:	1c43      	adds	r3, r0, #1
 800d28a:	d102      	bne.n	800d292 <_lseek_r+0x1e>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	b103      	cbz	r3, 800d292 <_lseek_r+0x1e>
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	2000fb44 	.word	0x2000fb44

0800d298 <__swhatbuf_r>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	460e      	mov	r6, r1
 800d29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a0:	2900      	cmp	r1, #0
 800d2a2:	b096      	sub	sp, #88	; 0x58
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	461d      	mov	r5, r3
 800d2a8:	da08      	bge.n	800d2bc <__swhatbuf_r+0x24>
 800d2aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	602a      	str	r2, [r5, #0]
 800d2b2:	061a      	lsls	r2, r3, #24
 800d2b4:	d410      	bmi.n	800d2d8 <__swhatbuf_r+0x40>
 800d2b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ba:	e00e      	b.n	800d2da <__swhatbuf_r+0x42>
 800d2bc:	466a      	mov	r2, sp
 800d2be:	f000 ff3f 	bl	800e140 <_fstat_r>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	dbf1      	blt.n	800d2aa <__swhatbuf_r+0x12>
 800d2c6:	9a01      	ldr	r2, [sp, #4]
 800d2c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2d0:	425a      	negs	r2, r3
 800d2d2:	415a      	adcs	r2, r3
 800d2d4:	602a      	str	r2, [r5, #0]
 800d2d6:	e7ee      	b.n	800d2b6 <__swhatbuf_r+0x1e>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	2000      	movs	r0, #0
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	b016      	add	sp, #88	; 0x58
 800d2e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2e4 <__smakebuf_r>:
 800d2e4:	898b      	ldrh	r3, [r1, #12]
 800d2e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2e8:	079d      	lsls	r5, r3, #30
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	d507      	bpl.n	800d300 <__smakebuf_r+0x1c>
 800d2f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	6123      	str	r3, [r4, #16]
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	6163      	str	r3, [r4, #20]
 800d2fc:	b002      	add	sp, #8
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	ab01      	add	r3, sp, #4
 800d302:	466a      	mov	r2, sp
 800d304:	f7ff ffc8 	bl	800d298 <__swhatbuf_r>
 800d308:	9900      	ldr	r1, [sp, #0]
 800d30a:	4605      	mov	r5, r0
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7fe fa5b 	bl	800b7c8 <_malloc_r>
 800d312:	b948      	cbnz	r0, 800d328 <__smakebuf_r+0x44>
 800d314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d318:	059a      	lsls	r2, r3, #22
 800d31a:	d4ef      	bmi.n	800d2fc <__smakebuf_r+0x18>
 800d31c:	f023 0303 	bic.w	r3, r3, #3
 800d320:	f043 0302 	orr.w	r3, r3, #2
 800d324:	81a3      	strh	r3, [r4, #12]
 800d326:	e7e3      	b.n	800d2f0 <__smakebuf_r+0xc>
 800d328:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <__smakebuf_r+0x7c>)
 800d32a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	6020      	str	r0, [r4, #0]
 800d330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d334:	81a3      	strh	r3, [r4, #12]
 800d336:	9b00      	ldr	r3, [sp, #0]
 800d338:	6163      	str	r3, [r4, #20]
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	6120      	str	r0, [r4, #16]
 800d33e:	b15b      	cbz	r3, 800d358 <__smakebuf_r+0x74>
 800d340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d344:	4630      	mov	r0, r6
 800d346:	f000 ff0d 	bl	800e164 <_isatty_r>
 800d34a:	b128      	cbz	r0, 800d358 <__smakebuf_r+0x74>
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	f023 0303 	bic.w	r3, r3, #3
 800d352:	f043 0301 	orr.w	r3, r3, #1
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	89a0      	ldrh	r0, [r4, #12]
 800d35a:	4305      	orrs	r5, r0
 800d35c:	81a5      	strh	r5, [r4, #12]
 800d35e:	e7cd      	b.n	800d2fc <__smakebuf_r+0x18>
 800d360:	0800b4d1 	.word	0x0800b4d1

0800d364 <malloc>:
 800d364:	4b02      	ldr	r3, [pc, #8]	; (800d370 <malloc+0xc>)
 800d366:	4601      	mov	r1, r0
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f7fe ba2d 	b.w	800b7c8 <_malloc_r>
 800d36e:	bf00      	nop
 800d370:	20000170 	.word	0x20000170

0800d374 <__malloc_lock>:
 800d374:	4801      	ldr	r0, [pc, #4]	; (800d37c <__malloc_lock+0x8>)
 800d376:	f7fe b9a2 	b.w	800b6be <__retarget_lock_acquire_recursive>
 800d37a:	bf00      	nop
 800d37c:	2000fb38 	.word	0x2000fb38

0800d380 <__malloc_unlock>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__malloc_unlock+0x8>)
 800d382:	f7fe b99d 	b.w	800b6c0 <__retarget_lock_release_recursive>
 800d386:	bf00      	nop
 800d388:	2000fb38 	.word	0x2000fb38

0800d38c <_Balloc>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d390:	4604      	mov	r4, r0
 800d392:	460d      	mov	r5, r1
 800d394:	b976      	cbnz	r6, 800d3b4 <_Balloc+0x28>
 800d396:	2010      	movs	r0, #16
 800d398:	f7ff ffe4 	bl	800d364 <malloc>
 800d39c:	4602      	mov	r2, r0
 800d39e:	6260      	str	r0, [r4, #36]	; 0x24
 800d3a0:	b920      	cbnz	r0, 800d3ac <_Balloc+0x20>
 800d3a2:	4b18      	ldr	r3, [pc, #96]	; (800d404 <_Balloc+0x78>)
 800d3a4:	4818      	ldr	r0, [pc, #96]	; (800d408 <_Balloc+0x7c>)
 800d3a6:	2166      	movs	r1, #102	; 0x66
 800d3a8:	f000 fe9a 	bl	800e0e0 <__assert_func>
 800d3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b0:	6006      	str	r6, [r0, #0]
 800d3b2:	60c6      	str	r6, [r0, #12]
 800d3b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3b6:	68f3      	ldr	r3, [r6, #12]
 800d3b8:	b183      	cbz	r3, 800d3dc <_Balloc+0x50>
 800d3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c2:	b9b8      	cbnz	r0, 800d3f4 <_Balloc+0x68>
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ca:	1d72      	adds	r2, r6, #5
 800d3cc:	0092      	lsls	r2, r2, #2
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 fb60 	bl	800da94 <_calloc_r>
 800d3d4:	b160      	cbz	r0, 800d3f0 <_Balloc+0x64>
 800d3d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3da:	e00e      	b.n	800d3fa <_Balloc+0x6e>
 800d3dc:	2221      	movs	r2, #33	; 0x21
 800d3de:	2104      	movs	r1, #4
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fb57 	bl	800da94 <_calloc_r>
 800d3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e8:	60f0      	str	r0, [r6, #12]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e4      	bne.n	800d3ba <_Balloc+0x2e>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	6802      	ldr	r2, [r0, #0]
 800d3f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d400:	e7f7      	b.n	800d3f2 <_Balloc+0x66>
 800d402:	bf00      	nop
 800d404:	0802ac7d 	.word	0x0802ac7d
 800d408:	0802ad00 	.word	0x0802ad00

0800d40c <_Bfree>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	b976      	cbnz	r6, 800d434 <_Bfree+0x28>
 800d416:	2010      	movs	r0, #16
 800d418:	f7ff ffa4 	bl	800d364 <malloc>
 800d41c:	4602      	mov	r2, r0
 800d41e:	6268      	str	r0, [r5, #36]	; 0x24
 800d420:	b920      	cbnz	r0, 800d42c <_Bfree+0x20>
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <_Bfree+0x3c>)
 800d424:	4809      	ldr	r0, [pc, #36]	; (800d44c <_Bfree+0x40>)
 800d426:	218a      	movs	r1, #138	; 0x8a
 800d428:	f000 fe5a 	bl	800e0e0 <__assert_func>
 800d42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d430:	6006      	str	r6, [r0, #0]
 800d432:	60c6      	str	r6, [r0, #12]
 800d434:	b13c      	cbz	r4, 800d446 <_Bfree+0x3a>
 800d436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d438:	6862      	ldr	r2, [r4, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d440:	6021      	str	r1, [r4, #0]
 800d442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	0802ac7d 	.word	0x0802ac7d
 800d44c:	0802ad00 	.word	0x0802ad00

0800d450 <__multadd>:
 800d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d454:	690d      	ldr	r5, [r1, #16]
 800d456:	4607      	mov	r7, r0
 800d458:	460c      	mov	r4, r1
 800d45a:	461e      	mov	r6, r3
 800d45c:	f101 0c14 	add.w	ip, r1, #20
 800d460:	2000      	movs	r0, #0
 800d462:	f8dc 3000 	ldr.w	r3, [ip]
 800d466:	b299      	uxth	r1, r3
 800d468:	fb02 6101 	mla	r1, r2, r1, r6
 800d46c:	0c1e      	lsrs	r6, r3, #16
 800d46e:	0c0b      	lsrs	r3, r1, #16
 800d470:	fb02 3306 	mla	r3, r2, r6, r3
 800d474:	b289      	uxth	r1, r1
 800d476:	3001      	adds	r0, #1
 800d478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d47c:	4285      	cmp	r5, r0
 800d47e:	f84c 1b04 	str.w	r1, [ip], #4
 800d482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d486:	dcec      	bgt.n	800d462 <__multadd+0x12>
 800d488:	b30e      	cbz	r6, 800d4ce <__multadd+0x7e>
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dc19      	bgt.n	800d4c4 <__multadd+0x74>
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	4638      	mov	r0, r7
 800d494:	3101      	adds	r1, #1
 800d496:	f7ff ff79 	bl	800d38c <_Balloc>
 800d49a:	4680      	mov	r8, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <__multadd+0x5a>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <__multadd+0x84>)
 800d4a2:	480d      	ldr	r0, [pc, #52]	; (800d4d8 <__multadd+0x88>)
 800d4a4:	21b5      	movs	r1, #181	; 0xb5
 800d4a6:	f000 fe1b 	bl	800e0e0 <__assert_func>
 800d4aa:	6922      	ldr	r2, [r4, #16]
 800d4ac:	3202      	adds	r2, #2
 800d4ae:	f104 010c 	add.w	r1, r4, #12
 800d4b2:	0092      	lsls	r2, r2, #2
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f7fe f904 	bl	800b6c2 <memcpy>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ffa5 	bl	800d40c <_Bfree>
 800d4c2:	4644      	mov	r4, r8
 800d4c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	615e      	str	r6, [r3, #20]
 800d4cc:	6125      	str	r5, [r4, #16]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	0802acef 	.word	0x0802acef
 800d4d8:	0802ad00 	.word	0x0802ad00

0800d4dc <__hi0bits>:
 800d4dc:	0c03      	lsrs	r3, r0, #16
 800d4de:	041b      	lsls	r3, r3, #16
 800d4e0:	b9d3      	cbnz	r3, 800d518 <__hi0bits+0x3c>
 800d4e2:	0400      	lsls	r0, r0, #16
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4ea:	bf04      	itt	eq
 800d4ec:	0200      	lsleq	r0, r0, #8
 800d4ee:	3308      	addeq	r3, #8
 800d4f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4f4:	bf04      	itt	eq
 800d4f6:	0100      	lsleq	r0, r0, #4
 800d4f8:	3304      	addeq	r3, #4
 800d4fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4fe:	bf04      	itt	eq
 800d500:	0080      	lsleq	r0, r0, #2
 800d502:	3302      	addeq	r3, #2
 800d504:	2800      	cmp	r0, #0
 800d506:	db05      	blt.n	800d514 <__hi0bits+0x38>
 800d508:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d50c:	f103 0301 	add.w	r3, r3, #1
 800d510:	bf08      	it	eq
 800d512:	2320      	moveq	r3, #32
 800d514:	4618      	mov	r0, r3
 800d516:	4770      	bx	lr
 800d518:	2300      	movs	r3, #0
 800d51a:	e7e4      	b.n	800d4e6 <__hi0bits+0xa>

0800d51c <__lo0bits>:
 800d51c:	6803      	ldr	r3, [r0, #0]
 800d51e:	f013 0207 	ands.w	r2, r3, #7
 800d522:	4601      	mov	r1, r0
 800d524:	d00b      	beq.n	800d53e <__lo0bits+0x22>
 800d526:	07da      	lsls	r2, r3, #31
 800d528:	d423      	bmi.n	800d572 <__lo0bits+0x56>
 800d52a:	0798      	lsls	r0, r3, #30
 800d52c:	bf49      	itett	mi
 800d52e:	085b      	lsrmi	r3, r3, #1
 800d530:	089b      	lsrpl	r3, r3, #2
 800d532:	2001      	movmi	r0, #1
 800d534:	600b      	strmi	r3, [r1, #0]
 800d536:	bf5c      	itt	pl
 800d538:	600b      	strpl	r3, [r1, #0]
 800d53a:	2002      	movpl	r0, #2
 800d53c:	4770      	bx	lr
 800d53e:	b298      	uxth	r0, r3
 800d540:	b9a8      	cbnz	r0, 800d56e <__lo0bits+0x52>
 800d542:	0c1b      	lsrs	r3, r3, #16
 800d544:	2010      	movs	r0, #16
 800d546:	b2da      	uxtb	r2, r3
 800d548:	b90a      	cbnz	r2, 800d54e <__lo0bits+0x32>
 800d54a:	3008      	adds	r0, #8
 800d54c:	0a1b      	lsrs	r3, r3, #8
 800d54e:	071a      	lsls	r2, r3, #28
 800d550:	bf04      	itt	eq
 800d552:	091b      	lsreq	r3, r3, #4
 800d554:	3004      	addeq	r0, #4
 800d556:	079a      	lsls	r2, r3, #30
 800d558:	bf04      	itt	eq
 800d55a:	089b      	lsreq	r3, r3, #2
 800d55c:	3002      	addeq	r0, #2
 800d55e:	07da      	lsls	r2, r3, #31
 800d560:	d403      	bmi.n	800d56a <__lo0bits+0x4e>
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	f100 0001 	add.w	r0, r0, #1
 800d568:	d005      	beq.n	800d576 <__lo0bits+0x5a>
 800d56a:	600b      	str	r3, [r1, #0]
 800d56c:	4770      	bx	lr
 800d56e:	4610      	mov	r0, r2
 800d570:	e7e9      	b.n	800d546 <__lo0bits+0x2a>
 800d572:	2000      	movs	r0, #0
 800d574:	4770      	bx	lr
 800d576:	2020      	movs	r0, #32
 800d578:	4770      	bx	lr
	...

0800d57c <__i2b>:
 800d57c:	b510      	push	{r4, lr}
 800d57e:	460c      	mov	r4, r1
 800d580:	2101      	movs	r1, #1
 800d582:	f7ff ff03 	bl	800d38c <_Balloc>
 800d586:	4602      	mov	r2, r0
 800d588:	b928      	cbnz	r0, 800d596 <__i2b+0x1a>
 800d58a:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <__i2b+0x24>)
 800d58c:	4805      	ldr	r0, [pc, #20]	; (800d5a4 <__i2b+0x28>)
 800d58e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d592:	f000 fda5 	bl	800e0e0 <__assert_func>
 800d596:	2301      	movs	r3, #1
 800d598:	6144      	str	r4, [r0, #20]
 800d59a:	6103      	str	r3, [r0, #16]
 800d59c:	bd10      	pop	{r4, pc}
 800d59e:	bf00      	nop
 800d5a0:	0802acef 	.word	0x0802acef
 800d5a4:	0802ad00 	.word	0x0802ad00

0800d5a8 <__multiply>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	4691      	mov	r9, r2
 800d5ae:	690a      	ldr	r2, [r1, #16]
 800d5b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	bfb8      	it	lt
 800d5b8:	460b      	movlt	r3, r1
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	bfbc      	itt	lt
 800d5be:	464c      	movlt	r4, r9
 800d5c0:	4699      	movlt	r9, r3
 800d5c2:	6927      	ldr	r7, [r4, #16]
 800d5c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5c8:	68a3      	ldr	r3, [r4, #8]
 800d5ca:	6861      	ldr	r1, [r4, #4]
 800d5cc:	eb07 060a 	add.w	r6, r7, sl
 800d5d0:	42b3      	cmp	r3, r6
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	bfb8      	it	lt
 800d5d6:	3101      	addlt	r1, #1
 800d5d8:	f7ff fed8 	bl	800d38c <_Balloc>
 800d5dc:	b930      	cbnz	r0, 800d5ec <__multiply+0x44>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	4b44      	ldr	r3, [pc, #272]	; (800d6f4 <__multiply+0x14c>)
 800d5e2:	4845      	ldr	r0, [pc, #276]	; (800d6f8 <__multiply+0x150>)
 800d5e4:	f240 115d 	movw	r1, #349	; 0x15d
 800d5e8:	f000 fd7a 	bl	800e0e0 <__assert_func>
 800d5ec:	f100 0514 	add.w	r5, r0, #20
 800d5f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	4543      	cmp	r3, r8
 800d5fa:	d321      	bcc.n	800d640 <__multiply+0x98>
 800d5fc:	f104 0314 	add.w	r3, r4, #20
 800d600:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d604:	f109 0314 	add.w	r3, r9, #20
 800d608:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d60c:	9202      	str	r2, [sp, #8]
 800d60e:	1b3a      	subs	r2, r7, r4
 800d610:	3a15      	subs	r2, #21
 800d612:	f022 0203 	bic.w	r2, r2, #3
 800d616:	3204      	adds	r2, #4
 800d618:	f104 0115 	add.w	r1, r4, #21
 800d61c:	428f      	cmp	r7, r1
 800d61e:	bf38      	it	cc
 800d620:	2204      	movcc	r2, #4
 800d622:	9201      	str	r2, [sp, #4]
 800d624:	9a02      	ldr	r2, [sp, #8]
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d80c      	bhi.n	800d646 <__multiply+0x9e>
 800d62c:	2e00      	cmp	r6, #0
 800d62e:	dd03      	ble.n	800d638 <__multiply+0x90>
 800d630:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d634:	2b00      	cmp	r3, #0
 800d636:	d05a      	beq.n	800d6ee <__multiply+0x146>
 800d638:	6106      	str	r6, [r0, #16]
 800d63a:	b005      	add	sp, #20
 800d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d640:	f843 2b04 	str.w	r2, [r3], #4
 800d644:	e7d8      	b.n	800d5f8 <__multiply+0x50>
 800d646:	f8b3 a000 	ldrh.w	sl, [r3]
 800d64a:	f1ba 0f00 	cmp.w	sl, #0
 800d64e:	d024      	beq.n	800d69a <__multiply+0xf2>
 800d650:	f104 0e14 	add.w	lr, r4, #20
 800d654:	46a9      	mov	r9, r5
 800d656:	f04f 0c00 	mov.w	ip, #0
 800d65a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d65e:	f8d9 1000 	ldr.w	r1, [r9]
 800d662:	fa1f fb82 	uxth.w	fp, r2
 800d666:	b289      	uxth	r1, r1
 800d668:	fb0a 110b 	mla	r1, sl, fp, r1
 800d66c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d670:	f8d9 2000 	ldr.w	r2, [r9]
 800d674:	4461      	add	r1, ip
 800d676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d67a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d67e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d682:	b289      	uxth	r1, r1
 800d684:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d688:	4577      	cmp	r7, lr
 800d68a:	f849 1b04 	str.w	r1, [r9], #4
 800d68e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d692:	d8e2      	bhi.n	800d65a <__multiply+0xb2>
 800d694:	9a01      	ldr	r2, [sp, #4]
 800d696:	f845 c002 	str.w	ip, [r5, r2]
 800d69a:	9a03      	ldr	r2, [sp, #12]
 800d69c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	f1b9 0f00 	cmp.w	r9, #0
 800d6a6:	d020      	beq.n	800d6ea <__multiply+0x142>
 800d6a8:	6829      	ldr	r1, [r5, #0]
 800d6aa:	f104 0c14 	add.w	ip, r4, #20
 800d6ae:	46ae      	mov	lr, r5
 800d6b0:	f04f 0a00 	mov.w	sl, #0
 800d6b4:	f8bc b000 	ldrh.w	fp, [ip]
 800d6b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6bc:	fb09 220b 	mla	r2, r9, fp, r2
 800d6c0:	4492      	add	sl, r2
 800d6c2:	b289      	uxth	r1, r1
 800d6c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6c8:	f84e 1b04 	str.w	r1, [lr], #4
 800d6cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6d0:	f8be 1000 	ldrh.w	r1, [lr]
 800d6d4:	0c12      	lsrs	r2, r2, #16
 800d6d6:	fb09 1102 	mla	r1, r9, r2, r1
 800d6da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6de:	4567      	cmp	r7, ip
 800d6e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6e4:	d8e6      	bhi.n	800d6b4 <__multiply+0x10c>
 800d6e6:	9a01      	ldr	r2, [sp, #4]
 800d6e8:	50a9      	str	r1, [r5, r2]
 800d6ea:	3504      	adds	r5, #4
 800d6ec:	e79a      	b.n	800d624 <__multiply+0x7c>
 800d6ee:	3e01      	subs	r6, #1
 800d6f0:	e79c      	b.n	800d62c <__multiply+0x84>
 800d6f2:	bf00      	nop
 800d6f4:	0802acef 	.word	0x0802acef
 800d6f8:	0802ad00 	.word	0x0802ad00

0800d6fc <__pow5mult>:
 800d6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d700:	4615      	mov	r5, r2
 800d702:	f012 0203 	ands.w	r2, r2, #3
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	d007      	beq.n	800d71c <__pow5mult+0x20>
 800d70c:	4c25      	ldr	r4, [pc, #148]	; (800d7a4 <__pow5mult+0xa8>)
 800d70e:	3a01      	subs	r2, #1
 800d710:	2300      	movs	r3, #0
 800d712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d716:	f7ff fe9b 	bl	800d450 <__multadd>
 800d71a:	4607      	mov	r7, r0
 800d71c:	10ad      	asrs	r5, r5, #2
 800d71e:	d03d      	beq.n	800d79c <__pow5mult+0xa0>
 800d720:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d722:	b97c      	cbnz	r4, 800d744 <__pow5mult+0x48>
 800d724:	2010      	movs	r0, #16
 800d726:	f7ff fe1d 	bl	800d364 <malloc>
 800d72a:	4602      	mov	r2, r0
 800d72c:	6270      	str	r0, [r6, #36]	; 0x24
 800d72e:	b928      	cbnz	r0, 800d73c <__pow5mult+0x40>
 800d730:	4b1d      	ldr	r3, [pc, #116]	; (800d7a8 <__pow5mult+0xac>)
 800d732:	481e      	ldr	r0, [pc, #120]	; (800d7ac <__pow5mult+0xb0>)
 800d734:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d738:	f000 fcd2 	bl	800e0e0 <__assert_func>
 800d73c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d740:	6004      	str	r4, [r0, #0]
 800d742:	60c4      	str	r4, [r0, #12]
 800d744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d74c:	b94c      	cbnz	r4, 800d762 <__pow5mult+0x66>
 800d74e:	f240 2171 	movw	r1, #625	; 0x271
 800d752:	4630      	mov	r0, r6
 800d754:	f7ff ff12 	bl	800d57c <__i2b>
 800d758:	2300      	movs	r3, #0
 800d75a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d75e:	4604      	mov	r4, r0
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	f04f 0900 	mov.w	r9, #0
 800d766:	07eb      	lsls	r3, r5, #31
 800d768:	d50a      	bpl.n	800d780 <__pow5mult+0x84>
 800d76a:	4639      	mov	r1, r7
 800d76c:	4622      	mov	r2, r4
 800d76e:	4630      	mov	r0, r6
 800d770:	f7ff ff1a 	bl	800d5a8 <__multiply>
 800d774:	4639      	mov	r1, r7
 800d776:	4680      	mov	r8, r0
 800d778:	4630      	mov	r0, r6
 800d77a:	f7ff fe47 	bl	800d40c <_Bfree>
 800d77e:	4647      	mov	r7, r8
 800d780:	106d      	asrs	r5, r5, #1
 800d782:	d00b      	beq.n	800d79c <__pow5mult+0xa0>
 800d784:	6820      	ldr	r0, [r4, #0]
 800d786:	b938      	cbnz	r0, 800d798 <__pow5mult+0x9c>
 800d788:	4622      	mov	r2, r4
 800d78a:	4621      	mov	r1, r4
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff ff0b 	bl	800d5a8 <__multiply>
 800d792:	6020      	str	r0, [r4, #0]
 800d794:	f8c0 9000 	str.w	r9, [r0]
 800d798:	4604      	mov	r4, r0
 800d79a:	e7e4      	b.n	800d766 <__pow5mult+0x6a>
 800d79c:	4638      	mov	r0, r7
 800d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	bf00      	nop
 800d7a4:	0802ae50 	.word	0x0802ae50
 800d7a8:	0802ac7d 	.word	0x0802ac7d
 800d7ac:	0802ad00 	.word	0x0802ad00

0800d7b0 <__lshift>:
 800d7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	6849      	ldr	r1, [r1, #4]
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	4691      	mov	r9, r2
 800d7c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7c8:	f108 0601 	add.w	r6, r8, #1
 800d7cc:	42b3      	cmp	r3, r6
 800d7ce:	db0b      	blt.n	800d7e8 <__lshift+0x38>
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7ff fddb 	bl	800d38c <_Balloc>
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	b948      	cbnz	r0, 800d7ee <__lshift+0x3e>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <__lshift+0xd8>)
 800d7de:	482b      	ldr	r0, [pc, #172]	; (800d88c <__lshift+0xdc>)
 800d7e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7e4:	f000 fc7c 	bl	800e0e0 <__assert_func>
 800d7e8:	3101      	adds	r1, #1
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	e7ee      	b.n	800d7cc <__lshift+0x1c>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f100 0114 	add.w	r1, r0, #20
 800d7f4:	f100 0210 	add.w	r2, r0, #16
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	4553      	cmp	r3, sl
 800d7fc:	db37      	blt.n	800d86e <__lshift+0xbe>
 800d7fe:	6920      	ldr	r0, [r4, #16]
 800d800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d804:	f104 0314 	add.w	r3, r4, #20
 800d808:	f019 091f 	ands.w	r9, r9, #31
 800d80c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d810:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d814:	d02f      	beq.n	800d876 <__lshift+0xc6>
 800d816:	f1c9 0e20 	rsb	lr, r9, #32
 800d81a:	468a      	mov	sl, r1
 800d81c:	f04f 0c00 	mov.w	ip, #0
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	fa02 f209 	lsl.w	r2, r2, r9
 800d826:	ea42 020c 	orr.w	r2, r2, ip
 800d82a:	f84a 2b04 	str.w	r2, [sl], #4
 800d82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d832:	4298      	cmp	r0, r3
 800d834:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d838:	d8f2      	bhi.n	800d820 <__lshift+0x70>
 800d83a:	1b03      	subs	r3, r0, r4
 800d83c:	3b15      	subs	r3, #21
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	3304      	adds	r3, #4
 800d844:	f104 0215 	add.w	r2, r4, #21
 800d848:	4290      	cmp	r0, r2
 800d84a:	bf38      	it	cc
 800d84c:	2304      	movcc	r3, #4
 800d84e:	f841 c003 	str.w	ip, [r1, r3]
 800d852:	f1bc 0f00 	cmp.w	ip, #0
 800d856:	d001      	beq.n	800d85c <__lshift+0xac>
 800d858:	f108 0602 	add.w	r6, r8, #2
 800d85c:	3e01      	subs	r6, #1
 800d85e:	4638      	mov	r0, r7
 800d860:	612e      	str	r6, [r5, #16]
 800d862:	4621      	mov	r1, r4
 800d864:	f7ff fdd2 	bl	800d40c <_Bfree>
 800d868:	4628      	mov	r0, r5
 800d86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d872:	3301      	adds	r3, #1
 800d874:	e7c1      	b.n	800d7fa <__lshift+0x4a>
 800d876:	3904      	subs	r1, #4
 800d878:	f853 2b04 	ldr.w	r2, [r3], #4
 800d87c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d880:	4298      	cmp	r0, r3
 800d882:	d8f9      	bhi.n	800d878 <__lshift+0xc8>
 800d884:	e7ea      	b.n	800d85c <__lshift+0xac>
 800d886:	bf00      	nop
 800d888:	0802acef 	.word	0x0802acef
 800d88c:	0802ad00 	.word	0x0802ad00

0800d890 <__mcmp>:
 800d890:	b530      	push	{r4, r5, lr}
 800d892:	6902      	ldr	r2, [r0, #16]
 800d894:	690c      	ldr	r4, [r1, #16]
 800d896:	1b12      	subs	r2, r2, r4
 800d898:	d10e      	bne.n	800d8b8 <__mcmp+0x28>
 800d89a:	f100 0314 	add.w	r3, r0, #20
 800d89e:	3114      	adds	r1, #20
 800d8a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8b0:	42a5      	cmp	r5, r4
 800d8b2:	d003      	beq.n	800d8bc <__mcmp+0x2c>
 800d8b4:	d305      	bcc.n	800d8c2 <__mcmp+0x32>
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	bd30      	pop	{r4, r5, pc}
 800d8bc:	4283      	cmp	r3, r0
 800d8be:	d3f3      	bcc.n	800d8a8 <__mcmp+0x18>
 800d8c0:	e7fa      	b.n	800d8b8 <__mcmp+0x28>
 800d8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c6:	e7f7      	b.n	800d8b8 <__mcmp+0x28>

0800d8c8 <__mdiff>:
 800d8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4690      	mov	r8, r2
 800d8d6:	f7ff ffdb 	bl	800d890 <__mcmp>
 800d8da:	1e05      	subs	r5, r0, #0
 800d8dc:	d110      	bne.n	800d900 <__mdiff+0x38>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f7ff fd53 	bl	800d38c <_Balloc>
 800d8e6:	b930      	cbnz	r0, 800d8f6 <__mdiff+0x2e>
 800d8e8:	4b3a      	ldr	r3, [pc, #232]	; (800d9d4 <__mdiff+0x10c>)
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	f240 2132 	movw	r1, #562	; 0x232
 800d8f0:	4839      	ldr	r0, [pc, #228]	; (800d9d8 <__mdiff+0x110>)
 800d8f2:	f000 fbf5 	bl	800e0e0 <__assert_func>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d900:	bfa4      	itt	ge
 800d902:	4643      	movge	r3, r8
 800d904:	46a0      	movge	r8, r4
 800d906:	4630      	mov	r0, r6
 800d908:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d90c:	bfa6      	itte	ge
 800d90e:	461c      	movge	r4, r3
 800d910:	2500      	movge	r5, #0
 800d912:	2501      	movlt	r5, #1
 800d914:	f7ff fd3a 	bl	800d38c <_Balloc>
 800d918:	b920      	cbnz	r0, 800d924 <__mdiff+0x5c>
 800d91a:	4b2e      	ldr	r3, [pc, #184]	; (800d9d4 <__mdiff+0x10c>)
 800d91c:	4602      	mov	r2, r0
 800d91e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d922:	e7e5      	b.n	800d8f0 <__mdiff+0x28>
 800d924:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d928:	6926      	ldr	r6, [r4, #16]
 800d92a:	60c5      	str	r5, [r0, #12]
 800d92c:	f104 0914 	add.w	r9, r4, #20
 800d930:	f108 0514 	add.w	r5, r8, #20
 800d934:	f100 0e14 	add.w	lr, r0, #20
 800d938:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d93c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d940:	f108 0210 	add.w	r2, r8, #16
 800d944:	46f2      	mov	sl, lr
 800d946:	2100      	movs	r1, #0
 800d948:	f859 3b04 	ldr.w	r3, [r9], #4
 800d94c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d950:	fa1f f883 	uxth.w	r8, r3
 800d954:	fa11 f18b 	uxtah	r1, r1, fp
 800d958:	0c1b      	lsrs	r3, r3, #16
 800d95a:	eba1 0808 	sub.w	r8, r1, r8
 800d95e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d962:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d966:	fa1f f888 	uxth.w	r8, r8
 800d96a:	1419      	asrs	r1, r3, #16
 800d96c:	454e      	cmp	r6, r9
 800d96e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d972:	f84a 3b04 	str.w	r3, [sl], #4
 800d976:	d8e7      	bhi.n	800d948 <__mdiff+0x80>
 800d978:	1b33      	subs	r3, r6, r4
 800d97a:	3b15      	subs	r3, #21
 800d97c:	f023 0303 	bic.w	r3, r3, #3
 800d980:	3304      	adds	r3, #4
 800d982:	3415      	adds	r4, #21
 800d984:	42a6      	cmp	r6, r4
 800d986:	bf38      	it	cc
 800d988:	2304      	movcc	r3, #4
 800d98a:	441d      	add	r5, r3
 800d98c:	4473      	add	r3, lr
 800d98e:	469e      	mov	lr, r3
 800d990:	462e      	mov	r6, r5
 800d992:	4566      	cmp	r6, ip
 800d994:	d30e      	bcc.n	800d9b4 <__mdiff+0xec>
 800d996:	f10c 0203 	add.w	r2, ip, #3
 800d99a:	1b52      	subs	r2, r2, r5
 800d99c:	f022 0203 	bic.w	r2, r2, #3
 800d9a0:	3d03      	subs	r5, #3
 800d9a2:	45ac      	cmp	ip, r5
 800d9a4:	bf38      	it	cc
 800d9a6:	2200      	movcc	r2, #0
 800d9a8:	441a      	add	r2, r3
 800d9aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9ae:	b17b      	cbz	r3, 800d9d0 <__mdiff+0x108>
 800d9b0:	6107      	str	r7, [r0, #16]
 800d9b2:	e7a3      	b.n	800d8fc <__mdiff+0x34>
 800d9b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9b8:	fa11 f288 	uxtah	r2, r1, r8
 800d9bc:	1414      	asrs	r4, r2, #16
 800d9be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9c2:	b292      	uxth	r2, r2
 800d9c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9c8:	f84e 2b04 	str.w	r2, [lr], #4
 800d9cc:	1421      	asrs	r1, r4, #16
 800d9ce:	e7e0      	b.n	800d992 <__mdiff+0xca>
 800d9d0:	3f01      	subs	r7, #1
 800d9d2:	e7ea      	b.n	800d9aa <__mdiff+0xe2>
 800d9d4:	0802acef 	.word	0x0802acef
 800d9d8:	0802ad00 	.word	0x0802ad00

0800d9dc <__d2b>:
 800d9dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9e0:	4689      	mov	r9, r1
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	ec57 6b10 	vmov	r6, r7, d0
 800d9e8:	4690      	mov	r8, r2
 800d9ea:	f7ff fccf 	bl	800d38c <_Balloc>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b930      	cbnz	r0, 800da00 <__d2b+0x24>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	4b25      	ldr	r3, [pc, #148]	; (800da8c <__d2b+0xb0>)
 800d9f6:	4826      	ldr	r0, [pc, #152]	; (800da90 <__d2b+0xb4>)
 800d9f8:	f240 310a 	movw	r1, #778	; 0x30a
 800d9fc:	f000 fb70 	bl	800e0e0 <__assert_func>
 800da00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da08:	bb35      	cbnz	r5, 800da58 <__d2b+0x7c>
 800da0a:	2e00      	cmp	r6, #0
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	d028      	beq.n	800da62 <__d2b+0x86>
 800da10:	4668      	mov	r0, sp
 800da12:	9600      	str	r6, [sp, #0]
 800da14:	f7ff fd82 	bl	800d51c <__lo0bits>
 800da18:	9900      	ldr	r1, [sp, #0]
 800da1a:	b300      	cbz	r0, 800da5e <__d2b+0x82>
 800da1c:	9a01      	ldr	r2, [sp, #4]
 800da1e:	f1c0 0320 	rsb	r3, r0, #32
 800da22:	fa02 f303 	lsl.w	r3, r2, r3
 800da26:	430b      	orrs	r3, r1
 800da28:	40c2      	lsrs	r2, r0
 800da2a:	6163      	str	r3, [r4, #20]
 800da2c:	9201      	str	r2, [sp, #4]
 800da2e:	9b01      	ldr	r3, [sp, #4]
 800da30:	61a3      	str	r3, [r4, #24]
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf14      	ite	ne
 800da36:	2202      	movne	r2, #2
 800da38:	2201      	moveq	r2, #1
 800da3a:	6122      	str	r2, [r4, #16]
 800da3c:	b1d5      	cbz	r5, 800da74 <__d2b+0x98>
 800da3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da42:	4405      	add	r5, r0
 800da44:	f8c9 5000 	str.w	r5, [r9]
 800da48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da4c:	f8c8 0000 	str.w	r0, [r8]
 800da50:	4620      	mov	r0, r4
 800da52:	b003      	add	sp, #12
 800da54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da5c:	e7d5      	b.n	800da0a <__d2b+0x2e>
 800da5e:	6161      	str	r1, [r4, #20]
 800da60:	e7e5      	b.n	800da2e <__d2b+0x52>
 800da62:	a801      	add	r0, sp, #4
 800da64:	f7ff fd5a 	bl	800d51c <__lo0bits>
 800da68:	9b01      	ldr	r3, [sp, #4]
 800da6a:	6163      	str	r3, [r4, #20]
 800da6c:	2201      	movs	r2, #1
 800da6e:	6122      	str	r2, [r4, #16]
 800da70:	3020      	adds	r0, #32
 800da72:	e7e3      	b.n	800da3c <__d2b+0x60>
 800da74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da7c:	f8c9 0000 	str.w	r0, [r9]
 800da80:	6918      	ldr	r0, [r3, #16]
 800da82:	f7ff fd2b 	bl	800d4dc <__hi0bits>
 800da86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da8a:	e7df      	b.n	800da4c <__d2b+0x70>
 800da8c:	0802acef 	.word	0x0802acef
 800da90:	0802ad00 	.word	0x0802ad00

0800da94 <_calloc_r>:
 800da94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da96:	fba1 2402 	umull	r2, r4, r1, r2
 800da9a:	b94c      	cbnz	r4, 800dab0 <_calloc_r+0x1c>
 800da9c:	4611      	mov	r1, r2
 800da9e:	9201      	str	r2, [sp, #4]
 800daa0:	f7fd fe92 	bl	800b7c8 <_malloc_r>
 800daa4:	9a01      	ldr	r2, [sp, #4]
 800daa6:	4605      	mov	r5, r0
 800daa8:	b930      	cbnz	r0, 800dab8 <_calloc_r+0x24>
 800daaa:	4628      	mov	r0, r5
 800daac:	b003      	add	sp, #12
 800daae:	bd30      	pop	{r4, r5, pc}
 800dab0:	220c      	movs	r2, #12
 800dab2:	6002      	str	r2, [r0, #0]
 800dab4:	2500      	movs	r5, #0
 800dab6:	e7f8      	b.n	800daaa <_calloc_r+0x16>
 800dab8:	4621      	mov	r1, r4
 800daba:	f7fd fe10 	bl	800b6de <memset>
 800dabe:	e7f4      	b.n	800daaa <_calloc_r+0x16>

0800dac0 <__ssputs_r>:
 800dac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac4:	688e      	ldr	r6, [r1, #8]
 800dac6:	429e      	cmp	r6, r3
 800dac8:	4682      	mov	sl, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	4690      	mov	r8, r2
 800dace:	461f      	mov	r7, r3
 800dad0:	d838      	bhi.n	800db44 <__ssputs_r+0x84>
 800dad2:	898a      	ldrh	r2, [r1, #12]
 800dad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dad8:	d032      	beq.n	800db40 <__ssputs_r+0x80>
 800dada:	6825      	ldr	r5, [r4, #0]
 800dadc:	6909      	ldr	r1, [r1, #16]
 800dade:	eba5 0901 	sub.w	r9, r5, r1
 800dae2:	6965      	ldr	r5, [r4, #20]
 800dae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daec:	3301      	adds	r3, #1
 800daee:	444b      	add	r3, r9
 800daf0:	106d      	asrs	r5, r5, #1
 800daf2:	429d      	cmp	r5, r3
 800daf4:	bf38      	it	cc
 800daf6:	461d      	movcc	r5, r3
 800daf8:	0553      	lsls	r3, r2, #21
 800dafa:	d531      	bpl.n	800db60 <__ssputs_r+0xa0>
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7fd fe63 	bl	800b7c8 <_malloc_r>
 800db02:	4606      	mov	r6, r0
 800db04:	b950      	cbnz	r0, 800db1c <__ssputs_r+0x5c>
 800db06:	230c      	movs	r3, #12
 800db08:	f8ca 3000 	str.w	r3, [sl]
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db12:	81a3      	strh	r3, [r4, #12]
 800db14:	f04f 30ff 	mov.w	r0, #4294967295
 800db18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1c:	6921      	ldr	r1, [r4, #16]
 800db1e:	464a      	mov	r2, r9
 800db20:	f7fd fdcf 	bl	800b6c2 <memcpy>
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db2e:	81a3      	strh	r3, [r4, #12]
 800db30:	6126      	str	r6, [r4, #16]
 800db32:	6165      	str	r5, [r4, #20]
 800db34:	444e      	add	r6, r9
 800db36:	eba5 0509 	sub.w	r5, r5, r9
 800db3a:	6026      	str	r6, [r4, #0]
 800db3c:	60a5      	str	r5, [r4, #8]
 800db3e:	463e      	mov	r6, r7
 800db40:	42be      	cmp	r6, r7
 800db42:	d900      	bls.n	800db46 <__ssputs_r+0x86>
 800db44:	463e      	mov	r6, r7
 800db46:	6820      	ldr	r0, [r4, #0]
 800db48:	4632      	mov	r2, r6
 800db4a:	4641      	mov	r1, r8
 800db4c:	f000 fb2c 	bl	800e1a8 <memmove>
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	1b9b      	subs	r3, r3, r6
 800db54:	60a3      	str	r3, [r4, #8]
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	4433      	add	r3, r6
 800db5a:	6023      	str	r3, [r4, #0]
 800db5c:	2000      	movs	r0, #0
 800db5e:	e7db      	b.n	800db18 <__ssputs_r+0x58>
 800db60:	462a      	mov	r2, r5
 800db62:	f000 fb3b 	bl	800e1dc <_realloc_r>
 800db66:	4606      	mov	r6, r0
 800db68:	2800      	cmp	r0, #0
 800db6a:	d1e1      	bne.n	800db30 <__ssputs_r+0x70>
 800db6c:	6921      	ldr	r1, [r4, #16]
 800db6e:	4650      	mov	r0, sl
 800db70:	f7fd fdbe 	bl	800b6f0 <_free_r>
 800db74:	e7c7      	b.n	800db06 <__ssputs_r+0x46>
	...

0800db78 <_svfiprintf_r>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	4698      	mov	r8, r3
 800db7e:	898b      	ldrh	r3, [r1, #12]
 800db80:	061b      	lsls	r3, r3, #24
 800db82:	b09d      	sub	sp, #116	; 0x74
 800db84:	4607      	mov	r7, r0
 800db86:	460d      	mov	r5, r1
 800db88:	4614      	mov	r4, r2
 800db8a:	d50e      	bpl.n	800dbaa <_svfiprintf_r+0x32>
 800db8c:	690b      	ldr	r3, [r1, #16]
 800db8e:	b963      	cbnz	r3, 800dbaa <_svfiprintf_r+0x32>
 800db90:	2140      	movs	r1, #64	; 0x40
 800db92:	f7fd fe19 	bl	800b7c8 <_malloc_r>
 800db96:	6028      	str	r0, [r5, #0]
 800db98:	6128      	str	r0, [r5, #16]
 800db9a:	b920      	cbnz	r0, 800dba6 <_svfiprintf_r+0x2e>
 800db9c:	230c      	movs	r3, #12
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	e0d1      	b.n	800dd4a <_svfiprintf_r+0x1d2>
 800dba6:	2340      	movs	r3, #64	; 0x40
 800dba8:	616b      	str	r3, [r5, #20]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	9309      	str	r3, [sp, #36]	; 0x24
 800dbae:	2320      	movs	r3, #32
 800dbb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb8:	2330      	movs	r3, #48	; 0x30
 800dbba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd64 <_svfiprintf_r+0x1ec>
 800dbbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbc2:	f04f 0901 	mov.w	r9, #1
 800dbc6:	4623      	mov	r3, r4
 800dbc8:	469a      	mov	sl, r3
 800dbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbce:	b10a      	cbz	r2, 800dbd4 <_svfiprintf_r+0x5c>
 800dbd0:	2a25      	cmp	r2, #37	; 0x25
 800dbd2:	d1f9      	bne.n	800dbc8 <_svfiprintf_r+0x50>
 800dbd4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd8:	d00b      	beq.n	800dbf2 <_svfiprintf_r+0x7a>
 800dbda:	465b      	mov	r3, fp
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4629      	mov	r1, r5
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7ff ff6d 	bl	800dac0 <__ssputs_r>
 800dbe6:	3001      	adds	r0, #1
 800dbe8:	f000 80aa 	beq.w	800dd40 <_svfiprintf_r+0x1c8>
 800dbec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbee:	445a      	add	r2, fp
 800dbf0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 80a2 	beq.w	800dd40 <_svfiprintf_r+0x1c8>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc06:	f10a 0a01 	add.w	sl, sl, #1
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	9307      	str	r3, [sp, #28]
 800dc0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc12:	931a      	str	r3, [sp, #104]	; 0x68
 800dc14:	4654      	mov	r4, sl
 800dc16:	2205      	movs	r2, #5
 800dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1c:	4851      	ldr	r0, [pc, #324]	; (800dd64 <_svfiprintf_r+0x1ec>)
 800dc1e:	f7f2 fae7 	bl	80001f0 <memchr>
 800dc22:	9a04      	ldr	r2, [sp, #16]
 800dc24:	b9d8      	cbnz	r0, 800dc5e <_svfiprintf_r+0xe6>
 800dc26:	06d0      	lsls	r0, r2, #27
 800dc28:	bf44      	itt	mi
 800dc2a:	2320      	movmi	r3, #32
 800dc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc30:	0711      	lsls	r1, r2, #28
 800dc32:	bf44      	itt	mi
 800dc34:	232b      	movmi	r3, #43	; 0x2b
 800dc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc40:	d015      	beq.n	800dc6e <_svfiprintf_r+0xf6>
 800dc42:	9a07      	ldr	r2, [sp, #28]
 800dc44:	4654      	mov	r4, sl
 800dc46:	2000      	movs	r0, #0
 800dc48:	f04f 0c0a 	mov.w	ip, #10
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc52:	3b30      	subs	r3, #48	; 0x30
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	d94e      	bls.n	800dcf6 <_svfiprintf_r+0x17e>
 800dc58:	b1b0      	cbz	r0, 800dc88 <_svfiprintf_r+0x110>
 800dc5a:	9207      	str	r2, [sp, #28]
 800dc5c:	e014      	b.n	800dc88 <_svfiprintf_r+0x110>
 800dc5e:	eba0 0308 	sub.w	r3, r0, r8
 800dc62:	fa09 f303 	lsl.w	r3, r9, r3
 800dc66:	4313      	orrs	r3, r2
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	46a2      	mov	sl, r4
 800dc6c:	e7d2      	b.n	800dc14 <_svfiprintf_r+0x9c>
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	1d19      	adds	r1, r3, #4
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	9103      	str	r1, [sp, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	bfbb      	ittet	lt
 800dc7a:	425b      	neglt	r3, r3
 800dc7c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc80:	9307      	strge	r3, [sp, #28]
 800dc82:	9307      	strlt	r3, [sp, #28]
 800dc84:	bfb8      	it	lt
 800dc86:	9204      	strlt	r2, [sp, #16]
 800dc88:	7823      	ldrb	r3, [r4, #0]
 800dc8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc8c:	d10c      	bne.n	800dca8 <_svfiprintf_r+0x130>
 800dc8e:	7863      	ldrb	r3, [r4, #1]
 800dc90:	2b2a      	cmp	r3, #42	; 0x2a
 800dc92:	d135      	bne.n	800dd00 <_svfiprintf_r+0x188>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	1d1a      	adds	r2, r3, #4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	9203      	str	r2, [sp, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfb8      	it	lt
 800dca0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dca4:	3402      	adds	r4, #2
 800dca6:	9305      	str	r3, [sp, #20]
 800dca8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd74 <_svfiprintf_r+0x1fc>
 800dcac:	7821      	ldrb	r1, [r4, #0]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	f7f2 fa9d 	bl	80001f0 <memchr>
 800dcb6:	b140      	cbz	r0, 800dcca <_svfiprintf_r+0x152>
 800dcb8:	2340      	movs	r3, #64	; 0x40
 800dcba:	eba0 000a 	sub.w	r0, r0, sl
 800dcbe:	fa03 f000 	lsl.w	r0, r3, r0
 800dcc2:	9b04      	ldr	r3, [sp, #16]
 800dcc4:	4303      	orrs	r3, r0
 800dcc6:	3401      	adds	r4, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcce:	4826      	ldr	r0, [pc, #152]	; (800dd68 <_svfiprintf_r+0x1f0>)
 800dcd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcd4:	2206      	movs	r2, #6
 800dcd6:	f7f2 fa8b 	bl	80001f0 <memchr>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d038      	beq.n	800dd50 <_svfiprintf_r+0x1d8>
 800dcde:	4b23      	ldr	r3, [pc, #140]	; (800dd6c <_svfiprintf_r+0x1f4>)
 800dce0:	bb1b      	cbnz	r3, 800dd2a <_svfiprintf_r+0x1b2>
 800dce2:	9b03      	ldr	r3, [sp, #12]
 800dce4:	3307      	adds	r3, #7
 800dce6:	f023 0307 	bic.w	r3, r3, #7
 800dcea:	3308      	adds	r3, #8
 800dcec:	9303      	str	r3, [sp, #12]
 800dcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf0:	4433      	add	r3, r6
 800dcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf4:	e767      	b.n	800dbc6 <_svfiprintf_r+0x4e>
 800dcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	e7a5      	b.n	800dc4c <_svfiprintf_r+0xd4>
 800dd00:	2300      	movs	r3, #0
 800dd02:	3401      	adds	r4, #1
 800dd04:	9305      	str	r3, [sp, #20]
 800dd06:	4619      	mov	r1, r3
 800dd08:	f04f 0c0a 	mov.w	ip, #10
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd12:	3a30      	subs	r2, #48	; 0x30
 800dd14:	2a09      	cmp	r2, #9
 800dd16:	d903      	bls.n	800dd20 <_svfiprintf_r+0x1a8>
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0c5      	beq.n	800dca8 <_svfiprintf_r+0x130>
 800dd1c:	9105      	str	r1, [sp, #20]
 800dd1e:	e7c3      	b.n	800dca8 <_svfiprintf_r+0x130>
 800dd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd24:	4604      	mov	r4, r0
 800dd26:	2301      	movs	r3, #1
 800dd28:	e7f0      	b.n	800dd0c <_svfiprintf_r+0x194>
 800dd2a:	ab03      	add	r3, sp, #12
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	462a      	mov	r2, r5
 800dd30:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <_svfiprintf_r+0x1f8>)
 800dd32:	a904      	add	r1, sp, #16
 800dd34:	4638      	mov	r0, r7
 800dd36:	f7fd fe5b 	bl	800b9f0 <_printf_float>
 800dd3a:	1c42      	adds	r2, r0, #1
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	d1d6      	bne.n	800dcee <_svfiprintf_r+0x176>
 800dd40:	89ab      	ldrh	r3, [r5, #12]
 800dd42:	065b      	lsls	r3, r3, #25
 800dd44:	f53f af2c 	bmi.w	800dba0 <_svfiprintf_r+0x28>
 800dd48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd4a:	b01d      	add	sp, #116	; 0x74
 800dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	462a      	mov	r2, r5
 800dd56:	4b06      	ldr	r3, [pc, #24]	; (800dd70 <_svfiprintf_r+0x1f8>)
 800dd58:	a904      	add	r1, sp, #16
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f7fe f8ec 	bl	800bf38 <_printf_i>
 800dd60:	e7eb      	b.n	800dd3a <_svfiprintf_r+0x1c2>
 800dd62:	bf00      	nop
 800dd64:	0802ae5c 	.word	0x0802ae5c
 800dd68:	0802ae66 	.word	0x0802ae66
 800dd6c:	0800b9f1 	.word	0x0800b9f1
 800dd70:	0800dac1 	.word	0x0800dac1
 800dd74:	0802ae62 	.word	0x0802ae62

0800dd78 <__sfputc_r>:
 800dd78:	6893      	ldr	r3, [r2, #8]
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	b410      	push	{r4}
 800dd80:	6093      	str	r3, [r2, #8]
 800dd82:	da08      	bge.n	800dd96 <__sfputc_r+0x1e>
 800dd84:	6994      	ldr	r4, [r2, #24]
 800dd86:	42a3      	cmp	r3, r4
 800dd88:	db01      	blt.n	800dd8e <__sfputc_r+0x16>
 800dd8a:	290a      	cmp	r1, #10
 800dd8c:	d103      	bne.n	800dd96 <__sfputc_r+0x1e>
 800dd8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd92:	f7fe bb0f 	b.w	800c3b4 <__swbuf_r>
 800dd96:	6813      	ldr	r3, [r2, #0]
 800dd98:	1c58      	adds	r0, r3, #1
 800dd9a:	6010      	str	r0, [r2, #0]
 800dd9c:	7019      	strb	r1, [r3, #0]
 800dd9e:	4608      	mov	r0, r1
 800dda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <__sfputs_r>:
 800dda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460f      	mov	r7, r1
 800ddac:	4614      	mov	r4, r2
 800ddae:	18d5      	adds	r5, r2, r3
 800ddb0:	42ac      	cmp	r4, r5
 800ddb2:	d101      	bne.n	800ddb8 <__sfputs_r+0x12>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e007      	b.n	800ddc8 <__sfputs_r+0x22>
 800ddb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddbc:	463a      	mov	r2, r7
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff ffda 	bl	800dd78 <__sfputc_r>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d1f3      	bne.n	800ddb0 <__sfputs_r+0xa>
 800ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddcc <_vfiprintf_r>:
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	460d      	mov	r5, r1
 800ddd2:	b09d      	sub	sp, #116	; 0x74
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	4698      	mov	r8, r3
 800ddd8:	4606      	mov	r6, r0
 800ddda:	b118      	cbz	r0, 800dde4 <_vfiprintf_r+0x18>
 800dddc:	6983      	ldr	r3, [r0, #24]
 800ddde:	b90b      	cbnz	r3, 800dde4 <_vfiprintf_r+0x18>
 800dde0:	f7fd fbaa 	bl	800b538 <__sinit>
 800dde4:	4b89      	ldr	r3, [pc, #548]	; (800e00c <_vfiprintf_r+0x240>)
 800dde6:	429d      	cmp	r5, r3
 800dde8:	d11b      	bne.n	800de22 <_vfiprintf_r+0x56>
 800ddea:	6875      	ldr	r5, [r6, #4]
 800ddec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddee:	07d9      	lsls	r1, r3, #31
 800ddf0:	d405      	bmi.n	800ddfe <_vfiprintf_r+0x32>
 800ddf2:	89ab      	ldrh	r3, [r5, #12]
 800ddf4:	059a      	lsls	r2, r3, #22
 800ddf6:	d402      	bmi.n	800ddfe <_vfiprintf_r+0x32>
 800ddf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddfa:	f7fd fc60 	bl	800b6be <__retarget_lock_acquire_recursive>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	071b      	lsls	r3, r3, #28
 800de02:	d501      	bpl.n	800de08 <_vfiprintf_r+0x3c>
 800de04:	692b      	ldr	r3, [r5, #16]
 800de06:	b9eb      	cbnz	r3, 800de44 <_vfiprintf_r+0x78>
 800de08:	4629      	mov	r1, r5
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7fe fb36 	bl	800c47c <__swsetup_r>
 800de10:	b1c0      	cbz	r0, 800de44 <_vfiprintf_r+0x78>
 800de12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de14:	07dc      	lsls	r4, r3, #31
 800de16:	d50e      	bpl.n	800de36 <_vfiprintf_r+0x6a>
 800de18:	f04f 30ff 	mov.w	r0, #4294967295
 800de1c:	b01d      	add	sp, #116	; 0x74
 800de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de22:	4b7b      	ldr	r3, [pc, #492]	; (800e010 <_vfiprintf_r+0x244>)
 800de24:	429d      	cmp	r5, r3
 800de26:	d101      	bne.n	800de2c <_vfiprintf_r+0x60>
 800de28:	68b5      	ldr	r5, [r6, #8]
 800de2a:	e7df      	b.n	800ddec <_vfiprintf_r+0x20>
 800de2c:	4b79      	ldr	r3, [pc, #484]	; (800e014 <_vfiprintf_r+0x248>)
 800de2e:	429d      	cmp	r5, r3
 800de30:	bf08      	it	eq
 800de32:	68f5      	ldreq	r5, [r6, #12]
 800de34:	e7da      	b.n	800ddec <_vfiprintf_r+0x20>
 800de36:	89ab      	ldrh	r3, [r5, #12]
 800de38:	0598      	lsls	r0, r3, #22
 800de3a:	d4ed      	bmi.n	800de18 <_vfiprintf_r+0x4c>
 800de3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de3e:	f7fd fc3f 	bl	800b6c0 <__retarget_lock_release_recursive>
 800de42:	e7e9      	b.n	800de18 <_vfiprintf_r+0x4c>
 800de44:	2300      	movs	r3, #0
 800de46:	9309      	str	r3, [sp, #36]	; 0x24
 800de48:	2320      	movs	r3, #32
 800de4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de52:	2330      	movs	r3, #48	; 0x30
 800de54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e018 <_vfiprintf_r+0x24c>
 800de58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de5c:	f04f 0901 	mov.w	r9, #1
 800de60:	4623      	mov	r3, r4
 800de62:	469a      	mov	sl, r3
 800de64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de68:	b10a      	cbz	r2, 800de6e <_vfiprintf_r+0xa2>
 800de6a:	2a25      	cmp	r2, #37	; 0x25
 800de6c:	d1f9      	bne.n	800de62 <_vfiprintf_r+0x96>
 800de6e:	ebba 0b04 	subs.w	fp, sl, r4
 800de72:	d00b      	beq.n	800de8c <_vfiprintf_r+0xc0>
 800de74:	465b      	mov	r3, fp
 800de76:	4622      	mov	r2, r4
 800de78:	4629      	mov	r1, r5
 800de7a:	4630      	mov	r0, r6
 800de7c:	f7ff ff93 	bl	800dda6 <__sfputs_r>
 800de80:	3001      	adds	r0, #1
 800de82:	f000 80aa 	beq.w	800dfda <_vfiprintf_r+0x20e>
 800de86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de88:	445a      	add	r2, fp
 800de8a:	9209      	str	r2, [sp, #36]	; 0x24
 800de8c:	f89a 3000 	ldrb.w	r3, [sl]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 80a2 	beq.w	800dfda <_vfiprintf_r+0x20e>
 800de96:	2300      	movs	r3, #0
 800de98:	f04f 32ff 	mov.w	r2, #4294967295
 800de9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea0:	f10a 0a01 	add.w	sl, sl, #1
 800dea4:	9304      	str	r3, [sp, #16]
 800dea6:	9307      	str	r3, [sp, #28]
 800dea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deac:	931a      	str	r3, [sp, #104]	; 0x68
 800deae:	4654      	mov	r4, sl
 800deb0:	2205      	movs	r2, #5
 800deb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb6:	4858      	ldr	r0, [pc, #352]	; (800e018 <_vfiprintf_r+0x24c>)
 800deb8:	f7f2 f99a 	bl	80001f0 <memchr>
 800debc:	9a04      	ldr	r2, [sp, #16]
 800debe:	b9d8      	cbnz	r0, 800def8 <_vfiprintf_r+0x12c>
 800dec0:	06d1      	lsls	r1, r2, #27
 800dec2:	bf44      	itt	mi
 800dec4:	2320      	movmi	r3, #32
 800dec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deca:	0713      	lsls	r3, r2, #28
 800decc:	bf44      	itt	mi
 800dece:	232b      	movmi	r3, #43	; 0x2b
 800ded0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded4:	f89a 3000 	ldrb.w	r3, [sl]
 800ded8:	2b2a      	cmp	r3, #42	; 0x2a
 800deda:	d015      	beq.n	800df08 <_vfiprintf_r+0x13c>
 800dedc:	9a07      	ldr	r2, [sp, #28]
 800dede:	4654      	mov	r4, sl
 800dee0:	2000      	movs	r0, #0
 800dee2:	f04f 0c0a 	mov.w	ip, #10
 800dee6:	4621      	mov	r1, r4
 800dee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deec:	3b30      	subs	r3, #48	; 0x30
 800deee:	2b09      	cmp	r3, #9
 800def0:	d94e      	bls.n	800df90 <_vfiprintf_r+0x1c4>
 800def2:	b1b0      	cbz	r0, 800df22 <_vfiprintf_r+0x156>
 800def4:	9207      	str	r2, [sp, #28]
 800def6:	e014      	b.n	800df22 <_vfiprintf_r+0x156>
 800def8:	eba0 0308 	sub.w	r3, r0, r8
 800defc:	fa09 f303 	lsl.w	r3, r9, r3
 800df00:	4313      	orrs	r3, r2
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	46a2      	mov	sl, r4
 800df06:	e7d2      	b.n	800deae <_vfiprintf_r+0xe2>
 800df08:	9b03      	ldr	r3, [sp, #12]
 800df0a:	1d19      	adds	r1, r3, #4
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	9103      	str	r1, [sp, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfbb      	ittet	lt
 800df14:	425b      	neglt	r3, r3
 800df16:	f042 0202 	orrlt.w	r2, r2, #2
 800df1a:	9307      	strge	r3, [sp, #28]
 800df1c:	9307      	strlt	r3, [sp, #28]
 800df1e:	bfb8      	it	lt
 800df20:	9204      	strlt	r2, [sp, #16]
 800df22:	7823      	ldrb	r3, [r4, #0]
 800df24:	2b2e      	cmp	r3, #46	; 0x2e
 800df26:	d10c      	bne.n	800df42 <_vfiprintf_r+0x176>
 800df28:	7863      	ldrb	r3, [r4, #1]
 800df2a:	2b2a      	cmp	r3, #42	; 0x2a
 800df2c:	d135      	bne.n	800df9a <_vfiprintf_r+0x1ce>
 800df2e:	9b03      	ldr	r3, [sp, #12]
 800df30:	1d1a      	adds	r2, r3, #4
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	9203      	str	r2, [sp, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfb8      	it	lt
 800df3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df3e:	3402      	adds	r4, #2
 800df40:	9305      	str	r3, [sp, #20]
 800df42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e028 <_vfiprintf_r+0x25c>
 800df46:	7821      	ldrb	r1, [r4, #0]
 800df48:	2203      	movs	r2, #3
 800df4a:	4650      	mov	r0, sl
 800df4c:	f7f2 f950 	bl	80001f0 <memchr>
 800df50:	b140      	cbz	r0, 800df64 <_vfiprintf_r+0x198>
 800df52:	2340      	movs	r3, #64	; 0x40
 800df54:	eba0 000a 	sub.w	r0, r0, sl
 800df58:	fa03 f000 	lsl.w	r0, r3, r0
 800df5c:	9b04      	ldr	r3, [sp, #16]
 800df5e:	4303      	orrs	r3, r0
 800df60:	3401      	adds	r4, #1
 800df62:	9304      	str	r3, [sp, #16]
 800df64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df68:	482c      	ldr	r0, [pc, #176]	; (800e01c <_vfiprintf_r+0x250>)
 800df6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df6e:	2206      	movs	r2, #6
 800df70:	f7f2 f93e 	bl	80001f0 <memchr>
 800df74:	2800      	cmp	r0, #0
 800df76:	d03f      	beq.n	800dff8 <_vfiprintf_r+0x22c>
 800df78:	4b29      	ldr	r3, [pc, #164]	; (800e020 <_vfiprintf_r+0x254>)
 800df7a:	bb1b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x1f8>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	3307      	adds	r3, #7
 800df80:	f023 0307 	bic.w	r3, r3, #7
 800df84:	3308      	adds	r3, #8
 800df86:	9303      	str	r3, [sp, #12]
 800df88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8a:	443b      	add	r3, r7
 800df8c:	9309      	str	r3, [sp, #36]	; 0x24
 800df8e:	e767      	b.n	800de60 <_vfiprintf_r+0x94>
 800df90:	fb0c 3202 	mla	r2, ip, r2, r3
 800df94:	460c      	mov	r4, r1
 800df96:	2001      	movs	r0, #1
 800df98:	e7a5      	b.n	800dee6 <_vfiprintf_r+0x11a>
 800df9a:	2300      	movs	r3, #0
 800df9c:	3401      	adds	r4, #1
 800df9e:	9305      	str	r3, [sp, #20]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f04f 0c0a 	mov.w	ip, #10
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfac:	3a30      	subs	r2, #48	; 0x30
 800dfae:	2a09      	cmp	r2, #9
 800dfb0:	d903      	bls.n	800dfba <_vfiprintf_r+0x1ee>
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0c5      	beq.n	800df42 <_vfiprintf_r+0x176>
 800dfb6:	9105      	str	r1, [sp, #20]
 800dfb8:	e7c3      	b.n	800df42 <_vfiprintf_r+0x176>
 800dfba:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e7f0      	b.n	800dfa6 <_vfiprintf_r+0x1da>
 800dfc4:	ab03      	add	r3, sp, #12
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4b16      	ldr	r3, [pc, #88]	; (800e024 <_vfiprintf_r+0x258>)
 800dfcc:	a904      	add	r1, sp, #16
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7fd fd0e 	bl	800b9f0 <_printf_float>
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	1c78      	adds	r0, r7, #1
 800dfd8:	d1d6      	bne.n	800df88 <_vfiprintf_r+0x1bc>
 800dfda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfdc:	07d9      	lsls	r1, r3, #31
 800dfde:	d405      	bmi.n	800dfec <_vfiprintf_r+0x220>
 800dfe0:	89ab      	ldrh	r3, [r5, #12]
 800dfe2:	059a      	lsls	r2, r3, #22
 800dfe4:	d402      	bmi.n	800dfec <_vfiprintf_r+0x220>
 800dfe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfe8:	f7fd fb6a 	bl	800b6c0 <__retarget_lock_release_recursive>
 800dfec:	89ab      	ldrh	r3, [r5, #12]
 800dfee:	065b      	lsls	r3, r3, #25
 800dff0:	f53f af12 	bmi.w	800de18 <_vfiprintf_r+0x4c>
 800dff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dff6:	e711      	b.n	800de1c <_vfiprintf_r+0x50>
 800dff8:	ab03      	add	r3, sp, #12
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	462a      	mov	r2, r5
 800dffe:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_vfiprintf_r+0x258>)
 800e000:	a904      	add	r1, sp, #16
 800e002:	4630      	mov	r0, r6
 800e004:	f7fd ff98 	bl	800bf38 <_printf_i>
 800e008:	e7e4      	b.n	800dfd4 <_vfiprintf_r+0x208>
 800e00a:	bf00      	nop
 800e00c:	0802abf8 	.word	0x0802abf8
 800e010:	0802ac18 	.word	0x0802ac18
 800e014:	0802abd8 	.word	0x0802abd8
 800e018:	0802ae5c 	.word	0x0802ae5c
 800e01c:	0802ae66 	.word	0x0802ae66
 800e020:	0800b9f1 	.word	0x0800b9f1
 800e024:	0800dda7 	.word	0x0800dda7
 800e028:	0802ae62 	.word	0x0802ae62

0800e02c <_putc_r>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	460d      	mov	r5, r1
 800e030:	4614      	mov	r4, r2
 800e032:	4606      	mov	r6, r0
 800e034:	b118      	cbz	r0, 800e03e <_putc_r+0x12>
 800e036:	6983      	ldr	r3, [r0, #24]
 800e038:	b90b      	cbnz	r3, 800e03e <_putc_r+0x12>
 800e03a:	f7fd fa7d 	bl	800b538 <__sinit>
 800e03e:	4b1c      	ldr	r3, [pc, #112]	; (800e0b0 <_putc_r+0x84>)
 800e040:	429c      	cmp	r4, r3
 800e042:	d124      	bne.n	800e08e <_putc_r+0x62>
 800e044:	6874      	ldr	r4, [r6, #4]
 800e046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e048:	07d8      	lsls	r0, r3, #31
 800e04a:	d405      	bmi.n	800e058 <_putc_r+0x2c>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	0599      	lsls	r1, r3, #22
 800e050:	d402      	bmi.n	800e058 <_putc_r+0x2c>
 800e052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e054:	f7fd fb33 	bl	800b6be <__retarget_lock_acquire_recursive>
 800e058:	68a3      	ldr	r3, [r4, #8]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	60a3      	str	r3, [r4, #8]
 800e060:	da05      	bge.n	800e06e <_putc_r+0x42>
 800e062:	69a2      	ldr	r2, [r4, #24]
 800e064:	4293      	cmp	r3, r2
 800e066:	db1c      	blt.n	800e0a2 <_putc_r+0x76>
 800e068:	b2eb      	uxtb	r3, r5
 800e06a:	2b0a      	cmp	r3, #10
 800e06c:	d019      	beq.n	800e0a2 <_putc_r+0x76>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	1c5a      	adds	r2, r3, #1
 800e072:	6022      	str	r2, [r4, #0]
 800e074:	701d      	strb	r5, [r3, #0]
 800e076:	b2ed      	uxtb	r5, r5
 800e078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e07a:	07da      	lsls	r2, r3, #31
 800e07c:	d405      	bmi.n	800e08a <_putc_r+0x5e>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	059b      	lsls	r3, r3, #22
 800e082:	d402      	bmi.n	800e08a <_putc_r+0x5e>
 800e084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e086:	f7fd fb1b 	bl	800b6c0 <__retarget_lock_release_recursive>
 800e08a:	4628      	mov	r0, r5
 800e08c:	bd70      	pop	{r4, r5, r6, pc}
 800e08e:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <_putc_r+0x88>)
 800e090:	429c      	cmp	r4, r3
 800e092:	d101      	bne.n	800e098 <_putc_r+0x6c>
 800e094:	68b4      	ldr	r4, [r6, #8]
 800e096:	e7d6      	b.n	800e046 <_putc_r+0x1a>
 800e098:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <_putc_r+0x8c>)
 800e09a:	429c      	cmp	r4, r3
 800e09c:	bf08      	it	eq
 800e09e:	68f4      	ldreq	r4, [r6, #12]
 800e0a0:	e7d1      	b.n	800e046 <_putc_r+0x1a>
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4622      	mov	r2, r4
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f7fe f984 	bl	800c3b4 <__swbuf_r>
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	e7e3      	b.n	800e078 <_putc_r+0x4c>
 800e0b0:	0802abf8 	.word	0x0802abf8
 800e0b4:	0802ac18 	.word	0x0802ac18
 800e0b8:	0802abd8 	.word	0x0802abd8

0800e0bc <_read_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4d07      	ldr	r5, [pc, #28]	; (800e0dc <_read_r+0x20>)
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	4608      	mov	r0, r1
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	602a      	str	r2, [r5, #0]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	f7f4 f9a4 	bl	8002418 <_read>
 800e0d0:	1c43      	adds	r3, r0, #1
 800e0d2:	d102      	bne.n	800e0da <_read_r+0x1e>
 800e0d4:	682b      	ldr	r3, [r5, #0]
 800e0d6:	b103      	cbz	r3, 800e0da <_read_r+0x1e>
 800e0d8:	6023      	str	r3, [r4, #0]
 800e0da:	bd38      	pop	{r3, r4, r5, pc}
 800e0dc:	2000fb44 	.word	0x2000fb44

0800e0e0 <__assert_func>:
 800e0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0e2:	4614      	mov	r4, r2
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	4b09      	ldr	r3, [pc, #36]	; (800e10c <__assert_func+0x2c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	68d8      	ldr	r0, [r3, #12]
 800e0ee:	b14c      	cbz	r4, 800e104 <__assert_func+0x24>
 800e0f0:	4b07      	ldr	r3, [pc, #28]	; (800e110 <__assert_func+0x30>)
 800e0f2:	9100      	str	r1, [sp, #0]
 800e0f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0f8:	4906      	ldr	r1, [pc, #24]	; (800e114 <__assert_func+0x34>)
 800e0fa:	462b      	mov	r3, r5
 800e0fc:	f000 f80e 	bl	800e11c <fiprintf>
 800e100:	f000 f8a8 	bl	800e254 <abort>
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <__assert_func+0x38>)
 800e106:	461c      	mov	r4, r3
 800e108:	e7f3      	b.n	800e0f2 <__assert_func+0x12>
 800e10a:	bf00      	nop
 800e10c:	20000170 	.word	0x20000170
 800e110:	0802ae6d 	.word	0x0802ae6d
 800e114:	0802ae7a 	.word	0x0802ae7a
 800e118:	0802aea8 	.word	0x0802aea8

0800e11c <fiprintf>:
 800e11c:	b40e      	push	{r1, r2, r3}
 800e11e:	b503      	push	{r0, r1, lr}
 800e120:	4601      	mov	r1, r0
 800e122:	ab03      	add	r3, sp, #12
 800e124:	4805      	ldr	r0, [pc, #20]	; (800e13c <fiprintf+0x20>)
 800e126:	f853 2b04 	ldr.w	r2, [r3], #4
 800e12a:	6800      	ldr	r0, [r0, #0]
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	f7ff fe4d 	bl	800ddcc <_vfiprintf_r>
 800e132:	b002      	add	sp, #8
 800e134:	f85d eb04 	ldr.w	lr, [sp], #4
 800e138:	b003      	add	sp, #12
 800e13a:	4770      	bx	lr
 800e13c:	20000170 	.word	0x20000170

0800e140 <_fstat_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	4d07      	ldr	r5, [pc, #28]	; (800e160 <_fstat_r+0x20>)
 800e144:	2300      	movs	r3, #0
 800e146:	4604      	mov	r4, r0
 800e148:	4608      	mov	r0, r1
 800e14a:	4611      	mov	r1, r2
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	f7f4 f984 	bl	800245a <_fstat>
 800e152:	1c43      	adds	r3, r0, #1
 800e154:	d102      	bne.n	800e15c <_fstat_r+0x1c>
 800e156:	682b      	ldr	r3, [r5, #0]
 800e158:	b103      	cbz	r3, 800e15c <_fstat_r+0x1c>
 800e15a:	6023      	str	r3, [r4, #0]
 800e15c:	bd38      	pop	{r3, r4, r5, pc}
 800e15e:	bf00      	nop
 800e160:	2000fb44 	.word	0x2000fb44

0800e164 <_isatty_r>:
 800e164:	b538      	push	{r3, r4, r5, lr}
 800e166:	4d06      	ldr	r5, [pc, #24]	; (800e180 <_isatty_r+0x1c>)
 800e168:	2300      	movs	r3, #0
 800e16a:	4604      	mov	r4, r0
 800e16c:	4608      	mov	r0, r1
 800e16e:	602b      	str	r3, [r5, #0]
 800e170:	f7f4 f978 	bl	8002464 <_isatty>
 800e174:	1c43      	adds	r3, r0, #1
 800e176:	d102      	bne.n	800e17e <_isatty_r+0x1a>
 800e178:	682b      	ldr	r3, [r5, #0]
 800e17a:	b103      	cbz	r3, 800e17e <_isatty_r+0x1a>
 800e17c:	6023      	str	r3, [r4, #0]
 800e17e:	bd38      	pop	{r3, r4, r5, pc}
 800e180:	2000fb44 	.word	0x2000fb44

0800e184 <__ascii_mbtowc>:
 800e184:	b082      	sub	sp, #8
 800e186:	b901      	cbnz	r1, 800e18a <__ascii_mbtowc+0x6>
 800e188:	a901      	add	r1, sp, #4
 800e18a:	b142      	cbz	r2, 800e19e <__ascii_mbtowc+0x1a>
 800e18c:	b14b      	cbz	r3, 800e1a2 <__ascii_mbtowc+0x1e>
 800e18e:	7813      	ldrb	r3, [r2, #0]
 800e190:	600b      	str	r3, [r1, #0]
 800e192:	7812      	ldrb	r2, [r2, #0]
 800e194:	1e10      	subs	r0, r2, #0
 800e196:	bf18      	it	ne
 800e198:	2001      	movne	r0, #1
 800e19a:	b002      	add	sp, #8
 800e19c:	4770      	bx	lr
 800e19e:	4610      	mov	r0, r2
 800e1a0:	e7fb      	b.n	800e19a <__ascii_mbtowc+0x16>
 800e1a2:	f06f 0001 	mvn.w	r0, #1
 800e1a6:	e7f8      	b.n	800e19a <__ascii_mbtowc+0x16>

0800e1a8 <memmove>:
 800e1a8:	4288      	cmp	r0, r1
 800e1aa:	b510      	push	{r4, lr}
 800e1ac:	eb01 0402 	add.w	r4, r1, r2
 800e1b0:	d902      	bls.n	800e1b8 <memmove+0x10>
 800e1b2:	4284      	cmp	r4, r0
 800e1b4:	4623      	mov	r3, r4
 800e1b6:	d807      	bhi.n	800e1c8 <memmove+0x20>
 800e1b8:	1e43      	subs	r3, r0, #1
 800e1ba:	42a1      	cmp	r1, r4
 800e1bc:	d008      	beq.n	800e1d0 <memmove+0x28>
 800e1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1c6:	e7f8      	b.n	800e1ba <memmove+0x12>
 800e1c8:	4402      	add	r2, r0
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	428a      	cmp	r2, r1
 800e1ce:	d100      	bne.n	800e1d2 <memmove+0x2a>
 800e1d0:	bd10      	pop	{r4, pc}
 800e1d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1da:	e7f7      	b.n	800e1cc <memmove+0x24>

0800e1dc <_realloc_r>:
 800e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e0:	4680      	mov	r8, r0
 800e1e2:	4614      	mov	r4, r2
 800e1e4:	460e      	mov	r6, r1
 800e1e6:	b921      	cbnz	r1, 800e1f2 <_realloc_r+0x16>
 800e1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	f7fd baeb 	b.w	800b7c8 <_malloc_r>
 800e1f2:	b92a      	cbnz	r2, 800e200 <_realloc_r+0x24>
 800e1f4:	f7fd fa7c 	bl	800b6f0 <_free_r>
 800e1f8:	4625      	mov	r5, r4
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e200:	f000 f82f 	bl	800e262 <_malloc_usable_size_r>
 800e204:	4284      	cmp	r4, r0
 800e206:	4607      	mov	r7, r0
 800e208:	d802      	bhi.n	800e210 <_realloc_r+0x34>
 800e20a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e20e:	d812      	bhi.n	800e236 <_realloc_r+0x5a>
 800e210:	4621      	mov	r1, r4
 800e212:	4640      	mov	r0, r8
 800e214:	f7fd fad8 	bl	800b7c8 <_malloc_r>
 800e218:	4605      	mov	r5, r0
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d0ed      	beq.n	800e1fa <_realloc_r+0x1e>
 800e21e:	42bc      	cmp	r4, r7
 800e220:	4622      	mov	r2, r4
 800e222:	4631      	mov	r1, r6
 800e224:	bf28      	it	cs
 800e226:	463a      	movcs	r2, r7
 800e228:	f7fd fa4b 	bl	800b6c2 <memcpy>
 800e22c:	4631      	mov	r1, r6
 800e22e:	4640      	mov	r0, r8
 800e230:	f7fd fa5e 	bl	800b6f0 <_free_r>
 800e234:	e7e1      	b.n	800e1fa <_realloc_r+0x1e>
 800e236:	4635      	mov	r5, r6
 800e238:	e7df      	b.n	800e1fa <_realloc_r+0x1e>

0800e23a <__ascii_wctomb>:
 800e23a:	b149      	cbz	r1, 800e250 <__ascii_wctomb+0x16>
 800e23c:	2aff      	cmp	r2, #255	; 0xff
 800e23e:	bf85      	ittet	hi
 800e240:	238a      	movhi	r3, #138	; 0x8a
 800e242:	6003      	strhi	r3, [r0, #0]
 800e244:	700a      	strbls	r2, [r1, #0]
 800e246:	f04f 30ff 	movhi.w	r0, #4294967295
 800e24a:	bf98      	it	ls
 800e24c:	2001      	movls	r0, #1
 800e24e:	4770      	bx	lr
 800e250:	4608      	mov	r0, r1
 800e252:	4770      	bx	lr

0800e254 <abort>:
 800e254:	b508      	push	{r3, lr}
 800e256:	2006      	movs	r0, #6
 800e258:	f000 f834 	bl	800e2c4 <raise>
 800e25c:	2001      	movs	r0, #1
 800e25e:	f7f4 f8d5 	bl	800240c <_exit>

0800e262 <_malloc_usable_size_r>:
 800e262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e266:	1f18      	subs	r0, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bfbc      	itt	lt
 800e26c:	580b      	ldrlt	r3, [r1, r0]
 800e26e:	18c0      	addlt	r0, r0, r3
 800e270:	4770      	bx	lr

0800e272 <_raise_r>:
 800e272:	291f      	cmp	r1, #31
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	4604      	mov	r4, r0
 800e278:	460d      	mov	r5, r1
 800e27a:	d904      	bls.n	800e286 <_raise_r+0x14>
 800e27c:	2316      	movs	r3, #22
 800e27e:	6003      	str	r3, [r0, #0]
 800e280:	f04f 30ff 	mov.w	r0, #4294967295
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e288:	b112      	cbz	r2, 800e290 <_raise_r+0x1e>
 800e28a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e28e:	b94b      	cbnz	r3, 800e2a4 <_raise_r+0x32>
 800e290:	4620      	mov	r0, r4
 800e292:	f000 f831 	bl	800e2f8 <_getpid_r>
 800e296:	462a      	mov	r2, r5
 800e298:	4601      	mov	r1, r0
 800e29a:	4620      	mov	r0, r4
 800e29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2a0:	f000 b818 	b.w	800e2d4 <_kill_r>
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d00a      	beq.n	800e2be <_raise_r+0x4c>
 800e2a8:	1c59      	adds	r1, r3, #1
 800e2aa:	d103      	bne.n	800e2b4 <_raise_r+0x42>
 800e2ac:	2316      	movs	r3, #22
 800e2ae:	6003      	str	r3, [r0, #0]
 800e2b0:	2001      	movs	r0, #1
 800e2b2:	e7e7      	b.n	800e284 <_raise_r+0x12>
 800e2b4:	2400      	movs	r4, #0
 800e2b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	4798      	blx	r3
 800e2be:	2000      	movs	r0, #0
 800e2c0:	e7e0      	b.n	800e284 <_raise_r+0x12>
	...

0800e2c4 <raise>:
 800e2c4:	4b02      	ldr	r3, [pc, #8]	; (800e2d0 <raise+0xc>)
 800e2c6:	4601      	mov	r1, r0
 800e2c8:	6818      	ldr	r0, [r3, #0]
 800e2ca:	f7ff bfd2 	b.w	800e272 <_raise_r>
 800e2ce:	bf00      	nop
 800e2d0:	20000170 	.word	0x20000170

0800e2d4 <_kill_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4d07      	ldr	r5, [pc, #28]	; (800e2f4 <_kill_r+0x20>)
 800e2d8:	2300      	movs	r3, #0
 800e2da:	4604      	mov	r4, r0
 800e2dc:	4608      	mov	r0, r1
 800e2de:	4611      	mov	r1, r2
 800e2e0:	602b      	str	r3, [r5, #0]
 800e2e2:	f7f4 f88b 	bl	80023fc <_kill>
 800e2e6:	1c43      	adds	r3, r0, #1
 800e2e8:	d102      	bne.n	800e2f0 <_kill_r+0x1c>
 800e2ea:	682b      	ldr	r3, [r5, #0]
 800e2ec:	b103      	cbz	r3, 800e2f0 <_kill_r+0x1c>
 800e2ee:	6023      	str	r3, [r4, #0]
 800e2f0:	bd38      	pop	{r3, r4, r5, pc}
 800e2f2:	bf00      	nop
 800e2f4:	2000fb44 	.word	0x2000fb44

0800e2f8 <_getpid_r>:
 800e2f8:	f7f4 b87e 	b.w	80023f8 <_getpid>

0800e2fc <pow>:
 800e2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fe:	ed2d 8b02 	vpush	{d8}
 800e302:	eeb0 8a40 	vmov.f32	s16, s0
 800e306:	eef0 8a60 	vmov.f32	s17, s1
 800e30a:	ec55 4b11 	vmov	r4, r5, d1
 800e30e:	f000 f883 	bl	800e418 <__ieee754_pow>
 800e312:	4622      	mov	r2, r4
 800e314:	462b      	mov	r3, r5
 800e316:	4620      	mov	r0, r4
 800e318:	4629      	mov	r1, r5
 800e31a:	ec57 6b10 	vmov	r6, r7, d0
 800e31e:	f7f2 fc0d 	bl	8000b3c <__aeabi_dcmpun>
 800e322:	2800      	cmp	r0, #0
 800e324:	d13b      	bne.n	800e39e <pow+0xa2>
 800e326:	ec51 0b18 	vmov	r0, r1, d8
 800e32a:	2200      	movs	r2, #0
 800e32c:	2300      	movs	r3, #0
 800e32e:	f7f2 fbd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800e332:	b1b8      	cbz	r0, 800e364 <pow+0x68>
 800e334:	2200      	movs	r2, #0
 800e336:	2300      	movs	r3, #0
 800e338:	4620      	mov	r0, r4
 800e33a:	4629      	mov	r1, r5
 800e33c:	f7f2 fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 800e340:	2800      	cmp	r0, #0
 800e342:	d146      	bne.n	800e3d2 <pow+0xd6>
 800e344:	ec45 4b10 	vmov	d0, r4, r5
 800e348:	f000 fe82 	bl	800f050 <finite>
 800e34c:	b338      	cbz	r0, 800e39e <pow+0xa2>
 800e34e:	2200      	movs	r2, #0
 800e350:	2300      	movs	r3, #0
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f2 fbc9 	bl	8000aec <__aeabi_dcmplt>
 800e35a:	b300      	cbz	r0, 800e39e <pow+0xa2>
 800e35c:	f7fc ffba 	bl	800b2d4 <__errno>
 800e360:	2322      	movs	r3, #34	; 0x22
 800e362:	e01b      	b.n	800e39c <pow+0xa0>
 800e364:	ec47 6b10 	vmov	d0, r6, r7
 800e368:	f000 fe72 	bl	800f050 <finite>
 800e36c:	b9e0      	cbnz	r0, 800e3a8 <pow+0xac>
 800e36e:	eeb0 0a48 	vmov.f32	s0, s16
 800e372:	eef0 0a68 	vmov.f32	s1, s17
 800e376:	f000 fe6b 	bl	800f050 <finite>
 800e37a:	b1a8      	cbz	r0, 800e3a8 <pow+0xac>
 800e37c:	ec45 4b10 	vmov	d0, r4, r5
 800e380:	f000 fe66 	bl	800f050 <finite>
 800e384:	b180      	cbz	r0, 800e3a8 <pow+0xac>
 800e386:	4632      	mov	r2, r6
 800e388:	463b      	mov	r3, r7
 800e38a:	4630      	mov	r0, r6
 800e38c:	4639      	mov	r1, r7
 800e38e:	f7f2 fbd5 	bl	8000b3c <__aeabi_dcmpun>
 800e392:	2800      	cmp	r0, #0
 800e394:	d0e2      	beq.n	800e35c <pow+0x60>
 800e396:	f7fc ff9d 	bl	800b2d4 <__errno>
 800e39a:	2321      	movs	r3, #33	; 0x21
 800e39c:	6003      	str	r3, [r0, #0]
 800e39e:	ecbd 8b02 	vpop	{d8}
 800e3a2:	ec47 6b10 	vmov	d0, r6, r7
 800e3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	f7f2 fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d0f2      	beq.n	800e39e <pow+0xa2>
 800e3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e3bc:	eef0 0a68 	vmov.f32	s1, s17
 800e3c0:	f000 fe46 	bl	800f050 <finite>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d0ea      	beq.n	800e39e <pow+0xa2>
 800e3c8:	ec45 4b10 	vmov	d0, r4, r5
 800e3cc:	f000 fe40 	bl	800f050 <finite>
 800e3d0:	e7c3      	b.n	800e35a <pow+0x5e>
 800e3d2:	4f01      	ldr	r7, [pc, #4]	; (800e3d8 <pow+0xdc>)
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	e7e2      	b.n	800e39e <pow+0xa2>
 800e3d8:	3ff00000 	.word	0x3ff00000

0800e3dc <sqrtf>:
 800e3dc:	b508      	push	{r3, lr}
 800e3de:	ed2d 8b02 	vpush	{d8}
 800e3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3e6:	f000 fdf7 	bl	800efd8 <__ieee754_sqrtf>
 800e3ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f2:	d60c      	bvs.n	800e40e <sqrtf+0x32>
 800e3f4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e414 <sqrtf+0x38>
 800e3f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	d505      	bpl.n	800e40e <sqrtf+0x32>
 800e402:	f7fc ff67 	bl	800b2d4 <__errno>
 800e406:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e40a:	2321      	movs	r3, #33	; 0x21
 800e40c:	6003      	str	r3, [r0, #0]
 800e40e:	ecbd 8b02 	vpop	{d8}
 800e412:	bd08      	pop	{r3, pc}
 800e414:	00000000 	.word	0x00000000

0800e418 <__ieee754_pow>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	ed2d 8b06 	vpush	{d8-d10}
 800e420:	b089      	sub	sp, #36	; 0x24
 800e422:	ed8d 1b00 	vstr	d1, [sp]
 800e426:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e42a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e42e:	ea58 0102 	orrs.w	r1, r8, r2
 800e432:	ec57 6b10 	vmov	r6, r7, d0
 800e436:	d115      	bne.n	800e464 <__ieee754_pow+0x4c>
 800e438:	19b3      	adds	r3, r6, r6
 800e43a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e43e:	4152      	adcs	r2, r2
 800e440:	4299      	cmp	r1, r3
 800e442:	4b89      	ldr	r3, [pc, #548]	; (800e668 <__ieee754_pow+0x250>)
 800e444:	4193      	sbcs	r3, r2
 800e446:	f080 84d2 	bcs.w	800edee <__ieee754_pow+0x9d6>
 800e44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e44e:	4630      	mov	r0, r6
 800e450:	4639      	mov	r1, r7
 800e452:	f7f1 ff23 	bl	800029c <__adddf3>
 800e456:	ec41 0b10 	vmov	d0, r0, r1
 800e45a:	b009      	add	sp, #36	; 0x24
 800e45c:	ecbd 8b06 	vpop	{d8-d10}
 800e460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e464:	4b81      	ldr	r3, [pc, #516]	; (800e66c <__ieee754_pow+0x254>)
 800e466:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e46a:	429c      	cmp	r4, r3
 800e46c:	ee10 aa10 	vmov	sl, s0
 800e470:	463d      	mov	r5, r7
 800e472:	dc06      	bgt.n	800e482 <__ieee754_pow+0x6a>
 800e474:	d101      	bne.n	800e47a <__ieee754_pow+0x62>
 800e476:	2e00      	cmp	r6, #0
 800e478:	d1e7      	bne.n	800e44a <__ieee754_pow+0x32>
 800e47a:	4598      	cmp	r8, r3
 800e47c:	dc01      	bgt.n	800e482 <__ieee754_pow+0x6a>
 800e47e:	d10f      	bne.n	800e4a0 <__ieee754_pow+0x88>
 800e480:	b172      	cbz	r2, 800e4a0 <__ieee754_pow+0x88>
 800e482:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e486:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e48a:	ea55 050a 	orrs.w	r5, r5, sl
 800e48e:	d1dc      	bne.n	800e44a <__ieee754_pow+0x32>
 800e490:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e494:	18db      	adds	r3, r3, r3
 800e496:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e49a:	4152      	adcs	r2, r2
 800e49c:	429d      	cmp	r5, r3
 800e49e:	e7d0      	b.n	800e442 <__ieee754_pow+0x2a>
 800e4a0:	2d00      	cmp	r5, #0
 800e4a2:	da3b      	bge.n	800e51c <__ieee754_pow+0x104>
 800e4a4:	4b72      	ldr	r3, [pc, #456]	; (800e670 <__ieee754_pow+0x258>)
 800e4a6:	4598      	cmp	r8, r3
 800e4a8:	dc51      	bgt.n	800e54e <__ieee754_pow+0x136>
 800e4aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e4ae:	4598      	cmp	r8, r3
 800e4b0:	f340 84ac 	ble.w	800ee0c <__ieee754_pow+0x9f4>
 800e4b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e4b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e4bc:	2b14      	cmp	r3, #20
 800e4be:	dd0f      	ble.n	800e4e0 <__ieee754_pow+0xc8>
 800e4c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e4c4:	fa22 f103 	lsr.w	r1, r2, r3
 800e4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	f040 849d 	bne.w	800ee0c <__ieee754_pow+0x9f4>
 800e4d2:	f001 0101 	and.w	r1, r1, #1
 800e4d6:	f1c1 0302 	rsb	r3, r1, #2
 800e4da:	9304      	str	r3, [sp, #16]
 800e4dc:	b182      	cbz	r2, 800e500 <__ieee754_pow+0xe8>
 800e4de:	e05f      	b.n	800e5a0 <__ieee754_pow+0x188>
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	d15b      	bne.n	800e59c <__ieee754_pow+0x184>
 800e4e4:	f1c3 0314 	rsb	r3, r3, #20
 800e4e8:	fa48 f103 	asr.w	r1, r8, r3
 800e4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e4f0:	4543      	cmp	r3, r8
 800e4f2:	f040 8488 	bne.w	800ee06 <__ieee754_pow+0x9ee>
 800e4f6:	f001 0101 	and.w	r1, r1, #1
 800e4fa:	f1c1 0302 	rsb	r3, r1, #2
 800e4fe:	9304      	str	r3, [sp, #16]
 800e500:	4b5c      	ldr	r3, [pc, #368]	; (800e674 <__ieee754_pow+0x25c>)
 800e502:	4598      	cmp	r8, r3
 800e504:	d132      	bne.n	800e56c <__ieee754_pow+0x154>
 800e506:	f1b9 0f00 	cmp.w	r9, #0
 800e50a:	f280 8478 	bge.w	800edfe <__ieee754_pow+0x9e6>
 800e50e:	4959      	ldr	r1, [pc, #356]	; (800e674 <__ieee754_pow+0x25c>)
 800e510:	4632      	mov	r2, r6
 800e512:	463b      	mov	r3, r7
 800e514:	2000      	movs	r0, #0
 800e516:	f7f2 f9a1 	bl	800085c <__aeabi_ddiv>
 800e51a:	e79c      	b.n	800e456 <__ieee754_pow+0x3e>
 800e51c:	2300      	movs	r3, #0
 800e51e:	9304      	str	r3, [sp, #16]
 800e520:	2a00      	cmp	r2, #0
 800e522:	d13d      	bne.n	800e5a0 <__ieee754_pow+0x188>
 800e524:	4b51      	ldr	r3, [pc, #324]	; (800e66c <__ieee754_pow+0x254>)
 800e526:	4598      	cmp	r8, r3
 800e528:	d1ea      	bne.n	800e500 <__ieee754_pow+0xe8>
 800e52a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e52e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e532:	ea53 030a 	orrs.w	r3, r3, sl
 800e536:	f000 845a 	beq.w	800edee <__ieee754_pow+0x9d6>
 800e53a:	4b4f      	ldr	r3, [pc, #316]	; (800e678 <__ieee754_pow+0x260>)
 800e53c:	429c      	cmp	r4, r3
 800e53e:	dd08      	ble.n	800e552 <__ieee754_pow+0x13a>
 800e540:	f1b9 0f00 	cmp.w	r9, #0
 800e544:	f2c0 8457 	blt.w	800edf6 <__ieee754_pow+0x9de>
 800e548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e54c:	e783      	b.n	800e456 <__ieee754_pow+0x3e>
 800e54e:	2302      	movs	r3, #2
 800e550:	e7e5      	b.n	800e51e <__ieee754_pow+0x106>
 800e552:	f1b9 0f00 	cmp.w	r9, #0
 800e556:	f04f 0000 	mov.w	r0, #0
 800e55a:	f04f 0100 	mov.w	r1, #0
 800e55e:	f6bf af7a 	bge.w	800e456 <__ieee754_pow+0x3e>
 800e562:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e56a:	e774      	b.n	800e456 <__ieee754_pow+0x3e>
 800e56c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e570:	d106      	bne.n	800e580 <__ieee754_pow+0x168>
 800e572:	4632      	mov	r2, r6
 800e574:	463b      	mov	r3, r7
 800e576:	4630      	mov	r0, r6
 800e578:	4639      	mov	r1, r7
 800e57a:	f7f2 f845 	bl	8000608 <__aeabi_dmul>
 800e57e:	e76a      	b.n	800e456 <__ieee754_pow+0x3e>
 800e580:	4b3e      	ldr	r3, [pc, #248]	; (800e67c <__ieee754_pow+0x264>)
 800e582:	4599      	cmp	r9, r3
 800e584:	d10c      	bne.n	800e5a0 <__ieee754_pow+0x188>
 800e586:	2d00      	cmp	r5, #0
 800e588:	db0a      	blt.n	800e5a0 <__ieee754_pow+0x188>
 800e58a:	ec47 6b10 	vmov	d0, r6, r7
 800e58e:	b009      	add	sp, #36	; 0x24
 800e590:	ecbd 8b06 	vpop	{d8-d10}
 800e594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e598:	f000 bc6c 	b.w	800ee74 <__ieee754_sqrt>
 800e59c:	2300      	movs	r3, #0
 800e59e:	9304      	str	r3, [sp, #16]
 800e5a0:	ec47 6b10 	vmov	d0, r6, r7
 800e5a4:	f000 fd4b 	bl	800f03e <fabs>
 800e5a8:	ec51 0b10 	vmov	r0, r1, d0
 800e5ac:	f1ba 0f00 	cmp.w	sl, #0
 800e5b0:	d129      	bne.n	800e606 <__ieee754_pow+0x1ee>
 800e5b2:	b124      	cbz	r4, 800e5be <__ieee754_pow+0x1a6>
 800e5b4:	4b2f      	ldr	r3, [pc, #188]	; (800e674 <__ieee754_pow+0x25c>)
 800e5b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d123      	bne.n	800e606 <__ieee754_pow+0x1ee>
 800e5be:	f1b9 0f00 	cmp.w	r9, #0
 800e5c2:	da05      	bge.n	800e5d0 <__ieee754_pow+0x1b8>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	492a      	ldr	r1, [pc, #168]	; (800e674 <__ieee754_pow+0x25c>)
 800e5cc:	f7f2 f946 	bl	800085c <__aeabi_ddiv>
 800e5d0:	2d00      	cmp	r5, #0
 800e5d2:	f6bf af40 	bge.w	800e456 <__ieee754_pow+0x3e>
 800e5d6:	9b04      	ldr	r3, [sp, #16]
 800e5d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e5dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e5e0:	4323      	orrs	r3, r4
 800e5e2:	d108      	bne.n	800e5f6 <__ieee754_pow+0x1de>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	f7f1 fe54 	bl	8000298 <__aeabi_dsub>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	e78f      	b.n	800e516 <__ieee754_pow+0xfe>
 800e5f6:	9b04      	ldr	r3, [sp, #16]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	f47f af2c 	bne.w	800e456 <__ieee754_pow+0x3e>
 800e5fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e602:	4619      	mov	r1, r3
 800e604:	e727      	b.n	800e456 <__ieee754_pow+0x3e>
 800e606:	0feb      	lsrs	r3, r5, #31
 800e608:	3b01      	subs	r3, #1
 800e60a:	9306      	str	r3, [sp, #24]
 800e60c:	9a06      	ldr	r2, [sp, #24]
 800e60e:	9b04      	ldr	r3, [sp, #16]
 800e610:	4313      	orrs	r3, r2
 800e612:	d102      	bne.n	800e61a <__ieee754_pow+0x202>
 800e614:	4632      	mov	r2, r6
 800e616:	463b      	mov	r3, r7
 800e618:	e7e6      	b.n	800e5e8 <__ieee754_pow+0x1d0>
 800e61a:	4b19      	ldr	r3, [pc, #100]	; (800e680 <__ieee754_pow+0x268>)
 800e61c:	4598      	cmp	r8, r3
 800e61e:	f340 80fb 	ble.w	800e818 <__ieee754_pow+0x400>
 800e622:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e626:	4598      	cmp	r8, r3
 800e628:	4b13      	ldr	r3, [pc, #76]	; (800e678 <__ieee754_pow+0x260>)
 800e62a:	dd0c      	ble.n	800e646 <__ieee754_pow+0x22e>
 800e62c:	429c      	cmp	r4, r3
 800e62e:	dc0f      	bgt.n	800e650 <__ieee754_pow+0x238>
 800e630:	f1b9 0f00 	cmp.w	r9, #0
 800e634:	da0f      	bge.n	800e656 <__ieee754_pow+0x23e>
 800e636:	2000      	movs	r0, #0
 800e638:	b009      	add	sp, #36	; 0x24
 800e63a:	ecbd 8b06 	vpop	{d8-d10}
 800e63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e642:	f000 bcf3 	b.w	800f02c <__math_oflow>
 800e646:	429c      	cmp	r4, r3
 800e648:	dbf2      	blt.n	800e630 <__ieee754_pow+0x218>
 800e64a:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <__ieee754_pow+0x25c>)
 800e64c:	429c      	cmp	r4, r3
 800e64e:	dd19      	ble.n	800e684 <__ieee754_pow+0x26c>
 800e650:	f1b9 0f00 	cmp.w	r9, #0
 800e654:	dcef      	bgt.n	800e636 <__ieee754_pow+0x21e>
 800e656:	2000      	movs	r0, #0
 800e658:	b009      	add	sp, #36	; 0x24
 800e65a:	ecbd 8b06 	vpop	{d8-d10}
 800e65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e662:	f000 bcda 	b.w	800f01a <__math_uflow>
 800e666:	bf00      	nop
 800e668:	fff00000 	.word	0xfff00000
 800e66c:	7ff00000 	.word	0x7ff00000
 800e670:	433fffff 	.word	0x433fffff
 800e674:	3ff00000 	.word	0x3ff00000
 800e678:	3fefffff 	.word	0x3fefffff
 800e67c:	3fe00000 	.word	0x3fe00000
 800e680:	41e00000 	.word	0x41e00000
 800e684:	4b60      	ldr	r3, [pc, #384]	; (800e808 <__ieee754_pow+0x3f0>)
 800e686:	2200      	movs	r2, #0
 800e688:	f7f1 fe06 	bl	8000298 <__aeabi_dsub>
 800e68c:	a354      	add	r3, pc, #336	; (adr r3, 800e7e0 <__ieee754_pow+0x3c8>)
 800e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e692:	4604      	mov	r4, r0
 800e694:	460d      	mov	r5, r1
 800e696:	f7f1 ffb7 	bl	8000608 <__aeabi_dmul>
 800e69a:	a353      	add	r3, pc, #332	; (adr r3, 800e7e8 <__ieee754_pow+0x3d0>)
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	460f      	mov	r7, r1
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	f7f1 ffae 	bl	8000608 <__aeabi_dmul>
 800e6ac:	4b57      	ldr	r3, [pc, #348]	; (800e80c <__ieee754_pow+0x3f4>)
 800e6ae:	4682      	mov	sl, r0
 800e6b0:	468b      	mov	fp, r1
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f1 ffa6 	bl	8000608 <__aeabi_dmul>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	a14b      	add	r1, pc, #300	; (adr r1, 800e7f0 <__ieee754_pow+0x3d8>)
 800e6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6c6:	f7f1 fde7 	bl	8000298 <__aeabi_dsub>
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	462b      	mov	r3, r5
 800e6ce:	f7f1 ff9b 	bl	8000608 <__aeabi_dmul>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	494d      	ldr	r1, [pc, #308]	; (800e810 <__ieee754_pow+0x3f8>)
 800e6da:	f7f1 fddd 	bl	8000298 <__aeabi_dsub>
 800e6de:	4622      	mov	r2, r4
 800e6e0:	4680      	mov	r8, r0
 800e6e2:	4689      	mov	r9, r1
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	f7f1 ff8d 	bl	8000608 <__aeabi_dmul>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	4649      	mov	r1, r9
 800e6f6:	f7f1 ff87 	bl	8000608 <__aeabi_dmul>
 800e6fa:	a33f      	add	r3, pc, #252	; (adr r3, 800e7f8 <__ieee754_pow+0x3e0>)
 800e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e700:	f7f1 ff82 	bl	8000608 <__aeabi_dmul>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4650      	mov	r0, sl
 800e70a:	4659      	mov	r1, fp
 800e70c:	f7f1 fdc4 	bl	8000298 <__aeabi_dsub>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	4630      	mov	r0, r6
 800e71a:	4639      	mov	r1, r7
 800e71c:	f7f1 fdbe 	bl	800029c <__adddf3>
 800e720:	2000      	movs	r0, #0
 800e722:	4632      	mov	r2, r6
 800e724:	463b      	mov	r3, r7
 800e726:	4604      	mov	r4, r0
 800e728:	460d      	mov	r5, r1
 800e72a:	f7f1 fdb5 	bl	8000298 <__aeabi_dsub>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4640      	mov	r0, r8
 800e734:	4649      	mov	r1, r9
 800e736:	f7f1 fdaf 	bl	8000298 <__aeabi_dsub>
 800e73a:	9b04      	ldr	r3, [sp, #16]
 800e73c:	9a06      	ldr	r2, [sp, #24]
 800e73e:	3b01      	subs	r3, #1
 800e740:	4313      	orrs	r3, r2
 800e742:	4682      	mov	sl, r0
 800e744:	468b      	mov	fp, r1
 800e746:	f040 81e7 	bne.w	800eb18 <__ieee754_pow+0x700>
 800e74a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e800 <__ieee754_pow+0x3e8>
 800e74e:	eeb0 8a47 	vmov.f32	s16, s14
 800e752:	eef0 8a67 	vmov.f32	s17, s15
 800e756:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e75a:	2600      	movs	r6, #0
 800e75c:	4632      	mov	r2, r6
 800e75e:	463b      	mov	r3, r7
 800e760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e764:	f7f1 fd98 	bl	8000298 <__aeabi_dsub>
 800e768:	4622      	mov	r2, r4
 800e76a:	462b      	mov	r3, r5
 800e76c:	f7f1 ff4c 	bl	8000608 <__aeabi_dmul>
 800e770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e774:	4680      	mov	r8, r0
 800e776:	4689      	mov	r9, r1
 800e778:	4650      	mov	r0, sl
 800e77a:	4659      	mov	r1, fp
 800e77c:	f7f1 ff44 	bl	8000608 <__aeabi_dmul>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	4640      	mov	r0, r8
 800e786:	4649      	mov	r1, r9
 800e788:	f7f1 fd88 	bl	800029c <__adddf3>
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4680      	mov	r8, r0
 800e792:	4689      	mov	r9, r1
 800e794:	4620      	mov	r0, r4
 800e796:	4629      	mov	r1, r5
 800e798:	f7f1 ff36 	bl	8000608 <__aeabi_dmul>
 800e79c:	460b      	mov	r3, r1
 800e79e:	4604      	mov	r4, r0
 800e7a0:	460d      	mov	r5, r1
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	f7f1 fd78 	bl	800029c <__adddf3>
 800e7ac:	4b19      	ldr	r3, [pc, #100]	; (800e814 <__ieee754_pow+0x3fc>)
 800e7ae:	4299      	cmp	r1, r3
 800e7b0:	ec45 4b19 	vmov	d9, r4, r5
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	468b      	mov	fp, r1
 800e7ba:	f340 82f1 	ble.w	800eda0 <__ieee754_pow+0x988>
 800e7be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e7c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e7c6:	4303      	orrs	r3, r0
 800e7c8:	f000 81e4 	beq.w	800eb94 <__ieee754_pow+0x77c>
 800e7cc:	ec51 0b18 	vmov	r0, r1, d8
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f7f2 f98a 	bl	8000aec <__aeabi_dcmplt>
 800e7d8:	3800      	subs	r0, #0
 800e7da:	bf18      	it	ne
 800e7dc:	2001      	movne	r0, #1
 800e7de:	e72b      	b.n	800e638 <__ieee754_pow+0x220>
 800e7e0:	60000000 	.word	0x60000000
 800e7e4:	3ff71547 	.word	0x3ff71547
 800e7e8:	f85ddf44 	.word	0xf85ddf44
 800e7ec:	3e54ae0b 	.word	0x3e54ae0b
 800e7f0:	55555555 	.word	0x55555555
 800e7f4:	3fd55555 	.word	0x3fd55555
 800e7f8:	652b82fe 	.word	0x652b82fe
 800e7fc:	3ff71547 	.word	0x3ff71547
 800e800:	00000000 	.word	0x00000000
 800e804:	bff00000 	.word	0xbff00000
 800e808:	3ff00000 	.word	0x3ff00000
 800e80c:	3fd00000 	.word	0x3fd00000
 800e810:	3fe00000 	.word	0x3fe00000
 800e814:	408fffff 	.word	0x408fffff
 800e818:	4bd5      	ldr	r3, [pc, #852]	; (800eb70 <__ieee754_pow+0x758>)
 800e81a:	402b      	ands	r3, r5
 800e81c:	2200      	movs	r2, #0
 800e81e:	b92b      	cbnz	r3, 800e82c <__ieee754_pow+0x414>
 800e820:	4bd4      	ldr	r3, [pc, #848]	; (800eb74 <__ieee754_pow+0x75c>)
 800e822:	f7f1 fef1 	bl	8000608 <__aeabi_dmul>
 800e826:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e82a:	460c      	mov	r4, r1
 800e82c:	1523      	asrs	r3, r4, #20
 800e82e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e832:	4413      	add	r3, r2
 800e834:	9305      	str	r3, [sp, #20]
 800e836:	4bd0      	ldr	r3, [pc, #832]	; (800eb78 <__ieee754_pow+0x760>)
 800e838:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e83c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e840:	429c      	cmp	r4, r3
 800e842:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e846:	dd08      	ble.n	800e85a <__ieee754_pow+0x442>
 800e848:	4bcc      	ldr	r3, [pc, #816]	; (800eb7c <__ieee754_pow+0x764>)
 800e84a:	429c      	cmp	r4, r3
 800e84c:	f340 8162 	ble.w	800eb14 <__ieee754_pow+0x6fc>
 800e850:	9b05      	ldr	r3, [sp, #20]
 800e852:	3301      	adds	r3, #1
 800e854:	9305      	str	r3, [sp, #20]
 800e856:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e85a:	2400      	movs	r4, #0
 800e85c:	00e3      	lsls	r3, r4, #3
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	4bc7      	ldr	r3, [pc, #796]	; (800eb80 <__ieee754_pow+0x768>)
 800e862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e866:	ed93 7b00 	vldr	d7, [r3]
 800e86a:	4629      	mov	r1, r5
 800e86c:	ec53 2b17 	vmov	r2, r3, d7
 800e870:	eeb0 9a47 	vmov.f32	s18, s14
 800e874:	eef0 9a67 	vmov.f32	s19, s15
 800e878:	4682      	mov	sl, r0
 800e87a:	f7f1 fd0d 	bl	8000298 <__aeabi_dsub>
 800e87e:	4652      	mov	r2, sl
 800e880:	4606      	mov	r6, r0
 800e882:	460f      	mov	r7, r1
 800e884:	462b      	mov	r3, r5
 800e886:	ec51 0b19 	vmov	r0, r1, d9
 800e88a:	f7f1 fd07 	bl	800029c <__adddf3>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	2000      	movs	r0, #0
 800e894:	49bb      	ldr	r1, [pc, #748]	; (800eb84 <__ieee754_pow+0x76c>)
 800e896:	f7f1 ffe1 	bl	800085c <__aeabi_ddiv>
 800e89a:	ec41 0b1a 	vmov	d10, r0, r1
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	4639      	mov	r1, r7
 800e8a6:	f7f1 feaf 	bl	8000608 <__aeabi_dmul>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8b0:	9302      	str	r3, [sp, #8]
 800e8b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e8b6:	46ab      	mov	fp, r5
 800e8b8:	106d      	asrs	r5, r5, #1
 800e8ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e8be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e8c2:	ec41 0b18 	vmov	d8, r0, r1
 800e8c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	461d      	mov	r5, r3
 800e8d4:	f7f1 fe98 	bl	8000608 <__aeabi_dmul>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	460b      	mov	r3, r1
 800e8dc:	4630      	mov	r0, r6
 800e8de:	4639      	mov	r1, r7
 800e8e0:	f7f1 fcda 	bl	8000298 <__aeabi_dsub>
 800e8e4:	ec53 2b19 	vmov	r2, r3, d9
 800e8e8:	4606      	mov	r6, r0
 800e8ea:	460f      	mov	r7, r1
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	f7f1 fcd2 	bl	8000298 <__aeabi_dsub>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4650      	mov	r0, sl
 800e8fa:	4659      	mov	r1, fp
 800e8fc:	f7f1 fccc 	bl	8000298 <__aeabi_dsub>
 800e900:	4642      	mov	r2, r8
 800e902:	464b      	mov	r3, r9
 800e904:	f7f1 fe80 	bl	8000608 <__aeabi_dmul>
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	4630      	mov	r0, r6
 800e90e:	4639      	mov	r1, r7
 800e910:	f7f1 fcc2 	bl	8000298 <__aeabi_dsub>
 800e914:	ec53 2b1a 	vmov	r2, r3, d10
 800e918:	f7f1 fe76 	bl	8000608 <__aeabi_dmul>
 800e91c:	ec53 2b18 	vmov	r2, r3, d8
 800e920:	ec41 0b19 	vmov	d9, r0, r1
 800e924:	ec51 0b18 	vmov	r0, r1, d8
 800e928:	f7f1 fe6e 	bl	8000608 <__aeabi_dmul>
 800e92c:	a37c      	add	r3, pc, #496	; (adr r3, 800eb20 <__ieee754_pow+0x708>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	4604      	mov	r4, r0
 800e934:	460d      	mov	r5, r1
 800e936:	f7f1 fe67 	bl	8000608 <__aeabi_dmul>
 800e93a:	a37b      	add	r3, pc, #492	; (adr r3, 800eb28 <__ieee754_pow+0x710>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	f7f1 fcac 	bl	800029c <__adddf3>
 800e944:	4622      	mov	r2, r4
 800e946:	462b      	mov	r3, r5
 800e948:	f7f1 fe5e 	bl	8000608 <__aeabi_dmul>
 800e94c:	a378      	add	r3, pc, #480	; (adr r3, 800eb30 <__ieee754_pow+0x718>)
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	f7f1 fca3 	bl	800029c <__adddf3>
 800e956:	4622      	mov	r2, r4
 800e958:	462b      	mov	r3, r5
 800e95a:	f7f1 fe55 	bl	8000608 <__aeabi_dmul>
 800e95e:	a376      	add	r3, pc, #472	; (adr r3, 800eb38 <__ieee754_pow+0x720>)
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f7f1 fc9a 	bl	800029c <__adddf3>
 800e968:	4622      	mov	r2, r4
 800e96a:	462b      	mov	r3, r5
 800e96c:	f7f1 fe4c 	bl	8000608 <__aeabi_dmul>
 800e970:	a373      	add	r3, pc, #460	; (adr r3, 800eb40 <__ieee754_pow+0x728>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	f7f1 fc91 	bl	800029c <__adddf3>
 800e97a:	4622      	mov	r2, r4
 800e97c:	462b      	mov	r3, r5
 800e97e:	f7f1 fe43 	bl	8000608 <__aeabi_dmul>
 800e982:	a371      	add	r3, pc, #452	; (adr r3, 800eb48 <__ieee754_pow+0x730>)
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	f7f1 fc88 	bl	800029c <__adddf3>
 800e98c:	4622      	mov	r2, r4
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	462b      	mov	r3, r5
 800e994:	4620      	mov	r0, r4
 800e996:	4629      	mov	r1, r5
 800e998:	f7f1 fe36 	bl	8000608 <__aeabi_dmul>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	f7f1 fe30 	bl	8000608 <__aeabi_dmul>
 800e9a8:	4642      	mov	r2, r8
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	464b      	mov	r3, r9
 800e9b0:	ec51 0b18 	vmov	r0, r1, d8
 800e9b4:	f7f1 fc72 	bl	800029c <__adddf3>
 800e9b8:	ec53 2b19 	vmov	r2, r3, d9
 800e9bc:	f7f1 fe24 	bl	8000608 <__aeabi_dmul>
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	462b      	mov	r3, r5
 800e9c4:	f7f1 fc6a 	bl	800029c <__adddf3>
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	4682      	mov	sl, r0
 800e9cc:	468b      	mov	fp, r1
 800e9ce:	464b      	mov	r3, r9
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	f7f1 fe18 	bl	8000608 <__aeabi_dmul>
 800e9d8:	4b6b      	ldr	r3, [pc, #428]	; (800eb88 <__ieee754_pow+0x770>)
 800e9da:	2200      	movs	r2, #0
 800e9dc:	4606      	mov	r6, r0
 800e9de:	460f      	mov	r7, r1
 800e9e0:	f7f1 fc5c 	bl	800029c <__adddf3>
 800e9e4:	4652      	mov	r2, sl
 800e9e6:	465b      	mov	r3, fp
 800e9e8:	f7f1 fc58 	bl	800029c <__adddf3>
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	460d      	mov	r5, r1
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f1 fe05 	bl	8000608 <__aeabi_dmul>
 800e9fe:	4b62      	ldr	r3, [pc, #392]	; (800eb88 <__ieee754_pow+0x770>)
 800ea00:	4680      	mov	r8, r0
 800ea02:	4689      	mov	r9, r1
 800ea04:	2200      	movs	r2, #0
 800ea06:	4620      	mov	r0, r4
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7f1 fc45 	bl	8000298 <__aeabi_dsub>
 800ea0e:	4632      	mov	r2, r6
 800ea10:	463b      	mov	r3, r7
 800ea12:	f7f1 fc41 	bl	8000298 <__aeabi_dsub>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	4650      	mov	r0, sl
 800ea1c:	4659      	mov	r1, fp
 800ea1e:	f7f1 fc3b 	bl	8000298 <__aeabi_dsub>
 800ea22:	ec53 2b18 	vmov	r2, r3, d8
 800ea26:	f7f1 fdef 	bl	8000608 <__aeabi_dmul>
 800ea2a:	4622      	mov	r2, r4
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	460f      	mov	r7, r1
 800ea30:	462b      	mov	r3, r5
 800ea32:	ec51 0b19 	vmov	r0, r1, d9
 800ea36:	f7f1 fde7 	bl	8000608 <__aeabi_dmul>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4630      	mov	r0, r6
 800ea40:	4639      	mov	r1, r7
 800ea42:	f7f1 fc2b 	bl	800029c <__adddf3>
 800ea46:	4606      	mov	r6, r0
 800ea48:	460f      	mov	r7, r1
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4640      	mov	r0, r8
 800ea50:	4649      	mov	r1, r9
 800ea52:	f7f1 fc23 	bl	800029c <__adddf3>
 800ea56:	a33e      	add	r3, pc, #248	; (adr r3, 800eb50 <__ieee754_pow+0x738>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	f7f1 fdd1 	bl	8000608 <__aeabi_dmul>
 800ea66:	4642      	mov	r2, r8
 800ea68:	ec41 0b18 	vmov	d8, r0, r1
 800ea6c:	464b      	mov	r3, r9
 800ea6e:	4620      	mov	r0, r4
 800ea70:	4629      	mov	r1, r5
 800ea72:	f7f1 fc11 	bl	8000298 <__aeabi_dsub>
 800ea76:	4602      	mov	r2, r0
 800ea78:	460b      	mov	r3, r1
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	f7f1 fc0b 	bl	8000298 <__aeabi_dsub>
 800ea82:	a335      	add	r3, pc, #212	; (adr r3, 800eb58 <__ieee754_pow+0x740>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f7f1 fdbe 	bl	8000608 <__aeabi_dmul>
 800ea8c:	a334      	add	r3, pc, #208	; (adr r3, 800eb60 <__ieee754_pow+0x748>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	4606      	mov	r6, r0
 800ea94:	460f      	mov	r7, r1
 800ea96:	4620      	mov	r0, r4
 800ea98:	4629      	mov	r1, r5
 800ea9a:	f7f1 fdb5 	bl	8000608 <__aeabi_dmul>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	4639      	mov	r1, r7
 800eaa6:	f7f1 fbf9 	bl	800029c <__adddf3>
 800eaaa:	9a07      	ldr	r2, [sp, #28]
 800eaac:	4b37      	ldr	r3, [pc, #220]	; (800eb8c <__ieee754_pow+0x774>)
 800eaae:	4413      	add	r3, r2
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fbf2 	bl	800029c <__adddf3>
 800eab8:	4682      	mov	sl, r0
 800eaba:	9805      	ldr	r0, [sp, #20]
 800eabc:	468b      	mov	fp, r1
 800eabe:	f7f1 fd39 	bl	8000534 <__aeabi_i2d>
 800eac2:	9a07      	ldr	r2, [sp, #28]
 800eac4:	4b32      	ldr	r3, [pc, #200]	; (800eb90 <__ieee754_pow+0x778>)
 800eac6:	4413      	add	r3, r2
 800eac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eacc:	4606      	mov	r6, r0
 800eace:	460f      	mov	r7, r1
 800ead0:	4652      	mov	r2, sl
 800ead2:	465b      	mov	r3, fp
 800ead4:	ec51 0b18 	vmov	r0, r1, d8
 800ead8:	f7f1 fbe0 	bl	800029c <__adddf3>
 800eadc:	4642      	mov	r2, r8
 800eade:	464b      	mov	r3, r9
 800eae0:	f7f1 fbdc 	bl	800029c <__adddf3>
 800eae4:	4632      	mov	r2, r6
 800eae6:	463b      	mov	r3, r7
 800eae8:	f7f1 fbd8 	bl	800029c <__adddf3>
 800eaec:	2000      	movs	r0, #0
 800eaee:	4632      	mov	r2, r6
 800eaf0:	463b      	mov	r3, r7
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	f7f1 fbcf 	bl	8000298 <__aeabi_dsub>
 800eafa:	4642      	mov	r2, r8
 800eafc:	464b      	mov	r3, r9
 800eafe:	f7f1 fbcb 	bl	8000298 <__aeabi_dsub>
 800eb02:	ec53 2b18 	vmov	r2, r3, d8
 800eb06:	f7f1 fbc7 	bl	8000298 <__aeabi_dsub>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	4650      	mov	r0, sl
 800eb10:	4659      	mov	r1, fp
 800eb12:	e610      	b.n	800e736 <__ieee754_pow+0x31e>
 800eb14:	2401      	movs	r4, #1
 800eb16:	e6a1      	b.n	800e85c <__ieee754_pow+0x444>
 800eb18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800eb68 <__ieee754_pow+0x750>
 800eb1c:	e617      	b.n	800e74e <__ieee754_pow+0x336>
 800eb1e:	bf00      	nop
 800eb20:	4a454eef 	.word	0x4a454eef
 800eb24:	3fca7e28 	.word	0x3fca7e28
 800eb28:	93c9db65 	.word	0x93c9db65
 800eb2c:	3fcd864a 	.word	0x3fcd864a
 800eb30:	a91d4101 	.word	0xa91d4101
 800eb34:	3fd17460 	.word	0x3fd17460
 800eb38:	518f264d 	.word	0x518f264d
 800eb3c:	3fd55555 	.word	0x3fd55555
 800eb40:	db6fabff 	.word	0xdb6fabff
 800eb44:	3fdb6db6 	.word	0x3fdb6db6
 800eb48:	33333303 	.word	0x33333303
 800eb4c:	3fe33333 	.word	0x3fe33333
 800eb50:	e0000000 	.word	0xe0000000
 800eb54:	3feec709 	.word	0x3feec709
 800eb58:	dc3a03fd 	.word	0xdc3a03fd
 800eb5c:	3feec709 	.word	0x3feec709
 800eb60:	145b01f5 	.word	0x145b01f5
 800eb64:	be3e2fe0 	.word	0xbe3e2fe0
 800eb68:	00000000 	.word	0x00000000
 800eb6c:	3ff00000 	.word	0x3ff00000
 800eb70:	7ff00000 	.word	0x7ff00000
 800eb74:	43400000 	.word	0x43400000
 800eb78:	0003988e 	.word	0x0003988e
 800eb7c:	000bb679 	.word	0x000bb679
 800eb80:	0802afb8 	.word	0x0802afb8
 800eb84:	3ff00000 	.word	0x3ff00000
 800eb88:	40080000 	.word	0x40080000
 800eb8c:	0802afd8 	.word	0x0802afd8
 800eb90:	0802afc8 	.word	0x0802afc8
 800eb94:	a3b5      	add	r3, pc, #724	; (adr r3, 800ee6c <__ieee754_pow+0xa54>)
 800eb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9a:	4640      	mov	r0, r8
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	f7f1 fb7d 	bl	800029c <__adddf3>
 800eba2:	4622      	mov	r2, r4
 800eba4:	ec41 0b1a 	vmov	d10, r0, r1
 800eba8:	462b      	mov	r3, r5
 800ebaa:	4630      	mov	r0, r6
 800ebac:	4639      	mov	r1, r7
 800ebae:	f7f1 fb73 	bl	8000298 <__aeabi_dsub>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	ec51 0b1a 	vmov	r0, r1, d10
 800ebba:	f7f1 ffb5 	bl	8000b28 <__aeabi_dcmpgt>
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	f47f ae04 	bne.w	800e7cc <__ieee754_pow+0x3b4>
 800ebc4:	4aa4      	ldr	r2, [pc, #656]	; (800ee58 <__ieee754_pow+0xa40>)
 800ebc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	f340 8108 	ble.w	800ede0 <__ieee754_pow+0x9c8>
 800ebd0:	151b      	asrs	r3, r3, #20
 800ebd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ebd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ebda:	fa4a f303 	asr.w	r3, sl, r3
 800ebde:	445b      	add	r3, fp
 800ebe0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ebe4:	4e9d      	ldr	r6, [pc, #628]	; (800ee5c <__ieee754_pow+0xa44>)
 800ebe6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ebea:	4116      	asrs	r6, r2
 800ebec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	ea23 0106 	bic.w	r1, r3, r6
 800ebf6:	f1c2 0214 	rsb	r2, r2, #20
 800ebfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ebfe:	fa4a fa02 	asr.w	sl, sl, r2
 800ec02:	f1bb 0f00 	cmp.w	fp, #0
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	bfb8      	it	lt
 800ec10:	f1ca 0a00 	rsblt	sl, sl, #0
 800ec14:	f7f1 fb40 	bl	8000298 <__aeabi_dsub>
 800ec18:	ec41 0b19 	vmov	d9, r0, r1
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	464b      	mov	r3, r9
 800ec20:	ec51 0b19 	vmov	r0, r1, d9
 800ec24:	f7f1 fb3a 	bl	800029c <__adddf3>
 800ec28:	a37b      	add	r3, pc, #492	; (adr r3, 800ee18 <__ieee754_pow+0xa00>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	2000      	movs	r0, #0
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	f7f1 fce8 	bl	8000608 <__aeabi_dmul>
 800ec38:	ec53 2b19 	vmov	r2, r3, d9
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	460f      	mov	r7, r1
 800ec40:	4620      	mov	r0, r4
 800ec42:	4629      	mov	r1, r5
 800ec44:	f7f1 fb28 	bl	8000298 <__aeabi_dsub>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4640      	mov	r0, r8
 800ec4e:	4649      	mov	r1, r9
 800ec50:	f7f1 fb22 	bl	8000298 <__aeabi_dsub>
 800ec54:	a372      	add	r3, pc, #456	; (adr r3, 800ee20 <__ieee754_pow+0xa08>)
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	f7f1 fcd5 	bl	8000608 <__aeabi_dmul>
 800ec5e:	a372      	add	r3, pc, #456	; (adr r3, 800ee28 <__ieee754_pow+0xa10>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	4680      	mov	r8, r0
 800ec66:	4689      	mov	r9, r1
 800ec68:	4620      	mov	r0, r4
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	f7f1 fccc 	bl	8000608 <__aeabi_dmul>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4640      	mov	r0, r8
 800ec76:	4649      	mov	r1, r9
 800ec78:	f7f1 fb10 	bl	800029c <__adddf3>
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	460d      	mov	r5, r1
 800ec80:	4602      	mov	r2, r0
 800ec82:	460b      	mov	r3, r1
 800ec84:	4630      	mov	r0, r6
 800ec86:	4639      	mov	r1, r7
 800ec88:	f7f1 fb08 	bl	800029c <__adddf3>
 800ec8c:	4632      	mov	r2, r6
 800ec8e:	463b      	mov	r3, r7
 800ec90:	4680      	mov	r8, r0
 800ec92:	4689      	mov	r9, r1
 800ec94:	f7f1 fb00 	bl	8000298 <__aeabi_dsub>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	4629      	mov	r1, r5
 800eca0:	f7f1 fafa 	bl	8000298 <__aeabi_dsub>
 800eca4:	4642      	mov	r2, r8
 800eca6:	4606      	mov	r6, r0
 800eca8:	460f      	mov	r7, r1
 800ecaa:	464b      	mov	r3, r9
 800ecac:	4640      	mov	r0, r8
 800ecae:	4649      	mov	r1, r9
 800ecb0:	f7f1 fcaa 	bl	8000608 <__aeabi_dmul>
 800ecb4:	a35e      	add	r3, pc, #376	; (adr r3, 800ee30 <__ieee754_pow+0xa18>)
 800ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecba:	4604      	mov	r4, r0
 800ecbc:	460d      	mov	r5, r1
 800ecbe:	f7f1 fca3 	bl	8000608 <__aeabi_dmul>
 800ecc2:	a35d      	add	r3, pc, #372	; (adr r3, 800ee38 <__ieee754_pow+0xa20>)
 800ecc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc8:	f7f1 fae6 	bl	8000298 <__aeabi_dsub>
 800eccc:	4622      	mov	r2, r4
 800ecce:	462b      	mov	r3, r5
 800ecd0:	f7f1 fc9a 	bl	8000608 <__aeabi_dmul>
 800ecd4:	a35a      	add	r3, pc, #360	; (adr r3, 800ee40 <__ieee754_pow+0xa28>)
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	f7f1 fadf 	bl	800029c <__adddf3>
 800ecde:	4622      	mov	r2, r4
 800ece0:	462b      	mov	r3, r5
 800ece2:	f7f1 fc91 	bl	8000608 <__aeabi_dmul>
 800ece6:	a358      	add	r3, pc, #352	; (adr r3, 800ee48 <__ieee754_pow+0xa30>)
 800ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecec:	f7f1 fad4 	bl	8000298 <__aeabi_dsub>
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	462b      	mov	r3, r5
 800ecf4:	f7f1 fc88 	bl	8000608 <__aeabi_dmul>
 800ecf8:	a355      	add	r3, pc, #340	; (adr r3, 800ee50 <__ieee754_pow+0xa38>)
 800ecfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfe:	f7f1 facd 	bl	800029c <__adddf3>
 800ed02:	4622      	mov	r2, r4
 800ed04:	462b      	mov	r3, r5
 800ed06:	f7f1 fc7f 	bl	8000608 <__aeabi_dmul>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4640      	mov	r0, r8
 800ed10:	4649      	mov	r1, r9
 800ed12:	f7f1 fac1 	bl	8000298 <__aeabi_dsub>
 800ed16:	4604      	mov	r4, r0
 800ed18:	460d      	mov	r5, r1
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4640      	mov	r0, r8
 800ed20:	4649      	mov	r1, r9
 800ed22:	f7f1 fc71 	bl	8000608 <__aeabi_dmul>
 800ed26:	2200      	movs	r2, #0
 800ed28:	ec41 0b19 	vmov	d9, r0, r1
 800ed2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed30:	4620      	mov	r0, r4
 800ed32:	4629      	mov	r1, r5
 800ed34:	f7f1 fab0 	bl	8000298 <__aeabi_dsub>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	ec51 0b19 	vmov	r0, r1, d9
 800ed40:	f7f1 fd8c 	bl	800085c <__aeabi_ddiv>
 800ed44:	4632      	mov	r2, r6
 800ed46:	4604      	mov	r4, r0
 800ed48:	460d      	mov	r5, r1
 800ed4a:	463b      	mov	r3, r7
 800ed4c:	4640      	mov	r0, r8
 800ed4e:	4649      	mov	r1, r9
 800ed50:	f7f1 fc5a 	bl	8000608 <__aeabi_dmul>
 800ed54:	4632      	mov	r2, r6
 800ed56:	463b      	mov	r3, r7
 800ed58:	f7f1 faa0 	bl	800029c <__adddf3>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4620      	mov	r0, r4
 800ed62:	4629      	mov	r1, r5
 800ed64:	f7f1 fa98 	bl	8000298 <__aeabi_dsub>
 800ed68:	4642      	mov	r2, r8
 800ed6a:	464b      	mov	r3, r9
 800ed6c:	f7f1 fa94 	bl	8000298 <__aeabi_dsub>
 800ed70:	460b      	mov	r3, r1
 800ed72:	4602      	mov	r2, r0
 800ed74:	493a      	ldr	r1, [pc, #232]	; (800ee60 <__ieee754_pow+0xa48>)
 800ed76:	2000      	movs	r0, #0
 800ed78:	f7f1 fa8e 	bl	8000298 <__aeabi_dsub>
 800ed7c:	ec41 0b10 	vmov	d0, r0, r1
 800ed80:	ee10 3a90 	vmov	r3, s1
 800ed84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ed88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed8c:	da2b      	bge.n	800ede6 <__ieee754_pow+0x9ce>
 800ed8e:	4650      	mov	r0, sl
 800ed90:	f000 f96a 	bl	800f068 <scalbn>
 800ed94:	ec51 0b10 	vmov	r0, r1, d0
 800ed98:	ec53 2b18 	vmov	r2, r3, d8
 800ed9c:	f7ff bbed 	b.w	800e57a <__ieee754_pow+0x162>
 800eda0:	4b30      	ldr	r3, [pc, #192]	; (800ee64 <__ieee754_pow+0xa4c>)
 800eda2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eda6:	429e      	cmp	r6, r3
 800eda8:	f77f af0c 	ble.w	800ebc4 <__ieee754_pow+0x7ac>
 800edac:	4b2e      	ldr	r3, [pc, #184]	; (800ee68 <__ieee754_pow+0xa50>)
 800edae:	440b      	add	r3, r1
 800edb0:	4303      	orrs	r3, r0
 800edb2:	d009      	beq.n	800edc8 <__ieee754_pow+0x9b0>
 800edb4:	ec51 0b18 	vmov	r0, r1, d8
 800edb8:	2200      	movs	r2, #0
 800edba:	2300      	movs	r3, #0
 800edbc:	f7f1 fe96 	bl	8000aec <__aeabi_dcmplt>
 800edc0:	3800      	subs	r0, #0
 800edc2:	bf18      	it	ne
 800edc4:	2001      	movne	r0, #1
 800edc6:	e447      	b.n	800e658 <__ieee754_pow+0x240>
 800edc8:	4622      	mov	r2, r4
 800edca:	462b      	mov	r3, r5
 800edcc:	f7f1 fa64 	bl	8000298 <__aeabi_dsub>
 800edd0:	4642      	mov	r2, r8
 800edd2:	464b      	mov	r3, r9
 800edd4:	f7f1 fe9e 	bl	8000b14 <__aeabi_dcmpge>
 800edd8:	2800      	cmp	r0, #0
 800edda:	f43f aef3 	beq.w	800ebc4 <__ieee754_pow+0x7ac>
 800edde:	e7e9      	b.n	800edb4 <__ieee754_pow+0x99c>
 800ede0:	f04f 0a00 	mov.w	sl, #0
 800ede4:	e71a      	b.n	800ec1c <__ieee754_pow+0x804>
 800ede6:	ec51 0b10 	vmov	r0, r1, d0
 800edea:	4619      	mov	r1, r3
 800edec:	e7d4      	b.n	800ed98 <__ieee754_pow+0x980>
 800edee:	491c      	ldr	r1, [pc, #112]	; (800ee60 <__ieee754_pow+0xa48>)
 800edf0:	2000      	movs	r0, #0
 800edf2:	f7ff bb30 	b.w	800e456 <__ieee754_pow+0x3e>
 800edf6:	2000      	movs	r0, #0
 800edf8:	2100      	movs	r1, #0
 800edfa:	f7ff bb2c 	b.w	800e456 <__ieee754_pow+0x3e>
 800edfe:	4630      	mov	r0, r6
 800ee00:	4639      	mov	r1, r7
 800ee02:	f7ff bb28 	b.w	800e456 <__ieee754_pow+0x3e>
 800ee06:	9204      	str	r2, [sp, #16]
 800ee08:	f7ff bb7a 	b.w	800e500 <__ieee754_pow+0xe8>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f7ff bb64 	b.w	800e4da <__ieee754_pow+0xc2>
 800ee12:	bf00      	nop
 800ee14:	f3af 8000 	nop.w
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	3fe62e43 	.word	0x3fe62e43
 800ee20:	fefa39ef 	.word	0xfefa39ef
 800ee24:	3fe62e42 	.word	0x3fe62e42
 800ee28:	0ca86c39 	.word	0x0ca86c39
 800ee2c:	be205c61 	.word	0xbe205c61
 800ee30:	72bea4d0 	.word	0x72bea4d0
 800ee34:	3e663769 	.word	0x3e663769
 800ee38:	c5d26bf1 	.word	0xc5d26bf1
 800ee3c:	3ebbbd41 	.word	0x3ebbbd41
 800ee40:	af25de2c 	.word	0xaf25de2c
 800ee44:	3f11566a 	.word	0x3f11566a
 800ee48:	16bebd93 	.word	0x16bebd93
 800ee4c:	3f66c16c 	.word	0x3f66c16c
 800ee50:	5555553e 	.word	0x5555553e
 800ee54:	3fc55555 	.word	0x3fc55555
 800ee58:	3fe00000 	.word	0x3fe00000
 800ee5c:	000fffff 	.word	0x000fffff
 800ee60:	3ff00000 	.word	0x3ff00000
 800ee64:	4090cbff 	.word	0x4090cbff
 800ee68:	3f6f3400 	.word	0x3f6f3400
 800ee6c:	652b82fe 	.word	0x652b82fe
 800ee70:	3c971547 	.word	0x3c971547

0800ee74 <__ieee754_sqrt>:
 800ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee78:	ec55 4b10 	vmov	r4, r5, d0
 800ee7c:	4e55      	ldr	r6, [pc, #340]	; (800efd4 <__ieee754_sqrt+0x160>)
 800ee7e:	43ae      	bics	r6, r5
 800ee80:	ee10 0a10 	vmov	r0, s0
 800ee84:	ee10 3a10 	vmov	r3, s0
 800ee88:	462a      	mov	r2, r5
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	d110      	bne.n	800eeb0 <__ieee754_sqrt+0x3c>
 800ee8e:	ee10 2a10 	vmov	r2, s0
 800ee92:	462b      	mov	r3, r5
 800ee94:	f7f1 fbb8 	bl	8000608 <__aeabi_dmul>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	4629      	mov	r1, r5
 800eea0:	f7f1 f9fc 	bl	800029c <__adddf3>
 800eea4:	4604      	mov	r4, r0
 800eea6:	460d      	mov	r5, r1
 800eea8:	ec45 4b10 	vmov	d0, r4, r5
 800eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb0:	2d00      	cmp	r5, #0
 800eeb2:	dc10      	bgt.n	800eed6 <__ieee754_sqrt+0x62>
 800eeb4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eeb8:	4330      	orrs	r0, r6
 800eeba:	d0f5      	beq.n	800eea8 <__ieee754_sqrt+0x34>
 800eebc:	b15d      	cbz	r5, 800eed6 <__ieee754_sqrt+0x62>
 800eebe:	ee10 2a10 	vmov	r2, s0
 800eec2:	462b      	mov	r3, r5
 800eec4:	ee10 0a10 	vmov	r0, s0
 800eec8:	f7f1 f9e6 	bl	8000298 <__aeabi_dsub>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	f7f1 fcc4 	bl	800085c <__aeabi_ddiv>
 800eed4:	e7e6      	b.n	800eea4 <__ieee754_sqrt+0x30>
 800eed6:	1512      	asrs	r2, r2, #20
 800eed8:	d074      	beq.n	800efc4 <__ieee754_sqrt+0x150>
 800eeda:	07d4      	lsls	r4, r2, #31
 800eedc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800eee0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800eee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eee8:	bf5e      	ittt	pl
 800eeea:	0fda      	lsrpl	r2, r3, #31
 800eeec:	005b      	lslpl	r3, r3, #1
 800eeee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800eef2:	2400      	movs	r4, #0
 800eef4:	0fda      	lsrs	r2, r3, #31
 800eef6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800eefa:	107f      	asrs	r7, r7, #1
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	2516      	movs	r5, #22
 800ef00:	4620      	mov	r0, r4
 800ef02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ef06:	1886      	adds	r6, r0, r2
 800ef08:	428e      	cmp	r6, r1
 800ef0a:	bfde      	ittt	le
 800ef0c:	1b89      	suble	r1, r1, r6
 800ef0e:	18b0      	addle	r0, r6, r2
 800ef10:	18a4      	addle	r4, r4, r2
 800ef12:	0049      	lsls	r1, r1, #1
 800ef14:	3d01      	subs	r5, #1
 800ef16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ef1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ef1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef22:	d1f0      	bne.n	800ef06 <__ieee754_sqrt+0x92>
 800ef24:	462a      	mov	r2, r5
 800ef26:	f04f 0e20 	mov.w	lr, #32
 800ef2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ef2e:	4281      	cmp	r1, r0
 800ef30:	eb06 0c05 	add.w	ip, r6, r5
 800ef34:	dc02      	bgt.n	800ef3c <__ieee754_sqrt+0xc8>
 800ef36:	d113      	bne.n	800ef60 <__ieee754_sqrt+0xec>
 800ef38:	459c      	cmp	ip, r3
 800ef3a:	d811      	bhi.n	800ef60 <__ieee754_sqrt+0xec>
 800ef3c:	f1bc 0f00 	cmp.w	ip, #0
 800ef40:	eb0c 0506 	add.w	r5, ip, r6
 800ef44:	da43      	bge.n	800efce <__ieee754_sqrt+0x15a>
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	db41      	blt.n	800efce <__ieee754_sqrt+0x15a>
 800ef4a:	f100 0801 	add.w	r8, r0, #1
 800ef4e:	1a09      	subs	r1, r1, r0
 800ef50:	459c      	cmp	ip, r3
 800ef52:	bf88      	it	hi
 800ef54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ef58:	eba3 030c 	sub.w	r3, r3, ip
 800ef5c:	4432      	add	r2, r6
 800ef5e:	4640      	mov	r0, r8
 800ef60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ef64:	f1be 0e01 	subs.w	lr, lr, #1
 800ef68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ef6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ef74:	d1db      	bne.n	800ef2e <__ieee754_sqrt+0xba>
 800ef76:	430b      	orrs	r3, r1
 800ef78:	d006      	beq.n	800ef88 <__ieee754_sqrt+0x114>
 800ef7a:	1c50      	adds	r0, r2, #1
 800ef7c:	bf13      	iteet	ne
 800ef7e:	3201      	addne	r2, #1
 800ef80:	3401      	addeq	r4, #1
 800ef82:	4672      	moveq	r2, lr
 800ef84:	f022 0201 	bicne.w	r2, r2, #1
 800ef88:	1063      	asrs	r3, r4, #1
 800ef8a:	0852      	lsrs	r2, r2, #1
 800ef8c:	07e1      	lsls	r1, r4, #31
 800ef8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ef92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ef96:	bf48      	it	mi
 800ef98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ef9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800efa0:	4614      	mov	r4, r2
 800efa2:	e781      	b.n	800eea8 <__ieee754_sqrt+0x34>
 800efa4:	0ad9      	lsrs	r1, r3, #11
 800efa6:	3815      	subs	r0, #21
 800efa8:	055b      	lsls	r3, r3, #21
 800efaa:	2900      	cmp	r1, #0
 800efac:	d0fa      	beq.n	800efa4 <__ieee754_sqrt+0x130>
 800efae:	02cd      	lsls	r5, r1, #11
 800efb0:	d50a      	bpl.n	800efc8 <__ieee754_sqrt+0x154>
 800efb2:	f1c2 0420 	rsb	r4, r2, #32
 800efb6:	fa23 f404 	lsr.w	r4, r3, r4
 800efba:	1e55      	subs	r5, r2, #1
 800efbc:	4093      	lsls	r3, r2
 800efbe:	4321      	orrs	r1, r4
 800efc0:	1b42      	subs	r2, r0, r5
 800efc2:	e78a      	b.n	800eeda <__ieee754_sqrt+0x66>
 800efc4:	4610      	mov	r0, r2
 800efc6:	e7f0      	b.n	800efaa <__ieee754_sqrt+0x136>
 800efc8:	0049      	lsls	r1, r1, #1
 800efca:	3201      	adds	r2, #1
 800efcc:	e7ef      	b.n	800efae <__ieee754_sqrt+0x13a>
 800efce:	4680      	mov	r8, r0
 800efd0:	e7bd      	b.n	800ef4e <__ieee754_sqrt+0xda>
 800efd2:	bf00      	nop
 800efd4:	7ff00000 	.word	0x7ff00000

0800efd8 <__ieee754_sqrtf>:
 800efd8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800efdc:	4770      	bx	lr

0800efde <with_errno>:
 800efde:	b570      	push	{r4, r5, r6, lr}
 800efe0:	4604      	mov	r4, r0
 800efe2:	460d      	mov	r5, r1
 800efe4:	4616      	mov	r6, r2
 800efe6:	f7fc f975 	bl	800b2d4 <__errno>
 800efea:	4629      	mov	r1, r5
 800efec:	6006      	str	r6, [r0, #0]
 800efee:	4620      	mov	r0, r4
 800eff0:	bd70      	pop	{r4, r5, r6, pc}

0800eff2 <xflow>:
 800eff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eff4:	4614      	mov	r4, r2
 800eff6:	461d      	mov	r5, r3
 800eff8:	b108      	cbz	r0, 800effe <xflow+0xc>
 800effa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800effe:	e9cd 2300 	strd	r2, r3, [sp]
 800f002:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f006:	4620      	mov	r0, r4
 800f008:	4629      	mov	r1, r5
 800f00a:	f7f1 fafd 	bl	8000608 <__aeabi_dmul>
 800f00e:	2222      	movs	r2, #34	; 0x22
 800f010:	b003      	add	sp, #12
 800f012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f016:	f7ff bfe2 	b.w	800efde <with_errno>

0800f01a <__math_uflow>:
 800f01a:	b508      	push	{r3, lr}
 800f01c:	2200      	movs	r2, #0
 800f01e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f022:	f7ff ffe6 	bl	800eff2 <xflow>
 800f026:	ec41 0b10 	vmov	d0, r0, r1
 800f02a:	bd08      	pop	{r3, pc}

0800f02c <__math_oflow>:
 800f02c:	b508      	push	{r3, lr}
 800f02e:	2200      	movs	r2, #0
 800f030:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f034:	f7ff ffdd 	bl	800eff2 <xflow>
 800f038:	ec41 0b10 	vmov	d0, r0, r1
 800f03c:	bd08      	pop	{r3, pc}

0800f03e <fabs>:
 800f03e:	ec51 0b10 	vmov	r0, r1, d0
 800f042:	ee10 2a10 	vmov	r2, s0
 800f046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f04a:	ec43 2b10 	vmov	d0, r2, r3
 800f04e:	4770      	bx	lr

0800f050 <finite>:
 800f050:	b082      	sub	sp, #8
 800f052:	ed8d 0b00 	vstr	d0, [sp]
 800f056:	9801      	ldr	r0, [sp, #4]
 800f058:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f05c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f060:	0fc0      	lsrs	r0, r0, #31
 800f062:	b002      	add	sp, #8
 800f064:	4770      	bx	lr
	...

0800f068 <scalbn>:
 800f068:	b570      	push	{r4, r5, r6, lr}
 800f06a:	ec55 4b10 	vmov	r4, r5, d0
 800f06e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f072:	4606      	mov	r6, r0
 800f074:	462b      	mov	r3, r5
 800f076:	b99a      	cbnz	r2, 800f0a0 <scalbn+0x38>
 800f078:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f07c:	4323      	orrs	r3, r4
 800f07e:	d036      	beq.n	800f0ee <scalbn+0x86>
 800f080:	4b39      	ldr	r3, [pc, #228]	; (800f168 <scalbn+0x100>)
 800f082:	4629      	mov	r1, r5
 800f084:	ee10 0a10 	vmov	r0, s0
 800f088:	2200      	movs	r2, #0
 800f08a:	f7f1 fabd 	bl	8000608 <__aeabi_dmul>
 800f08e:	4b37      	ldr	r3, [pc, #220]	; (800f16c <scalbn+0x104>)
 800f090:	429e      	cmp	r6, r3
 800f092:	4604      	mov	r4, r0
 800f094:	460d      	mov	r5, r1
 800f096:	da10      	bge.n	800f0ba <scalbn+0x52>
 800f098:	a32b      	add	r3, pc, #172	; (adr r3, 800f148 <scalbn+0xe0>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	e03a      	b.n	800f116 <scalbn+0xae>
 800f0a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f0a4:	428a      	cmp	r2, r1
 800f0a6:	d10c      	bne.n	800f0c2 <scalbn+0x5a>
 800f0a8:	ee10 2a10 	vmov	r2, s0
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	f7f1 f8f4 	bl	800029c <__adddf3>
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	e019      	b.n	800f0ee <scalbn+0x86>
 800f0ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f0be:	460b      	mov	r3, r1
 800f0c0:	3a36      	subs	r2, #54	; 0x36
 800f0c2:	4432      	add	r2, r6
 800f0c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f0c8:	428a      	cmp	r2, r1
 800f0ca:	dd08      	ble.n	800f0de <scalbn+0x76>
 800f0cc:	2d00      	cmp	r5, #0
 800f0ce:	a120      	add	r1, pc, #128	; (adr r1, 800f150 <scalbn+0xe8>)
 800f0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d4:	da1c      	bge.n	800f110 <scalbn+0xa8>
 800f0d6:	a120      	add	r1, pc, #128	; (adr r1, 800f158 <scalbn+0xf0>)
 800f0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0dc:	e018      	b.n	800f110 <scalbn+0xa8>
 800f0de:	2a00      	cmp	r2, #0
 800f0e0:	dd08      	ble.n	800f0f4 <scalbn+0x8c>
 800f0e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f0ee:	ec45 4b10 	vmov	d0, r4, r5
 800f0f2:	bd70      	pop	{r4, r5, r6, pc}
 800f0f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f0f8:	da19      	bge.n	800f12e <scalbn+0xc6>
 800f0fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f0fe:	429e      	cmp	r6, r3
 800f100:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f104:	dd0a      	ble.n	800f11c <scalbn+0xb4>
 800f106:	a112      	add	r1, pc, #72	; (adr r1, 800f150 <scalbn+0xe8>)
 800f108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1e2      	bne.n	800f0d6 <scalbn+0x6e>
 800f110:	a30f      	add	r3, pc, #60	; (adr r3, 800f150 <scalbn+0xe8>)
 800f112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f116:	f7f1 fa77 	bl	8000608 <__aeabi_dmul>
 800f11a:	e7cb      	b.n	800f0b4 <scalbn+0x4c>
 800f11c:	a10a      	add	r1, pc, #40	; (adr r1, 800f148 <scalbn+0xe0>)
 800f11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d0b8      	beq.n	800f098 <scalbn+0x30>
 800f126:	a10e      	add	r1, pc, #56	; (adr r1, 800f160 <scalbn+0xf8>)
 800f128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f12c:	e7b4      	b.n	800f098 <scalbn+0x30>
 800f12e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f132:	3236      	adds	r2, #54	; 0x36
 800f134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f138:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f13c:	4620      	mov	r0, r4
 800f13e:	4b0c      	ldr	r3, [pc, #48]	; (800f170 <scalbn+0x108>)
 800f140:	2200      	movs	r2, #0
 800f142:	e7e8      	b.n	800f116 <scalbn+0xae>
 800f144:	f3af 8000 	nop.w
 800f148:	c2f8f359 	.word	0xc2f8f359
 800f14c:	01a56e1f 	.word	0x01a56e1f
 800f150:	8800759c 	.word	0x8800759c
 800f154:	7e37e43c 	.word	0x7e37e43c
 800f158:	8800759c 	.word	0x8800759c
 800f15c:	fe37e43c 	.word	0xfe37e43c
 800f160:	c2f8f359 	.word	0xc2f8f359
 800f164:	81a56e1f 	.word	0x81a56e1f
 800f168:	43500000 	.word	0x43500000
 800f16c:	ffff3cb0 	.word	0xffff3cb0
 800f170:	3c900000 	.word	0x3c900000

0800f174 <_init>:
 800f174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f176:	bf00      	nop
 800f178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f17a:	bc08      	pop	{r3}
 800f17c:	469e      	mov	lr, r3
 800f17e:	4770      	bx	lr

0800f180 <_fini>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	bf00      	nop
 800f184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f186:	bc08      	pop	{r3}
 800f188:	469e      	mov	lr, r3
 800f18a:	4770      	bx	lr
