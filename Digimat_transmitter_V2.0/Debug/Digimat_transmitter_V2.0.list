
Digimat_transmitter_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001165c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08011800  08011800  00021800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e14  08011e14  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08011e14  08011e14  00021e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e1c  08011e1c  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e1c  08011e1c  00021e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e20  08011e20  00021e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08011e24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000370  08012194  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  08012194  00030a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f3a7  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005573  00000000  00000000  0006f747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031b8  00000000  00000000  00074cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002fc0  00000000  00000000  00077e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9f8  00000000  00000000  0007ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c372  00000000  00000000  00099830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6c8c  00000000  00000000  000c5ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c82e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e7a4  00000000  00000000  0016c880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080117e4 	.word	0x080117e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	080117e4 	.word	0x080117e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_BlueNRG_MS_Init>:
	PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000ec2:	4a73      	ldr	r2, [pc, #460]	; (8001090 <MX_BlueNRG_MS_Init+0x1d4>)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ecc:	6018      	str	r0, [r3, #0]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	8019      	strh	r1, [r3, #0]
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000ed2:	4a70      	ldr	r2, [pc, #448]	; (8001094 <MX_BlueNRG_MS_Init+0x1d8>)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000edc:	6018      	str	r0, [r3, #0]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 8000ee2:	f000 f8fd 	bl	80010e0 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f009 f846 	bl	8009f78 <BSP_PB_GetState>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b69      	ldr	r3, [pc, #420]	; (8001098 <MX_BlueNRG_MS_Init+0x1dc>)
 8000ef2:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4869      	ldr	r0, [pc, #420]	; (800109c <MX_BlueNRG_MS_Init+0x1e0>)
 8000ef8:	f00d f954 	bl	800e1a4 <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8000efc:	1cba      	adds	r2, r7, #2
 8000efe:	1d7b      	adds	r3, r7, #5
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00c ffc2 	bl	800de8c <getBlueNRGVersion>
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
	 * command after reset otherwise it will fail.
	 */
	hci_reset();
 8000f08:	f00d f804 	bl	800df14 <hci_reset>

	HAL_Delay(100);
 8000f0c:	2064      	movs	r0, #100	; 0x64
 8000f0e:	f009 f9d7 	bl	800a2c0 <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	4619      	mov	r1, r3
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4861      	ldr	r0, [pc, #388]	; (80010a0 <MX_BlueNRG_MS_Init+0x1e4>)
 8000f1c:	f00e fba6 	bl	800f66c <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	2b30      	cmp	r3, #48	; 0x30
 8000f24:	d902      	bls.n	8000f2c <MX_BlueNRG_MS_Init+0x70>
		bnrg_expansion_board = IDB05A1;
 8000f26:	4b5f      	ldr	r3, [pc, #380]	; (80010a4 <MX_BlueNRG_MS_Init+0x1e8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
	}

	if (BLE_Role == CLIENT) {
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <MX_BlueNRG_MS_Init+0x1ec>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <MX_BlueNRG_MS_Init+0x8c>
		BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	f107 021c 	add.w	r2, r7, #28
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	6018      	str	r0, [r3, #0]
 8000f42:	3304      	adds	r3, #4
 8000f44:	8019      	strh	r1, [r3, #0]
 8000f46:	e008      	b.n	8000f5a <MX_BlueNRG_MS_Init+0x9e>
	} else {
		BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	f107 0214 	add.w	r2, r7, #20
 8000f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f54:	6018      	str	r0, [r3, #0]
 8000f56:	3304      	adds	r3, #4
 8000f58:	8019      	strh	r1, [r3, #0]
	}

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2106      	movs	r1, #6
 8000f62:	2000      	movs	r0, #0
 8000f64:	f00c fefc 	bl	800dd60 <aci_hal_write_config_data>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
			CONFIG_DATA_PUBADDR_LEN,
			bdaddr);
	if (ret) {
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <MX_BlueNRG_MS_Init+0xbe>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f74:	484d      	ldr	r0, [pc, #308]	; (80010ac <MX_BlueNRG_MS_Init+0x1f0>)
 8000f76:	f00e fb79 	bl	800f66c <iprintf>
	}

	ret = aci_gatt_init();
 8000f7a:	f00c fb9c 	bl	800d6b6 <aci_gatt_init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	if (ret) {
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <MX_BlueNRG_MS_Init+0xd2>
		printf("GATT_Init failed.\n");
 8000f88:	4849      	ldr	r0, [pc, #292]	; (80010b0 <MX_BlueNRG_MS_Init+0x1f4>)
 8000f8a:	f00e fc0b 	bl	800f7a4 <puts>
	}

	if (BLE_Role == SERVER) {
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_BlueNRG_MS_Init+0x1ec>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d11e      	bne.n	8000fd4 <MX_BlueNRG_MS_Init+0x118>
		if (bnrg_expansion_board == IDB05A1) {
 8000f96:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <MX_BlueNRG_MS_Init+0x1e8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d10f      	bne.n	8000fbe <MX_BlueNRG_MS_Init+0x102>
			ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000f9e:	f107 020a 	add.w	r2, r7, #10
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4613      	mov	r3, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f00c f950 	bl	800d258 <aci_gap_init_IDB05A1>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	e028      	b.n	8001010 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	f107 010a 	add.w	r1, r7, #10
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f00c f995 	bl	800d2f8 <aci_gap_init_IDB04A1>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd2:	e01d      	b.n	8001010 <MX_BlueNRG_MS_Init+0x154>
		}
	}
	else {
		if (bnrg_expansion_board == IDB05A1) {
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <MX_BlueNRG_MS_Init+0x1e8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10f      	bne.n	8000ffc <MX_BlueNRG_MS_Init+0x140>
			ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fdc:	f107 020a 	add.w	r2, r7, #10
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	2207      	movs	r2, #7
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2004      	movs	r0, #4
 8000ff2:	f00c f931 	bl	800d258 <aci_gap_init_IDB05A1>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	e009      	b.n	8001010 <MX_BlueNRG_MS_Init+0x154>
		}
		else {
			ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	f107 0208 	add.w	r2, r7, #8
 8001002:	f107 010a 	add.w	r1, r7, #10
 8001006:	2003      	movs	r0, #3
 8001008:	f00c f976 	bl	800d2f8 <aci_gap_init_IDB04A1>
 800100c:	4603      	mov	r3, r0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	if (ret != BLE_STATUS_SUCCESS) {
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <MX_BlueNRG_MS_Init+0x160>
		printf("GAP_Init failed.\n");
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <MX_BlueNRG_MS_Init+0x1f8>)
 8001018:	f00e fbc4 	bl	800f7a4 <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800101c:	2301      	movs	r3, #1
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <MX_BlueNRG_MS_Init+0x1fc>)
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2300      	movs	r3, #0
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2310      	movs	r3, #16
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2307      	movs	r3, #7
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00c fa94 	bl	800d560 <aci_gap_set_auth_requirement>
 8001038:	4603      	mov	r3, r0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
			7,
			16,
			USE_FIXED_PIN_FOR_PAIRING,
			123456,
			BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <MX_BlueNRG_MS_Init+0x18c>
		printf("BLE Stack Initialized.\n");
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <MX_BlueNRG_MS_Init+0x200>)
 8001044:	f00e fbae 	bl	800f7a4 <puts>
	}

	if (BLE_Role == SERVER) {
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_BlueNRG_MS_Init+0x1ec>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d111      	bne.n	8001074 <MX_BlueNRG_MS_Init+0x1b8>
		printf("SERVER: BLE Stack Initialized\n");
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <MX_BlueNRG_MS_Init+0x204>)
 8001052:	f00e fba7 	bl	800f7a4 <puts>
		ret = Add_Sample_Service();
 8001056:	f000 f90b 	bl	8001270 <Add_Sample_Service>
 800105a:	4603      	mov	r3, r0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

		if (ret == BLE_STATUS_SUCCESS)
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <MX_BlueNRG_MS_Init+0x1b0>
			printf("Service added successfully.\n");
 8001064:	4817      	ldr	r0, [pc, #92]	; (80010c4 <MX_BlueNRG_MS_Init+0x208>)
 8001066:	f00e fb9d 	bl	800f7a4 <puts>
 800106a:	e006      	b.n	800107a <MX_BlueNRG_MS_Init+0x1be>
		else
			printf("Error while adding service.\n");
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <MX_BlueNRG_MS_Init+0x20c>)
 800106e:	f00e fb99 	bl	800f7a4 <puts>
 8001072:	e002      	b.n	800107a <MX_BlueNRG_MS_Init+0x1be>

	} else {
		printf("CLIENT: BLE Stack Initialized\n");
 8001074:	4815      	ldr	r0, [pc, #84]	; (80010cc <MX_BlueNRG_MS_Init+0x210>)
 8001076:	f00e fb95 	bl	800f7a4 <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 800107a:	2104      	movs	r1, #4
 800107c:	2001      	movs	r0, #1
 800107e:	f00c fed4 	bl	800de2a <aci_hal_set_tx_power_level>
 8001082:	4603      	mov	r3, r0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	080118ec 	.word	0x080118ec
 8001094:	080118f4 	.word	0x080118f4
 8001098:	20000000 	.word	0x20000000
 800109c:	08001719 	.word	0x08001719
 80010a0:	08011800 	.word	0x08011800
 80010a4:	2000038c 	.word	0x2000038c
 80010a8:	2000038e 	.word	0x2000038e
 80010ac:	08011814 	.word	0x08011814
 80010b0:	08011834 	.word	0x08011834
 80010b4:	08011848 	.word	0x08011848
 80010b8:	0001e240 	.word	0x0001e240
 80010bc:	0801185c 	.word	0x0801185c
 80010c0:	08011874 	.word	0x08011874
 80010c4:	08011894 	.word	0x08011894
 80010c8:	080118b0 	.word	0x080118b0
 80010cc:	080118cc 	.word	0x080118cc

080010d0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	/* USER CODE END BlueNRG_MS_Process_PreTreatment */

	User_Process();
 80010d4:	f000 f812 	bl	80010fc <User_Process>
	hci_user_evt_proc();
 80010d8:	f00d f9e0 	bl	800e49c <hci_user_evt_proc>

	/* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

	/* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010e4:	2101      	movs	r1, #1
 80010e6:	2000      	movs	r0, #0
 80010e8:	f008 fef2 	bl	8009ed0 <BSP_PB_Init>
	BSP_LED_Init(LED2);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f008 fe59 	bl	8009da4 <BSP_LED_Init>

	BSP_COM_Init(COM1);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f008 ffa2 	bl	800a03c <BSP_COM_Init>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af02      	add	r7, sp, #8
	if (set_connectable)
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <User_Process+0x124>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <User_Process+0x28>
	{
		/* Establish connection with remote device */
		Make_Connection();
 800110c:	f000 f922 	bl	8001354 <Make_Connection>
		set_connectable = FALSE;
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <User_Process+0x124>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8001116:	2000      	movs	r0, #0
 8001118:	f008 ff2e 	bl	8009f78 <BSP_PB_GetState>
 800111c:	4603      	mov	r3, r0
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <User_Process+0x128>)
 8001122:	701a      	strb	r2, [r3, #0]
	}

	if (BLE_Role == CLIENT)
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <User_Process+0x12c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d12e      	bne.n	800118a <User_Process+0x8e>
	{
		/* Start TX handle Characteristic dynamic discovery if not yet done */
		if (connected && !end_read_tx_char_handle){
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <User_Process+0x130>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <User_Process+0x48>
 8001134:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <User_Process+0x134>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <User_Process+0x48>
			startReadTXCharHandle();
 800113e:	f000 f973 	bl	8001428 <startReadTXCharHandle>
 8001142:	e00a      	b.n	800115a <User_Process+0x5e>
		}
		/* Start RX handle Characteristic dynamic discovery if not yet done */
		else if (connected && !end_read_rx_char_handle){
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <User_Process+0x130>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <User_Process+0x5e>
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <User_Process+0x138>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <User_Process+0x5e>
			startReadRXCharHandle();
 8001156:	f000 f98d 	bl	8001474 <startReadRXCharHandle>
		}

		if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <User_Process+0x130>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d013      	beq.n	800118a <User_Process+0x8e>
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <User_Process+0x134>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <User_Process+0x8e>
 800116c:	4b31      	ldr	r3, [pc, #196]	; (8001234 <User_Process+0x138>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <User_Process+0x8e>
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <User_Process+0x13c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d104      	bne.n	800118a <User_Process+0x8e>
		{
			BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8001180:	2000      	movs	r0, #0
 8001182:	f008 fe37 	bl	8009df4 <BSP_LED_Off>
			enableNotification();
 8001186:	f000 f9f1 	bl	800156c <enableNotification>
		}
	}

	/* Check if the User Button has been pushed */
	if (user_button_pressed)
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <User_Process+0x140>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d041      	beq.n	8001218 <User_Process+0x11c>
	{
		/* Debouncing */
		HAL_Delay(50);
 8001194:	2032      	movs	r0, #50	; 0x32
 8001196:	f009 f893 	bl	800a2c0 <HAL_Delay>

		/* Wait until the User Button is released */
		while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 800119a:	bf00      	nop
 800119c:	2000      	movs	r0, #0
 800119e:	f008 feeb 	bl	8009f78 <BSP_PB_GetState>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <User_Process+0x128>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d0f1      	beq.n	800119c <User_Process+0xa0>

		/* Debouncing */
		HAL_Delay(50);
 80011b8:	2032      	movs	r0, #50	; 0x32
 80011ba:	f009 f881 	bl	800a2c0 <HAL_Delay>
//			//BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
//			/* If uncommented be sure the BSP_LED_Init(LED2)
//			 * is called in main().
//			 * E.g. it can be enabled for debugging. */
//		}
		if (connected && notification_enabled)
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <User_Process+0x130>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d025      	beq.n	8001212 <User_Process+0x116>
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <User_Process+0x13c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <User_Process+0x116>
			{
				uint8_t data[20];
				sprintf((char *)data, "%ld,%ld,%ld",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z);
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <User_Process+0x144>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <User_Process+0x144>)
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <User_Process+0x144>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	1d38      	adds	r0, r7, #4
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	460b      	mov	r3, r1
 80011e2:	4918      	ldr	r1, [pc, #96]	; (8001244 <User_Process+0x148>)
 80011e4:	f00e faf6 	bl	800f7d4 <siprintf>
				sendData(data, sizeof(data));
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2114      	movs	r1, #20
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f98d 	bl	800150c <sendData>
				sprintf((char *)data, ",%f\r\n", misure_temperatura);
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <User_Process+0x14c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ae 	bl	8000558 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	1d38      	adds	r0, r7, #4
 8001202:	4912      	ldr	r1, [pc, #72]	; (800124c <User_Process+0x150>)
 8001204:	f00e fae6 	bl	800f7d4 <siprintf>
				sendData(data, sizeof(data));
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2114      	movs	r1, #20
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f97d 	bl	800150c <sendData>
			}
		/* Reset the User Button flag */
		user_button_pressed = 0;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <User_Process+0x140>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
//		sprintf((char *)data, "%ld,%ld,%ld,%f",misure_accelerometro.x, misure_accelerometro.y, misure_accelerometro.z, misure_temperatura);
//		sendData(data, sizeof(data));
//	}
//#endif
	/* USER CODE END DIGIMAT CODE */
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000001 	.word	0x20000001
 8001224:	20000000 	.word	0x20000000
 8001228:	2000038e 	.word	0x2000038e
 800122c:	20000390 	.word	0x20000390
 8001230:	20000399 	.word	0x20000399
 8001234:	2000039a 	.word	0x2000039a
 8001238:	20000396 	.word	0x20000396
 800123c:	2000038d 	.word	0x2000038d
 8001240:	200004b0 	.word	0x200004b0
 8001244:	080118fc 	.word	0x080118fc
 8001248:	200004bc 	.word	0x200004bc
 800124c:	08011908 	.word	0x08011908

08001250 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	/* Set the User Button flag */
	user_button_pressed = 1;
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <BSP_PB_Callback+0x1c>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	2000038d 	.word	0x2000038d

08001270 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b095      	sub	sp, #84	; 0x54
 8001274:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <Add_Sample_Service+0xcc>)
 8001278:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800127c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <Add_Sample_Service+0xd0>)
 8001284:	f107 0414 	add.w	r4, r7, #20
 8001288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <Add_Sample_Service+0xd4>)
 8001290:	1d3c      	adds	r4, r7, #4
 8001292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8001298:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <Add_Sample_Service+0xd8>)
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2307      	movs	r3, #7
 80012a2:	2201      	movs	r2, #1
 80012a4:	2002      	movs	r0, #2
 80012a6:	f00c fa29 	bl	800d6fc <aci_gatt_add_serv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d136      	bne.n	8001326 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <Add_Sample_Service+0xd8>)
 80012ba:	8818      	ldrh	r0, [r3, #0]
 80012bc:	f107 0214 	add.w	r2, r7, #20
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <Add_Sample_Service+0xdc>)
 80012c2:	9305      	str	r3, [sp, #20]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9304      	str	r3, [sp, #16]
 80012c8:	2310      	movs	r3, #16
 80012ca:	9303      	str	r3, [sp, #12]
 80012cc:	2300      	movs	r3, #0
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2300      	movs	r3, #0
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	2310      	movs	r3, #16
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2314      	movs	r3, #20
 80012da:	2102      	movs	r1, #2
 80012dc:	f00c fa97 	bl	800d80e <aci_gatt_add_char>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80012e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11d      	bne.n	800132a <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <Add_Sample_Service+0xd8>)
 80012f0:	8818      	ldrh	r0, [r3, #0]
 80012f2:	1d3a      	adds	r2, r7, #4
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <Add_Sample_Service+0xe0>)
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	2310      	movs	r3, #16
 80012fe:	9303      	str	r3, [sp, #12]
 8001300:	2301      	movs	r3, #1
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2300      	movs	r3, #0
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	230c      	movs	r3, #12
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2314      	movs	r3, #20
 800130e:	2102      	movs	r1, #2
 8001310:	f00c fa7d 	bl	800d80e <aci_gatt_add_char>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800131a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8001322:	2300      	movs	r3, #0
 8001324:	e005      	b.n	8001332 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001326:	bf00      	nop
 8001328:	e002      	b.n	8001330 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800132a:	bf00      	nop
 800132c:	e000      	b.n	8001330 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800132e:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8001330:	2347      	movs	r3, #71	; 0x47
}
 8001332:	4618      	mov	r0, r3
 8001334:	373c      	adds	r7, #60	; 0x3c
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}
 800133a:	bf00      	nop
 800133c:	08011910 	.word	0x08011910
 8001340:	08011920 	.word	0x08011920
 8001344:	08011930 	.word	0x08011930
 8001348:	200003a0 	.word	0x200003a0
 800134c:	200003a2 	.word	0x200003a2
 8001350:	200003a4 	.word	0x200003a4

08001354 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08f      	sub	sp, #60	; 0x3c
 8001358:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <Make_Connection+0xc0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d132      	bne.n	80013c8 <Make_Connection+0x74>

    printf("Client Create Connection\n");
 8001362:	482d      	ldr	r0, [pc, #180]	; (8001418 <Make_Connection+0xc4>)
 8001364:	f00e fa1e 	bl	800f7a4 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001368:	4a2c      	ldr	r2, [pc, #176]	; (800141c <Make_Connection+0xc8>)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8001378:	2000      	movs	r0, #0
 800137a:	f008 fd25 	bl	8009dc8 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001386:	9206      	str	r2, [sp, #24]
 8001388:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800138c:	9205      	str	r2, [sp, #20]
 800138e:	223c      	movs	r2, #60	; 0x3c
 8001390:	9204      	str	r2, [sp, #16]
 8001392:	2200      	movs	r2, #0
 8001394:	9203      	str	r2, [sp, #12]
 8001396:	2228      	movs	r2, #40	; 0x28
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	9200      	str	r2, [sp, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ac:	f00c f92f 	bl	800d60e <aci_gap_create_connection>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d027      	beq.n	800140a <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 80013ba:	4819      	ldr	r0, [pc, #100]	; (8001420 <Make_Connection+0xcc>)
 80013bc:	f00e f9f2 	bl	800f7a4 <puts>
      HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f008 ff7d 	bl	800a2c0 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 80013c6:	e020      	b.n	800140a <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <Make_Connection+0xd0>)
 80013ca:	463c      	mov	r4, r7
 80013cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ce:	c407      	stmia	r4!, {r0, r1, r2}
 80013d0:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f00c fe09 	bl	800dfec <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 80013da:	2300      	movs	r3, #0
 80013dc:	9306      	str	r3, [sp, #24]
 80013de:	2300      	movs	r3, #0
 80013e0:	9305      	str	r3, [sp, #20]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9304      	str	r3, [sp, #16]
 80013e6:	2300      	movs	r3, #0
 80013e8:	9303      	str	r3, [sp, #12]
 80013ea:	463b      	mov	r3, r7
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	230d      	movs	r3, #13
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2300      	movs	r3, #0
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	2000      	movs	r0, #0
 8001402:	f00b ffc3 	bl	800d38c <aci_gap_set_discoverable>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
}
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	2000038e 	.word	0x2000038e
 8001418:	08011940 	.word	0x08011940
 800141c:	08011980 	.word	0x08011980
 8001420:	0801195c 	.word	0x0801195c
 8001424:	08011988 	.word	0x08011988

08001428 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b087      	sub	sp, #28
 800142c:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <startReadTXCharHandle+0x40>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d112      	bne.n	800145e <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <startReadTXCharHandle+0x44>)
 800143a:	463c      	mov	r4, r7
 800143c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <startReadTXCharHandle+0x48>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	b298      	uxth	r0, r3
 8001448:	463b      	mov	r3, r7
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2302      	movs	r3, #2
 800144e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001452:	2101      	movs	r1, #1
 8001454:	f00c fb36 	bl	800dac4 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <startReadTXCharHandle+0x40>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
  }
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	20000397 	.word	0x20000397
 800146c:	08011920 	.word	0x08011920
 8001470:	20000394 	.word	0x20000394

08001474 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b087      	sub	sp, #28
 8001478:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <startReadRXCharHandle+0x40>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d112      	bne.n	80014aa <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <startReadRXCharHandle+0x44>)
 8001486:	463c      	mov	r4, r7
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <startReadRXCharHandle+0x48>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b298      	uxth	r0, r3
 8001494:	463b      	mov	r3, r7
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2302      	movs	r3, #2
 800149a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149e:	2101      	movs	r1, #1
 80014a0:	f00c fb10 	bl	800dac4 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <startReadRXCharHandle+0x40>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
  }
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000398 	.word	0x20000398
 80014b8:	08011930 	.word	0x08011930
 80014bc:	20000394 	.word	0x20000394

080014c0 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f008 fca7 	bl	8009e20 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e009      	b.n	80014ec <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00e f8db 	bl	800f69c <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf1      	blt.n	80014d8 <receiveData+0x18>
  }
  fflush(stdout);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <receiveData+0x48>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00d fa26 	bl	800e94c <fflush>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200001a0 	.word	0x200001a0

0800150c <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af02      	add	r7, sp, #8
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <sendData+0x4c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d10b      	bne.n	8001538 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <sendData+0x50>)
 8001522:	8818      	ldrh	r0, [r3, #0]
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <sendData+0x54>)
 8001526:	8819      	ldrh	r1, [r3, #0]
 8001528:	78fa      	ldrb	r2, [r7, #3]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	2200      	movs	r2, #0
 8001532:	f00c fa37 	bl	800d9a4 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8001536:	e00a      	b.n	800154e <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <sendData+0x58>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b298      	uxth	r0, r3
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <sendData+0x5c>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b299      	uxth	r1, r3
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f00c fbc4 	bl	800dcd6 <aci_gatt_write_without_response>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000038e 	.word	0x2000038e
 800155c:	200003a0 	.word	0x200003a0
 8001560:	200003a2 	.word	0x200003a2
 8001564:	20000394 	.word	0x20000394
 8001568:	2000039e 	.word	0x2000039e

0800156c <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8001572:	2301      	movs	r3, #1
 8001574:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8001576:	f008 fe97 	bl	800a2a8 <HAL_GetTick>
 800157a:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 800157c:	e008      	b.n	8001590 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800157e:	f008 fe93 	bl	800a2a8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f242 7210 	movw	r2, #10000	; 0x2710
 800158c:	4293      	cmp	r3, r2
 800158e:	d80e      	bhi.n	80015ae <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <enableNotification+0x54>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b298      	uxth	r0, r3
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <enableNotification+0x58>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	3302      	adds	r3, #2
 800159c:	b299      	uxth	r1, r3
 800159e:	463b      	mov	r3, r7
 80015a0:	2202      	movs	r2, #2
 80015a2:	f00c fb1d 	bl	800dbe0 <aci_gatt_write_charac_descriptor>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b46      	cmp	r3, #70	; 0x46
 80015aa:	d0e8      	beq.n	800157e <enableNotification+0x12>
 80015ac:	e000      	b.n	80015b0 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80015ae:	bf00      	nop
  }
  notification_enabled = TRUE;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <enableNotification+0x5c>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000394 	.word	0x20000394
 80015c4:	2000039c 	.word	0x2000039c
 80015c8:	20000396 	.word	0x20000396

080015cc <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	603a      	str	r2, [r7, #0]
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	460b      	mov	r3, r1
 80015da:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 80015dc:	88fa      	ldrh	r2, [r7, #6]
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <Attribute_Modified_CB+0x4c>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d105      	bne.n	80015f4 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 80015e8:	797b      	ldrb	r3, [r7, #5]
 80015ea:	4619      	mov	r1, r3
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f7ff ff67 	bl	80014c0 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 80015f2:	e00c      	b.n	800160e <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 80015f4:	88fa      	ldrh	r2, [r7, #6]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <Attribute_Modified_CB+0x50>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	3302      	adds	r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d106      	bne.n	800160e <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <Attribute_Modified_CB+0x54>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200003a4 	.word	0x200003a4
 800161c:	200003a2 	.word	0x200003a2
 8001620:	20000396 	.word	0x20000396

08001624 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <GAP_ConnectionComplete_CB+0x54>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001636:	4a11      	ldr	r2, [pc, #68]	; (800167c <GAP_ConnectionComplete_CB+0x58>)
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 800163c:	4810      	ldr	r0, [pc, #64]	; (8001680 <GAP_ConnectionComplete_CB+0x5c>)
 800163e:	f00e f815 	bl	800f66c <iprintf>
  for(int i = 5; i > 0; i--){
 8001642:	2305      	movs	r3, #5
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e00a      	b.n	800165e <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <GAP_ConnectionComplete_CB+0x60>)
 8001654:	f00e f80a 	bl	800f66c <iprintf>
  for(int i = 5; i > 0; i--){
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b01      	subs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dcf1      	bgt.n	8001648 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <GAP_ConnectionComplete_CB+0x64>)
 800166c:	f00d fffe 	bl	800f66c <iprintf>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000390 	.word	0x20000390
 800167c:	20000394 	.word	0x20000394
 8001680:	08011998 	.word	0x08011998
 8001684:	080119b0 	.word	0x080119b0
 8001688:	080119b8 	.word	0x080119b8

0800168c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <GAP_DisconnectionComplete_CB+0x38>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <GAP_DisconnectionComplete_CB+0x3c>)
 8001698:	f00e f884 	bl	800f7a4 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <GAP_DisconnectionComplete_CB+0x40>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <GAP_DisconnectionComplete_CB+0x44>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <GAP_DisconnectionComplete_CB+0x48>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <GAP_DisconnectionComplete_CB+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <GAP_DisconnectionComplete_CB+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <GAP_DisconnectionComplete_CB+0x54>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000390 	.word	0x20000390
 80016c8:	080119c0 	.word	0x080119c0
 80016cc:	20000001 	.word	0x20000001
 80016d0:	20000396 	.word	0x20000396
 80016d4:	20000397 	.word	0x20000397
 80016d8:	20000398 	.word	0x20000398
 80016dc:	20000399 	.word	0x20000399
 80016e0:	2000039a 	.word	0x2000039a

080016e4 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	603a      	str	r2, [r7, #0]
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	460b      	mov	r3, r1
 80016f2:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <GATT_Notification_CB+0x30>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d104      	bne.n	800170a <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8001700:	797b      	ldrb	r3, [r7, #5]
 8001702:	4619      	mov	r1, r3
 8001704:	6838      	ldr	r0, [r7, #0]
 8001706:	f7ff fedb 	bl	80014c0 <receiveData>
  }
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000039c 	.word	0x2000039c

08001718 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	3301      	adds	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b04      	cmp	r3, #4
 8001730:	f040 80e2 	bne.w	80018f8 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2bff      	cmp	r3, #255	; 0xff
 800173a:	d021      	beq.n	8001780 <user_notify+0x68>
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	f300 80e0 	bgt.w	8001902 <user_notify+0x1ea>
 8001742:	2b05      	cmp	r3, #5
 8001744:	d002      	beq.n	800174c <user_notify+0x34>
 8001746:	2b3e      	cmp	r3, #62	; 0x3e
 8001748:	d003      	beq.n	8001752 <user_notify+0x3a>
 800174a:	e0da      	b.n	8001902 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800174c:	f7ff ff9e 	bl	800168c <GAP_DisconnectionComplete_CB>
    }
    break;
 8001750:	e0d7      	b.n	8001902 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	3302      	adds	r3, #2
 8001756:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	f040 80cd 	bne.w	80018fc <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1d5a      	adds	r2, r3, #5
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff ff54 	bl	8001624 <GAP_ConnectionComplete_CB>
        }
        break;
 800177c:	bf00      	nop
      }
    }
    break;
 800177e:	e0bd      	b.n	80018fc <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001782:	3302      	adds	r3, #2
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8001790:	2b11      	cmp	r3, #17
 8001792:	f200 80b5 	bhi.w	8001900 <user_notify+0x1e8>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <user_notify+0x84>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017e5 	.word	0x080017e5
 80017a0:	08001901 	.word	0x08001901
 80017a4:	08001901 	.word	0x08001901
 80017a8:	08001901 	.word	0x08001901
 80017ac:	08001901 	.word	0x08001901
 80017b0:	08001901 	.word	0x08001901
 80017b4:	08001901 	.word	0x08001901
 80017b8:	08001901 	.word	0x08001901
 80017bc:	08001901 	.word	0x08001901
 80017c0:	08001901 	.word	0x08001901
 80017c4:	08001901 	.word	0x08001901
 80017c8:	08001901 	.word	0x08001901
 80017cc:	08001901 	.word	0x08001901
 80017d0:	08001901 	.word	0x08001901
 80017d4:	08001825 	.word	0x08001825
 80017d8:	080018b1 	.word	0x080018b1
 80017dc:	08001901 	.word	0x08001901
 80017e0:	08001847 	.word	0x08001847

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 80017e4:	4b48      	ldr	r3, [pc, #288]	; (8001908 <user_notify+0x1f0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10d      	bne.n	8001808 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3302      	adds	r3, #2
 80017f0:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	885b      	ldrh	r3, [r3, #2]
 80017f6:	b298      	uxth	r0, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	7919      	ldrb	r1, [r3, #4]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3307      	adds	r3, #7
 8001800:	461a      	mov	r2, r3
 8001802:	f7ff fee3 	bl	80015cc <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8001806:	e076      	b.n	80018f6 <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3302      	adds	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	885b      	ldrh	r3, [r3, #2]
 8001812:	b298      	uxth	r0, r3
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	7919      	ldrb	r1, [r3, #4]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	3305      	adds	r3, #5
 800181c:	461a      	mov	r2, r3
 800181e:	f7ff fed5 	bl	80015cc <Attribute_Modified_CB>
        break;
 8001822:	e068      	b.n	80018f6 <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3302      	adds	r3, #2
 8001828:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001830:	b298      	uxth	r0, r3
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	789b      	ldrb	r3, [r3, #2]
 8001836:	3b02      	subs	r3, #2
 8001838:	b2d9      	uxtb	r1, r3
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3305      	adds	r3, #5
 800183e:	461a      	mov	r2, r3
 8001840:	f7ff ff50 	bl	80016e4 <GATT_Notification_CB>
        }
        break;
 8001844:	e057      	b.n	80018f6 <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <user_notify+0x1f4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d150      	bne.n	80018f0 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3302      	adds	r3, #2
 8001852:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <user_notify+0x1f8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d011      	beq.n	8001882 <user_notify+0x16a>
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <user_notify+0x1fc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10c      	bne.n	8001882 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <user_notify+0x200>)
 8001872:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <user_notify+0x200>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4828      	ldr	r0, [pc, #160]	; (800191c <user_notify+0x204>)
 800187c:	f00d fef6 	bl	800f66c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8001880:	e036      	b.n	80018f0 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <user_notify+0x208>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d031      	beq.n	80018f0 <user_notify+0x1d8>
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <user_notify+0x20c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d12c      	bne.n	80018f0 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <user_notify+0x210>)
 80018a0:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <user_notify+0x210>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4820      	ldr	r0, [pc, #128]	; (800192c <user_notify+0x214>)
 80018aa:	f00d fedf 	bl	800f66c <iprintf>
        break;
 80018ae:	e01f      	b.n	80018f0 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <user_notify+0x1f4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11d      	bne.n	80018f4 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <user_notify+0x1f8>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <user_notify+0x1bc>
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <user_notify+0x1fc>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <user_notify+0x1fc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 80018d2:	e00f      	b.n	80018f4 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <user_notify+0x208>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <user_notify+0x1dc>
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <user_notify+0x20c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <user_notify+0x20c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
        break;
 80018ee:	e001      	b.n	80018f4 <user_notify+0x1dc>
        break;
 80018f0:	bf00      	nop
 80018f2:	e005      	b.n	8001900 <user_notify+0x1e8>
        break;
 80018f4:	bf00      	nop
      }
    }
    break;
 80018f6:	e003      	b.n	8001900 <user_notify+0x1e8>
    return;
 80018f8:	bf00      	nop
 80018fa:	e002      	b.n	8001902 <user_notify+0x1ea>
    break;
 80018fc:	bf00      	nop
 80018fe:	e000      	b.n	8001902 <user_notify+0x1ea>
    break;
 8001900:	bf00      	nop
  }
}
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000038c 	.word	0x2000038c
 800190c:	2000038e 	.word	0x2000038e
 8001910:	20000397 	.word	0x20000397
 8001914:	20000399 	.word	0x20000399
 8001918:	2000039c 	.word	0x2000039c
 800191c:	080119d0 	.word	0x080119d0
 8001920:	20000398 	.word	0x20000398
 8001924:	2000039a 	.word	0x2000039a
 8001928:	2000039e 	.word	0x2000039e
 800192c:	080119e8 	.word	0x080119e8

08001930 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HCI_TL_SPI_Init+0x88>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HCI_TL_SPI_Init+0x88>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HCI_TL_SPI_Init+0x88>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001954:	2301      	movs	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800195c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	4814      	ldr	r0, [pc, #80]	; (80019bc <HCI_TL_SPI_Init+0x8c>)
 800196a:	f008 fe31 	bl	800a5d0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <HCI_TL_SPI_Init+0x8c>)
 8001988:	f008 fe22 	bl	800a5d0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800198c:	2302      	movs	r3, #2
 800198e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <HCI_TL_SPI_Init+0x8c>)
 80019a4:	f008 fe14 	bl	800a5d0 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80019a8:	f000 fad0 	bl	8001f4c <BSP_SPI1_Init>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80019c4:	2101      	movs	r1, #1
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HCI_TL_SPI_DeInit+0x24>)
 80019c8:	f008 ff86 	bl	800a8d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80019cc:	2102      	movs	r1, #2
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HCI_TL_SPI_DeInit+0x24>)
 80019d0:	f008 ff82 	bl	800a8d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80019d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <HCI_TL_SPI_DeInit+0x24>)
 80019da:	f008 ff7d 	bl	800a8d8 <HAL_GPIO_DeInit>
  return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40020000 	.word	0x40020000

080019e8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2102      	movs	r1, #2
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <HCI_TL_SPI_Reset+0x38>)
 80019f2:	f009 f86d 	bl	800aad0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <HCI_TL_SPI_Reset+0x38>)
 80019fe:	f009 f867 	bl	800aad0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001a02:	2005      	movs	r0, #5
 8001a04:	f008 fc5c 	bl	800a2c0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <HCI_TL_SPI_Reset+0x38>)
 8001a10:	f009 f85e 	bl	800aad0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001a14:	2005      	movs	r0, #5
 8001a16:	f008 fc53 	bl	800a2c0 <HAL_Delay>
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020000 	.word	0x40020000

08001a24 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001a34:	23ff      	movs	r3, #255	; 0xff
 8001a36:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <HCI_TL_SPI_Receive+0xac>)
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a42:	6018      	str	r0, [r3, #0]
 8001a44:	3304      	adds	r3, #4
 8001a46:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <HCI_TL_SPI_Receive+0xb0>)
 8001a4e:	f009 f83f 	bl	800aad0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001a52:	f107 010c 	add.w	r1, r7, #12
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2205      	movs	r2, #5
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 faa5 	bl	8001fac <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8001a62:	7b3b      	ldrb	r3, [r7, #12]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d129      	bne.n	8001abc <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001a68:	7c3b      	ldrb	r3, [r7, #16]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001a78:	8bfb      	ldrh	r3, [r7, #30]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01e      	beq.n	8001abc <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001a7e:	8bfa      	ldrh	r2, [r7, #30]
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d901      	bls.n	8001a8a <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	777b      	strb	r3, [r7, #29]
 8001a8e:	e010      	b.n	8001ab2 <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001a90:	f107 011b 	add.w	r1, r7, #27
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fa86 	bl	8001fac <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001aa0:	7f7b      	ldrb	r3, [r7, #29]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	7efa      	ldrb	r2, [r7, #27]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001aac:	7f7b      	ldrb	r3, [r7, #29]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	777b      	strb	r3, [r7, #29]
 8001ab2:	7f7b      	ldrb	r3, [r7, #29]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	8bfa      	ldrh	r2, [r7, #30]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8e9      	bhi.n	8001a90 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <HCI_TL_SPI_Receive+0xb0>)
 8001ac2:	f009 f805 	bl	800aad0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001ac6:	7f7b      	ldrb	r3, [r7, #29]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	08011a00 	.word	0x08011a00
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HCI_TL_SPI_Send+0x9c>)
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aee:	6018      	str	r0, [r3, #0]
 8001af0:	3304      	adds	r3, #4
 8001af2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f008 fbd8 	bl	800a2a8 <HAL_GetTick>
 8001af8:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2102      	movs	r1, #2
 8001b02:	481d      	ldr	r0, [pc, #116]	; (8001b78 <HCI_TL_SPI_Send+0xa0>)
 8001b04:	f008 ffe4 	bl	800aad0 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001b08:	f107 0108 	add.w	r1, r7, #8
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2205      	movs	r2, #5
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fa4a 	bl	8001fac <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8001b18:	7a3b      	ldrb	r3, [r7, #8]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d10f      	bne.n	8001b3e <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001b1e:	7a7b      	ldrb	r3, [r7, #9]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d806      	bhi.n	8001b36 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4913      	ldr	r1, [pc, #76]	; (8001b7c <HCI_TL_SPI_Send+0xa4>)
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fa3c 	bl	8001fac <BSP_SPI1_SendRecv>
 8001b34:	e006      	b.n	8001b44 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001b36:	f06f 0301 	mvn.w	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	e002      	b.n	8001b44 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2102      	movs	r1, #2
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <HCI_TL_SPI_Send+0xa0>)
 8001b4a:	f008 ffc1 	bl	800aad0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001b4e:	f008 fbab 	bl	800a2a8 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d903      	bls.n	8001b64 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8001b5c:	f06f 0302 	mvn.w	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
      break;
 8001b62:	e002      	b.n	8001b6a <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	dbc7      	blt.n	8001afa <HCI_TL_SPI_Send+0x22>

  return result;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08011a08 	.word	0x08011a08
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	200003b0 	.word	0x200003b0

08001b80 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001b84:	2101      	movs	r1, #1
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <IsDataAvailable+0x1c>)
 8001b88:	f008 ff8a 	bl	800aaa0 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <hci_tl_lowlevel_init+0x54>)
 8001ba8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <hci_tl_lowlevel_init+0x58>)
 8001bac:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <hci_tl_lowlevel_init+0x5c>)
 8001bb0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <hci_tl_lowlevel_init+0x60>)
 8001bb4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <hci_tl_lowlevel_init+0x64>)
 8001bb8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <hci_tl_lowlevel_init+0x68>)
 8001bbc:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f00c fb31 	bl	800e228 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001bc6:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001bca:	4810      	ldr	r0, [pc, #64]	; (8001c0c <hci_tl_lowlevel_init+0x6c>)
 8001bcc:	f008 fcc7 	bl	800a55e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <hci_tl_lowlevel_init+0x70>)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <hci_tl_lowlevel_init+0x6c>)
 8001bd6:	f008 fca8 	bl	800a52a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2006      	movs	r0, #6
 8001be0:	f008 fc6d 	bl	800a4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001be4:	2006      	movs	r0, #6
 8001be6:	f008 fc86 	bl	800a4f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08001931 	.word	0x08001931
 8001bf8:	080019c1 	.word	0x080019c1
 8001bfc:	08001ad9 	.word	0x08001ad9
 8001c00:	08001a25 	.word	0x08001a25
 8001c04:	080019e9 	.word	0x080019e9
 8001c08:	08002169 	.word	0x08002169
 8001c0c:	200003a8 	.word	0x200003a8
 8001c10:	08001c15 	.word	0x08001c15

08001c14 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001c18:	e005      	b.n	8001c26 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f00c fc6a 	bl	800e4f4 <hci_notify_asynch_evt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001c26:	f7ff ffab 	bl	8001b80 <IsDataAvailable>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f4      	bne.n	8001c1a <hci_tl_lowlevel_isr+0x6>
 8001c30:	e000      	b.n	8001c34 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001c32:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3c:	f008 face 	bl	800a1dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c40:	f000 f82e 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c44:	f000 f898 	bl	8001d78 <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 8001c48:	f7ff f938 	bl	8000ebc <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  if (IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO)==HAL_OK){
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f007 fd16 	bl	8009680 <IKS01A3_MOTION_SENSOR_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <main+0x2a>
	  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f007 fe0b 	bl	8009878 <IKS01A3_MOTION_SENSOR_Enable>
  }
  if(IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE)==HAL_OK){
 8001c62:	2101      	movs	r1, #1
 8001c64:	2002      	movs	r0, #2
 8001c66:	f007 f96f 	bl	8008f48 <IKS01A3_ENV_SENSOR_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <main+0x40>
		  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8001c70:	2101      	movs	r1, #1
 8001c72:	2002      	movs	r0, #2
 8001c74:	f007 fa64 	bl	8009140 <IKS01A3_ENV_SENSOR_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001c78:	f7ff fa2a 	bl	80010d0 <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &misure_accelerometro);
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <main+0x60>)
 8001c7e:	2102      	movs	r1, #2
 8001c80:	2000      	movs	r0, #0
 8001c82:	f007 fe3b 	bl	80098fc <IKS01A3_MOTION_SENSOR_GetAxes>

   IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &misure_temperatura);
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <main+0x64>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f007 fa9a 	bl	80091c4 <IKS01A3_ENV_SENSOR_GetValue>
   HAL_Delay(1);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f008 fb15 	bl	800a2c0 <HAL_Delay>
  MX_BlueNRG_MS_Process();
 8001c96:	e7ef      	b.n	8001c78 <main+0x40>
 8001c98:	200004b0 	.word	0x200004b0
 8001c9c:	200004bc 	.word	0x200004bc

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	; 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	2230      	movs	r2, #48	; 0x30
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00c ff89 	bl	800ebc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <SystemClock_Config+0xd4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <SystemClock_Config+0xd4>)
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <SystemClock_Config+0xd4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d04:	2301      	movs	r3, #1
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d14:	2310      	movs	r3, #16
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d22:	2307      	movs	r3, #7
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f009 ff22 	bl	800bb74 <HAL_RCC_OscConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d36:	f000 f89d 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00a f984 	bl	800c064 <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d62:	f000 f887 	bl	8001e74 <Error_Handler>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3750      	adds	r7, #80	; 0x50
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2e      	ldr	r2, [pc, #184]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f240 3102 	movw	r1, #770	; 0x302
 8001e04:	481a      	ldr	r0, [pc, #104]	; (8001e70 <MX_GPIO_Init+0xf8>)
 8001e06:	f008 fe63 	bl	800aad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <MX_GPIO_Init+0xf8>)
 8001e20:	f008 fbd6 	bl	800a5d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001e24:	f240 3302 	movw	r3, #770	; 0x302
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <MX_GPIO_Init+0xf8>)
 8001e3e:	f008 fbc7 	bl	800a5d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2006      	movs	r0, #6
 8001e48:	f008 fb39 	bl	800a4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e4c:	2006      	movs	r0, #6
 8001e4e:	f008 fb52 	bl	800a4f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2028      	movs	r0, #40	; 0x28
 8001e58:	f008 fb31 	bl	800a4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e5c:	2028      	movs	r0, #40	; 0x28
 8001e5e:	f008 fb4a 	bl	800a4f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f008 faf2 	bl	800a4a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f008 f9b0 	bl	800a280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <EXTI0_IRQHandler+0x10>)
 8001f2a:	f008 fb2d 	bl	800a588 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003a8 	.word	0x200003a8

08001f38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <EXTI15_10_IRQHandler+0x10>)
 8001f3e:	f008 fb23 	bl	800a588 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000018c 	.word	0x2000018c

08001f4c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <BSP_SPI1_Init+0x54>)
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <BSP_SPI1_Init+0x58>)
 8001f5a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <BSP_SPI1_Init+0x5c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4911      	ldr	r1, [pc, #68]	; (8001fa8 <BSP_SPI1_Init+0x5c>)
 8001f64:	600a      	str	r2, [r1, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d114      	bne.n	8001f94 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <BSP_SPI1_Init+0x54>)
 8001f6c:	f00a fccf 	bl	800c90e <HAL_SPI_GetState>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001f76:	480a      	ldr	r0, [pc, #40]	; (8001fa0 <BSP_SPI1_Init+0x54>)
 8001f78:	f000 f93a 	bl	80021f0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001f82:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <BSP_SPI1_Init+0x54>)
 8001f84:	f000 f8f8 	bl	8002178 <MX_SPI1_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001f8e:	f06f 0307 	mvn.w	r3, #7
 8001f92:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200004c0 	.word	0x200004c0
 8001fa4:	40013000 	.word	0x40013000
 8001fa8:	2000056c 	.word	0x2000056c

08001fac <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <BSP_SPI1_SendRecv+0x3c>)
 8001fcc:	f00a fafd 	bl	800c5ca <HAL_SPI_TransmitReceive>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001fd6:	f06f 0305 	mvn.w	r3, #5
 8001fda:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001fdc:	697b      	ldr	r3, [r7, #20]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200004c0 	.word	0x200004c0

08001fec <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <BSP_I2C1_Init+0x58>)
 8001ff8:	4a13      	ldr	r2, [pc, #76]	; (8002048 <BSP_I2C1_Init+0x5c>)
 8001ffa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <BSP_I2C1_Init+0x60>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	4912      	ldr	r1, [pc, #72]	; (800204c <BSP_I2C1_Init+0x60>)
 8002004:	600a      	str	r2, [r1, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d117      	bne.n	800203a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800200a:	480e      	ldr	r0, [pc, #56]	; (8002044 <BSP_I2C1_Init+0x58>)
 800200c:	f009 fa3c 	bl	800b488 <HAL_I2C_GetState>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d111      	bne.n	800203a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <BSP_I2C1_Init+0x58>)
 8002018:	f000 f986 	bl	8002328 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <BSP_I2C1_Init+0x58>)
 8002024:	f000 f94c 	bl	80022c0 <MX_I2C1_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800202e:	f06f 0307 	mvn.w	r3, #7
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	e001      	b.n	800203a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000518 	.word	0x20000518
 8002048:	40005400 	.word	0x40005400
 800204c:	20000570 	.word	0x20000570

08002050 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <BSP_I2C1_DeInit+0x48>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d014      	beq.n	800208c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <BSP_I2C1_DeInit+0x48>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3b01      	subs	r3, #1
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <BSP_I2C1_DeInit+0x48>)
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <BSP_I2C1_DeInit+0x48>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <BSP_I2C1_DeInit+0x4c>)
 8002076:	f000 f9a1 	bl	80023bc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <BSP_I2C1_DeInit+0x4c>)
 800207c:	f008 fea0 	bl	800adc0 <HAL_I2C_DeInit>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002086:	f06f 0307 	mvn.w	r3, #7
 800208a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800208c:	687b      	ldr	r3, [r7, #4]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000570 	.word	0x20000570
 800209c:	20000518 	.word	0x20000518

080020a0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	81fb      	strh	r3, [r7, #14]
 80020ae:	460b      	mov	r3, r1
 80020b0:	81bb      	strh	r3, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020ba:	89ba      	ldrh	r2, [r7, #12]
 80020bc:	89f9      	ldrh	r1, [r7, #14]
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <BSP_I2C1_WriteReg+0x60>)
 80020d0:	f008 feba 	bl	800ae48 <HAL_I2C_Mem_Write>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <BSP_I2C1_WriteReg+0x60>)
 80020dc:	f009 f9e2 	bl	800b4a4 <HAL_I2C_GetError>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d103      	bne.n	80020ee <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020e6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e002      	b.n	80020f4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020ee:	f06f 0303 	mvn.w	r3, #3
 80020f2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80020f4:	697b      	ldr	r3, [r7, #20]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000518 	.word	0x20000518

08002104 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af04      	add	r7, sp, #16
 800210a:	60ba      	str	r2, [r7, #8]
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	81fb      	strh	r3, [r7, #14]
 8002112:	460b      	mov	r3, r1
 8002114:	81bb      	strh	r3, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800211e:	89ba      	ldrh	r2, [r7, #12]
 8002120:	89f9      	ldrh	r1, [r7, #14]
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <BSP_I2C1_ReadReg+0x60>)
 8002134:	f008 ff82 	bl	800b03c <HAL_I2C_Mem_Read>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <BSP_I2C1_ReadReg+0x60>)
 8002140:	f009 f9b0 	bl	800b4a4 <HAL_I2C_GetError>
 8002144:	4603      	mov	r3, r0
 8002146:	2b04      	cmp	r3, #4
 8002148:	d103      	bne.n	8002152 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800214a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e002      	b.n	8002158 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002152:	f06f 0303 	mvn.w	r3, #3
 8002156:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002158:	697b      	ldr	r3, [r7, #20]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000518 	.word	0x20000518

08002168 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800216c:	f008 f89c 	bl	800a2a8 <HAL_GetTick>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a19      	ldr	r2, [pc, #100]	; (80021ec <MX_SPI1_Init+0x74>)
 8002188:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002190:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2218      	movs	r2, #24
 80021b6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	220a      	movs	r2, #10
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f00a f967 	bl	800c4a4 <HAL_SPI_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40013000 	.word	0x40013000

080021f0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <SPI1_MspInit+0xc4>)
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <SPI1_MspInit+0xc4>)
 8002202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002206:	6453      	str	r3, [r2, #68]	; 0x44
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <SPI1_MspInit+0xc4>)
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <SPI1_MspInit+0xc4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <SPI1_MspInit+0xc4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <SPI1_MspInit+0xc4>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <SPI1_MspInit+0xc4>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <SPI1_MspInit+0xc4>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <SPI1_MspInit+0xc4>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800224c:	2340      	movs	r3, #64	; 0x40
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800225c:	2305      	movs	r3, #5
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4814      	ldr	r0, [pc, #80]	; (80022b8 <SPI1_MspInit+0xc8>)
 8002268:	f008 f9b2 	bl	800a5d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800227c:	2305      	movs	r3, #5
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <SPI1_MspInit+0xc8>)
 8002288:	f008 f9a2 	bl	800a5d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800228c:	2308      	movs	r3, #8
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800229c:	2305      	movs	r3, #5
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <SPI1_MspInit+0xcc>)
 80022a8:	f008 f992 	bl	800a5d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80022ac:	bf00      	nop
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400

080022c0 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <MX_I2C1_Init+0x60>)
 80022d0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a13      	ldr	r2, [pc, #76]	; (8002324 <MX_I2C1_Init+0x64>)
 80022d6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ea:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f008 fc17 	bl	800ab38 <HAL_I2C_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40005400 	.word	0x40005400
 8002324:	00061a80 	.word	0x00061a80

08002328 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <I2C1_MspInit+0x8c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <I2C1_MspInit+0x8c>)
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	6313      	str	r3, [r2, #48]	; 0x30
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <I2C1_MspInit+0x8c>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800234c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002352:	2312      	movs	r3, #18
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800235e:	2304      	movs	r3, #4
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4813      	ldr	r0, [pc, #76]	; (80023b8 <I2C1_MspInit+0x90>)
 800236a:	f008 f931 	bl	800a5d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800236e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002374:	2312      	movs	r3, #18
 8002376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002380:	2304      	movs	r3, #4
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	480b      	ldr	r0, [pc, #44]	; (80023b8 <I2C1_MspInit+0x90>)
 800238c:	f008 f920 	bl	800a5d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <I2C1_MspInit+0x8c>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <I2C1_MspInit+0x8c>)
 800239a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800239e:	6413      	str	r3, [r2, #64]	; 0x40
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <I2C1_MspInit+0x8c>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020400 	.word	0x40020400

080023bc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <I2C1_MspDeInit+0x30>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a08      	ldr	r2, [pc, #32]	; (80023ec <I2C1_MspDeInit+0x30>)
 80023ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80023d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <I2C1_MspDeInit+0x34>)
 80023d6:	f008 fa7f 	bl	800a8d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80023da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023de:	4804      	ldr	r0, [pc, #16]	; (80023f0 <I2C1_MspDeInit+0x34>)
 80023e0:	f008 fa7a 	bl	800a8d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020400 	.word	0x40020400

080023f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_kill>:

int _kill(int pid, int sig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800240e:	f00c f9d5 	bl	800e7bc <__errno>
 8002412:	4603      	mov	r3, r0
 8002414:	2216      	movs	r2, #22
 8002416:	601a      	str	r2, [r3, #0]
  return -1;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_exit>:

void _exit (int status)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffe7 	bl	8002404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002436:	e7fe      	b.n	8002436 <_exit+0x12>

08002438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00a      	b.n	8002460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800244a:	f3af 8000 	nop.w
 800244e:	4601      	mov	r1, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3301      	adds	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbf0      	blt.n	800244a <_read+0x12>
  }

  return len;
 8002468:	687b      	ldr	r3, [r7, #4]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e009      	b.n	8002498 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f007 fe41 	bl	800a114 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf1      	blt.n	8002484 <_write+0x12>
  }
  return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_close>:

int _close(int file)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d2:	605a      	str	r2, [r3, #4]
  return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_isatty>:

int _isatty(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f00c f93a 	bl	800e7bc <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20018000 	.word	0x20018000
 8002574:	00000400 	.word	0x00000400
 8002578:	20000574 	.word	0x20000574
 800257c:	20000a98 	.word	0x20000a98

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025aa:	490e      	ldr	r1, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c0:	4c0b      	ldr	r4, [pc, #44]	; (80025f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ce:	f7ff ffd7 	bl	8002580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f00c fac3 	bl	800eb5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff fb2f 	bl	8001c38 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 80025e8:	08011e24 	.word	0x08011e24
  ldr r2, =_sbss
 80025ec:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 80025f0:	20000a98 	.word	0x20000a98

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e034      	b.n	800267a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	7b1a      	ldrb	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HTS221_RegisterBusIO+0x8c>)
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HTS221_RegisterBusIO+0x90>)
 8002652:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4798      	blx	r3
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	e002      	b.n	800267a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	08002cb7 	.word	0x08002cb7
 8002688:	08002d19 	.word	0x08002d19

0800268c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 faa4 	bl	8002bec <HTS221_Initialize>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e004      	b.n	80026ba <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d111      	bne.n	80026f8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f878 	bl	80027ca <HTS221_HUM_Disable>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e00d      	b.n	8002702 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f95f 	bl	80029aa <HTS221_TEMP_Disable>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e004      	b.n	8002702 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3320      	adds	r3, #32
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fc28 	bl	8002f70 <hts221_device_id_get>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e000      	b.n	800272e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	4a07      	ldr	r2, [pc, #28]	; (800277c <HTS221_GetCapabilities+0x44>)
 800275e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4a06      	ldr	r2, [pc, #24]	; (800277c <HTS221_GetCapabilities+0x44>)
 8002764:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	41480000 	.word	0x41480000

08002780 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e015      	b.n	80027c2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3320      	adds	r3, #32
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fbf3 	bl	8002f92 <hts221_power_on_set>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	e004      	b.n	80027c2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e015      	b.n	800280c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3320      	adds	r3, #32
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fbce 	bl	8002f92 <hts221_power_on_set>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	e004      	b.n	800280c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800281e:	6839      	ldr	r1, [r7, #0]
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f96f 	bl	8002b04 <HTS221_GetOutputDataRate>
 8002826:	4603      	mov	r3, r0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800283c:	ed97 0a00 	vldr	s0, [r7]
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f9a3 	bl	8002b8c <HTS221_SetOutputDataRate>
 8002846:	4603      	mov	r3, r0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3320      	adds	r3, #32
 800285e:	f107 020c 	add.w	r2, r7, #12
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fc58 	bl	800311a <hts221_hum_adc_point_0_get>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	e06b      	b.n	800294e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 0220 	add.w	r2, r3, #32
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	3304      	adds	r3, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 fbaa 	bl	8002fde <hts221_hum_rh_point_0_get>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002890:	f04f 33ff 	mov.w	r3, #4294967295
 8002894:	e05b      	b.n	800294e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 0220 	add.w	r2, r3, #32
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	3308      	adds	r3, #8
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 fc5c 	bl	8003162 <hts221_hum_adc_point_1_get>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
 80028b4:	e04b      	b.n	800294e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 0220 	add.w	r2, r3, #32
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	330c      	adds	r3, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 fba8 	bl	800301a <hts221_hum_rh_point_1_get>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	e03b      	b.n	800294e <HTS221_HUM_GetHumidity+0xfe>
 80028d6:	2300      	movs	r3, #0
 80028d8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3320      	adds	r3, #32
 80028de:	f107 021c 	add.w	r2, r7, #28
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fafd 	bl	8002ee4 <hts221_humidity_raw_get>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e02b      	b.n	800294e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80028f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002902:	f107 030c 	add.w	r3, r7, #12
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f99a 	bl	8002c44 <Linear_Interpolation>
 8002910:	eef0 7a40 	vmov.f32	s15, s0
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	d503      	bpl.n	8002932 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002958 <HTS221_HUM_GetHumidity+0x108>
 800293c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	dd02      	ble.n	800294c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <HTS221_HUM_GetHumidity+0x10c>)
 800294a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	42c80000 	.word	0x42c80000
 800295c:	42c80000 	.word	0x42c80000

08002960 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e015      	b.n	80029a2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3320      	adds	r3, #32
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fb03 	bl	8002f92 <hts221_power_on_set>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e004      	b.n	80029a2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e015      	b.n	80029ec <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3320      	adds	r3, #32
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fade 	bl	8002f92 <hts221_power_on_set>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e004      	b.n	80029ec <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80029fe:	6839      	ldr	r1, [r7, #0]
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f87f 	bl	8002b04 <HTS221_GetOutputDataRate>
 8002a06:	4603      	mov	r3, r0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002a1c:	ed97 0a00 	vldr	s0, [r7]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f8b3 	bl	8002b8c <HTS221_SetOutputDataRate>
 8002a26:	4603      	mov	r3, r0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3320      	adds	r3, #32
 8002a3e:	f107 020c 	add.w	r2, r7, #12
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fbb0 	bl	80031aa <hts221_temp_adc_point_0_get>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	e052      	b.n	8002afc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0220 	add.w	r2, r3, #32
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	3304      	adds	r3, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 faf6 	bl	8003056 <hts221_temp_deg_point_0_get>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	e042      	b.n	8002afc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f103 0220 	add.w	r2, r3, #32
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	3308      	adds	r3, #8
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f000 fbb4 	bl	80031f2 <hts221_temp_adc_point_1_get>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	e032      	b.n	8002afc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0220 	add.w	r2, r3, #32
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f000 fb07 	bl	80030b8 <hts221_temp_deg_point_1_get>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	e022      	b.n	8002afc <HTS221_TEMP_GetTemperature+0xcc>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3320      	adds	r3, #32
 8002abe:	f107 021c 	add.w	r2, r7, #28
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fa30 	bl	8002f2a <hts221_temperature_raw_get>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad4:	e012      	b.n	8002afc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002ad6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f8aa 	bl	8002c44 <Linear_Interpolation>
 8002af0:	eef0 7a40 	vmov.f32	s15, s0
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3320      	adds	r3, #32
 8002b16:	f107 020b 	add.w	r2, r7, #11
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f983 	bl	8002e28 <hts221_data_rate_get>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2c:	e025      	b.n	8002b7a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d81d      	bhi.n	8002b70 <HTS221_GetOutputDataRate+0x6c>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HTS221_GetOutputDataRate+0x38>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b57 	.word	0x08002b57
 8002b44:	08002b61 	.word	0x08002b61
 8002b48:	08002b69 	.word	0x08002b69
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
      break;
 8002b54:	e010      	b.n	8002b78 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b5c:	601a      	str	r2, [r3, #0]
      break;
 8002b5e:	e00b      	b.n	8002b78 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HTS221_GetOutputDataRate+0x80>)
 8002b64:	601a      	str	r2, [r3, #0]
      break;
 8002b66:	e007      	b.n	8002b78 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <HTS221_GetOutputDataRate+0x84>)
 8002b6c:	601a      	str	r2, [r3, #0]
      break;
 8002b6e:	e003      	b.n	8002b78 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
 8002b74:	60fb      	str	r3, [r7, #12]
      break;
 8002b76:	bf00      	nop
  }

  return ret;
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40e00000 	.word	0x40e00000
 8002b88:	41480000 	.word	0x41480000

08002b8c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002b98:	edd7 7a00 	vldr	s15, [r7]
 8002b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba8:	d801      	bhi.n	8002bae <HTS221_SetOutputDataRate+0x22>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00b      	b.n	8002bc6 <HTS221_SetOutputDataRate+0x3a>
 8002bae:	edd7 7a00 	vldr	s15, [r7]
 8002bb2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	d801      	bhi.n	8002bc4 <HTS221_SetOutputDataRate+0x38>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e000      	b.n	8002bc6 <HTS221_SetOutputDataRate+0x3a>
 8002bc4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002bc6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3320      	adds	r3, #32
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f902 	bl	8002dda <hts221_data_rate_set>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002be0:	e000      	b.n	8002be4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3320      	adds	r3, #32
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f9c9 	bl	8002f92 <hts221_power_on_set>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	e017      	b.n	8002c3c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3320      	adds	r3, #32
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f940 	bl	8002e98 <hts221_block_data_update_set>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e00b      	b.n	8002c3c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002c24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ffaf 	bl	8002b8c <HTS221_SetOutputDataRate>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	e000      	b.n	8002c3c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c60:	edd7 7a00 	vldr	s15, [r7]
 8002c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	ed93 6a00 	vldr	s12, [r3]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c84:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ca0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ca4:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cb6:	b590      	push	{r4, r7, lr}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	72fb      	strb	r3, [r7, #11]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	695c      	ldr	r4, [r3, #20]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	7b1b      	ldrb	r3, [r3, #12]
 8002cde:	b298      	uxth	r0, r3
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
 8002ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	b299      	uxth	r1, r3
 8002cea:	893b      	ldrh	r3, [r7, #8]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	47a0      	blx	r4
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	e00d      	b.n	8002d10 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	695c      	ldr	r4, [r3, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	7b1b      	ldrb	r3, [r3, #12]
 8002cfc:	b298      	uxth	r0, r3
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	b299      	uxth	r1, r3
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	47a0      	blx	r4
 8002d0e:	4603      	mov	r3, r0
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd90      	pop	{r4, r7, pc}

08002d18 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	460b      	mov	r3, r1
 8002d26:	72fb      	strb	r3, [r7, #11]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	691c      	ldr	r4, [r3, #16]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	7b1b      	ldrb	r3, [r3, #12]
 8002d40:	b298      	uxth	r0, r3
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	b299      	uxth	r1, r3
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	47a0      	blx	r4
 8002d52:	4603      	mov	r3, r0
 8002d54:	e00d      	b.n	8002d72 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	691c      	ldr	r4, [r3, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	7b1b      	ldrb	r3, [r3, #12]
 8002d5e:	b298      	uxth	r0, r3
 8002d60:	7afb      	ldrb	r3, [r7, #11]
 8002d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	b299      	uxth	r1, r3
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	47a0      	blx	r4
 8002d70:	4603      	mov	r3, r0
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}

08002d7a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8002d7a:	b590      	push	{r4, r7, lr}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	461a      	mov	r2, r3
 8002d86:	460b      	mov	r3, r1
 8002d88:	72fb      	strb	r3, [r7, #11]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685c      	ldr	r4, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68d8      	ldr	r0, [r3, #12]
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	7af9      	ldrb	r1, [r7, #11]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	47a0      	blx	r4
 8002d9e:	6178      	str	r0, [r7, #20]

  return ret;
 8002da0:	697b      	ldr	r3, [r7, #20]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd90      	pop	{r4, r7, pc}

08002daa <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002daa:	b590      	push	{r4, r7, lr}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	461a      	mov	r2, r3
 8002db6:	460b      	mov	r3, r1
 8002db8:	72fb      	strb	r3, [r7, #11]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681c      	ldr	r4, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68d8      	ldr	r0, [r3, #12]
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	7af9      	ldrb	r1, [r7, #11]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	47a0      	blx	r4
 8002dce:	6178      	str	r0, [r7, #20]

  return ret;
 8002dd0:	697b      	ldr	r3, [r7, #20]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}

08002dda <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	2301      	movs	r3, #1
 8002dec:	2120      	movs	r1, #32
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffc3 	bl	8002d7a <hts221_read_reg>
 8002df4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	7a3b      	ldrb	r3, [r7, #8]
 8002e06:	f362 0301 	bfi	r3, r2, #0, #2
 8002e0a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e0c:	f107 0208 	add.w	r2, r7, #8
 8002e10:	2301      	movs	r3, #1
 8002e12:	2120      	movs	r1, #32
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffc8 	bl	8002daa <hts221_write_reg>
 8002e1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e32:	f107 0208 	add.w	r2, r7, #8
 8002e36:	2301      	movs	r3, #1
 8002e38:	2120      	movs	r1, #32
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ff9d 	bl	8002d7a <hts221_read_reg>
 8002e40:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8002e42:	7a3b      	ldrb	r3, [r7, #8]
 8002e44:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d81a      	bhi.n	8002e84 <hts221_data_rate_get+0x5c>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <hts221_data_rate_get+0x2c>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e6d 	.word	0x08002e6d
 8002e5c:	08002e75 	.word	0x08002e75
 8002e60:	08002e7d 	.word	0x08002e7d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e00f      	b.n	8002e8c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
      break;
 8002e72:	e00b      	b.n	8002e8c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2202      	movs	r2, #2
 8002e78:	701a      	strb	r2, [r3, #0]
      break;
 8002e7a:	e007      	b.n	8002e8c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	701a      	strb	r2, [r3, #0]
      break;
 8002e82:	e003      	b.n	8002e8c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]
      break;
 8002e8a:	bf00      	nop
  }

  return ret;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002ea4:	f107 0208 	add.w	r2, r7, #8
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	2120      	movs	r1, #32
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff64 	bl	8002d7a <hts221_read_reg>
 8002eb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	7a3b      	ldrb	r3, [r7, #8]
 8002ec4:	f362 0382 	bfi	r3, r2, #2, #1
 8002ec8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002eca:	f107 0208 	add.w	r2, r7, #8
 8002ece:	2301      	movs	r3, #1
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff69 	bl	8002daa <hts221_write_reg>
 8002ed8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002eee:	f107 0208 	add.w	r2, r7, #8
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	2128      	movs	r1, #40	; 0x28
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff3f 	bl	8002d7a <hts221_read_reg>
 8002efc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002efe:	7a7b      	ldrb	r3, [r7, #9]
 8002f00:	b21a      	sxth	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	7a3b      	ldrb	r3, [r7, #8]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f20:	68fb      	ldr	r3, [r7, #12]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002f34:	f107 0208 	add.w	r2, r7, #8
 8002f38:	2302      	movs	r3, #2
 8002f3a:	212a      	movs	r1, #42	; 0x2a
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff1c 	bl	8002d7a <hts221_read_reg>
 8002f42:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002f44:	7a7b      	ldrb	r3, [r7, #9]
 8002f46:	b21a      	sxth	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	7a3b      	ldrb	r3, [r7, #8]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b21a      	sxth	r2, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f66:	68fb      	ldr	r3, [r7, #12]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	210f      	movs	r1, #15
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fefa 	bl	8002d7a <hts221_read_reg>
 8002f86:	60f8      	str	r0, [r7, #12]

  return ret;
 8002f88:	68fb      	ldr	r3, [r7, #12]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fee7 	bl	8002d7a <hts221_read_reg>
 8002fac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7a3b      	ldrb	r3, [r7, #8]
 8002fbe:	f362 13c7 	bfi	r3, r2, #7, #1
 8002fc2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002fc4:	f107 0208 	add.w	r2, r7, #8
 8002fc8:	2301      	movs	r3, #1
 8002fca:	2120      	movs	r1, #32
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff feec 	bl	8002daa <hts221_write_reg>
 8002fd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002fe8:	f107 020b 	add.w	r2, r7, #11
 8002fec:	2301      	movs	r3, #1
 8002fee:	2130      	movs	r1, #48	; 0x30
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fec2 	bl	8002d7a <hts221_read_reg>
 8002ff6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003002:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003010:	68fb      	ldr	r3, [r7, #12]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003024:	f107 020b 	add.w	r2, r7, #11
 8003028:	2301      	movs	r3, #1
 800302a:	2131      	movs	r1, #49	; 0x31
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fea4 	bl	8002d7a <hts221_read_reg>
 8003032:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800303e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800304c:	68fb      	ldr	r3, [r7, #12]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003060:	f107 020f 	add.w	r2, r7, #15
 8003064:	2301      	movs	r3, #1
 8003066:	2132      	movs	r1, #50	; 0x32
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff fe86 	bl	8002d7a <hts221_read_reg>
 800306e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d11b      	bne.n	80030ae <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003076:	f107 0210 	add.w	r2, r7, #16
 800307a:	2301      	movs	r3, #1
 800307c:	2135      	movs	r1, #53	; 0x35
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fe7b 	bl	8002d7a <hts221_read_reg>
 8003084:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003086:	7c3b      	ldrb	r3, [r7, #16]
 8003088:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	4413      	add	r3, r2
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80030a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80030ae:	697b      	ldr	r3, [r7, #20]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80030c2:	f107 020f 	add.w	r2, r7, #15
 80030c6:	2301      	movs	r3, #1
 80030c8:	2133      	movs	r1, #51	; 0x33
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fe55 	bl	8002d7a <hts221_read_reg>
 80030d0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11b      	bne.n	8003110 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80030d8:	f107 0210 	add.w	r2, r7, #16
 80030dc:	2301      	movs	r3, #1
 80030de:	2135      	movs	r1, #53	; 0x35
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff fe4a 	bl	8002d7a <hts221_read_reg>
 80030e6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80030e8:	7c3b      	ldrb	r3, [r7, #16]
 80030ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	4413      	add	r3, r2
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003102:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003110:	697b      	ldr	r3, [r7, #20]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003124:	f107 0208 	add.w	r2, r7, #8
 8003128:	2302      	movs	r3, #2
 800312a:	2136      	movs	r1, #54	; 0x36
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fe24 	bl	8002d7a <hts221_read_reg>
 8003132:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003134:	7a7b      	ldrb	r3, [r7, #9]
 8003136:	b29b      	uxth	r3, r3
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	b29a      	uxth	r2, r3
 800313c:	7a3b      	ldrb	r3, [r7, #8]
 800313e:	b29b      	uxth	r3, r3
 8003140:	4413      	add	r3, r2
 8003142:	b29b      	uxth	r3, r3
 8003144:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003146:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003158:	68fb      	ldr	r3, [r7, #12]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800316c:	f107 0208 	add.w	r2, r7, #8
 8003170:	2302      	movs	r3, #2
 8003172:	213a      	movs	r1, #58	; 0x3a
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe00 	bl	8002d7a <hts221_read_reg>
 800317a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800317c:	7a7b      	ldrb	r3, [r7, #9]
 800317e:	b29b      	uxth	r3, r3
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	b29a      	uxth	r2, r3
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4413      	add	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800318e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80031b4:	f107 0208 	add.w	r2, r7, #8
 80031b8:	2302      	movs	r3, #2
 80031ba:	213c      	movs	r1, #60	; 0x3c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fddc 	bl	8002d7a <hts221_read_reg>
 80031c2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80031c4:	7a7b      	ldrb	r3, [r7, #9]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	7a3b      	ldrb	r3, [r7, #8]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80031d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80031e8:	68fb      	ldr	r3, [r7, #12]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80031fc:	f107 0208 	add.w	r2, r7, #8
 8003200:	2302      	movs	r3, #2
 8003202:	213e      	movs	r1, #62	; 0x3e
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fdb8 	bl	8002d7a <hts221_read_reg>
 800320a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800320c:	7a7b      	ldrb	r3, [r7, #9]
 800320e:	b29b      	uxth	r3, r3
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b29a      	uxth	r2, r3
 8003214:	7a3b      	ldrb	r3, [r7, #8]
 8003216:	b29b      	uxth	r3, r3
 8003218:	4413      	add	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800321e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e051      	b.n	80032fc <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	7b1a      	ldrb	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <LIS2DW12_RegisterBusIO+0xcc>)
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1c      	ldr	r2, [pc, #112]	; (800330c <LIS2DW12_RegisterBusIO+0xd0>)
 800329a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e020      	b.n	80032fc <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4798      	blx	r3
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e016      	b.n	80032fc <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d112      	bne.n	80032fc <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80032e0:	2305      	movs	r3, #5
 80032e2:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80032e4:	7afb      	ldrb	r3, [r7, #11]
 80032e6:	461a      	mov	r2, r3
 80032e8:	2121      	movs	r1, #33	; 0x21
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fd87 	bl	8003dfe <LIS2DW12_Write_Reg>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	08004191 	.word	0x08004191
 800330c:	080041c7 	.word	0x080041c7

08003310 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3320      	adds	r3, #32
 800331c:	2101      	movs	r1, #1
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fa94 	bl	800484c <lis2dw12_auto_increment_set>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e04b      	b.n	80033c8 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3320      	adds	r3, #32
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f9a8 	bl	800468c <lis2dw12_block_data_update_set>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e03f      	b.n	80033c8 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3320      	adds	r3, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f001 faa2 	bl	8004898 <lis2dw12_fifo_mode_set>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	e033      	b.n	80033c8 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3320      	adds	r3, #32
 8003364:	2104      	movs	r1, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f000 ff78 	bl	800425c <lis2dw12_power_mode_set>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e027      	b.n	80033c8 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <LIS2DW12_Init+0xc0>)
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3320      	adds	r3, #32
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f869 	bl	800446c <lis2dw12_data_rate_set>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	e010      	b.n	80033c8 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3320      	adds	r3, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f993 	bl	80046d8 <lis2dw12_full_scale_set>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	e004      	b.n	80033c8 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	42c80000 	.word	0x42c80000

080033d4 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f888 	bl	80034f2 <LIS2DW12_ACC_Disable>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ec:	e010      	b.n	8003410 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3320      	adds	r3, #32
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f001 f9fe 	bl	800482a <lis2dw12_device_id_get>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
 8003438:	e000      	b.n	800343c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2200      	movs	r2, #0
 800345e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2210      	movs	r2, #16
 8003470:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4a06      	ldr	r2, [pc, #24]	; (800349c <LIS2DW12_GetCapabilities+0x58>)
 8003484:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	44c80000 	.word	0x44c80000

080034a0 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e019      	b.n	80034ea <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034c8:	461a      	mov	r2, r3
 80034ca:	eeb0 0a67 	vmov.f32	s0, s15
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fcb0 	bl	8003e34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e004      	b.n	80034ea <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e010      	b.n	800352a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3320      	adds	r3, #32
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 ffac 	bl	800446c <lis2dw12_data_rate_set>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e004      	b.n	800352a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3320      	adds	r3, #32
 8003546:	f107 020b 	add.w	r2, r7, #11
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f8e9 	bl	8004724 <lis2dw12_full_scale_get>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003558:	f04f 33ff 	mov.w	r3, #4294967295
 800355c:	e0a0      	b.n	80036a0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3320      	adds	r3, #32
 8003562:	f107 020a 	add.w	r2, r7, #10
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fec5 	bl	80042f8 <lis2dw12_power_mode_get>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	e092      	b.n	80036a0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800357a:	7abb      	ldrb	r3, [r7, #10]
 800357c:	2b1b      	cmp	r3, #27
 800357e:	f200 8087 	bhi.w	8003690 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035f9 	.word	0x080035f9
 800358c:	08003645 	.word	0x08003645
 8003590:	08003645 	.word	0x08003645
 8003594:	08003645 	.word	0x08003645
 8003598:	08003645 	.word	0x08003645
 800359c:	08003691 	.word	0x08003691
 80035a0:	08003691 	.word	0x08003691
 80035a4:	08003691 	.word	0x08003691
 80035a8:	080035f9 	.word	0x080035f9
 80035ac:	08003645 	.word	0x08003645
 80035b0:	08003645 	.word	0x08003645
 80035b4:	08003645 	.word	0x08003645
 80035b8:	08003691 	.word	0x08003691
 80035bc:	08003691 	.word	0x08003691
 80035c0:	08003691 	.word	0x08003691
 80035c4:	08003691 	.word	0x08003691
 80035c8:	080035f9 	.word	0x080035f9
 80035cc:	08003645 	.word	0x08003645
 80035d0:	08003645 	.word	0x08003645
 80035d4:	08003645 	.word	0x08003645
 80035d8:	08003645 	.word	0x08003645
 80035dc:	08003691 	.word	0x08003691
 80035e0:	08003691 	.word	0x08003691
 80035e4:	08003691 	.word	0x08003691
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003645 	.word	0x08003645
 80035f4:	08003645 	.word	0x08003645
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d81a      	bhi.n	8003634 <LIS2DW12_ACC_GetSensitivity+0x100>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	0800361d 	.word	0x0800361d
 800360c:	08003625 	.word	0x08003625
 8003610:	0800362d 	.word	0x0800362d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003618:	601a      	str	r2, [r3, #0]
          break;
 800361a:	e012      	b.n	8003642 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4a23      	ldr	r2, [pc, #140]	; (80036ac <LIS2DW12_ACC_GetSensitivity+0x178>)
 8003620:	601a      	str	r2, [r3, #0]
          break;
 8003622:	e00e      	b.n	8003642 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8003628:	601a      	str	r2, [r3, #0]
          break;
 800362a:	e00a      	b.n	8003642 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8003630:	601a      	str	r2, [r3, #0]
          break;
 8003632:	e006      	b.n	8003642 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003638:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	60fb      	str	r3, [r7, #12]
          break;
 8003640:	bf00      	nop
      }
      break;
 8003642:	e02c      	b.n	800369e <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d81a      	bhi.n	8003680 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003661 	.word	0x08003661
 8003654:	08003669 	.word	0x08003669
 8003658:	08003671 	.word	0x08003671
 800365c:	08003679 	.word	0x08003679
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <LIS2DW12_ACC_GetSensitivity+0x188>)
 8003664:	601a      	str	r2, [r3, #0]
          break;
 8003666:	e012      	b.n	800368e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 800366c:	601a      	str	r2, [r3, #0]
          break;
 800366e:	e00e      	b.n	800368e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003674:	601a      	str	r2, [r3, #0]
          break;
 8003676:	e00a      	b.n	800368e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <LIS2DW12_ACC_GetSensitivity+0x178>)
 800367c:	601a      	str	r2, [r3, #0]
          break;
 800367e:	e006      	b.n	800368e <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4a0d      	ldr	r2, [pc, #52]	; (80036b8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003684:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	60fb      	str	r3, [r7, #12]
          break;
 800368c:	bf00      	nop
      }
      break;
 800368e:	e006      	b.n	800369e <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003694:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	60fb      	str	r3, [r7, #12]
      break;
 800369c:	bf00      	nop
  }

  return ret;
 800369e:	68fb      	ldr	r3, [r7, #12]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	3f79db23 	.word	0x3f79db23
 80036ac:	3ff9db23 	.word	0x3ff9db23
 80036b0:	4079db23 	.word	0x4079db23
 80036b4:	40f9db23 	.word	0x40f9db23
 80036b8:	bf800000 	.word	0xbf800000
 80036bc:	3e79db23 	.word	0x3e79db23
 80036c0:	3ef9db23 	.word	0x3ef9db23

080036c4 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3320      	adds	r3, #32
 80036d6:	f107 020b 	add.w	r2, r7, #11
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ff0b 	bl	80044f8 <lis2dw12_data_rate_get>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	e1d4      	b.n	8003a98 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3320      	adds	r3, #32
 80036f2:	f107 020a 	add.w	r2, r7, #10
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fdfd 	bl	80042f8 <lis2dw12_power_mode_get>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	e1c6      	b.n	8003a98 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	2b32      	cmp	r3, #50	; 0x32
 800370e:	f200 81bb 	bhi.w	8003a88 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	080037e5 	.word	0x080037e5
 800371c:	080037ef 	.word	0x080037ef
 8003720:	0800388d 	.word	0x0800388d
 8003724:	08003895 	.word	0x08003895
 8003728:	0800389d 	.word	0x0800389d
 800372c:	080038a5 	.word	0x080038a5
 8003730:	080038ad 	.word	0x080038ad
 8003734:	080038b5 	.word	0x080038b5
 8003738:	08003951 	.word	0x08003951
 800373c:	080039ed 	.word	0x080039ed
 8003740:	08003a89 	.word	0x08003a89
 8003744:	08003a89 	.word	0x08003a89
 8003748:	08003a89 	.word	0x08003a89
 800374c:	08003a89 	.word	0x08003a89
 8003750:	08003a89 	.word	0x08003a89
 8003754:	08003a89 	.word	0x08003a89
 8003758:	08003a89 	.word	0x08003a89
 800375c:	08003a89 	.word	0x08003a89
 8003760:	080037e5 	.word	0x080037e5
 8003764:	08003a89 	.word	0x08003a89
 8003768:	08003a89 	.word	0x08003a89
 800376c:	08003a89 	.word	0x08003a89
 8003770:	08003a89 	.word	0x08003a89
 8003774:	08003a89 	.word	0x08003a89
 8003778:	08003a89 	.word	0x08003a89
 800377c:	08003a89 	.word	0x08003a89
 8003780:	08003a89 	.word	0x08003a89
 8003784:	08003a89 	.word	0x08003a89
 8003788:	08003a89 	.word	0x08003a89
 800378c:	08003a89 	.word	0x08003a89
 8003790:	08003a89 	.word	0x08003a89
 8003794:	08003a89 	.word	0x08003a89
 8003798:	08003a89 	.word	0x08003a89
 800379c:	08003a89 	.word	0x08003a89
 80037a0:	08003a89 	.word	0x08003a89
 80037a4:	08003a89 	.word	0x08003a89
 80037a8:	08003a89 	.word	0x08003a89
 80037ac:	08003a89 	.word	0x08003a89
 80037b0:	08003a89 	.word	0x08003a89
 80037b4:	08003a89 	.word	0x08003a89
 80037b8:	08003a89 	.word	0x08003a89
 80037bc:	08003a89 	.word	0x08003a89
 80037c0:	08003a89 	.word	0x08003a89
 80037c4:	08003a89 	.word	0x08003a89
 80037c8:	08003a89 	.word	0x08003a89
 80037cc:	08003a89 	.word	0x08003a89
 80037d0:	08003a89 	.word	0x08003a89
 80037d4:	08003a89 	.word	0x08003a89
 80037d8:	08003a89 	.word	0x08003a89
 80037dc:	08003a89 	.word	0x08003a89
 80037e0:	080037e5 	.word	0x080037e5
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
      break;
 80037ec:	e153      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80037ee:	7abb      	ldrb	r3, [r7, #10]
 80037f0:	2b1b      	cmp	r3, #27
 80037f2:	d843      	bhi.n	800387c <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003875 	.word	0x08003875
 8003800:	08003875 	.word	0x08003875
 8003804:	08003875 	.word	0x08003875
 8003808:	08003875 	.word	0x08003875
 800380c:	0800386d 	.word	0x0800386d
 8003810:	0800387d 	.word	0x0800387d
 8003814:	0800387d 	.word	0x0800387d
 8003818:	0800387d 	.word	0x0800387d
 800381c:	08003875 	.word	0x08003875
 8003820:	08003875 	.word	0x08003875
 8003824:	08003875 	.word	0x08003875
 8003828:	08003875 	.word	0x08003875
 800382c:	0800387d 	.word	0x0800387d
 8003830:	0800387d 	.word	0x0800387d
 8003834:	0800387d 	.word	0x0800387d
 8003838:	0800387d 	.word	0x0800387d
 800383c:	08003875 	.word	0x08003875
 8003840:	08003875 	.word	0x08003875
 8003844:	08003875 	.word	0x08003875
 8003848:	08003875 	.word	0x08003875
 800384c:	0800386d 	.word	0x0800386d
 8003850:	0800387d 	.word	0x0800387d
 8003854:	0800387d 	.word	0x0800387d
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003875 	.word	0x08003875
 8003860:	08003875 	.word	0x08003875
 8003864:	08003875 	.word	0x08003875
 8003868:	08003875 	.word	0x08003875
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4a8c      	ldr	r2, [pc, #560]	; (8003aa0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8003870:	601a      	str	r2, [r3, #0]
          break;
 8003872:	e00a      	b.n	800388a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4a8b      	ldr	r2, [pc, #556]	; (8003aa4 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8003878:	601a      	str	r2, [r3, #0]
          break;
 800387a:	e006      	b.n	800388a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4a8a      	ldr	r2, [pc, #552]	; (8003aa8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003880:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	60fb      	str	r3, [r7, #12]
          break;
 8003888:	bf00      	nop
      }
      break;
 800388a:	e104      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4a84      	ldr	r2, [pc, #528]	; (8003aa0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8003890:	601a      	str	r2, [r3, #0]
      break;
 8003892:	e100      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4a85      	ldr	r2, [pc, #532]	; (8003aac <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8003898:	601a      	str	r2, [r3, #0]
      break;
 800389a:	e0fc      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4a84      	ldr	r2, [pc, #528]	; (8003ab0 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80038a0:	601a      	str	r2, [r3, #0]
      break;
 80038a2:	e0f8      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4a83      	ldr	r2, [pc, #524]	; (8003ab4 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80038a8:	601a      	str	r2, [r3, #0]
      break;
 80038aa:	e0f4      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4a82      	ldr	r2, [pc, #520]	; (8003ab8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80038b0:	601a      	str	r2, [r3, #0]
      break;
 80038b2:	e0f0      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80038b4:	7abb      	ldrb	r3, [r7, #10]
 80038b6:	2b1b      	cmp	r3, #27
 80038b8:	d842      	bhi.n	8003940 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	08003939 	.word	0x08003939
 80038c4:	08003939 	.word	0x08003939
 80038c8:	08003939 	.word	0x08003939
 80038cc:	08003939 	.word	0x08003939
 80038d0:	08003931 	.word	0x08003931
 80038d4:	08003941 	.word	0x08003941
 80038d8:	08003941 	.word	0x08003941
 80038dc:	08003941 	.word	0x08003941
 80038e0:	08003939 	.word	0x08003939
 80038e4:	08003939 	.word	0x08003939
 80038e8:	08003939 	.word	0x08003939
 80038ec:	08003939 	.word	0x08003939
 80038f0:	08003941 	.word	0x08003941
 80038f4:	08003941 	.word	0x08003941
 80038f8:	08003941 	.word	0x08003941
 80038fc:	08003941 	.word	0x08003941
 8003900:	08003939 	.word	0x08003939
 8003904:	08003939 	.word	0x08003939
 8003908:	08003939 	.word	0x08003939
 800390c:	08003939 	.word	0x08003939
 8003910:	08003931 	.word	0x08003931
 8003914:	08003941 	.word	0x08003941
 8003918:	08003941 	.word	0x08003941
 800391c:	08003941 	.word	0x08003941
 8003920:	08003939 	.word	0x08003939
 8003924:	08003939 	.word	0x08003939
 8003928:	08003939 	.word	0x08003939
 800392c:	08003939 	.word	0x08003939
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4a62      	ldr	r2, [pc, #392]	; (8003abc <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8003934:	601a      	str	r2, [r3, #0]
          break;
 8003936:	e00a      	b.n	800394e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4a5f      	ldr	r2, [pc, #380]	; (8003ab8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800393c:	601a      	str	r2, [r3, #0]
          break;
 800393e:	e006      	b.n	800394e <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4a59      	ldr	r2, [pc, #356]	; (8003aa8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003944:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	60fb      	str	r3, [r7, #12]
          break;
 800394c:	bf00      	nop
      }
      break;
 800394e:	e0a2      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003950:	7abb      	ldrb	r3, [r7, #10]
 8003952:	2b1b      	cmp	r3, #27
 8003954:	d842      	bhi.n	80039dc <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	080039d5 	.word	0x080039d5
 8003960:	080039d5 	.word	0x080039d5
 8003964:	080039d5 	.word	0x080039d5
 8003968:	080039d5 	.word	0x080039d5
 800396c:	080039cd 	.word	0x080039cd
 8003970:	080039dd 	.word	0x080039dd
 8003974:	080039dd 	.word	0x080039dd
 8003978:	080039dd 	.word	0x080039dd
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039d5 	.word	0x080039d5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039dd 	.word	0x080039dd
 8003990:	080039dd 	.word	0x080039dd
 8003994:	080039dd 	.word	0x080039dd
 8003998:	080039dd 	.word	0x080039dd
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039cd 	.word	0x080039cd
 80039b0:	080039dd 	.word	0x080039dd
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039d5 	.word	0x080039d5
 80039c0:	080039d5 	.word	0x080039d5
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039d5 	.word	0x080039d5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4a3c      	ldr	r2, [pc, #240]	; (8003ac0 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80039d0:	601a      	str	r2, [r3, #0]
          break;
 80039d2:	e00a      	b.n	80039ea <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80039d8:	601a      	str	r2, [r3, #0]
          break;
 80039da:	e006      	b.n	80039ea <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80039e0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	60fb      	str	r3, [r7, #12]
          break;
 80039e8:	bf00      	nop
      }
      break;
 80039ea:	e054      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80039ec:	7abb      	ldrb	r3, [r7, #10]
 80039ee:	2b1b      	cmp	r3, #27
 80039f0:	d842      	bhi.n	8003a78 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a71 	.word	0x08003a71
 80039fc:	08003a71 	.word	0x08003a71
 8003a00:	08003a71 	.word	0x08003a71
 8003a04:	08003a71 	.word	0x08003a71
 8003a08:	08003a69 	.word	0x08003a69
 8003a0c:	08003a79 	.word	0x08003a79
 8003a10:	08003a79 	.word	0x08003a79
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	08003a71 	.word	0x08003a71
 8003a24:	08003a71 	.word	0x08003a71
 8003a28:	08003a79 	.word	0x08003a79
 8003a2c:	08003a79 	.word	0x08003a79
 8003a30:	08003a79 	.word	0x08003a79
 8003a34:	08003a79 	.word	0x08003a79
 8003a38:	08003a71 	.word	0x08003a71
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003a71 	.word	0x08003a71
 8003a44:	08003a71 	.word	0x08003a71
 8003a48:	08003a69 	.word	0x08003a69
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a71 	.word	0x08003a71
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a71 	.word	0x08003a71
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8003a6c:	601a      	str	r2, [r3, #0]
          break;
 8003a6e:	e00a      	b.n	8003a86 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003a74:	601a      	str	r2, [r3, #0]
          break;
 8003a76:	e006      	b.n	8003a86 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003a7c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	60fb      	str	r3, [r7, #12]
          break;
 8003a84:	bf00      	nop
      }
      break;
 8003a86:	e006      	b.n	8003a96 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4a07      	ldr	r2, [pc, #28]	; (8003aa8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003a8c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	60fb      	str	r3, [r7, #12]
      break;
 8003a94:	bf00      	nop
  }

  return ret;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	41480000 	.word	0x41480000
 8003aa4:	3fcccccd 	.word	0x3fcccccd
 8003aa8:	bf800000 	.word	0xbf800000
 8003aac:	41c80000 	.word	0x41c80000
 8003ab0:	42480000 	.word	0x42480000
 8003ab4:	42c80000 	.word	0x42c80000
 8003ab8:	43480000 	.word	0x43480000
 8003abc:	43c80000 	.word	0x43c80000
 8003ac0:	44480000 	.word	0x44480000
 8003ac4:	44c80000 	.word	0x44c80000

08003ac8 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	ed97 0a00 	vldr	s0, [r7]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f805 	bl	8003aec <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003af8:	460b      	mov	r3, r1
 8003afa:	71fb      	strb	r3, [r7, #7]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d109      	bne.n	8003b1e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003b0a:	79ba      	ldrb	r2, [r7, #6]
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f98d 	bl	8003e34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	e008      	b.n	8003b30 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003b1e:	79ba      	ldrb	r2, [r7, #6]
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	4619      	mov	r1, r3
 8003b24:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa9f 	bl	800406c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003b2e:	4603      	mov	r3, r0
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	f107 020b 	add.w	r2, r7, #11
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fde7 	bl	8004724 <lis2dw12_full_scale_get>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	e027      	b.n	8003bb2 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d81b      	bhi.n	8003ba0 <LIS2DW12_ACC_GetFullScale+0x68>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <LIS2DW12_ACC_GetFullScale+0x38>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b89 	.word	0x08003b89
 8003b78:	08003b91 	.word	0x08003b91
 8003b7c:	08003b99 	.word	0x08003b99
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2202      	movs	r2, #2
 8003b84:	601a      	str	r2, [r3, #0]
      break;
 8003b86:	e013      	b.n	8003bb0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	601a      	str	r2, [r3, #0]
      break;
 8003b8e:	e00f      	b.n	8003bb0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2208      	movs	r2, #8
 8003b94:	601a      	str	r2, [r3, #0]
      break;
 8003b96:	e00b      	b.n	8003bb0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	601a      	str	r2, [r3, #0]
      break;
 8003b9e:	e007      	b.n	8003bb0 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	60fb      	str	r3, [r7, #12]
      break;
 8003bae:	bf00      	nop
  }

  return ret;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop

08003bbc <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	dd0b      	ble.n	8003be4 <LIS2DW12_ACC_SetFullScale+0x28>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	dd06      	ble.n	8003be0 <LIS2DW12_ACC_SetFullScale+0x24>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	dc01      	bgt.n	8003bdc <LIS2DW12_ACC_SetFullScale+0x20>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e004      	b.n	8003be6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e002      	b.n	8003be6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003be4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003be6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3320      	adds	r3, #32
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fd71 	bl	80046d8 <lis2dw12_full_scale_set>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	e000      	b.n	8003c04 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	f107 020b 	add.w	r2, r7, #11
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fb67 	bl	80042f8 <lis2dw12_power_mode_get>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	e089      	b.n	8003d4a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3320      	adds	r3, #32
 8003c3a:	f107 020c 	add.w	r2, r7, #12
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fda7 	bl	8004794 <lis2dw12_acceleration_raw_get>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	e07b      	b.n	8003d4a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8003c52:	7afb      	ldrb	r3, [r7, #11]
 8003c54:	2b1b      	cmp	r3, #27
 8003c56:	d873      	bhi.n	8003d40 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003cd1 	.word	0x08003cd1
 8003c64:	08003d09 	.word	0x08003d09
 8003c68:	08003d09 	.word	0x08003d09
 8003c6c:	08003d09 	.word	0x08003d09
 8003c70:	08003d09 	.word	0x08003d09
 8003c74:	08003d41 	.word	0x08003d41
 8003c78:	08003d41 	.word	0x08003d41
 8003c7c:	08003d41 	.word	0x08003d41
 8003c80:	08003cd1 	.word	0x08003cd1
 8003c84:	08003d09 	.word	0x08003d09
 8003c88:	08003d09 	.word	0x08003d09
 8003c8c:	08003d09 	.word	0x08003d09
 8003c90:	08003d41 	.word	0x08003d41
 8003c94:	08003d41 	.word	0x08003d41
 8003c98:	08003d41 	.word	0x08003d41
 8003c9c:	08003d41 	.word	0x08003d41
 8003ca0:	08003cd1 	.word	0x08003cd1
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003d09 	.word	0x08003d09
 8003cac:	08003d09 	.word	0x08003d09
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d41 	.word	0x08003d41
 8003cb8:	08003d41 	.word	0x08003d41
 8003cbc:	08003d41 	.word	0x08003d41
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003d09 	.word	0x08003d09
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d09 	.word	0x08003d09
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da00      	bge.n	8003cda <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003cd8:	330f      	adds	r3, #15
 8003cda:	111b      	asrs	r3, r3, #4
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da00      	bge.n	8003cec <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8003cea:	330f      	adds	r3, #15
 8003cec:	111b      	asrs	r3, r3, #4
 8003cee:	b21a      	sxth	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003cf4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	da00      	bge.n	8003cfe <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003cfc:	330f      	adds	r3, #15
 8003cfe:	111b      	asrs	r3, r3, #4
 8003d00:	b21a      	sxth	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	809a      	strh	r2, [r3, #4]
      break;
 8003d06:	e01f      	b.n	8003d48 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003d08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	da00      	bge.n	8003d12 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8003d10:	3303      	adds	r3, #3
 8003d12:	109b      	asrs	r3, r3, #2
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da00      	bge.n	8003d24 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8003d22:	3303      	adds	r3, #3
 8003d24:	109b      	asrs	r3, r3, #2
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003d2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da00      	bge.n	8003d36 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8003d34:	3303      	adds	r3, #3
 8003d36:	109b      	asrs	r3, r3, #2
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	809a      	strh	r2, [r3, #4]
      break;
 8003d3e:	e003      	b.n	8003d48 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	617b      	str	r3, [r7, #20]
      break;
 8003d46:	bf00      	nop
  }

  return ret;
 8003d48:	697b      	ldr	r3, [r7, #20]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop

08003d54 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8003d64:	f107 0310 	add.w	r3, r7, #16
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff4e 	bl	8003c0c <LIS2DW12_ACC_GetAxesRaw>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	e03c      	b.n	8003df6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fbd6 	bl	8003534 <LIS2DW12_ACC_GetSensitivity>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	e030      	b.n	8003df6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003d94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dac:	ee17 2a90 	vmov	r2, s15
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dcc:	ee17 2a90 	vmov	r2, s15
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003dd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dec:	ee17 2a90 	vmov	r2, s15
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	70fb      	strb	r3, [r7, #3]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f103 0020 	add.w	r0, r3, #32
 8003e14:	1cba      	adds	r2, r7, #2
 8003e16:	78f9      	ldrb	r1, [r7, #3]
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f000 fa07 	bl	800422c <lis2dw12_write_reg>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	e000      	b.n	8003e2c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e40:	460b      	mov	r3, r1
 8003e42:	71fb      	strb	r3, [r7, #7]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d80b      	bhi.n	8003e68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003e50:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003e95 	.word	0x08003e95
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003eed 	.word	0x08003eed
 8003e64:	08003f19 	.word	0x08003f19
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003e68:	79bb      	ldrb	r3, [r7, #6]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d002      	beq.n	8003e74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003e6e:	2304      	movs	r3, #4
 8003e70:	75fb      	strb	r3, [r7, #23]
          break;
 8003e72:	e002      	b.n	8003e7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003e74:	2314      	movs	r3, #20
 8003e76:	75fb      	strb	r3, [r7, #23]
          break;
 8003e78:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8003e7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e7e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8a:	d400      	bmi.n	8003e8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8003e8c:	e05a      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8003e8e:	4b6f      	ldr	r3, [pc, #444]	; (800404c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003e90:	60bb      	str	r3, [r7, #8]
      break;
 8003e92:	e057      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8003e94:	79bb      	ldrb	r3, [r7, #6]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d002      	beq.n	8003ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e9e:	e002      	b.n	8003ea6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003ea0:	2313      	movs	r3, #19
 8003ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8003ea4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eaa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	dc00      	bgt.n	8003eba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003eb8:	e044      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003eba:	4b66      	ldr	r3, [pc, #408]	; (8004054 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003ebc:	60bb      	str	r3, [r7, #8]
      break;
 8003ebe:	e041      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003ec0:	79bb      	ldrb	r3, [r7, #6]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d002      	beq.n	8003ecc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8003eca:	e002      	b.n	8003ed2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003ecc:	2312      	movs	r3, #18
 8003ece:	75fb      	strb	r3, [r7, #23]
          break;
 8003ed0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ed6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee2:	dc00      	bgt.n	8003ee6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8003ee4:	e02e      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003ee8:	60bb      	str	r3, [r7, #8]
      break;
 8003eea:	e02b      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8003eec:	79bb      	ldrb	r3, [r7, #6]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d002      	beq.n	8003ef8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ef6:	e002      	b.n	8003efe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003ef8:	2311      	movs	r3, #17
 8003efa:	75fb      	strb	r3, [r7, #23]
          break;
 8003efc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003efe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f02:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	dc00      	bgt.n	8003f12 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8003f10:	e018      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003f12:	4b50      	ldr	r3, [pc, #320]	; (8004054 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003f14:	60bb      	str	r3, [r7, #8]
      break;
 8003f16:	e015      	b.n	8003f44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003f18:	79bb      	ldrb	r3, [r7, #6]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d002      	beq.n	8003f24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
          break;
 8003f22:	e002      	b.n	8003f2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003f24:	2310      	movs	r3, #16
 8003f26:	75fb      	strb	r3, [r7, #23]
          break;
 8003f28:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003f2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f2e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	dc00      	bgt.n	8003f3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8003f3c:	e001      	b.n	8003f42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8003f3e:	4b45      	ldr	r3, [pc, #276]	; (8004054 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003f40:	60bb      	str	r3, [r7, #8]
      break;
 8003f42:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8003f44:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f48:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004058 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8003f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f54:	d801      	bhi.n	8003f5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e04d      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f5e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	d801      	bhi.n	8003f70 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e042      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f74:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f80:	d801      	bhi.n	8003f86 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003f82:	2303      	movs	r3, #3
 8003f84:	e037      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f8a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800405c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8003f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f96:	d801      	bhi.n	8003f9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	e02c      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003f9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004060 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8003fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fac:	d801      	bhi.n	8003fb2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e021      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003fb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fb6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	d801      	bhi.n	8003fc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003fc4:	2306      	movs	r3, #6
 8003fc6:	e016      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fcc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004064 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	d801      	bhi.n	8003fde <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8003fda:	2307      	movs	r3, #7
 8003fdc:	e00b      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fe2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004068 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8003fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fee:	d801      	bhi.n	8003ff4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	e000      	b.n	8003ff6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003ff4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8003ff6:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3320      	adds	r3, #32
 8003ffc:	7dba      	ldrb	r2, [r7, #22]
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fa33 	bl	800446c <lis2dw12_data_rate_set>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	e018      	b.n	8004044 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3320      	adds	r3, #32
 8004016:	7dfa      	ldrb	r2, [r7, #23]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f91e 	bl	800425c <lis2dw12_power_mode_set>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e00b      	b.n	8004044 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	79ba      	ldrb	r2, [r7, #6]
 800403e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	41480000 	.word	0x41480000
 8004050:	43480000 	.word	0x43480000
 8004054:	43480000 	.word	0x43480000
 8004058:	3fcccccd 	.word	0x3fcccccd
 800405c:	42480000 	.word	0x42480000
 8004060:	42c80000 	.word	0x42c80000
 8004064:	43c80000 	.word	0x43c80000
 8004068:	44480000 	.word	0x44480000

0800406c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	ed87 0a02 	vstr	s0, [r7, #8]
 8004078:	460b      	mov	r3, r1
 800407a:	71fb      	strb	r3, [r7, #7]
 800407c:	4613      	mov	r3, r2
 800407e:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	79fa      	ldrb	r2, [r7, #7]
 8004084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	79ba      	ldrb	r2, [r7, #6]
 800408c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8004090:	edd7 7a02 	vldr	s15, [r7, #8]
 8004094:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004154 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	d801      	bhi.n	80040a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80040a2:	4b2d      	ldr	r3, [pc, #180]	; (8004158 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80040a4:	e04d      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80040a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040aa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80040ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	d801      	bhi.n	80040bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80040b8:	4b28      	ldr	r3, [pc, #160]	; (800415c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80040ba:	e042      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80040bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80040c0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80040c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	d801      	bhi.n	80040d2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80040ce:	4b24      	ldr	r3, [pc, #144]	; (8004160 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80040d0:	e037      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80040d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040d6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004164 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80040da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e2:	d801      	bhi.n	80040e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80040e4:	4b20      	ldr	r3, [pc, #128]	; (8004168 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80040e6:	e02c      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 80040e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800416c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80040f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f8:	d801      	bhi.n	80040fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80040fc:	e021      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 80040fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004102:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004174 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410e:	d801      	bhi.n	8004114 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8004112:	e016      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8004114:	edd7 7a02 	vldr	s15, [r7, #8]
 8004118:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800417c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	d801      	bhi.n	800412a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004128:	e00b      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800412a:	edd7 7a02 	vldr	s15, [r7, #8]
 800412e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004184 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	d801      	bhi.n	8004140 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800413e:	e000      	b.n	8004142 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	3fcccccd 	.word	0x3fcccccd
 8004158:	3fcccccd 	.word	0x3fcccccd
 800415c:	41480000 	.word	0x41480000
 8004160:	41c80000 	.word	0x41c80000
 8004164:	42480000 	.word	0x42480000
 8004168:	42480000 	.word	0x42480000
 800416c:	42c80000 	.word	0x42c80000
 8004170:	42c80000 	.word	0x42c80000
 8004174:	43480000 	.word	0x43480000
 8004178:	43480000 	.word	0x43480000
 800417c:	43c80000 	.word	0x43c80000
 8004180:	43c80000 	.word	0x43c80000
 8004184:	44480000 	.word	0x44480000
 8004188:	44480000 	.word	0x44480000
 800418c:	44c80000 	.word	0x44c80000

08004190 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	460b      	mov	r3, r1
 800419e:	72fb      	strb	r3, [r7, #11]
 80041a0:	4613      	mov	r3, r2
 80041a2:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	695c      	ldr	r4, [r3, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	7b1b      	ldrb	r3, [r3, #12]
 80041b0:	b298      	uxth	r0, r3
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	b299      	uxth	r1, r3
 80041b6:	893b      	ldrh	r3, [r7, #8]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	47a0      	blx	r4
 80041bc:	4603      	mov	r3, r0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}

080041c6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80041c6:	b590      	push	{r4, r7, lr}
 80041c8:	b087      	sub	sp, #28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	461a      	mov	r2, r3
 80041d2:	460b      	mov	r3, r1
 80041d4:	72fb      	strb	r3, [r7, #11]
 80041d6:	4613      	mov	r3, r2
 80041d8:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	691c      	ldr	r4, [r3, #16]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	7b1b      	ldrb	r3, [r3, #12]
 80041e6:	b298      	uxth	r0, r3
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	b299      	uxth	r1, r3
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	47a0      	blx	r4
 80041f2:	4603      	mov	r3, r0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd90      	pop	{r4, r7, pc}

080041fc <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	461a      	mov	r2, r3
 8004208:	460b      	mov	r3, r1
 800420a:	72fb      	strb	r3, [r7, #11]
 800420c:	4613      	mov	r3, r2
 800420e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685c      	ldr	r4, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68d8      	ldr	r0, [r3, #12]
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	7af9      	ldrb	r1, [r7, #11]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	47a0      	blx	r4
 8004220:	6178      	str	r0, [r7, #20]

  return ret;
 8004222:	697b      	ldr	r3, [r7, #20]
}
 8004224:	4618      	mov	r0, r3
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}

0800422c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	461a      	mov	r2, r3
 8004238:	460b      	mov	r3, r1
 800423a:	72fb      	strb	r3, [r7, #11]
 800423c:	4613      	mov	r3, r2
 800423e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681c      	ldr	r4, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68d8      	ldr	r0, [r3, #12]
 8004248:	893b      	ldrh	r3, [r7, #8]
 800424a:	7af9      	ldrb	r1, [r7, #11]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	47a0      	blx	r4
 8004250:	6178      	str	r0, [r7, #20]

  return ret;
 8004252:	697b      	ldr	r3, [r7, #20]
}
 8004254:	4618      	mov	r0, r3
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd90      	pop	{r4, r7, pc}

0800425c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004268:	f107 0210 	add.w	r2, r7, #16
 800426c:	2301      	movs	r3, #1
 800426e:	2120      	movs	r1, #32
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffc3 	bl	80041fc <lis2dw12_read_reg>
 8004276:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	7c3b      	ldrb	r3, [r7, #16]
 800428a:	f362 0383 	bfi	r3, r2, #2, #2
 800428e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	b2da      	uxtb	r2, r3
 8004298:	7c3b      	ldrb	r3, [r7, #16]
 800429a:	f362 0301 	bfi	r3, r2, #0, #2
 800429e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80042a0:	f107 0210 	add.w	r2, r7, #16
 80042a4:	2301      	movs	r3, #1
 80042a6:	2120      	movs	r1, #32
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ffbf 	bl	800422c <lis2dw12_write_reg>
 80042ae:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	2301      	movs	r3, #1
 80042bc:	2125      	movs	r1, #37	; 0x25
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ff9c 	bl	80041fc <lis2dw12_read_reg>
 80042c4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	7b3b      	ldrb	r3, [r7, #12]
 80042d8:	f362 0382 	bfi	r3, r2, #2, #1
 80042dc:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80042de:	f107 020c 	add.w	r2, r7, #12
 80042e2:	2301      	movs	r3, #1
 80042e4:	2125      	movs	r1, #37	; 0x25
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ffa0 	bl	800422c <lis2dw12_write_reg>
 80042ec:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80042ee:	697b      	ldr	r3, [r7, #20]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004302:	f107 0210 	add.w	r2, r7, #16
 8004306:	2301      	movs	r3, #1
 8004308:	2120      	movs	r1, #32
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff76 	bl	80041fc <lis2dw12_read_reg>
 8004310:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 80a3 	bne.w	8004460 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800431a:	f107 020c 	add.w	r2, r7, #12
 800431e:	2301      	movs	r3, #1
 8004320:	2125      	movs	r1, #37	; 0x25
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ff6a 	bl	80041fc <lis2dw12_read_reg>
 8004328:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800432a:	7b3b      	ldrb	r3, [r7, #12]
 800432c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	011a      	lsls	r2, r3, #4
 8004334:	7c3b      	ldrb	r3, [r7, #16]
 8004336:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800433a:	b2db      	uxtb	r3, r3
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004340:	7c3a      	ldrb	r2, [r7, #16]
 8004342:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8004346:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004348:	4413      	add	r3, r2
 800434a:	2b1b      	cmp	r3, #27
 800434c:	f200 8084 	bhi.w	8004458 <lis2dw12_power_mode_get+0x160>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <lis2dw12_power_mode_get+0x60>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	080043e9 	.word	0x080043e9
 800435c:	080043e1 	.word	0x080043e1
 8004360:	080043d9 	.word	0x080043d9
 8004364:	080043d1 	.word	0x080043d1
 8004368:	080043c9 	.word	0x080043c9
 800436c:	08004459 	.word	0x08004459
 8004370:	08004459 	.word	0x08004459
 8004374:	08004459 	.word	0x08004459
 8004378:	08004409 	.word	0x08004409
 800437c:	08004401 	.word	0x08004401
 8004380:	080043f9 	.word	0x080043f9
 8004384:	080043f1 	.word	0x080043f1
 8004388:	08004459 	.word	0x08004459
 800438c:	08004459 	.word	0x08004459
 8004390:	08004459 	.word	0x08004459
 8004394:	08004459 	.word	0x08004459
 8004398:	08004431 	.word	0x08004431
 800439c:	08004429 	.word	0x08004429
 80043a0:	08004421 	.word	0x08004421
 80043a4:	08004419 	.word	0x08004419
 80043a8:	08004411 	.word	0x08004411
 80043ac:	08004459 	.word	0x08004459
 80043b0:	08004459 	.word	0x08004459
 80043b4:	08004459 	.word	0x08004459
 80043b8:	08004451 	.word	0x08004451
 80043bc:	08004449 	.word	0x08004449
 80043c0:	08004441 	.word	0x08004441
 80043c4:	08004439 	.word	0x08004439
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2204      	movs	r2, #4
 80043cc:	701a      	strb	r2, [r3, #0]
        break;
 80043ce:	e048      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2203      	movs	r2, #3
 80043d4:	701a      	strb	r2, [r3, #0]
        break;
 80043d6:	e044      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
        break;
 80043de:	e040      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
        break;
 80043e6:	e03c      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
        break;
 80043ee:	e038      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	220b      	movs	r2, #11
 80043f4:	701a      	strb	r2, [r3, #0]
        break;
 80043f6:	e034      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	220a      	movs	r2, #10
 80043fc:	701a      	strb	r2, [r3, #0]
        break;
 80043fe:	e030      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2209      	movs	r2, #9
 8004404:	701a      	strb	r2, [r3, #0]
        break;
 8004406:	e02c      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2208      	movs	r2, #8
 800440c:	701a      	strb	r2, [r3, #0]
        break;
 800440e:	e028      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2214      	movs	r2, #20
 8004414:	701a      	strb	r2, [r3, #0]
        break;
 8004416:	e024      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2213      	movs	r2, #19
 800441c:	701a      	strb	r2, [r3, #0]
        break;
 800441e:	e020      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2212      	movs	r2, #18
 8004424:	701a      	strb	r2, [r3, #0]
        break;
 8004426:	e01c      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2211      	movs	r2, #17
 800442c:	701a      	strb	r2, [r3, #0]
        break;
 800442e:	e018      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	701a      	strb	r2, [r3, #0]
        break;
 8004436:	e014      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	221b      	movs	r2, #27
 800443c:	701a      	strb	r2, [r3, #0]
        break;
 800443e:	e010      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	221a      	movs	r2, #26
 8004444:	701a      	strb	r2, [r3, #0]
        break;
 8004446:	e00c      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2219      	movs	r2, #25
 800444c:	701a      	strb	r2, [r3, #0]
        break;
 800444e:	e008      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2218      	movs	r2, #24
 8004454:	701a      	strb	r2, [r3, #0]
        break;
 8004456:	e004      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2204      	movs	r2, #4
 800445c:	701a      	strb	r2, [r3, #0]
        break;
 800445e:	e000      	b.n	8004462 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8004460:	bf00      	nop

  return ret;
 8004462:	697b      	ldr	r3, [r7, #20]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004478:	f107 0210 	add.w	r2, r7, #16
 800447c:	2301      	movs	r3, #1
 800447e:	2120      	movs	r1, #32
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff febb 	bl	80041fc <lis2dw12_read_reg>
 8004486:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	7c3b      	ldrb	r3, [r7, #16]
 8004498:	f362 1307 	bfi	r3, r2, #4, #4
 800449c:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800449e:	f107 0210 	add.w	r2, r7, #16
 80044a2:	2301      	movs	r3, #1
 80044a4:	2120      	movs	r1, #32
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fec0 	bl	800422c <lis2dw12_write_reg>
 80044ac:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80044b4:	f107 020c 	add.w	r2, r7, #12
 80044b8:	2301      	movs	r3, #1
 80044ba:	2122      	movs	r1, #34	; 0x22
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fe9d 	bl	80041fc <lis2dw12_read_reg>
 80044c2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d110      	bne.n	80044ec <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	7b3b      	ldrb	r3, [r7, #12]
 80044d6:	f362 0301 	bfi	r3, r2, #0, #2
 80044da:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80044dc:	f107 020c 	add.w	r2, r7, #12
 80044e0:	2301      	movs	r3, #1
 80044e2:	2122      	movs	r1, #34	; 0x22
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fea1 	bl	800422c <lis2dw12_write_reg>
 80044ea:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80044ec:	697b      	ldr	r3, [r7, #20]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004502:	f107 0210 	add.w	r2, r7, #16
 8004506:	2301      	movs	r3, #1
 8004508:	2120      	movs	r1, #32
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fe76 	bl	80041fc <lis2dw12_read_reg>
 8004510:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 80b3 	bne.w	8004680 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800451a:	f107 020c 	add.w	r2, r7, #12
 800451e:	2301      	movs	r3, #1
 8004520:	2122      	movs	r1, #34	; 0x22
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fe6a 	bl	80041fc <lis2dw12_read_reg>
 8004528:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800452a:	7b3b      	ldrb	r3, [r7, #12]
 800452c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004530:	b2db      	uxtb	r3, r3
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	7c3a      	ldrb	r2, [r7, #16]
 8004536:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	4413      	add	r3, r2
 800453e:	2b32      	cmp	r3, #50	; 0x32
 8004540:	f200 809a 	bhi.w	8004678 <lis2dw12_data_rate_get+0x180>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <lis2dw12_data_rate_get+0x54>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004619 	.word	0x08004619
 8004550:	08004621 	.word	0x08004621
 8004554:	08004629 	.word	0x08004629
 8004558:	08004631 	.word	0x08004631
 800455c:	08004639 	.word	0x08004639
 8004560:	08004641 	.word	0x08004641
 8004564:	08004649 	.word	0x08004649
 8004568:	08004651 	.word	0x08004651
 800456c:	08004659 	.word	0x08004659
 8004570:	08004661 	.word	0x08004661
 8004574:	08004679 	.word	0x08004679
 8004578:	08004679 	.word	0x08004679
 800457c:	08004679 	.word	0x08004679
 8004580:	08004679 	.word	0x08004679
 8004584:	08004679 	.word	0x08004679
 8004588:	08004679 	.word	0x08004679
 800458c:	08004679 	.word	0x08004679
 8004590:	08004679 	.word	0x08004679
 8004594:	08004671 	.word	0x08004671
 8004598:	08004679 	.word	0x08004679
 800459c:	08004679 	.word	0x08004679
 80045a0:	08004679 	.word	0x08004679
 80045a4:	08004679 	.word	0x08004679
 80045a8:	08004679 	.word	0x08004679
 80045ac:	08004679 	.word	0x08004679
 80045b0:	08004679 	.word	0x08004679
 80045b4:	08004679 	.word	0x08004679
 80045b8:	08004679 	.word	0x08004679
 80045bc:	08004679 	.word	0x08004679
 80045c0:	08004679 	.word	0x08004679
 80045c4:	08004679 	.word	0x08004679
 80045c8:	08004679 	.word	0x08004679
 80045cc:	08004679 	.word	0x08004679
 80045d0:	08004679 	.word	0x08004679
 80045d4:	08004679 	.word	0x08004679
 80045d8:	08004679 	.word	0x08004679
 80045dc:	08004679 	.word	0x08004679
 80045e0:	08004679 	.word	0x08004679
 80045e4:	08004679 	.word	0x08004679
 80045e8:	08004679 	.word	0x08004679
 80045ec:	08004679 	.word	0x08004679
 80045f0:	08004679 	.word	0x08004679
 80045f4:	08004679 	.word	0x08004679
 80045f8:	08004679 	.word	0x08004679
 80045fc:	08004679 	.word	0x08004679
 8004600:	08004679 	.word	0x08004679
 8004604:	08004679 	.word	0x08004679
 8004608:	08004679 	.word	0x08004679
 800460c:	08004679 	.word	0x08004679
 8004610:	08004679 	.word	0x08004679
 8004614:	08004669 	.word	0x08004669
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
        break;
 800461e:	e030      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
        break;
 8004626:	e02c      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2202      	movs	r2, #2
 800462c:	701a      	strb	r2, [r3, #0]
        break;
 800462e:	e028      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2203      	movs	r2, #3
 8004634:	701a      	strb	r2, [r3, #0]
        break;
 8004636:	e024      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2204      	movs	r2, #4
 800463c:	701a      	strb	r2, [r3, #0]
        break;
 800463e:	e020      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2205      	movs	r2, #5
 8004644:	701a      	strb	r2, [r3, #0]
        break;
 8004646:	e01c      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2206      	movs	r2, #6
 800464c:	701a      	strb	r2, [r3, #0]
        break;
 800464e:	e018      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2207      	movs	r2, #7
 8004654:	701a      	strb	r2, [r3, #0]
        break;
 8004656:	e014      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	701a      	strb	r2, [r3, #0]
        break;
 800465e:	e010      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2209      	movs	r2, #9
 8004664:	701a      	strb	r2, [r3, #0]
        break;
 8004666:	e00c      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2232      	movs	r2, #50	; 0x32
 800466c:	701a      	strb	r2, [r3, #0]
        break;
 800466e:	e008      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2212      	movs	r2, #18
 8004674:	701a      	strb	r2, [r3, #0]
        break;
 8004676:	e004      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
        break;
 800467e:	e000      	b.n	8004682 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8004680:	bf00      	nop

  return ret;
 8004682:	697b      	ldr	r3, [r7, #20]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004698:	f107 0208 	add.w	r2, r7, #8
 800469c:	2301      	movs	r3, #1
 800469e:	2121      	movs	r1, #33	; 0x21
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff fdab 	bl	80041fc <lis2dw12_read_reg>
 80046a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	7a3b      	ldrb	r3, [r7, #8]
 80046b8:	f362 03c3 	bfi	r3, r2, #3, #1
 80046bc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80046be:	f107 0208 	add.w	r2, r7, #8
 80046c2:	2301      	movs	r3, #1
 80046c4:	2121      	movs	r1, #33	; 0x21
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fdb0 	bl	800422c <lis2dw12_write_reg>
 80046cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80046e4:	f107 0208 	add.w	r2, r7, #8
 80046e8:	2301      	movs	r3, #1
 80046ea:	2125      	movs	r1, #37	; 0x25
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff fd85 	bl	80041fc <lis2dw12_read_reg>
 80046f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	b2da      	uxtb	r2, r3
 8004702:	7a3b      	ldrb	r3, [r7, #8]
 8004704:	f362 1305 	bfi	r3, r2, #4, #2
 8004708:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800470a:	f107 0208 	add.w	r2, r7, #8
 800470e:	2301      	movs	r3, #1
 8004710:	2125      	movs	r1, #37	; 0x25
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff fd8a 	bl	800422c <lis2dw12_write_reg>
 8004718:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800472e:	f107 0208 	add.w	r2, r7, #8
 8004732:	2301      	movs	r3, #1
 8004734:	2125      	movs	r1, #37	; 0x25
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fd60 	bl	80041fc <lis2dw12_read_reg>
 800473c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800473e:	7a3b      	ldrb	r3, [r7, #8]
 8004740:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d81a      	bhi.n	8004780 <lis2dw12_full_scale_get+0x5c>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <lis2dw12_full_scale_get+0x2c>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004761 	.word	0x08004761
 8004754:	08004769 	.word	0x08004769
 8004758:	08004771 	.word	0x08004771
 800475c:	08004779 	.word	0x08004779
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
      break;
 8004766:	e00f      	b.n	8004788 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
      break;
 800476e:	e00b      	b.n	8004788 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2202      	movs	r2, #2
 8004774:	701a      	strb	r2, [r3, #0]
      break;
 8004776:	e007      	b.n	8004788 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2203      	movs	r2, #3
 800477c:	701a      	strb	r2, [r3, #0]
      break;
 800477e:	e003      	b.n	8004788 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
      break;
 8004786:	bf00      	nop
  }

  return ret;
 8004788:	68fb      	ldr	r3, [r7, #12]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800479e:	f107 020c 	add.w	r2, r7, #12
 80047a2:	2306      	movs	r3, #6
 80047a4:	2128      	movs	r1, #40	; 0x28
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fd28 	bl	80041fc <lis2dw12_read_reg>
 80047ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80047ae:	7b7b      	ldrb	r3, [r7, #13]
 80047b0:	b21a      	sxth	r2, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	7b3b      	ldrb	r3, [r7, #12]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	3302      	adds	r3, #2
 80047d6:	b212      	sxth	r2, r2
 80047d8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3302      	adds	r3, #2
 80047de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	7bbb      	ldrb	r3, [r7, #14]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	3302      	adds	r3, #2
 80047f4:	b212      	sxth	r2, r2
 80047f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80047f8:	7c7a      	ldrb	r2, [r7, #17]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	3304      	adds	r3, #4
 80047fe:	b212      	sxth	r2, r2
 8004800:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480a:	b29b      	uxth	r3, r3
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	b29a      	uxth	r2, r3
 8004810:	7c3b      	ldrb	r3, [r7, #16]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4413      	add	r3, r2
 8004816:	b29a      	uxth	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3304      	adds	r3, #4
 800481c:	b212      	sxth	r2, r2
 800481e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004820:	697b      	ldr	r3, [r7, #20]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004834:	2301      	movs	r3, #1
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	210f      	movs	r1, #15
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fcde 	bl	80041fc <lis2dw12_read_reg>
 8004840:	60f8      	str	r0, [r7, #12]

  return ret;
 8004842:	68fb      	ldr	r3, [r7, #12]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004858:	f107 0208 	add.w	r2, r7, #8
 800485c:	2301      	movs	r3, #1
 800485e:	2121      	movs	r1, #33	; 0x21
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff fccb 	bl	80041fc <lis2dw12_read_reg>
 8004866:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	b2da      	uxtb	r2, r3
 8004876:	7a3b      	ldrb	r3, [r7, #8]
 8004878:	f362 0382 	bfi	r3, r2, #2, #1
 800487c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800487e:	f107 0208 	add.w	r2, r7, #8
 8004882:	2301      	movs	r3, #1
 8004884:	2121      	movs	r1, #33	; 0x21
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fcd0 	bl	800422c <lis2dw12_write_reg>
 800488c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80048a4:	f107 0208 	add.w	r2, r7, #8
 80048a8:	2301      	movs	r3, #1
 80048aa:	212e      	movs	r1, #46	; 0x2e
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fca5 	bl	80041fc <lis2dw12_read_reg>
 80048b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	7a3b      	ldrb	r3, [r7, #8]
 80048c4:	f362 1347 	bfi	r3, r2, #5, #3
 80048c8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80048ca:	f107 0208 	add.w	r2, r7, #8
 80048ce:	2301      	movs	r3, #1
 80048d0:	212e      	movs	r1, #46	; 0x2e
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fcaa 	bl	800422c <lis2dw12_write_reg>
 80048d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e067      	b.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	7b1a      	ldrb	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a28      	ldr	r2, [pc, #160]	; (80049dc <LIS2MDL_RegisterBusIO+0xf8>)
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <LIS2MDL_RegisterBusIO+0xfc>)
 8004942:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e036      	b.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4798      	blx	r3
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800496e:	f04f 33ff 	mov.w	r3, #4294967295
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e02c      	b.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d028      	beq.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004984:	2b00      	cmp	r3, #0
 8004986:	d123      	bne.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10d      	bne.n	80049ac <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004990:	2334      	movs	r3, #52	; 0x34
 8004992:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004994:	7afb      	ldrb	r3, [r7, #11]
 8004996:	461a      	mov	r2, r3
 8004998:	2162      	movs	r1, #98	; 0x62
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fb1b 	bl	8004fd6 <LIS2MDL_Write_Reg>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d014      	beq.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e012      	b.n	80049d2 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d101      	bne.n	80049b8 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	e00c      	b.n	80049d2 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3320      	adds	r3, #32
 80049bc:	2101      	movs	r1, #1
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 ff70 	bl	80058a4 <lis2mdl_i2c_interface_set>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	e000      	b.n	80049d2 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	0800502d 	.word	0x0800502d
 80049e0:	080050af 	.word	0x080050af

080049e4 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d144      	bne.n	8004a7e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80049f4:	f107 0208 	add.w	r2, r7, #8
 80049f8:	2301      	movs	r3, #1
 80049fa:	2162      	movs	r1, #98	; 0x62
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb97 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	e06c      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a0e:	f107 020c 	add.w	r2, r7, #12
 8004a12:	2301      	movs	r3, #1
 8004a14:	2160      	movs	r1, #96	; 0x60
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fb8a 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295
 8004a26:	e05f      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004a28:	7a3b      	ldrb	r3, [r7, #8]
 8004a2a:	f043 0310 	orr.w	r3, r3, #16
 8004a2e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004a30:	7a3b      	ldrb	r3, [r7, #8]
 8004a32:	f36f 0341 	bfc	r3, #1, #1
 8004a36:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004a38:	7b3b      	ldrb	r3, [r7, #12]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f362 0301 	bfi	r3, r2, #0, #2
 8004a40:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004a42:	7b3b      	ldrb	r3, [r7, #12]
 8004a44:	f043 030c 	orr.w	r3, r3, #12
 8004a48:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004a4a:	f107 0208 	add.w	r2, r7, #8
 8004a4e:	2301      	movs	r3, #1
 8004a50:	2162      	movs	r1, #98	; 0x62
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fcab 	bl	80053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	e041      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a64:	f107 020c 	add.w	r2, r7, #12
 8004a68:	2301      	movs	r3, #1
 8004a6a:	2160      	movs	r1, #96	; 0x60
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fc9e 	bl	80053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d032      	beq.n	8004ade <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	e034      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3320      	adds	r3, #32
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fe65 	bl	8005754 <lis2mdl_block_data_update_set>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	e028      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3320      	adds	r3, #32
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fdd4 	bl	800564a <lis2mdl_operating_mode_set>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aac:	e01c      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3320      	adds	r3, #32
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fdee 	bl	8005696 <lis2mdl_data_rate_set>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac4:	e010      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3320      	adds	r3, #32
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fec3 	bl	8005858 <lis2mdl_self_test_set>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e004      	b.n	8004ae8 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f8a5 	bl	8004c48 <LIS2MDL_MAG_Disable>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004b04:	f04f 33ff 	mov.w	r3, #4294967295
 8004b08:	e004      	b.n	8004b14 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d10b      	bne.n	8004b46 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004b2e:	2301      	movs	r3, #1
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	214f      	movs	r1, #79	; 0x4f
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fafb 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00e      	beq.n	8004b5e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295
 8004b44:	e00c      	b.n	8004b60 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3320      	adds	r3, #32
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fe72 	bl	8005836 <lis2mdl_device_id_get>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	e000      	b.n	8004b60 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2232      	movs	r2, #50	; 0x32
 8004b9a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <LIS2MDL_GetCapabilities+0x58>)
 8004bb0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	42c80000 	.word	0x42c80000

08004bc4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e032      	b.n	8004c40 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d11d      	bne.n	8004c1e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004be2:	f107 020c 	add.w	r2, r7, #12
 8004be6:	2301      	movs	r3, #1
 8004be8:	2160      	movs	r1, #96	; 0x60
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 faa0 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	e021      	b.n	8004c40 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004bfc:	7b3b      	ldrb	r3, [r7, #12]
 8004bfe:	f36f 0301 	bfc	r3, #0, #2
 8004c02:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c04:	f107 020c 	add.w	r2, r7, #12
 8004c08:	2301      	movs	r3, #1
 8004c0a:	2160      	movs	r1, #96	; 0x60
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fbce 	bl	80053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00e      	beq.n	8004c36 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	e010      	b.n	8004c40 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3320      	adds	r3, #32
 8004c22:	2100      	movs	r1, #0
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fd10 	bl	800564a <lis2mdl_operating_mode_set>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e004      	b.n	8004c40 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e033      	b.n	8004cc6 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d11e      	bne.n	8004ca4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c66:	f107 020c 	add.w	r2, r7, #12
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	2160      	movs	r1, #96	; 0x60
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa5e 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	e022      	b.n	8004cc6 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004c80:	7b3b      	ldrb	r3, [r7, #12]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f362 0301 	bfi	r3, r2, #0, #2
 8004c88:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c8a:	f107 020c 	add.w	r2, r7, #12
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2160      	movs	r1, #96	; 0x60
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fb8b 	bl	80053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00e      	beq.n	8004cbc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca2:	e010      	b.n	8004cc6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3320      	adds	r3, #32
 8004ca8:	2102      	movs	r1, #2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fccd 	bl	800564a <lis2mdl_operating_mode_set>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	e004      	b.n	8004cc6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004cde:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3320      	adds	r3, #32
 8004d02:	f107 020b 	add.w	r2, r7, #11
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fceb 	bl	80056e4 <lis2mdl_data_rate_get>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295
 8004d18:	e023      	b.n	8004d62 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d81b      	bhi.n	8004d58 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d41 	.word	0x08004d41
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d51 	.word	0x08004d51
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004d3c:	601a      	str	r2, [r3, #0]
      break;
 8004d3e:	e00f      	b.n	8004d60 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004d44:	601a      	str	r2, [r3, #0]
      break;
 8004d46:	e00b      	b.n	8004d60 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004d4c:	601a      	str	r2, [r3, #0]
      break;
 8004d4e:	e007      	b.n	8004d60 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004d54:	601a      	str	r2, [r3, #0]
      break;
 8004d56:	e003      	b.n	8004d60 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	60fb      	str	r3, [r7, #12]
      break;
 8004d5e:	bf00      	nop
  }

  return ret;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	41200000 	.word	0x41200000
 8004d70:	41a00000 	.word	0x41a00000
 8004d74:	42480000 	.word	0x42480000
 8004d78:	42c80000 	.word	0x42c80000

08004d7c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004d88:	edd7 7a00 	vldr	s15, [r7]
 8004d8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d98:	d801      	bhi.n	8004d9e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e016      	b.n	8004dcc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004d9e:	edd7 7a00 	vldr	s15, [r7]
 8004da2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dae:	d801      	bhi.n	8004db4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e00b      	b.n	8004dcc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004db4:	edd7 7a00 	vldr	s15, [r7]
 8004db8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e40 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	d801      	bhi.n	8004dca <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e000      	b.n	8004dcc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004dca:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004dcc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d121      	bne.n	8004e1a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004dd6:	f107 020c 	add.w	r2, r7, #12
 8004dda:	2301      	movs	r3, #1
 8004ddc:	2160      	movs	r1, #96	; 0x60
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9a6 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295
 8004dee:	e022      	b.n	8004e36 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	7b3b      	ldrb	r3, [r7, #12]
 8004dfa:	f362 0383 	bfi	r3, r2, #2, #2
 8004dfe:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e00:	f107 020c 	add.w	r2, r7, #12
 8004e04:	2301      	movs	r3, #1
 8004e06:	2160      	movs	r1, #96	; 0x60
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fad0 	bl	80053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00f      	beq.n	8004e34 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	e00d      	b.n	8004e36 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3320      	adds	r3, #32
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fc37 	bl	8005696 <lis2mdl_data_rate_set>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	e000      	b.n	8004e36 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	42480000 	.word	0x42480000

08004e44 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2232      	movs	r2, #50	; 0x32
 8004e52:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3320      	adds	r3, #32
 8004e88:	f107 0208 	add.w	r2, r7, #8
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fc86 	bl	80057a0 <lis2mdl_magnetic_raw_get>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	e00c      	b.n	8004eba <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ea0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004ea8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004eb0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d137      	bne.n	8004f44 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004ed4:	f107 0218 	add.w	r2, r7, #24
 8004ed8:	2306      	movs	r3, #6
 8004eda:	2168      	movs	r1, #104	; 0x68
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f927 	bl	8005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eec:	e06f      	b.n	8004fce <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004eee:	7e7b      	ldrb	r3, [r7, #25]
 8004ef0:	b21b      	sxth	r3, r3
 8004ef2:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004ef4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	7e3b      	ldrb	r3, [r7, #24]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b21b      	sxth	r3, r3
 8004f08:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004f0a:	7efb      	ldrb	r3, [r7, #27]
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004f10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	7ebb      	ldrb	r3, [r7, #26]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4413      	add	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b21b      	sxth	r3, r3
 8004f24:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004f26:	7f7b      	ldrb	r3, [r7, #29]
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004f2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	7f3b      	ldrb	r3, [r7, #28]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	b21b      	sxth	r3, r3
 8004f40:	82bb      	strh	r3, [r7, #20]
 8004f42:	e00d      	b.n	8004f60 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3320      	adds	r3, #32
 8004f48:	f107 0210 	add.w	r2, r7, #16
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fc26 	bl	80057a0 <lis2mdl_magnetic_raw_get>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5e:	e036      	b.n	8004fce <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff feb1 	bl	8004cce <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004f6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f84:	ee17 2a90 	vmov	r2, s15
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004f8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f98:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa4:	ee17 2a90 	vmov	r2, s15
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004fac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc4:	ee17 2a90 	vmov	r2, s15
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d10b      	bne.n	8005006 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004fee:	1cba      	adds	r2, r7, #2
 8004ff0:	78f9      	ldrb	r1, [r7, #3]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9da 	bl	80053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
 8005004:	e00e      	b.n	8005024 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f103 0020 	add.w	r0, r3, #32
 800500c:	1cba      	adds	r2, r7, #2
 800500e:	78f9      	ldrb	r1, [r7, #3]
 8005010:	2301      	movs	r3, #1
 8005012:	f000 fb02 	bl	800561a <lis2mdl_write_reg>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	e000      	b.n	8005024 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	461a      	mov	r2, r3
 8005038:	460b      	mov	r3, r1
 800503a:	72fb      	strb	r3, [r7, #11]
 800503c:	4613      	mov	r3, r2
 800503e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10e      	bne.n	800506a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	695c      	ldr	r4, [r3, #20]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	7b1b      	ldrb	r3, [r3, #12]
 8005054:	b298      	uxth	r0, r3
 8005056:	7afb      	ldrb	r3, [r7, #11]
 8005058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800505c:	b2db      	uxtb	r3, r3
 800505e:	b299      	uxth	r1, r3
 8005060:	893b      	ldrh	r3, [r7, #8]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	47a0      	blx	r4
 8005066:	4603      	mov	r3, r0
 8005068:	e01d      	b.n	80050a6 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d10b      	bne.n	800508a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	695c      	ldr	r4, [r3, #20]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	7b1b      	ldrb	r3, [r3, #12]
 800507a:	b298      	uxth	r0, r3
 800507c:	7afb      	ldrb	r3, [r7, #11]
 800507e:	b299      	uxth	r1, r3
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	47a0      	blx	r4
 8005086:	4603      	mov	r3, r0
 8005088:	e00d      	b.n	80050a6 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	695c      	ldr	r4, [r3, #20]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	7b1b      	ldrb	r3, [r3, #12]
 8005092:	b298      	uxth	r0, r3
 8005094:	7afb      	ldrb	r3, [r7, #11]
 8005096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509a:	b2db      	uxtb	r3, r3
 800509c:	b299      	uxth	r1, r3
 800509e:	893b      	ldrh	r3, [r7, #8]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	47a0      	blx	r4
 80050a4:	4603      	mov	r3, r0
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd90      	pop	{r4, r7, pc}

080050ae <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80050ae:	b590      	push	{r4, r7, lr}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	461a      	mov	r2, r3
 80050ba:	460b      	mov	r3, r1
 80050bc:	72fb      	strb	r3, [r7, #11]
 80050be:	4613      	mov	r3, r2
 80050c0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10e      	bne.n	80050ec <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	691c      	ldr	r4, [r3, #16]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	7b1b      	ldrb	r3, [r3, #12]
 80050d6:	b298      	uxth	r0, r3
 80050d8:	7afb      	ldrb	r3, [r7, #11]
 80050da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	b299      	uxth	r1, r3
 80050e2:	893b      	ldrh	r3, [r7, #8]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	47a0      	blx	r4
 80050e8:	4603      	mov	r3, r0
 80050ea:	e01d      	b.n	8005128 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d10b      	bne.n	800510c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	691c      	ldr	r4, [r3, #16]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	7b1b      	ldrb	r3, [r3, #12]
 80050fc:	b298      	uxth	r0, r3
 80050fe:	7afb      	ldrb	r3, [r7, #11]
 8005100:	b299      	uxth	r1, r3
 8005102:	893b      	ldrh	r3, [r7, #8]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	47a0      	blx	r4
 8005108:	4603      	mov	r3, r0
 800510a:	e00d      	b.n	8005128 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	691c      	ldr	r4, [r3, #16]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	7b1b      	ldrb	r3, [r3, #12]
 8005114:	b298      	uxth	r0, r3
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511c:	b2db      	uxtb	r3, r3
 800511e:	b299      	uxth	r1, r3
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	47a0      	blx	r4
 8005126:	4603      	mov	r3, r0
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}

08005130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	461a      	mov	r2, r3
 800513c:	460b      	mov	r3, r1
 800513e:	72fb      	strb	r3, [r7, #11]
 8005140:	4613      	mov	r3, r2
 8005142:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005156:	233d      	movs	r3, #61	; 0x3d
 8005158:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800515a:	2315      	movs	r3, #21
 800515c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005160:	2316      	movs	r3, #22
 8005162:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005166:	2317      	movs	r3, #23
 8005168:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 800516c:	2314      	movs	r3, #20
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005172:	2344      	movs	r3, #68	; 0x44
 8005174:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8005176:	2302      	movs	r3, #2
 8005178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800517c:	2339      	movs	r3, #57	; 0x39
 800517e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005188:	2329      	movs	r3, #41	; 0x29
 800518a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800518e:	231e      	movs	r3, #30
 8005190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 800519a:	893b      	ldrh	r3, [r7, #8]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80051a0:	2310      	movs	r3, #16
 80051a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f103 0020 	add.w	r0, r3, #32
 80051b8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80051bc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80051c0:	2301      	movs	r3, #1
 80051c2:	f000 fa2a 	bl	800561a <lis2mdl_write_reg>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295
 80051d0:	e0e9      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f103 0020 	add.w	r0, r3, #32
 80051d8:	f107 021f 	add.w	r2, r7, #31
 80051dc:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80051e0:	2301      	movs	r3, #1
 80051e2:	f000 fa1a 	bl	800561a <lis2mdl_write_reg>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80051ec:	f04f 33ff 	mov.w	r3, #4294967295
 80051f0:	e0d9      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f103 0020 	add.w	r0, r3, #32
 80051f8:	f107 020b 	add.w	r2, r7, #11
 80051fc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005200:	2301      	movs	r3, #1
 8005202:	f000 fa0a 	bl	800561a <lis2mdl_write_reg>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	e0c9      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f103 0020 	add.w	r0, r3, #32
 8005218:	f107 021d 	add.w	r2, r7, #29
 800521c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005220:	2301      	movs	r3, #1
 8005222:	f000 f9fa 	bl	800561a <lis2mdl_write_reg>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800522c:	f04f 33ff 	mov.w	r3, #4294967295
 8005230:	e0b9      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f103 0020 	add.w	r0, r3, #32
 8005238:	f107 021e 	add.w	r2, r7, #30
 800523c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8005240:	2301      	movs	r3, #1
 8005242:	f000 f9ea 	bl	800561a <lis2mdl_write_reg>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800524c:	f04f 33ff 	mov.w	r3, #4294967295
 8005250:	e0a9      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f103 0020 	add.w	r0, r3, #32
 8005258:	f107 0220 	add.w	r2, r7, #32
 800525c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005260:	2301      	movs	r3, #1
 8005262:	f000 f9da 	bl	800561a <lis2mdl_write_reg>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	e099      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f103 0020 	add.w	r0, r3, #32
 8005278:	f107 021c 	add.w	r2, r7, #28
 800527c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005280:	2301      	movs	r3, #1
 8005282:	f000 f9b2 	bl	80055ea <lis2mdl_read_reg>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800528c:	f04f 33ff 	mov.w	r3, #4294967295
 8005290:	e089      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005292:	7f3b      	ldrb	r3, [r7, #28]
 8005294:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005298:	429a      	cmp	r2, r3
 800529a:	d102      	bne.n	80052a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800529c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80052a0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f103 0020 	add.w	r0, r3, #32
 80052a8:	f107 021c 	add.w	r2, r7, #28
 80052ac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80052b0:	2301      	movs	r3, #1
 80052b2:	f000 f9b2 	bl	800561a <lis2mdl_write_reg>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80052bc:	f04f 33ff 	mov.w	r3, #4294967295
 80052c0:	e071      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f103 0020 	add.w	r0, r3, #32
 80052c8:	f107 0214 	add.w	r2, r7, #20
 80052cc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80052d0:	2306      	movs	r3, #6
 80052d2:	f000 f98a 	bl	80055ea <lis2mdl_read_reg>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	e061      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f103 0020 	add.w	r0, r3, #32
 80052e8:	f107 021b 	add.w	r2, r7, #27
 80052ec:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80052f0:	2301      	movs	r3, #1
 80052f2:	f000 f97a 	bl	80055ea <lis2mdl_read_reg>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	e051      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005302:	7efa      	ldrb	r2, [r7, #27]
 8005304:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005308:	4013      	ands	r3, r2
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005310:	429a      	cmp	r2, r3
 8005312:	d1e6      	bne.n	80052e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f103 0020 	add.w	r0, r3, #32
 800531a:	f107 021b 	add.w	r2, r7, #27
 800531e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8005322:	2301      	movs	r3, #1
 8005324:	f000 f961 	bl	80055ea <lis2mdl_read_reg>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	e038      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005334:	7efa      	ldrb	r2, [r7, #27]
 8005336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800533a:	4013      	ands	r3, r2
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005342:	429a      	cmp	r2, r3
 8005344:	d1e6      	bne.n	8005314 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f103 0020 	add.w	r0, r3, #32
 800534c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005350:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005354:	2301      	movs	r3, #1
 8005356:	f000 f960 	bl	800561a <lis2mdl_write_reg>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005360:	f04f 33ff 	mov.w	r3, #4294967295
 8005364:	e01f      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f103 0020 	add.w	r0, r3, #32
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	f000 f939 	bl	80055ea <lis2mdl_read_reg>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	e010      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f103 0020 	add.w	r0, r3, #32
 800538a:	f107 0220 	add.w	r2, r7, #32
 800538e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005392:	2301      	movs	r3, #1
 8005394:	f000 f941 	bl	800561a <lis2mdl_write_reg>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	e000      	b.n	80053a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3730      	adds	r7, #48	; 0x30
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b08c      	sub	sp, #48	; 0x30
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	461a      	mov	r2, r3
 80053ba:	460b      	mov	r3, r1
 80053bc:	72fb      	strb	r3, [r7, #11]
 80053be:	4613      	mov	r3, r2
 80053c0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80053c8:	2340      	movs	r3, #64	; 0x40
 80053ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80053d4:	233c      	movs	r3, #60	; 0x3c
 80053d6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80053d8:	2315      	movs	r3, #21
 80053da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80053de:	2316      	movs	r3, #22
 80053e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80053e4:	2317      	movs	r3, #23
 80053e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80053ee:	2314      	movs	r3, #20
 80053f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80053f4:	2344      	movs	r3, #68	; 0x44
 80053f6:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80053f8:	2339      	movs	r3, #57	; 0x39
 80053fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005404:	2329      	movs	r3, #41	; 0x29
 8005406:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800540a:	231e      	movs	r3, #30
 800540c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005416:	2310      	movs	r3, #16
 8005418:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005422:	2340      	movs	r3, #64	; 0x40
 8005424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005428:	230e      	movs	r3, #14
 800542a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f103 0020 	add.w	r0, r3, #32
 8005434:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005438:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800543c:	2301      	movs	r3, #1
 800543e:	f000 f8ec 	bl	800561a <lis2mdl_write_reg>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
 800544c:	e0c9      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f103 0020 	add.w	r0, r3, #32
 8005454:	f107 021f 	add.w	r2, r7, #31
 8005458:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800545c:	2301      	movs	r3, #1
 800545e:	f000 f8dc 	bl	800561a <lis2mdl_write_reg>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005468:	f04f 33ff 	mov.w	r3, #4294967295
 800546c:	e0b9      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f103 0020 	add.w	r0, r3, #32
 8005474:	f107 020b 	add.w	r2, r7, #11
 8005478:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800547c:	2301      	movs	r3, #1
 800547e:	f000 f8cc 	bl	800561a <lis2mdl_write_reg>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	e0a9      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f103 0020 	add.w	r0, r3, #32
 8005494:	f107 021e 	add.w	r2, r7, #30
 8005498:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800549c:	2301      	movs	r3, #1
 800549e:	f000 f8bc 	bl	800561a <lis2mdl_write_reg>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	e099      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f103 0020 	add.w	r0, r3, #32
 80054b4:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80054b8:	2301      	movs	r3, #1
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	f000 f8ad 	bl	800561a <lis2mdl_write_reg>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e08a      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f103 0020 	add.w	r0, r3, #32
 80054d2:	f107 021d 	add.w	r2, r7, #29
 80054d6:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80054da:	2301      	movs	r3, #1
 80054dc:	f000 f89d 	bl	800561a <lis2mdl_write_reg>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	e07a      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f103 0020 	add.w	r0, r3, #32
 80054f2:	f107 0220 	add.w	r2, r7, #32
 80054f6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80054fa:	2301      	movs	r3, #1
 80054fc:	f000 f88d 	bl	800561a <lis2mdl_write_reg>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005506:	f04f 33ff 	mov.w	r3, #4294967295
 800550a:	e06a      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f103 0020 	add.w	r0, r3, #32
 8005512:	f107 021c 	add.w	r2, r7, #28
 8005516:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800551a:	2301      	movs	r3, #1
 800551c:	f000 f865 	bl	80055ea <lis2mdl_read_reg>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005526:	f04f 33ff 	mov.w	r3, #4294967295
 800552a:	e05a      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800552c:	7f3b      	ldrb	r3, [r7, #28]
 800552e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005532:	429a      	cmp	r2, r3
 8005534:	d102      	bne.n	800553c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f103 0020 	add.w	r0, r3, #32
 8005542:	f107 021c 	add.w	r2, r7, #28
 8005546:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800554a:	2301      	movs	r3, #1
 800554c:	f000 f865 	bl	800561a <lis2mdl_write_reg>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	e042      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 0020 	add.w	r0, r3, #32
 8005562:	f107 0214 	add.w	r2, r7, #20
 8005566:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800556a:	2306      	movs	r3, #6
 800556c:	f000 f83d 	bl	80055ea <lis2mdl_read_reg>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e032      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f103 0020 	add.w	r0, r3, #32
 8005582:	f107 021b 	add.w	r2, r7, #27
 8005586:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800558a:	2301      	movs	r3, #1
 800558c:	f000 f82d 	bl	80055ea <lis2mdl_read_reg>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	e022      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800559c:	7efa      	ldrb	r2, [r7, #27]
 800559e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055a2:	4013      	ands	r3, r2
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d1e6      	bne.n	800557c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f103 0020 	add.w	r0, r3, #32
 80055b4:	f107 021b 	add.w	r2, r7, #27
 80055b8:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80055bc:	2301      	movs	r3, #1
 80055be:	f000 f814 	bl	80055ea <lis2mdl_read_reg>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	e009      	b.n	80055e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80055ce:	7efa      	ldrb	r2, [r7, #27]
 80055d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80055d4:	4013      	ands	r3, r2
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055dc:	429a      	cmp	r2, r3
 80055de:	d1e6      	bne.n	80055ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3730      	adds	r7, #48	; 0x30
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80055ea:	b590      	push	{r4, r7, lr}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	461a      	mov	r2, r3
 80055f6:	460b      	mov	r3, r1
 80055f8:	72fb      	strb	r3, [r7, #11]
 80055fa:	4613      	mov	r3, r2
 80055fc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685c      	ldr	r4, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68d8      	ldr	r0, [r3, #12]
 8005606:	893b      	ldrh	r3, [r7, #8]
 8005608:	7af9      	ldrb	r1, [r7, #11]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	47a0      	blx	r4
 800560e:	6178      	str	r0, [r7, #20]

  return ret;
 8005610:	697b      	ldr	r3, [r7, #20]
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	bd90      	pop	{r4, r7, pc}

0800561a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800561a:	b590      	push	{r4, r7, lr}
 800561c:	b087      	sub	sp, #28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	461a      	mov	r2, r3
 8005626:	460b      	mov	r3, r1
 8005628:	72fb      	strb	r3, [r7, #11]
 800562a:	4613      	mov	r3, r2
 800562c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681c      	ldr	r4, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68d8      	ldr	r0, [r3, #12]
 8005636:	893b      	ldrh	r3, [r7, #8]
 8005638:	7af9      	ldrb	r1, [r7, #11]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	47a0      	blx	r4
 800563e:	6178      	str	r0, [r7, #20]

  return ret;
 8005640:	697b      	ldr	r3, [r7, #20]
}
 8005642:	4618      	mov	r0, r3
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}

0800564a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005656:	f107 0208 	add.w	r2, r7, #8
 800565a:	2301      	movs	r3, #1
 800565c:	2160      	movs	r1, #96	; 0x60
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff ffc3 	bl	80055ea <lis2mdl_read_reg>
 8005664:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10f      	bne.n	800568c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	b2da      	uxtb	r2, r3
 8005674:	7a3b      	ldrb	r3, [r7, #8]
 8005676:	f362 0301 	bfi	r3, r2, #0, #2
 800567a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800567c:	f107 0208 	add.w	r2, r7, #8
 8005680:	2301      	movs	r3, #1
 8005682:	2160      	movs	r1, #96	; 0x60
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff ffc8 	bl	800561a <lis2mdl_write_reg>
 800568a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80056a2:	f107 0208 	add.w	r2, r7, #8
 80056a6:	2301      	movs	r3, #1
 80056a8:	2160      	movs	r1, #96	; 0x60
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff ff9d 	bl	80055ea <lis2mdl_read_reg>
 80056b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	7a3b      	ldrb	r3, [r7, #8]
 80056c2:	f362 0383 	bfi	r3, r2, #2, #2
 80056c6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80056c8:	f107 0208 	add.w	r2, r7, #8
 80056cc:	2301      	movs	r3, #1
 80056ce:	2160      	movs	r1, #96	; 0x60
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ffa2 	bl	800561a <lis2mdl_write_reg>
 80056d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80056ee:	f107 0208 	add.w	r2, r7, #8
 80056f2:	2301      	movs	r3, #1
 80056f4:	2160      	movs	r1, #96	; 0x60
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff77 	bl	80055ea <lis2mdl_read_reg>
 80056fc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80056fe:	7a3b      	ldrb	r3, [r7, #8]
 8005700:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d81a      	bhi.n	8005740 <lis2mdl_data_rate_get+0x5c>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <lis2mdl_data_rate_get+0x2c>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005721 	.word	0x08005721
 8005714:	08005729 	.word	0x08005729
 8005718:	08005731 	.word	0x08005731
 800571c:	08005739 	.word	0x08005739
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
      break;
 8005726:	e00f      	b.n	8005748 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
      break;
 800572e:	e00b      	b.n	8005748 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2202      	movs	r2, #2
 8005734:	701a      	strb	r2, [r3, #0]
      break;
 8005736:	e007      	b.n	8005748 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2203      	movs	r2, #3
 800573c:	701a      	strb	r2, [r3, #0]
      break;
 800573e:	e003      	b.n	8005748 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
      break;
 8005746:	bf00      	nop
  }

  return ret;
 8005748:	68fb      	ldr	r3, [r7, #12]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop

08005754 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005760:	f107 0208 	add.w	r2, r7, #8
 8005764:	2301      	movs	r3, #1
 8005766:	2162      	movs	r1, #98	; 0x62
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff3e 	bl	80055ea <lis2mdl_read_reg>
 800576e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	b2da      	uxtb	r2, r3
 800577e:	7a3b      	ldrb	r3, [r7, #8]
 8005780:	f362 1304 	bfi	r3, r2, #4, #1
 8005784:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005786:	f107 0208 	add.w	r2, r7, #8
 800578a:	2301      	movs	r3, #1
 800578c:	2162      	movs	r1, #98	; 0x62
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ff43 	bl	800561a <lis2mdl_write_reg>
 8005794:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80057aa:	f107 020c 	add.w	r2, r7, #12
 80057ae:	2306      	movs	r3, #6
 80057b0:	2168      	movs	r1, #104	; 0x68
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ff19 	bl	80055ea <lis2mdl_read_reg>
 80057b8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	b21a      	sxth	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	7b3b      	ldrb	r3, [r7, #12]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	b21a      	sxth	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80057dc:	7bfa      	ldrb	r2, [r7, #15]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	3302      	adds	r3, #2
 80057e2:	b212      	sxth	r2, r2
 80057e4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3302      	adds	r3, #2
 80057ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	3302      	adds	r3, #2
 8005800:	b212      	sxth	r2, r2
 8005802:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005804:	7c7a      	ldrb	r2, [r7, #17]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	3304      	adds	r3, #4
 800580a:	b212      	sxth	r2, r2
 800580c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	3304      	adds	r3, #4
 8005812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005816:	b29b      	uxth	r3, r3
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	b29a      	uxth	r2, r3
 800581c:	7c3b      	ldrb	r3, [r7, #16]
 800581e:	b29b      	uxth	r3, r3
 8005820:	4413      	add	r3, r2
 8005822:	b29a      	uxth	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	3304      	adds	r3, #4
 8005828:	b212      	sxth	r2, r2
 800582a:	801a      	strh	r2, [r3, #0]

  return ret;
 800582c:	697b      	ldr	r3, [r7, #20]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005840:	2301      	movs	r3, #1
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	214f      	movs	r1, #79	; 0x4f
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fecf 	bl	80055ea <lis2mdl_read_reg>
 800584c:	60f8      	str	r0, [r7, #12]

  return ret;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005864:	f107 0208 	add.w	r2, r7, #8
 8005868:	2301      	movs	r3, #1
 800586a:	2162      	movs	r1, #98	; 0x62
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff febc 	bl	80055ea <lis2mdl_read_reg>
 8005872:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	7a3b      	ldrb	r3, [r7, #8]
 8005884:	f362 0341 	bfi	r3, r2, #1, #1
 8005888:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800588a:	f107 0208 	add.w	r2, r7, #8
 800588e:	2301      	movs	r3, #1
 8005890:	2162      	movs	r1, #98	; 0x62
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fec1 	bl	800561a <lis2mdl_write_reg>
 8005898:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800589a:	68fb      	ldr	r3, [r7, #12]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80058b0:	f107 0208 	add.w	r2, r7, #8
 80058b4:	2301      	movs	r3, #1
 80058b6:	2162      	movs	r1, #98	; 0x62
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fe96 	bl	80055ea <lis2mdl_read_reg>
 80058be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	7a3b      	ldrb	r3, [r7, #8]
 80058d0:	f362 1345 	bfi	r3, r2, #5, #1
 80058d4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80058d6:	f107 0208 	add.w	r2, r7, #8
 80058da:	2301      	movs	r3, #1
 80058dc:	2162      	movs	r1, #98	; 0x62
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe9b 	bl	800561a <lis2mdl_write_reg>
 80058e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058e6:	68fb      	ldr	r3, [r7, #12]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e051      	b.n	80059b0 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	7b1a      	ldrb	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <LPS22HH_RegisterBusIO+0xcc>)
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <LPS22HH_RegisterBusIO+0xd0>)
 800594e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e020      	b.n	80059b0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4798      	blx	r3
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e016      	b.n	80059b0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d112      	bne.n	80059b0 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10d      	bne.n	80059b0 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005994:	2301      	movs	r3, #1
 8005996:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	461a      	mov	r2, r3
 800599c:	2110      	movs	r1, #16
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9df 	bl	8005d62 <LPS22HH_Write_Reg>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295
 80059ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80059b0:	68fb      	ldr	r3, [r7, #12]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	0800608b 	.word	0x0800608b
 80059c0:	080060c1 	.word	0x080060c1

080059c4 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fb0e 	bl	8005ff8 <LPS22HH_Initialize>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	e004      	b.n	80059f2 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d111      	bne.n	8005a30 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f877 	bl	8005b00 <LPS22HH_PRESS_Disable>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	e00d      	b.n	8005a3a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f918 	bl	8005c54 <LPS22HH_TEMP_Disable>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	e004      	b.n	8005a3a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3320      	adds	r3, #32
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fd1a 	bl	800648c <lps22hh_device_id_get>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a62:	e000      	b.n	8005a66 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <LPS22HH_GetCapabilities+0x44>)
 8005a9e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <LPS22HH_GetCapabilities+0x44>)
 8005aa4:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	43480000 	.word	0x43480000

08005ab8 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e014      	b.n	8005af8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f103 0220 	add.w	r2, r3, #32
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f000 fb93 	bl	8006208 <lps22hh_data_rate_set>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	e004      	b.n	8005af8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e024      	b.n	8005b60 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d11a      	bne.n	8005b56 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 0220 	add.w	r2, r3, #32
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3333      	adds	r3, #51	; 0x33
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f000 fbb9 	bl	80062a4 <lps22hh_data_rate_get>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	e010      	b.n	8005b60 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3320      	adds	r3, #32
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fb5f 	bl	8006208 <lps22hh_data_rate_set>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
 8005b54:	e004      	b.n	8005b60 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f90f 	bl	8005d98 <LPS22HH_GetOutputDataRate>
 8005b7a:	4603      	mov	r3, r0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d106      	bne.n	8005ba8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005b9a:	ed97 0a00 	vldr	s0, [r7]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f95e 	bl	8005e60 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	e005      	b.n	8005bb4 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005ba8:	ed97 0a00 	vldr	s0, [r7]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f9c9 	bl	8005f44 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005bb2:	4603      	mov	r3, r0
  }
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005bc6:	f107 030c 	add.w	r3, r7, #12
 8005bca:	2204      	movs	r2, #4
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f008 fff9 	bl	800ebc6 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3320      	adds	r3, #32
 8005bd8:	f107 020c 	add.w	r2, r7, #12
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fc08 	bl	80063f4 <lps22hh_pressure_raw_get>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	e009      	b.n	8005c04 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fab0 	bl	8006158 <lps22hh_from_lsb_to_hpa>
 8005bf8:	eef0 7a40 	vmov.f32	s15, s0
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e014      	b.n	8005c4c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f103 0220 	add.w	r2, r3, #32
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f000 fae9 	bl	8006208 <lps22hh_data_rate_set>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	e004      	b.n	8005c4c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e024      	b.n	8005cb4 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11a      	bne.n	8005caa <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f103 0220 	add.w	r2, r3, #32
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3333      	adds	r3, #51	; 0x33
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f000 fb0f 	bl	80062a4 <lps22hh_data_rate_get>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	e010      	b.n	8005cb4 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3320      	adds	r3, #32
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fab5 	bl	8006208 <lps22hh_data_rate_set>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	e004      	b.n	8005cb4 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f865 	bl	8005d98 <LPS22HH_GetOutputDataRate>
 8005cce:	4603      	mov	r3, r0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d106      	bne.n	8005cfc <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005cee:	ed97 0a00 	vldr	s0, [r7]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8b4 	bl	8005e60 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	e005      	b.n	8005d08 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005cfc:	ed97 0a00 	vldr	s0, [r7]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f91f 	bl	8005f44 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005d06:	4603      	mov	r3, r0
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005d1a:	f107 030c 	add.w	r3, r7, #12
 8005d1e:	2202      	movs	r2, #2
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f008 ff4f 	bl	800ebc6 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3320      	adds	r3, #32
 8005d2c:	f107 020c 	add.w	r2, r7, #12
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fb87 	bl	8006446 <lps22hh_temperature_raw_get>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	e00a      	b.n	8005d5a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005d44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fa1d 	bl	8006188 <lps22hh_from_lsb_to_celsius>
 8005d4e:	eef0 7a40 	vmov.f32	s15, s0
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f103 0020 	add.w	r0, r3, #32
 8005d78:	1cba      	adds	r2, r7, #2
 8005d7a:	78f9      	ldrb	r1, [r7, #3]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f000 f9d2 	bl	8006126 <lps22hh_write_reg>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	e000      	b.n	8005d90 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3320      	adds	r3, #32
 8005daa:	f107 020b 	add.w	r2, r7, #11
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 fa77 	bl	80062a4 <lps22hh_data_rate_get>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc0:	e03d      	b.n	8005e3e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	2b07      	cmp	r3, #7
 8005dc6:	d835      	bhi.n	8005e34 <LPS22HH_GetOutputDataRate+0x9c>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <LPS22HH_GetOutputDataRate+0x38>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005df1 	.word	0x08005df1
 8005dd4:	08005dfb 	.word	0x08005dfb
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e15 	.word	0x08005e15
 8005de4:	08005e1d 	.word	0x08005e1d
 8005de8:	08005e25 	.word	0x08005e25
 8005dec:	08005e2d 	.word	0x08005e2d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
      break;
 8005df8:	e020      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e00:	601a      	str	r2, [r3, #0]
      break;
 8005e02:	e01b      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4a10      	ldr	r2, [pc, #64]	; (8005e48 <LPS22HH_GetOutputDataRate+0xb0>)
 8005e08:	601a      	str	r2, [r3, #0]
      break;
 8005e0a:	e017      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4a0f      	ldr	r2, [pc, #60]	; (8005e4c <LPS22HH_GetOutputDataRate+0xb4>)
 8005e10:	601a      	str	r2, [r3, #0]
      break;
 8005e12:	e013      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <LPS22HH_GetOutputDataRate+0xb8>)
 8005e18:	601a      	str	r2, [r3, #0]
      break;
 8005e1a:	e00f      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	4a0d      	ldr	r2, [pc, #52]	; (8005e54 <LPS22HH_GetOutputDataRate+0xbc>)
 8005e20:	601a      	str	r2, [r3, #0]
      break;
 8005e22:	e00b      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <LPS22HH_GetOutputDataRate+0xc0>)
 8005e28:	601a      	str	r2, [r3, #0]
      break;
 8005e2a:	e007      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <LPS22HH_GetOutputDataRate+0xc4>)
 8005e30:	601a      	str	r2, [r3, #0]
      break;
 8005e32:	e003      	b.n	8005e3c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295
 8005e38:	60fb      	str	r3, [r7, #12]
      break;
 8005e3a:	bf00      	nop
  }

  return ret;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	41200000 	.word	0x41200000
 8005e4c:	41c80000 	.word	0x41c80000
 8005e50:	42480000 	.word	0x42480000
 8005e54:	42960000 	.word	0x42960000
 8005e58:	42c80000 	.word	0x42c80000
 8005e5c:	43480000 	.word	0x43480000

08005e60 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005e6c:	edd7 7a00 	vldr	s15, [r7]
 8005e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	d801      	bhi.n	8005e82 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e037      	b.n	8005ef2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005e82:	edd7 7a00 	vldr	s15, [r7]
 8005e86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e92:	d801      	bhi.n	8005e98 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e02c      	b.n	8005ef2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005e98:	edd7 7a00 	vldr	s15, [r7]
 8005e9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea8:	d801      	bhi.n	8005eae <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e021      	b.n	8005ef2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005eae:	edd7 7a00 	vldr	s15, [r7]
 8005eb2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005f38 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	d801      	bhi.n	8005ec4 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	e016      	b.n	8005ef2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005ec4:	edd7 7a00 	vldr	s15, [r7]
 8005ec8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005f3c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8005ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	d801      	bhi.n	8005eda <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005ed6:	2305      	movs	r3, #5
 8005ed8:	e00b      	b.n	8005ef2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005eda:	edd7 7a00 	vldr	s15, [r7]
 8005ede:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005f40 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eea:	d801      	bhi.n	8005ef0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8005eec:	2306      	movs	r3, #6
 8005eee:	e000      	b.n	8005ef2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005ef0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005ef2:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3320      	adds	r3, #32
 8005ef8:	7bfa      	ldrb	r2, [r7, #15]
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f983 	bl	8006208 <lps22hh_data_rate_set>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0c:	e00f      	b.n	8005f2e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f103 0220 	add.w	r2, r3, #32
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3333      	adds	r3, #51	; 0x33
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 f9c2 	bl	80062a4 <lps22hh_data_rate_get>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8005f26:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2a:	e000      	b.n	8005f2e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	42480000 	.word	0x42480000
 8005f3c:	42960000 	.word	0x42960000
 8005f40:	42c80000 	.word	0x42c80000

08005f44 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005f50:	edd7 7a00 	vldr	s15, [r7]
 8005f54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f60:	d801      	bhi.n	8005f66 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e037      	b.n	8005fd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f66:	edd7 7a00 	vldr	s15, [r7]
 8005f6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	d801      	bhi.n	8005f7c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e02c      	b.n	8005fd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f7c:	edd7 7a00 	vldr	s15, [r7]
 8005f80:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8c:	d801      	bhi.n	8005f92 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e021      	b.n	8005fd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005f92:	edd7 7a00 	vldr	s15, [r7]
 8005f96:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005fec <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8005f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa2:	d801      	bhi.n	8005fa8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	e016      	b.n	8005fd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005fa8:	edd7 7a00 	vldr	s15, [r7]
 8005fac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ff0 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb8:	d801      	bhi.n	8005fbe <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005fba:	2305      	movs	r3, #5
 8005fbc:	e00b      	b.n	8005fd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005fbe:	edd7 7a00 	vldr	s15, [r7]
 8005fc2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005ff4 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8005fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fce:	d801      	bhi.n	8005fd4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005fd0:	2306      	movs	r3, #6
 8005fd2:	e000      	b.n	8005fd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005fd4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	42480000 	.word	0x42480000
 8005ff0:	42960000 	.word	0x42960000
 8005ff4:	42c80000 	.word	0x42c80000

08005ff8 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3320      	adds	r3, #32
 8006004:	2111      	movs	r1, #17
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fa9d 	bl	8006546 <lps22hh_i3c_interface_set>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	e034      	b.n	8006082 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3320      	adds	r3, #32
 800601c:	2110      	movs	r1, #16
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f8f2 	bl	8006208 <lps22hh_data_rate_set>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 800602a:	f04f 33ff 	mov.w	r3, #4294967295
 800602e:	e028      	b.n	8006082 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3320      	adds	r3, #32
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fa5f 	bl	80064fa <lps22hh_lp_bandwidth_set>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8006042:	f04f 33ff 	mov.w	r3, #4294967295
 8006046:	e01c      	b.n	8006082 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3320      	adds	r3, #32
 800604c:	2101      	movs	r1, #1
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f8b4 	bl	80061bc <lps22hh_block_data_update_set>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	e010      	b.n	8006082 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3320      	adds	r3, #32
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fa21 	bl	80064ae <lps22hh_auto_increment_set>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	e004      	b.n	8006082 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2203      	movs	r2, #3
 800607c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800608a:	b590      	push	{r4, r7, lr}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	461a      	mov	r2, r3
 8006096:	460b      	mov	r3, r1
 8006098:	72fb      	strb	r3, [r7, #11]
 800609a:	4613      	mov	r3, r2
 800609c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	695c      	ldr	r4, [r3, #20]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	7b1b      	ldrb	r3, [r3, #12]
 80060aa:	b298      	uxth	r0, r3
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	b299      	uxth	r1, r3
 80060b0:	893b      	ldrh	r3, [r7, #8]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	47a0      	blx	r4
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd90      	pop	{r4, r7, pc}

080060c0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	461a      	mov	r2, r3
 80060cc:	460b      	mov	r3, r1
 80060ce:	72fb      	strb	r3, [r7, #11]
 80060d0:	4613      	mov	r3, r2
 80060d2:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	691c      	ldr	r4, [r3, #16]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	7b1b      	ldrb	r3, [r3, #12]
 80060e0:	b298      	uxth	r0, r3
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	b299      	uxth	r1, r3
 80060e6:	893b      	ldrh	r3, [r7, #8]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	47a0      	blx	r4
 80060ec:	4603      	mov	r3, r0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd90      	pop	{r4, r7, pc}

080060f6 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80060f6:	b590      	push	{r4, r7, lr}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	461a      	mov	r2, r3
 8006102:	460b      	mov	r3, r1
 8006104:	72fb      	strb	r3, [r7, #11]
 8006106:	4613      	mov	r3, r2
 8006108:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685c      	ldr	r4, [r3, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68d8      	ldr	r0, [r3, #12]
 8006112:	893b      	ldrh	r3, [r7, #8]
 8006114:	7af9      	ldrb	r1, [r7, #11]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	47a0      	blx	r4
 800611a:	6178      	str	r0, [r7, #20]

  return ret;
 800611c:	697b      	ldr	r3, [r7, #20]
}
 800611e:	4618      	mov	r0, r3
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd90      	pop	{r4, r7, pc}

08006126 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006126:	b590      	push	{r4, r7, lr}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	461a      	mov	r2, r3
 8006132:	460b      	mov	r3, r1
 8006134:	72fb      	strb	r3, [r7, #11]
 8006136:	4613      	mov	r3, r2
 8006138:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681c      	ldr	r4, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	68d8      	ldr	r0, [r3, #12]
 8006142:	893b      	ldrh	r3, [r7, #8]
 8006144:	7af9      	ldrb	r1, [r7, #11]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	47a0      	blx	r4
 800614a:	6178      	str	r0, [r7, #20]

  return ret;
 800614c:	697b      	ldr	r3, [r7, #20]
}
 800614e:	4618      	mov	r0, r3
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd90      	pop	{r4, r7, pc}
	...

08006158 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006184 <lps22hh_from_lsb_to_hpa+0x2c>
 800616e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006172:	eef0 7a66 	vmov.f32	s15, s13
}
 8006176:	eeb0 0a67 	vmov.f32	s0, s15
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	49800000 	.word	0x49800000

08006188 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80061b8 <lps22hh_from_lsb_to_celsius+0x30>
 80061a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061a6:	eef0 7a66 	vmov.f32	s15, s13
}
 80061aa:	eeb0 0a67 	vmov.f32	s0, s15
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	42c80000 	.word	0x42c80000

080061bc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061c8:	f107 0208 	add.w	r2, r7, #8
 80061cc:	2301      	movs	r3, #1
 80061ce:	2110      	movs	r1, #16
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff90 	bl	80060f6 <lps22hh_read_reg>
 80061d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	7a3b      	ldrb	r3, [r7, #8]
 80061e8:	f362 0341 	bfi	r3, r2, #1, #1
 80061ec:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80061ee:	f107 0208 	add.w	r2, r7, #8
 80061f2:	2301      	movs	r3, #1
 80061f4:	2110      	movs	r1, #16
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff ff95 	bl	8006126 <lps22hh_write_reg>
 80061fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006214:	f107 0210 	add.w	r2, r7, #16
 8006218:	2301      	movs	r3, #1
 800621a:	2110      	movs	r1, #16
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff6a 	bl	80060f6 <lps22hh_read_reg>
 8006222:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d107      	bne.n	800623a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800622a:	f107 020c 	add.w	r2, r7, #12
 800622e:	2301      	movs	r3, #1
 8006230:	2111      	movs	r1, #17
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ff5f 	bl	80060f6 <lps22hh_read_reg>
 8006238:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10f      	bne.n	8006260 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	b2da      	uxtb	r2, r3
 8006248:	7c3b      	ldrb	r3, [r7, #16]
 800624a:	f362 1306 	bfi	r3, r2, #4, #3
 800624e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006250:	f107 0210 	add.w	r2, r7, #16
 8006254:	2301      	movs	r3, #1
 8006256:	2110      	movs	r1, #16
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff ff64 	bl	8006126 <lps22hh_write_reg>
 800625e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d119      	bne.n	800629a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	7b3b      	ldrb	r3, [r7, #12]
 8006272:	f362 0341 	bfi	r3, r2, #1, #1
 8006276:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	08db      	lsrs	r3, r3, #3
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	b2da      	uxtb	r2, r3
 8006282:	7b3b      	ldrb	r3, [r7, #12]
 8006284:	f362 0300 	bfi	r3, r2, #0, #1
 8006288:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800628a:	f107 020c 	add.w	r2, r7, #12
 800628e:	2301      	movs	r3, #1
 8006290:	2111      	movs	r1, #17
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff ff47 	bl	8006126 <lps22hh_write_reg>
 8006298:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800629a:	697b      	ldr	r3, [r7, #20]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80062ae:	f107 0210 	add.w	r2, r7, #16
 80062b2:	2301      	movs	r3, #1
 80062b4:	2110      	movs	r1, #16
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff1d 	bl	80060f6 <lps22hh_read_reg>
 80062bc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80062c4:	f107 020c 	add.w	r2, r7, #12
 80062c8:	2301      	movs	r3, #1
 80062ca:	2111      	movs	r1, #17
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff12 	bl	80060f6 <lps22hh_read_reg>
 80062d2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f040 8086 	bne.w	80063e8 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80062dc:	f107 020c 	add.w	r2, r7, #12
 80062e0:	2301      	movs	r3, #1
 80062e2:	2111      	movs	r1, #17
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff ff06 	bl	80060f6 <lps22hh_read_reg>
 80062ea:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80062ec:	7b3b      	ldrb	r3, [r7, #12]
 80062ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	011a      	lsls	r2, r3, #4
 80062f6:	7b3b      	ldrb	r3, [r7, #12]
 80062f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8006302:	7c3a      	ldrb	r2, [r7, #16]
 8006304:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006308:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800630a:	4413      	add	r3, r2
 800630c:	2b15      	cmp	r3, #21
 800630e:	d867      	bhi.n	80063e0 <lps22hh_data_rate_get+0x13c>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <lps22hh_data_rate_get+0x74>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	08006371 	.word	0x08006371
 800631c:	08006381 	.word	0x08006381
 8006320:	08006389 	.word	0x08006389
 8006324:	08006391 	.word	0x08006391
 8006328:	08006399 	.word	0x08006399
 800632c:	080063a1 	.word	0x080063a1
 8006330:	080063d1 	.word	0x080063d1
 8006334:	080063d9 	.word	0x080063d9
 8006338:	08006379 	.word	0x08006379
 800633c:	080063e1 	.word	0x080063e1
 8006340:	080063e1 	.word	0x080063e1
 8006344:	080063e1 	.word	0x080063e1
 8006348:	080063e1 	.word	0x080063e1
 800634c:	080063e1 	.word	0x080063e1
 8006350:	080063e1 	.word	0x080063e1
 8006354:	080063e1 	.word	0x080063e1
 8006358:	080063e1 	.word	0x080063e1
 800635c:	080063a9 	.word	0x080063a9
 8006360:	080063b1 	.word	0x080063b1
 8006364:	080063b9 	.word	0x080063b9
 8006368:	080063c1 	.word	0x080063c1
 800636c:	080063c9 	.word	0x080063c9
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
        break;
 8006376:	e038      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2208      	movs	r2, #8
 800637c:	701a      	strb	r2, [r3, #0]
        break;
 800637e:	e034      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
        break;
 8006386:	e030      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2202      	movs	r2, #2
 800638c:	701a      	strb	r2, [r3, #0]
        break;
 800638e:	e02c      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2203      	movs	r2, #3
 8006394:	701a      	strb	r2, [r3, #0]
        break;
 8006396:	e028      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2204      	movs	r2, #4
 800639c:	701a      	strb	r2, [r3, #0]
        break;
 800639e:	e024      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2205      	movs	r2, #5
 80063a4:	701a      	strb	r2, [r3, #0]
        break;
 80063a6:	e020      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2211      	movs	r2, #17
 80063ac:	701a      	strb	r2, [r3, #0]
        break;
 80063ae:	e01c      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2212      	movs	r2, #18
 80063b4:	701a      	strb	r2, [r3, #0]
        break;
 80063b6:	e018      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2213      	movs	r2, #19
 80063bc:	701a      	strb	r2, [r3, #0]
        break;
 80063be:	e014      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2214      	movs	r2, #20
 80063c4:	701a      	strb	r2, [r3, #0]
        break;
 80063c6:	e010      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2215      	movs	r2, #21
 80063cc:	701a      	strb	r2, [r3, #0]
        break;
 80063ce:	e00c      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2206      	movs	r2, #6
 80063d4:	701a      	strb	r2, [r3, #0]
        break;
 80063d6:	e008      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2207      	movs	r2, #7
 80063dc:	701a      	strb	r2, [r3, #0]
        break;
 80063de:	e004      	b.n	80063ea <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
        break;
 80063e6:	e000      	b.n	80063ea <lps22hh_data_rate_get+0x146>
    }
  }
 80063e8:	bf00      	nop

  return ret;
 80063ea:	697b      	ldr	r3, [r7, #20]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80063fe:	f107 0208 	add.w	r2, r7, #8
 8006402:	2303      	movs	r3, #3
 8006404:	2128      	movs	r1, #40	; 0x28
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fe75 	bl	80060f6 <lps22hh_read_reg>
 800640c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800640e:	7abb      	ldrb	r3, [r7, #10]
 8006410:	461a      	mov	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	7a7a      	ldrb	r2, [r7, #9]
 800641e:	441a      	add	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	7a3a      	ldrb	r2, [r7, #8]
 800642c:	441a      	add	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]

  return ret;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006450:	f107 0208 	add.w	r2, r7, #8
 8006454:	2302      	movs	r3, #2
 8006456:	212b      	movs	r1, #43	; 0x2b
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fe4c 	bl	80060f6 <lps22hh_read_reg>
 800645e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006460:	7a7b      	ldrb	r3, [r7, #9]
 8006462:	b21a      	sxth	r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646e:	b29b      	uxth	r3, r3
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	b29a      	uxth	r2, r3
 8006474:	7a3b      	ldrb	r3, [r7, #8]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4413      	add	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	b21a      	sxth	r2, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	801a      	strh	r2, [r3, #0]

  return ret;
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006496:	2301      	movs	r3, #1
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	210f      	movs	r1, #15
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fe2a 	bl	80060f6 <lps22hh_read_reg>
 80064a2:	60f8      	str	r0, [r7, #12]

  return ret;
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80064ba:	f107 0208 	add.w	r2, r7, #8
 80064be:	2301      	movs	r3, #1
 80064c0:	2111      	movs	r1, #17
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fe17 	bl	80060f6 <lps22hh_read_reg>
 80064c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10f      	bne.n	80064f0 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	7a3b      	ldrb	r3, [r7, #8]
 80064da:	f362 1304 	bfi	r3, r2, #4, #1
 80064de:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80064e0:	f107 0208 	add.w	r2, r7, #8
 80064e4:	2301      	movs	r3, #1
 80064e6:	2111      	movs	r1, #17
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fe1c 	bl	8006126 <lps22hh_write_reg>
 80064ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064f0:	68fb      	ldr	r3, [r7, #12]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006506:	f107 0208 	add.w	r2, r7, #8
 800650a:	2301      	movs	r3, #1
 800650c:	2110      	movs	r1, #16
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fdf1 	bl	80060f6 <lps22hh_read_reg>
 8006514:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10f      	bne.n	800653c <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	b2da      	uxtb	r2, r3
 8006524:	7a3b      	ldrb	r3, [r7, #8]
 8006526:	f362 0383 	bfi	r3, r2, #2, #2
 800652a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800652c:	f107 0208 	add.w	r2, r7, #8
 8006530:	2301      	movs	r3, #1
 8006532:	2110      	movs	r1, #16
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fdf6 	bl	8006126 <lps22hh_write_reg>
 800653a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006552:	f107 0208 	add.w	r2, r7, #8
 8006556:	2301      	movs	r3, #1
 8006558:	210e      	movs	r1, #14
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fdcb 	bl	80060f6 <lps22hh_read_reg>
 8006560:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d118      	bne.n	800659a <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	7a3b      	ldrb	r3, [r7, #8]
 8006572:	f362 0341 	bfi	r3, r2, #1, #1
 8006576:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	7a3b      	ldrb	r3, [r7, #8]
 8006584:	f362 13c7 	bfi	r3, r2, #7, #1
 8006588:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800658a:	f107 0208 	add.w	r2, r7, #8
 800658e:	2301      	movs	r3, #1
 8006590:	210e      	movs	r1, #14
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fdc7 	bl	8006126 <lps22hh_write_reg>
 8006598:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e051      	b.n	8006664 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	7b1a      	ldrb	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <LSM6DSO_RegisterBusIO+0xcc>)
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <LSM6DSO_RegisterBusIO+0xd0>)
 8006602:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e020      	b.n	8006664 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4798      	blx	r3
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	e016      	b.n	8006664 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d112      	bne.n	8006664 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10d      	bne.n	8006664 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006648:	230c      	movs	r3, #12
 800664a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	461a      	mov	r2, r3
 8006650:	2112      	movs	r1, #18
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ff59 	bl	800750a <LSM6DSO_Write_Reg>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006664:	68fb      	ldr	r3, [r7, #12]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	080079ad 	.word	0x080079ad
 8006674:	080079e3 	.word	0x080079e3

08006678 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3320      	adds	r3, #32
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fe97 	bl	80083ba <lsm6dso_i3c_disable_set>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8006692:	f04f 33ff 	mov.w	r3, #4294967295
 8006696:	e060      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3320      	adds	r3, #32
 800669c:	2101      	movs	r1, #1
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fe65 	bl	800836e <lsm6dso_auto_increment_set>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	e054      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3320      	adds	r3, #32
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fd66 	bl	8008188 <lsm6dso_block_data_update_set>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80066c2:	f04f 33ff 	mov.w	r3, #4294967295
 80066c6:	e048      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3320      	adds	r3, #32
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 feb9 	bl	8008446 <lsm6dso_fifo_mode_set>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80066da:	f04f 33ff 	mov.w	r3, #4294967295
 80066de:	e03c      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2204      	movs	r2, #4
 80066e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3320      	adds	r3, #32
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 fa20 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295
 80066fe:	e02c      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3320      	adds	r3, #32
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 f9b6 	bl	8007a78 <lsm6dso_xl_full_scale_set>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	e020      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2204      	movs	r2, #4
 800671c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3320      	adds	r3, #32
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fbd0 	bl	8007ecc <lsm6dso_gy_data_rate_set>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8006732:	f04f 33ff 	mov.w	r3, #4294967295
 8006736:	e010      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3320      	adds	r3, #32
 800673c:	2106      	movs	r1, #6
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fb5c 	bl	8007dfc <lsm6dso_gy_full_scale_set>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	e004      	b.n	800675a <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f888 	bl	8006880 <LSM6DSO_ACC_Disable>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e015      	b.n	80067a8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fc2e 	bl	8006fde <LSM6DSO_GYRO_Disable>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	e00c      	b.n	80067a8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3320      	adds	r3, #32
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 fdc3 	bl	800834c <lsm6dso_device_id_get>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295
 80067d0:	e000      	b.n	80067d4 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2201      	movs	r2, #1
 80067ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2201      	movs	r2, #1
 80067f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2200      	movs	r2, #0
 80067fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006804:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2210      	movs	r2, #16
 800680a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	4a07      	ldr	r2, [pc, #28]	; (8006834 <LSM6DSO_GetCapabilities+0x58>)
 8006816:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	4a06      	ldr	r2, [pc, #24]	; (8006834 <LSM6DSO_GetCapabilities+0x58>)
 800681c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	45d02000 	.word	0x45d02000

08006838 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e014      	b.n	8006878 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f103 0220 	add.w	r2, r3, #32
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f001 f969 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006868:	f04f 33ff 	mov.w	r3, #4294967295
 800686c:	e004      	b.n	8006878 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	e01f      	b.n	80068d6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f103 0220 	add.w	r2, r3, #32
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3333      	adds	r3, #51	; 0x33
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f001 fa42 	bl	8007d2c <lsm6dso_xl_data_rate_get>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	e010      	b.n	80068d6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3320      	adds	r3, #32
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f93a 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	e004      	b.n	80068d6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3320      	adds	r3, #32
 80068f2:	f107 020b 	add.w	r2, r7, #11
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f8e3 	bl	8007ac4 <lsm6dso_xl_full_scale_get>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006904:	f04f 33ff 	mov.w	r3, #4294967295
 8006908:	e023      	b.n	8006952 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d81b      	bhi.n	8006948 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	08006929 	.word	0x08006929
 800691c:	08006941 	.word	0x08006941
 8006920:	08006931 	.word	0x08006931
 8006924:	08006939 	.word	0x08006939
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	4a0c      	ldr	r2, [pc, #48]	; (800695c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800692c:	601a      	str	r2, [r3, #0]
      break;
 800692e:	e00f      	b.n	8006950 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006934:	601a      	str	r2, [r3, #0]
      break;
 8006936:	e00b      	b.n	8006950 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800693c:	601a      	str	r2, [r3, #0]
      break;
 800693e:	e007      	b.n	8006950 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	4a09      	ldr	r2, [pc, #36]	; (8006968 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006944:	601a      	str	r2, [r3, #0]
      break;
 8006946:	e003      	b.n	8006950 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006948:	f04f 33ff 	mov.w	r3, #4294967295
 800694c:	60fb      	str	r3, [r7, #12]
      break;
 800694e:	bf00      	nop
  }

  return ret;
 8006950:	68fb      	ldr	r3, [r7, #12]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	3d79db23 	.word	0x3d79db23
 8006960:	3df9db23 	.word	0x3df9db23
 8006964:	3e79db23 	.word	0x3e79db23
 8006968:	3ef9db23 	.word	0x3ef9db23

0800696c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3320      	adds	r3, #32
 800697e:	f107 020b 	add.w	r2, r7, #11
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f9d1 	bl	8007d2c <lsm6dso_xl_data_rate_get>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	e054      	b.n	8006a40 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	2b0b      	cmp	r3, #11
 800699a:	d84c      	bhi.n	8006a36 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d5 	.word	0x080069d5
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	080069ef 	.word	0x080069ef
 80069b0:	080069f7 	.word	0x080069f7
 80069b4:	080069ff 	.word	0x080069ff
 80069b8:	08006a07 	.word	0x08006a07
 80069bc:	08006a0f 	.word	0x08006a0f
 80069c0:	08006a17 	.word	0x08006a17
 80069c4:	08006a1f 	.word	0x08006a1f
 80069c8:	08006a27 	.word	0x08006a27
 80069cc:	08006a2f 	.word	0x08006a2f
 80069d0:	080069df 	.word	0x080069df
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
      break;
 80069dc:	e02f      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80069e2:	601a      	str	r2, [r3, #0]
      break;
 80069e4:	e02b      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80069ea:	601a      	str	r2, [r3, #0]
      break;
 80069ec:	e027      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80069f2:	601a      	str	r2, [r3, #0]
      break;
 80069f4:	e023      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80069fa:	601a      	str	r2, [r3, #0]
      break;
 80069fc:	e01f      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8006a02:	601a      	str	r2, [r3, #0]
      break;
 8006a04:	e01b      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	4a14      	ldr	r2, [pc, #80]	; (8006a5c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8006a0a:	601a      	str	r2, [r3, #0]
      break;
 8006a0c:	e017      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006a12:	601a      	str	r2, [r3, #0]
      break;
 8006a14:	e013      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8006a1a:	601a      	str	r2, [r3, #0]
      break;
 8006a1c:	e00f      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006a22:	601a      	str	r2, [r3, #0]
      break;
 8006a24:	e00b      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	4a10      	ldr	r2, [pc, #64]	; (8006a6c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8006a2a:	601a      	str	r2, [r3, #0]
      break;
 8006a2c:	e007      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006a32:	601a      	str	r2, [r3, #0]
      break;
 8006a34:	e003      	b.n	8006a3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	60fb      	str	r3, [r7, #12]
      break;
 8006a3c:	bf00      	nop
  }

  return ret;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	3fcccccd 	.word	0x3fcccccd
 8006a4c:	41480000 	.word	0x41480000
 8006a50:	41d00000 	.word	0x41d00000
 8006a54:	42500000 	.word	0x42500000
 8006a58:	42d00000 	.word	0x42d00000
 8006a5c:	43500000 	.word	0x43500000
 8006a60:	43d08000 	.word	0x43d08000
 8006a64:	44504000 	.word	0x44504000
 8006a68:	44d06000 	.word	0x44d06000
 8006a6c:	45505000 	.word	0x45505000
 8006a70:	45d05800 	.word	0x45d05800

08006a74 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006a80:	2100      	movs	r1, #0
 8006a82:	ed97 0a00 	vldr	s0, [r7]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f806 	bl	8006a98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006a8c:	4603      	mov	r3, r0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	; 0x30
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	ed87 0a02 	vstr	s0, [r7, #8]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	f000 80ea 	beq.w	8006c8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	f300 8163 	bgt.w	8006d84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d074      	beq.n	8006bb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006ac6:	e15d      	b.n	8006d84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f103 0020 	add.w	r0, r3, #32
 8006ace:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	2114      	movs	r1, #20
 8006ad6:	f000 ff9f 	bl	8007a18 <lsm6dso_read_reg>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae4:	e16c      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d025      	beq.n	8006b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10b      	bne.n	8006b16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3320      	adds	r3, #32
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f815 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	e154      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006b16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b1a:	f36f 13c7 	bfc	r3, #7, #1
 8006b1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f103 0020 	add.w	r0, r3, #32
 8006b28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	2114      	movs	r1, #20
 8006b30:	f000 ff8a 	bl	8007a48 <lsm6dso_write_reg>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3e:	e13f      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f103 0020 	add.w	r0, r3, #32
 8006b46:	f107 0220 	add.w	r2, r7, #32
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	2115      	movs	r1, #21
 8006b4e:	f000 ff63 	bl	8007a18 <lsm6dso_read_reg>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006b58:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5c:	e130      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d014      	beq.n	8006b96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8006b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b70:	f36f 1304 	bfc	r3, #4, #1
 8006b74:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f103 0020 	add.w	r0, r3, #32
 8006b7e:	f107 0220 	add.w	r2, r7, #32
 8006b82:	2301      	movs	r3, #1
 8006b84:	2115      	movs	r1, #21
 8006b86:	f000 ff5f 	bl	8007a48 <lsm6dso_write_reg>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8006b90:	f04f 33ff 	mov.w	r3, #4294967295
 8006b94:	e114      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006b96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006b9a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba6:	d400      	bmi.n	8006baa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006ba8:	e0f0      	b.n	8006d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006baa:	4b87      	ldr	r3, [pc, #540]	; (8006dc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bae:	e0ed      	b.n	8006d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f103 0020 	add.w	r0, r3, #32
 8006bb6:	f107 021c 	add.w	r2, r7, #28
 8006bba:	2301      	movs	r3, #1
 8006bbc:	2114      	movs	r1, #20
 8006bbe:	f000 ff2b 	bl	8007a18 <lsm6dso_read_reg>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	e0f8      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006bce:	7f3b      	ldrb	r3, [r7, #28]
 8006bd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d023      	beq.n	8006c22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10b      	bne.n	8006bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3320      	adds	r3, #32
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 ffa2 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8006bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfa:	e0e1      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006bfc:	7f3b      	ldrb	r3, [r7, #28]
 8006bfe:	f36f 13c7 	bfc	r3, #7, #1
 8006c02:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f103 0020 	add.w	r0, r3, #32
 8006c0a:	f107 021c 	add.w	r2, r7, #28
 8006c0e:	2301      	movs	r3, #1
 8006c10:	2114      	movs	r1, #20
 8006c12:	f000 ff19 	bl	8007a48 <lsm6dso_write_reg>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	e0ce      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f103 0020 	add.w	r0, r3, #32
 8006c28:	f107 0218 	add.w	r2, r7, #24
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	2115      	movs	r1, #21
 8006c30:	f000 fef2 	bl	8007a18 <lsm6dso_read_reg>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	e0bf      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006c40:	7e3b      	ldrb	r3, [r7, #24]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d112      	bne.n	8006c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8006c4c:	7e3b      	ldrb	r3, [r7, #24]
 8006c4e:	f043 0310 	orr.w	r3, r3, #16
 8006c52:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f103 0020 	add.w	r0, r3, #32
 8006c5a:	f107 0218 	add.w	r2, r7, #24
 8006c5e:	2301      	movs	r3, #1
 8006c60:	2115      	movs	r1, #21
 8006c62:	f000 fef1 	bl	8007a48 <lsm6dso_write_reg>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	e0a6      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006c72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006c76:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006dcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c82:	dc00      	bgt.n	8006c86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006c84:	e082      	b.n	8006d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006c86:	4b52      	ldr	r3, [pc, #328]	; (8006dd0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8a:	e07f      	b.n	8006d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f103 0020 	add.w	r0, r3, #32
 8006c92:	f107 0210 	add.w	r2, r7, #16
 8006c96:	2301      	movs	r3, #1
 8006c98:	2115      	movs	r1, #21
 8006c9a:	f000 febd 	bl	8007a18 <lsm6dso_read_reg>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca8:	e08a      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006caa:	7c3b      	ldrb	r3, [r7, #16]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d012      	beq.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006cb6:	7c3b      	ldrb	r3, [r7, #16]
 8006cb8:	f36f 1304 	bfc	r3, #4, #1
 8006cbc:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f103 0020 	add.w	r0, r3, #32
 8006cc4:	f107 0210 	add.w	r2, r7, #16
 8006cc8:	2301      	movs	r3, #1
 8006cca:	2115      	movs	r1, #21
 8006ccc:	f000 febc 	bl	8007a48 <lsm6dso_write_reg>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	e071      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d108      	bne.n	8006cf8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f979 	bl	8006fde <LSM6DSO_GYRO_Disable>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	e063      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f103 0020 	add.w	r0, r3, #32
 8006cfe:	f107 0214 	add.w	r2, r7, #20
 8006d02:	2301      	movs	r3, #1
 8006d04:	2114      	movs	r1, #20
 8006d06:	f000 fe87 	bl	8007a18 <lsm6dso_read_reg>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	e054      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8006d16:	7d3b      	ldrb	r3, [r7, #20]
 8006d18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d123      	bne.n	8006d6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10b      	bne.n	8006d44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3320      	adds	r3, #32
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fefe 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8006d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d42:	e03d      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006d44:	7d3b      	ldrb	r3, [r7, #20]
 8006d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f103 0020 	add.w	r0, r3, #32
 8006d52:	f107 0214 	add.w	r2, r7, #20
 8006d56:	2301      	movs	r3, #1
 8006d58:	2114      	movs	r1, #20
 8006d5a:	f000 fe75 	bl	8007a48 <lsm6dso_write_reg>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	e02a      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006d6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006d6e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006dcc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7a:	dc00      	bgt.n	8006d7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006d7c:	e006      	b.n	8006d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d82:	e003      	b.n	8006d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006d84:	f04f 33ff 	mov.w	r3, #4294967295
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006d8a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	d102      	bne.n	8006d9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295
 8006d98:	e012      	b.n	8006dc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d106      	bne.n	8006db2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006da4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fbc9 	bl	8007540 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006dae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006db0:	e005      	b.n	8006dbe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006db2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 fc5a 	bl	8007670 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3730      	adds	r7, #48	; 0x30
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	41480000 	.word	0x41480000
 8006dcc:	43500000 	.word	0x43500000
 8006dd0:	43500000 	.word	0x43500000

08006dd4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3320      	adds	r3, #32
 8006de6:	f107 020b 	add.w	r2, r7, #11
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fe69 	bl	8007ac4 <lsm6dso_xl_full_scale_get>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfc:	e023      	b.n	8006e46 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d81b      	bhi.n	8006e3c <LSM6DSO_ACC_GetFullScale+0x68>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <LSM6DSO_ACC_GetFullScale+0x38>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e1d 	.word	0x08006e1d
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e2d 	.word	0x08006e2d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	601a      	str	r2, [r3, #0]
      break;
 8006e22:	e00f      	b.n	8006e44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2204      	movs	r2, #4
 8006e28:	601a      	str	r2, [r3, #0]
      break;
 8006e2a:	e00b      	b.n	8006e44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2208      	movs	r2, #8
 8006e30:	601a      	str	r2, [r3, #0]
      break;
 8006e32:	e007      	b.n	8006e44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2210      	movs	r2, #16
 8006e38:	601a      	str	r2, [r3, #0]
      break;
 8006e3a:	e003      	b.n	8006e44 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e40:	60fb      	str	r3, [r7, #12]
      break;
 8006e42:	bf00      	nop
  }

  return ret;
 8006e44:	68fb      	ldr	r3, [r7, #12]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop

08006e50 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	dd0b      	ble.n	8006e78 <LSM6DSO_ACC_SetFullScale+0x28>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	dd06      	ble.n	8006e74 <LSM6DSO_ACC_SetFullScale+0x24>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	dc01      	bgt.n	8006e70 <LSM6DSO_ACC_SetFullScale+0x20>
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e004      	b.n	8006e7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e002      	b.n	8006e7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e000      	b.n	8006e7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006e78:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006e7a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3320      	adds	r3, #32
 8006e80:	7bfa      	ldrb	r2, [r7, #15]
 8006e82:	4611      	mov	r1, r2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fdf7 	bl	8007a78 <lsm6dso_xl_full_scale_set>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	e000      	b.n	8006e98 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3320      	adds	r3, #32
 8006eae:	f107 0208 	add.w	r2, r7, #8
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 f9d8 	bl	800826a <lsm6dso_acceleration_raw_get>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	e00c      	b.n	8006ee0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006ec6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006ece:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006ed6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3320      	adds	r3, #32
 8006efc:	f107 0210 	add.w	r2, r7, #16
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f9b1 	bl	800826a <lsm6dso_acceleration_raw_get>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	e03c      	b.n	8006f8e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fce0 	bl	80068e0 <LSM6DSO_ACC_GetSensitivity>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006f26:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2a:	e030      	b.n	8006f8e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006f2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f44:	ee17 2a90 	vmov	r2, s15
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006f4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f64:	ee17 2a90 	vmov	r2, s15
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006f6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f84:	ee17 2a90 	vmov	r2, s15
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e014      	b.n	8006fd6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f103 0220 	add.w	r2, r3, #32
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f000 ff86 	bl	8007ecc <lsm6dso_gy_data_rate_set>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	e004      	b.n	8006fd6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e01f      	b.n	8007034 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f103 0220 	add.w	r2, r3, #32
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3334      	adds	r3, #52	; 0x34
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f001 f85f 	bl	80080c4 <lsm6dso_gy_data_rate_get>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	e010      	b.n	8007034 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3320      	adds	r3, #32
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f000 ff57 	bl	8007ecc <lsm6dso_gy_data_rate_set>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	e004      	b.n	8007034 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3320      	adds	r3, #32
 800704e:	f107 020b 	add.w	r2, r7, #11
 8007052:	4611      	mov	r1, r2
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fef7 	bl	8007e48 <lsm6dso_gy_full_scale_get>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	e02d      	b.n	80070c2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d825      	bhi.n	80070b8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007099 	.word	0x08007099
 8007078:	08007091 	.word	0x08007091
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070b9 	.word	0x080070b9
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070b1 	.word	0x080070b1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007094:	601a      	str	r2, [r3, #0]
      break;
 8007096:	e013      	b.n	80070c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800709c:	601a      	str	r2, [r3, #0]
      break;
 800709e:	e00f      	b.n	80070c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80070a4:	601a      	str	r2, [r3, #0]
      break;
 80070a6:	e00b      	b.n	80070c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80070ac:	601a      	str	r2, [r3, #0]
      break;
 80070ae:	e007      	b.n	80070c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80070b4:	601a      	str	r2, [r3, #0]
      break;
 80070b6:	e003      	b.n	80070c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295
 80070bc:	60fb      	str	r3, [r7, #12]
      break;
 80070be:	bf00      	nop
  }

  return ret;
 80070c0:	68fb      	ldr	r3, [r7, #12]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	408c0000 	.word	0x408c0000
 80070d0:	410c0000 	.word	0x410c0000
 80070d4:	418c0000 	.word	0x418c0000
 80070d8:	420c0000 	.word	0x420c0000
 80070dc:	428c0000 	.word	0x428c0000

080070e0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3320      	adds	r3, #32
 80070f2:	f107 020b 	add.w	r2, r7, #11
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 ffe3 	bl	80080c4 <lsm6dso_gy_data_rate_get>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007104:	f04f 33ff 	mov.w	r3, #4294967295
 8007108:	e04e      	b.n	80071a8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800710a:	7afb      	ldrb	r3, [r7, #11]
 800710c:	2b0a      	cmp	r3, #10
 800710e:	d846      	bhi.n	800719e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	08007145 	.word	0x08007145
 800711c:	0800714f 	.word	0x0800714f
 8007120:	08007157 	.word	0x08007157
 8007124:	0800715f 	.word	0x0800715f
 8007128:	08007167 	.word	0x08007167
 800712c:	0800716f 	.word	0x0800716f
 8007130:	08007177 	.word	0x08007177
 8007134:	0800717f 	.word	0x0800717f
 8007138:	08007187 	.word	0x08007187
 800713c:	0800718f 	.word	0x0800718f
 8007140:	08007197 	.word	0x08007197
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
      break;
 800714c:	e02b      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	4a17      	ldr	r2, [pc, #92]	; (80071b0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8007152:	601a      	str	r2, [r3, #0]
      break;
 8007154:	e027      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800715a:	601a      	str	r2, [r3, #0]
      break;
 800715c:	e023      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8007162:	601a      	str	r2, [r3, #0]
      break;
 8007164:	e01f      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	4a14      	ldr	r2, [pc, #80]	; (80071bc <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800716a:	601a      	str	r2, [r3, #0]
      break;
 800716c:	e01b      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8007172:	601a      	str	r2, [r3, #0]
      break;
 8007174:	e017      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	4a12      	ldr	r2, [pc, #72]	; (80071c4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800717a:	601a      	str	r2, [r3, #0]
      break;
 800717c:	e013      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8007182:	601a      	str	r2, [r3, #0]
      break;
 8007184:	e00f      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	4a10      	ldr	r2, [pc, #64]	; (80071cc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800718a:	601a      	str	r2, [r3, #0]
      break;
 800718c:	e00b      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8007192:	601a      	str	r2, [r3, #0]
      break;
 8007194:	e007      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	4a0e      	ldr	r2, [pc, #56]	; (80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800719a:	601a      	str	r2, [r3, #0]
      break;
 800719c:	e003      	b.n	80071a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800719e:	f04f 33ff 	mov.w	r3, #4294967295
 80071a2:	60fb      	str	r3, [r7, #12]
      break;
 80071a4:	bf00      	nop
  }

  return ret;
 80071a6:	68fb      	ldr	r3, [r7, #12]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	41480000 	.word	0x41480000
 80071b4:	41d00000 	.word	0x41d00000
 80071b8:	42500000 	.word	0x42500000
 80071bc:	42d00000 	.word	0x42d00000
 80071c0:	43500000 	.word	0x43500000
 80071c4:	43d08000 	.word	0x43d08000
 80071c8:	44504000 	.word	0x44504000
 80071cc:	44d06000 	.word	0x44d06000
 80071d0:	45505000 	.word	0x45505000
 80071d4:	45d05800 	.word	0x45d05800

080071d8 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80071e4:	2100      	movs	r1, #0
 80071e6:	ed97 0a00 	vldr	s0, [r7]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f806 	bl	80071fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80071f0:	4603      	mov	r3, r0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	ed87 0a02 	vstr	s0, [r7, #8]
 8007208:	460b      	mov	r3, r1
 800720a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800721a:	2b01      	cmp	r3, #1
 800721c:	d028      	beq.n	8007270 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800721e:	e05c      	b.n	80072da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f103 0020 	add.w	r0, r3, #32
 8007226:	f107 0214 	add.w	r2, r7, #20
 800722a:	2301      	movs	r3, #1
 800722c:	2116      	movs	r1, #22
 800722e:	f000 fbf3 	bl	8007a18 <lsm6dso_read_reg>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8007238:	f04f 33ff 	mov.w	r3, #4294967295
 800723c:	e06c      	b.n	8007318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800723e:	7d3b      	ldrb	r3, [r7, #20]
 8007240:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04b      	beq.n	80072e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800724a:	7d3b      	ldrb	r3, [r7, #20]
 800724c:	f36f 13c7 	bfc	r3, #7, #1
 8007250:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f103 0020 	add.w	r0, r3, #32
 8007258:	f107 0214 	add.w	r2, r7, #20
 800725c:	2301      	movs	r3, #1
 800725e:	2116      	movs	r1, #22
 8007260:	f000 fbf2 	bl	8007a48 <lsm6dso_write_reg>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d03b      	beq.n	80072e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295
 800726e:	e053      	b.n	8007318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f103 0020 	add.w	r0, r3, #32
 8007276:	f107 0210 	add.w	r2, r7, #16
 800727a:	2301      	movs	r3, #1
 800727c:	2116      	movs	r1, #22
 800727e:	f000 fbcb 	bl	8007a18 <lsm6dso_read_reg>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8007288:	f04f 33ff 	mov.w	r3, #4294967295
 800728c:	e044      	b.n	8007318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800728e:	7c3b      	ldrb	r3, [r7, #16]
 8007290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d112      	bne.n	80072c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800729a:	7c3b      	ldrb	r3, [r7, #16]
 800729c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f103 0020 	add.w	r0, r3, #32
 80072a8:	f107 0210 	add.w	r2, r7, #16
 80072ac:	2301      	movs	r3, #1
 80072ae:	2116      	movs	r1, #22
 80072b0:	f000 fbca 	bl	8007a48 <lsm6dso_write_reg>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	e02b      	b.n	8007318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80072c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80072c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007320 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80072c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d0:	dc00      	bgt.n	80072d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80072d2:	e007      	b.n	80072e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	e004      	b.n	80072e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80072da:	f04f 33ff 	mov.w	r3, #4294967295
 80072de:	61fb      	str	r3, [r7, #28]
      break;
 80072e0:	e000      	b.n	80072e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80072e2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d102      	bne.n	80072f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	e012      	b.n	8007318 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d106      	bne.n	800730a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80072fc:	ed97 0a06 	vldr	s0, [r7, #24]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa45 	bl	8007790 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8007306:	61f8      	str	r0, [r7, #28]
 8007308:	e005      	b.n	8007316 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800730a:	ed97 0a06 	vldr	s0, [r7, #24]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 faca 	bl	80078a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8007314:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8007316:	69fb      	ldr	r3, [r7, #28]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	43500000 	.word	0x43500000
 8007324:	43500000 	.word	0x43500000

08007328 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3320      	adds	r3, #32
 800733a:	f107 020b 	add.w	r2, r7, #11
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fd81 	bl	8007e48 <lsm6dso_gy_full_scale_get>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	e030      	b.n	80073b4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b06      	cmp	r3, #6
 8007356:	d828      	bhi.n	80073aa <LSM6DSO_GYRO_GetFullScale+0x82>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007385 	.word	0x08007385
 8007364:	0800737d 	.word	0x0800737d
 8007368:	0800738d 	.word	0x0800738d
 800736c:	080073ab 	.word	0x080073ab
 8007370:	08007397 	.word	0x08007397
 8007374:	080073ab 	.word	0x080073ab
 8007378:	080073a1 	.word	0x080073a1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	227d      	movs	r2, #125	; 0x7d
 8007380:	601a      	str	r2, [r3, #0]
      break;
 8007382:	e016      	b.n	80073b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	22fa      	movs	r2, #250	; 0xfa
 8007388:	601a      	str	r2, [r3, #0]
      break;
 800738a:	e012      	b.n	80073b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007392:	601a      	str	r2, [r3, #0]
      break;
 8007394:	e00d      	b.n	80073b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800739c:	601a      	str	r2, [r3, #0]
      break;
 800739e:	e008      	b.n	80073b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80073a6:	601a      	str	r2, [r3, #0]
      break;
 80073a8:	e003      	b.n	80073b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80073aa:	f04f 33ff 	mov.w	r3, #4294967295
 80073ae:	60fb      	str	r3, [r7, #12]
      break;
 80073b0:	bf00      	nop
  }

  return ret;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b7d      	cmp	r3, #125	; 0x7d
 80073ca:	dd12      	ble.n	80073f2 <LSM6DSO_GYRO_SetFullScale+0x36>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2bfa      	cmp	r3, #250	; 0xfa
 80073d0:	dd0d      	ble.n	80073ee <LSM6DSO_GYRO_SetFullScale+0x32>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80073d8:	dd07      	ble.n	80073ea <LSM6DSO_GYRO_SetFullScale+0x2e>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e0:	dc01      	bgt.n	80073e6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80073e2:	2304      	movs	r3, #4
 80073e4:	e006      	b.n	80073f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80073e6:	2306      	movs	r3, #6
 80073e8:	e004      	b.n	80073f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e002      	b.n	80073f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80073f2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80073f4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3320      	adds	r3, #32
 80073fa:	7bfa      	ldrb	r2, [r7, #15]
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fcfc 	bl	8007dfc <lsm6dso_gy_full_scale_set>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	e000      	b.n	8007412 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3320      	adds	r3, #32
 8007428:	f107 0208 	add.w	r2, r7, #8
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fed0 	bl	80081d4 <lsm6dso_angular_rate_raw_get>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	e00c      	b.n	800745a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007440:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007448:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007450:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b086      	sub	sp, #24
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3320      	adds	r3, #32
 8007470:	f107 0210 	add.w	r2, r7, #16
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f000 feac 	bl	80081d4 <lsm6dso_angular_rate_raw_get>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	e03c      	b.n	8007502 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fdd4 	bl	800703c <LSM6DSO_GYRO_GetSensitivity>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800749a:	f04f 33ff 	mov.w	r3, #4294967295
 800749e:	e030      	b.n	8007502 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80074a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80074b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074b8:	ee17 2a90 	vmov	r2, s15
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80074c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80074d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074d8:	ee17 2a90 	vmov	r2, s15
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80074e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80074f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f8:	ee17 2a90 	vmov	r2, s15
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
 8007516:	4613      	mov	r3, r2
 8007518:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f103 0020 	add.w	r0, r3, #32
 8007520:	1cba      	adds	r2, r7, #2
 8007522:	78f9      	ldrb	r1, [r7, #3]
 8007524:	2301      	movs	r3, #1
 8007526:	f000 fa8f 	bl	8007a48 <lsm6dso_write_reg>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007530:	f04f 33ff 	mov.w	r3, #4294967295
 8007534:	e000      	b.n	8007538 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800754c:	edd7 7a00 	vldr	s15, [r7]
 8007550:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007650 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	d801      	bhi.n	8007562 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800755e:	230b      	movs	r3, #11
 8007560:	e063      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007562:	edd7 7a00 	vldr	s15, [r7]
 8007566:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800756a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800756e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007572:	d801      	bhi.n	8007578 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8007574:	2301      	movs	r3, #1
 8007576:	e058      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007578:	edd7 7a00 	vldr	s15, [r7]
 800757c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007588:	d801      	bhi.n	800758e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800758a:	2302      	movs	r3, #2
 800758c:	e04d      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800758e:	edd7 7a00 	vldr	s15, [r7]
 8007592:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007654 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	d801      	bhi.n	80075a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80075a0:	2303      	movs	r3, #3
 80075a2:	e042      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80075a4:	edd7 7a00 	vldr	s15, [r7]
 80075a8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007658 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80075ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d801      	bhi.n	80075ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80075b6:	2304      	movs	r3, #4
 80075b8:	e037      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80075ba:	edd7 7a00 	vldr	s15, [r7]
 80075be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800765c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80075c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ca:	d801      	bhi.n	80075d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80075cc:	2305      	movs	r3, #5
 80075ce:	e02c      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80075d0:	edd7 7a00 	vldr	s15, [r7]
 80075d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007660 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80075d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	d801      	bhi.n	80075e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80075e2:	2306      	movs	r3, #6
 80075e4:	e021      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80075e6:	edd7 7a00 	vldr	s15, [r7]
 80075ea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007664 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80075ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f6:	d801      	bhi.n	80075fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80075f8:	2307      	movs	r3, #7
 80075fa:	e016      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80075fc:	edd7 7a00 	vldr	s15, [r7]
 8007600:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007668 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8007604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760c:	d801      	bhi.n	8007612 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800760e:	2308      	movs	r3, #8
 8007610:	e00b      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007612:	edd7 7a00 	vldr	s15, [r7]
 8007616:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800766c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800761a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	d801      	bhi.n	8007628 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007624:	2309      	movs	r3, #9
 8007626:	e000      	b.n	800762a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007628:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800762a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3320      	adds	r3, #32
 8007630:	7bfa      	ldrb	r2, [r7, #15]
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fa7d 	bl	8007b34 <lsm6dso_xl_data_rate_set>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295
 8007644:	e000      	b.n	8007648 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	3fcccccd 	.word	0x3fcccccd
 8007654:	42500000 	.word	0x42500000
 8007658:	42d00000 	.word	0x42d00000
 800765c:	43500000 	.word	0x43500000
 8007660:	43d08000 	.word	0x43d08000
 8007664:	44504000 	.word	0x44504000
 8007668:	44d06000 	.word	0x44d06000
 800766c:	45505000 	.word	0x45505000

08007670 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800767c:	edd7 7a00 	vldr	s15, [r7]
 8007680:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768c:	d801      	bhi.n	8007692 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800768e:	230b      	movs	r3, #11
 8007690:	e063      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007692:	edd7 7a00 	vldr	s15, [r7]
 8007696:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800769a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a2:	d801      	bhi.n	80076a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e058      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80076a8:	edd7 7a00 	vldr	s15, [r7]
 80076ac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80076b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b8:	d801      	bhi.n	80076be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e04d      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80076be:	edd7 7a00 	vldr	s15, [r7]
 80076c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007774 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80076c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	d801      	bhi.n	80076d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80076d0:	2303      	movs	r3, #3
 80076d2:	e042      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80076d4:	edd7 7a00 	vldr	s15, [r7]
 80076d8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007778 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80076dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e4:	d801      	bhi.n	80076ea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80076e6:	2304      	movs	r3, #4
 80076e8:	e037      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80076ea:	edd7 7a00 	vldr	s15, [r7]
 80076ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800777c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80076f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fa:	d801      	bhi.n	8007700 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80076fc:	2305      	movs	r3, #5
 80076fe:	e02c      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007700:	edd7 7a00 	vldr	s15, [r7]
 8007704:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007780 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8007708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	d801      	bhi.n	8007716 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007712:	2306      	movs	r3, #6
 8007714:	e021      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007716:	edd7 7a00 	vldr	s15, [r7]
 800771a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007784 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800771e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007726:	d801      	bhi.n	800772c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007728:	2307      	movs	r3, #7
 800772a:	e016      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800772c:	edd7 7a00 	vldr	s15, [r7]
 8007730:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007788 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773c:	d801      	bhi.n	8007742 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800773e:	2308      	movs	r3, #8
 8007740:	e00b      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007742:	edd7 7a00 	vldr	s15, [r7]
 8007746:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800778c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800774a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800774e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007752:	d801      	bhi.n	8007758 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007754:	2309      	movs	r3, #9
 8007756:	e000      	b.n	800775a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007758:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	3fcccccd 	.word	0x3fcccccd
 8007774:	42500000 	.word	0x42500000
 8007778:	42d00000 	.word	0x42d00000
 800777c:	43500000 	.word	0x43500000
 8007780:	43d08000 	.word	0x43d08000
 8007784:	44504000 	.word	0x44504000
 8007788:	44d06000 	.word	0x44d06000
 800778c:	45505000 	.word	0x45505000

08007790 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800779c:	edd7 7a00 	vldr	s15, [r7]
 80077a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80077a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	d801      	bhi.n	80077b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e058      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077b2:	edd7 7a00 	vldr	s15, [r7]
 80077b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80077ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c2:	d801      	bhi.n	80077c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e04d      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077c8:	edd7 7a00 	vldr	s15, [r7]
 80077cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800788c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80077d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d8:	d801      	bhi.n	80077de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80077da:	2303      	movs	r3, #3
 80077dc:	e042      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077de:	edd7 7a00 	vldr	s15, [r7]
 80077e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80077e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ee:	d801      	bhi.n	80077f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80077f0:	2304      	movs	r3, #4
 80077f2:	e037      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80077f4:	edd7 7a00 	vldr	s15, [r7]
 80077f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007894 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80077fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007804:	d801      	bhi.n	800780a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007806:	2305      	movs	r3, #5
 8007808:	e02c      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800780a:	edd7 7a00 	vldr	s15, [r7]
 800780e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007898 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781a:	d801      	bhi.n	8007820 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800781c:	2306      	movs	r3, #6
 800781e:	e021      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007820:	edd7 7a00 	vldr	s15, [r7]
 8007824:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800789c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007830:	d801      	bhi.n	8007836 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007832:	2307      	movs	r3, #7
 8007834:	e016      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007836:	edd7 7a00 	vldr	s15, [r7]
 800783a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80078a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800783e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007846:	d801      	bhi.n	800784c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007848:	2308      	movs	r3, #8
 800784a:	e00b      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800784c:	edd7 7a00 	vldr	s15, [r7]
 8007850:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80078a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	d801      	bhi.n	8007862 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800785e:	2309      	movs	r3, #9
 8007860:	e000      	b.n	8007864 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007862:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007864:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3320      	adds	r3, #32
 800786a:	7bfa      	ldrb	r2, [r7, #15]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fb2c 	bl	8007ecc <lsm6dso_gy_data_rate_set>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800787a:	f04f 33ff 	mov.w	r3, #4294967295
 800787e:	e000      	b.n	8007882 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	42500000 	.word	0x42500000
 8007890:	42d00000 	.word	0x42d00000
 8007894:	43500000 	.word	0x43500000
 8007898:	43d08000 	.word	0x43d08000
 800789c:	44504000 	.word	0x44504000
 80078a0:	44d06000 	.word	0x44d06000
 80078a4:	45505000 	.word	0x45505000

080078a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80078b4:	edd7 7a00 	vldr	s15, [r7]
 80078b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80078bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c4:	d801      	bhi.n	80078ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e058      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078ca:	edd7 7a00 	vldr	s15, [r7]
 80078ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80078d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	d801      	bhi.n	80078e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80078dc:	2302      	movs	r3, #2
 80078de:	e04d      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078e0:	edd7 7a00 	vldr	s15, [r7]
 80078e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007990 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80078e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f0:	d801      	bhi.n	80078f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80078f2:	2303      	movs	r3, #3
 80078f4:	e042      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80078f6:	edd7 7a00 	vldr	s15, [r7]
 80078fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007994 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80078fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007906:	d801      	bhi.n	800790c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007908:	2304      	movs	r3, #4
 800790a:	e037      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800790c:	edd7 7a00 	vldr	s15, [r7]
 8007910:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007998 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791c:	d801      	bhi.n	8007922 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800791e:	2305      	movs	r3, #5
 8007920:	e02c      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007922:	edd7 7a00 	vldr	s15, [r7]
 8007926:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800799c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800792a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800792e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007932:	d801      	bhi.n	8007938 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007934:	2306      	movs	r3, #6
 8007936:	e021      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007938:	edd7 7a00 	vldr	s15, [r7]
 800793c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80079a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007948:	d801      	bhi.n	800794e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800794a:	2307      	movs	r3, #7
 800794c:	e016      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800794e:	edd7 7a00 	vldr	s15, [r7]
 8007952:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	d801      	bhi.n	8007964 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007960:	2308      	movs	r3, #8
 8007962:	e00b      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007964:	edd7 7a00 	vldr	s15, [r7]
 8007968:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80079a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800796c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007974:	d801      	bhi.n	800797a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007976:	2309      	movs	r3, #9
 8007978:	e000      	b.n	800797c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800797a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	42500000 	.word	0x42500000
 8007994:	42d00000 	.word	0x42d00000
 8007998:	43500000 	.word	0x43500000
 800799c:	43d08000 	.word	0x43d08000
 80079a0:	44504000 	.word	0x44504000
 80079a4:	44d06000 	.word	0x44d06000
 80079a8:	45505000 	.word	0x45505000

080079ac <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	461a      	mov	r2, r3
 80079b8:	460b      	mov	r3, r1
 80079ba:	72fb      	strb	r3, [r7, #11]
 80079bc:	4613      	mov	r3, r2
 80079be:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	695c      	ldr	r4, [r3, #20]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	7b1b      	ldrb	r3, [r3, #12]
 80079cc:	b298      	uxth	r0, r3
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	b299      	uxth	r1, r3
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	47a0      	blx	r4
 80079d8:	4603      	mov	r3, r0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd90      	pop	{r4, r7, pc}

080079e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80079e2:	b590      	push	{r4, r7, lr}
 80079e4:	b087      	sub	sp, #28
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	461a      	mov	r2, r3
 80079ee:	460b      	mov	r3, r1
 80079f0:	72fb      	strb	r3, [r7, #11]
 80079f2:	4613      	mov	r3, r2
 80079f4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	691c      	ldr	r4, [r3, #16]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	7b1b      	ldrb	r3, [r3, #12]
 8007a02:	b298      	uxth	r0, r3
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	b299      	uxth	r1, r3
 8007a08:	893b      	ldrh	r3, [r7, #8]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	47a0      	blx	r4
 8007a0e:	4603      	mov	r3, r0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd90      	pop	{r4, r7, pc}

08007a18 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	72fb      	strb	r3, [r7, #11]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685c      	ldr	r4, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68d8      	ldr	r0, [r3, #12]
 8007a34:	893b      	ldrh	r3, [r7, #8]
 8007a36:	7af9      	ldrb	r1, [r7, #11]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	47a0      	blx	r4
 8007a3c:	6178      	str	r0, [r7, #20]

  return ret;
 8007a3e:	697b      	ldr	r3, [r7, #20]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd90      	pop	{r4, r7, pc}

08007a48 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	607a      	str	r2, [r7, #4]
 8007a52:	461a      	mov	r2, r3
 8007a54:	460b      	mov	r3, r1
 8007a56:	72fb      	strb	r3, [r7, #11]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681c      	ldr	r4, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68d8      	ldr	r0, [r3, #12]
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	7af9      	ldrb	r1, [r7, #11]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	47a0      	blx	r4
 8007a6c:	6178      	str	r0, [r7, #20]

  return ret;
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd90      	pop	{r4, r7, pc}

08007a78 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007a84:	f107 0208 	add.w	r2, r7, #8
 8007a88:	2301      	movs	r3, #1
 8007a8a:	2110      	movs	r1, #16
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ffc3 	bl	8007a18 <lsm6dso_read_reg>
 8007a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10f      	bne.n	8007aba <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	7a3b      	ldrb	r3, [r7, #8]
 8007aa4:	f362 0383 	bfi	r3, r2, #2, #2
 8007aa8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007aaa:	f107 0208 	add.w	r2, r7, #8
 8007aae:	2301      	movs	r3, #1
 8007ab0:	2110      	movs	r1, #16
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ffc8 	bl	8007a48 <lsm6dso_write_reg>
 8007ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007ace:	f107 0208 	add.w	r2, r7, #8
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	2110      	movs	r1, #16
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff ff9e 	bl	8007a18 <lsm6dso_read_reg>
 8007adc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8007ade:	7a3b      	ldrb	r3, [r7, #8]
 8007ae0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d81a      	bhi.n	8007b20 <lsm6dso_xl_full_scale_get+0x5c>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <lsm6dso_xl_full_scale_get+0x2c>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b09 	.word	0x08007b09
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b19 	.word	0x08007b19
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e00f      	b.n	8007b28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e00b      	b.n	8007b28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2202      	movs	r2, #2
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	e007      	b.n	8007b28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e003      	b.n	8007b28 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	bf00      	nop
  }

  return ret;
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop

08007b34 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007b44:	f107 030c 	add.w	r3, r7, #12
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fca1 	bl	8008492 <lsm6dso_fsm_enable_get>
 8007b50:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f040 80c4 	bne.w	8007ce2 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007b5a:	7b3b      	ldrb	r3, [r7, #12]
 8007b5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007b62:	7b3b      	ldrb	r3, [r7, #12]
 8007b64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007b68:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007b6e:	7b3b      	ldrb	r3, [r7, #12]
 8007b70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007b7a:	7b3b      	ldrb	r3, [r7, #12]
 8007b7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007b82:	4313      	orrs	r3, r2
 8007b84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007b86:	7b3b      	ldrb	r3, [r7, #12]
 8007b88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007b92:	7b3b      	ldrb	r3, [r7, #12]
 8007b94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007b98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007b9e:	7b3b      	ldrb	r3, [r7, #12]
 8007ba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007ba4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007baa:	7b3b      	ldrb	r3, [r7, #12]
 8007bac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007bb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007bb6:	7b7b      	ldrb	r3, [r7, #13]
 8007bb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007bc2:	7b7b      	ldrb	r3, [r7, #13]
 8007bc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007bc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007bce:	7b7b      	ldrb	r3, [r7, #13]
 8007bd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007bd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007bda:	7b7b      	ldrb	r3, [r7, #13]
 8007bdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007be0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007be2:	4313      	orrs	r3, r2
 8007be4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007be6:	7b7b      	ldrb	r3, [r7, #13]
 8007be8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007bec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007bf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007bfe:	7b7b      	ldrb	r3, [r7, #13]
 8007c00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007c04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007c06:	4313      	orrs	r3, r2
 8007c08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007c0a:	7b7b      	ldrb	r3, [r7, #13]
 8007c0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007c10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007c12:	4313      	orrs	r3, r2
 8007c14:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d163      	bne.n	8007ce2 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007c1a:	f107 030b 	add.w	r3, r7, #11
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc57 	bl	80084d4 <lsm6dso_fsm_data_rate_get>
 8007c26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d159      	bne.n	8007ce2 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d853      	bhi.n	8007cdc <lsm6dso_xl_data_rate_set+0x1a8>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <lsm6dso_xl_data_rate_set+0x108>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c5f 	.word	0x08007c5f
 8007c44:	08007c7d 	.word	0x08007c7d
 8007c48:	08007ca7 	.word	0x08007ca7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007c52:	2301      	movs	r3, #1
 8007c54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007c56:	e045      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8007c5c:	e042      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007c64:	2302      	movs	r3, #2
 8007c66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007c68:	e03c      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d102      	bne.n	8007c76 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007c70:	2302      	movs	r3, #2
 8007c72:	75fb      	strb	r3, [r7, #23]
            break;
 8007c74:	e036      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	75fb      	strb	r3, [r7, #23]
            break;
 8007c7a:	e033      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007c82:	2303      	movs	r3, #3
 8007c84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007c86:	e02d      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d102      	bne.n	8007c94 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	75fb      	strb	r3, [r7, #23]
            break;
 8007c92:	e027      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d102      	bne.n	8007ca0 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	75fb      	strb	r3, [r7, #23]
            break;
 8007c9e:	e021      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ca4:	e01e      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007cac:	2304      	movs	r3, #4
 8007cae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007cb0:	e018      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d102      	bne.n	8007cbe <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007cb8:	2304      	movs	r3, #4
 8007cba:	75fb      	strb	r3, [r7, #23]
            break;
 8007cbc:	e012      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d102      	bne.n	8007cca <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	75fb      	strb	r3, [r7, #23]
            break;
 8007cc8:	e00c      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d102      	bne.n	8007cd6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	75fb      	strb	r3, [r7, #23]
            break;
 8007cd4:	e006      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	75fb      	strb	r3, [r7, #23]
            break;
 8007cda:	e003      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	75fb      	strb	r3, [r7, #23]
            break;
 8007ce0:	e000      	b.n	8007ce4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8007ce2:	bf00      	nop
    }
  }

  if (ret == 0)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007cea:	f107 0208 	add.w	r2, r7, #8
 8007cee:	2301      	movs	r3, #1
 8007cf0:	2110      	movs	r1, #16
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff fe90 	bl	8007a18 <lsm6dso_read_reg>
 8007cf8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10f      	bne.n	8007d20 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	7a3b      	ldrb	r3, [r7, #8]
 8007d0a:	f362 1307 	bfi	r3, r2, #4, #4
 8007d0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007d10:	f107 0208 	add.w	r2, r7, #8
 8007d14:	2301      	movs	r3, #1
 8007d16:	2110      	movs	r1, #16
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fe95 	bl	8007a48 <lsm6dso_write_reg>
 8007d1e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007d20:	693b      	ldr	r3, [r7, #16]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007d36:	f107 0208 	add.w	r2, r7, #8
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	2110      	movs	r1, #16
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fe6a 	bl	8007a18 <lsm6dso_read_reg>
 8007d44:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007d46:	7a3b      	ldrb	r3, [r7, #8]
 8007d48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b0b      	cmp	r3, #11
 8007d50:	d84a      	bhi.n	8007de8 <lsm6dso_xl_data_rate_get+0xbc>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <lsm6dso_xl_data_rate_get+0x2c>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007d91 	.word	0x08007d91
 8007d60:	08007d99 	.word	0x08007d99
 8007d64:	08007da1 	.word	0x08007da1
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007dc1 	.word	0x08007dc1
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007de1 	.word	0x08007de1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e02f      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	701a      	strb	r2, [r3, #0]
      break;
 8007d96:	e02b      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e027      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2203      	movs	r2, #3
 8007da4:	701a      	strb	r2, [r3, #0]
      break;
 8007da6:	e023      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2204      	movs	r2, #4
 8007dac:	701a      	strb	r2, [r3, #0]
      break;
 8007dae:	e01f      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2205      	movs	r2, #5
 8007db4:	701a      	strb	r2, [r3, #0]
      break;
 8007db6:	e01b      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2206      	movs	r2, #6
 8007dbc:	701a      	strb	r2, [r3, #0]
      break;
 8007dbe:	e017      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2207      	movs	r2, #7
 8007dc4:	701a      	strb	r2, [r3, #0]
      break;
 8007dc6:	e013      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2208      	movs	r2, #8
 8007dcc:	701a      	strb	r2, [r3, #0]
      break;
 8007dce:	e00f      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2209      	movs	r2, #9
 8007dd4:	701a      	strb	r2, [r3, #0]
      break;
 8007dd6:	e00b      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	220a      	movs	r2, #10
 8007ddc:	701a      	strb	r2, [r3, #0]
      break;
 8007dde:	e007      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	220b      	movs	r2, #11
 8007de4:	701a      	strb	r2, [r3, #0]
      break;
 8007de6:	e003      	b.n	8007df0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
      break;
 8007dee:	bf00      	nop
  }

  return ret;
 8007df0:	68fb      	ldr	r3, [r7, #12]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007e08:	f107 0208 	add.w	r2, r7, #8
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	2111      	movs	r1, #17
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fe01 	bl	8007a18 <lsm6dso_read_reg>
 8007e16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10f      	bne.n	8007e3e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	7a3b      	ldrb	r3, [r7, #8]
 8007e28:	f362 0343 	bfi	r3, r2, #1, #3
 8007e2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007e2e:	f107 0208 	add.w	r2, r7, #8
 8007e32:	2301      	movs	r3, #1
 8007e34:	2111      	movs	r1, #17
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fe06 	bl	8007a48 <lsm6dso_write_reg>
 8007e3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007e52:	f107 0208 	add.w	r2, r7, #8
 8007e56:	2301      	movs	r3, #1
 8007e58:	2111      	movs	r1, #17
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fddc 	bl	8007a18 <lsm6dso_read_reg>
 8007e60:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8007e62:	7a3b      	ldrb	r3, [r7, #8]
 8007e64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b06      	cmp	r3, #6
 8007e6c:	d824      	bhi.n	8007eb8 <lsm6dso_gy_full_scale_get+0x70>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <lsm6dso_gy_full_scale_get+0x2c>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e91 	.word	0x08007e91
 8007e78:	08007e99 	.word	0x08007e99
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007eb1 	.word	0x08007eb1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
      break;
 8007e96:	e013      	b.n	8007ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
      break;
 8007e9e:	e00f      	b.n	8007ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	701a      	strb	r2, [r3, #0]
      break;
 8007ea6:	e00b      	b.n	8007ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2204      	movs	r2, #4
 8007eac:	701a      	strb	r2, [r3, #0]
      break;
 8007eae:	e007      	b.n	8007ec0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2206      	movs	r2, #6
 8007eb4:	701a      	strb	r2, [r3, #0]
      break;
 8007eb6:	e003      	b.n	8007ec0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
      break;
 8007ebe:	bf00      	nop
  }

  return ret;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop

08007ecc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007edc:	f107 030c 	add.w	r3, r7, #12
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fad5 	bl	8008492 <lsm6dso_fsm_enable_get>
 8007ee8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 80c4 	bne.w	800807a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007ef2:	7b3b      	ldrb	r3, [r7, #12]
 8007ef4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ef8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007efa:	7b3b      	ldrb	r3, [r7, #12]
 8007efc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007f00:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007f02:	4313      	orrs	r3, r2
 8007f04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007f06:	7b3b      	ldrb	r3, [r7, #12]
 8007f08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007f0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007f12:	7b3b      	ldrb	r3, [r7, #12]
 8007f14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007f1e:	7b3b      	ldrb	r3, [r7, #12]
 8007f20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007f24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007f26:	4313      	orrs	r3, r2
 8007f28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007f2a:	7b3b      	ldrb	r3, [r7, #12]
 8007f2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007f30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007f32:	4313      	orrs	r3, r2
 8007f34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007f36:	7b3b      	ldrb	r3, [r7, #12]
 8007f38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007f3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007f42:	7b3b      	ldrb	r3, [r7, #12]
 8007f44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007f48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007f4e:	7b7b      	ldrb	r3, [r7, #13]
 8007f50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007f5a:	7b7b      	ldrb	r3, [r7, #13]
 8007f5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007f60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007f62:	4313      	orrs	r3, r2
 8007f64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007f66:	7b7b      	ldrb	r3, [r7, #13]
 8007f68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007f6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007f72:	7b7b      	ldrb	r3, [r7, #13]
 8007f74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007f7e:	7b7b      	ldrb	r3, [r7, #13]
 8007f80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007f84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007f86:	4313      	orrs	r3, r2
 8007f88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007f8a:	7b7b      	ldrb	r3, [r7, #13]
 8007f8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007f90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007f96:	7b7b      	ldrb	r3, [r7, #13]
 8007f98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007f9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007fa2:	7b7b      	ldrb	r3, [r7, #13]
 8007fa4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007fa8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d163      	bne.n	800807a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007fb2:	f107 030b 	add.w	r3, r7, #11
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fa8b 	bl	80084d4 <lsm6dso_fsm_data_rate_get>
 8007fbe:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d159      	bne.n	800807a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d853      	bhi.n	8008074 <lsm6dso_gy_data_rate_set+0x1a8>
 8007fcc:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <lsm6dso_gy_data_rate_set+0x108>)
 8007fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd2:	bf00      	nop
 8007fd4:	08007fe5 	.word	0x08007fe5
 8007fd8:	08007ff7 	.word	0x08007ff7
 8007fdc:	08008015 	.word	0x08008015
 8007fe0:	0800803f 	.word	0x0800803f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007fea:	2301      	movs	r3, #1
 8007fec:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007fee:	e045      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ff4:	e042      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008000:	e03c      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d102      	bne.n	800800e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008008:	2302      	movs	r3, #2
 800800a:	75fb      	strb	r3, [r7, #23]
            break;
 800800c:	e036      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	75fb      	strb	r3, [r7, #23]
            break;
 8008012:	e033      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d102      	bne.n	8008020 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800801a:	2303      	movs	r3, #3
 800801c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800801e:	e02d      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d102      	bne.n	800802c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008026:	2303      	movs	r3, #3
 8008028:	75fb      	strb	r3, [r7, #23]
            break;
 800802a:	e027      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d102      	bne.n	8008038 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008032:	2303      	movs	r3, #3
 8008034:	75fb      	strb	r3, [r7, #23]
            break;
 8008036:	e021      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	75fb      	strb	r3, [r7, #23]
            break;
 800803c:	e01e      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008044:	2304      	movs	r3, #4
 8008046:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008048:	e018      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d102      	bne.n	8008056 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008050:	2304      	movs	r3, #4
 8008052:	75fb      	strb	r3, [r7, #23]
            break;
 8008054:	e012      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d102      	bne.n	8008062 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800805c:	2304      	movs	r3, #4
 800805e:	75fb      	strb	r3, [r7, #23]
            break;
 8008060:	e00c      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d102      	bne.n	800806e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008068:	2304      	movs	r3, #4
 800806a:	75fb      	strb	r3, [r7, #23]
            break;
 800806c:	e006      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	75fb      	strb	r3, [r7, #23]
            break;
 8008072:	e003      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	75fb      	strb	r3, [r7, #23]
            break;
 8008078:	e000      	b.n	800807c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800807a:	bf00      	nop
    }
  }

  if (ret == 0)
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d107      	bne.n	8008092 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008082:	f107 0208 	add.w	r2, r7, #8
 8008086:	2301      	movs	r3, #1
 8008088:	2111      	movs	r1, #17
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff fcc4 	bl	8007a18 <lsm6dso_read_reg>
 8008090:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10f      	bne.n	80080b8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	7a3b      	ldrb	r3, [r7, #8]
 80080a2:	f362 1307 	bfi	r3, r2, #4, #4
 80080a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80080a8:	f107 0208 	add.w	r2, r7, #8
 80080ac:	2301      	movs	r3, #1
 80080ae:	2111      	movs	r1, #17
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fcc9 	bl	8007a48 <lsm6dso_write_reg>
 80080b6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80080b8:	693b      	ldr	r3, [r7, #16]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop

080080c4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80080ce:	f107 0208 	add.w	r2, r7, #8
 80080d2:	2301      	movs	r3, #1
 80080d4:	2111      	movs	r1, #17
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fc9e 	bl	8007a18 <lsm6dso_read_reg>
 80080dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80080de:	7a3b      	ldrb	r3, [r7, #8]
 80080e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b0a      	cmp	r3, #10
 80080e8:	d844      	bhi.n	8008174 <lsm6dso_gy_data_rate_get+0xb0>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <lsm6dso_gy_data_rate_get+0x2c>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	08008125 	.word	0x08008125
 80080f8:	0800812d 	.word	0x0800812d
 80080fc:	08008135 	.word	0x08008135
 8008100:	0800813d 	.word	0x0800813d
 8008104:	08008145 	.word	0x08008145
 8008108:	0800814d 	.word	0x0800814d
 800810c:	08008155 	.word	0x08008155
 8008110:	0800815d 	.word	0x0800815d
 8008114:	08008165 	.word	0x08008165
 8008118:	0800816d 	.word	0x0800816d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
      break;
 8008122:	e02b      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2201      	movs	r2, #1
 8008128:	701a      	strb	r2, [r3, #0]
      break;
 800812a:	e027      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2202      	movs	r2, #2
 8008130:	701a      	strb	r2, [r3, #0]
      break;
 8008132:	e023      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2203      	movs	r2, #3
 8008138:	701a      	strb	r2, [r3, #0]
      break;
 800813a:	e01f      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2204      	movs	r2, #4
 8008140:	701a      	strb	r2, [r3, #0]
      break;
 8008142:	e01b      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2205      	movs	r2, #5
 8008148:	701a      	strb	r2, [r3, #0]
      break;
 800814a:	e017      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2206      	movs	r2, #6
 8008150:	701a      	strb	r2, [r3, #0]
      break;
 8008152:	e013      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2207      	movs	r2, #7
 8008158:	701a      	strb	r2, [r3, #0]
      break;
 800815a:	e00f      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2208      	movs	r2, #8
 8008160:	701a      	strb	r2, [r3, #0]
      break;
 8008162:	e00b      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2209      	movs	r2, #9
 8008168:	701a      	strb	r2, [r3, #0]
      break;
 800816a:	e007      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	220a      	movs	r2, #10
 8008170:	701a      	strb	r2, [r3, #0]
      break;
 8008172:	e003      	b.n	800817c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
      break;
 800817a:	bf00      	nop
  }

  return ret;
 800817c:	68fb      	ldr	r3, [r7, #12]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop

08008188 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008194:	f107 0208 	add.w	r2, r7, #8
 8008198:	2301      	movs	r3, #1
 800819a:	2112      	movs	r1, #18
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff fc3b 	bl	8007a18 <lsm6dso_read_reg>
 80081a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	7a3b      	ldrb	r3, [r7, #8]
 80081b4:	f362 1386 	bfi	r3, r2, #6, #1
 80081b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80081ba:	f107 0208 	add.w	r2, r7, #8
 80081be:	2301      	movs	r3, #1
 80081c0:	2112      	movs	r1, #18
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fc40 	bl	8007a48 <lsm6dso_write_reg>
 80081c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80081ca:	68fb      	ldr	r3, [r7, #12]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80081de:	f107 020c 	add.w	r2, r7, #12
 80081e2:	2306      	movs	r3, #6
 80081e4:	2122      	movs	r1, #34	; 0x22
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff fc16 	bl	8007a18 <lsm6dso_read_reg>
 80081ec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	b21a      	sxth	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	b29a      	uxth	r2, r3
 8008202:	7b3b      	ldrb	r3, [r7, #12]
 8008204:	b29b      	uxth	r3, r3
 8008206:	4413      	add	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	b21a      	sxth	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008210:	7bfa      	ldrb	r2, [r7, #15]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	3302      	adds	r3, #2
 8008216:	b212      	sxth	r2, r2
 8008218:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	3302      	adds	r3, #2
 800821e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008222:	b29b      	uxth	r3, r3
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	b29a      	uxth	r2, r3
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	b29b      	uxth	r3, r3
 800822c:	4413      	add	r3, r2
 800822e:	b29a      	uxth	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	3302      	adds	r3, #2
 8008234:	b212      	sxth	r2, r2
 8008236:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008238:	7c7a      	ldrb	r2, [r7, #17]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	3304      	adds	r3, #4
 800823e:	b212      	sxth	r2, r2
 8008240:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	3304      	adds	r3, #4
 8008246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800824a:	b29b      	uxth	r3, r3
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	b29a      	uxth	r2, r3
 8008250:	7c3b      	ldrb	r3, [r7, #16]
 8008252:	b29b      	uxth	r3, r3
 8008254:	4413      	add	r3, r2
 8008256:	b29a      	uxth	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3304      	adds	r3, #4
 800825c:	b212      	sxth	r2, r2
 800825e:	801a      	strh	r2, [r3, #0]

  return ret;
 8008260:	697b      	ldr	r3, [r7, #20]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8008274:	f107 020c 	add.w	r2, r7, #12
 8008278:	2306      	movs	r3, #6
 800827a:	2128      	movs	r1, #40	; 0x28
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fbcb 	bl	8007a18 <lsm6dso_read_reg>
 8008282:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008284:	7b7b      	ldrb	r3, [r7, #13]
 8008286:	b21a      	sxth	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008292:	b29b      	uxth	r3, r3
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	b29a      	uxth	r2, r3
 8008298:	7b3b      	ldrb	r3, [r7, #12]
 800829a:	b29b      	uxth	r3, r3
 800829c:	4413      	add	r3, r2
 800829e:	b29b      	uxth	r3, r3
 80082a0:	b21a      	sxth	r2, r3
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80082a6:	7bfa      	ldrb	r2, [r7, #15]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	3302      	adds	r3, #2
 80082ac:	b212      	sxth	r2, r2
 80082ae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3302      	adds	r3, #2
 80082b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	b29a      	uxth	r2, r3
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4413      	add	r3, r2
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	3302      	adds	r3, #2
 80082ca:	b212      	sxth	r2, r2
 80082cc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80082ce:	7c7a      	ldrb	r2, [r7, #17]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	3304      	adds	r3, #4
 80082d4:	b212      	sxth	r2, r2
 80082d6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	3304      	adds	r3, #4
 80082dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	7c3b      	ldrb	r3, [r7, #16]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	4413      	add	r3, r2
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	3304      	adds	r3, #4
 80082f2:	b212      	sxth	r2, r2
 80082f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80082f6:	697b      	ldr	r3, [r7, #20]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800830c:	f107 0208 	add.w	r2, r7, #8
 8008310:	2301      	movs	r3, #1
 8008312:	2101      	movs	r1, #1
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff fb7f 	bl	8007a18 <lsm6dso_read_reg>
 800831a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10f      	bne.n	8008342 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	b2da      	uxtb	r2, r3
 800832a:	7a3b      	ldrb	r3, [r7, #8]
 800832c:	f362 1387 	bfi	r3, r2, #6, #2
 8008330:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8008332:	f107 0208 	add.w	r2, r7, #8
 8008336:	2301      	movs	r3, #1
 8008338:	2101      	movs	r1, #1
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fb84 	bl	8007a48 <lsm6dso_write_reg>
 8008340:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008356:	2301      	movs	r3, #1
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	210f      	movs	r1, #15
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fb5b 	bl	8007a18 <lsm6dso_read_reg>
 8008362:	60f8      	str	r0, [r7, #12]

  return ret;
 8008364:	68fb      	ldr	r3, [r7, #12]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800837a:	f107 0208 	add.w	r2, r7, #8
 800837e:	2301      	movs	r3, #1
 8008380:	2112      	movs	r1, #18
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fb48 	bl	8007a18 <lsm6dso_read_reg>
 8008388:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10f      	bne.n	80083b0 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	b2da      	uxtb	r2, r3
 8008398:	7a3b      	ldrb	r3, [r7, #8]
 800839a:	f362 0382 	bfi	r3, r2, #2, #1
 800839e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80083a0:	f107 0208 	add.w	r2, r7, #8
 80083a4:	2301      	movs	r3, #1
 80083a6:	2112      	movs	r1, #18
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fb4d 	bl	8007a48 <lsm6dso_write_reg>
 80083ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80083b0:	68fb      	ldr	r3, [r7, #12]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b086      	sub	sp, #24
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80083c6:	f107 020c 	add.w	r2, r7, #12
 80083ca:	2301      	movs	r3, #1
 80083cc:	2118      	movs	r1, #24
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fb22 	bl	8007a18 <lsm6dso_read_reg>
 80083d4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d111      	bne.n	8008400 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	09db      	lsrs	r3, r3, #7
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	7b3b      	ldrb	r3, [r7, #12]
 80083ea:	f362 0341 	bfi	r3, r2, #1, #1
 80083ee:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80083f0:	f107 020c 	add.w	r2, r7, #12
 80083f4:	2301      	movs	r3, #1
 80083f6:	2118      	movs	r1, #24
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff fb25 	bl	8007a48 <lsm6dso_write_reg>
 80083fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d107      	bne.n	8008416 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8008406:	f107 0210 	add.w	r2, r7, #16
 800840a:	2301      	movs	r3, #1
 800840c:	2162      	movs	r1, #98	; 0x62
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff fb02 	bl	8007a18 <lsm6dso_read_reg>
 8008414:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10f      	bne.n	800843c <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	b2da      	uxtb	r2, r3
 8008424:	7c3b      	ldrb	r3, [r7, #16]
 8008426:	f362 03c4 	bfi	r3, r2, #3, #2
 800842a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800842c:	f107 0210 	add.w	r2, r7, #16
 8008430:	2301      	movs	r3, #1
 8008432:	2162      	movs	r1, #98	; 0x62
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fb07 	bl	8007a48 <lsm6dso_write_reg>
 800843a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800843c:	697b      	ldr	r3, [r7, #20]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008452:	f107 0208 	add.w	r2, r7, #8
 8008456:	2301      	movs	r3, #1
 8008458:	210a      	movs	r1, #10
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff fadc 	bl	8007a18 <lsm6dso_read_reg>
 8008460:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10f      	bne.n	8008488 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	b2da      	uxtb	r2, r3
 8008470:	7a3b      	ldrb	r3, [r7, #8]
 8008472:	f362 0302 	bfi	r3, r2, #0, #3
 8008476:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008478:	f107 0208 	add.w	r2, r7, #8
 800847c:	2301      	movs	r3, #1
 800847e:	210a      	movs	r1, #10
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fae1 	bl	8007a48 <lsm6dso_write_reg>
 8008486:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008488:	68fb      	ldr	r3, [r7, #12]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800849c:	2102      	movs	r1, #2
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ff2e 	bl	8008300 <lsm6dso_mem_bank_set>
 80084a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80084ac:	2302      	movs	r3, #2
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	2146      	movs	r1, #70	; 0x46
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fab0 	bl	8007a18 <lsm6dso_read_reg>
 80084b8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80084c0:	2100      	movs	r1, #0
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff ff1c 	bl	8008300 <lsm6dso_mem_bank_set>
 80084c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80084ca:	68fb      	ldr	r3, [r7, #12]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80084de:	2102      	movs	r1, #2
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff0d 	bl	8008300 <lsm6dso_mem_bank_set>
 80084e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80084ee:	f107 0208 	add.w	r2, r7, #8
 80084f2:	2301      	movs	r3, #1
 80084f4:	215f      	movs	r1, #95	; 0x5f
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff fa8e 	bl	8007a18 <lsm6dso_read_reg>
 80084fc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d12a      	bne.n	800855a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8008504:	7a3b      	ldrb	r3, [r7, #8]
 8008506:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b03      	cmp	r3, #3
 800850e:	d81b      	bhi.n	8008548 <lsm6dso_fsm_data_rate_get+0x74>
 8008510:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <lsm6dso_fsm_data_rate_get+0x44>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	08008529 	.word	0x08008529
 800851c:	08008531 	.word	0x08008531
 8008520:	08008539 	.word	0x08008539
 8008524:	08008541 	.word	0x08008541
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
        break;
 800852e:	e00f      	b.n	8008550 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2201      	movs	r2, #1
 8008534:	701a      	strb	r2, [r3, #0]
        break;
 8008536:	e00b      	b.n	8008550 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2202      	movs	r2, #2
 800853c:	701a      	strb	r2, [r3, #0]
        break;
 800853e:	e007      	b.n	8008550 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2203      	movs	r2, #3
 8008544:	701a      	strb	r2, [r3, #0]
        break;
 8008546:	e003      	b.n	8008550 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
        break;
 800854e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008550:	2100      	movs	r1, #0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fed4 	bl	8008300 <lsm6dso_mem_bank_set>
 8008558:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800855a:	68fb      	ldr	r3, [r7, #12]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8008574:	f04f 33ff 	mov.w	r3, #4294967295
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	e034      	b.n	80085e6 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	7b1a      	ldrb	r2, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	695a      	ldr	r2, [r3, #20]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a0e      	ldr	r2, [pc, #56]	; (80085f0 <STTS751_RegisterBusIO+0x8c>)
 80085b8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a0d      	ldr	r2, [pc, #52]	; (80085f4 <STTS751_RegisterBusIO+0x90>)
 80085be:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	69da      	ldr	r2, [r3, #28]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4798      	blx	r3
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	e002      	b.n	80085e6 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295
 80085e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	08008a79 	.word	0x08008a79
 80085f4:	08008ae7 	.word	0x08008ae7

080085f8 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008606:	2b00      	cmp	r3, #0
 8008608:	d127      	bne.n	800865a <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3320      	adds	r3, #32
 800860e:	2101      	movs	r1, #1
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fc4c 	bl	8008eae <stts751_pin_event_route_set>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 800861c:	f04f 33ff 	mov.w	r3, #4294967295
 8008620:	e020      	b.n	8008664 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008628:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3320      	adds	r3, #32
 800862e:	2103      	movs	r1, #3
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fbaf 	bl	8008d94 <stts751_resolution_set>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 800863c:	f04f 33ff 	mov.w	r3, #4294967295
 8008640:	e010      	b.n	8008664 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3320      	adds	r3, #32
 8008646:	2180      	movs	r1, #128	; 0x80
 8008648:	4618      	mov	r0, r3
 800864a:	f000 facd 	bl	8008be8 <stts751_temp_data_rate_set>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8008654:	f04f 33ff 	mov.w	r3, #4294967295
 8008658:	e004      	b.n	8008664 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800867a:	2b01      	cmp	r3, #1
 800867c:	d108      	bne.n	8008690 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f870 	bl	8008764 <STTS751_TEMP_Disable>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
 800868e:	e004      	b.n	800869a <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3320      	adds	r3, #32
 80086b0:	f107 020c 	add.w	r2, r7, #12
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fc1f 	bl	8008efa <stts751_device_id_get>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 80086c2:	f04f 33ff 	mov.w	r3, #4294967295
 80086c6:	e003      	b.n	80086d0 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2200      	movs	r2, #0
 80086e6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2200      	movs	r2, #0
 80086ec:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2201      	movs	r2, #1
 80086f2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008708:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	e012      	b.n	800875c <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800873c:	eeb0 0a67 	vmov.f32	s0, s15
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8b5 	bl	80088b0 <STTS751_TEMP_SetOutputDataRate>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
 8008750:	e004      	b.n	800875c <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e01c      	b.n	80087b4 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3334      	adds	r3, #52	; 0x34
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f81b 	bl	80087bc <STTS751_TEMP_GetOutputDataRate>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 800878c:	f04f 33ff 	mov.w	r3, #4294967295
 8008790:	e010      	b.n	80087b4 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3320      	adds	r3, #32
 8008796:	2180      	movs	r1, #128	; 0x80
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fa25 	bl	8008be8 <stts751_temp_data_rate_set>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295
 80087a8:	e004      	b.n	80087b4 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3320      	adds	r3, #32
 80087ce:	f107 020b 	add.w	r2, r7, #11
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fa5d 	bl	8008c94 <stts751_temp_data_rate_get>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295
 80087e4:	e060      	b.n	80088a8 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 80087e6:	7afb      	ldrb	r3, [r7, #11]
 80087e8:	2b90      	cmp	r3, #144	; 0x90
 80087ea:	d021      	beq.n	8008830 <STTS751_TEMP_GetOutputDataRate+0x74>
 80087ec:	2b90      	cmp	r3, #144	; 0x90
 80087ee:	dc56      	bgt.n	800889e <STTS751_TEMP_GetOutputDataRate+0xe2>
 80087f0:	2b09      	cmp	r3, #9
 80087f2:	dc1b      	bgt.n	800882c <STTS751_TEMP_GetOutputDataRate+0x70>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	db52      	blt.n	800889e <STTS751_TEMP_GetOutputDataRate+0xe2>
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d850      	bhi.n	800889e <STTS751_TEMP_GetOutputDataRate+0xe2>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <STTS751_TEMP_GetOutputDataRate+0x48>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	0800883b 	.word	0x0800883b
 8008808:	08008845 	.word	0x08008845
 800880c:	0800884f 	.word	0x0800884f
 8008810:	08008859 	.word	0x08008859
 8008814:	08008863 	.word	0x08008863
 8008818:	0800886d 	.word	0x0800886d
 800881c:	08008877 	.word	0x08008877
 8008820:	08008881 	.word	0x08008881
 8008824:	0800888b 	.word	0x0800888b
 8008828:	08008895 	.word	0x08008895
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d136      	bne.n	800889e <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f04f 0200 	mov.w	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
      break;
 8008838:	e035      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008840:	601a      	str	r2, [r3, #0]
      break;
 8008842:	e030      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800884a:	601a      	str	r2, [r3, #0]
      break;
 800884c:	e02b      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8008854:	601a      	str	r2, [r3, #0]
      break;
 8008856:	e026      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800885e:	601a      	str	r2, [r3, #0]
      break;
 8008860:	e021      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008868:	601a      	str	r2, [r3, #0]
      break;
 800886a:	e01c      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008872:	601a      	str	r2, [r3, #0]
      break;
 8008874:	e017      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800887c:	601a      	str	r2, [r3, #0]
      break;
 800887e:	e012      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8008886:	601a      	str	r2, [r3, #0]
      break;
 8008888:	e00d      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8008890:	601a      	str	r2, [r3, #0]
      break;
 8008892:	e008      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800889a:	601a      	str	r2, [r3, #0]
      break;
 800889c:	e003      	b.n	80088a6 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295
 80088a2:	60fb      	str	r3, [r7, #12]
      break;
 80088a4:	bf00      	nop
  }

  return ret;
 80088a6:	68fb      	ldr	r3, [r7, #12]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3320      	adds	r3, #32
 80088c0:	f107 020e 	add.w	r2, r7, #14
 80088c4:	4611      	mov	r1, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fa8a 	bl	8008de0 <stts751_resolution_get>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	e0a5      	b.n	8008a24 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80088d8:	edd7 7a00 	vldr	s15, [r7]
 80088dc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80088e0:	eef4 7a47 	vcmp.f32	s15, s14
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	d10e      	bne.n	8008908 <STTS751_TEMP_SetOutputDataRate+0x58>
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d10b      	bne.n	8008908 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3320      	adds	r3, #32
 80088f4:	2101      	movs	r1, #1
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fa4c 	bl	8008d94 <stts751_resolution_set>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	e08d      	b.n	8008a24 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008908:	edd7 7a00 	vldr	s15, [r7]
 800890c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008a2c <STTS751_TEMP_SetOutputDataRate+0x17c>
 8008910:	eef4 7a47 	vcmp.f32	s15, s14
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	d111      	bne.n	800893e <STTS751_TEMP_SetOutputDataRate+0x8e>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d002      	beq.n	8008926 <STTS751_TEMP_SetOutputDataRate+0x76>
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d10b      	bne.n	800893e <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3320      	adds	r3, #32
 800892a:	2100      	movs	r1, #0
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fa31 	bl	8008d94 <stts751_resolution_set>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	e072      	b.n	8008a24 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800893e:	edd7 7a00 	vldr	s15, [r7]
 8008942:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008a30 <STTS751_TEMP_SetOutputDataRate+0x180>
 8008946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894e:	d801      	bhi.n	8008954 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8008950:	2300      	movs	r3, #0
 8008952:	e058      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008954:	edd7 7a00 	vldr	s15, [r7]
 8008958:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800895c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008964:	d801      	bhi.n	800896a <STTS751_TEMP_SetOutputDataRate+0xba>
 8008966:	2301      	movs	r3, #1
 8008968:	e04d      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 800896a:	edd7 7a00 	vldr	s15, [r7]
 800896e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800897a:	d801      	bhi.n	8008980 <STTS751_TEMP_SetOutputDataRate+0xd0>
 800897c:	2302      	movs	r3, #2
 800897e:	e042      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008980:	edd7 7a00 	vldr	s15, [r7]
 8008984:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008990:	d801      	bhi.n	8008996 <STTS751_TEMP_SetOutputDataRate+0xe6>
 8008992:	2303      	movs	r3, #3
 8008994:	e037      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008996:	edd7 7a00 	vldr	s15, [r7]
 800899a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800899e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d801      	bhi.n	80089ac <STTS751_TEMP_SetOutputDataRate+0xfc>
 80089a8:	2304      	movs	r3, #4
 80089aa:	e02c      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 80089ac:	edd7 7a00 	vldr	s15, [r7]
 80089b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80089b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	d801      	bhi.n	80089c2 <STTS751_TEMP_SetOutputDataRate+0x112>
 80089be:	2305      	movs	r3, #5
 80089c0:	e021      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 80089c2:	edd7 7a00 	vldr	s15, [r7]
 80089c6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80089ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d2:	d801      	bhi.n	80089d8 <STTS751_TEMP_SetOutputDataRate+0x128>
 80089d4:	2306      	movs	r3, #6
 80089d6:	e016      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 80089d8:	edd7 7a00 	vldr	s15, [r7]
 80089dc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80089e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e8:	d801      	bhi.n	80089ee <STTS751_TEMP_SetOutputDataRate+0x13e>
 80089ea:	2307      	movs	r3, #7
 80089ec:	e00b      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 80089ee:	edd7 7a00 	vldr	s15, [r7]
 80089f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80089f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	d801      	bhi.n	8008a04 <STTS751_TEMP_SetOutputDataRate+0x154>
 8008a00:	2308      	movs	r3, #8
 8008a02:	e000      	b.n	8008a06 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008a04:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8008a06:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3320      	adds	r3, #32
 8008a0c:	7bfa      	ldrb	r2, [r7, #15]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f8e9 	bl	8008be8 <stts751_temp_data_rate_set>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8008a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a20:	e000      	b.n	8008a24 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	42000000 	.word	0x42000000
 8008a30:	3d800000 	.word	0x3d800000

08008a34 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3320      	adds	r3, #32
 8008a42:	f107 020e 	add.w	r2, r7, #14
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fa01 	bl	8008e50 <stts751_temperature_raw_get>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	e00a      	b.n	8008a70 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f8a8 	bl	8008bb4 <stts751_from_lsb_to_celsius>
 8008a64:	eef0 7a40 	vmov.f32	s15, s0
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008a78:	b590      	push	{r4, r7, lr}
 8008a7a:	b089      	sub	sp, #36	; 0x24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	607a      	str	r2, [r7, #4]
 8008a82:	461a      	mov	r2, r3
 8008a84:	460b      	mov	r3, r1
 8008a86:	72fb      	strb	r3, [r7, #11]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11f      	bne.n	8008adc <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	83fb      	strh	r3, [r7, #30]
 8008aa0:	e018      	b.n	8008ad4 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	695c      	ldr	r4, [r3, #20]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	7b1b      	ldrb	r3, [r3, #12]
 8008aaa:	b298      	uxth	r0, r3
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	8bfb      	ldrh	r3, [r7, #30]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	b299      	uxth	r1, r3
 8008ab6:	8bfb      	ldrh	r3, [r7, #30]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	441a      	add	r2, r3
 8008abc:	2301      	movs	r3, #1
 8008abe:	47a0      	blx	r4
 8008ac0:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	e007      	b.n	8008ade <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008ace:	8bfb      	ldrh	r3, [r7, #30]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	83fb      	strh	r3, [r7, #30]
 8008ad4:	8bfa      	ldrh	r2, [r7, #30]
 8008ad6:	893b      	ldrh	r3, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d3e2      	bcc.n	8008aa2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008adc:	69bb      	ldr	r3, [r7, #24]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3724      	adds	r7, #36	; 0x24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd90      	pop	{r4, r7, pc}

08008ae6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ae6:	b590      	push	{r4, r7, lr}
 8008ae8:	b089      	sub	sp, #36	; 0x24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	461a      	mov	r2, r3
 8008af2:	460b      	mov	r3, r1
 8008af4:	72fb      	strb	r3, [r7, #11]
 8008af6:	4613      	mov	r3, r2
 8008af8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d11f      	bne.n	8008b4a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	83fb      	strh	r3, [r7, #30]
 8008b0e:	e018      	b.n	8008b42 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	691c      	ldr	r4, [r3, #16]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	7b1b      	ldrb	r3, [r3, #12]
 8008b18:	b298      	uxth	r0, r3
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	8bfb      	ldrh	r3, [r7, #30]
 8008b20:	4413      	add	r3, r2
 8008b22:	b299      	uxth	r1, r3
 8008b24:	8bfb      	ldrh	r3, [r7, #30]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	441a      	add	r2, r3
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	47a0      	blx	r4
 8008b2e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008b36:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3a:	e007      	b.n	8008b4c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008b3c:	8bfb      	ldrh	r3, [r7, #30]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	83fb      	strh	r3, [r7, #30]
 8008b42:	8bfa      	ldrh	r2, [r7, #30]
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d3e2      	bcc.n	8008b10 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3724      	adds	r7, #36	; 0x24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}

08008b54 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008b54:	b590      	push	{r4, r7, lr}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	460b      	mov	r3, r1
 8008b62:	72fb      	strb	r3, [r7, #11]
 8008b64:	4613      	mov	r3, r2
 8008b66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685c      	ldr	r4, [r3, #4]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68d8      	ldr	r0, [r3, #12]
 8008b70:	893b      	ldrh	r3, [r7, #8]
 8008b72:	7af9      	ldrb	r1, [r7, #11]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	47a0      	blx	r4
 8008b78:	6178      	str	r0, [r7, #20]

  return ret;
 8008b7a:	697b      	ldr	r3, [r7, #20]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd90      	pop	{r4, r7, pc}

08008b84 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	460b      	mov	r3, r1
 8008b92:	72fb      	strb	r3, [r7, #11]
 8008b94:	4613      	mov	r3, r2
 8008b96:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681c      	ldr	r4, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68d8      	ldr	r0, [r3, #12]
 8008ba0:	893b      	ldrh	r3, [r7, #8]
 8008ba2:	7af9      	ldrb	r1, [r7, #11]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	47a0      	blx	r4
 8008ba8:	6178      	str	r0, [r7, #20]

  return ret;
 8008baa:	697b      	ldr	r3, [r7, #20]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd90      	pop	{r4, r7, pc}

08008bb4 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008be4 <stts751_from_lsb_to_celsius+0x30>
 8008bce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bd2:	eef0 7a66 	vmov.f32	s15, s13
}
 8008bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	43800000 	.word	0x43800000

08008be8 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8008bf4:	23aa      	movs	r3, #170	; 0xaa
 8008bf6:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008bf8:	f107 020c 	add.w	r2, r7, #12
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	2104      	movs	r1, #4
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ffa7 	bl	8008b54 <stts751_read_reg>
 8008c06:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10f      	bne.n	8008c2e <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	7b3b      	ldrb	r3, [r7, #12]
 8008c18:	f362 0303 	bfi	r3, r2, #0, #4
 8008c1c:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008c1e:	f107 020c 	add.w	r2, r7, #12
 8008c22:	2301      	movs	r3, #1
 8008c24:	2104      	movs	r1, #4
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff ffac 	bl	8008b84 <stts751_write_reg>
 8008c2c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d107      	bne.n	8008c44 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008c34:	f107 0210 	add.w	r2, r7, #16
 8008c38:	2301      	movs	r3, #1
 8008c3a:	2103      	movs	r1, #3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff ff89 	bl	8008b54 <stts751_read_reg>
 8008c42:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d111      	bne.n	8008c6e <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	09db      	lsrs	r3, r3, #7
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	7c3b      	ldrb	r3, [r7, #16]
 8008c58:	f362 1386 	bfi	r3, r2, #6, #1
 8008c5c:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008c5e:	f107 0210 	add.w	r2, r7, #16
 8008c62:	2301      	movs	r3, #1
 8008c64:	2103      	movs	r1, #3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff ff8c 	bl	8008b84 <stts751_write_reg>
 8008c6c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <stts751_temp_data_rate_set+0xa2>
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	2b90      	cmp	r3, #144	; 0x90
 8008c78:	d107      	bne.n	8008c8a <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8008c7a:	f107 020b 	add.w	r2, r7, #11
 8008c7e:	2301      	movs	r3, #1
 8008c80:	210f      	movs	r1, #15
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff7e 	bl	8008b84 <stts751_write_reg>
 8008c88:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008c8a:	697b      	ldr	r3, [r7, #20]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008c9e:	f107 0210 	add.w	r2, r7, #16
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff ff54 	bl	8008b54 <stts751_read_reg>
 8008cac:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008cb4:	f107 020c 	add.w	r2, r7, #12
 8008cb8:	2301      	movs	r3, #1
 8008cba:	2103      	movs	r1, #3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff49 	bl	8008b54 <stts751_read_reg>
 8008cc2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008cc4:	7b3b      	ldrb	r3, [r7, #12]
 8008cc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	01db      	lsls	r3, r3, #7
 8008cce:	7c3a      	ldrb	r2, [r7, #16]
 8008cd0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	2b90      	cmp	r3, #144	; 0x90
 8008cda:	d025      	beq.n	8008d28 <stts751_temp_data_rate_get+0x94>
 8008cdc:	2b90      	cmp	r3, #144	; 0x90
 8008cde:	dc4f      	bgt.n	8008d80 <stts751_temp_data_rate_get+0xec>
 8008ce0:	2b09      	cmp	r3, #9
 8008ce2:	dc1b      	bgt.n	8008d1c <stts751_temp_data_rate_get+0x88>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	db4b      	blt.n	8008d80 <stts751_temp_data_rate_get+0xec>
 8008ce8:	2b09      	cmp	r3, #9
 8008cea:	d849      	bhi.n	8008d80 <stts751_temp_data_rate_get+0xec>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <stts751_temp_data_rate_get+0x60>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d31 	.word	0x08008d31
 8008cf8:	08008d39 	.word	0x08008d39
 8008cfc:	08008d41 	.word	0x08008d41
 8008d00:	08008d49 	.word	0x08008d49
 8008d04:	08008d51 	.word	0x08008d51
 8008d08:	08008d59 	.word	0x08008d59
 8008d0c:	08008d61 	.word	0x08008d61
 8008d10:	08008d69 	.word	0x08008d69
 8008d14:	08008d71 	.word	0x08008d71
 8008d18:	08008d79 	.word	0x08008d79
 8008d1c:	2b80      	cmp	r3, #128	; 0x80
 8008d1e:	d12f      	bne.n	8008d80 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2280      	movs	r2, #128	; 0x80
 8008d24:	701a      	strb	r2, [r3, #0]
      break;
 8008d26:	e02f      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2290      	movs	r2, #144	; 0x90
 8008d2c:	701a      	strb	r2, [r3, #0]
      break;
 8008d2e:	e02b      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
      break;
 8008d36:	e027      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	701a      	strb	r2, [r3, #0]
      break;
 8008d3e:	e023      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2202      	movs	r2, #2
 8008d44:	701a      	strb	r2, [r3, #0]
      break;
 8008d46:	e01f      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	701a      	strb	r2, [r3, #0]
      break;
 8008d4e:	e01b      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2204      	movs	r2, #4
 8008d54:	701a      	strb	r2, [r3, #0]
      break;
 8008d56:	e017      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	701a      	strb	r2, [r3, #0]
      break;
 8008d5e:	e013      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2206      	movs	r2, #6
 8008d64:	701a      	strb	r2, [r3, #0]
      break;
 8008d66:	e00f      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2207      	movs	r2, #7
 8008d6c:	701a      	strb	r2, [r3, #0]
      break;
 8008d6e:	e00b      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2208      	movs	r2, #8
 8008d74:	701a      	strb	r2, [r3, #0]
      break;
 8008d76:	e007      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2209      	movs	r2, #9
 8008d7c:	701a      	strb	r2, [r3, #0]
      break;
 8008d7e:	e003      	b.n	8008d88 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2280      	movs	r2, #128	; 0x80
 8008d84:	701a      	strb	r2, [r3, #0]
      break;
 8008d86:	bf00      	nop
  }

  return ret;
 8008d88:	697b      	ldr	r3, [r7, #20]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop

08008d94 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008da0:	f107 0208 	add.w	r2, r7, #8
 8008da4:	2301      	movs	r3, #1
 8008da6:	2103      	movs	r1, #3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fed3 	bl	8008b54 <stts751_read_reg>
 8008dae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10f      	bne.n	8008dd6 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	7a3b      	ldrb	r3, [r7, #8]
 8008dc0:	f362 0383 	bfi	r3, r2, #2, #2
 8008dc4:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008dc6:	f107 0208 	add.w	r2, r7, #8
 8008dca:	2301      	movs	r3, #1
 8008dcc:	2103      	movs	r1, #3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fed8 	bl	8008b84 <stts751_write_reg>
 8008dd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008dea:	f107 0208 	add.w	r2, r7, #8
 8008dee:	2301      	movs	r3, #1
 8008df0:	2103      	movs	r1, #3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff feae 	bl	8008b54 <stts751_read_reg>
 8008df8:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8008dfa:	7a3b      	ldrb	r3, [r7, #8]
 8008dfc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d81a      	bhi.n	8008e3c <stts751_resolution_get+0x5c>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <stts751_resolution_get+0x2c>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e25 	.word	0x08008e25
 8008e10:	08008e2d 	.word	0x08008e2d
 8008e14:	08008e1d 	.word	0x08008e1d
 8008e18:	08008e35 	.word	0x08008e35
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      break;
 8008e22:	e00f      	b.n	8008e44 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
      break;
 8008e2a:	e00b      	b.n	8008e44 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	701a      	strb	r2, [r3, #0]
      break;
 8008e32:	e007      	b.n	8008e44 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2203      	movs	r2, #3
 8008e38:	701a      	strb	r2, [r3, #0]
      break;
 8008e3a:	e003      	b.n	8008e44 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	701a      	strb	r2, [r3, #0]
      break;
 8008e42:	bf00      	nop
  }

  return ret;
 8008e44:	68fb      	ldr	r3, [r7, #12]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008e5a:	f107 0308 	add.w	r3, r7, #8
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	2301      	movs	r3, #1
 8008e62:	2100      	movs	r1, #0
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fe75 	bl	8008b54 <stts751_read_reg>
 8008e6a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d118      	bne.n	8008ea4 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8008e72:	f107 0208 	add.w	r2, r7, #8
 8008e76:	2301      	movs	r3, #1
 8008e78:	2102      	movs	r1, #2
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fe6a 	bl	8008b54 <stts751_read_reg>
 8008e80:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8008e82:	7a7b      	ldrb	r3, [r7, #9]
 8008e84:	b21a      	sxth	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	021b      	lsls	r3, r3, #8
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	7a3b      	ldrb	r3, [r7, #8]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	b21a      	sxth	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008eba:	f107 0208 	add.w	r2, r7, #8
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	2103      	movs	r1, #3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fe46 	bl	8008b54 <stts751_read_reg>
 8008ec8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10f      	bne.n	8008ef0 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	7a3b      	ldrb	r3, [r7, #8]
 8008eda:	f362 13c7 	bfi	r3, r2, #7, #1
 8008ede:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	2103      	movs	r1, #3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fe4b 	bl	8008b84 <stts751_write_reg>
 8008eee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	2301      	movs	r3, #1
 8008f08:	21fd      	movs	r1, #253	; 0xfd
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fe22 	bl	8008b54 <stts751_read_reg>
 8008f10:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d107      	bne.n	8008f28 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	21fe      	movs	r1, #254	; 0xfe
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fe17 	bl	8008b54 <stts751_read_reg>
 8008f26:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d107      	bne.n	8008f3e <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	1c9a      	adds	r2, r3, #2
 8008f32:	2301      	movs	r3, #1
 8008f34:	21ff      	movs	r1, #255	; 0xff
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fe0c 	bl	8008b54 <stts751_read_reg>
 8008f3c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8008f56:	2301      	movs	r3, #1
 8008f58:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d06e      	beq.n	8009042 <IKS01A3_ENV_SENSOR_Init+0xfa>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	f200 809d 	bhi.w	80090a6 <IKS01A3_ENV_SENSOR_Init+0x15e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <IKS01A3_ENV_SENSOR_Init+0x32>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d032      	beq.n	8008fde <IKS01A3_ENV_SENSOR_Init+0x96>
 8008f78:	e095      	b.n	80090a6 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8008f7a:	6838      	ldr	r0, [r7, #0]
 8008f7c:	f000 f966 	bl	800924c <HTS221_0_Probe>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8a:	e0cc      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008f8c:	4a68      	ldr	r2, [pc, #416]	; (8009130 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	4967      	ldr	r1, [pc, #412]	; (8009134 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f9e:	f107 0108 	add.w	r1, r7, #8
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	4798      	blx	r3
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008fac:	f06f 0306 	mvn.w	r3, #6
 8008fb0:	e0b9      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8008fb2:	7a3b      	ldrb	r3, [r7, #8]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d103      	bne.n	8008fc0 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008fc0:	7abb      	ldrb	r3, [r7, #10]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d103      	bne.n	8008fce <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f043 0304 	orr.w	r3, r3, #4
 8008fcc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008fce:	7a7b      	ldrb	r3, [r7, #9]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d16c      	bne.n	80090ae <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	f043 0302 	orr.w	r3, r3, #2
 8008fda:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008fdc:	e067      	b.n	80090ae <IKS01A3_ENV_SENSOR_Init+0x166>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008fde:	6838      	ldr	r0, [r7, #0]
 8008fe0:	f000 f9ee 	bl	80093c0 <LPS22HH_0_Probe>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008fea:	f04f 33ff 	mov.w	r3, #4294967295
 8008fee:	e09a      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008ff0:	4a4f      	ldr	r2, [pc, #316]	; (8009130 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	494e      	ldr	r1, [pc, #312]	; (8009134 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009002:	f107 0108 	add.w	r1, r7, #8
 8009006:	4610      	mov	r0, r2
 8009008:	4798      	blx	r3
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009010:	f06f 0306 	mvn.w	r3, #6
 8009014:	e087      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009016:	7a3b      	ldrb	r3, [r7, #8]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d103      	bne.n	8009024 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009024:	7abb      	ldrb	r3, [r7, #10]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d103      	bne.n	8009032 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	f043 0304 	orr.w	r3, r3, #4
 8009030:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009032:	7a7b      	ldrb	r3, [r7, #9]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d13c      	bne.n	80090b2 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	f043 0302 	orr.w	r3, r3, #2
 800903e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009040:	e037      	b.n	80090b2 <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	f000 fa78 	bl	8009538 <STTS751_0_Probe>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800904e:	f04f 33ff 	mov.w	r3, #4294967295
 8009052:	e068      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009054:	4a36      	ldr	r2, [pc, #216]	; (8009130 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	4935      	ldr	r1, [pc, #212]	; (8009134 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009066:	f107 0108 	add.w	r1, r7, #8
 800906a:	4610      	mov	r0, r2
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009074:	f06f 0306 	mvn.w	r3, #6
 8009078:	e055      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 800907a:	7a3b      	ldrb	r3, [r7, #8]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d103      	bne.n	8009088 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009088:	7abb      	ldrb	r3, [r7, #10]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d103      	bne.n	8009096 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f043 0304 	orr.w	r3, r3, #4
 8009094:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009096:	7a7b      	ldrb	r3, [r7, #9]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d10c      	bne.n	80090b6 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	f043 0302 	orr.w	r3, r3, #2
 80090a2:	61bb      	str	r3, [r7, #24]
      }
      break;
 80090a4:	e007      	b.n	80090b6 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80090a6:	f06f 0301 	mvn.w	r3, #1
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80090ac:	e004      	b.n	80090b8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80090ae:	bf00      	nop
 80090b0:	e002      	b.n	80090b8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80090b2:	bf00      	nop
 80090b4:	e000      	b.n	80090b8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 80090b6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	e031      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	e02a      	b.n	800911e <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	4013      	ands	r3, r2
 80090ce:	6a3a      	ldr	r2, [r7, #32]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d11e      	bne.n	8009112 <IKS01A3_ENV_SENSOR_Init+0x1ca>
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	4013      	ands	r3, r2
 80090da:	6a3a      	ldr	r2, [r7, #32]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d118      	bne.n	8009112 <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80090e0:	4a15      	ldr	r2, [pc, #84]	; (8009138 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090e8:	4814      	ldr	r0, [pc, #80]	; (800913c <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	4613      	mov	r3, r2
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	4413      	add	r3, r2
 80090f2:	440b      	add	r3, r1
 80090f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	490e      	ldr	r1, [pc, #56]	; (8009134 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009102:	4610      	mov	r0, r2
 8009104:	4798      	blx	r3
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800910c:	f06f 0304 	mvn.w	r3, #4
 8009110:	e009      	b.n	8009126 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	3301      	adds	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d9d1      	bls.n	80090c8 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009126:	4618      	mov	r0, r3
 8009128:	3728      	adds	r7, #40	; 0x28
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	200005a8 	.word	0x200005a8
 8009134:	20000578 	.word	0x20000578
 8009138:	2000015c 	.word	0x2000015c
 800913c:	20000584 	.word	0x20000584

08009140 <IKS01A3_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d903      	bls.n	8009158 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009150:	f06f 0301 	mvn.w	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e028      	b.n	80091aa <IKS01A3_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009158:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	4013      	ands	r3, r2
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d11c      	bne.n	80091a4 <IKS01A3_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800916a:	4a13      	ldr	r2, [pc, #76]	; (80091b8 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009172:	4812      	ldr	r0, [pc, #72]	; (80091bc <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4613      	mov	r3, r2
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4413      	add	r3, r2
 800917c:	440b      	add	r3, r1
 800917e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	490e      	ldr	r1, [pc, #56]	; (80091c0 <IKS01A3_ENV_SENSOR_Enable+0x80>)
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <IKS01A3_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009196:	f06f 0304 	mvn.w	r3, #4
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e005      	b.n	80091aa <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	e002      	b.n	80091aa <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80091a4:	f06f 0301 	mvn.w	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80091aa:	68fb      	ldr	r3, [r7, #12]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	200005b4 	.word	0x200005b4
 80091b8:	2000015c 	.word	0x2000015c
 80091bc:	20000584 	.word	0x20000584
 80091c0:	20000578 	.word	0x20000578

080091c4 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d903      	bls.n	80091de <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80091d6:	f06f 0301 	mvn.w	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e029      	b.n	8009232 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4013      	ands	r3, r2
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d11d      	bne.n	800922c <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80091f0:	4a13      	ldr	r2, [pc, #76]	; (8009240 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091f8:	4812      	ldr	r0, [pc, #72]	; (8009244 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4613      	mov	r3, r2
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	440b      	add	r3, r1
 8009204:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	490f      	ldr	r1, [pc, #60]	; (8009248 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800921e:	f06f 0304 	mvn.w	r3, #4
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	e005      	b.n	8009232 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	e002      	b.n	8009232 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800922c:	f06f 0301 	mvn.w	r3, #1
 8009230:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009232:	697b      	ldr	r3, [r7, #20]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	200005b4 	.word	0x200005b4
 8009240:	2000015c 	.word	0x2000015c
 8009244:	20000584 	.word	0x20000584
 8009248:	20000578 	.word	0x20000578

0800924c <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b090      	sub	sp, #64	; 0x40
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8009258:	2300      	movs	r3, #0
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800925c:	23bf      	movs	r3, #191	; 0xbf
 800925e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009262:	4b49      	ldr	r3, [pc, #292]	; (8009388 <HTS221_0_Probe+0x13c>)
 8009264:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009266:	4b49      	ldr	r3, [pc, #292]	; (800938c <HTS221_0_Probe+0x140>)
 8009268:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800926a:	4b49      	ldr	r3, [pc, #292]	; (8009390 <HTS221_0_Probe+0x144>)
 800926c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800926e:	4b49      	ldr	r3, [pc, #292]	; (8009394 <HTS221_0_Probe+0x148>)
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009272:	4b49      	ldr	r3, [pc, #292]	; (8009398 <HTS221_0_Probe+0x14c>)
 8009274:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8009276:	f107 031c 	add.w	r3, r7, #28
 800927a:	4619      	mov	r1, r3
 800927c:	4847      	ldr	r0, [pc, #284]	; (800939c <HTS221_0_Probe+0x150>)
 800927e:	f7f9 f9bb 	bl	80025f8 <HTS221_RegisterBusIO>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009288:	f06f 0306 	mvn.w	r3, #6
 800928c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800928e:	e076      	b.n	800937e <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8009290:	f107 031b 	add.w	r3, r7, #27
 8009294:	4619      	mov	r1, r3
 8009296:	4841      	ldr	r0, [pc, #260]	; (800939c <HTS221_0_Probe+0x150>)
 8009298:	f7f9 fa37 	bl	800270a <HTS221_ReadID>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80092a2:	f06f 0306 	mvn.w	r3, #6
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a8:	e069      	b.n	800937e <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80092aa:	7efb      	ldrb	r3, [r7, #27]
 80092ac:	2bbc      	cmp	r3, #188	; 0xbc
 80092ae:	d003      	beq.n	80092b8 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80092b0:	f06f 0306 	mvn.w	r3, #6
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b6:	e062      	b.n	800937e <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80092b8:	f107 0308 	add.w	r3, r7, #8
 80092bc:	4619      	mov	r1, r3
 80092be:	4837      	ldr	r0, [pc, #220]	; (800939c <HTS221_0_Probe+0x150>)
 80092c0:	f7f9 fa3a 	bl	8002738 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80092c4:	7a3b      	ldrb	r3, [r7, #8]
 80092c6:	461a      	mov	r2, r3
 80092c8:	7a7b      	ldrb	r3, [r7, #9]
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80092ce:	7abb      	ldrb	r3, [r7, #10]
 80092d0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80092d2:	4313      	orrs	r3, r2
 80092d4:	4a32      	ldr	r2, [pc, #200]	; (80093a0 <HTS221_0_Probe+0x154>)
 80092d6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80092d8:	4b32      	ldr	r3, [pc, #200]	; (80093a4 <HTS221_0_Probe+0x158>)
 80092da:	4a30      	ldr	r2, [pc, #192]	; (800939c <HTS221_0_Probe+0x150>)
 80092dc:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80092de:	4b32      	ldr	r3, [pc, #200]	; (80093a8 <HTS221_0_Probe+0x15c>)
 80092e0:	4a32      	ldr	r2, [pc, #200]	; (80093ac <HTS221_0_Probe+0x160>)
 80092e2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80092e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d11d      	bne.n	8009326 <HTS221_0_Probe+0xda>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f003 0301 	and.w	r3, r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d018      	beq.n	8009326 <HTS221_0_Probe+0xda>
 80092f4:	7a3b      	ldrb	r3, [r7, #8]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d115      	bne.n	8009326 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80092fa:	4b2d      	ldr	r3, [pc, #180]	; (80093b0 <HTS221_0_Probe+0x164>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	4a2d      	ldr	r2, [pc, #180]	; (80093b4 <HTS221_0_Probe+0x168>)
 8009300:	492d      	ldr	r1, [pc, #180]	; (80093b8 <HTS221_0_Probe+0x16c>)
 8009302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009306:	4b28      	ldr	r3, [pc, #160]	; (80093a8 <HTS221_0_Probe+0x15c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a25      	ldr	r2, [pc, #148]	; (80093a4 <HTS221_0_Probe+0x158>)
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800931a:	f06f 0304 	mvn.w	r3, #4
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009320:	e001      	b.n	8009326 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009322:	2300      	movs	r3, #0
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d11d      	bne.n	8009368 <HTS221_0_Probe+0x11c>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d018      	beq.n	8009368 <HTS221_0_Probe+0x11c>
 8009336:	7abb      	ldrb	r3, [r7, #10]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d115      	bne.n	8009368 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800933c:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <HTS221_0_Probe+0x164>)
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	4a1c      	ldr	r2, [pc, #112]	; (80093b4 <HTS221_0_Probe+0x168>)
 8009342:	491e      	ldr	r1, [pc, #120]	; (80093bc <HTS221_0_Probe+0x170>)
 8009344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009348:	4b17      	ldr	r3, [pc, #92]	; (80093a8 <HTS221_0_Probe+0x15c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a15      	ldr	r2, [pc, #84]	; (80093a4 <HTS221_0_Probe+0x158>)
 8009350:	6812      	ldr	r2, [r2, #0]
 8009352:	4610      	mov	r0, r2
 8009354:	4798      	blx	r3
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800935c:	f06f 0304 	mvn.w	r3, #4
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009362:	e001      	b.n	8009368 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009364:	2300      	movs	r3, #0
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d107      	bne.n	800937e <HTS221_0_Probe+0x132>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009378:	f06f 0304 	mvn.w	r3, #4
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800937e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009380:	4618      	mov	r0, r3
 8009382:	3740      	adds	r7, #64	; 0x40
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	08001fed 	.word	0x08001fed
 800938c:	08002051 	.word	0x08002051
 8009390:	08002105 	.word	0x08002105
 8009394:	080020a1 	.word	0x080020a1
 8009398:	08002169 	.word	0x08002169
 800939c:	200005c0 	.word	0x200005c0
 80093a0:	200005b4 	.word	0x200005b4
 80093a4:	20000578 	.word	0x20000578
 80093a8:	200005a8 	.word	0x200005a8
 80093ac:	20000008 	.word	0x20000008
 80093b0:	2000015c 	.word	0x2000015c
 80093b4:	20000584 	.word	0x20000584
 80093b8:	2000002c 	.word	0x2000002c
 80093bc:	20000018 	.word	0x20000018

080093c0 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b090      	sub	sp, #64	; 0x40
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80093cc:	2300      	movs	r3, #0
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80093d0:	23bb      	movs	r3, #187	; 0xbb
 80093d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 80093d6:	4b4a      	ldr	r3, [pc, #296]	; (8009500 <LPS22HH_0_Probe+0x140>)
 80093d8:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80093da:	4b4a      	ldr	r3, [pc, #296]	; (8009504 <LPS22HH_0_Probe+0x144>)
 80093dc:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80093de:	4b4a      	ldr	r3, [pc, #296]	; (8009508 <LPS22HH_0_Probe+0x148>)
 80093e0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80093e2:	4b4a      	ldr	r3, [pc, #296]	; (800950c <LPS22HH_0_Probe+0x14c>)
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80093e6:	4b4a      	ldr	r3, [pc, #296]	; (8009510 <LPS22HH_0_Probe+0x150>)
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80093ea:	f107 031c 	add.w	r3, r7, #28
 80093ee:	4619      	mov	r1, r3
 80093f0:	4848      	ldr	r0, [pc, #288]	; (8009514 <LPS22HH_0_Probe+0x154>)
 80093f2:	f7fc fa7d 	bl	80058f0 <LPS22HH_RegisterBusIO>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093fc:	f06f 0306 	mvn.w	r3, #6
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009402:	e078      	b.n	80094f6 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8009404:	f107 031b 	add.w	r3, r7, #27
 8009408:	4619      	mov	r1, r3
 800940a:	4842      	ldr	r0, [pc, #264]	; (8009514 <LPS22HH_0_Probe+0x154>)
 800940c:	f7fc fb19 	bl	8005a42 <LPS22HH_ReadID>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009416:	f06f 0306 	mvn.w	r3, #6
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941c:	e06b      	b.n	80094f6 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 800941e:	7efb      	ldrb	r3, [r7, #27]
 8009420:	2bb3      	cmp	r3, #179	; 0xb3
 8009422:	d003      	beq.n	800942c <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009424:	f06f 0306 	mvn.w	r3, #6
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942a:	e064      	b.n	80094f6 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	4619      	mov	r1, r3
 8009432:	4838      	ldr	r0, [pc, #224]	; (8009514 <LPS22HH_0_Probe+0x154>)
 8009434:	f7fc fb1c 	bl	8005a70 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009438:	7a3b      	ldrb	r3, [r7, #8]
 800943a:	461a      	mov	r2, r3
 800943c:	7a7b      	ldrb	r3, [r7, #9]
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8009442:	7abb      	ldrb	r3, [r7, #10]
 8009444:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009446:	4313      	orrs	r3, r2
 8009448:	4a33      	ldr	r2, [pc, #204]	; (8009518 <LPS22HH_0_Probe+0x158>)
 800944a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800944c:	4b33      	ldr	r3, [pc, #204]	; (800951c <LPS22HH_0_Probe+0x15c>)
 800944e:	4a31      	ldr	r2, [pc, #196]	; (8009514 <LPS22HH_0_Probe+0x154>)
 8009450:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8009452:	4b33      	ldr	r3, [pc, #204]	; (8009520 <LPS22HH_0_Probe+0x160>)
 8009454:	4a33      	ldr	r2, [pc, #204]	; (8009524 <LPS22HH_0_Probe+0x164>)
 8009456:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11e      	bne.n	800949c <LPS22HH_0_Probe+0xdc>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d019      	beq.n	800949c <LPS22HH_0_Probe+0xdc>
 8009468:	7a3b      	ldrb	r3, [r7, #8]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d116      	bne.n	800949c <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <LPS22HH_0_Probe+0x168>)
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	4a2e      	ldr	r2, [pc, #184]	; (800952c <LPS22HH_0_Probe+0x16c>)
 8009474:	3303      	adds	r3, #3
 8009476:	492e      	ldr	r1, [pc, #184]	; (8009530 <LPS22HH_0_Probe+0x170>)
 8009478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800947c:	4b28      	ldr	r3, [pc, #160]	; (8009520 <LPS22HH_0_Probe+0x160>)
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a26      	ldr	r2, [pc, #152]	; (800951c <LPS22HH_0_Probe+0x15c>)
 8009484:	6852      	ldr	r2, [r2, #4]
 8009486:	4610      	mov	r0, r2
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009490:	f06f 0304 	mvn.w	r3, #4
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009496:	e001      	b.n	800949c <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009498:	2300      	movs	r3, #0
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800949c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d11e      	bne.n	80094e0 <LPS22HH_0_Probe+0x120>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d019      	beq.n	80094e0 <LPS22HH_0_Probe+0x120>
 80094ac:	7a7b      	ldrb	r3, [r7, #9]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d116      	bne.n	80094e0 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80094b2:	4b1d      	ldr	r3, [pc, #116]	; (8009528 <LPS22HH_0_Probe+0x168>)
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	4a1d      	ldr	r2, [pc, #116]	; (800952c <LPS22HH_0_Probe+0x16c>)
 80094b8:	3303      	adds	r3, #3
 80094ba:	491e      	ldr	r1, [pc, #120]	; (8009534 <LPS22HH_0_Probe+0x174>)
 80094bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80094c0:	4b17      	ldr	r3, [pc, #92]	; (8009520 <LPS22HH_0_Probe+0x160>)
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a15      	ldr	r2, [pc, #84]	; (800951c <LPS22HH_0_Probe+0x15c>)
 80094c8:	6852      	ldr	r2, [r2, #4]
 80094ca:	4610      	mov	r0, r2
 80094cc:	4798      	blx	r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80094d4:	f06f 0304 	mvn.w	r3, #4
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094da:	e001      	b.n	80094e0 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80094dc:	2300      	movs	r3, #0
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80094e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <LPS22HH_0_Probe+0x136>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80094f0:	f06f 0304 	mvn.w	r3, #4
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80094f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3740      	adds	r7, #64	; 0x40
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	08001fed 	.word	0x08001fed
 8009504:	08002051 	.word	0x08002051
 8009508:	08002105 	.word	0x08002105
 800950c:	080020a1 	.word	0x080020a1
 8009510:	08002169 	.word	0x08002169
 8009514:	200005f4 	.word	0x200005f4
 8009518:	200005b4 	.word	0x200005b4
 800951c:	20000578 	.word	0x20000578
 8009520:	200005a8 	.word	0x200005a8
 8009524:	200000a8 	.word	0x200000a8
 8009528:	2000015c 	.word	0x2000015c
 800952c:	20000584 	.word	0x20000584
 8009530:	200000cc 	.word	0x200000cc
 8009534:	200000b8 	.word	0x200000b8

08009538 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b090      	sub	sp, #64	; 0x40
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009544:	2300      	movs	r3, #0
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8009548:	2395      	movs	r3, #149	; 0x95
 800954a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800954e:	4b3f      	ldr	r3, [pc, #252]	; (800964c <STTS751_0_Probe+0x114>)
 8009550:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009552:	4b3f      	ldr	r3, [pc, #252]	; (8009650 <STTS751_0_Probe+0x118>)
 8009554:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009556:	4b3f      	ldr	r3, [pc, #252]	; (8009654 <STTS751_0_Probe+0x11c>)
 8009558:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800955a:	4b3f      	ldr	r3, [pc, #252]	; (8009658 <STTS751_0_Probe+0x120>)
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800955e:	4b3f      	ldr	r3, [pc, #252]	; (800965c <STTS751_0_Probe+0x124>)
 8009560:	637b      	str	r3, [r7, #52]	; 0x34

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8009562:	f107 031c 	add.w	r3, r7, #28
 8009566:	4619      	mov	r1, r3
 8009568:	483d      	ldr	r0, [pc, #244]	; (8009660 <STTS751_0_Probe+0x128>)
 800956a:	f7fe fffb 	bl	8008564 <STTS751_RegisterBusIO>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009574:	f06f 0306 	mvn.w	r3, #6
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957a:	e061      	b.n	8009640 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800957c:	f107 031b 	add.w	r3, r7, #27
 8009580:	4619      	mov	r1, r3
 8009582:	4837      	ldr	r0, [pc, #220]	; (8009660 <STTS751_0_Probe+0x128>)
 8009584:	f7ff f88d 	bl	80086a2 <STTS751_ReadID>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800958e:	f06f 0306 	mvn.w	r3, #6
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009594:	e054      	b.n	8009640 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 8009596:	7efb      	ldrb	r3, [r7, #27]
 8009598:	2b53      	cmp	r3, #83	; 0x53
 800959a:	d003      	beq.n	80095a4 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800959c:	f06f 0306 	mvn.w	r3, #6
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095a2:	e04d      	b.n	8009640 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80095a4:	f107 0308 	add.w	r3, r7, #8
 80095a8:	4619      	mov	r1, r3
 80095aa:	482d      	ldr	r0, [pc, #180]	; (8009660 <STTS751_0_Probe+0x128>)
 80095ac:	f7ff f894 	bl	80086d8 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80095b0:	7a3b      	ldrb	r3, [r7, #8]
 80095b2:	461a      	mov	r2, r3
 80095b4:	7a7b      	ldrb	r3, [r7, #9]
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80095ba:	7abb      	ldrb	r3, [r7, #10]
 80095bc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80095be:	4313      	orrs	r3, r2
 80095c0:	4a28      	ldr	r2, [pc, #160]	; (8009664 <STTS751_0_Probe+0x12c>)
 80095c2:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80095c4:	4b28      	ldr	r3, [pc, #160]	; (8009668 <STTS751_0_Probe+0x130>)
 80095c6:	4a26      	ldr	r2, [pc, #152]	; (8009660 <STTS751_0_Probe+0x128>)
 80095c8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80095ca:	4b28      	ldr	r3, [pc, #160]	; (800966c <STTS751_0_Probe+0x134>)
 80095cc:	4a28      	ldr	r2, [pc, #160]	; (8009670 <STTS751_0_Probe+0x138>)
 80095ce:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80095d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d11e      	bne.n	8009614 <STTS751_0_Probe+0xdc>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d019      	beq.n	8009614 <STTS751_0_Probe+0xdc>
 80095e0:	7a3b      	ldrb	r3, [r7, #8]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d116      	bne.n	8009614 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80095e6:	4b23      	ldr	r3, [pc, #140]	; (8009674 <STTS751_0_Probe+0x13c>)
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	4a23      	ldr	r2, [pc, #140]	; (8009678 <STTS751_0_Probe+0x140>)
 80095ec:	3306      	adds	r3, #6
 80095ee:	4923      	ldr	r1, [pc, #140]	; (800967c <STTS751_0_Probe+0x144>)
 80095f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 80095f4:	4b1d      	ldr	r3, [pc, #116]	; (800966c <STTS751_0_Probe+0x134>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a1b      	ldr	r2, [pc, #108]	; (8009668 <STTS751_0_Probe+0x130>)
 80095fc:	6892      	ldr	r2, [r2, #8]
 80095fe:	4610      	mov	r0, r2
 8009600:	4798      	blx	r3
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009608:	f06f 0304 	mvn.w	r3, #4
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960e:	e001      	b.n	8009614 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d107      	bne.n	800962a <STTS751_0_Probe+0xf2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009624:	f06f 0304 	mvn.w	r3, #4
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800962a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d107      	bne.n	8009640 <STTS751_0_Probe+0x108>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800963a:	f06f 0304 	mvn.w	r3, #4
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8009640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009642:	4618      	mov	r0, r3
 8009644:	3740      	adds	r7, #64	; 0x40
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	08001fed 	.word	0x08001fed
 8009650:	08002051 	.word	0x08002051
 8009654:	08002105 	.word	0x08002105
 8009658:	080020a1 	.word	0x080020a1
 800965c:	08002169 	.word	0x08002169
 8009660:	20000628 	.word	0x20000628
 8009664:	200005b4 	.word	0x200005b4
 8009668:	20000578 	.word	0x20000578
 800966c:	200005a8 	.word	0x200005a8
 8009670:	20000138 	.word	0x20000138
 8009674:	2000015c 	.word	0x2000015c
 8009678:	20000584 	.word	0x20000584
 800967c:	20000148 	.word	0x20000148

08009680 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08e      	sub	sp, #56	; 0x38
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800968a:	2300      	movs	r3, #0
 800968c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800968e:	2301      	movs	r3, #1
 8009690:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d06e      	beq.n	800977a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	f200 809d 	bhi.w	80097de <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <IKS01A3_MOTION_SENSOR_Init+0x32>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d032      	beq.n	8009716 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80096b0:	e095      	b.n	80097de <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80096b2:	6838      	ldr	r0, [r7, #0]
 80096b4:	f000 f966 	bl	8009984 <LSM6DSO_0_Probe>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80096be:	f04f 33ff 	mov.w	r3, #4294967295
 80096c2:	e0cc      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80096c4:	4a68      	ldr	r2, [pc, #416]	; (8009868 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	4967      	ldr	r1, [pc, #412]	; (800986c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80096d6:	f107 010c 	add.w	r1, r7, #12
 80096da:	4610      	mov	r0, r2
 80096dc:	4798      	blx	r3
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80096e4:	f06f 0306 	mvn.w	r3, #6
 80096e8:	e0b9      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80096ea:	7b3b      	ldrb	r3, [r7, #12]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d103      	bne.n	80096f8 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f043 0302 	orr.w	r3, r3, #2
 80096f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80096f8:	7b7b      	ldrb	r3, [r7, #13]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d103      	bne.n	8009706 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	f043 0301 	orr.w	r3, r3, #1
 8009704:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d16c      	bne.n	80097e6 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	f043 0304 	orr.w	r3, r3, #4
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009714:	e067      	b.n	80097e6 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009716:	6838      	ldr	r0, [r7, #0]
 8009718:	f000 f9f4 	bl	8009b04 <LIS2DW12_0_Probe>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009722:	f04f 33ff 	mov.w	r3, #4294967295
 8009726:	e09a      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009728:	4a4f      	ldr	r2, [pc, #316]	; (8009868 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	494e      	ldr	r1, [pc, #312]	; (800986c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800973a:	f107 010c 	add.w	r1, r7, #12
 800973e:	4610      	mov	r0, r2
 8009740:	4798      	blx	r3
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009748:	f06f 0306 	mvn.w	r3, #6
 800974c:	e087      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800974e:	7b3b      	ldrb	r3, [r7, #12]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d103      	bne.n	800975c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	f043 0302 	orr.w	r3, r3, #2
 800975a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800975c:	7b7b      	ldrb	r3, [r7, #13]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d103      	bne.n	800976a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f043 0301 	orr.w	r3, r3, #1
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d13c      	bne.n	80097ea <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f043 0304 	orr.w	r3, r3, #4
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009778:	e037      	b.n	80097ea <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800977a:	6838      	ldr	r0, [r7, #0]
 800977c:	f000 fa6a 	bl	8009c54 <LIS2MDL_0_Probe>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009786:	f04f 33ff 	mov.w	r3, #4294967295
 800978a:	e068      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800978c:	4a36      	ldr	r2, [pc, #216]	; (8009868 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	4935      	ldr	r1, [pc, #212]	; (800986c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800979e:	f107 010c 	add.w	r1, r7, #12
 80097a2:	4610      	mov	r0, r2
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80097ac:	f06f 0306 	mvn.w	r3, #6
 80097b0:	e055      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80097b2:	7b3b      	ldrb	r3, [r7, #12]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d103      	bne.n	80097c0 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	f043 0302 	orr.w	r3, r3, #2
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80097c0:	7b7b      	ldrb	r3, [r7, #13]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d103      	bne.n	80097ce <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80097c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c8:	f043 0301 	orr.w	r3, r3, #1
 80097cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d10c      	bne.n	80097ee <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	f043 0304 	orr.w	r3, r3, #4
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80097dc:	e007      	b.n	80097ee <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80097de:	f06f 0301 	mvn.w	r3, #1
 80097e2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80097e4:	e004      	b.n	80097f0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80097e6:	bf00      	nop
 80097e8:	e002      	b.n	80097f0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80097ea:	bf00      	nop
 80097ec:	e000      	b.n	80097f0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80097ee:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80097f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80097f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f8:	e031      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80097fa:	2300      	movs	r3, #0
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097fe:	e02a      	b.n	8009856 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	4013      	ands	r3, r2
 8009806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009808:	429a      	cmp	r2, r3
 800980a:	d11e      	bne.n	800984a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800980c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	4013      	ands	r3, r2
 8009812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009814:	429a      	cmp	r2, r3
 8009816:	d118      	bne.n	800984a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009818:	4a15      	ldr	r2, [pc, #84]	; (8009870 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009820:	4814      	ldr	r0, [pc, #80]	; (8009874 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4613      	mov	r3, r2
 8009826:	005b      	lsls	r3, r3, #1
 8009828:	4413      	add	r3, r2
 800982a:	440b      	add	r3, r1
 800982c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	490e      	ldr	r1, [pc, #56]	; (800986c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800983a:	4610      	mov	r0, r2
 800983c:	4798      	blx	r3
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009844:	f06f 0304 	mvn.w	r3, #4
 8009848:	e009      	b.n	800985e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	3301      	adds	r3, #1
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	2b02      	cmp	r3, #2
 800985a:	d9d1      	bls.n	8009800 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800985c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800985e:	4618      	mov	r0, r3
 8009860:	3738      	adds	r7, #56	; 0x38
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000690 	.word	0x20000690
 800986c:	20000660 	.word	0x20000660
 8009870:	20000170 	.word	0x20000170
 8009874:	2000066c 	.word	0x2000066c

08009878 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d903      	bls.n	8009890 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009888:	f06f 0301 	mvn.w	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	e028      	b.n	80098e2 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009890:	4a16      	ldr	r2, [pc, #88]	; (80098ec <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	4013      	ands	r3, r2
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d11c      	bne.n	80098dc <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80098a2:	4a13      	ldr	r2, [pc, #76]	; (80098f0 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80098aa:	4812      	ldr	r0, [pc, #72]	; (80098f4 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	4413      	add	r3, r2
 80098b4:	440b      	add	r3, r1
 80098b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	490e      	ldr	r1, [pc, #56]	; (80098f8 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80098c4:	4610      	mov	r0, r2
 80098c6:	4798      	blx	r3
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098ce:	f06f 0304 	mvn.w	r3, #4
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	e005      	b.n	80098e2 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	e002      	b.n	80098e2 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80098dc:	f06f 0301 	mvn.w	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	2000069c 	.word	0x2000069c
 80098f0:	20000170 	.word	0x20000170
 80098f4:	2000066c 	.word	0x2000066c
 80098f8:	20000660 	.word	0x20000660

080098fc <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d903      	bls.n	8009916 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800990e:	f06f 0301 	mvn.w	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	e029      	b.n	800996a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009916:	4a17      	ldr	r2, [pc, #92]	; (8009974 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4013      	ands	r3, r2
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	429a      	cmp	r2, r3
 8009926:	d11d      	bne.n	8009964 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009928:	4a13      	ldr	r2, [pc, #76]	; (8009978 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009930:	4812      	ldr	r0, [pc, #72]	; (800997c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	4613      	mov	r3, r2
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	4413      	add	r3, r2
 800993a:	440b      	add	r3, r1
 800993c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	490f      	ldr	r1, [pc, #60]	; (8009980 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009956:	f06f 0304 	mvn.w	r3, #4
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e005      	b.n	800996a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e002      	b.n	800996a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009964:	f06f 0301 	mvn.w	r3, #1
 8009968:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800996a:	697b      	ldr	r3, [r7, #20]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	2000069c 	.word	0x2000069c
 8009978:	20000170 	.word	0x20000170
 800997c:	2000066c 	.word	0x2000066c
 8009980:	20000660 	.word	0x20000660

08009984 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b094      	sub	sp, #80	; 0x50
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800998c:	2300      	movs	r3, #0
 800998e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009990:	2300      	movs	r3, #0
 8009992:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009994:	23d7      	movs	r3, #215	; 0xd7
 8009996:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800999a:	4b4b      	ldr	r3, [pc, #300]	; (8009ac8 <LSM6DSO_0_Probe+0x144>)
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800999e:	4b4b      	ldr	r3, [pc, #300]	; (8009acc <LSM6DSO_0_Probe+0x148>)
 80099a0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80099a2:	4b4b      	ldr	r3, [pc, #300]	; (8009ad0 <LSM6DSO_0_Probe+0x14c>)
 80099a4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80099a6:	4b4b      	ldr	r3, [pc, #300]	; (8009ad4 <LSM6DSO_0_Probe+0x150>)
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80099aa:	4b4b      	ldr	r3, [pc, #300]	; (8009ad8 <LSM6DSO_0_Probe+0x154>)
 80099ac:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80099ae:	4b4b      	ldr	r3, [pc, #300]	; (8009adc <LSM6DSO_0_Probe+0x158>)
 80099b0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80099b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099b6:	4619      	mov	r1, r3
 80099b8:	4849      	ldr	r0, [pc, #292]	; (8009ae0 <LSM6DSO_0_Probe+0x15c>)
 80099ba:	f7fc fdf3 	bl	80065a4 <LSM6DSO_RegisterBusIO>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099c4:	f06f 0306 	mvn.w	r3, #6
 80099c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099ca:	e077      	b.n	8009abc <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80099cc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80099d0:	4619      	mov	r1, r3
 80099d2:	4843      	ldr	r0, [pc, #268]	; (8009ae0 <LSM6DSO_0_Probe+0x15c>)
 80099d4:	f7fc feec 	bl	80067b0 <LSM6DSO_ReadID>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099de:	f06f 0306 	mvn.w	r3, #6
 80099e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099e4:	e06a      	b.n	8009abc <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80099e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099ea:	2b6c      	cmp	r3, #108	; 0x6c
 80099ec:	d003      	beq.n	80099f6 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099ee:	f06f 0306 	mvn.w	r3, #6
 80099f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f4:	e062      	b.n	8009abc <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	4619      	mov	r1, r3
 80099fc:	4838      	ldr	r0, [pc, #224]	; (8009ae0 <LSM6DSO_0_Probe+0x15c>)
 80099fe:	f7fc feed 	bl	80067dc <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009a02:	7b7b      	ldrb	r3, [r7, #13]
 8009a04:	461a      	mov	r2, r3
 8009a06:	7b3b      	ldrb	r3, [r7, #12]
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4313      	orrs	r3, r2
 8009a12:	4a34      	ldr	r2, [pc, #208]	; (8009ae4 <LSM6DSO_0_Probe+0x160>)
 8009a14:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009a16:	4b34      	ldr	r3, [pc, #208]	; (8009ae8 <LSM6DSO_0_Probe+0x164>)
 8009a18:	4a31      	ldr	r2, [pc, #196]	; (8009ae0 <LSM6DSO_0_Probe+0x15c>)
 8009a1a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009a1c:	4b33      	ldr	r3, [pc, #204]	; (8009aec <LSM6DSO_0_Probe+0x168>)
 8009a1e:	4a34      	ldr	r2, [pc, #208]	; (8009af0 <LSM6DSO_0_Probe+0x16c>)
 8009a20:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d11d      	bne.n	8009a64 <LSM6DSO_0_Probe+0xe0>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d018      	beq.n	8009a64 <LSM6DSO_0_Probe+0xe0>
 8009a32:	7b7b      	ldrb	r3, [r7, #13]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d115      	bne.n	8009a64 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009a38:	4b2e      	ldr	r3, [pc, #184]	; (8009af4 <LSM6DSO_0_Probe+0x170>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	4a2e      	ldr	r2, [pc, #184]	; (8009af8 <LSM6DSO_0_Probe+0x174>)
 8009a3e:	492f      	ldr	r1, [pc, #188]	; (8009afc <LSM6DSO_0_Probe+0x178>)
 8009a40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009a44:	4b29      	ldr	r3, [pc, #164]	; (8009aec <LSM6DSO_0_Probe+0x168>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a27      	ldr	r2, [pc, #156]	; (8009ae8 <LSM6DSO_0_Probe+0x164>)
 8009a4c:	6812      	ldr	r2, [r2, #0]
 8009a4e:	4610      	mov	r0, r2
 8009a50:	4798      	blx	r3
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a58:	f06f 0304 	mvn.w	r3, #4
 8009a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a5e:	e001      	b.n	8009a64 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a60:	2300      	movs	r3, #0
 8009a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d11d      	bne.n	8009aa6 <LSM6DSO_0_Probe+0x122>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d018      	beq.n	8009aa6 <LSM6DSO_0_Probe+0x122>
 8009a74:	7b3b      	ldrb	r3, [r7, #12]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d115      	bne.n	8009aa6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009a7a:	4b1e      	ldr	r3, [pc, #120]	; (8009af4 <LSM6DSO_0_Probe+0x170>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	; (8009af8 <LSM6DSO_0_Probe+0x174>)
 8009a80:	491f      	ldr	r1, [pc, #124]	; (8009b00 <LSM6DSO_0_Probe+0x17c>)
 8009a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009a86:	4b19      	ldr	r3, [pc, #100]	; (8009aec <LSM6DSO_0_Probe+0x168>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a16      	ldr	r2, [pc, #88]	; (8009ae8 <LSM6DSO_0_Probe+0x164>)
 8009a8e:	6812      	ldr	r2, [r2, #0]
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a9a:	f06f 0304 	mvn.w	r3, #4
 8009a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa0:	e001      	b.n	8009aa6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d107      	bne.n	8009abc <LSM6DSO_0_Probe+0x138>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ab6:	f06f 0304 	mvn.w	r3, #4
 8009aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3750      	adds	r7, #80	; 0x50
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	08001fed 	.word	0x08001fed
 8009acc:	08002051 	.word	0x08002051
 8009ad0:	08002105 	.word	0x08002105
 8009ad4:	080020a1 	.word	0x080020a1
 8009ad8:	08002169 	.word	0x08002169
 8009adc:	0800a2c1 	.word	0x0800a2c1
 8009ae0:	200006a8 	.word	0x200006a8
 8009ae4:	2000069c 	.word	0x2000069c
 8009ae8:	20000660 	.word	0x20000660
 8009aec:	20000690 	.word	0x20000690
 8009af0:	200000e0 	.word	0x200000e0
 8009af4:	20000170 	.word	0x20000170
 8009af8:	2000066c 	.word	0x2000066c
 8009afc:	20000114 	.word	0x20000114
 8009b00:	200000f0 	.word	0x200000f0

08009b04 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b094      	sub	sp, #80	; 0x50
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009b10:	2300      	movs	r3, #0
 8009b12:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009b14:	2333      	movs	r3, #51	; 0x33
 8009b16:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009b1a:	4b40      	ldr	r3, [pc, #256]	; (8009c1c <LIS2DW12_0_Probe+0x118>)
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009b1e:	4b40      	ldr	r3, [pc, #256]	; (8009c20 <LIS2DW12_0_Probe+0x11c>)
 8009b20:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009b22:	4b40      	ldr	r3, [pc, #256]	; (8009c24 <LIS2DW12_0_Probe+0x120>)
 8009b24:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009b26:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <LIS2DW12_0_Probe+0x124>)
 8009b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009b2a:	4b40      	ldr	r3, [pc, #256]	; (8009c2c <LIS2DW12_0_Probe+0x128>)
 8009b2c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009b2e:	4b40      	ldr	r3, [pc, #256]	; (8009c30 <LIS2DW12_0_Probe+0x12c>)
 8009b30:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b36:	4619      	mov	r1, r3
 8009b38:	483e      	ldr	r0, [pc, #248]	; (8009c34 <LIS2DW12_0_Probe+0x130>)
 8009b3a:	f7f9 fb7f 	bl	800323c <LIS2DW12_RegisterBusIO>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b44:	f06f 0306 	mvn.w	r3, #6
 8009b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b4a:	e062      	b.n	8009c12 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009b4c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009b50:	4619      	mov	r1, r3
 8009b52:	4838      	ldr	r0, [pc, #224]	; (8009c34 <LIS2DW12_0_Probe+0x130>)
 8009b54:	f7f9 fc60 	bl	8003418 <LIS2DW12_ReadID>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b5e:	f06f 0306 	mvn.w	r3, #6
 8009b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b64:	e055      	b.n	8009c12 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8009b66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b6a:	2b44      	cmp	r3, #68	; 0x44
 8009b6c:	d003      	beq.n	8009b76 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b6e:	f06f 0306 	mvn.w	r3, #6
 8009b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b74:	e04d      	b.n	8009c12 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	482d      	ldr	r0, [pc, #180]	; (8009c34 <LIS2DW12_0_Probe+0x130>)
 8009b7e:	f7f9 fc61 	bl	8003444 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009b82:	7b7b      	ldrb	r3, [r7, #13]
 8009b84:	461a      	mov	r2, r3
 8009b86:	7b3b      	ldrb	r3, [r7, #12]
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4313      	orrs	r3, r2
 8009b92:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <LIS2DW12_0_Probe+0x134>)
 8009b94:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009b96:	4b29      	ldr	r3, [pc, #164]	; (8009c3c <LIS2DW12_0_Probe+0x138>)
 8009b98:	4a26      	ldr	r2, [pc, #152]	; (8009c34 <LIS2DW12_0_Probe+0x130>)
 8009b9a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009b9c:	4b28      	ldr	r3, [pc, #160]	; (8009c40 <LIS2DW12_0_Probe+0x13c>)
 8009b9e:	4a29      	ldr	r2, [pc, #164]	; (8009c44 <LIS2DW12_0_Probe+0x140>)
 8009ba0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11e      	bne.n	8009be6 <LIS2DW12_0_Probe+0xe2>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d019      	beq.n	8009be6 <LIS2DW12_0_Probe+0xe2>
 8009bb2:	7b3b      	ldrb	r3, [r7, #12]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d116      	bne.n	8009be6 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009bb8:	4b23      	ldr	r3, [pc, #140]	; (8009c48 <LIS2DW12_0_Probe+0x144>)
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	4a23      	ldr	r2, [pc, #140]	; (8009c4c <LIS2DW12_0_Probe+0x148>)
 8009bbe:	3303      	adds	r3, #3
 8009bc0:	4923      	ldr	r1, [pc, #140]	; (8009c50 <LIS2DW12_0_Probe+0x14c>)
 8009bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009bc6:	4b1e      	ldr	r3, [pc, #120]	; (8009c40 <LIS2DW12_0_Probe+0x13c>)
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1b      	ldr	r2, [pc, #108]	; (8009c3c <LIS2DW12_0_Probe+0x138>)
 8009bce:	6852      	ldr	r2, [r2, #4]
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bda:	f06f 0304 	mvn.w	r3, #4
 8009bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009be0:	e001      	b.n	8009be6 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d107      	bne.n	8009bfc <LIS2DW12_0_Probe+0xf8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bf6:	f06f 0304 	mvn.w	r3, #4
 8009bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <LIS2DW12_0_Probe+0x10e>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c0c:	f06f 0304 	mvn.w	r3, #4
 8009c10:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3750      	adds	r7, #80	; 0x50
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	08001fed 	.word	0x08001fed
 8009c20:	08002051 	.word	0x08002051
 8009c24:	08002105 	.word	0x08002105
 8009c28:	080020a1 	.word	0x080020a1
 8009c2c:	08002169 	.word	0x08002169
 8009c30:	0800a2c1 	.word	0x0800a2c1
 8009c34:	200006e0 	.word	0x200006e0
 8009c38:	2000069c 	.word	0x2000069c
 8009c3c:	20000660 	.word	0x20000660
 8009c40:	20000690 	.word	0x20000690
 8009c44:	20000040 	.word	0x20000040
 8009c48:	20000170 	.word	0x20000170
 8009c4c:	2000066c 	.word	0x2000066c
 8009c50:	20000050 	.word	0x20000050

08009c54 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b094      	sub	sp, #80	; 0x50
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009c60:	2300      	movs	r3, #0
 8009c62:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009c64:	233d      	movs	r3, #61	; 0x3d
 8009c66:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009c6a:	4b40      	ldr	r3, [pc, #256]	; (8009d6c <LIS2MDL_0_Probe+0x118>)
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009c6e:	4b40      	ldr	r3, [pc, #256]	; (8009d70 <LIS2MDL_0_Probe+0x11c>)
 8009c70:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009c72:	4b40      	ldr	r3, [pc, #256]	; (8009d74 <LIS2MDL_0_Probe+0x120>)
 8009c74:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009c76:	4b40      	ldr	r3, [pc, #256]	; (8009d78 <LIS2MDL_0_Probe+0x124>)
 8009c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009c7a:	4b40      	ldr	r3, [pc, #256]	; (8009d7c <LIS2MDL_0_Probe+0x128>)
 8009c7c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009c7e:	4b40      	ldr	r3, [pc, #256]	; (8009d80 <LIS2MDL_0_Probe+0x12c>)
 8009c80:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c86:	4619      	mov	r1, r3
 8009c88:	483e      	ldr	r0, [pc, #248]	; (8009d84 <LIS2MDL_0_Probe+0x130>)
 8009c8a:	f7fa fe2b 	bl	80048e4 <LIS2MDL_RegisterBusIO>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c94:	f06f 0306 	mvn.w	r3, #6
 8009c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c9a:	e062      	b.n	8009d62 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009c9c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4838      	ldr	r0, [pc, #224]	; (8009d84 <LIS2MDL_0_Probe+0x130>)
 8009ca4:	f7fa ff3a 	bl	8004b1c <LIS2MDL_ReadID>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009cae:	f06f 0306 	mvn.w	r3, #6
 8009cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb4:	e055      	b.n	8009d62 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8009cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cba:	2b40      	cmp	r3, #64	; 0x40
 8009cbc:	d003      	beq.n	8009cc6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009cbe:	f06f 0306 	mvn.w	r3, #6
 8009cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cc4:	e04d      	b.n	8009d62 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009cc6:	f107 030c 	add.w	r3, r7, #12
 8009cca:	4619      	mov	r1, r3
 8009ccc:	482d      	ldr	r0, [pc, #180]	; (8009d84 <LIS2MDL_0_Probe+0x130>)
 8009cce:	f7fa ff4b 	bl	8004b68 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009cd2:	7b7b      	ldrb	r3, [r7, #13]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	7b3b      	ldrb	r3, [r7, #12]
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	4a29      	ldr	r2, [pc, #164]	; (8009d88 <LIS2MDL_0_Probe+0x134>)
 8009ce4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009ce6:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <LIS2MDL_0_Probe+0x138>)
 8009ce8:	4a26      	ldr	r2, [pc, #152]	; (8009d84 <LIS2MDL_0_Probe+0x130>)
 8009cea:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009cec:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <LIS2MDL_0_Probe+0x13c>)
 8009cee:	4a29      	ldr	r2, [pc, #164]	; (8009d94 <LIS2MDL_0_Probe+0x140>)
 8009cf0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d11e      	bne.n	8009d36 <LIS2MDL_0_Probe+0xe2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f003 0304 	and.w	r3, r3, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d019      	beq.n	8009d36 <LIS2MDL_0_Probe+0xe2>
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d116      	bne.n	8009d36 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009d08:	4b23      	ldr	r3, [pc, #140]	; (8009d98 <LIS2MDL_0_Probe+0x144>)
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	4a23      	ldr	r2, [pc, #140]	; (8009d9c <LIS2MDL_0_Probe+0x148>)
 8009d0e:	3306      	adds	r3, #6
 8009d10:	4923      	ldr	r1, [pc, #140]	; (8009da0 <LIS2MDL_0_Probe+0x14c>)
 8009d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009d16:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <LIS2MDL_0_Probe+0x13c>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a1b      	ldr	r2, [pc, #108]	; (8009d8c <LIS2MDL_0_Probe+0x138>)
 8009d1e:	6892      	ldr	r2, [r2, #8]
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d2a:	f06f 0304 	mvn.w	r3, #4
 8009d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d30:	e001      	b.n	8009d36 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d107      	bne.n	8009d4c <LIS2MDL_0_Probe+0xf8>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d46:	f06f 0304 	mvn.w	r3, #4
 8009d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d107      	bne.n	8009d62 <LIS2MDL_0_Probe+0x10e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d5c:	f06f 0304 	mvn.w	r3, #4
 8009d60:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3750      	adds	r7, #80	; 0x50
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	08001fed 	.word	0x08001fed
 8009d70:	08002051 	.word	0x08002051
 8009d74:	08002105 	.word	0x08002105
 8009d78:	080020a1 	.word	0x080020a1
 8009d7c:	08002169 	.word	0x08002169
 8009d80:	0800a2c1 	.word	0x0800a2c1
 8009d84:	2000071c 	.word	0x2000071c
 8009d88:	2000069c 	.word	0x2000069c
 8009d8c:	20000660 	.word	0x20000660
 8009d90:	20000690 	.word	0x20000690
 8009d94:	20000074 	.word	0x20000074
 8009d98:	20000170 	.word	0x20000170
 8009d9c:	2000066c 	.word	0x2000066c
 8009da0:	20000084 	.word	0x20000084

08009da4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <BSP_LED_Init+0x20>)
 8009db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	08011a28 	.word	0x08011a28

08009dc8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8009dd2:	79fb      	ldrb	r3, [r7, #7]
 8009dd4:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <BSP_LED_On+0x28>)
 8009dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dda:	2120      	movs	r1, #32
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fe76 	bl	800aad0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000184 	.word	0x20000184

08009df4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	4a06      	ldr	r2, [pc, #24]	; (8009e1c <BSP_LED_Off+0x28>)
 8009e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e06:	2120      	movs	r1, #32
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fe60 	bl	800aad0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000184 	.word	0x20000184

08009e20 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	4a06      	ldr	r2, [pc, #24]	; (8009e48 <BSP_LED_Toggle+0x28>)
 8009e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e32:	2220      	movs	r2, #32
 8009e34:	4611      	mov	r1, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fe63 	bl	800ab02 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000184 	.word	0x20000184

08009e4c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e52:	2300      	movs	r3, #0
 8009e54:	60bb      	str	r3, [r7, #8]
 8009e56:	4b1c      	ldr	r3, [pc, #112]	; (8009ec8 <LED_USER_GPIO_Init+0x7c>)
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ec8 <LED_USER_GPIO_Init+0x7c>)
 8009e5c:	f043 0301 	orr.w	r3, r3, #1
 8009e60:	6313      	str	r3, [r2, #48]	; 0x30
 8009e62:	4b19      	ldr	r3, [pc, #100]	; (8009ec8 <LED_USER_GPIO_Init+0x7c>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	60bb      	str	r3, [r7, #8]
 8009e6c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e6e:	f107 030c 	add.w	r3, r7, #12
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	605a      	str	r2, [r3, #4]
 8009e78:	609a      	str	r2, [r3, #8]
 8009e7a:	60da      	str	r2, [r3, #12]
 8009e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e7e:	2300      	movs	r3, #0
 8009e80:	607b      	str	r3, [r7, #4]
 8009e82:	4b11      	ldr	r3, [pc, #68]	; (8009ec8 <LED_USER_GPIO_Init+0x7c>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e86:	4a10      	ldr	r2, [pc, #64]	; (8009ec8 <LED_USER_GPIO_Init+0x7c>)
 8009e88:	f043 0301 	orr.w	r3, r3, #1
 8009e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <LED_USER_GPIO_Init+0x7c>)
 8009e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2120      	movs	r1, #32
 8009e9e:	480b      	ldr	r0, [pc, #44]	; (8009ecc <LED_USER_GPIO_Init+0x80>)
 8009ea0:	f000 fe16 	bl	800aad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8009ea4:	2320      	movs	r3, #32
 8009ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8009eb4:	f107 030c 	add.w	r3, r7, #12
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4804      	ldr	r0, [pc, #16]	; (8009ecc <LED_USER_GPIO_Init+0x80>)
 8009ebc:	f000 fb88 	bl	800a5d0 <HAL_GPIO_Init>

}
 8009ec0:	bf00      	nop
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	40023800 	.word	0x40023800
 8009ecc:	40020000 	.word	0x40020000

08009ed0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	460a      	mov	r2, r1
 8009eda:	71fb      	strb	r3, [r7, #7]
 8009edc:	4613      	mov	r3, r2
 8009ede:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	4a1f      	ldr	r2, [pc, #124]	; (8009f64 <BSP_PB_Init+0x94>)
 8009ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eec:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8009eee:	79bb      	ldrb	r3, [r7, #6]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d132      	bne.n	8009f5a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8009ef4:	79fb      	ldrb	r3, [r7, #7]
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	4a1b      	ldr	r2, [pc, #108]	; (8009f68 <BSP_PB_Init+0x98>)
 8009efa:	441a      	add	r2, r3
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	491b      	ldr	r1, [pc, #108]	; (8009f6c <BSP_PB_Init+0x9c>)
 8009f00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f04:	4619      	mov	r1, r3
 8009f06:	4610      	mov	r0, r2
 8009f08:	f000 fb29 	bl	800a55e <HAL_EXTI_GetHandle>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009f12:	f06f 0303 	mvn.w	r3, #3
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	e01f      	b.n	8009f5a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	00db      	lsls	r3, r3, #3
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <BSP_PB_Init+0x98>)
 8009f20:	1898      	adds	r0, r3, r2
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	4a12      	ldr	r2, [pc, #72]	; (8009f70 <BSP_PB_Init+0xa0>)
 8009f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f000 fafc 	bl	800a52a <HAL_EXTI_RegisterCallback>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009f38:	f06f 0303 	mvn.w	r3, #3
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	e00c      	b.n	8009f5a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8009f40:	2028      	movs	r0, #40	; 0x28
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <BSP_PB_Init+0xa4>)
 8009f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f000 fab6 	bl	800a4be <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8009f52:	2328      	movs	r3, #40	; 0x28
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 face 	bl	800a4f6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	08011a2c 	.word	0x08011a2c
 8009f68:	2000018c 	.word	0x2000018c
 8009f6c:	08011a30 	.word	0x08011a30
 8009f70:	08011a34 	.word	0x08011a34
 8009f74:	08011a38 	.word	0x08011a38

08009f78 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8009f82:	79fb      	ldrb	r3, [r7, #7]
 8009f84:	4a09      	ldr	r2, [pc, #36]	; (8009fac <BSP_PB_GetState+0x34>)
 8009f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f8e:	4611      	mov	r1, r2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 fd85 	bl	800aaa0 <HAL_GPIO_ReadPin>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bf0c      	ite	eq
 8009f9c:	2301      	moveq	r3, #1
 8009f9e:	2300      	movne	r3, #0
 8009fa0:	b2db      	uxtb	r3, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000188 	.word	0x20000188

08009fb0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	f7f7 f94b 	bl	8001250 <BSP_PB_Callback>
}
 8009fba:	bf00      	nop
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	4b1a      	ldr	r3, [pc, #104]	; (800a034 <BUTTON_USER_GPIO_Init+0x74>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fce:	4a19      	ldr	r2, [pc, #100]	; (800a034 <BUTTON_USER_GPIO_Init+0x74>)
 8009fd0:	f043 0304 	orr.w	r3, r3, #4
 8009fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8009fd6:	4b17      	ldr	r3, [pc, #92]	; (800a034 <BUTTON_USER_GPIO_Init+0x74>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	60bb      	str	r3, [r7, #8]
 8009fe0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fe2:	f107 030c 	add.w	r3, r7, #12
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	605a      	str	r2, [r3, #4]
 8009fec:	609a      	str	r2, [r3, #8]
 8009fee:	60da      	str	r2, [r3, #12]
 8009ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	607b      	str	r3, [r7, #4]
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <BUTTON_USER_GPIO_Init+0x74>)
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffa:	4a0e      	ldr	r2, [pc, #56]	; (800a034 <BUTTON_USER_GPIO_Init+0x74>)
 8009ffc:	f043 0304 	orr.w	r3, r3, #4
 800a000:	6313      	str	r3, [r2, #48]	; 0x30
 800a002:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <BUTTON_USER_GPIO_Init+0x74>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	607b      	str	r3, [r7, #4]
 800a00c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800a00e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a014:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	4619      	mov	r1, r3
 800a024:	4804      	ldr	r0, [pc, #16]	; (800a038 <BUTTON_USER_GPIO_Init+0x78>)
 800a026:	f000 fad3 	bl	800a5d0 <HAL_GPIO_Init>

}
 800a02a:	bf00      	nop
 800a02c:	3720      	adds	r7, #32
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	40023800 	.word	0x40023800
 800a038:	40020800 	.word	0x40020800

0800a03c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800a04a:	79fb      	ldrb	r3, [r7, #7]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d903      	bls.n	800a058 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a050:	f06f 0301 	mvn.w	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e025      	b.n	800a0a4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	79fa      	ldrb	r2, [r7, #7]
 800a05c:	4914      	ldr	r1, [pc, #80]	; (800a0b0 <BSP_COM_Init+0x74>)
 800a05e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a062:	4814      	ldr	r0, [pc, #80]	; (800a0b4 <BSP_COM_Init+0x78>)
 800a064:	4613      	mov	r3, r2
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4403      	add	r3, r0
 800a06e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800a070:	79fa      	ldrb	r2, [r7, #7]
 800a072:	4613      	mov	r3, r2
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4413      	add	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <BSP_COM_Init+0x78>)
 800a07c:	4413      	add	r3, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f864 	bl	800a14c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800a084:	79fa      	ldrb	r2, [r7, #7]
 800a086:	4613      	mov	r3, r2
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4a09      	ldr	r2, [pc, #36]	; (800a0b4 <BSP_COM_Init+0x78>)
 800a090:	4413      	add	r3, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f000 f810 	bl	800a0b8 <MX_USART2_UART_Init>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a09e:	f06f 0303 	mvn.w	r3, #3
 800a0a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20000194 	.word	0x20000194
 800a0b4:	20000750 	.word	0x20000750

0800a0b8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a12      	ldr	r2, [pc, #72]	; (800a110 <MX_USART2_UART_Init+0x58>)
 800a0c8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a0d0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	220c      	movs	r2, #12
 800a0e8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f002 fce2 	bl	800cac0 <HAL_UART_Init>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	40004400 	.word	0x40004400

0800a114 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <__io_putchar+0x30>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	4613      	mov	r3, r2
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4a07      	ldr	r2, [pc, #28]	; (800a148 <__io_putchar+0x34>)
 800a12c:	1898      	adds	r0, r3, r2
 800a12e:	1d39      	adds	r1, r7, #4
 800a130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a134:	2201      	movs	r2, #1
 800a136:	f002 fd1a 	bl	800cb6e <HAL_UART_Transmit>
  return ch;
 800a13a:	687b      	ldr	r3, [r7, #4]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000794 	.word	0x20000794
 800a148:	20000750 	.word	0x20000750

0800a14c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a154:	2300      	movs	r3, #0
 800a156:	613b      	str	r3, [r7, #16]
 800a158:	4b1e      	ldr	r3, [pc, #120]	; (800a1d4 <USART2_MspInit+0x88>)
 800a15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15c:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <USART2_MspInit+0x88>)
 800a15e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a162:	6413      	str	r3, [r2, #64]	; 0x40
 800a164:	4b1b      	ldr	r3, [pc, #108]	; (800a1d4 <USART2_MspInit+0x88>)
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	4b17      	ldr	r3, [pc, #92]	; (800a1d4 <USART2_MspInit+0x88>)
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	4a16      	ldr	r2, [pc, #88]	; (800a1d4 <USART2_MspInit+0x88>)
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	6313      	str	r3, [r2, #48]	; 0x30
 800a180:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <USART2_MspInit+0x88>)
 800a182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	60fb      	str	r3, [r7, #12]
 800a18a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800a18c:	2304      	movs	r3, #4
 800a18e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a190:	2302      	movs	r3, #2
 800a192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a198:	2300      	movs	r3, #0
 800a19a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800a19c:	2307      	movs	r3, #7
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800a1a0:	f107 0314 	add.w	r3, r7, #20
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	480c      	ldr	r0, [pc, #48]	; (800a1d8 <USART2_MspInit+0x8c>)
 800a1a8:	f000 fa12 	bl	800a5d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800a1ac:	2308      	movs	r3, #8
 800a1ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800a1bc:	2307      	movs	r3, #7
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4804      	ldr	r0, [pc, #16]	; (800a1d8 <USART2_MspInit+0x8c>)
 800a1c8:	f000 fa02 	bl	800a5d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800a1cc:	bf00      	nop
 800a1ce:	3728      	adds	r7, #40	; 0x28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	40023800 	.word	0x40023800
 800a1d8:	40020000 	.word	0x40020000

0800a1dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <HAL_Init+0x40>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a0d      	ldr	r2, [pc, #52]	; (800a21c <HAL_Init+0x40>)
 800a1e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_Init+0x40>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <HAL_Init+0x40>)
 800a1f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a1f8:	4b08      	ldr	r3, [pc, #32]	; (800a21c <HAL_Init+0x40>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a07      	ldr	r2, [pc, #28]	; (800a21c <HAL_Init+0x40>)
 800a1fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a204:	2003      	movs	r0, #3
 800a206:	f000 f94f 	bl	800a4a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a20a:	2000      	movs	r0, #0
 800a20c:	f000 f808 	bl	800a220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a210:	f7f7 fe36 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40023c00 	.word	0x40023c00

0800a220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a228:	4b12      	ldr	r3, [pc, #72]	; (800a274 <HAL_InitTick+0x54>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	4b12      	ldr	r3, [pc, #72]	; (800a278 <HAL_InitTick+0x58>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	4619      	mov	r1, r3
 800a232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a236:	fbb3 f3f1 	udiv	r3, r3, r1
 800a23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f967 	bl	800a512 <HAL_SYSTICK_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e00e      	b.n	800a26c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b0f      	cmp	r3, #15
 800a252:	d80a      	bhi.n	800a26a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a254:	2200      	movs	r2, #0
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	f000 f92f 	bl	800a4be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a260:	4a06      	ldr	r2, [pc, #24]	; (800a27c <HAL_InitTick+0x5c>)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	e000      	b.n	800a26c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000004 	.word	0x20000004
 800a278:	2000019c 	.word	0x2000019c
 800a27c:	20000198 	.word	0x20000198

0800a280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a284:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <HAL_IncTick+0x20>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <HAL_IncTick+0x24>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4413      	add	r3, r2
 800a290:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <HAL_IncTick+0x24>)
 800a292:	6013      	str	r3, [r2, #0]
}
 800a294:	bf00      	nop
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	2000019c 	.word	0x2000019c
 800a2a4:	20000798 	.word	0x20000798

0800a2a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
  return uwTick;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <HAL_GetTick+0x14>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000798 	.word	0x20000798

0800a2c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a2c8:	f7ff ffee 	bl	800a2a8 <HAL_GetTick>
 800a2cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d005      	beq.n	800a2e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a2da:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <HAL_Delay+0x44>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a2e6:	bf00      	nop
 800a2e8:	f7ff ffde 	bl	800a2a8 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d8f7      	bhi.n	800a2e8 <HAL_Delay+0x28>
  {
  }
}
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	2000019c 	.word	0x2000019c

0800a308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <__NVIC_SetPriorityGrouping+0x44>)
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a324:	4013      	ands	r3, r2
 800a326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a33a:	4a04      	ldr	r2, [pc, #16]	; (800a34c <__NVIC_SetPriorityGrouping+0x44>)
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	60d3      	str	r3, [r2, #12]
}
 800a340:	bf00      	nop
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	e000ed00 	.word	0xe000ed00

0800a350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a354:	4b04      	ldr	r3, [pc, #16]	; (800a368 <__NVIC_GetPriorityGrouping+0x18>)
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	0a1b      	lsrs	r3, r3, #8
 800a35a:	f003 0307 	and.w	r3, r3, #7
}
 800a35e:	4618      	mov	r0, r3
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	e000ed00 	.word	0xe000ed00

0800a36c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	db0b      	blt.n	800a396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	f003 021f 	and.w	r2, r3, #31
 800a384:	4907      	ldr	r1, [pc, #28]	; (800a3a4 <__NVIC_EnableIRQ+0x38>)
 800a386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a38a:	095b      	lsrs	r3, r3, #5
 800a38c:	2001      	movs	r0, #1
 800a38e:	fa00 f202 	lsl.w	r2, r0, r2
 800a392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	e000e100 	.word	0xe000e100

0800a3a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	6039      	str	r1, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	db0a      	blt.n	800a3d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	490c      	ldr	r1, [pc, #48]	; (800a3f4 <__NVIC_SetPriority+0x4c>)
 800a3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c6:	0112      	lsls	r2, r2, #4
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	440b      	add	r3, r1
 800a3cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a3d0:	e00a      	b.n	800a3e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	4908      	ldr	r1, [pc, #32]	; (800a3f8 <__NVIC_SetPriority+0x50>)
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	3b04      	subs	r3, #4
 800a3e0:	0112      	lsls	r2, r2, #4
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	761a      	strb	r2, [r3, #24]
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	e000e100 	.word	0xe000e100
 800a3f8:	e000ed00 	.word	0xe000ed00

0800a3fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b089      	sub	sp, #36	; 0x24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f003 0307 	and.w	r3, r3, #7
 800a40e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f1c3 0307 	rsb	r3, r3, #7
 800a416:	2b04      	cmp	r3, #4
 800a418:	bf28      	it	cs
 800a41a:	2304      	movcs	r3, #4
 800a41c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	3304      	adds	r3, #4
 800a422:	2b06      	cmp	r3, #6
 800a424:	d902      	bls.n	800a42c <NVIC_EncodePriority+0x30>
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	3b03      	subs	r3, #3
 800a42a:	e000      	b.n	800a42e <NVIC_EncodePriority+0x32>
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a430:	f04f 32ff 	mov.w	r2, #4294967295
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	fa02 f303 	lsl.w	r3, r2, r3
 800a43a:	43da      	mvns	r2, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	401a      	ands	r2, r3
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a444:	f04f 31ff 	mov.w	r1, #4294967295
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	fa01 f303 	lsl.w	r3, r1, r3
 800a44e:	43d9      	mvns	r1, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a454:	4313      	orrs	r3, r2
         );
}
 800a456:	4618      	mov	r0, r3
 800a458:	3724      	adds	r7, #36	; 0x24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
	...

0800a464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3b01      	subs	r3, #1
 800a470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a474:	d301      	bcc.n	800a47a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a476:	2301      	movs	r3, #1
 800a478:	e00f      	b.n	800a49a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a47a:	4a0a      	ldr	r2, [pc, #40]	; (800a4a4 <SysTick_Config+0x40>)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3b01      	subs	r3, #1
 800a480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a482:	210f      	movs	r1, #15
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	f7ff ff8e 	bl	800a3a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <SysTick_Config+0x40>)
 800a48e:	2200      	movs	r2, #0
 800a490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a492:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <SysTick_Config+0x40>)
 800a494:	2207      	movs	r2, #7
 800a496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	e000e010 	.word	0xe000e010

0800a4a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff ff29 	bl	800a308 <__NVIC_SetPriorityGrouping>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b086      	sub	sp, #24
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	607a      	str	r2, [r7, #4]
 800a4ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a4d0:	f7ff ff3e 	bl	800a350 <__NVIC_GetPriorityGrouping>
 800a4d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	6978      	ldr	r0, [r7, #20]
 800a4dc:	f7ff ff8e 	bl	800a3fc <NVIC_EncodePriority>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff ff5d 	bl	800a3a8 <__NVIC_SetPriority>
}
 800a4ee:	bf00      	nop
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff ff31 	bl	800a36c <__NVIC_EnableIRQ>
}
 800a50a:	bf00      	nop
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff ffa2 	bl	800a464 <SysTick_Config>
 800a520:	4603      	mov	r3, r0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a52a:	b480      	push	{r7}
 800a52c:	b087      	sub	sp, #28
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	460b      	mov	r3, r1
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	605a      	str	r2, [r3, #4]
      break;
 800a548:	e002      	b.n	800a550 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
      break;
 800a54e:	bf00      	nop
  }

  return status;
 800a550:	7dfb      	ldrb	r3, [r7, #23]
}
 800a552:	4618      	mov	r0, r3
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e003      	b.n	800a57a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a578:	2300      	movs	r3, #0
  }
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
	...

0800a588 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 031f 	and.w	r3, r3, #31
 800a598:	2201      	movs	r2, #1
 800a59a:	fa02 f303 	lsl.w	r3, r2, r3
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <HAL_EXTI_IRQHandler+0x44>)
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d009      	beq.n	800a5c4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a5b0:	4a06      	ldr	r2, [pc, #24]	; (800a5cc <HAL_EXTI_IRQHandler+0x44>)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	4798      	blx	r3
    }
  }
}
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	40013c00 	.word	0x40013c00

0800a5d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b089      	sub	sp, #36	; 0x24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61fb      	str	r3, [r7, #28]
 800a5ea:	e159      	b.n	800a8a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	429a      	cmp	r2, r3
 800a606:	f040 8148 	bne.w	800a89a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	2b01      	cmp	r3, #1
 800a614:	d005      	beq.n	800a622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d130      	bne.n	800a684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	2203      	movs	r2, #3
 800a62e:	fa02 f303 	lsl.w	r3, r2, r3
 800a632:	43db      	mvns	r3, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	4013      	ands	r3, r2
 800a638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	4313      	orrs	r3, r2
 800a64a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a658:	2201      	movs	r2, #1
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	fa02 f303 	lsl.w	r3, r2, r3
 800a660:	43db      	mvns	r3, r3
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	4013      	ands	r3, r2
 800a666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	091b      	lsrs	r3, r3, #4
 800a66e:	f003 0201 	and.w	r2, r3, #1
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	fa02 f303 	lsl.w	r3, r2, r3
 800a678:	69ba      	ldr	r2, [r7, #24]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f003 0303 	and.w	r3, r3, #3
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d017      	beq.n	800a6c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	2203      	movs	r2, #3
 800a69c:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a0:	43db      	mvns	r3, r3
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f003 0303 	and.w	r3, r3, #3
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d123      	bne.n	800a714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	08da      	lsrs	r2, r3, #3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3208      	adds	r2, #8
 800a6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	220f      	movs	r2, #15
 800a6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	4313      	orrs	r3, r2
 800a704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	08da      	lsrs	r2, r3, #3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3208      	adds	r2, #8
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	2203      	movs	r2, #3
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	43db      	mvns	r3, r3
 800a726:	69ba      	ldr	r2, [r7, #24]
 800a728:	4013      	ands	r3, r2
 800a72a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f003 0203 	and.w	r2, r3, #3
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	4313      	orrs	r3, r2
 800a740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80a2 	beq.w	800a89a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	4b57      	ldr	r3, [pc, #348]	; (800a8b8 <HAL_GPIO_Init+0x2e8>)
 800a75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75e:	4a56      	ldr	r2, [pc, #344]	; (800a8b8 <HAL_GPIO_Init+0x2e8>)
 800a760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a764:	6453      	str	r3, [r2, #68]	; 0x44
 800a766:	4b54      	ldr	r3, [pc, #336]	; (800a8b8 <HAL_GPIO_Init+0x2e8>)
 800a768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a772:	4a52      	ldr	r2, [pc, #328]	; (800a8bc <HAL_GPIO_Init+0x2ec>)
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	089b      	lsrs	r3, r3, #2
 800a778:	3302      	adds	r3, #2
 800a77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a77e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f003 0303 	and.w	r3, r3, #3
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	220f      	movs	r2, #15
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43db      	mvns	r3, r3
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	4013      	ands	r3, r2
 800a794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a49      	ldr	r2, [pc, #292]	; (800a8c0 <HAL_GPIO_Init+0x2f0>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d019      	beq.n	800a7d2 <HAL_GPIO_Init+0x202>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a48      	ldr	r2, [pc, #288]	; (800a8c4 <HAL_GPIO_Init+0x2f4>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d013      	beq.n	800a7ce <HAL_GPIO_Init+0x1fe>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a47      	ldr	r2, [pc, #284]	; (800a8c8 <HAL_GPIO_Init+0x2f8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d00d      	beq.n	800a7ca <HAL_GPIO_Init+0x1fa>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a46      	ldr	r2, [pc, #280]	; (800a8cc <HAL_GPIO_Init+0x2fc>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d007      	beq.n	800a7c6 <HAL_GPIO_Init+0x1f6>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a45      	ldr	r2, [pc, #276]	; (800a8d0 <HAL_GPIO_Init+0x300>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d101      	bne.n	800a7c2 <HAL_GPIO_Init+0x1f2>
 800a7be:	2304      	movs	r3, #4
 800a7c0:	e008      	b.n	800a7d4 <HAL_GPIO_Init+0x204>
 800a7c2:	2307      	movs	r3, #7
 800a7c4:	e006      	b.n	800a7d4 <HAL_GPIO_Init+0x204>
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e004      	b.n	800a7d4 <HAL_GPIO_Init+0x204>
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e002      	b.n	800a7d4 <HAL_GPIO_Init+0x204>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <HAL_GPIO_Init+0x204>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	69fa      	ldr	r2, [r7, #28]
 800a7d6:	f002 0203 	and.w	r2, r2, #3
 800a7da:	0092      	lsls	r2, r2, #2
 800a7dc:	4093      	lsls	r3, r2
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7e4:	4935      	ldr	r1, [pc, #212]	; (800a8bc <HAL_GPIO_Init+0x2ec>)
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	089b      	lsrs	r3, r3, #2
 800a7ea:	3302      	adds	r3, #2
 800a7ec:	69ba      	ldr	r2, [r7, #24]
 800a7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a7f2:	4b38      	ldr	r3, [pc, #224]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	43db      	mvns	r3, r3
 800a7fc:	69ba      	ldr	r2, [r7, #24]
 800a7fe:	4013      	ands	r3, r2
 800a800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	4313      	orrs	r3, r2
 800a814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a816:	4a2f      	ldr	r2, [pc, #188]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a81c:	4b2d      	ldr	r3, [pc, #180]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	43db      	mvns	r3, r3
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	4013      	ands	r3, r2
 800a82a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d003      	beq.n	800a840 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a840:	4a24      	ldr	r2, [pc, #144]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a846:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	43db      	mvns	r3, r3
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	4013      	ands	r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4313      	orrs	r3, r2
 800a868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a86a:	4a1a      	ldr	r2, [pc, #104]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a870:	4b18      	ldr	r3, [pc, #96]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	43db      	mvns	r3, r3
 800a87a:	69ba      	ldr	r2, [r7, #24]
 800a87c:	4013      	ands	r3, r2
 800a87e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a894:	4a0f      	ldr	r2, [pc, #60]	; (800a8d4 <HAL_GPIO_Init+0x304>)
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	3301      	adds	r3, #1
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2b0f      	cmp	r3, #15
 800a8a4:	f67f aea2 	bls.w	800a5ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	3724      	adds	r7, #36	; 0x24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40023800 	.word	0x40023800
 800a8bc:	40013800 	.word	0x40013800
 800a8c0:	40020000 	.word	0x40020000
 800a8c4:	40020400 	.word	0x40020400
 800a8c8:	40020800 	.word	0x40020800
 800a8cc:	40020c00 	.word	0x40020c00
 800a8d0:	40021000 	.word	0x40021000
 800a8d4:	40013c00 	.word	0x40013c00

0800a8d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	e0bb      	b.n	800aa6c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	4013      	ands	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	f040 80ab 	bne.w	800aa66 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a910:	4a5c      	ldr	r2, [pc, #368]	; (800aa84 <HAL_GPIO_DeInit+0x1ac>)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	089b      	lsrs	r3, r3, #2
 800a916:	3302      	adds	r3, #2
 800a918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a91c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f003 0303 	and.w	r3, r3, #3
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	220f      	movs	r2, #15
 800a928:	fa02 f303 	lsl.w	r3, r2, r3
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	4013      	ands	r3, r2
 800a930:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a54      	ldr	r2, [pc, #336]	; (800aa88 <HAL_GPIO_DeInit+0x1b0>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d019      	beq.n	800a96e <HAL_GPIO_DeInit+0x96>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a53      	ldr	r2, [pc, #332]	; (800aa8c <HAL_GPIO_DeInit+0x1b4>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_GPIO_DeInit+0x92>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a52      	ldr	r2, [pc, #328]	; (800aa90 <HAL_GPIO_DeInit+0x1b8>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00d      	beq.n	800a966 <HAL_GPIO_DeInit+0x8e>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a51      	ldr	r2, [pc, #324]	; (800aa94 <HAL_GPIO_DeInit+0x1bc>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d007      	beq.n	800a962 <HAL_GPIO_DeInit+0x8a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a50      	ldr	r2, [pc, #320]	; (800aa98 <HAL_GPIO_DeInit+0x1c0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d101      	bne.n	800a95e <HAL_GPIO_DeInit+0x86>
 800a95a:	2304      	movs	r3, #4
 800a95c:	e008      	b.n	800a970 <HAL_GPIO_DeInit+0x98>
 800a95e:	2307      	movs	r3, #7
 800a960:	e006      	b.n	800a970 <HAL_GPIO_DeInit+0x98>
 800a962:	2303      	movs	r3, #3
 800a964:	e004      	b.n	800a970 <HAL_GPIO_DeInit+0x98>
 800a966:	2302      	movs	r3, #2
 800a968:	e002      	b.n	800a970 <HAL_GPIO_DeInit+0x98>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <HAL_GPIO_DeInit+0x98>
 800a96e:	2300      	movs	r3, #0
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	f002 0203 	and.w	r2, r2, #3
 800a976:	0092      	lsls	r2, r2, #2
 800a978:	4093      	lsls	r3, r2
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d132      	bne.n	800a9e6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a980:	4b46      	ldr	r3, [pc, #280]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	43db      	mvns	r3, r3
 800a988:	4944      	ldr	r1, [pc, #272]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a98a:	4013      	ands	r3, r2
 800a98c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a98e:	4b43      	ldr	r3, [pc, #268]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	43db      	mvns	r3, r3
 800a996:	4941      	ldr	r1, [pc, #260]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a998:	4013      	ands	r3, r2
 800a99a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a99c:	4b3f      	ldr	r3, [pc, #252]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	43db      	mvns	r3, r3
 800a9a4:	493d      	ldr	r1, [pc, #244]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a9aa:	4b3c      	ldr	r3, [pc, #240]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a9ac:	689a      	ldr	r2, [r3, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	493a      	ldr	r1, [pc, #232]	; (800aa9c <HAL_GPIO_DeInit+0x1c4>)
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	220f      	movs	r2, #15
 800a9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a9c8:	4a2e      	ldr	r2, [pc, #184]	; (800aa84 <HAL_GPIO_DeInit+0x1ac>)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	089b      	lsrs	r3, r3, #2
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	43da      	mvns	r2, r3
 800a9d8:	482a      	ldr	r0, [pc, #168]	; (800aa84 <HAL_GPIO_DeInit+0x1ac>)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	089b      	lsrs	r3, r3, #2
 800a9de:	400a      	ands	r2, r1
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	2103      	movs	r1, #3
 800a9f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	401a      	ands	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	08da      	lsrs	r2, r3, #3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3208      	adds	r2, #8
 800aa04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	220f      	movs	r2, #15
 800aa12:	fa02 f303 	lsl.w	r3, r2, r3
 800aa16:	43db      	mvns	r3, r3
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	08d2      	lsrs	r2, r2, #3
 800aa1c:	4019      	ands	r1, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3208      	adds	r2, #8
 800aa22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	2103      	movs	r1, #3
 800aa30:	fa01 f303 	lsl.w	r3, r1, r3
 800aa34:	43db      	mvns	r3, r3
 800aa36:	401a      	ands	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	2101      	movs	r1, #1
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	fa01 f303 	lsl.w	r3, r1, r3
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	401a      	ands	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	2103      	movs	r1, #3
 800aa5a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa5e:	43db      	mvns	r3, r3
 800aa60:	401a      	ands	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	f67f af40 	bls.w	800a8f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	371c      	adds	r7, #28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	40013800 	.word	0x40013800
 800aa88:	40020000 	.word	0x40020000
 800aa8c:	40020400 	.word	0x40020400
 800aa90:	40020800 	.word	0x40020800
 800aa94:	40020c00 	.word	0x40020c00
 800aa98:	40021000 	.word	0x40021000
 800aa9c:	40013c00 	.word	0x40013c00

0800aaa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691a      	ldr	r2, [r3, #16]
 800aab0:	887b      	ldrh	r3, [r7, #2]
 800aab2:	4013      	ands	r3, r2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
 800aabc:	e001      	b.n	800aac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	807b      	strh	r3, [r7, #2]
 800aadc:	4613      	mov	r3, r2
 800aade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aae0:	787b      	ldrb	r3, [r7, #1]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aae6:	887a      	ldrh	r2, [r7, #2]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aaec:	e003      	b.n	800aaf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aaee:	887b      	ldrh	r3, [r7, #2]
 800aaf0:	041a      	lsls	r2, r3, #16
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	619a      	str	r2, [r3, #24]
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ab14:	887a      	ldrh	r2, [r7, #2]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4013      	ands	r3, r2
 800ab1a:	041a      	lsls	r2, r3, #16
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	43d9      	mvns	r1, r3
 800ab20:	887b      	ldrh	r3, [r7, #2]
 800ab22:	400b      	ands	r3, r1
 800ab24:	431a      	orrs	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	619a      	str	r2, [r3, #24]
}
 800ab2a:	bf00      	nop
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
	...

0800ab38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e12b      	b.n	800ada2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f95d 	bl	800ae1e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2224      	movs	r2, #36	; 0x24
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0201 	bic.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ab9c:	f001 fc5a 	bl	800c454 <HAL_RCC_GetPCLK1Freq>
 800aba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	4a81      	ldr	r2, [pc, #516]	; (800adac <HAL_I2C_Init+0x274>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d807      	bhi.n	800abbc <HAL_I2C_Init+0x84>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4a80      	ldr	r2, [pc, #512]	; (800adb0 <HAL_I2C_Init+0x278>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	bf94      	ite	ls
 800abb4:	2301      	movls	r3, #1
 800abb6:	2300      	movhi	r3, #0
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	e006      	b.n	800abca <HAL_I2C_Init+0x92>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4a7d      	ldr	r2, [pc, #500]	; (800adb4 <HAL_I2C_Init+0x27c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	bf94      	ite	ls
 800abc4:	2301      	movls	r3, #1
 800abc6:	2300      	movhi	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e0e7      	b.n	800ada2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4a78      	ldr	r2, [pc, #480]	; (800adb8 <HAL_I2C_Init+0x280>)
 800abd6:	fba2 2303 	umull	r2, r3, r2, r3
 800abda:	0c9b      	lsrs	r3, r3, #18
 800abdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	430a      	orrs	r2, r1
 800abf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4a6a      	ldr	r2, [pc, #424]	; (800adac <HAL_I2C_Init+0x274>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d802      	bhi.n	800ac0c <HAL_I2C_Init+0xd4>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	e009      	b.n	800ac20 <HAL_I2C_Init+0xe8>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac12:	fb02 f303 	mul.w	r3, r2, r3
 800ac16:	4a69      	ldr	r2, [pc, #420]	; (800adbc <HAL_I2C_Init+0x284>)
 800ac18:	fba2 2303 	umull	r2, r3, r2, r3
 800ac1c:	099b      	lsrs	r3, r3, #6
 800ac1e:	3301      	adds	r3, #1
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ac32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	495c      	ldr	r1, [pc, #368]	; (800adac <HAL_I2C_Init+0x274>)
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	d819      	bhi.n	800ac74 <HAL_I2C_Init+0x13c>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	1e59      	subs	r1, r3, #1
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac4e:	1c59      	adds	r1, r3, #1
 800ac50:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ac54:	400b      	ands	r3, r1
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <HAL_I2C_Init+0x138>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	1e59      	subs	r1, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac6e:	e051      	b.n	800ad14 <HAL_I2C_Init+0x1dc>
 800ac70:	2304      	movs	r3, #4
 800ac72:	e04f      	b.n	800ad14 <HAL_I2C_Init+0x1dc>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d111      	bne.n	800aca0 <HAL_I2C_Init+0x168>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	1e58      	subs	r0, r3, #1
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6859      	ldr	r1, [r3, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	440b      	add	r3, r1
 800ac8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac8e:	3301      	adds	r3, #1
 800ac90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bf0c      	ite	eq
 800ac98:	2301      	moveq	r3, #1
 800ac9a:	2300      	movne	r3, #0
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	e012      	b.n	800acc6 <HAL_I2C_Init+0x18e>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	1e58      	subs	r0, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6859      	ldr	r1, [r3, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	0099      	lsls	r1, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800acb6:	3301      	adds	r3, #1
 800acb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bf0c      	ite	eq
 800acc0:	2301      	moveq	r3, #1
 800acc2:	2300      	movne	r3, #0
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <HAL_I2C_Init+0x196>
 800acca:	2301      	movs	r3, #1
 800accc:	e022      	b.n	800ad14 <HAL_I2C_Init+0x1dc>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10e      	bne.n	800acf4 <HAL_I2C_Init+0x1bc>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	1e58      	subs	r0, r3, #1
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6859      	ldr	r1, [r3, #4]
 800acde:	460b      	mov	r3, r1
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	440b      	add	r3, r1
 800ace4:	fbb0 f3f3 	udiv	r3, r0, r3
 800ace8:	3301      	adds	r3, #1
 800acea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acf2:	e00f      	b.n	800ad14 <HAL_I2C_Init+0x1dc>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	1e58      	subs	r0, r3, #1
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6859      	ldr	r1, [r3, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	0099      	lsls	r1, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	6809      	ldr	r1, [r1, #0]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69da      	ldr	r2, [r3, #28]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ad42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6911      	ldr	r1, [r2, #16]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	68d2      	ldr	r2, [r2, #12]
 800ad4e:	4311      	orrs	r1, r2
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6812      	ldr	r2, [r2, #0]
 800ad54:	430b      	orrs	r3, r1
 800ad56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	695a      	ldr	r2, [r3, #20]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0201 	orr.w	r2, r2, #1
 800ad82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	000186a0 	.word	0x000186a0
 800adb0:	001e847f 	.word	0x001e847f
 800adb4:	003d08ff 	.word	0x003d08ff
 800adb8:	431bde83 	.word	0x431bde83
 800adbc:	10624dd3 	.word	0x10624dd3

0800adc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e021      	b.n	800ae16 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2224      	movs	r2, #36	; 0x24
 800add6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f022 0201 	bic.w	r2, r2, #1
 800ade8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f821 	bl	800ae32 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800ae3a:	bf00      	nop
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
	...

0800ae48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	4608      	mov	r0, r1
 800ae52:	4611      	mov	r1, r2
 800ae54:	461a      	mov	r2, r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	817b      	strh	r3, [r7, #10]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	813b      	strh	r3, [r7, #8]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae62:	f7ff fa21 	bl	800a2a8 <HAL_GetTick>
 800ae66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b20      	cmp	r3, #32
 800ae72:	f040 80d9 	bne.w	800b028 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	2319      	movs	r3, #25
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	496d      	ldr	r1, [pc, #436]	; (800b034 <HAL_I2C_Mem_Write+0x1ec>)
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 fc99 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e0cc      	b.n	800b02a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_I2C_Mem_Write+0x56>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e0c5      	b.n	800b02a <HAL_I2C_Mem_Write+0x1e2>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d007      	beq.n	800aec4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f042 0201 	orr.w	r2, r2, #1
 800aec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2221      	movs	r2, #33	; 0x21
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2240      	movs	r2, #64	; 0x40
 800aee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6a3a      	ldr	r2, [r7, #32]
 800aeee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4a4d      	ldr	r2, [pc, #308]	; (800b038 <HAL_I2C_Mem_Write+0x1f0>)
 800af04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af06:	88f8      	ldrh	r0, [r7, #6]
 800af08:	893a      	ldrh	r2, [r7, #8]
 800af0a:	8979      	ldrh	r1, [r7, #10]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	4603      	mov	r3, r0
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 fad0 	bl	800b4bc <I2C_RequestMemoryWrite>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d052      	beq.n	800afc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e081      	b.n	800b02a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 fd1a 	bl	800b964 <I2C_WaitOnTXEFlagUntilTimeout>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00d      	beq.n	800af52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d107      	bne.n	800af4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e06b      	b.n	800b02a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	781a      	ldrb	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af6c:	3b01      	subs	r3, #1
 800af6e:	b29a      	uxth	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af78:	b29b      	uxth	r3, r3
 800af7a:	3b01      	subs	r3, #1
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d11b      	bne.n	800afc8 <HAL_I2C_Mem_Write+0x180>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af94:	2b00      	cmp	r3, #0
 800af96:	d017      	beq.n	800afc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	781a      	ldrb	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb2:	3b01      	subs	r3, #1
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	3b01      	subs	r3, #1
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1aa      	bne.n	800af26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 fd06 	bl	800b9e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00d      	beq.n	800affc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	d107      	bne.n	800aff8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aff6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e016      	b.n	800b02a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b00a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2220      	movs	r2, #32
 800b010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	e000      	b.n	800b02a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b028:	2302      	movs	r3, #2
  }
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	00100002 	.word	0x00100002
 800b038:	ffff0000 	.word	0xffff0000

0800b03c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08c      	sub	sp, #48	; 0x30
 800b040:	af02      	add	r7, sp, #8
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	4608      	mov	r0, r1
 800b046:	4611      	mov	r1, r2
 800b048:	461a      	mov	r2, r3
 800b04a:	4603      	mov	r3, r0
 800b04c:	817b      	strh	r3, [r7, #10]
 800b04e:	460b      	mov	r3, r1
 800b050:	813b      	strh	r3, [r7, #8]
 800b052:	4613      	mov	r3, r2
 800b054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b056:	f7ff f927 	bl	800a2a8 <HAL_GetTick>
 800b05a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b20      	cmp	r3, #32
 800b066:	f040 8208 	bne.w	800b47a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	2319      	movs	r3, #25
 800b070:	2201      	movs	r2, #1
 800b072:	497b      	ldr	r1, [pc, #492]	; (800b260 <HAL_I2C_Mem_Read+0x224>)
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 fb9f 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b080:	2302      	movs	r3, #2
 800b082:	e1fb      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <HAL_I2C_Mem_Read+0x56>
 800b08e:	2302      	movs	r3, #2
 800b090:	e1f4      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d007      	beq.n	800b0b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f042 0201 	orr.w	r2, r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2222      	movs	r2, #34	; 0x22
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2240      	movs	r2, #64	; 0x40
 800b0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b0e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4a5b      	ldr	r2, [pc, #364]	; (800b264 <HAL_I2C_Mem_Read+0x228>)
 800b0f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0fa:	88f8      	ldrh	r0, [r7, #6]
 800b0fc:	893a      	ldrh	r2, [r7, #8]
 800b0fe:	8979      	ldrh	r1, [r7, #10]
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4603      	mov	r3, r0
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 fa6c 	bl	800b5e8 <I2C_RequestMemoryRead>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e1b0      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d113      	bne.n	800b14a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b122:	2300      	movs	r3, #0
 800b124:	623b      	str	r3, [r7, #32]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	623b      	str	r3, [r7, #32]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	623b      	str	r3, [r7, #32]
 800b136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	e184      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d11b      	bne.n	800b18a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b162:	2300      	movs	r3, #0
 800b164:	61fb      	str	r3, [r7, #28]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	e164      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d11b      	bne.n	800b1ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	61bb      	str	r3, [r7, #24]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	e144      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b1e0:	e138      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	f200 80f1 	bhi.w	800b3ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d123      	bne.n	800b23c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 fc35 	bl	800ba68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e139      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	b2d2      	uxtb	r2, r2
 800b214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	1c5a      	adds	r2, r3, #1
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b224:	3b01      	subs	r3, #1
 800b226:	b29a      	uxth	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b230:	b29b      	uxth	r3, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	b29a      	uxth	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b23a:	e10b      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b240:	2b02      	cmp	r3, #2
 800b242:	d14e      	bne.n	800b2e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	2200      	movs	r2, #0
 800b24c:	4906      	ldr	r1, [pc, #24]	; (800b268 <HAL_I2C_Mem_Read+0x22c>)
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 fab2 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d008      	beq.n	800b26c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e10e      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
 800b25e:	bf00      	nop
 800b260:	00100002 	.word	0x00100002
 800b264:	ffff0000 	.word	0xffff0000
 800b268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b27a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691a      	ldr	r2, [r3, #16]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b298:	3b01      	subs	r3, #1
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	691a      	ldr	r2, [r3, #16]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	b2d2      	uxtb	r2, r2
 800b2ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2e0:	e0b8      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4966      	ldr	r1, [pc, #408]	; (800b484 <HAL_I2C_Mem_Read+0x448>)
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fa63 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e0bf      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b30a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b334:	b29b      	uxth	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	2200      	movs	r2, #0
 800b346:	494f      	ldr	r1, [pc, #316]	; (800b484 <HAL_I2C_Mem_Read+0x448>)
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fa35 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e091      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b384:	3b01      	subs	r3, #1
 800b386:	b29a      	uxth	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b390:	b29b      	uxth	r3, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	691a      	ldr	r2, [r3, #16]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3cc:	e042      	b.n	800b454 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 fb48 	bl	800ba68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e04c      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691a      	ldr	r2, [r3, #16]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	b2d2      	uxtb	r2, r2
 800b3ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	3b01      	subs	r3, #1
 800b40e:	b29a      	uxth	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	f003 0304 	and.w	r3, r3, #4
 800b41e:	2b04      	cmp	r3, #4
 800b420:	d118      	bne.n	800b454 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	691a      	ldr	r2, [r3, #16]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b43e:	3b01      	subs	r3, #1
 800b440:	b29a      	uxth	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	3b01      	subs	r3, #1
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f47f aec2 	bne.w	800b1e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2220      	movs	r2, #32
 800b462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	e000      	b.n	800b47c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b47a:	2302      	movs	r3, #2
  }
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3728      	adds	r7, #40	; 0x28
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	00010004 	.word	0x00010004

0800b488 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b496:	b2db      	uxtb	r3, r3
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	817b      	strh	r3, [r7, #10]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	813b      	strh	r3, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 f960 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50c:	d103      	bne.n	800b516 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b514:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e05f      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b51a:	897b      	ldrh	r3, [r7, #10]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	6a3a      	ldr	r2, [r7, #32]
 800b52e:	492d      	ldr	r1, [pc, #180]	; (800b5e4 <I2C_RequestMemoryWrite+0x128>)
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 f998 	bl	800b866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e04c      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b558:	6a39      	ldr	r1, [r7, #32]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fa02 	bl	800b964 <I2C_WaitOnTXEFlagUntilTimeout>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00d      	beq.n	800b582 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d107      	bne.n	800b57e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b57c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e02b      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d105      	bne.n	800b594 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b588:	893b      	ldrh	r3, [r7, #8]
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	611a      	str	r2, [r3, #16]
 800b592:	e021      	b.n	800b5d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b594:	893b      	ldrh	r3, [r7, #8]
 800b596:	0a1b      	lsrs	r3, r3, #8
 800b598:	b29b      	uxth	r3, r3
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a4:	6a39      	ldr	r1, [r7, #32]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 f9dc 	bl	800b964 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00d      	beq.n	800b5ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d107      	bne.n	800b5ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e005      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b5ce:	893b      	ldrh	r3, [r7, #8]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	00010002 	.word	0x00010002

0800b5e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	817b      	strh	r3, [r7, #10]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	813b      	strh	r3, [r7, #8]
 800b5fe:	4613      	mov	r3, r2
 800b600:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b610:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	2200      	movs	r2, #0
 800b62a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 f8c2 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00d      	beq.n	800b656 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b648:	d103      	bne.n	800b652 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b650:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e0aa      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b656:	897b      	ldrh	r3, [r7, #10]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	461a      	mov	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	6a3a      	ldr	r2, [r7, #32]
 800b66a:	4952      	ldr	r1, [pc, #328]	; (800b7b4 <I2C_RequestMemoryRead+0x1cc>)
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 f8fa 	bl	800b866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e097      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b694:	6a39      	ldr	r1, [r7, #32]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f964 	bl	800b964 <I2C_WaitOnTXEFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00d      	beq.n	800b6be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d107      	bne.n	800b6ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e076      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d105      	bne.n	800b6d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6c4:	893b      	ldrh	r3, [r7, #8]
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	611a      	str	r2, [r3, #16]
 800b6ce:	e021      	b.n	800b714 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6d0:	893b      	ldrh	r3, [r7, #8]
 800b6d2:	0a1b      	lsrs	r3, r3, #8
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e0:	6a39      	ldr	r1, [r7, #32]
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 f93e 	bl	800b964 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00d      	beq.n	800b70a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d107      	bne.n	800b706 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e050      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b70a:	893b      	ldrh	r3, [r7, #8]
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	6a39      	ldr	r1, [r7, #32]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 f923 	bl	800b964 <I2C_WaitOnTXEFlagUntilTimeout>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00d      	beq.n	800b740 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d107      	bne.n	800b73c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b73a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e035      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b74e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2200      	movs	r2, #0
 800b758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 f82b 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00d      	beq.n	800b784 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b776:	d103      	bne.n	800b780 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b77e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e013      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b784:	897b      	ldrh	r3, [r7, #10]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f043 0301 	orr.w	r3, r3, #1
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	6a3a      	ldr	r2, [r7, #32]
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <I2C_RequestMemoryRead+0x1cc>)
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 f863 	bl	800b866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	00010002 	.word	0x00010002

0800b7b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7c8:	e025      	b.n	800b816 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d0:	d021      	beq.n	800b816 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7d2:	f7fe fd69 	bl	800a2a8 <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d302      	bcc.n	800b7e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d116      	bne.n	800b816 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b802:	f043 0220 	orr.w	r2, r3, #32
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e023      	b.n	800b85e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d10d      	bne.n	800b83c <I2C_WaitOnFlagUntilTimeout+0x84>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	43da      	mvns	r2, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	4013      	ands	r3, r2
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bf0c      	ite	eq
 800b832:	2301      	moveq	r3, #1
 800b834:	2300      	movne	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	e00c      	b.n	800b856 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	43da      	mvns	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	4013      	ands	r3, r2
 800b848:	b29b      	uxth	r3, r3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bf0c      	ite	eq
 800b84e:	2301      	moveq	r3, #1
 800b850:	2300      	movne	r3, #0
 800b852:	b2db      	uxtb	r3, r3
 800b854:	461a      	mov	r2, r3
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d0b6      	beq.n	800b7ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
 800b872:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b874:	e051      	b.n	800b91a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b884:	d123      	bne.n	800b8ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b894:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b89e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	f043 0204 	orr.w	r2, r3, #4
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e046      	b.n	800b95c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d4:	d021      	beq.n	800b91a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8d6:	f7fe fce7 	bl	800a2a8 <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d302      	bcc.n	800b8ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d116      	bne.n	800b91a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b906:	f043 0220 	orr.w	r2, r3, #32
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e020      	b.n	800b95c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	0c1b      	lsrs	r3, r3, #16
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b01      	cmp	r3, #1
 800b922:	d10c      	bne.n	800b93e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	43da      	mvns	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	4013      	ands	r3, r2
 800b930:	b29b      	uxth	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	bf14      	ite	ne
 800b936:	2301      	movne	r3, #1
 800b938:	2300      	moveq	r3, #0
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	e00b      	b.n	800b956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	43da      	mvns	r2, r3
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	4013      	ands	r3, r2
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bf14      	ite	ne
 800b950:	2301      	movne	r3, #1
 800b952:	2300      	moveq	r3, #0
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d18d      	bne.n	800b876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b970:	e02d      	b.n	800b9ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f000 f8ce 	bl	800bb14 <I2C_IsAcknowledgeFailed>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e02d      	b.n	800b9de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d021      	beq.n	800b9ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b98a:	f7fe fc8d 	bl	800a2a8 <HAL_GetTick>
 800b98e:	4602      	mov	r2, r0
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	429a      	cmp	r2, r3
 800b998:	d302      	bcc.n	800b9a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d116      	bne.n	800b9ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2220      	movs	r2, #32
 800b9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	f043 0220 	orr.w	r2, r3, #32
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e007      	b.n	800b9de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d8:	2b80      	cmp	r3, #128	; 0x80
 800b9da:	d1ca      	bne.n	800b972 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	60f8      	str	r0, [r7, #12]
 800b9ee:	60b9      	str	r1, [r7, #8]
 800b9f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b9f2:	e02d      	b.n	800ba50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 f88d 	bl	800bb14 <I2C_IsAcknowledgeFailed>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e02d      	b.n	800ba60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d021      	beq.n	800ba50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba0c:	f7fe fc4c 	bl	800a2a8 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d302      	bcc.n	800ba22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d116      	bne.n	800ba50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3c:	f043 0220 	orr.w	r2, r3, #32
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e007      	b.n	800ba60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	f003 0304 	and.w	r3, r3, #4
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	d1ca      	bne.n	800b9f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba74:	e042      	b.n	800bafc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	f003 0310 	and.w	r3, r3, #16
 800ba80:	2b10      	cmp	r3, #16
 800ba82:	d119      	bne.n	800bab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f06f 0210 	mvn.w	r2, #16
 800ba8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e029      	b.n	800bb0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bab8:	f7fe fbf6 	bl	800a2a8 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d302      	bcc.n	800bace <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d116      	bne.n	800bafc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2220      	movs	r2, #32
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	f043 0220 	orr.w	r2, r3, #32
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e007      	b.n	800bb0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb06:	2b40      	cmp	r3, #64	; 0x40
 800bb08:	d1b5      	bne.n	800ba76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb2a:	d11b      	bne.n	800bb64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2220      	movs	r2, #32
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb50:	f043 0204 	orr.w	r2, r3, #4
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e000      	b.n	800bb66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
	...

0800bb74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e267      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d075      	beq.n	800bc7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb92:	4b88      	ldr	r3, [pc, #544]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	f003 030c 	and.w	r3, r3, #12
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d00c      	beq.n	800bbb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb9e:	4b85      	ldr	r3, [pc, #532]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bba6:	2b08      	cmp	r3, #8
 800bba8:	d112      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbaa:	4b82      	ldr	r3, [pc, #520]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbb6:	d10b      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbb8:	4b7e      	ldr	r3, [pc, #504]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d05b      	beq.n	800bc7c <HAL_RCC_OscConfig+0x108>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d157      	bne.n	800bc7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e242      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbd8:	d106      	bne.n	800bbe8 <HAL_RCC_OscConfig+0x74>
 800bbda:	4b76      	ldr	r3, [pc, #472]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a75      	ldr	r2, [pc, #468]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bbe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	e01d      	b.n	800bc24 <HAL_RCC_OscConfig+0xb0>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbf0:	d10c      	bne.n	800bc0c <HAL_RCC_OscConfig+0x98>
 800bbf2:	4b70      	ldr	r3, [pc, #448]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a6f      	ldr	r2, [pc, #444]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bbf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	4b6d      	ldr	r3, [pc, #436]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a6c      	ldr	r2, [pc, #432]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	e00b      	b.n	800bc24 <HAL_RCC_OscConfig+0xb0>
 800bc0c:	4b69      	ldr	r3, [pc, #420]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a68      	ldr	r2, [pc, #416]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	4b66      	ldr	r3, [pc, #408]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a65      	ldr	r2, [pc, #404]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d013      	beq.n	800bc54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc2c:	f7fe fb3c 	bl	800a2a8 <HAL_GetTick>
 800bc30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc32:	e008      	b.n	800bc46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc34:	f7fe fb38 	bl	800a2a8 <HAL_GetTick>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	2b64      	cmp	r3, #100	; 0x64
 800bc40:	d901      	bls.n	800bc46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e207      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc46:	4b5b      	ldr	r3, [pc, #364]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0f0      	beq.n	800bc34 <HAL_RCC_OscConfig+0xc0>
 800bc52:	e014      	b.n	800bc7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc54:	f7fe fb28 	bl	800a2a8 <HAL_GetTick>
 800bc58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc5a:	e008      	b.n	800bc6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc5c:	f7fe fb24 	bl	800a2a8 <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b64      	cmp	r3, #100	; 0x64
 800bc68:	d901      	bls.n	800bc6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e1f3      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc6e:	4b51      	ldr	r3, [pc, #324]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f0      	bne.n	800bc5c <HAL_RCC_OscConfig+0xe8>
 800bc7a:	e000      	b.n	800bc7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 0302 	and.w	r3, r3, #2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d063      	beq.n	800bd52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc8a:	4b4a      	ldr	r3, [pc, #296]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f003 030c 	and.w	r3, r3, #12
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00b      	beq.n	800bcae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc96:	4b47      	ldr	r3, [pc, #284]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc9e:	2b08      	cmp	r3, #8
 800bca0:	d11c      	bne.n	800bcdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bca2:	4b44      	ldr	r3, [pc, #272]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d116      	bne.n	800bcdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcae:	4b41      	ldr	r3, [pc, #260]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d005      	beq.n	800bcc6 <HAL_RCC_OscConfig+0x152>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d001      	beq.n	800bcc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e1c7      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcc6:	4b3b      	ldr	r3, [pc, #236]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	4937      	ldr	r1, [pc, #220]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcda:	e03a      	b.n	800bd52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d020      	beq.n	800bd26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bce4:	4b34      	ldr	r3, [pc, #208]	; (800bdb8 <HAL_RCC_OscConfig+0x244>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcea:	f7fe fadd 	bl	800a2a8 <HAL_GetTick>
 800bcee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcf0:	e008      	b.n	800bd04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcf2:	f7fe fad9 	bl	800a2a8 <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d901      	bls.n	800bd04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e1a8      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd04:	4b2b      	ldr	r3, [pc, #172]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0f0      	beq.n	800bcf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd10:	4b28      	ldr	r3, [pc, #160]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	00db      	lsls	r3, r3, #3
 800bd1e:	4925      	ldr	r1, [pc, #148]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bd20:	4313      	orrs	r3, r2
 800bd22:	600b      	str	r3, [r1, #0]
 800bd24:	e015      	b.n	800bd52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd26:	4b24      	ldr	r3, [pc, #144]	; (800bdb8 <HAL_RCC_OscConfig+0x244>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd2c:	f7fe fabc 	bl	800a2a8 <HAL_GetTick>
 800bd30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd32:	e008      	b.n	800bd46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd34:	f7fe fab8 	bl	800a2a8 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d901      	bls.n	800bd46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bd42:	2303      	movs	r3, #3
 800bd44:	e187      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd46:	4b1b      	ldr	r3, [pc, #108]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1f0      	bne.n	800bd34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d036      	beq.n	800bdcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d016      	beq.n	800bd94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd66:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <HAL_RCC_OscConfig+0x248>)
 800bd68:	2201      	movs	r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd6c:	f7fe fa9c 	bl	800a2a8 <HAL_GetTick>
 800bd70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd72:	e008      	b.n	800bd86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd74:	f7fe fa98 	bl	800a2a8 <HAL_GetTick>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d901      	bls.n	800bd86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e167      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <HAL_RCC_OscConfig+0x240>)
 800bd88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f0      	beq.n	800bd74 <HAL_RCC_OscConfig+0x200>
 800bd92:	e01b      	b.n	800bdcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd94:	4b09      	ldr	r3, [pc, #36]	; (800bdbc <HAL_RCC_OscConfig+0x248>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd9a:	f7fe fa85 	bl	800a2a8 <HAL_GetTick>
 800bd9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bda0:	e00e      	b.n	800bdc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bda2:	f7fe fa81 	bl	800a2a8 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d907      	bls.n	800bdc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e150      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
 800bdb4:	40023800 	.word	0x40023800
 800bdb8:	42470000 	.word	0x42470000
 800bdbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdc0:	4b88      	ldr	r3, [pc, #544]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bdc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1ea      	bne.n	800bda2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8097 	beq.w	800bf08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdde:	4b81      	ldr	r3, [pc, #516]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10f      	bne.n	800be0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdea:	2300      	movs	r3, #0
 800bdec:	60bb      	str	r3, [r7, #8]
 800bdee:	4b7d      	ldr	r3, [pc, #500]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	4a7c      	ldr	r2, [pc, #496]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bdf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdf8:	6413      	str	r3, [r2, #64]	; 0x40
 800bdfa:	4b7a      	ldr	r3, [pc, #488]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be02:	60bb      	str	r3, [r7, #8]
 800be04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be06:	2301      	movs	r3, #1
 800be08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be0a:	4b77      	ldr	r3, [pc, #476]	; (800bfe8 <HAL_RCC_OscConfig+0x474>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be12:	2b00      	cmp	r3, #0
 800be14:	d118      	bne.n	800be48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be16:	4b74      	ldr	r3, [pc, #464]	; (800bfe8 <HAL_RCC_OscConfig+0x474>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a73      	ldr	r2, [pc, #460]	; (800bfe8 <HAL_RCC_OscConfig+0x474>)
 800be1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be22:	f7fe fa41 	bl	800a2a8 <HAL_GetTick>
 800be26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be28:	e008      	b.n	800be3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be2a:	f7fe fa3d 	bl	800a2a8 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	2b02      	cmp	r3, #2
 800be36:	d901      	bls.n	800be3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800be38:	2303      	movs	r3, #3
 800be3a:	e10c      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be3c:	4b6a      	ldr	r3, [pc, #424]	; (800bfe8 <HAL_RCC_OscConfig+0x474>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be44:	2b00      	cmp	r3, #0
 800be46:	d0f0      	beq.n	800be2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d106      	bne.n	800be5e <HAL_RCC_OscConfig+0x2ea>
 800be50:	4b64      	ldr	r3, [pc, #400]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be54:	4a63      	ldr	r2, [pc, #396]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be56:	f043 0301 	orr.w	r3, r3, #1
 800be5a:	6713      	str	r3, [r2, #112]	; 0x70
 800be5c:	e01c      	b.n	800be98 <HAL_RCC_OscConfig+0x324>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	2b05      	cmp	r3, #5
 800be64:	d10c      	bne.n	800be80 <HAL_RCC_OscConfig+0x30c>
 800be66:	4b5f      	ldr	r3, [pc, #380]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6a:	4a5e      	ldr	r2, [pc, #376]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be6c:	f043 0304 	orr.w	r3, r3, #4
 800be70:	6713      	str	r3, [r2, #112]	; 0x70
 800be72:	4b5c      	ldr	r3, [pc, #368]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be76:	4a5b      	ldr	r2, [pc, #364]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be78:	f043 0301 	orr.w	r3, r3, #1
 800be7c:	6713      	str	r3, [r2, #112]	; 0x70
 800be7e:	e00b      	b.n	800be98 <HAL_RCC_OscConfig+0x324>
 800be80:	4b58      	ldr	r3, [pc, #352]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be84:	4a57      	ldr	r2, [pc, #348]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be86:	f023 0301 	bic.w	r3, r3, #1
 800be8a:	6713      	str	r3, [r2, #112]	; 0x70
 800be8c:	4b55      	ldr	r3, [pc, #340]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be90:	4a54      	ldr	r2, [pc, #336]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800be92:	f023 0304 	bic.w	r3, r3, #4
 800be96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d015      	beq.n	800becc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bea0:	f7fe fa02 	bl	800a2a8 <HAL_GetTick>
 800bea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bea6:	e00a      	b.n	800bebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bea8:	f7fe f9fe 	bl	800a2a8 <HAL_GetTick>
 800beac:	4602      	mov	r2, r0
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d901      	bls.n	800bebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e0cb      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bebe:	4b49      	ldr	r3, [pc, #292]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec2:	f003 0302 	and.w	r3, r3, #2
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0ee      	beq.n	800bea8 <HAL_RCC_OscConfig+0x334>
 800beca:	e014      	b.n	800bef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800becc:	f7fe f9ec 	bl	800a2a8 <HAL_GetTick>
 800bed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bed2:	e00a      	b.n	800beea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bed4:	f7fe f9e8 	bl	800a2a8 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	f241 3288 	movw	r2, #5000	; 0x1388
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d901      	bls.n	800beea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e0b5      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800beea:	4b3e      	ldr	r3, [pc, #248]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800beec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1ee      	bne.n	800bed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d105      	bne.n	800bf08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800befc:	4b39      	ldr	r3, [pc, #228]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800befe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf00:	4a38      	ldr	r2, [pc, #224]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bf02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 80a1 	beq.w	800c054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf12:	4b34      	ldr	r3, [pc, #208]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f003 030c 	and.w	r3, r3, #12
 800bf1a:	2b08      	cmp	r3, #8
 800bf1c:	d05c      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d141      	bne.n	800bfaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf26:	4b31      	ldr	r3, [pc, #196]	; (800bfec <HAL_RCC_OscConfig+0x478>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf2c:	f7fe f9bc 	bl	800a2a8 <HAL_GetTick>
 800bf30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf32:	e008      	b.n	800bf46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf34:	f7fe f9b8 	bl	800a2a8 <HAL_GetTick>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d901      	bls.n	800bf46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e087      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf46:	4b27      	ldr	r3, [pc, #156]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f0      	bne.n	800bf34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69da      	ldr	r2, [r3, #28]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	431a      	orrs	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	019b      	lsls	r3, r3, #6
 800bf62:	431a      	orrs	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf68:	085b      	lsrs	r3, r3, #1
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	041b      	lsls	r3, r3, #16
 800bf6e:	431a      	orrs	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	061b      	lsls	r3, r3, #24
 800bf76:	491b      	ldr	r1, [pc, #108]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf7c:	4b1b      	ldr	r3, [pc, #108]	; (800bfec <HAL_RCC_OscConfig+0x478>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf82:	f7fe f991 	bl	800a2a8 <HAL_GetTick>
 800bf86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf88:	e008      	b.n	800bf9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf8a:	f7fe f98d 	bl	800a2a8 <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d901      	bls.n	800bf9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e05c      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf9c:	4b11      	ldr	r3, [pc, #68]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0f0      	beq.n	800bf8a <HAL_RCC_OscConfig+0x416>
 800bfa8:	e054      	b.n	800c054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfaa:	4b10      	ldr	r3, [pc, #64]	; (800bfec <HAL_RCC_OscConfig+0x478>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfb0:	f7fe f97a 	bl	800a2a8 <HAL_GetTick>
 800bfb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfb6:	e008      	b.n	800bfca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfb8:	f7fe f976 	bl	800a2a8 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e045      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfca:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <HAL_RCC_OscConfig+0x470>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f0      	bne.n	800bfb8 <HAL_RCC_OscConfig+0x444>
 800bfd6:	e03d      	b.n	800c054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d107      	bne.n	800bff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e038      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
 800bfe4:	40023800 	.word	0x40023800
 800bfe8:	40007000 	.word	0x40007000
 800bfec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bff0:	4b1b      	ldr	r3, [pc, #108]	; (800c060 <HAL_RCC_OscConfig+0x4ec>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d028      	beq.n	800c050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c008:	429a      	cmp	r2, r3
 800c00a:	d121      	bne.n	800c050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c016:	429a      	cmp	r2, r3
 800c018:	d11a      	bne.n	800c050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c020:	4013      	ands	r3, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c028:	4293      	cmp	r3, r2
 800c02a:	d111      	bne.n	800c050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	3b01      	subs	r3, #1
 800c03a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d107      	bne.n	800c050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d001      	beq.n	800c054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e000      	b.n	800c056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	40023800 	.word	0x40023800

0800c064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e0cc      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c078:	4b68      	ldr	r3, [pc, #416]	; (800c21c <HAL_RCC_ClockConfig+0x1b8>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d90c      	bls.n	800c0a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c086:	4b65      	ldr	r3, [pc, #404]	; (800c21c <HAL_RCC_ClockConfig+0x1b8>)
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c08e:	4b63      	ldr	r3, [pc, #396]	; (800c21c <HAL_RCC_ClockConfig+0x1b8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d001      	beq.n	800c0a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e0b8      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0302 	and.w	r3, r3, #2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d020      	beq.n	800c0ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f003 0304 	and.w	r3, r3, #4
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0b8:	4b59      	ldr	r3, [pc, #356]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	4a58      	ldr	r2, [pc, #352]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c0be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c0c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0308 	and.w	r3, r3, #8
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d005      	beq.n	800c0dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c0d0:	4b53      	ldr	r3, [pc, #332]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	4a52      	ldr	r2, [pc, #328]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c0d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c0da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0dc:	4b50      	ldr	r3, [pc, #320]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	494d      	ldr	r1, [pc, #308]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d044      	beq.n	800c184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d107      	bne.n	800c112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c102:	4b47      	ldr	r3, [pc, #284]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d119      	bne.n	800c142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e07f      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	2b02      	cmp	r3, #2
 800c118:	d003      	beq.n	800c122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c11e:	2b03      	cmp	r3, #3
 800c120:	d107      	bne.n	800c132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c122:	4b3f      	ldr	r3, [pc, #252]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d109      	bne.n	800c142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e06f      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c132:	4b3b      	ldr	r3, [pc, #236]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e067      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c142:	4b37      	ldr	r3, [pc, #220]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f023 0203 	bic.w	r2, r3, #3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	4934      	ldr	r1, [pc, #208]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c150:	4313      	orrs	r3, r2
 800c152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c154:	f7fe f8a8 	bl	800a2a8 <HAL_GetTick>
 800c158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c15a:	e00a      	b.n	800c172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c15c:	f7fe f8a4 	bl	800a2a8 <HAL_GetTick>
 800c160:	4602      	mov	r2, r0
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	f241 3288 	movw	r2, #5000	; 0x1388
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d901      	bls.n	800c172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e04f      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c172:	4b2b      	ldr	r3, [pc, #172]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f003 020c 	and.w	r2, r3, #12
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	429a      	cmp	r2, r3
 800c182:	d1eb      	bne.n	800c15c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <HAL_RCC_ClockConfig+0x1b8>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0307 	and.w	r3, r3, #7
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d20c      	bcs.n	800c1ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c192:	4b22      	ldr	r3, [pc, #136]	; (800c21c <HAL_RCC_ClockConfig+0x1b8>)
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	b2d2      	uxtb	r2, r2
 800c198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c19a:	4b20      	ldr	r3, [pc, #128]	; (800c21c <HAL_RCC_ClockConfig+0x1b8>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0307 	and.w	r3, r3, #7
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d001      	beq.n	800c1ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e032      	b.n	800c212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d008      	beq.n	800c1ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1b8:	4b19      	ldr	r3, [pc, #100]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	4916      	ldr	r1, [pc, #88]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0308 	and.w	r3, r3, #8
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1d6:	4b12      	ldr	r3, [pc, #72]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	490e      	ldr	r1, [pc, #56]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c1ea:	f000 f821 	bl	800c230 <HAL_RCC_GetSysClockFreq>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <HAL_RCC_ClockConfig+0x1bc>)
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	091b      	lsrs	r3, r3, #4
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	490a      	ldr	r1, [pc, #40]	; (800c224 <HAL_RCC_ClockConfig+0x1c0>)
 800c1fc:	5ccb      	ldrb	r3, [r1, r3]
 800c1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c202:	4a09      	ldr	r2, [pc, #36]	; (800c228 <HAL_RCC_ClockConfig+0x1c4>)
 800c204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c206:	4b09      	ldr	r3, [pc, #36]	; (800c22c <HAL_RCC_ClockConfig+0x1c8>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe f808 	bl	800a220 <HAL_InitTick>

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	40023c00 	.word	0x40023c00
 800c220:	40023800 	.word	0x40023800
 800c224:	08011a10 	.word	0x08011a10
 800c228:	20000004 	.word	0x20000004
 800c22c:	20000198 	.word	0x20000198

0800c230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c234:	b094      	sub	sp, #80	; 0x50
 800c236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	647b      	str	r3, [r7, #68]	; 0x44
 800c23c:	2300      	movs	r3, #0
 800c23e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c240:	2300      	movs	r3, #0
 800c242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c248:	4b79      	ldr	r3, [pc, #484]	; (800c430 <HAL_RCC_GetSysClockFreq+0x200>)
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	f003 030c 	and.w	r3, r3, #12
 800c250:	2b08      	cmp	r3, #8
 800c252:	d00d      	beq.n	800c270 <HAL_RCC_GetSysClockFreq+0x40>
 800c254:	2b08      	cmp	r3, #8
 800c256:	f200 80e1 	bhi.w	800c41c <HAL_RCC_GetSysClockFreq+0x1ec>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <HAL_RCC_GetSysClockFreq+0x34>
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d003      	beq.n	800c26a <HAL_RCC_GetSysClockFreq+0x3a>
 800c262:	e0db      	b.n	800c41c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c264:	4b73      	ldr	r3, [pc, #460]	; (800c434 <HAL_RCC_GetSysClockFreq+0x204>)
 800c266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c268:	e0db      	b.n	800c422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c26a:	4b73      	ldr	r3, [pc, #460]	; (800c438 <HAL_RCC_GetSysClockFreq+0x208>)
 800c26c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c26e:	e0d8      	b.n	800c422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c270:	4b6f      	ldr	r3, [pc, #444]	; (800c430 <HAL_RCC_GetSysClockFreq+0x200>)
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c27a:	4b6d      	ldr	r3, [pc, #436]	; (800c430 <HAL_RCC_GetSysClockFreq+0x200>)
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d063      	beq.n	800c34e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c286:	4b6a      	ldr	r3, [pc, #424]	; (800c430 <HAL_RCC_GetSysClockFreq+0x200>)
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	099b      	lsrs	r3, r3, #6
 800c28c:	2200      	movs	r2, #0
 800c28e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c290:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c298:	633b      	str	r3, [r7, #48]	; 0x30
 800c29a:	2300      	movs	r3, #0
 800c29c:	637b      	str	r3, [r7, #52]	; 0x34
 800c29e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	f04f 0000 	mov.w	r0, #0
 800c2aa:	f04f 0100 	mov.w	r1, #0
 800c2ae:	0159      	lsls	r1, r3, #5
 800c2b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c2b4:	0150      	lsls	r0, r2, #5
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	1a51      	subs	r1, r2, r1
 800c2be:	6139      	str	r1, [r7, #16]
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	eb63 0301 	sbc.w	r3, r3, r1
 800c2c6:	617b      	str	r3, [r7, #20]
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c2d4:	4659      	mov	r1, fp
 800c2d6:	018b      	lsls	r3, r1, #6
 800c2d8:	4651      	mov	r1, sl
 800c2da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c2de:	4651      	mov	r1, sl
 800c2e0:	018a      	lsls	r2, r1, #6
 800c2e2:	4651      	mov	r1, sl
 800c2e4:	ebb2 0801 	subs.w	r8, r2, r1
 800c2e8:	4659      	mov	r1, fp
 800c2ea:	eb63 0901 	sbc.w	r9, r3, r1
 800c2ee:	f04f 0200 	mov.w	r2, #0
 800c2f2:	f04f 0300 	mov.w	r3, #0
 800c2f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c302:	4690      	mov	r8, r2
 800c304:	4699      	mov	r9, r3
 800c306:	4623      	mov	r3, r4
 800c308:	eb18 0303 	adds.w	r3, r8, r3
 800c30c:	60bb      	str	r3, [r7, #8]
 800c30e:	462b      	mov	r3, r5
 800c310:	eb49 0303 	adc.w	r3, r9, r3
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	f04f 0200 	mov.w	r2, #0
 800c31a:	f04f 0300 	mov.w	r3, #0
 800c31e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c322:	4629      	mov	r1, r5
 800c324:	024b      	lsls	r3, r1, #9
 800c326:	4621      	mov	r1, r4
 800c328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c32c:	4621      	mov	r1, r4
 800c32e:	024a      	lsls	r2, r1, #9
 800c330:	4610      	mov	r0, r2
 800c332:	4619      	mov	r1, r3
 800c334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c336:	2200      	movs	r2, #0
 800c338:	62bb      	str	r3, [r7, #40]	; 0x28
 800c33a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c33c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c340:	f7f4 fc3a 	bl	8000bb8 <__aeabi_uldivmod>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4613      	mov	r3, r2
 800c34a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c34c:	e058      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c34e:	4b38      	ldr	r3, [pc, #224]	; (800c430 <HAL_RCC_GetSysClockFreq+0x200>)
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	099b      	lsrs	r3, r3, #6
 800c354:	2200      	movs	r2, #0
 800c356:	4618      	mov	r0, r3
 800c358:	4611      	mov	r1, r2
 800c35a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c35e:	623b      	str	r3, [r7, #32]
 800c360:	2300      	movs	r3, #0
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
 800c364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c368:	4642      	mov	r2, r8
 800c36a:	464b      	mov	r3, r9
 800c36c:	f04f 0000 	mov.w	r0, #0
 800c370:	f04f 0100 	mov.w	r1, #0
 800c374:	0159      	lsls	r1, r3, #5
 800c376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c37a:	0150      	lsls	r0, r2, #5
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4641      	mov	r1, r8
 800c382:	ebb2 0a01 	subs.w	sl, r2, r1
 800c386:	4649      	mov	r1, r9
 800c388:	eb63 0b01 	sbc.w	fp, r3, r1
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	f04f 0300 	mov.w	r3, #0
 800c394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c39c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c3a0:	ebb2 040a 	subs.w	r4, r2, sl
 800c3a4:	eb63 050b 	sbc.w	r5, r3, fp
 800c3a8:	f04f 0200 	mov.w	r2, #0
 800c3ac:	f04f 0300 	mov.w	r3, #0
 800c3b0:	00eb      	lsls	r3, r5, #3
 800c3b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3b6:	00e2      	lsls	r2, r4, #3
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	461d      	mov	r5, r3
 800c3bc:	4643      	mov	r3, r8
 800c3be:	18e3      	adds	r3, r4, r3
 800c3c0:	603b      	str	r3, [r7, #0]
 800c3c2:	464b      	mov	r3, r9
 800c3c4:	eb45 0303 	adc.w	r3, r5, r3
 800c3c8:	607b      	str	r3, [r7, #4]
 800c3ca:	f04f 0200 	mov.w	r2, #0
 800c3ce:	f04f 0300 	mov.w	r3, #0
 800c3d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	028b      	lsls	r3, r1, #10
 800c3da:	4621      	mov	r1, r4
 800c3dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	028a      	lsls	r2, r1, #10
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	61bb      	str	r3, [r7, #24]
 800c3ee:	61fa      	str	r2, [r7, #28]
 800c3f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3f4:	f7f4 fbe0 	bl	8000bb8 <__aeabi_uldivmod>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <HAL_RCC_GetSysClockFreq+0x200>)
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	0c1b      	lsrs	r3, r3, #16
 800c406:	f003 0303 	and.w	r3, r3, #3
 800c40a:	3301      	adds	r3, #1
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c414:	fbb2 f3f3 	udiv	r3, r2, r3
 800c418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c41a:	e002      	b.n	800c422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c41c:	4b05      	ldr	r3, [pc, #20]	; (800c434 <HAL_RCC_GetSysClockFreq+0x204>)
 800c41e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c420:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c424:	4618      	mov	r0, r3
 800c426:	3750      	adds	r7, #80	; 0x50
 800c428:	46bd      	mov	sp, r7
 800c42a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c42e:	bf00      	nop
 800c430:	40023800 	.word	0x40023800
 800c434:	00f42400 	.word	0x00f42400
 800c438:	007a1200 	.word	0x007a1200

0800c43c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c43c:	b480      	push	{r7}
 800c43e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c440:	4b03      	ldr	r3, [pc, #12]	; (800c450 <HAL_RCC_GetHCLKFreq+0x14>)
 800c442:	681b      	ldr	r3, [r3, #0]
}
 800c444:	4618      	mov	r0, r3
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	20000004 	.word	0x20000004

0800c454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c458:	f7ff fff0 	bl	800c43c <HAL_RCC_GetHCLKFreq>
 800c45c:	4602      	mov	r2, r0
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	0a9b      	lsrs	r3, r3, #10
 800c464:	f003 0307 	and.w	r3, r3, #7
 800c468:	4903      	ldr	r1, [pc, #12]	; (800c478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c46a:	5ccb      	ldrb	r3, [r1, r3]
 800c46c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c470:	4618      	mov	r0, r3
 800c472:	bd80      	pop	{r7, pc}
 800c474:	40023800 	.word	0x40023800
 800c478:	08011a20 	.word	0x08011a20

0800c47c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c480:	f7ff ffdc 	bl	800c43c <HAL_RCC_GetHCLKFreq>
 800c484:	4602      	mov	r2, r0
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	0b5b      	lsrs	r3, r3, #13
 800c48c:	f003 0307 	and.w	r3, r3, #7
 800c490:	4903      	ldr	r1, [pc, #12]	; (800c4a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c492:	5ccb      	ldrb	r3, [r1, r3]
 800c494:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c498:	4618      	mov	r0, r3
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	40023800 	.word	0x40023800
 800c4a0:	08011a20 	.word	0x08011a20

0800c4a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e07b      	b.n	800c5ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d108      	bne.n	800c4d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4c6:	d009      	beq.n	800c4dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	61da      	str	r2, [r3, #28]
 800c4ce:	e005      	b.n	800c4dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d106      	bne.n	800c4fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f85d 	bl	800c5b6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2202      	movs	r2, #2
 800c500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c524:	431a      	orrs	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c52e:	431a      	orrs	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	431a      	orrs	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	431a      	orrs	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c54c:	431a      	orrs	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6a1b      	ldr	r3, [r3, #32]
 800c55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c560:	ea42 0103 	orr.w	r1, r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c568:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	430a      	orrs	r2, r1
 800c572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	0c1b      	lsrs	r3, r3, #16
 800c57a:	f003 0104 	and.w	r1, r3, #4
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	f003 0210 	and.w	r2, r3, #16
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69da      	ldr	r2, [r3, #28]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c59c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c5be:	bf00      	nop
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b08c      	sub	sp, #48	; 0x30
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d101      	bne.n	800c5f0 <HAL_SPI_TransmitReceive+0x26>
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	e18a      	b.n	800c906 <HAL_SPI_TransmitReceive+0x33c>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5f8:	f7fd fe56 	bl	800a2a8 <HAL_GetTick>
 800c5fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c60e:	887b      	ldrh	r3, [r7, #2]
 800c610:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c616:	2b01      	cmp	r3, #1
 800c618:	d00f      	beq.n	800c63a <HAL_SPI_TransmitReceive+0x70>
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c620:	d107      	bne.n	800c632 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <HAL_SPI_TransmitReceive+0x68>
 800c62a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c62e:	2b04      	cmp	r3, #4
 800c630:	d003      	beq.n	800c63a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c632:	2302      	movs	r3, #2
 800c634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c638:	e15b      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d005      	beq.n	800c64c <HAL_SPI_TransmitReceive+0x82>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <HAL_SPI_TransmitReceive+0x82>
 800c646:	887b      	ldrh	r3, [r7, #2]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d103      	bne.n	800c654 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c652:	e14e      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b04      	cmp	r3, #4
 800c65e:	d003      	beq.n	800c668 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2205      	movs	r2, #5
 800c664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	887a      	ldrh	r2, [r7, #2]
 800c678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	887a      	ldrh	r2, [r7, #2]
 800c67e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	887a      	ldrh	r2, [r7, #2]
 800c68a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	887a      	ldrh	r2, [r7, #2]
 800c690:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a8:	2b40      	cmp	r3, #64	; 0x40
 800c6aa:	d007      	beq.n	800c6bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6c4:	d178      	bne.n	800c7b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <HAL_SPI_TransmitReceive+0x10a>
 800c6ce:	8b7b      	ldrh	r3, [r7, #26]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d166      	bne.n	800c7a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	881a      	ldrh	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	1c9a      	adds	r2, r3, #2
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6f8:	e053      	b.n	800c7a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f003 0302 	and.w	r3, r3, #2
 800c704:	2b02      	cmp	r3, #2
 800c706:	d11b      	bne.n	800c740 <HAL_SPI_TransmitReceive+0x176>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d016      	beq.n	800c740 <HAL_SPI_TransmitReceive+0x176>
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	2b01      	cmp	r3, #1
 800c716:	d113      	bne.n	800c740 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71c:	881a      	ldrh	r2, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	1c9a      	adds	r2, r3, #2
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c732:	b29b      	uxth	r3, r3
 800c734:	3b01      	subs	r3, #1
 800c736:	b29a      	uxth	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d119      	bne.n	800c782 <HAL_SPI_TransmitReceive+0x1b8>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c752:	b29b      	uxth	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	d014      	beq.n	800c782 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	b292      	uxth	r2, r2
 800c764:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76a:	1c9a      	adds	r2, r3, #2
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c774:	b29b      	uxth	r3, r3
 800c776:	3b01      	subs	r3, #1
 800c778:	b29a      	uxth	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c77e:	2301      	movs	r3, #1
 800c780:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c782:	f7fd fd91 	bl	800a2a8 <HAL_GetTick>
 800c786:	4602      	mov	r2, r0
 800c788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c78e:	429a      	cmp	r2, r3
 800c790:	d807      	bhi.n	800c7a2 <HAL_SPI_TransmitReceive+0x1d8>
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c798:	d003      	beq.n	800c7a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c7a0:	e0a7      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1a6      	bne.n	800c6fa <HAL_SPI_TransmitReceive+0x130>
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1a1      	bne.n	800c6fa <HAL_SPI_TransmitReceive+0x130>
 800c7b6:	e07c      	b.n	800c8b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <HAL_SPI_TransmitReceive+0x1fc>
 800c7c0:	8b7b      	ldrh	r3, [r7, #26]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d16b      	bne.n	800c89e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	330c      	adds	r3, #12
 800c7d0:	7812      	ldrb	r2, [r2, #0]
 800c7d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7ec:	e057      	b.n	800c89e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d11c      	bne.n	800c836 <HAL_SPI_TransmitReceive+0x26c>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c800:	b29b      	uxth	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	d017      	beq.n	800c836 <HAL_SPI_TransmitReceive+0x26c>
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d114      	bne.n	800c836 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	330c      	adds	r3, #12
 800c816:	7812      	ldrb	r2, [r2, #0]
 800c818:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c828:	b29b      	uxth	r3, r3
 800c82a:	3b01      	subs	r3, #1
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b01      	cmp	r3, #1
 800c842:	d119      	bne.n	800c878 <HAL_SPI_TransmitReceive+0x2ae>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c848:	b29b      	uxth	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d014      	beq.n	800c878 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68da      	ldr	r2, [r3, #12]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	3b01      	subs	r3, #1
 800c86e:	b29a      	uxth	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c874:	2301      	movs	r3, #1
 800c876:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c878:	f7fd fd16 	bl	800a2a8 <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c884:	429a      	cmp	r2, r3
 800c886:	d803      	bhi.n	800c890 <HAL_SPI_TransmitReceive+0x2c6>
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	d102      	bne.n	800c896 <HAL_SPI_TransmitReceive+0x2cc>
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	2b00      	cmp	r3, #0
 800c894:	d103      	bne.n	800c89e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c89c:	e029      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1a2      	bne.n	800c7ee <HAL_SPI_TransmitReceive+0x224>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d19d      	bne.n	800c7ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f000 f8c0 	bl	800ca3c <SPI_EndRxTxTransaction>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c8ce:	e010      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10b      	bne.n	800c8f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	617b      	str	r3, [r7, #20]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	e000      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c8f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c906:	4618      	mov	r0, r3
 800c908:	3730      	adds	r7, #48	; 0x30
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c91c:	b2db      	uxtb	r3, r3
}
 800c91e:	4618      	mov	r0, r3
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
	...

0800c92c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	603b      	str	r3, [r7, #0]
 800c938:	4613      	mov	r3, r2
 800c93a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c93c:	f7fd fcb4 	bl	800a2a8 <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	4413      	add	r3, r2
 800c94a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c94c:	f7fd fcac 	bl	800a2a8 <HAL_GetTick>
 800c950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c952:	4b39      	ldr	r3, [pc, #228]	; (800ca38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	015b      	lsls	r3, r3, #5
 800c958:	0d1b      	lsrs	r3, r3, #20
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	fb02 f303 	mul.w	r3, r2, r3
 800c960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c962:	e054      	b.n	800ca0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96a:	d050      	beq.n	800ca0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c96c:	f7fd fc9c 	bl	800a2a8 <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d902      	bls.n	800c982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d13d      	bne.n	800c9fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c99a:	d111      	bne.n	800c9c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9a4:	d004      	beq.n	800c9b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ae:	d107      	bne.n	800c9c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9c8:	d10f      	bne.n	800c9ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c9e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e017      	b.n	800ca2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ca04:	2300      	movs	r3, #0
 800ca06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	4013      	ands	r3, r2
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	bf0c      	ite	eq
 800ca1e:	2301      	moveq	r3, #1
 800ca20:	2300      	movne	r3, #0
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	461a      	mov	r2, r3
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d19b      	bne.n	800c964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3720      	adds	r7, #32
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20000004 	.word	0x20000004

0800ca3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b088      	sub	sp, #32
 800ca40:	af02      	add	r7, sp, #8
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ca48:	4b1b      	ldr	r3, [pc, #108]	; (800cab8 <SPI_EndRxTxTransaction+0x7c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a1b      	ldr	r2, [pc, #108]	; (800cabc <SPI_EndRxTxTransaction+0x80>)
 800ca4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca52:	0d5b      	lsrs	r3, r3, #21
 800ca54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca58:	fb02 f303 	mul.w	r3, r2, r3
 800ca5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca66:	d112      	bne.n	800ca8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2180      	movs	r1, #128	; 0x80
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f7ff ff5a 	bl	800c92c <SPI_WaitFlagStateUntilTimeout>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d016      	beq.n	800caac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca82:	f043 0220 	orr.w	r2, r3, #32
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e00f      	b.n	800caae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00a      	beq.n	800caaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caa4:	2b80      	cmp	r3, #128	; 0x80
 800caa6:	d0f2      	beq.n	800ca8e <SPI_EndRxTxTransaction+0x52>
 800caa8:	e000      	b.n	800caac <SPI_EndRxTxTransaction+0x70>
        break;
 800caaa:	bf00      	nop
  }

  return HAL_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	20000004 	.word	0x20000004
 800cabc:	165e9f81 	.word	0x165e9f81

0800cac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e03f      	b.n	800cb52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d106      	bne.n	800caec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f837 	bl	800cb5a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2224      	movs	r2, #36	; 0x24
 800caf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f933 	bl	800cd70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	691a      	ldr	r2, [r3, #16]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	695a      	ldr	r2, [r3, #20]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68da      	ldr	r2, [r3, #12]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2220      	movs	r2, #32
 800cb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2220      	movs	r2, #32
 800cb4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b083      	sub	sp, #12
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800cb62:	bf00      	nop
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b08a      	sub	sp, #40	; 0x28
 800cb72:	af02      	add	r7, sp, #8
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	603b      	str	r3, [r7, #0]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b20      	cmp	r3, #32
 800cb8c:	d17c      	bne.n	800cc88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <HAL_UART_Transmit+0x2c>
 800cb94:	88fb      	ldrh	r3, [r7, #6]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e075      	b.n	800cc8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d101      	bne.n	800cbac <HAL_UART_Transmit+0x3e>
 800cba8:	2302      	movs	r3, #2
 800cbaa:	e06e      	b.n	800cc8a <HAL_UART_Transmit+0x11c>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2221      	movs	r2, #33	; 0x21
 800cbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbc2:	f7fd fb71 	bl	800a2a8 <HAL_GetTick>
 800cbc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	88fa      	ldrh	r2, [r7, #6]
 800cbcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	88fa      	ldrh	r2, [r7, #6]
 800cbd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbdc:	d108      	bne.n	800cbf0 <HAL_UART_Transmit+0x82>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d104      	bne.n	800cbf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	61bb      	str	r3, [r7, #24]
 800cbee:	e003      	b.n	800cbf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cc00:	e02a      	b.n	800cc58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2180      	movs	r1, #128	; 0x80
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f840 	bl	800cc92 <UART_WaitOnFlagUntilTimeout>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e036      	b.n	800cc8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10b      	bne.n	800cc3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	3302      	adds	r3, #2
 800cc36:	61bb      	str	r3, [r7, #24]
 800cc38:	e007      	b.n	800cc4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	781a      	ldrb	r2, [r3, #0]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	3301      	adds	r3, #1
 800cc48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1cf      	bne.n	800cc02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2140      	movs	r1, #64	; 0x40
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f000 f810 	bl	800cc92 <UART_WaitOnFlagUntilTimeout>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cc78:	2303      	movs	r3, #3
 800cc7a:	e006      	b.n	800cc8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2220      	movs	r2, #32
 800cc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e000      	b.n	800cc8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cc88:	2302      	movs	r3, #2
  }
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b090      	sub	sp, #64	; 0x40
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	60f8      	str	r0, [r7, #12]
 800cc9a:	60b9      	str	r1, [r7, #8]
 800cc9c:	603b      	str	r3, [r7, #0]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cca2:	e050      	b.n	800cd46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccaa:	d04c      	beq.n	800cd46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ccac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <UART_WaitOnFlagUntilTimeout+0x30>
 800ccb2:	f7fd faf9 	bl	800a2a8 <HAL_GetTick>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d241      	bcs.n	800cd46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	330c      	adds	r3, #12
 800ccc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ccd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	330c      	adds	r3, #12
 800cce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cce2:	637a      	str	r2, [r7, #52]	; 0x34
 800cce4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e5      	bne.n	800ccc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	e853 3f00 	ldrex	r3, [r3]
 800cd04:	613b      	str	r3, [r7, #16]
   return(result);
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f023 0301 	bic.w	r3, r3, #1
 800cd0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3314      	adds	r3, #20
 800cd14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd16:	623a      	str	r2, [r7, #32]
 800cd18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1a:	69f9      	ldr	r1, [r7, #28]
 800cd1c:	6a3a      	ldr	r2, [r7, #32]
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1e5      	bne.n	800ccf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2220      	movs	r2, #32
 800cd36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e00f      	b.n	800cd66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	bf0c      	ite	eq
 800cd56:	2301      	moveq	r3, #1
 800cd58:	2300      	movne	r3, #0
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d09f      	beq.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3740      	adds	r7, #64	; 0x40
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd74:	b0c0      	sub	sp, #256	; 0x100
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd8c:	68d9      	ldr	r1, [r3, #12]
 800cd8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	ea40 0301 	orr.w	r3, r0, r1
 800cd98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd9e:	689a      	ldr	r2, [r3, #8]
 800cda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	431a      	orrs	r2, r3
 800cda8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cdbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cdc8:	f021 010c 	bic.w	r1, r1, #12
 800cdcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cdd6:	430b      	orrs	r3, r1
 800cdd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cdda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cde6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdea:	6999      	ldr	r1, [r3, #24]
 800cdec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	ea40 0301 	orr.w	r3, r0, r1
 800cdf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	4b8f      	ldr	r3, [pc, #572]	; (800d03c <UART_SetConfig+0x2cc>)
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d005      	beq.n	800ce10 <UART_SetConfig+0xa0>
 800ce04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	4b8d      	ldr	r3, [pc, #564]	; (800d040 <UART_SetConfig+0x2d0>)
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d104      	bne.n	800ce1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce10:	f7ff fb34 	bl	800c47c <HAL_RCC_GetPCLK2Freq>
 800ce14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ce18:	e003      	b.n	800ce22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce1a:	f7ff fb1b 	bl	800c454 <HAL_RCC_GetPCLK1Freq>
 800ce1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce26:	69db      	ldr	r3, [r3, #28]
 800ce28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce2c:	f040 810c 	bne.w	800d048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ce3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ce42:	4622      	mov	r2, r4
 800ce44:	462b      	mov	r3, r5
 800ce46:	1891      	adds	r1, r2, r2
 800ce48:	65b9      	str	r1, [r7, #88]	; 0x58
 800ce4a:	415b      	adcs	r3, r3
 800ce4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce52:	4621      	mov	r1, r4
 800ce54:	eb12 0801 	adds.w	r8, r2, r1
 800ce58:	4629      	mov	r1, r5
 800ce5a:	eb43 0901 	adc.w	r9, r3, r1
 800ce5e:	f04f 0200 	mov.w	r2, #0
 800ce62:	f04f 0300 	mov.w	r3, #0
 800ce66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce72:	4690      	mov	r8, r2
 800ce74:	4699      	mov	r9, r3
 800ce76:	4623      	mov	r3, r4
 800ce78:	eb18 0303 	adds.w	r3, r8, r3
 800ce7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce80:	462b      	mov	r3, r5
 800ce82:	eb49 0303 	adc.w	r3, r9, r3
 800ce86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ce96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ce9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ce9e:	460b      	mov	r3, r1
 800cea0:	18db      	adds	r3, r3, r3
 800cea2:	653b      	str	r3, [r7, #80]	; 0x50
 800cea4:	4613      	mov	r3, r2
 800cea6:	eb42 0303 	adc.w	r3, r2, r3
 800ceaa:	657b      	str	r3, [r7, #84]	; 0x54
 800ceac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ceb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ceb4:	f7f3 fe80 	bl	8000bb8 <__aeabi_uldivmod>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	4b61      	ldr	r3, [pc, #388]	; (800d044 <UART_SetConfig+0x2d4>)
 800cebe:	fba3 2302 	umull	r2, r3, r3, r2
 800cec2:	095b      	lsrs	r3, r3, #5
 800cec4:	011c      	lsls	r4, r3, #4
 800cec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ceca:	2200      	movs	r2, #0
 800cecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ced0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ced4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ced8:	4642      	mov	r2, r8
 800ceda:	464b      	mov	r3, r9
 800cedc:	1891      	adds	r1, r2, r2
 800cede:	64b9      	str	r1, [r7, #72]	; 0x48
 800cee0:	415b      	adcs	r3, r3
 800cee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cee8:	4641      	mov	r1, r8
 800ceea:	eb12 0a01 	adds.w	sl, r2, r1
 800ceee:	4649      	mov	r1, r9
 800cef0:	eb43 0b01 	adc.w	fp, r3, r1
 800cef4:	f04f 0200 	mov.w	r2, #0
 800cef8:	f04f 0300 	mov.w	r3, #0
 800cefc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf08:	4692      	mov	sl, r2
 800cf0a:	469b      	mov	fp, r3
 800cf0c:	4643      	mov	r3, r8
 800cf0e:	eb1a 0303 	adds.w	r3, sl, r3
 800cf12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf16:	464b      	mov	r3, r9
 800cf18:	eb4b 0303 	adc.w	r3, fp, r3
 800cf1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cf30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf34:	460b      	mov	r3, r1
 800cf36:	18db      	adds	r3, r3, r3
 800cf38:	643b      	str	r3, [r7, #64]	; 0x40
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	eb42 0303 	adc.w	r3, r2, r3
 800cf40:	647b      	str	r3, [r7, #68]	; 0x44
 800cf42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cf46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cf4a:	f7f3 fe35 	bl	8000bb8 <__aeabi_uldivmod>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4611      	mov	r1, r2
 800cf54:	4b3b      	ldr	r3, [pc, #236]	; (800d044 <UART_SetConfig+0x2d4>)
 800cf56:	fba3 2301 	umull	r2, r3, r3, r1
 800cf5a:	095b      	lsrs	r3, r3, #5
 800cf5c:	2264      	movs	r2, #100	; 0x64
 800cf5e:	fb02 f303 	mul.w	r3, r2, r3
 800cf62:	1acb      	subs	r3, r1, r3
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cf6a:	4b36      	ldr	r3, [pc, #216]	; (800d044 <UART_SetConfig+0x2d4>)
 800cf6c:	fba3 2302 	umull	r2, r3, r3, r2
 800cf70:	095b      	lsrs	r3, r3, #5
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf78:	441c      	add	r4, r3
 800cf7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cf88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf8c:	4642      	mov	r2, r8
 800cf8e:	464b      	mov	r3, r9
 800cf90:	1891      	adds	r1, r2, r2
 800cf92:	63b9      	str	r1, [r7, #56]	; 0x38
 800cf94:	415b      	adcs	r3, r3
 800cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf9c:	4641      	mov	r1, r8
 800cf9e:	1851      	adds	r1, r2, r1
 800cfa0:	6339      	str	r1, [r7, #48]	; 0x30
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	414b      	adcs	r3, r1
 800cfa6:	637b      	str	r3, [r7, #52]	; 0x34
 800cfa8:	f04f 0200 	mov.w	r2, #0
 800cfac:	f04f 0300 	mov.w	r3, #0
 800cfb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cfb4:	4659      	mov	r1, fp
 800cfb6:	00cb      	lsls	r3, r1, #3
 800cfb8:	4651      	mov	r1, sl
 800cfba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cfbe:	4651      	mov	r1, sl
 800cfc0:	00ca      	lsls	r2, r1, #3
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	4642      	mov	r2, r8
 800cfca:	189b      	adds	r3, r3, r2
 800cfcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cfd0:	464b      	mov	r3, r9
 800cfd2:	460a      	mov	r2, r1
 800cfd4:	eb42 0303 	adc.w	r3, r2, r3
 800cfd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cfec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cff0:	460b      	mov	r3, r1
 800cff2:	18db      	adds	r3, r3, r3
 800cff4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cff6:	4613      	mov	r3, r2
 800cff8:	eb42 0303 	adc.w	r3, r2, r3
 800cffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d006:	f7f3 fdd7 	bl	8000bb8 <__aeabi_uldivmod>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <UART_SetConfig+0x2d4>)
 800d010:	fba3 1302 	umull	r1, r3, r3, r2
 800d014:	095b      	lsrs	r3, r3, #5
 800d016:	2164      	movs	r1, #100	; 0x64
 800d018:	fb01 f303 	mul.w	r3, r1, r3
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	00db      	lsls	r3, r3, #3
 800d020:	3332      	adds	r3, #50	; 0x32
 800d022:	4a08      	ldr	r2, [pc, #32]	; (800d044 <UART_SetConfig+0x2d4>)
 800d024:	fba2 2303 	umull	r2, r3, r2, r3
 800d028:	095b      	lsrs	r3, r3, #5
 800d02a:	f003 0207 	and.w	r2, r3, #7
 800d02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4422      	add	r2, r4
 800d036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d038:	e105      	b.n	800d246 <UART_SetConfig+0x4d6>
 800d03a:	bf00      	nop
 800d03c:	40011000 	.word	0x40011000
 800d040:	40011400 	.word	0x40011400
 800d044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d04c:	2200      	movs	r2, #0
 800d04e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d052:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d05a:	4642      	mov	r2, r8
 800d05c:	464b      	mov	r3, r9
 800d05e:	1891      	adds	r1, r2, r2
 800d060:	6239      	str	r1, [r7, #32]
 800d062:	415b      	adcs	r3, r3
 800d064:	627b      	str	r3, [r7, #36]	; 0x24
 800d066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d06a:	4641      	mov	r1, r8
 800d06c:	1854      	adds	r4, r2, r1
 800d06e:	4649      	mov	r1, r9
 800d070:	eb43 0501 	adc.w	r5, r3, r1
 800d074:	f04f 0200 	mov.w	r2, #0
 800d078:	f04f 0300 	mov.w	r3, #0
 800d07c:	00eb      	lsls	r3, r5, #3
 800d07e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d082:	00e2      	lsls	r2, r4, #3
 800d084:	4614      	mov	r4, r2
 800d086:	461d      	mov	r5, r3
 800d088:	4643      	mov	r3, r8
 800d08a:	18e3      	adds	r3, r4, r3
 800d08c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d090:	464b      	mov	r3, r9
 800d092:	eb45 0303 	adc.w	r3, r5, r3
 800d096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d09a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d0a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d0aa:	f04f 0200 	mov.w	r2, #0
 800d0ae:	f04f 0300 	mov.w	r3, #0
 800d0b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	008b      	lsls	r3, r1, #2
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	008a      	lsls	r2, r1, #2
 800d0c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d0c8:	f7f3 fd76 	bl	8000bb8 <__aeabi_uldivmod>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4b60      	ldr	r3, [pc, #384]	; (800d254 <UART_SetConfig+0x4e4>)
 800d0d2:	fba3 2302 	umull	r2, r3, r3, r2
 800d0d6:	095b      	lsrs	r3, r3, #5
 800d0d8:	011c      	lsls	r4, r3, #4
 800d0da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d0e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	464b      	mov	r3, r9
 800d0f0:	1891      	adds	r1, r2, r2
 800d0f2:	61b9      	str	r1, [r7, #24]
 800d0f4:	415b      	adcs	r3, r3
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0fc:	4641      	mov	r1, r8
 800d0fe:	1851      	adds	r1, r2, r1
 800d100:	6139      	str	r1, [r7, #16]
 800d102:	4649      	mov	r1, r9
 800d104:	414b      	adcs	r3, r1
 800d106:	617b      	str	r3, [r7, #20]
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d114:	4659      	mov	r1, fp
 800d116:	00cb      	lsls	r3, r1, #3
 800d118:	4651      	mov	r1, sl
 800d11a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d11e:	4651      	mov	r1, sl
 800d120:	00ca      	lsls	r2, r1, #3
 800d122:	4610      	mov	r0, r2
 800d124:	4619      	mov	r1, r3
 800d126:	4603      	mov	r3, r0
 800d128:	4642      	mov	r2, r8
 800d12a:	189b      	adds	r3, r3, r2
 800d12c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d130:	464b      	mov	r3, r9
 800d132:	460a      	mov	r2, r1
 800d134:	eb42 0303 	adc.w	r3, r2, r3
 800d138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	67bb      	str	r3, [r7, #120]	; 0x78
 800d146:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d148:	f04f 0200 	mov.w	r2, #0
 800d14c:	f04f 0300 	mov.w	r3, #0
 800d150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d154:	4649      	mov	r1, r9
 800d156:	008b      	lsls	r3, r1, #2
 800d158:	4641      	mov	r1, r8
 800d15a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d15e:	4641      	mov	r1, r8
 800d160:	008a      	lsls	r2, r1, #2
 800d162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d166:	f7f3 fd27 	bl	8000bb8 <__aeabi_uldivmod>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4b39      	ldr	r3, [pc, #228]	; (800d254 <UART_SetConfig+0x4e4>)
 800d170:	fba3 1302 	umull	r1, r3, r3, r2
 800d174:	095b      	lsrs	r3, r3, #5
 800d176:	2164      	movs	r1, #100	; 0x64
 800d178:	fb01 f303 	mul.w	r3, r1, r3
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	011b      	lsls	r3, r3, #4
 800d180:	3332      	adds	r3, #50	; 0x32
 800d182:	4a34      	ldr	r2, [pc, #208]	; (800d254 <UART_SetConfig+0x4e4>)
 800d184:	fba2 2303 	umull	r2, r3, r2, r3
 800d188:	095b      	lsrs	r3, r3, #5
 800d18a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d18e:	441c      	add	r4, r3
 800d190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d194:	2200      	movs	r2, #0
 800d196:	673b      	str	r3, [r7, #112]	; 0x70
 800d198:	677a      	str	r2, [r7, #116]	; 0x74
 800d19a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d19e:	4642      	mov	r2, r8
 800d1a0:	464b      	mov	r3, r9
 800d1a2:	1891      	adds	r1, r2, r2
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	415b      	adcs	r3, r3
 800d1a8:	60fb      	str	r3, [r7, #12]
 800d1aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1ae:	4641      	mov	r1, r8
 800d1b0:	1851      	adds	r1, r2, r1
 800d1b2:	6039      	str	r1, [r7, #0]
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	414b      	adcs	r3, r1
 800d1b8:	607b      	str	r3, [r7, #4]
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	f04f 0300 	mov.w	r3, #0
 800d1c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d1c6:	4659      	mov	r1, fp
 800d1c8:	00cb      	lsls	r3, r1, #3
 800d1ca:	4651      	mov	r1, sl
 800d1cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1d0:	4651      	mov	r1, sl
 800d1d2:	00ca      	lsls	r2, r1, #3
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4603      	mov	r3, r0
 800d1da:	4642      	mov	r2, r8
 800d1dc:	189b      	adds	r3, r3, r2
 800d1de:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1e0:	464b      	mov	r3, r9
 800d1e2:	460a      	mov	r2, r1
 800d1e4:	eb42 0303 	adc.w	r3, r2, r3
 800d1e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	663b      	str	r3, [r7, #96]	; 0x60
 800d1f4:	667a      	str	r2, [r7, #100]	; 0x64
 800d1f6:	f04f 0200 	mov.w	r2, #0
 800d1fa:	f04f 0300 	mov.w	r3, #0
 800d1fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d202:	4649      	mov	r1, r9
 800d204:	008b      	lsls	r3, r1, #2
 800d206:	4641      	mov	r1, r8
 800d208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d20c:	4641      	mov	r1, r8
 800d20e:	008a      	lsls	r2, r1, #2
 800d210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d214:	f7f3 fcd0 	bl	8000bb8 <__aeabi_uldivmod>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4b0d      	ldr	r3, [pc, #52]	; (800d254 <UART_SetConfig+0x4e4>)
 800d21e:	fba3 1302 	umull	r1, r3, r3, r2
 800d222:	095b      	lsrs	r3, r3, #5
 800d224:	2164      	movs	r1, #100	; 0x64
 800d226:	fb01 f303 	mul.w	r3, r1, r3
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	011b      	lsls	r3, r3, #4
 800d22e:	3332      	adds	r3, #50	; 0x32
 800d230:	4a08      	ldr	r2, [pc, #32]	; (800d254 <UART_SetConfig+0x4e4>)
 800d232:	fba2 2303 	umull	r2, r3, r2, r3
 800d236:	095b      	lsrs	r3, r3, #5
 800d238:	f003 020f 	and.w	r2, r3, #15
 800d23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4422      	add	r2, r4
 800d244:	609a      	str	r2, [r3, #8]
}
 800d246:	bf00      	nop
 800d248:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d24c:	46bd      	mov	sp, r7
 800d24e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d252:	bf00      	nop
 800d254:	51eb851f 	.word	0x51eb851f

0800d258 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08c      	sub	sp, #48	; 0x30
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	4603      	mov	r3, r0
 800d262:	71fb      	strb	r3, [r7, #7]
 800d264:	460b      	mov	r3, r1
 800d266:	71bb      	strb	r3, [r7, #6]
 800d268:	4613      	mov	r3, r2
 800d26a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800d26c:	79fb      	ldrb	r3, [r7, #7]
 800d26e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800d270:	79bb      	ldrb	r3, [r7, #6]
 800d272:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800d274:	797b      	ldrb	r3, [r7, #5]
 800d276:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d278:	f107 030c 	add.w	r3, r7, #12
 800d27c:	2207      	movs	r2, #7
 800d27e:	2100      	movs	r1, #0
 800d280:	4618      	mov	r0, r3
 800d282:	f001 fca0 	bl	800ebc6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d286:	f107 0318 	add.w	r3, r7, #24
 800d28a:	2218      	movs	r2, #24
 800d28c:	2100      	movs	r1, #0
 800d28e:	4618      	mov	r0, r3
 800d290:	f001 fc99 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d294:	233f      	movs	r3, #63	; 0x3f
 800d296:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800d298:	238a      	movs	r3, #138	; 0x8a
 800d29a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800d29c:	f107 0314 	add.w	r3, r7, #20
 800d2a0:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800d2a6:	f107 030c 	add.w	r3, r7, #12
 800d2aa:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800d2ac:	2307      	movs	r3, #7
 800d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800d2b0:	f107 0318 	add.w	r3, r7, #24
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 ffd6 	bl	800e268 <hci_send_req>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	da01      	bge.n	800d2c6 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800d2c2:	23ff      	movs	r3, #255	; 0xff
 800d2c4:	e014      	b.n	800d2f0 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800d2c6:	7b3b      	ldrb	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800d2cc:	7b3b      	ldrb	r3, [r7, #12]
 800d2ce:	e00f      	b.n	800d2f0 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800d2d0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800d2da:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800d2e4:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ec:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3730      	adds	r7, #48	; 0x30
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08e      	sub	sp, #56	; 0x38
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60b9      	str	r1, [r7, #8]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d30c:	f107 0314 	add.w	r3, r7, #20
 800d310:	2207      	movs	r2, #7
 800d312:	2100      	movs	r1, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f001 fc56 	bl	800ebc6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d31a:	f107 0320 	add.w	r3, r7, #32
 800d31e:	2218      	movs	r2, #24
 800d320:	2100      	movs	r1, #0
 800d322:	4618      	mov	r0, r3
 800d324:	f001 fc4f 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d328:	233f      	movs	r3, #63	; 0x3f
 800d32a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800d32c:	238a      	movs	r3, #138	; 0x8a
 800d32e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800d330:	f107 031c 	add.w	r3, r7, #28
 800d334:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800d336:	2301      	movs	r3, #1
 800d338:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800d33a:	f107 0314 	add.w	r3, r7, #20
 800d33e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800d340:	2307      	movs	r3, #7
 800d342:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800d344:	f107 0320 	add.w	r3, r7, #32
 800d348:	2100      	movs	r1, #0
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 ff8c 	bl	800e268 <hci_send_req>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	da01      	bge.n	800d35a <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800d356:	23ff      	movs	r3, #255	; 0xff
 800d358:	e014      	b.n	800d384 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800d35a:	7d3b      	ldrb	r3, [r7, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800d360:	7d3b      	ldrb	r3, [r7, #20]
 800d362:	e00f      	b.n	800d384 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800d364:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800d368:	b29a      	uxth	r2, r3
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800d36e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800d372:	b29a      	uxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800d378:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3738      	adds	r7, #56	; 0x38
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800d38c:	b590      	push	{r4, r7, lr}
 800d38e:	b095      	sub	sp, #84	; 0x54
 800d390:	af00      	add	r7, sp, #0
 800d392:	4604      	mov	r4, r0
 800d394:	4608      	mov	r0, r1
 800d396:	4611      	mov	r1, r2
 800d398:	461a      	mov	r2, r3
 800d39a:	4623      	mov	r3, r4
 800d39c:	71fb      	strb	r3, [r7, #7]
 800d39e:	4603      	mov	r3, r0
 800d3a0:	80bb      	strh	r3, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	807b      	strh	r3, [r7, #2]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800d3b0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800d3b4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d3b8:	4413      	add	r3, r2
 800d3ba:	330e      	adds	r3, #14
 800d3bc:	2b28      	cmp	r3, #40	; 0x28
 800d3be:	d901      	bls.n	800d3c4 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800d3c0:	2342      	movs	r3, #66	; 0x42
 800d3c2:	e0c9      	b.n	800d558 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800d3c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3c8:	3350      	adds	r3, #80	; 0x50
 800d3ca:	443b      	add	r3, r7
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d3d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800d3dc:	88bb      	ldrh	r3, [r7, #4]
 800d3de:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800d3e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3e4:	f107 0208 	add.w	r2, r7, #8
 800d3e8:	4413      	add	r3, r2
 800d3ea:	88ba      	ldrh	r2, [r7, #4]
 800d3ec:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800d3ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3f2:	3302      	adds	r3, #2
 800d3f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800d3f8:	887b      	ldrh	r3, [r7, #2]
 800d3fa:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800d3fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d400:	f107 0208 	add.w	r2, r7, #8
 800d404:	4413      	add	r3, r2
 800d406:	887a      	ldrh	r2, [r7, #2]
 800d408:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800d40a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d40e:	3302      	adds	r3, #2
 800d410:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800d414:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d418:	3350      	adds	r3, #80	; 0x50
 800d41a:	443b      	add	r3, r7
 800d41c:	79ba      	ldrb	r2, [r7, #6]
 800d41e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d422:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d426:	3301      	adds	r3, #1
 800d428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800d42c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d430:	3350      	adds	r3, #80	; 0x50
 800d432:	443b      	add	r3, r7
 800d434:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800d438:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d43c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d440:	3301      	adds	r3, #1
 800d442:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800d446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d44a:	3350      	adds	r3, #80	; 0x50
 800d44c:	443b      	add	r3, r7
 800d44e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800d452:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d456:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d45a:	3301      	adds	r3, #1
 800d45c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800d460:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d464:	f107 0208 	add.w	r2, r7, #8
 800d468:	4413      	add	r3, r2
 800d46a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800d46e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d470:	4618      	mov	r0, r3
 800d472:	f001 fb9a 	bl	800ebaa <memcpy>
  indx +=  LocalNameLen;
 800d476:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d47a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d47e:	4413      	add	r3, r2
 800d480:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800d484:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d488:	3350      	adds	r3, #80	; 0x50
 800d48a:	443b      	add	r3, r7
 800d48c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800d490:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800d494:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d498:	3301      	adds	r3, #1
 800d49a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800d49e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4a2:	f107 0208 	add.w	r2, r7, #8
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800d4ac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f001 fb7b 	bl	800ebaa <memcpy>
  indx +=  ServiceUUIDLen;  
 800d4b4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d4b8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800d4bc:	4413      	add	r3, r2
 800d4be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800d4c2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800d4c6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800d4ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4ce:	f107 0208 	add.w	r2, r7, #8
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800d4d8:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800d4da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4de:	3302      	adds	r3, #2
 800d4e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800d4e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d4e8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800d4ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4f0:	f107 0208 	add.w	r2, r7, #8
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800d4fa:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800d4fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d500:	3302      	adds	r3, #2
 800d502:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d506:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d50a:	2218      	movs	r2, #24
 800d50c:	2100      	movs	r1, #0
 800d50e:	4618      	mov	r0, r3
 800d510:	f001 fb59 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d514:	233f      	movs	r3, #63	; 0x3f
 800d516:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800d518:	2383      	movs	r3, #131	; 0x83
 800d51a:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800d51c:	f107 0308 	add.w	r3, r7, #8
 800d520:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800d522:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d526:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800d528:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800d52c:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800d52e:	2301      	movs	r3, #1
 800d530:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800d532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d536:	2100      	movs	r1, #0
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fe95 	bl	800e268 <hci_send_req>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	da01      	bge.n	800d548 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800d544:	23ff      	movs	r3, #255	; 0xff
 800d546:	e007      	b.n	800d558 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800d548:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <aci_gap_set_discoverable+0x1ca>
    return status;
 800d550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d554:	e000      	b.n	800d558 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3754      	adds	r7, #84	; 0x54
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd90      	pop	{r4, r7, pc}

0800d560 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b091      	sub	sp, #68	; 0x44
 800d564:	af00      	add	r7, sp, #0
 800d566:	603a      	str	r2, [r7, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	4603      	mov	r3, r0
 800d56c:	71fb      	strb	r3, [r7, #7]
 800d56e:	460b      	mov	r3, r1
 800d570:	71bb      	strb	r3, [r7, #6]
 800d572:	4613      	mov	r3, r2
 800d574:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800d57a:	79bb      	ldrb	r3, [r7, #6]
 800d57c:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800d57e:	79bb      	ldrb	r3, [r7, #6]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00a      	beq.n	800d59a <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800d584:	683a      	ldr	r2, [r7, #0]
 800d586:	f107 030e 	add.w	r3, r7, #14
 800d58a:	6814      	ldr	r4, [r2, #0]
 800d58c:	6850      	ldr	r0, [r2, #4]
 800d58e:	6891      	ldr	r1, [r2, #8]
 800d590:	68d2      	ldr	r2, [r2, #12]
 800d592:	601c      	str	r4, [r3, #0]
 800d594:	6058      	str	r0, [r3, #4]
 800d596:	6099      	str	r1, [r3, #8]
 800d598:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800d59a:	797b      	ldrb	r3, [r7, #5]
 800d59c:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800d59e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d5a2:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800d5a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d5a8:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800d5ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5ae:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800d5b2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d5b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d5ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5be:	2218      	movs	r2, #24
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f001 faff 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d5c8:	233f      	movs	r3, #63	; 0x3f
 800d5ca:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800d5cc:	2386      	movs	r3, #134	; 0x86
 800d5ce:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800d5d0:	f107 030c 	add.w	r3, r7, #12
 800d5d4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800d5d6:	231a      	movs	r3, #26
 800d5d8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800d5da:	f107 030b 	add.w	r3, r7, #11
 800d5de:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800d5e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 fe3c 	bl	800e268 <hci_send_req>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	da01      	bge.n	800d5fa <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800d5f6:	23ff      	movs	r3, #255	; 0xff
 800d5f8:	e005      	b.n	800d606 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800d5fa:	7afb      	ldrb	r3, [r7, #11]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d001      	beq.n	800d604 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800d600:	7afb      	ldrb	r3, [r7, #11]
 800d602:	e000      	b.n	800d606 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3744      	adds	r7, #68	; 0x44
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd90      	pop	{r4, r7, pc}

0800d60e <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b092      	sub	sp, #72	; 0x48
 800d612:	af00      	add	r7, sp, #0
 800d614:	607b      	str	r3, [r7, #4]
 800d616:	4603      	mov	r3, r0
 800d618:	81fb      	strh	r3, [r7, #14]
 800d61a:	460b      	mov	r3, r1
 800d61c:	81bb      	strh	r3, [r7, #12]
 800d61e:	4613      	mov	r3, r2
 800d620:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 800d622:	89fb      	ldrh	r3, [r7, #14]
 800d624:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 800d626:	89bb      	ldrh	r3, [r7, #12]
 800d628:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 800d62a:	7afb      	ldrb	r3, [r7, #11]
 800d62c:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	f107 031d 	add.w	r3, r7, #29
 800d634:	6811      	ldr	r1, [r2, #0]
 800d636:	6019      	str	r1, [r3, #0]
 800d638:	8892      	ldrh	r2, [r2, #4]
 800d63a:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 800d63c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 800d644:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d648:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 800d64a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800d64e:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 800d650:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d654:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 800d656:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d65a:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 800d65c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d660:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 800d662:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800d666:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d66c:	2218      	movs	r2, #24
 800d66e:	2100      	movs	r1, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f001 faa8 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d676:	233f      	movs	r3, #63	; 0x3f
 800d678:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 800d67a:	239c      	movs	r3, #156	; 0x9c
 800d67c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 800d67e:	f107 0318 	add.w	r3, r7, #24
 800d682:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 800d684:	2318      	movs	r3, #24
 800d686:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 800d688:	230f      	movs	r3, #15
 800d68a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800d68c:	f107 0317 	add.w	r3, r7, #23
 800d690:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800d692:	2301      	movs	r3, #1
 800d694:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800d696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d69a:	2100      	movs	r1, #0
 800d69c:	4618      	mov	r0, r3
 800d69e:	f000 fde3 	bl	800e268 <hci_send_req>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	da01      	bge.n	800d6ac <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d6a8:	23ff      	movs	r3, #255	; 0xff
 800d6aa:	e000      	b.n	800d6ae <aci_gap_create_connection+0xa0>

  return status;
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3748      	adds	r7, #72	; 0x48
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b088      	sub	sp, #32
 800d6ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d6bc:	f107 0308 	add.w	r3, r7, #8
 800d6c0:	2218      	movs	r2, #24
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f001 fa7e 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d6ca:	233f      	movs	r3, #63	; 0x3f
 800d6cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800d6ce:	f240 1301 	movw	r3, #257	; 0x101
 800d6d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d6d4:	1dfb      	adds	r3, r7, #7
 800d6d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800d6dc:	f107 0308 	add.w	r3, r7, #8
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 fdc0 	bl	800e268 <hci_send_req>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	da01      	bge.n	800d6f2 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800d6ee:	23ff      	movs	r3, #255	; 0xff
 800d6f0:	e000      	b.n	800d6f4 <aci_gatt_init+0x3e>

  return status;
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b090      	sub	sp, #64	; 0x40
 800d700:	af00      	add	r7, sp, #0
 800d702:	6039      	str	r1, [r7, #0]
 800d704:	4611      	mov	r1, r2
 800d706:	461a      	mov	r2, r3
 800d708:	4603      	mov	r3, r0
 800d70a:	71fb      	strb	r3, [r7, #7]
 800d70c:	460b      	mov	r3, r1
 800d70e:	71bb      	strb	r3, [r7, #6]
 800d710:	4613      	mov	r3, r2
 800d712:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800d71a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d71e:	3340      	adds	r3, #64	; 0x40
 800d720:	443b      	add	r3, r7
 800d722:	79fa      	ldrb	r2, [r7, #7]
 800d724:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800d728:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d72c:	3301      	adds	r3, #1
 800d72e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d103      	bne.n	800d740 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800d738:	2302      	movs	r3, #2
 800d73a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d73e:	e002      	b.n	800d746 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800d740:	2310      	movs	r3, #16
 800d742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800d746:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d74a:	f107 020c 	add.w	r2, r7, #12
 800d74e:	4413      	add	r3, r2
 800d750:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	4618      	mov	r0, r3
 800d758:	f001 fa27 	bl	800ebaa <memcpy>
  indx +=  uuid_len;
 800d75c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800d760:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d764:	4413      	add	r3, r2
 800d766:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800d76a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d76e:	3340      	adds	r3, #64	; 0x40
 800d770:	443b      	add	r3, r7
 800d772:	79ba      	ldrb	r2, [r7, #6]
 800d774:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800d778:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d77c:	3301      	adds	r3, #1
 800d77e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800d782:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d786:	3340      	adds	r3, #64	; 0x40
 800d788:	443b      	add	r3, r7
 800d78a:	797a      	ldrb	r2, [r7, #5]
 800d78c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800d790:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d794:	3301      	adds	r3, #1
 800d796:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d79a:	f107 0320 	add.w	r3, r7, #32
 800d79e:	2203      	movs	r2, #3
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 fa0f 	bl	800ebc6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7ac:	2218      	movs	r2, #24
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f001 fa08 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d7b6:	233f      	movs	r3, #63	; 0x3f
 800d7b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800d7ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d7be:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800d7c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d7ca:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800d7cc:	f107 0320 	add.w	r3, r7, #32
 800d7d0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800d7d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 fd43 	bl	800e268 <hci_send_req>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	da01      	bge.n	800d7ec <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800d7e8:	23ff      	movs	r3, #255	; 0xff
 800d7ea:	e00c      	b.n	800d806 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800d7ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <aci_gatt_add_serv+0xfe>
    return resp.status;
 800d7f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7f8:	e005      	b.n	800d806 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800d7fa:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d802:	801a      	strh	r2, [r3, #0]

  return 0;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3740      	adds	r7, #64	; 0x40
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b092      	sub	sp, #72	; 0x48
 800d812:	af00      	add	r7, sp, #0
 800d814:	603a      	str	r2, [r7, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	4603      	mov	r3, r0
 800d81a:	80fb      	strh	r3, [r7, #6]
 800d81c:	460b      	mov	r3, r1
 800d81e:	717b      	strb	r3, [r7, #5]
 800d820:	4613      	mov	r3, r2
 800d822:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800d82e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d832:	f107 020c 	add.w	r2, r7, #12
 800d836:	4413      	add	r3, r2
 800d838:	88fa      	ldrh	r2, [r7, #6]
 800d83a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800d83c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d840:	3302      	adds	r3, #2
 800d842:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800d846:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d84a:	3348      	adds	r3, #72	; 0x48
 800d84c:	443b      	add	r3, r7
 800d84e:	797a      	ldrb	r2, [r7, #5]
 800d850:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d854:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d858:	3301      	adds	r3, #1
 800d85a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800d85e:	797b      	ldrb	r3, [r7, #5]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d103      	bne.n	800d86c <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800d864:	2302      	movs	r3, #2
 800d866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d86a:	e002      	b.n	800d872 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800d86c:	2310      	movs	r3, #16
 800d86e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800d872:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d876:	f107 020c 	add.w	r2, r7, #12
 800d87a:	4413      	add	r3, r2
 800d87c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	4618      	mov	r0, r3
 800d884:	f001 f991 	bl	800ebaa <memcpy>
  indx +=  uuid_len;
 800d888:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800d88c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d890:	4413      	add	r3, r2
 800d892:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800d896:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d89a:	3348      	adds	r3, #72	; 0x48
 800d89c:	443b      	add	r3, r7
 800d89e:	793a      	ldrb	r2, [r7, #4]
 800d8a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d8a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800d8ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8b2:	3348      	adds	r3, #72	; 0x48
 800d8b4:	443b      	add	r3, r7
 800d8b6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d8ba:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d8be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800d8c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8cc:	3348      	adds	r3, #72	; 0x48
 800d8ce:	443b      	add	r3, r7
 800d8d0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800d8d4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d8d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8dc:	3301      	adds	r3, #1
 800d8de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800d8e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8e6:	3348      	adds	r3, #72	; 0x48
 800d8e8:	443b      	add	r3, r7
 800d8ea:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d8ee:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d8f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800d8fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d900:	3348      	adds	r3, #72	; 0x48
 800d902:	443b      	add	r3, r7
 800d904:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800d908:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d90c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d910:	3301      	adds	r3, #1
 800d912:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800d916:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d91a:	3348      	adds	r3, #72	; 0x48
 800d91c:	443b      	add	r3, r7
 800d91e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800d922:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800d926:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d92a:	3301      	adds	r3, #1
 800d92c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d934:	2203      	movs	r2, #3
 800d936:	2100      	movs	r1, #0
 800d938:	4618      	mov	r0, r3
 800d93a:	f001 f944 	bl	800ebc6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d93e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d942:	2218      	movs	r2, #24
 800d944:	2100      	movs	r1, #0
 800d946:	4618      	mov	r0, r3
 800d948:	f001 f93d 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800d94c:	233f      	movs	r3, #63	; 0x3f
 800d94e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800d950:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d954:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800d956:	f107 030c 	add.w	r3, r7, #12
 800d95a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800d95c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d960:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800d962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d966:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800d968:	2303      	movs	r3, #3
 800d96a:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800d96c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d970:	2100      	movs	r1, #0
 800d972:	4618      	mov	r0, r3
 800d974:	f000 fc78 	bl	800e268 <hci_send_req>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	da01      	bge.n	800d982 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800d97e:	23ff      	movs	r3, #255	; 0xff
 800d980:	e00c      	b.n	800d99c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800d982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d986:	2b00      	cmp	r3, #0
 800d988:	d002      	beq.n	800d990 <aci_gatt_add_char+0x182>
    return resp.status;
 800d98a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d98e:	e005      	b.n	800d99c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800d990:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800d994:	b29a      	uxth	r2, r3
 800d996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d998:	801a      	strh	r2, [r3, #0]

  return 0;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3748      	adds	r7, #72	; 0x48
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b0ab      	sub	sp, #172	; 0xac
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4623      	mov	r3, r4
 800d9b4:	80fb      	strh	r3, [r7, #6]
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	80bb      	strh	r3, [r7, #4]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	70fb      	strb	r3, [r7, #3]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800d9c8:	78bb      	ldrb	r3, [r7, #2]
 800d9ca:	2b7a      	cmp	r3, #122	; 0x7a
 800d9cc:	d901      	bls.n	800d9d2 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800d9ce:	2342      	movs	r3, #66	; 0x42
 800d9d0:	e074      	b.n	800dabc <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800d9d2:	88fb      	ldrh	r3, [r7, #6]
 800d9d4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800d9d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800d9da:	f107 0208 	add.w	r2, r7, #8
 800d9de:	4413      	add	r3, r2
 800d9e0:	88fa      	ldrh	r2, [r7, #6]
 800d9e2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800d9e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800d9e8:	3302      	adds	r3, #2
 800d9ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800d9ee:	88bb      	ldrh	r3, [r7, #4]
 800d9f0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800d9f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800d9f6:	f107 0208 	add.w	r2, r7, #8
 800d9fa:	4413      	add	r3, r2
 800d9fc:	88ba      	ldrh	r2, [r7, #4]
 800d9fe:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800da00:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da04:	3302      	adds	r3, #2
 800da06:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800da0a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da0e:	33a8      	adds	r3, #168	; 0xa8
 800da10:	443b      	add	r3, r7
 800da12:	78fa      	ldrb	r2, [r7, #3]
 800da14:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800da18:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da1c:	3301      	adds	r3, #1
 800da1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800da22:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da26:	33a8      	adds	r3, #168	; 0xa8
 800da28:	443b      	add	r3, r7
 800da2a:	78ba      	ldrb	r2, [r7, #2]
 800da2c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800da30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da34:	3301      	adds	r3, #1
 800da36:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800da3a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da3e:	f107 0208 	add.w	r2, r7, #8
 800da42:	4413      	add	r3, r2
 800da44:	78ba      	ldrb	r2, [r7, #2]
 800da46:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800da4a:	4618      	mov	r0, r3
 800da4c:	f001 f8ad 	bl	800ebaa <memcpy>
  indx +=  charValueLen;
 800da50:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800da54:	78bb      	ldrb	r3, [r7, #2]
 800da56:	4413      	add	r3, r2
 800da58:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800da5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da60:	2218      	movs	r2, #24
 800da62:	2100      	movs	r1, #0
 800da64:	4618      	mov	r0, r3
 800da66:	f001 f8ae 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800da6a:	233f      	movs	r3, #63	; 0x3f
 800da6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800da70:	f44f 7383 	mov.w	r3, #262	; 0x106
 800da74:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800da80:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800da84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800da88:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800da8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800da90:	2301      	movs	r3, #1
 800da92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800da96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 fbe3 	bl	800e268 <hci_send_req>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	da01      	bge.n	800daac <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800daa8:	23ff      	movs	r3, #255	; 0xff
 800daaa:	e007      	b.n	800dabc <aci_gatt_update_char_value+0x118>

  if (status) {
 800daac:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <aci_gatt_update_char_value+0x116>
    return status;
 800dab4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800dab8:	e000      	b.n	800dabc <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	37ac      	adds	r7, #172	; 0xac
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd90      	pop	{r4, r7, pc}

0800dac4 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800dac4:	b590      	push	{r4, r7, lr}
 800dac6:	b091      	sub	sp, #68	; 0x44
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4604      	mov	r4, r0
 800dacc:	4608      	mov	r0, r1
 800dace:	4611      	mov	r1, r2
 800dad0:	461a      	mov	r2, r3
 800dad2:	4623      	mov	r3, r4
 800dad4:	80fb      	strh	r3, [r7, #6]
 800dad6:	4603      	mov	r3, r0
 800dad8:	80bb      	strh	r3, [r7, #4]
 800dada:	460b      	mov	r3, r1
 800dadc:	807b      	strh	r3, [r7, #2]
 800dade:	4613      	mov	r3, r2
 800dae0:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 800dae8:	88fb      	ldrh	r3, [r7, #6]
 800daea:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800daec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800daf0:	f107 020c 	add.w	r2, r7, #12
 800daf4:	4413      	add	r3, r2
 800daf6:	88fa      	ldrh	r2, [r7, #6]
 800daf8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800dafa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dafe:	3302      	adds	r3, #2
 800db00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 800db04:	88bb      	ldrh	r3, [r7, #4]
 800db06:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800db08:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db0c:	f107 020c 	add.w	r2, r7, #12
 800db10:	4413      	add	r3, r2
 800db12:	88ba      	ldrh	r2, [r7, #4]
 800db14:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800db16:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db1a:	3302      	adds	r3, #2
 800db1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 800db20:	887b      	ldrh	r3, [r7, #2]
 800db22:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 800db24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db28:	f107 020c 	add.w	r2, r7, #12
 800db2c:	4413      	add	r3, r2
 800db2e:	887a      	ldrh	r2, [r7, #2]
 800db30:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800db32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db36:	3302      	adds	r3, #2
 800db38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 800db3c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db40:	3340      	adds	r3, #64	; 0x40
 800db42:	443b      	add	r3, r7
 800db44:	787a      	ldrb	r2, [r7, #1]
 800db46:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800db4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db4e:	3301      	adds	r3, #1
 800db50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800db54:	787b      	ldrb	r3, [r7, #1]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d103      	bne.n	800db62 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 800db5a:	2302      	movs	r3, #2
 800db5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800db60:	e002      	b.n	800db68 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 800db62:	2310      	movs	r3, #16
 800db64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800db68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db6c:	f107 020c 	add.w	r2, r7, #12
 800db70:	4413      	add	r3, r2
 800db72:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800db76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db78:	4618      	mov	r0, r3
 800db7a:	f001 f816 	bl	800ebaa <memcpy>
  indx +=  uuid_len;
 800db7e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800db82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db86:	4413      	add	r3, r2
 800db88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800db8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db90:	2218      	movs	r2, #24
 800db92:	2100      	movs	r1, #0
 800db94:	4618      	mov	r0, r3
 800db96:	f001 f816 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800db9a:	233f      	movs	r3, #63	; 0x3f
 800db9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800db9e:	f44f 738b 	mov.w	r3, #278	; 0x116
 800dba2:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800dba4:	f107 030c 	add.w	r3, r7, #12
 800dba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800dbaa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800dbae:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 800dbb0:	230f      	movs	r3, #15
 800dbb2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 800dbb4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800dbb8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800dbbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 fb4f 	bl	800e268 <hci_send_req>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	da01      	bge.n	800dbd4 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 800dbd0:	23ff      	movs	r3, #255	; 0xff
 800dbd2:	e001      	b.n	800dbd8 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 800dbd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3744      	adds	r7, #68	; 0x44
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd90      	pop	{r4, r7, pc}

0800dbe0 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b0ac      	sub	sp, #176	; 0xb0
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	607b      	str	r3, [r7, #4]
 800dbe8:	4603      	mov	r3, r0
 800dbea:	81fb      	strh	r3, [r7, #14]
 800dbec:	460b      	mov	r3, r1
 800dbee:	81bb      	strh	r3, [r7, #12]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800dbfa:	7afb      	ldrb	r3, [r7, #11]
 800dbfc:	2b7b      	cmp	r3, #123	; 0x7b
 800dbfe:	d901      	bls.n	800dc04 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 800dc00:	2342      	movs	r3, #66	; 0x42
 800dc02:	e064      	b.n	800dcce <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 800dc04:	89fb      	ldrh	r3, [r7, #14]
 800dc06:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800dc08:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc0c:	f107 0210 	add.w	r2, r7, #16
 800dc10:	4413      	add	r3, r2
 800dc12:	89fa      	ldrh	r2, [r7, #14]
 800dc14:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800dc16:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc1a:	3302      	adds	r3, #2
 800dc1c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 800dc20:	89bb      	ldrh	r3, [r7, #12]
 800dc22:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800dc24:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc28:	f107 0210 	add.w	r2, r7, #16
 800dc2c:	4413      	add	r3, r2
 800dc2e:	89ba      	ldrh	r2, [r7, #12]
 800dc30:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800dc32:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc36:	3302      	adds	r3, #2
 800dc38:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 800dc3c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc40:	33b0      	adds	r3, #176	; 0xb0
 800dc42:	443b      	add	r3, r7
 800dc44:	7afa      	ldrb	r2, [r7, #11]
 800dc46:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800dc4a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc4e:	3301      	adds	r3, #1
 800dc50:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800dc54:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc58:	f107 0210 	add.w	r2, r7, #16
 800dc5c:	4413      	add	r3, r2
 800dc5e:	7afa      	ldrb	r2, [r7, #11]
 800dc60:	6879      	ldr	r1, [r7, #4]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 ffa1 	bl	800ebaa <memcpy>
  indx +=  value_len;
 800dc68:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800dc6c:	7afb      	ldrb	r3, [r7, #11]
 800dc6e:	4413      	add	r3, r2
 800dc70:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dc74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800dc78:	2218      	movs	r2, #24
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 ffa2 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dc82:	233f      	movs	r3, #63	; 0x3f
 800dc84:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800dc88:	f240 1321 	movw	r3, #289	; 0x121
 800dc8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 800dc90:	f107 0310 	add.w	r3, r7, #16
 800dc94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 800dc98:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800dc9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 800dca0:	230f      	movs	r3, #15
 800dca2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800dca6:	f107 0393 	add.w	r3, r7, #147	; 0x93
 800dcaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 800dcb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800dcb8:	2100      	movs	r1, #0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fad4 	bl	800e268 <hci_send_req>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	da01      	bge.n	800dcca <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 800dcc6:	23ff      	movs	r3, #255	; 0xff
 800dcc8:	e001      	b.n	800dcce <aci_gatt_write_charac_descriptor+0xee>

  return status;
 800dcca:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	37b0      	adds	r7, #176	; 0xb0
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b092      	sub	sp, #72	; 0x48
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	607b      	str	r3, [r7, #4]
 800dcde:	4603      	mov	r3, r0
 800dce0:	81fb      	strh	r3, [r7, #14]
 800dce2:	460b      	mov	r3, r1
 800dce4:	81bb      	strh	r3, [r7, #12]
 800dce6:	4613      	mov	r3, r2
 800dce8:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800dcea:	7afb      	ldrb	r3, [r7, #11]
 800dcec:	2b14      	cmp	r3, #20
 800dcee:	d901      	bls.n	800dcf4 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 800dcf0:	2342      	movs	r3, #66	; 0x42
 800dcf2:	e031      	b.n	800dd58 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 800dcf4:	89fb      	ldrh	r3, [r7, #14]
 800dcf6:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 800dcf8:	89bb      	ldrh	r3, [r7, #12]
 800dcfa:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800dd00:	7afa      	ldrb	r2, [r7, #11]
 800dd02:	f107 0314 	add.w	r3, r7, #20
 800dd06:	3305      	adds	r3, #5
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 ff4d 	bl	800ebaa <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dd10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd14:	2218      	movs	r2, #24
 800dd16:	2100      	movs	r1, #0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 ff54 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800dd1e:	233f      	movs	r3, #63	; 0x3f
 800dd20:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800dd22:	f240 1323 	movw	r3, #291	; 0x123
 800dd26:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 800dd28:	f107 0314 	add.w	r3, r7, #20
 800dd2c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800dd2e:	7afb      	ldrb	r3, [r7, #11]
 800dd30:	3305      	adds	r3, #5
 800dd32:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800dd34:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dd38:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800dd3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd42:	2100      	movs	r1, #0
 800dd44:	4618      	mov	r0, r3
 800dd46:	f000 fa8f 	bl	800e268 <hci_send_req>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	da01      	bge.n	800dd54 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 800dd50:	23ff      	movs	r3, #255	; 0xff
 800dd52:	e001      	b.n	800dd58 <aci_gatt_write_without_response+0x82>

  return status;
 800dd54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3748      	adds	r7, #72	; 0x48
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b0aa      	sub	sp, #168	; 0xa8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	4603      	mov	r3, r0
 800dd68:	603a      	str	r2, [r7, #0]
 800dd6a:	71fb      	strb	r3, [r7, #7]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800dd76:	79bb      	ldrb	r3, [r7, #6]
 800dd78:	2b7e      	cmp	r3, #126	; 0x7e
 800dd7a:	d901      	bls.n	800dd80 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800dd7c:	2342      	movs	r3, #66	; 0x42
 800dd7e:	e050      	b.n	800de22 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 800dd80:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dd84:	33a8      	adds	r3, #168	; 0xa8
 800dd86:	443b      	add	r3, r7
 800dd88:	79fa      	ldrb	r2, [r7, #7]
 800dd8a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800dd8e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dd92:	3301      	adds	r3, #1
 800dd94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800dd98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800dd9c:	33a8      	adds	r3, #168	; 0xa8
 800dd9e:	443b      	add	r3, r7
 800dda0:	79ba      	ldrb	r2, [r7, #6]
 800dda2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800dda6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ddaa:	3301      	adds	r3, #1
 800ddac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800ddb0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ddb4:	f107 0208 	add.w	r2, r7, #8
 800ddb8:	4413      	add	r3, r2
 800ddba:	79ba      	ldrb	r2, [r7, #6]
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f000 fef3 	bl	800ebaa <memcpy>
  indx +=  len;
 800ddc4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800ddc8:	79bb      	ldrb	r3, [r7, #6]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ddd0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ddd4:	2218      	movs	r2, #24
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 fef4 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ddde:	233f      	movs	r3, #63	; 0x3f
 800dde0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800dde4:	230c      	movs	r3, #12
 800dde6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800ddea:	f107 0308 	add.w	r3, r7, #8
 800ddee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800ddf2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ddf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800ddfa:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800ddfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800de02:	2301      	movs	r3, #1
 800de04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800de08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800de0c:	2100      	movs	r1, #0
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fa2a 	bl	800e268 <hci_send_req>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	da01      	bge.n	800de1e <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800de1a:	23ff      	movs	r3, #255	; 0xff
 800de1c:	e001      	b.n	800de22 <aci_hal_write_config_data+0xc2>

  return status;
 800de1e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800de22:	4618      	mov	r0, r3
 800de24:	37a8      	adds	r7, #168	; 0xa8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b08a      	sub	sp, #40	; 0x28
 800de2e:	af00      	add	r7, sp, #0
 800de30:	4603      	mov	r3, r0
 800de32:	460a      	mov	r2, r1
 800de34:	71fb      	strb	r3, [r7, #7]
 800de36:	4613      	mov	r3, r2
 800de38:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800de3a:	79fb      	ldrb	r3, [r7, #7]
 800de3c:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800de3e:	79bb      	ldrb	r3, [r7, #6]
 800de40:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800de42:	f107 0310 	add.w	r3, r7, #16
 800de46:	2218      	movs	r2, #24
 800de48:	2100      	movs	r1, #0
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 febb 	bl	800ebc6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800de50:	233f      	movs	r3, #63	; 0x3f
 800de52:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800de54:	230f      	movs	r3, #15
 800de56:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800de58:	f107 030c 	add.w	r3, r7, #12
 800de5c:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800de5e:	2302      	movs	r3, #2
 800de60:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800de62:	f107 030b 	add.w	r3, r7, #11
 800de66:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800de68:	2301      	movs	r3, #1
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800de6c:	f107 0310 	add.w	r3, r7, #16
 800de70:	2100      	movs	r1, #0
 800de72:	4618      	mov	r0, r3
 800de74:	f000 f9f8 	bl	800e268 <hci_send_req>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	da01      	bge.n	800de82 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800de7e:	23ff      	movs	r3, #255	; 0xff
 800de80:	e000      	b.n	800de84 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800de82:	7afb      	ldrb	r3, [r7, #11]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3728      	adds	r7, #40	; 0x28
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b089      	sub	sp, #36	; 0x24
 800de90:	af02      	add	r7, sp, #8
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800de96:	f107 0410 	add.w	r4, r7, #16
 800de9a:	f107 0215 	add.w	r2, r7, #21
 800de9e:	f107 0112 	add.w	r1, r7, #18
 800dea2:	f107 0016 	add.w	r0, r7, #22
 800dea6:	f107 030e 	add.w	r3, r7, #14
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	4623      	mov	r3, r4
 800deae:	f000 f853 	bl	800df58 <hci_le_read_local_version>
 800deb2:	4603      	mov	r3, r0
 800deb4:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d126      	bne.n	800df0a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800debc:	8a7b      	ldrh	r3, [r7, #18]
 800debe:	0a1b      	lsrs	r3, r3, #8
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800dec8:	8a7b      	ldrh	r3, [r7, #18]
 800deca:	021b      	lsls	r3, r3, #8
 800decc:	b29a      	uxth	r2, r3
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	b21a      	sxth	r2, r3
 800ded8:	89fb      	ldrh	r3, [r7, #14]
 800deda:	091b      	lsrs	r3, r3, #4
 800dedc:	b29b      	uxth	r3, r3
 800dede:	011b      	lsls	r3, r3, #4
 800dee0:	b21b      	sxth	r3, r3
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	b21b      	sxth	r3, r3
 800dee6:	4313      	orrs	r3, r2
 800dee8:	b21b      	sxth	r3, r3
 800deea:	b29a      	uxth	r2, r3
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	b21a      	sxth	r2, r3
 800def6:	89fb      	ldrh	r3, [r7, #14]
 800def8:	b21b      	sxth	r3, r3
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	b21b      	sxth	r3, r3
 800df00:	4313      	orrs	r3, r2
 800df02:	b21b      	sxth	r3, r3
 800df04:	b29a      	uxth	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	371c      	adds	r7, #28
 800df10:	46bd      	mov	sp, r7
 800df12:	bd90      	pop	{r4, r7, pc}

0800df14 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800df1a:	f107 0308 	add.w	r3, r7, #8
 800df1e:	2218      	movs	r2, #24
 800df20:	2100      	movs	r1, #0
 800df22:	4618      	mov	r0, r3
 800df24:	f000 fe4f 	bl	800ebc6 <memset>
  rq.ogf = OGF_HOST_CTL;
 800df28:	2303      	movs	r3, #3
 800df2a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800df2c:	2303      	movs	r3, #3
 800df2e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800df30:	1dfb      	adds	r3, r7, #7
 800df32:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800df34:	2301      	movs	r3, #1
 800df36:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800df38:	f107 0308 	add.w	r3, r7, #8
 800df3c:	2100      	movs	r1, #0
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f992 	bl	800e268 <hci_send_req>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	da01      	bge.n	800df4e <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800df4a:	23ff      	movs	r3, #255	; 0xff
 800df4c:	e000      	b.n	800df50 <hci_reset+0x3c>
  
  return status;  
 800df4e:	79fb      	ldrb	r3, [r7, #7]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3720      	adds	r7, #32
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08e      	sub	sp, #56	; 0x38
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800df66:	f107 0314 	add.w	r3, r7, #20
 800df6a:	2209      	movs	r2, #9
 800df6c:	2100      	movs	r1, #0
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 fe29 	bl	800ebc6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800df74:	f107 0320 	add.w	r3, r7, #32
 800df78:	2218      	movs	r2, #24
 800df7a:	2100      	movs	r1, #0
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fe22 	bl	800ebc6 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800df82:	2304      	movs	r3, #4
 800df84:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800df86:	2301      	movs	r3, #1
 800df88:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800df92:	f107 0314 	add.w	r3, r7, #20
 800df96:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800df98:	2309      	movs	r3, #9
 800df9a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800df9c:	f107 0320 	add.w	r3, r7, #32
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 f960 	bl	800e268 <hci_send_req>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	da01      	bge.n	800dfb2 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800dfae:	23ff      	movs	r3, #255	; 0xff
 800dfb0:	e018      	b.n	800dfe4 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800dfb2:	7d3b      	ldrb	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <hci_le_read_local_version+0x64>
    return resp.status;
 800dfb8:	7d3b      	ldrb	r3, [r7, #20]
 800dfba:	e013      	b.n	800dfe4 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800dfbc:	7d7a      	ldrb	r2, [r7, #21]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800dfc2:	8afa      	ldrh	r2, [r7, #22]
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800dfc8:	7e3a      	ldrb	r2, [r7, #24]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800dfce:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800dfd8:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfe0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3738      	adds	r7, #56	; 0x38
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b092      	sub	sp, #72	; 0x48
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800dff8:	f107 0310 	add.w	r3, r7, #16
 800dffc:	2220      	movs	r2, #32
 800dffe:	2100      	movs	r1, #0
 800e000:	4618      	mov	r0, r3
 800e002:	f000 fde0 	bl	800ebc6 <memset>
  scan_resp_cp.length = length;
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800e00a:	79fb      	ldrb	r3, [r7, #7]
 800e00c:	2b1f      	cmp	r3, #31
 800e00e:	bf28      	it	cs
 800e010:	231f      	movcs	r3, #31
 800e012:	b2db      	uxtb	r3, r3
 800e014:	461a      	mov	r2, r3
 800e016:	f107 0310 	add.w	r3, r7, #16
 800e01a:	3301      	adds	r3, #1
 800e01c:	6839      	ldr	r1, [r7, #0]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 fdc3 	bl	800ebaa <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e028:	2218      	movs	r2, #24
 800e02a:	2100      	movs	r1, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f000 fdca 	bl	800ebc6 <memset>
  rq.ogf = OGF_LE_CTL;
 800e032:	2308      	movs	r3, #8
 800e034:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800e036:	2309      	movs	r3, #9
 800e038:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800e03a:	f107 0310 	add.w	r3, r7, #16
 800e03e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800e040:	2320      	movs	r3, #32
 800e042:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800e044:	f107 030f 	add.w	r3, r7, #15
 800e048:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800e04a:	2301      	movs	r3, #1
 800e04c:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e04e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e052:	2100      	movs	r1, #0
 800e054:	4618      	mov	r0, r3
 800e056:	f000 f907 	bl	800e268 <hci_send_req>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da01      	bge.n	800e064 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800e060:	23ff      	movs	r3, #255	; 0xff
 800e062:	e000      	b.n	800e066 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800e064:	7bfb      	ldrb	r3, [r7, #15]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3748      	adds	r7, #72	; 0x48
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800e06e:	b480      	push	{r7}
 800e070:	b085      	sub	sp, #20
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	3308      	adds	r3, #8
 800e07a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b04      	cmp	r3, #4
 800e082:	d001      	beq.n	800e088 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800e084:	2301      	movs	r3, #1
 800e086:	e00c      	b.n	800e0a2 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3302      	adds	r3, #2
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	461a      	mov	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e096:	3b03      	subs	r3, #3
 800e098:	429a      	cmp	r2, r3
 800e09a:	d001      	beq.n	800e0a0 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800e09c:	2302      	movs	r3, #2
 800e09e:	e000      	b.n	800e0a2 <verify_packet+0x34>
  
  return 0;      
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
	...

0800e0b0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b0a6      	sub	sp, #152	; 0x98
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	607b      	str	r3, [r7, #4]
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	81fb      	strh	r3, [r7, #14]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	81bb      	strh	r3, [r7, #12]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800e0c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0cc:	b21a      	sxth	r2, r3
 800e0ce:	89fb      	ldrh	r3, [r7, #14]
 800e0d0:	029b      	lsls	r3, r3, #10
 800e0d2:	b21b      	sxth	r3, r3
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	b21b      	sxth	r3, r3
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800e0dc:	7afb      	ldrb	r3, [r7, #11]
 800e0de:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800e0e4:	f107 0318 	add.w	r3, r7, #24
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	f107 0314 	add.w	r3, r7, #20
 800e0f0:	8819      	ldrh	r1, [r3, #0]
 800e0f2:	789b      	ldrb	r3, [r3, #2]
 800e0f4:	8011      	strh	r1, [r2, #0]
 800e0f6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800e0f8:	f107 0318 	add.w	r3, r7, #24
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	7afa      	ldrb	r2, [r7, #11]
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 fd51 	bl	800ebaa <memcpy>
  
  if (hciContext.io.Send)
 800e108:	4b08      	ldr	r3, [pc, #32]	; (800e12c <send_cmd+0x7c>)
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d009      	beq.n	800e124 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800e110:	4b06      	ldr	r3, [pc, #24]	; (800e12c <send_cmd+0x7c>)
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	7afa      	ldrb	r2, [r7, #11]
 800e116:	b292      	uxth	r2, r2
 800e118:	3204      	adds	r2, #4
 800e11a:	b291      	uxth	r1, r2
 800e11c:	f107 0218 	add.w	r2, r7, #24
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
  }
}
 800e124:	bf00      	nop
 800e126:	3798      	adds	r7, #152	; 0x98
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20000a68 	.word	0x20000a68

0800e130 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800e13a:	e00a      	b.n	800e152 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800e13c:	f107 030c 	add.w	r3, r7, #12
 800e140:	4619      	mov	r1, r3
 800e142:	6838      	ldr	r0, [r7, #0]
 800e144:	f000 faea 	bl	800e71c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fa51 	bl	800e5f4 <list_insert_head>
  while (!list_is_empty(src_list))
 800e152:	6838      	ldr	r0, [r7, #0]
 800e154:	f000 fa2c 	bl	800e5b0 <list_is_empty>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0ee      	beq.n	800e13c <move_list+0xc>
  }
}
 800e15e:	bf00      	nop
 800e160:	bf00      	nop
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800e16e:	e009      	b.n	800e184 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800e170:	1d3b      	adds	r3, r7, #4
 800e172:	4619      	mov	r1, r3
 800e174:	4809      	ldr	r0, [pc, #36]	; (800e19c <free_event_list+0x34>)
 800e176:	f000 faaa 	bl	800e6ce <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4619      	mov	r1, r3
 800e17e:	4808      	ldr	r0, [pc, #32]	; (800e1a0 <free_event_list+0x38>)
 800e180:	f000 fa5e 	bl	800e640 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800e184:	4806      	ldr	r0, [pc, #24]	; (800e1a0 <free_event_list+0x38>)
 800e186:	f000 faf0 	bl	800e76a <list_get_size>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	ddef      	ble.n	800e170 <free_event_list+0x8>
  }
}
 800e190:	bf00      	nop
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	200007a4 	.word	0x200007a4
 800e1a0:	2000079c 	.word	0x2000079c

0800e1a4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800e1b4:	4a18      	ldr	r2, [pc, #96]	; (800e218 <hci_init+0x74>)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800e1ba:	4818      	ldr	r0, [pc, #96]	; (800e21c <hci_init+0x78>)
 800e1bc:	f000 f9e8 	bl	800e590 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800e1c0:	4817      	ldr	r0, [pc, #92]	; (800e220 <hci_init+0x7c>)
 800e1c2:	f000 f9e5 	bl	800e590 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800e1c6:	f7f3 fceb 	bl	8001ba0 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73fb      	strb	r3, [r7, #15]
 800e1ce:	e00c      	b.n	800e1ea <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	228c      	movs	r2, #140	; 0x8c
 800e1d4:	fb02 f303 	mul.w	r3, r2, r3
 800e1d8:	4a12      	ldr	r2, [pc, #72]	; (800e224 <hci_init+0x80>)
 800e1da:	4413      	add	r3, r2
 800e1dc:	4619      	mov	r1, r3
 800e1de:	480f      	ldr	r0, [pc, #60]	; (800e21c <hci_init+0x78>)
 800e1e0:	f000 fa2e 	bl	800e640 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	73fb      	strb	r3, [r7, #15]
 800e1ea:	7bfb      	ldrb	r3, [r7, #15]
 800e1ec:	2b04      	cmp	r3, #4
 800e1ee:	d9ef      	bls.n	800e1d0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800e1f0:	4b09      	ldr	r3, [pc, #36]	; (800e218 <hci_init+0x74>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d003      	beq.n	800e200 <hci_init+0x5c>
 800e1f8:	4b07      	ldr	r3, [pc, #28]	; (800e218 <hci_init+0x74>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800e200:	4b05      	ldr	r3, [pc, #20]	; (800e218 <hci_init+0x74>)
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <hci_init+0x6a>
 800e208:	4b03      	ldr	r3, [pc, #12]	; (800e218 <hci_init+0x74>)
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	4798      	blx	r3
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20000a68 	.word	0x20000a68
 800e21c:	2000079c 	.word	0x2000079c
 800e220:	200007a4 	.word	0x200007a4
 800e224:	200007ac 	.word	0x200007ac

0800e228 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a0b      	ldr	r2, [pc, #44]	; (800e264 <hci_register_io_bus+0x3c>)
 800e236:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	4a09      	ldr	r2, [pc, #36]	; (800e264 <hci_register_io_bus+0x3c>)
 800e23e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	4a07      	ldr	r2, [pc, #28]	; (800e264 <hci_register_io_bus+0x3c>)
 800e246:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	4a05      	ldr	r2, [pc, #20]	; (800e264 <hci_register_io_bus+0x3c>)
 800e24e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	4a03      	ldr	r2, [pc, #12]	; (800e264 <hci_register_io_bus+0x3c>)
 800e256:	6093      	str	r3, [r2, #8]
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	20000a68 	.word	0x20000a68

0800e268 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08e      	sub	sp, #56	; 0x38
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	885b      	ldrh	r3, [r3, #2]
 800e278:	b21b      	sxth	r3, r3
 800e27a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e27e:	b21a      	sxth	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	029b      	lsls	r3, r3, #10
 800e286:	b21b      	sxth	r3, r3
 800e288:	4313      	orrs	r3, r2
 800e28a:	b21b      	sxth	r3, r3
 800e28c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800e292:	f107 0308 	add.w	r3, r7, #8
 800e296:	4618      	mov	r0, r3
 800e298:	f000 f97a 	bl	800e590 <list_init_head>

  free_event_list();
 800e29c:	f7ff ff64 	bl	800e168 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	8818      	ldrh	r0, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	8859      	ldrh	r1, [r3, #2]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f7ff fefd 	bl	800e0b0 <send_cmd>
  
  if (async)
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <hci_send_req+0x58>
  {
    return 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e0e5      	b.n	800e48c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800e2c0:	f7fb fff2 	bl	800a2a8 <HAL_GetTick>
 800e2c4:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800e2c6:	f7fb ffef 	bl	800a2a8 <HAL_GetTick>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ce:	1ad3      	subs	r3, r2, r3
 800e2d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2d4:	f200 80b6 	bhi.w	800e444 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800e2d8:	486e      	ldr	r0, [pc, #440]	; (800e494 <hci_send_req+0x22c>)
 800e2da:	f000 f969 	bl	800e5b0 <list_is_empty>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d000      	beq.n	800e2e6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800e2e4:	e7ef      	b.n	800e2c6 <hci_send_req+0x5e>
      {
        break;
 800e2e6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800e2e8:	f107 0310 	add.w	r3, r7, #16
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4869      	ldr	r0, [pc, #420]	; (800e494 <hci_send_req+0x22c>)
 800e2f0:	f000 f9ed 	bl	800e6ce <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b04      	cmp	r3, #4
 800e300:	d17b      	bne.n	800e3fa <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	3301      	adds	r3, #1
 800e306:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	3308      	adds	r3, #8
 800e30c:	3303      	adds	r3, #3
 800e30e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e316:	3b03      	subs	r3, #3
 800e318:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800e31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	2b3e      	cmp	r3, #62	; 0x3e
 800e320:	d04d      	beq.n	800e3be <hci_send_req+0x156>
 800e322:	2b3e      	cmp	r3, #62	; 0x3e
 800e324:	dc6b      	bgt.n	800e3fe <hci_send_req+0x196>
 800e326:	2b10      	cmp	r3, #16
 800e328:	f000 808e 	beq.w	800e448 <hci_send_req+0x1e0>
 800e32c:	2b10      	cmp	r3, #16
 800e32e:	dc66      	bgt.n	800e3fe <hci_send_req+0x196>
 800e330:	2b0e      	cmp	r3, #14
 800e332:	d024      	beq.n	800e37e <hci_send_req+0x116>
 800e334:	2b0f      	cmp	r3, #15
 800e336:	d162      	bne.n	800e3fe <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	885b      	ldrh	r3, [r3, #2]
 800e340:	b29b      	uxth	r3, r3
 800e342:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e344:	429a      	cmp	r2, r3
 800e346:	f040 8081 	bne.w	800e44c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	2b0f      	cmp	r3, #15
 800e350:	d004      	beq.n	800e35c <hci_send_req+0xf4>
          if (cs->status) {
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d053      	beq.n	800e402 <hci_send_req+0x19a>
            goto failed;
 800e35a:	e07a      	b.n	800e452 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	695a      	ldr	r2, [r3, #20]
 800e360:	6a3b      	ldr	r3, [r7, #32]
 800e362:	429a      	cmp	r2, r3
 800e364:	bf28      	it	cs
 800e366:	461a      	movcs	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6918      	ldr	r0, [r3, #16]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	695b      	ldr	r3, [r3, #20]
 800e374:	461a      	mov	r2, r3
 800e376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e378:	f000 fc17 	bl	800ebaa <memcpy>
        goto done;
 800e37c:	e07a      	b.n	800e474 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e380:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d15f      	bne.n	800e450 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	3303      	adds	r3, #3
 800e394:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	3b03      	subs	r3, #3
 800e39a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	695a      	ldr	r2, [r3, #20]
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	bf28      	it	cs
 800e3a6:	461a      	movcs	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6918      	ldr	r0, [r3, #16]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3b8:	f000 fbf7 	bl	800ebaa <memcpy>
        goto done;
 800e3bc:	e05a      	b.n	800e474 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d11a      	bne.n	800e406 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	695a      	ldr	r2, [r3, #20]
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	bf28      	it	cs
 800e3e0:	461a      	movcs	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6918      	ldr	r0, [r3, #16]
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	1c59      	adds	r1, r3, #1
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f000 fbd9 	bl	800ebaa <memcpy>
        goto done;
 800e3f8:	e03c      	b.n	800e474 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800e3fa:	bf00      	nop
 800e3fc:	e004      	b.n	800e408 <hci_send_req+0x1a0>
        break;
 800e3fe:	bf00      	nop
 800e400:	e002      	b.n	800e408 <hci_send_req+0x1a0>
          break;
 800e402:	bf00      	nop
 800e404:	e000      	b.n	800e408 <hci_send_req+0x1a0>
          break;
 800e406:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800e408:	4823      	ldr	r0, [pc, #140]	; (800e498 <hci_send_req+0x230>)
 800e40a:	f000 f8d1 	bl	800e5b0 <list_is_empty>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00d      	beq.n	800e430 <hci_send_req+0x1c8>
 800e414:	481f      	ldr	r0, [pc, #124]	; (800e494 <hci_send_req+0x22c>)
 800e416:	f000 f8cb 	bl	800e5b0 <list_is_empty>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d007      	beq.n	800e430 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	4619      	mov	r1, r3
 800e424:	481c      	ldr	r0, [pc, #112]	; (800e498 <hci_send_req+0x230>)
 800e426:	f000 f90b 	bl	800e640 <list_insert_tail>
      hciReadPacket=NULL;
 800e42a:	2300      	movs	r3, #0
 800e42c:	613b      	str	r3, [r7, #16]
 800e42e:	e008      	b.n	800e442 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800e430:	693a      	ldr	r2, [r7, #16]
 800e432:	f107 0308 	add.w	r3, r7, #8
 800e436:	4611      	mov	r1, r2
 800e438:	4618      	mov	r0, r3
 800e43a:	f000 f901 	bl	800e640 <list_insert_tail>
      hciReadPacket=NULL;
 800e43e:	2300      	movs	r3, #0
 800e440:	613b      	str	r3, [r7, #16]
  {
 800e442:	e73d      	b.n	800e2c0 <hci_send_req+0x58>
        goto failed;
 800e444:	bf00      	nop
 800e446:	e004      	b.n	800e452 <hci_send_req+0x1ea>
        goto failed;
 800e448:	bf00      	nop
 800e44a:	e002      	b.n	800e452 <hci_send_req+0x1ea>
          goto failed;
 800e44c:	bf00      	nop
 800e44e:	e000      	b.n	800e452 <hci_send_req+0x1ea>
          goto failed;
 800e450:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d004      	beq.n	800e462 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	4619      	mov	r1, r3
 800e45c:	480e      	ldr	r0, [pc, #56]	; (800e498 <hci_send_req+0x230>)
 800e45e:	f000 f8c9 	bl	800e5f4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800e462:	f107 0308 	add.w	r3, r7, #8
 800e466:	4619      	mov	r1, r3
 800e468:	480a      	ldr	r0, [pc, #40]	; (800e494 <hci_send_req+0x22c>)
 800e46a:	f7ff fe61 	bl	800e130 <move_list>

  return -1;
 800e46e:	f04f 33ff 	mov.w	r3, #4294967295
 800e472:	e00b      	b.n	800e48c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	4619      	mov	r1, r3
 800e478:	4807      	ldr	r0, [pc, #28]	; (800e498 <hci_send_req+0x230>)
 800e47a:	f000 f8bb 	bl	800e5f4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800e47e:	f107 0308 	add.w	r3, r7, #8
 800e482:	4619      	mov	r1, r3
 800e484:	4803      	ldr	r0, [pc, #12]	; (800e494 <hci_send_req+0x22c>)
 800e486:	f7ff fe53 	bl	800e130 <move_list>

  return 0;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3738      	adds	r7, #56	; 0x38
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	200007a4 	.word	0x200007a4
 800e498:	2000079c 	.word	0x2000079c

0800e49c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800e4a6:	e013      	b.n	800e4d0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800e4a8:	1d3b      	adds	r3, r7, #4
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	480e      	ldr	r0, [pc, #56]	; (800e4e8 <hci_user_evt_proc+0x4c>)
 800e4ae:	f000 f90e 	bl	800e6ce <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e4b2:	4b0e      	ldr	r3, [pc, #56]	; (800e4ec <hci_user_evt_proc+0x50>)
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d005      	beq.n	800e4c6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800e4ba:	4b0c      	ldr	r3, [pc, #48]	; (800e4ec <hci_user_evt_proc+0x50>)
 800e4bc:	69db      	ldr	r3, [r3, #28]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	3208      	adds	r2, #8
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4809      	ldr	r0, [pc, #36]	; (800e4f0 <hci_user_evt_proc+0x54>)
 800e4cc:	f000 f8b8 	bl	800e640 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800e4d0:	4805      	ldr	r0, [pc, #20]	; (800e4e8 <hci_user_evt_proc+0x4c>)
 800e4d2:	f000 f86d 	bl	800e5b0 <list_is_empty>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d0e5      	beq.n	800e4a8 <hci_user_evt_proc+0xc>
  }
}
 800e4dc:	bf00      	nop
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	200007a4 	.word	0x200007a4
 800e4ec:	20000a68 	.word	0x20000a68
 800e4f0:	2000079c 	.word	0x2000079c

0800e4f4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800e500:	2300      	movs	r3, #0
 800e502:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800e504:	481f      	ldr	r0, [pc, #124]	; (800e584 <hci_notify_asynch_evt+0x90>)
 800e506:	f000 f853 	bl	800e5b0 <list_is_empty>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d132      	bne.n	800e576 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800e510:	f107 030c 	add.w	r3, r7, #12
 800e514:	4619      	mov	r1, r3
 800e516:	481b      	ldr	r0, [pc, #108]	; (800e584 <hci_notify_asynch_evt+0x90>)
 800e518:	f000 f8d9 	bl	800e6ce <list_remove_head>
    
    if (hciContext.io.Receive)
 800e51c:	4b1a      	ldr	r3, [pc, #104]	; (800e588 <hci_notify_asynch_evt+0x94>)
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d02a      	beq.n	800e57a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800e524:	4b18      	ldr	r3, [pc, #96]	; (800e588 <hci_notify_asynch_evt+0x94>)
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	3208      	adds	r2, #8
 800e52c:	2180      	movs	r1, #128	; 0x80
 800e52e:	4610      	mov	r0, r2
 800e530:	4798      	blx	r3
 800e532:	4603      	mov	r3, r0
 800e534:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800e536:	7cfb      	ldrb	r3, [r7, #19]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d016      	beq.n	800e56a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	7cfa      	ldrb	r2, [r7, #19]
 800e540:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff fd91 	bl	800e06e <verify_packet>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d105      	bne.n	800e55e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	4619      	mov	r1, r3
 800e556:	480d      	ldr	r0, [pc, #52]	; (800e58c <hci_notify_asynch_evt+0x98>)
 800e558:	f000 f872 	bl	800e640 <list_insert_tail>
 800e55c:	e00d      	b.n	800e57a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	4619      	mov	r1, r3
 800e562:	4808      	ldr	r0, [pc, #32]	; (800e584 <hci_notify_asynch_evt+0x90>)
 800e564:	f000 f846 	bl	800e5f4 <list_insert_head>
 800e568:	e007      	b.n	800e57a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4619      	mov	r1, r3
 800e56e:	4805      	ldr	r0, [pc, #20]	; (800e584 <hci_notify_asynch_evt+0x90>)
 800e570:	f000 f840 	bl	800e5f4 <list_insert_head>
 800e574:	e001      	b.n	800e57a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800e576:	2301      	movs	r3, #1
 800e578:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800e57a:	697b      	ldr	r3, [r7, #20]

}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	2000079c 	.word	0x2000079c
 800e588:	20000a68 	.word	0x20000a68
 800e58c:	200007a4 	.word	0x200007a4

0800e590 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	605a      	str	r2, [r3, #4]
}
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b087      	sub	sp, #28
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e5bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5be:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e5c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5c2:	b672      	cpsid	i
}
 800e5c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d102      	bne.n	800e5d6 <list_is_empty+0x26>
  {
    return_value = 1;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	75fb      	strb	r3, [r7, #23]
 800e5d4:	e001      	b.n	800e5da <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	75fb      	strb	r3, [r7, #23]
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	f383 8810 	msr	PRIMASK, r3
}
 800e5e4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5fe:	f3ef 8310 	mrs	r3, PRIMASK
 800e602:	60fb      	str	r3, [r7, #12]
  return(result);
 800e604:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e608:	b672      	cpsid	i
}
 800e60a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	683a      	ldr	r2, [r7, #0]
 800e626:	605a      	str	r2, [r3, #4]
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f383 8810 	msr	PRIMASK, r3
}
 800e632:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e634:	bf00      	nop
 800e636:	371c      	adds	r7, #28
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800e640:	b480      	push	{r7}
 800e642:	b087      	sub	sp, #28
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e64a:	f3ef 8310 	mrs	r3, PRIMASK
 800e64e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e650:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e654:	b672      	cpsid	i
}
 800e656:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f383 8810 	msr	PRIMASK, r3
}
 800e67e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e680:	bf00      	nop
 800e682:	371c      	adds	r7, #28
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e694:	f3ef 8310 	mrs	r3, PRIMASK
 800e698:	60fb      	str	r3, [r7, #12]
  return(result);
 800e69a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e69c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e69e:	b672      	cpsid	i
}
 800e6a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	6812      	ldr	r2, [r2, #0]
 800e6aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	6852      	ldr	r2, [r2, #4]
 800e6b4:	605a      	str	r2, [r3, #4]
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	f383 8810 	msr	PRIMASK, r3
}
 800e6c0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e6c2:	bf00      	nop
 800e6c4:	371c      	adds	r7, #28
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr

0800e6ce <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b086      	sub	sp, #24
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6de:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e6e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6e2:	b672      	cpsid	i
}
 800e6e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7ff ffca 	bl	800e68c <list_remove_node>
  (*node)->next = NULL;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2200      	movs	r2, #0
 800e706:	605a      	str	r2, [r3, #4]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	f383 8810 	msr	PRIMASK, r3
}
 800e712:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e714:	bf00      	nop
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e726:	f3ef 8310 	mrs	r3, PRIMASK
 800e72a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e72c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e72e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e730:	b672      	cpsid	i
}
 800e732:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	685a      	ldr	r2, [r3, #4]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff ffa3 	bl	800e68c <list_remove_node>
  (*node)->next = NULL;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2200      	movs	r2, #0
 800e74c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2200      	movs	r2, #0
 800e754:	605a      	str	r2, [r3, #4]
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f383 8810 	msr	PRIMASK, r3
}
 800e760:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800e762:	bf00      	nop
 800e764:	3718      	adds	r7, #24
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b089      	sub	sp, #36	; 0x24
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  int size = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e776:	f3ef 8310 	mrs	r3, PRIMASK
 800e77a:	613b      	str	r3, [r7, #16]
  return(result);
 800e77c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e77e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e780:	b672      	cpsid	i
}
 800e782:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800e78a:	e005      	b.n	800e798 <list_get_size+0x2e>
  {
    size++;
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	3301      	adds	r3, #1
 800e790:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d1f5      	bne.n	800e78c <list_get_size+0x22>
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f383 8810 	msr	PRIMASK, r3
}
 800e7aa:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800e7ac:	69fb      	ldr	r3, [r7, #28]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3724      	adds	r7, #36	; 0x24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
	...

0800e7bc <__errno>:
 800e7bc:	4b01      	ldr	r3, [pc, #4]	; (800e7c4 <__errno+0x8>)
 800e7be:	6818      	ldr	r0, [r3, #0]
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	200001a0 	.word	0x200001a0

0800e7c8 <__sflush_r>:
 800e7c8:	898a      	ldrh	r2, [r1, #12]
 800e7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	0710      	lsls	r0, r2, #28
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	d458      	bmi.n	800e888 <__sflush_r+0xc0>
 800e7d6:	684b      	ldr	r3, [r1, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dc05      	bgt.n	800e7e8 <__sflush_r+0x20>
 800e7dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dc02      	bgt.n	800e7e8 <__sflush_r+0x20>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	d0f9      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7f4:	682f      	ldr	r7, [r5, #0]
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	d032      	beq.n	800e860 <__sflush_r+0x98>
 800e7fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	075a      	lsls	r2, r3, #29
 800e800:	d505      	bpl.n	800e80e <__sflush_r+0x46>
 800e802:	6863      	ldr	r3, [r4, #4]
 800e804:	1ac0      	subs	r0, r0, r3
 800e806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e808:	b10b      	cbz	r3, 800e80e <__sflush_r+0x46>
 800e80a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e80c:	1ac0      	subs	r0, r0, r3
 800e80e:	2300      	movs	r3, #0
 800e810:	4602      	mov	r2, r0
 800e812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e814:	6a21      	ldr	r1, [r4, #32]
 800e816:	4628      	mov	r0, r5
 800e818:	47b0      	blx	r6
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	d106      	bne.n	800e82e <__sflush_r+0x66>
 800e820:	6829      	ldr	r1, [r5, #0]
 800e822:	291d      	cmp	r1, #29
 800e824:	d82c      	bhi.n	800e880 <__sflush_r+0xb8>
 800e826:	4a2a      	ldr	r2, [pc, #168]	; (800e8d0 <__sflush_r+0x108>)
 800e828:	40ca      	lsrs	r2, r1
 800e82a:	07d6      	lsls	r6, r2, #31
 800e82c:	d528      	bpl.n	800e880 <__sflush_r+0xb8>
 800e82e:	2200      	movs	r2, #0
 800e830:	6062      	str	r2, [r4, #4]
 800e832:	04d9      	lsls	r1, r3, #19
 800e834:	6922      	ldr	r2, [r4, #16]
 800e836:	6022      	str	r2, [r4, #0]
 800e838:	d504      	bpl.n	800e844 <__sflush_r+0x7c>
 800e83a:	1c42      	adds	r2, r0, #1
 800e83c:	d101      	bne.n	800e842 <__sflush_r+0x7a>
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	b903      	cbnz	r3, 800e844 <__sflush_r+0x7c>
 800e842:	6560      	str	r0, [r4, #84]	; 0x54
 800e844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e846:	602f      	str	r7, [r5, #0]
 800e848:	2900      	cmp	r1, #0
 800e84a:	d0ca      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e850:	4299      	cmp	r1, r3
 800e852:	d002      	beq.n	800e85a <__sflush_r+0x92>
 800e854:	4628      	mov	r0, r5
 800e856:	f000 f9bf 	bl	800ebd8 <_free_r>
 800e85a:	2000      	movs	r0, #0
 800e85c:	6360      	str	r0, [r4, #52]	; 0x34
 800e85e:	e7c1      	b.n	800e7e4 <__sflush_r+0x1c>
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	2301      	movs	r3, #1
 800e864:	4628      	mov	r0, r5
 800e866:	47b0      	blx	r6
 800e868:	1c41      	adds	r1, r0, #1
 800e86a:	d1c7      	bne.n	800e7fc <__sflush_r+0x34>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0c4      	beq.n	800e7fc <__sflush_r+0x34>
 800e872:	2b1d      	cmp	r3, #29
 800e874:	d001      	beq.n	800e87a <__sflush_r+0xb2>
 800e876:	2b16      	cmp	r3, #22
 800e878:	d101      	bne.n	800e87e <__sflush_r+0xb6>
 800e87a:	602f      	str	r7, [r5, #0]
 800e87c:	e7b1      	b.n	800e7e2 <__sflush_r+0x1a>
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e884:	81a3      	strh	r3, [r4, #12]
 800e886:	e7ad      	b.n	800e7e4 <__sflush_r+0x1c>
 800e888:	690f      	ldr	r7, [r1, #16]
 800e88a:	2f00      	cmp	r7, #0
 800e88c:	d0a9      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e88e:	0793      	lsls	r3, r2, #30
 800e890:	680e      	ldr	r6, [r1, #0]
 800e892:	bf08      	it	eq
 800e894:	694b      	ldreq	r3, [r1, #20]
 800e896:	600f      	str	r7, [r1, #0]
 800e898:	bf18      	it	ne
 800e89a:	2300      	movne	r3, #0
 800e89c:	eba6 0807 	sub.w	r8, r6, r7
 800e8a0:	608b      	str	r3, [r1, #8]
 800e8a2:	f1b8 0f00 	cmp.w	r8, #0
 800e8a6:	dd9c      	ble.n	800e7e2 <__sflush_r+0x1a>
 800e8a8:	6a21      	ldr	r1, [r4, #32]
 800e8aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8ac:	4643      	mov	r3, r8
 800e8ae:	463a      	mov	r2, r7
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	47b0      	blx	r6
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	dc06      	bgt.n	800e8c6 <__sflush_r+0xfe>
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8be:	81a3      	strh	r3, [r4, #12]
 800e8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c4:	e78e      	b.n	800e7e4 <__sflush_r+0x1c>
 800e8c6:	4407      	add	r7, r0
 800e8c8:	eba8 0800 	sub.w	r8, r8, r0
 800e8cc:	e7e9      	b.n	800e8a2 <__sflush_r+0xda>
 800e8ce:	bf00      	nop
 800e8d0:	20400001 	.word	0x20400001

0800e8d4 <_fflush_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	690b      	ldr	r3, [r1, #16]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	b913      	cbnz	r3, 800e8e4 <_fflush_r+0x10>
 800e8de:	2500      	movs	r5, #0
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	b118      	cbz	r0, 800e8ee <_fflush_r+0x1a>
 800e8e6:	6983      	ldr	r3, [r0, #24]
 800e8e8:	b90b      	cbnz	r3, 800e8ee <_fflush_r+0x1a>
 800e8ea:	f000 f899 	bl	800ea20 <__sinit>
 800e8ee:	4b14      	ldr	r3, [pc, #80]	; (800e940 <_fflush_r+0x6c>)
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	d11b      	bne.n	800e92c <_fflush_r+0x58>
 800e8f4:	686c      	ldr	r4, [r5, #4]
 800e8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0ef      	beq.n	800e8de <_fflush_r+0xa>
 800e8fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e900:	07d0      	lsls	r0, r2, #31
 800e902:	d404      	bmi.n	800e90e <_fflush_r+0x3a>
 800e904:	0599      	lsls	r1, r3, #22
 800e906:	d402      	bmi.n	800e90e <_fflush_r+0x3a>
 800e908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e90a:	f000 f94c 	bl	800eba6 <__retarget_lock_acquire_recursive>
 800e90e:	4628      	mov	r0, r5
 800e910:	4621      	mov	r1, r4
 800e912:	f7ff ff59 	bl	800e7c8 <__sflush_r>
 800e916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e918:	07da      	lsls	r2, r3, #31
 800e91a:	4605      	mov	r5, r0
 800e91c:	d4e0      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	059b      	lsls	r3, r3, #22
 800e922:	d4dd      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e926:	f000 f93f 	bl	800eba8 <__retarget_lock_release_recursive>
 800e92a:	e7d9      	b.n	800e8e0 <_fflush_r+0xc>
 800e92c:	4b05      	ldr	r3, [pc, #20]	; (800e944 <_fflush_r+0x70>)
 800e92e:	429c      	cmp	r4, r3
 800e930:	d101      	bne.n	800e936 <_fflush_r+0x62>
 800e932:	68ac      	ldr	r4, [r5, #8]
 800e934:	e7df      	b.n	800e8f6 <_fflush_r+0x22>
 800e936:	4b04      	ldr	r3, [pc, #16]	; (800e948 <_fflush_r+0x74>)
 800e938:	429c      	cmp	r4, r3
 800e93a:	bf08      	it	eq
 800e93c:	68ec      	ldreq	r4, [r5, #12]
 800e93e:	e7da      	b.n	800e8f6 <_fflush_r+0x22>
 800e940:	08011a5c 	.word	0x08011a5c
 800e944:	08011a7c 	.word	0x08011a7c
 800e948:	08011a3c 	.word	0x08011a3c

0800e94c <fflush>:
 800e94c:	4601      	mov	r1, r0
 800e94e:	b920      	cbnz	r0, 800e95a <fflush+0xe>
 800e950:	4b04      	ldr	r3, [pc, #16]	; (800e964 <fflush+0x18>)
 800e952:	4905      	ldr	r1, [pc, #20]	; (800e968 <fflush+0x1c>)
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f000 b8e1 	b.w	800eb1c <_fwalk_reent>
 800e95a:	4b04      	ldr	r3, [pc, #16]	; (800e96c <fflush+0x20>)
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	f7ff bfb9 	b.w	800e8d4 <_fflush_r>
 800e962:	bf00      	nop
 800e964:	08011a9c 	.word	0x08011a9c
 800e968:	0800e8d5 	.word	0x0800e8d5
 800e96c:	200001a0 	.word	0x200001a0

0800e970 <std>:
 800e970:	2300      	movs	r3, #0
 800e972:	b510      	push	{r4, lr}
 800e974:	4604      	mov	r4, r0
 800e976:	e9c0 3300 	strd	r3, r3, [r0]
 800e97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e97e:	6083      	str	r3, [r0, #8]
 800e980:	8181      	strh	r1, [r0, #12]
 800e982:	6643      	str	r3, [r0, #100]	; 0x64
 800e984:	81c2      	strh	r2, [r0, #14]
 800e986:	6183      	str	r3, [r0, #24]
 800e988:	4619      	mov	r1, r3
 800e98a:	2208      	movs	r2, #8
 800e98c:	305c      	adds	r0, #92	; 0x5c
 800e98e:	f000 f91a 	bl	800ebc6 <memset>
 800e992:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <std+0x38>)
 800e994:	6263      	str	r3, [r4, #36]	; 0x24
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <std+0x3c>)
 800e998:	62a3      	str	r3, [r4, #40]	; 0x28
 800e99a:	4b05      	ldr	r3, [pc, #20]	; (800e9b0 <std+0x40>)
 800e99c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e99e:	4b05      	ldr	r3, [pc, #20]	; (800e9b4 <std+0x44>)
 800e9a0:	6224      	str	r4, [r4, #32]
 800e9a2:	6323      	str	r3, [r4, #48]	; 0x30
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	bf00      	nop
 800e9a8:	0800f815 	.word	0x0800f815
 800e9ac:	0800f837 	.word	0x0800f837
 800e9b0:	0800f86f 	.word	0x0800f86f
 800e9b4:	0800f893 	.word	0x0800f893

0800e9b8 <_cleanup_r>:
 800e9b8:	4901      	ldr	r1, [pc, #4]	; (800e9c0 <_cleanup_r+0x8>)
 800e9ba:	f000 b8af 	b.w	800eb1c <_fwalk_reent>
 800e9be:	bf00      	nop
 800e9c0:	0800e8d5 	.word	0x0800e8d5

0800e9c4 <__sfmoreglue>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	2268      	movs	r2, #104	; 0x68
 800e9c8:	1e4d      	subs	r5, r1, #1
 800e9ca:	4355      	muls	r5, r2
 800e9cc:	460e      	mov	r6, r1
 800e9ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9d2:	f000 f96d 	bl	800ecb0 <_malloc_r>
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	b140      	cbz	r0, 800e9ec <__sfmoreglue+0x28>
 800e9da:	2100      	movs	r1, #0
 800e9dc:	e9c0 1600 	strd	r1, r6, [r0]
 800e9e0:	300c      	adds	r0, #12
 800e9e2:	60a0      	str	r0, [r4, #8]
 800e9e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9e8:	f000 f8ed 	bl	800ebc6 <memset>
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	bd70      	pop	{r4, r5, r6, pc}

0800e9f0 <__sfp_lock_acquire>:
 800e9f0:	4801      	ldr	r0, [pc, #4]	; (800e9f8 <__sfp_lock_acquire+0x8>)
 800e9f2:	f000 b8d8 	b.w	800eba6 <__retarget_lock_acquire_recursive>
 800e9f6:	bf00      	nop
 800e9f8:	20000a89 	.word	0x20000a89

0800e9fc <__sfp_lock_release>:
 800e9fc:	4801      	ldr	r0, [pc, #4]	; (800ea04 <__sfp_lock_release+0x8>)
 800e9fe:	f000 b8d3 	b.w	800eba8 <__retarget_lock_release_recursive>
 800ea02:	bf00      	nop
 800ea04:	20000a89 	.word	0x20000a89

0800ea08 <__sinit_lock_acquire>:
 800ea08:	4801      	ldr	r0, [pc, #4]	; (800ea10 <__sinit_lock_acquire+0x8>)
 800ea0a:	f000 b8cc 	b.w	800eba6 <__retarget_lock_acquire_recursive>
 800ea0e:	bf00      	nop
 800ea10:	20000a8a 	.word	0x20000a8a

0800ea14 <__sinit_lock_release>:
 800ea14:	4801      	ldr	r0, [pc, #4]	; (800ea1c <__sinit_lock_release+0x8>)
 800ea16:	f000 b8c7 	b.w	800eba8 <__retarget_lock_release_recursive>
 800ea1a:	bf00      	nop
 800ea1c:	20000a8a 	.word	0x20000a8a

0800ea20 <__sinit>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4604      	mov	r4, r0
 800ea24:	f7ff fff0 	bl	800ea08 <__sinit_lock_acquire>
 800ea28:	69a3      	ldr	r3, [r4, #24]
 800ea2a:	b11b      	cbz	r3, 800ea34 <__sinit+0x14>
 800ea2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea30:	f7ff bff0 	b.w	800ea14 <__sinit_lock_release>
 800ea34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea38:	6523      	str	r3, [r4, #80]	; 0x50
 800ea3a:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <__sinit+0x68>)
 800ea3c:	4a13      	ldr	r2, [pc, #76]	; (800ea8c <__sinit+0x6c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea42:	42a3      	cmp	r3, r4
 800ea44:	bf04      	itt	eq
 800ea46:	2301      	moveq	r3, #1
 800ea48:	61a3      	streq	r3, [r4, #24]
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 f820 	bl	800ea90 <__sfp>
 800ea50:	6060      	str	r0, [r4, #4]
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 f81c 	bl	800ea90 <__sfp>
 800ea58:	60a0      	str	r0, [r4, #8]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f000 f818 	bl	800ea90 <__sfp>
 800ea60:	2200      	movs	r2, #0
 800ea62:	60e0      	str	r0, [r4, #12]
 800ea64:	2104      	movs	r1, #4
 800ea66:	6860      	ldr	r0, [r4, #4]
 800ea68:	f7ff ff82 	bl	800e970 <std>
 800ea6c:	68a0      	ldr	r0, [r4, #8]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	2109      	movs	r1, #9
 800ea72:	f7ff ff7d 	bl	800e970 <std>
 800ea76:	68e0      	ldr	r0, [r4, #12]
 800ea78:	2202      	movs	r2, #2
 800ea7a:	2112      	movs	r1, #18
 800ea7c:	f7ff ff78 	bl	800e970 <std>
 800ea80:	2301      	movs	r3, #1
 800ea82:	61a3      	str	r3, [r4, #24]
 800ea84:	e7d2      	b.n	800ea2c <__sinit+0xc>
 800ea86:	bf00      	nop
 800ea88:	08011a9c 	.word	0x08011a9c
 800ea8c:	0800e9b9 	.word	0x0800e9b9

0800ea90 <__sfp>:
 800ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea92:	4607      	mov	r7, r0
 800ea94:	f7ff ffac 	bl	800e9f0 <__sfp_lock_acquire>
 800ea98:	4b1e      	ldr	r3, [pc, #120]	; (800eb14 <__sfp+0x84>)
 800ea9a:	681e      	ldr	r6, [r3, #0]
 800ea9c:	69b3      	ldr	r3, [r6, #24]
 800ea9e:	b913      	cbnz	r3, 800eaa6 <__sfp+0x16>
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f7ff ffbd 	bl	800ea20 <__sinit>
 800eaa6:	3648      	adds	r6, #72	; 0x48
 800eaa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	d503      	bpl.n	800eab8 <__sfp+0x28>
 800eab0:	6833      	ldr	r3, [r6, #0]
 800eab2:	b30b      	cbz	r3, 800eaf8 <__sfp+0x68>
 800eab4:	6836      	ldr	r6, [r6, #0]
 800eab6:	e7f7      	b.n	800eaa8 <__sfp+0x18>
 800eab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eabc:	b9d5      	cbnz	r5, 800eaf4 <__sfp+0x64>
 800eabe:	4b16      	ldr	r3, [pc, #88]	; (800eb18 <__sfp+0x88>)
 800eac0:	60e3      	str	r3, [r4, #12]
 800eac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eac6:	6665      	str	r5, [r4, #100]	; 0x64
 800eac8:	f000 f86c 	bl	800eba4 <__retarget_lock_init_recursive>
 800eacc:	f7ff ff96 	bl	800e9fc <__sfp_lock_release>
 800ead0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ead4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ead8:	6025      	str	r5, [r4, #0]
 800eada:	61a5      	str	r5, [r4, #24]
 800eadc:	2208      	movs	r2, #8
 800eade:	4629      	mov	r1, r5
 800eae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eae4:	f000 f86f 	bl	800ebc6 <memset>
 800eae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eaec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf4:	3468      	adds	r4, #104	; 0x68
 800eaf6:	e7d9      	b.n	800eaac <__sfp+0x1c>
 800eaf8:	2104      	movs	r1, #4
 800eafa:	4638      	mov	r0, r7
 800eafc:	f7ff ff62 	bl	800e9c4 <__sfmoreglue>
 800eb00:	4604      	mov	r4, r0
 800eb02:	6030      	str	r0, [r6, #0]
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d1d5      	bne.n	800eab4 <__sfp+0x24>
 800eb08:	f7ff ff78 	bl	800e9fc <__sfp_lock_release>
 800eb0c:	230c      	movs	r3, #12
 800eb0e:	603b      	str	r3, [r7, #0]
 800eb10:	e7ee      	b.n	800eaf0 <__sfp+0x60>
 800eb12:	bf00      	nop
 800eb14:	08011a9c 	.word	0x08011a9c
 800eb18:	ffff0001 	.word	0xffff0001

0800eb1c <_fwalk_reent>:
 800eb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb20:	4606      	mov	r6, r0
 800eb22:	4688      	mov	r8, r1
 800eb24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb28:	2700      	movs	r7, #0
 800eb2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb2e:	f1b9 0901 	subs.w	r9, r9, #1
 800eb32:	d505      	bpl.n	800eb40 <_fwalk_reent+0x24>
 800eb34:	6824      	ldr	r4, [r4, #0]
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	d1f7      	bne.n	800eb2a <_fwalk_reent+0xe>
 800eb3a:	4638      	mov	r0, r7
 800eb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb40:	89ab      	ldrh	r3, [r5, #12]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d907      	bls.n	800eb56 <_fwalk_reent+0x3a>
 800eb46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	d003      	beq.n	800eb56 <_fwalk_reent+0x3a>
 800eb4e:	4629      	mov	r1, r5
 800eb50:	4630      	mov	r0, r6
 800eb52:	47c0      	blx	r8
 800eb54:	4307      	orrs	r7, r0
 800eb56:	3568      	adds	r5, #104	; 0x68
 800eb58:	e7e9      	b.n	800eb2e <_fwalk_reent+0x12>
	...

0800eb5c <__libc_init_array>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	4d0d      	ldr	r5, [pc, #52]	; (800eb94 <__libc_init_array+0x38>)
 800eb60:	4c0d      	ldr	r4, [pc, #52]	; (800eb98 <__libc_init_array+0x3c>)
 800eb62:	1b64      	subs	r4, r4, r5
 800eb64:	10a4      	asrs	r4, r4, #2
 800eb66:	2600      	movs	r6, #0
 800eb68:	42a6      	cmp	r6, r4
 800eb6a:	d109      	bne.n	800eb80 <__libc_init_array+0x24>
 800eb6c:	4d0b      	ldr	r5, [pc, #44]	; (800eb9c <__libc_init_array+0x40>)
 800eb6e:	4c0c      	ldr	r4, [pc, #48]	; (800eba0 <__libc_init_array+0x44>)
 800eb70:	f002 fe38 	bl	80117e4 <_init>
 800eb74:	1b64      	subs	r4, r4, r5
 800eb76:	10a4      	asrs	r4, r4, #2
 800eb78:	2600      	movs	r6, #0
 800eb7a:	42a6      	cmp	r6, r4
 800eb7c:	d105      	bne.n	800eb8a <__libc_init_array+0x2e>
 800eb7e:	bd70      	pop	{r4, r5, r6, pc}
 800eb80:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb84:	4798      	blx	r3
 800eb86:	3601      	adds	r6, #1
 800eb88:	e7ee      	b.n	800eb68 <__libc_init_array+0xc>
 800eb8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb8e:	4798      	blx	r3
 800eb90:	3601      	adds	r6, #1
 800eb92:	e7f2      	b.n	800eb7a <__libc_init_array+0x1e>
 800eb94:	08011e1c 	.word	0x08011e1c
 800eb98:	08011e1c 	.word	0x08011e1c
 800eb9c:	08011e1c 	.word	0x08011e1c
 800eba0:	08011e20 	.word	0x08011e20

0800eba4 <__retarget_lock_init_recursive>:
 800eba4:	4770      	bx	lr

0800eba6 <__retarget_lock_acquire_recursive>:
 800eba6:	4770      	bx	lr

0800eba8 <__retarget_lock_release_recursive>:
 800eba8:	4770      	bx	lr

0800ebaa <memcpy>:
 800ebaa:	440a      	add	r2, r1
 800ebac:	4291      	cmp	r1, r2
 800ebae:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebb2:	d100      	bne.n	800ebb6 <memcpy+0xc>
 800ebb4:	4770      	bx	lr
 800ebb6:	b510      	push	{r4, lr}
 800ebb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebc0:	4291      	cmp	r1, r2
 800ebc2:	d1f9      	bne.n	800ebb8 <memcpy+0xe>
 800ebc4:	bd10      	pop	{r4, pc}

0800ebc6 <memset>:
 800ebc6:	4402      	add	r2, r0
 800ebc8:	4603      	mov	r3, r0
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d100      	bne.n	800ebd0 <memset+0xa>
 800ebce:	4770      	bx	lr
 800ebd0:	f803 1b01 	strb.w	r1, [r3], #1
 800ebd4:	e7f9      	b.n	800ebca <memset+0x4>
	...

0800ebd8 <_free_r>:
 800ebd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebda:	2900      	cmp	r1, #0
 800ebdc:	d044      	beq.n	800ec68 <_free_r+0x90>
 800ebde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebe2:	9001      	str	r0, [sp, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f1a1 0404 	sub.w	r4, r1, #4
 800ebea:	bfb8      	it	lt
 800ebec:	18e4      	addlt	r4, r4, r3
 800ebee:	f001 fe35 	bl	801085c <__malloc_lock>
 800ebf2:	4a1e      	ldr	r2, [pc, #120]	; (800ec6c <_free_r+0x94>)
 800ebf4:	9801      	ldr	r0, [sp, #4]
 800ebf6:	6813      	ldr	r3, [r2, #0]
 800ebf8:	b933      	cbnz	r3, 800ec08 <_free_r+0x30>
 800ebfa:	6063      	str	r3, [r4, #4]
 800ebfc:	6014      	str	r4, [r2, #0]
 800ebfe:	b003      	add	sp, #12
 800ec00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec04:	f001 be30 	b.w	8010868 <__malloc_unlock>
 800ec08:	42a3      	cmp	r3, r4
 800ec0a:	d908      	bls.n	800ec1e <_free_r+0x46>
 800ec0c:	6825      	ldr	r5, [r4, #0]
 800ec0e:	1961      	adds	r1, r4, r5
 800ec10:	428b      	cmp	r3, r1
 800ec12:	bf01      	itttt	eq
 800ec14:	6819      	ldreq	r1, [r3, #0]
 800ec16:	685b      	ldreq	r3, [r3, #4]
 800ec18:	1949      	addeq	r1, r1, r5
 800ec1a:	6021      	streq	r1, [r4, #0]
 800ec1c:	e7ed      	b.n	800ebfa <_free_r+0x22>
 800ec1e:	461a      	mov	r2, r3
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	b10b      	cbz	r3, 800ec28 <_free_r+0x50>
 800ec24:	42a3      	cmp	r3, r4
 800ec26:	d9fa      	bls.n	800ec1e <_free_r+0x46>
 800ec28:	6811      	ldr	r1, [r2, #0]
 800ec2a:	1855      	adds	r5, r2, r1
 800ec2c:	42a5      	cmp	r5, r4
 800ec2e:	d10b      	bne.n	800ec48 <_free_r+0x70>
 800ec30:	6824      	ldr	r4, [r4, #0]
 800ec32:	4421      	add	r1, r4
 800ec34:	1854      	adds	r4, r2, r1
 800ec36:	42a3      	cmp	r3, r4
 800ec38:	6011      	str	r1, [r2, #0]
 800ec3a:	d1e0      	bne.n	800ebfe <_free_r+0x26>
 800ec3c:	681c      	ldr	r4, [r3, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	6053      	str	r3, [r2, #4]
 800ec42:	4421      	add	r1, r4
 800ec44:	6011      	str	r1, [r2, #0]
 800ec46:	e7da      	b.n	800ebfe <_free_r+0x26>
 800ec48:	d902      	bls.n	800ec50 <_free_r+0x78>
 800ec4a:	230c      	movs	r3, #12
 800ec4c:	6003      	str	r3, [r0, #0]
 800ec4e:	e7d6      	b.n	800ebfe <_free_r+0x26>
 800ec50:	6825      	ldr	r5, [r4, #0]
 800ec52:	1961      	adds	r1, r4, r5
 800ec54:	428b      	cmp	r3, r1
 800ec56:	bf04      	itt	eq
 800ec58:	6819      	ldreq	r1, [r3, #0]
 800ec5a:	685b      	ldreq	r3, [r3, #4]
 800ec5c:	6063      	str	r3, [r4, #4]
 800ec5e:	bf04      	itt	eq
 800ec60:	1949      	addeq	r1, r1, r5
 800ec62:	6021      	streq	r1, [r4, #0]
 800ec64:	6054      	str	r4, [r2, #4]
 800ec66:	e7ca      	b.n	800ebfe <_free_r+0x26>
 800ec68:	b003      	add	sp, #12
 800ec6a:	bd30      	pop	{r4, r5, pc}
 800ec6c:	20000a8c 	.word	0x20000a8c

0800ec70 <sbrk_aligned>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	4e0e      	ldr	r6, [pc, #56]	; (800ecac <sbrk_aligned+0x3c>)
 800ec74:	460c      	mov	r4, r1
 800ec76:	6831      	ldr	r1, [r6, #0]
 800ec78:	4605      	mov	r5, r0
 800ec7a:	b911      	cbnz	r1, 800ec82 <sbrk_aligned+0x12>
 800ec7c:	f000 fd9a 	bl	800f7b4 <_sbrk_r>
 800ec80:	6030      	str	r0, [r6, #0]
 800ec82:	4621      	mov	r1, r4
 800ec84:	4628      	mov	r0, r5
 800ec86:	f000 fd95 	bl	800f7b4 <_sbrk_r>
 800ec8a:	1c43      	adds	r3, r0, #1
 800ec8c:	d00a      	beq.n	800eca4 <sbrk_aligned+0x34>
 800ec8e:	1cc4      	adds	r4, r0, #3
 800ec90:	f024 0403 	bic.w	r4, r4, #3
 800ec94:	42a0      	cmp	r0, r4
 800ec96:	d007      	beq.n	800eca8 <sbrk_aligned+0x38>
 800ec98:	1a21      	subs	r1, r4, r0
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f000 fd8a 	bl	800f7b4 <_sbrk_r>
 800eca0:	3001      	adds	r0, #1
 800eca2:	d101      	bne.n	800eca8 <sbrk_aligned+0x38>
 800eca4:	f04f 34ff 	mov.w	r4, #4294967295
 800eca8:	4620      	mov	r0, r4
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	20000a90 	.word	0x20000a90

0800ecb0 <_malloc_r>:
 800ecb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb4:	1ccd      	adds	r5, r1, #3
 800ecb6:	f025 0503 	bic.w	r5, r5, #3
 800ecba:	3508      	adds	r5, #8
 800ecbc:	2d0c      	cmp	r5, #12
 800ecbe:	bf38      	it	cc
 800ecc0:	250c      	movcc	r5, #12
 800ecc2:	2d00      	cmp	r5, #0
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	db01      	blt.n	800eccc <_malloc_r+0x1c>
 800ecc8:	42a9      	cmp	r1, r5
 800ecca:	d905      	bls.n	800ecd8 <_malloc_r+0x28>
 800eccc:	230c      	movs	r3, #12
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	2600      	movs	r6, #0
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd8:	4e2e      	ldr	r6, [pc, #184]	; (800ed94 <_malloc_r+0xe4>)
 800ecda:	f001 fdbf 	bl	801085c <__malloc_lock>
 800ecde:	6833      	ldr	r3, [r6, #0]
 800ece0:	461c      	mov	r4, r3
 800ece2:	bb34      	cbnz	r4, 800ed32 <_malloc_r+0x82>
 800ece4:	4629      	mov	r1, r5
 800ece6:	4638      	mov	r0, r7
 800ece8:	f7ff ffc2 	bl	800ec70 <sbrk_aligned>
 800ecec:	1c43      	adds	r3, r0, #1
 800ecee:	4604      	mov	r4, r0
 800ecf0:	d14d      	bne.n	800ed8e <_malloc_r+0xde>
 800ecf2:	6834      	ldr	r4, [r6, #0]
 800ecf4:	4626      	mov	r6, r4
 800ecf6:	2e00      	cmp	r6, #0
 800ecf8:	d140      	bne.n	800ed7c <_malloc_r+0xcc>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4638      	mov	r0, r7
 800ed00:	eb04 0803 	add.w	r8, r4, r3
 800ed04:	f000 fd56 	bl	800f7b4 <_sbrk_r>
 800ed08:	4580      	cmp	r8, r0
 800ed0a:	d13a      	bne.n	800ed82 <_malloc_r+0xd2>
 800ed0c:	6821      	ldr	r1, [r4, #0]
 800ed0e:	3503      	adds	r5, #3
 800ed10:	1a6d      	subs	r5, r5, r1
 800ed12:	f025 0503 	bic.w	r5, r5, #3
 800ed16:	3508      	adds	r5, #8
 800ed18:	2d0c      	cmp	r5, #12
 800ed1a:	bf38      	it	cc
 800ed1c:	250c      	movcc	r5, #12
 800ed1e:	4629      	mov	r1, r5
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7ff ffa5 	bl	800ec70 <sbrk_aligned>
 800ed26:	3001      	adds	r0, #1
 800ed28:	d02b      	beq.n	800ed82 <_malloc_r+0xd2>
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	442b      	add	r3, r5
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	e00e      	b.n	800ed50 <_malloc_r+0xa0>
 800ed32:	6822      	ldr	r2, [r4, #0]
 800ed34:	1b52      	subs	r2, r2, r5
 800ed36:	d41e      	bmi.n	800ed76 <_malloc_r+0xc6>
 800ed38:	2a0b      	cmp	r2, #11
 800ed3a:	d916      	bls.n	800ed6a <_malloc_r+0xba>
 800ed3c:	1961      	adds	r1, r4, r5
 800ed3e:	42a3      	cmp	r3, r4
 800ed40:	6025      	str	r5, [r4, #0]
 800ed42:	bf18      	it	ne
 800ed44:	6059      	strne	r1, [r3, #4]
 800ed46:	6863      	ldr	r3, [r4, #4]
 800ed48:	bf08      	it	eq
 800ed4a:	6031      	streq	r1, [r6, #0]
 800ed4c:	5162      	str	r2, [r4, r5]
 800ed4e:	604b      	str	r3, [r1, #4]
 800ed50:	4638      	mov	r0, r7
 800ed52:	f104 060b 	add.w	r6, r4, #11
 800ed56:	f001 fd87 	bl	8010868 <__malloc_unlock>
 800ed5a:	f026 0607 	bic.w	r6, r6, #7
 800ed5e:	1d23      	adds	r3, r4, #4
 800ed60:	1af2      	subs	r2, r6, r3
 800ed62:	d0b6      	beq.n	800ecd2 <_malloc_r+0x22>
 800ed64:	1b9b      	subs	r3, r3, r6
 800ed66:	50a3      	str	r3, [r4, r2]
 800ed68:	e7b3      	b.n	800ecd2 <_malloc_r+0x22>
 800ed6a:	6862      	ldr	r2, [r4, #4]
 800ed6c:	42a3      	cmp	r3, r4
 800ed6e:	bf0c      	ite	eq
 800ed70:	6032      	streq	r2, [r6, #0]
 800ed72:	605a      	strne	r2, [r3, #4]
 800ed74:	e7ec      	b.n	800ed50 <_malloc_r+0xa0>
 800ed76:	4623      	mov	r3, r4
 800ed78:	6864      	ldr	r4, [r4, #4]
 800ed7a:	e7b2      	b.n	800ece2 <_malloc_r+0x32>
 800ed7c:	4634      	mov	r4, r6
 800ed7e:	6876      	ldr	r6, [r6, #4]
 800ed80:	e7b9      	b.n	800ecf6 <_malloc_r+0x46>
 800ed82:	230c      	movs	r3, #12
 800ed84:	603b      	str	r3, [r7, #0]
 800ed86:	4638      	mov	r0, r7
 800ed88:	f001 fd6e 	bl	8010868 <__malloc_unlock>
 800ed8c:	e7a1      	b.n	800ecd2 <_malloc_r+0x22>
 800ed8e:	6025      	str	r5, [r4, #0]
 800ed90:	e7de      	b.n	800ed50 <_malloc_r+0xa0>
 800ed92:	bf00      	nop
 800ed94:	20000a8c 	.word	0x20000a8c

0800ed98 <__cvt>:
 800ed98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed9c:	ec55 4b10 	vmov	r4, r5, d0
 800eda0:	2d00      	cmp	r5, #0
 800eda2:	460e      	mov	r6, r1
 800eda4:	4619      	mov	r1, r3
 800eda6:	462b      	mov	r3, r5
 800eda8:	bfbb      	ittet	lt
 800edaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edae:	461d      	movlt	r5, r3
 800edb0:	2300      	movge	r3, #0
 800edb2:	232d      	movlt	r3, #45	; 0x2d
 800edb4:	700b      	strb	r3, [r1, #0]
 800edb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edbc:	4691      	mov	r9, r2
 800edbe:	f023 0820 	bic.w	r8, r3, #32
 800edc2:	bfbc      	itt	lt
 800edc4:	4622      	movlt	r2, r4
 800edc6:	4614      	movlt	r4, r2
 800edc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edcc:	d005      	beq.n	800edda <__cvt+0x42>
 800edce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edd2:	d100      	bne.n	800edd6 <__cvt+0x3e>
 800edd4:	3601      	adds	r6, #1
 800edd6:	2102      	movs	r1, #2
 800edd8:	e000      	b.n	800eddc <__cvt+0x44>
 800edda:	2103      	movs	r1, #3
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	ab02      	add	r3, sp, #8
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	ec45 4b10 	vmov	d0, r4, r5
 800ede8:	4653      	mov	r3, sl
 800edea:	4632      	mov	r2, r6
 800edec:	f000 fec4 	bl	800fb78 <_dtoa_r>
 800edf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800edf4:	4607      	mov	r7, r0
 800edf6:	d102      	bne.n	800edfe <__cvt+0x66>
 800edf8:	f019 0f01 	tst.w	r9, #1
 800edfc:	d022      	beq.n	800ee44 <__cvt+0xac>
 800edfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee02:	eb07 0906 	add.w	r9, r7, r6
 800ee06:	d110      	bne.n	800ee2a <__cvt+0x92>
 800ee08:	783b      	ldrb	r3, [r7, #0]
 800ee0a:	2b30      	cmp	r3, #48	; 0x30
 800ee0c:	d10a      	bne.n	800ee24 <__cvt+0x8c>
 800ee0e:	2200      	movs	r2, #0
 800ee10:	2300      	movs	r3, #0
 800ee12:	4620      	mov	r0, r4
 800ee14:	4629      	mov	r1, r5
 800ee16:	f7f1 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee1a:	b918      	cbnz	r0, 800ee24 <__cvt+0x8c>
 800ee1c:	f1c6 0601 	rsb	r6, r6, #1
 800ee20:	f8ca 6000 	str.w	r6, [sl]
 800ee24:	f8da 3000 	ldr.w	r3, [sl]
 800ee28:	4499      	add	r9, r3
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	4620      	mov	r0, r4
 800ee30:	4629      	mov	r1, r5
 800ee32:	f7f1 fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee36:	b108      	cbz	r0, 800ee3c <__cvt+0xa4>
 800ee38:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee3c:	2230      	movs	r2, #48	; 0x30
 800ee3e:	9b03      	ldr	r3, [sp, #12]
 800ee40:	454b      	cmp	r3, r9
 800ee42:	d307      	bcc.n	800ee54 <__cvt+0xbc>
 800ee44:	9b03      	ldr	r3, [sp, #12]
 800ee46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee48:	1bdb      	subs	r3, r3, r7
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	6013      	str	r3, [r2, #0]
 800ee4e:	b004      	add	sp, #16
 800ee50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee54:	1c59      	adds	r1, r3, #1
 800ee56:	9103      	str	r1, [sp, #12]
 800ee58:	701a      	strb	r2, [r3, #0]
 800ee5a:	e7f0      	b.n	800ee3e <__cvt+0xa6>

0800ee5c <__exponent>:
 800ee5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2900      	cmp	r1, #0
 800ee62:	bfb8      	it	lt
 800ee64:	4249      	neglt	r1, r1
 800ee66:	f803 2b02 	strb.w	r2, [r3], #2
 800ee6a:	bfb4      	ite	lt
 800ee6c:	222d      	movlt	r2, #45	; 0x2d
 800ee6e:	222b      	movge	r2, #43	; 0x2b
 800ee70:	2909      	cmp	r1, #9
 800ee72:	7042      	strb	r2, [r0, #1]
 800ee74:	dd2a      	ble.n	800eecc <__exponent+0x70>
 800ee76:	f10d 0407 	add.w	r4, sp, #7
 800ee7a:	46a4      	mov	ip, r4
 800ee7c:	270a      	movs	r7, #10
 800ee7e:	46a6      	mov	lr, r4
 800ee80:	460a      	mov	r2, r1
 800ee82:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee86:	fb07 1516 	mls	r5, r7, r6, r1
 800ee8a:	3530      	adds	r5, #48	; 0x30
 800ee8c:	2a63      	cmp	r2, #99	; 0x63
 800ee8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee96:	4631      	mov	r1, r6
 800ee98:	dcf1      	bgt.n	800ee7e <__exponent+0x22>
 800ee9a:	3130      	adds	r1, #48	; 0x30
 800ee9c:	f1ae 0502 	sub.w	r5, lr, #2
 800eea0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eea4:	1c44      	adds	r4, r0, #1
 800eea6:	4629      	mov	r1, r5
 800eea8:	4561      	cmp	r1, ip
 800eeaa:	d30a      	bcc.n	800eec2 <__exponent+0x66>
 800eeac:	f10d 0209 	add.w	r2, sp, #9
 800eeb0:	eba2 020e 	sub.w	r2, r2, lr
 800eeb4:	4565      	cmp	r5, ip
 800eeb6:	bf88      	it	hi
 800eeb8:	2200      	movhi	r2, #0
 800eeba:	4413      	add	r3, r2
 800eebc:	1a18      	subs	r0, r3, r0
 800eebe:	b003      	add	sp, #12
 800eec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eec6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eeca:	e7ed      	b.n	800eea8 <__exponent+0x4c>
 800eecc:	2330      	movs	r3, #48	; 0x30
 800eece:	3130      	adds	r1, #48	; 0x30
 800eed0:	7083      	strb	r3, [r0, #2]
 800eed2:	70c1      	strb	r1, [r0, #3]
 800eed4:	1d03      	adds	r3, r0, #4
 800eed6:	e7f1      	b.n	800eebc <__exponent+0x60>

0800eed8 <_printf_float>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	ed2d 8b02 	vpush	{d8}
 800eee0:	b08d      	sub	sp, #52	; 0x34
 800eee2:	460c      	mov	r4, r1
 800eee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eee8:	4616      	mov	r6, r2
 800eeea:	461f      	mov	r7, r3
 800eeec:	4605      	mov	r5, r0
 800eeee:	f001 fc31 	bl	8010754 <_localeconv_r>
 800eef2:	f8d0 a000 	ldr.w	sl, [r0]
 800eef6:	4650      	mov	r0, sl
 800eef8:	f7f1 f972 	bl	80001e0 <strlen>
 800eefc:	2300      	movs	r3, #0
 800eefe:	930a      	str	r3, [sp, #40]	; 0x28
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	9305      	str	r3, [sp, #20]
 800ef04:	f8d8 3000 	ldr.w	r3, [r8]
 800ef08:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef0c:	3307      	adds	r3, #7
 800ef0e:	f023 0307 	bic.w	r3, r3, #7
 800ef12:	f103 0208 	add.w	r2, r3, #8
 800ef16:	f8c8 2000 	str.w	r2, [r8]
 800ef1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef2a:	9307      	str	r3, [sp, #28]
 800ef2c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef30:	ee08 0a10 	vmov	s16, r0
 800ef34:	4b9f      	ldr	r3, [pc, #636]	; (800f1b4 <_printf_float+0x2dc>)
 800ef36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef3e:	f7f1 fdfd 	bl	8000b3c <__aeabi_dcmpun>
 800ef42:	bb88      	cbnz	r0, 800efa8 <_printf_float+0xd0>
 800ef44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef48:	4b9a      	ldr	r3, [pc, #616]	; (800f1b4 <_printf_float+0x2dc>)
 800ef4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef4e:	f7f1 fdd7 	bl	8000b00 <__aeabi_dcmple>
 800ef52:	bb48      	cbnz	r0, 800efa8 <_printf_float+0xd0>
 800ef54:	2200      	movs	r2, #0
 800ef56:	2300      	movs	r3, #0
 800ef58:	4640      	mov	r0, r8
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	f7f1 fdc6 	bl	8000aec <__aeabi_dcmplt>
 800ef60:	b110      	cbz	r0, 800ef68 <_printf_float+0x90>
 800ef62:	232d      	movs	r3, #45	; 0x2d
 800ef64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef68:	4b93      	ldr	r3, [pc, #588]	; (800f1b8 <_printf_float+0x2e0>)
 800ef6a:	4894      	ldr	r0, [pc, #592]	; (800f1bc <_printf_float+0x2e4>)
 800ef6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef70:	bf94      	ite	ls
 800ef72:	4698      	movls	r8, r3
 800ef74:	4680      	movhi	r8, r0
 800ef76:	2303      	movs	r3, #3
 800ef78:	6123      	str	r3, [r4, #16]
 800ef7a:	9b05      	ldr	r3, [sp, #20]
 800ef7c:	f023 0204 	bic.w	r2, r3, #4
 800ef80:	6022      	str	r2, [r4, #0]
 800ef82:	f04f 0900 	mov.w	r9, #0
 800ef86:	9700      	str	r7, [sp, #0]
 800ef88:	4633      	mov	r3, r6
 800ef8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f000 f9d8 	bl	800f344 <_printf_common>
 800ef94:	3001      	adds	r0, #1
 800ef96:	f040 8090 	bne.w	800f0ba <_printf_float+0x1e2>
 800ef9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9e:	b00d      	add	sp, #52	; 0x34
 800efa0:	ecbd 8b02 	vpop	{d8}
 800efa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	4642      	mov	r2, r8
 800efaa:	464b      	mov	r3, r9
 800efac:	4640      	mov	r0, r8
 800efae:	4649      	mov	r1, r9
 800efb0:	f7f1 fdc4 	bl	8000b3c <__aeabi_dcmpun>
 800efb4:	b140      	cbz	r0, 800efc8 <_printf_float+0xf0>
 800efb6:	464b      	mov	r3, r9
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bfbc      	itt	lt
 800efbc:	232d      	movlt	r3, #45	; 0x2d
 800efbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efc2:	487f      	ldr	r0, [pc, #508]	; (800f1c0 <_printf_float+0x2e8>)
 800efc4:	4b7f      	ldr	r3, [pc, #508]	; (800f1c4 <_printf_float+0x2ec>)
 800efc6:	e7d1      	b.n	800ef6c <_printf_float+0x94>
 800efc8:	6863      	ldr	r3, [r4, #4]
 800efca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efce:	9206      	str	r2, [sp, #24]
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	d13f      	bne.n	800f054 <_printf_float+0x17c>
 800efd4:	2306      	movs	r3, #6
 800efd6:	6063      	str	r3, [r4, #4]
 800efd8:	9b05      	ldr	r3, [sp, #20]
 800efda:	6861      	ldr	r1, [r4, #4]
 800efdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efe0:	2300      	movs	r3, #0
 800efe2:	9303      	str	r3, [sp, #12]
 800efe4:	ab0a      	add	r3, sp, #40	; 0x28
 800efe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efea:	ab09      	add	r3, sp, #36	; 0x24
 800efec:	ec49 8b10 	vmov	d0, r8, r9
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	6022      	str	r2, [r4, #0]
 800eff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eff8:	4628      	mov	r0, r5
 800effa:	f7ff fecd 	bl	800ed98 <__cvt>
 800effe:	9b06      	ldr	r3, [sp, #24]
 800f000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f002:	2b47      	cmp	r3, #71	; 0x47
 800f004:	4680      	mov	r8, r0
 800f006:	d108      	bne.n	800f01a <_printf_float+0x142>
 800f008:	1cc8      	adds	r0, r1, #3
 800f00a:	db02      	blt.n	800f012 <_printf_float+0x13a>
 800f00c:	6863      	ldr	r3, [r4, #4]
 800f00e:	4299      	cmp	r1, r3
 800f010:	dd41      	ble.n	800f096 <_printf_float+0x1be>
 800f012:	f1ab 0b02 	sub.w	fp, fp, #2
 800f016:	fa5f fb8b 	uxtb.w	fp, fp
 800f01a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f01e:	d820      	bhi.n	800f062 <_printf_float+0x18a>
 800f020:	3901      	subs	r1, #1
 800f022:	465a      	mov	r2, fp
 800f024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f028:	9109      	str	r1, [sp, #36]	; 0x24
 800f02a:	f7ff ff17 	bl	800ee5c <__exponent>
 800f02e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f030:	1813      	adds	r3, r2, r0
 800f032:	2a01      	cmp	r2, #1
 800f034:	4681      	mov	r9, r0
 800f036:	6123      	str	r3, [r4, #16]
 800f038:	dc02      	bgt.n	800f040 <_printf_float+0x168>
 800f03a:	6822      	ldr	r2, [r4, #0]
 800f03c:	07d2      	lsls	r2, r2, #31
 800f03e:	d501      	bpl.n	800f044 <_printf_float+0x16c>
 800f040:	3301      	adds	r3, #1
 800f042:	6123      	str	r3, [r4, #16]
 800f044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d09c      	beq.n	800ef86 <_printf_float+0xae>
 800f04c:	232d      	movs	r3, #45	; 0x2d
 800f04e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f052:	e798      	b.n	800ef86 <_printf_float+0xae>
 800f054:	9a06      	ldr	r2, [sp, #24]
 800f056:	2a47      	cmp	r2, #71	; 0x47
 800f058:	d1be      	bne.n	800efd8 <_printf_float+0x100>
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1bc      	bne.n	800efd8 <_printf_float+0x100>
 800f05e:	2301      	movs	r3, #1
 800f060:	e7b9      	b.n	800efd6 <_printf_float+0xfe>
 800f062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f066:	d118      	bne.n	800f09a <_printf_float+0x1c2>
 800f068:	2900      	cmp	r1, #0
 800f06a:	6863      	ldr	r3, [r4, #4]
 800f06c:	dd0b      	ble.n	800f086 <_printf_float+0x1ae>
 800f06e:	6121      	str	r1, [r4, #16]
 800f070:	b913      	cbnz	r3, 800f078 <_printf_float+0x1a0>
 800f072:	6822      	ldr	r2, [r4, #0]
 800f074:	07d0      	lsls	r0, r2, #31
 800f076:	d502      	bpl.n	800f07e <_printf_float+0x1a6>
 800f078:	3301      	adds	r3, #1
 800f07a:	440b      	add	r3, r1
 800f07c:	6123      	str	r3, [r4, #16]
 800f07e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f080:	f04f 0900 	mov.w	r9, #0
 800f084:	e7de      	b.n	800f044 <_printf_float+0x16c>
 800f086:	b913      	cbnz	r3, 800f08e <_printf_float+0x1b6>
 800f088:	6822      	ldr	r2, [r4, #0]
 800f08a:	07d2      	lsls	r2, r2, #31
 800f08c:	d501      	bpl.n	800f092 <_printf_float+0x1ba>
 800f08e:	3302      	adds	r3, #2
 800f090:	e7f4      	b.n	800f07c <_printf_float+0x1a4>
 800f092:	2301      	movs	r3, #1
 800f094:	e7f2      	b.n	800f07c <_printf_float+0x1a4>
 800f096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f09c:	4299      	cmp	r1, r3
 800f09e:	db05      	blt.n	800f0ac <_printf_float+0x1d4>
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	6121      	str	r1, [r4, #16]
 800f0a4:	07d8      	lsls	r0, r3, #31
 800f0a6:	d5ea      	bpl.n	800f07e <_printf_float+0x1a6>
 800f0a8:	1c4b      	adds	r3, r1, #1
 800f0aa:	e7e7      	b.n	800f07c <_printf_float+0x1a4>
 800f0ac:	2900      	cmp	r1, #0
 800f0ae:	bfd4      	ite	le
 800f0b0:	f1c1 0202 	rsble	r2, r1, #2
 800f0b4:	2201      	movgt	r2, #1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	e7e0      	b.n	800f07c <_printf_float+0x1a4>
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	055a      	lsls	r2, r3, #21
 800f0be:	d407      	bmi.n	800f0d0 <_printf_float+0x1f8>
 800f0c0:	6923      	ldr	r3, [r4, #16]
 800f0c2:	4642      	mov	r2, r8
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	47b8      	blx	r7
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	d12c      	bne.n	800f128 <_printf_float+0x250>
 800f0ce:	e764      	b.n	800ef9a <_printf_float+0xc2>
 800f0d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0d4:	f240 80e0 	bls.w	800f298 <_printf_float+0x3c0>
 800f0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0dc:	2200      	movs	r2, #0
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f7f1 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d034      	beq.n	800f152 <_printf_float+0x27a>
 800f0e8:	4a37      	ldr	r2, [pc, #220]	; (800f1c8 <_printf_float+0x2f0>)
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	47b8      	blx	r7
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	f43f af51 	beq.w	800ef9a <_printf_float+0xc2>
 800f0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	db02      	blt.n	800f106 <_printf_float+0x22e>
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	07d8      	lsls	r0, r3, #31
 800f104:	d510      	bpl.n	800f128 <_printf_float+0x250>
 800f106:	ee18 3a10 	vmov	r3, s16
 800f10a:	4652      	mov	r2, sl
 800f10c:	4631      	mov	r1, r6
 800f10e:	4628      	mov	r0, r5
 800f110:	47b8      	blx	r7
 800f112:	3001      	adds	r0, #1
 800f114:	f43f af41 	beq.w	800ef9a <_printf_float+0xc2>
 800f118:	f04f 0800 	mov.w	r8, #0
 800f11c:	f104 091a 	add.w	r9, r4, #26
 800f120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f122:	3b01      	subs	r3, #1
 800f124:	4543      	cmp	r3, r8
 800f126:	dc09      	bgt.n	800f13c <_printf_float+0x264>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	079b      	lsls	r3, r3, #30
 800f12c:	f100 8105 	bmi.w	800f33a <_printf_float+0x462>
 800f130:	68e0      	ldr	r0, [r4, #12]
 800f132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f134:	4298      	cmp	r0, r3
 800f136:	bfb8      	it	lt
 800f138:	4618      	movlt	r0, r3
 800f13a:	e730      	b.n	800ef9e <_printf_float+0xc6>
 800f13c:	2301      	movs	r3, #1
 800f13e:	464a      	mov	r2, r9
 800f140:	4631      	mov	r1, r6
 800f142:	4628      	mov	r0, r5
 800f144:	47b8      	blx	r7
 800f146:	3001      	adds	r0, #1
 800f148:	f43f af27 	beq.w	800ef9a <_printf_float+0xc2>
 800f14c:	f108 0801 	add.w	r8, r8, #1
 800f150:	e7e6      	b.n	800f120 <_printf_float+0x248>
 800f152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f154:	2b00      	cmp	r3, #0
 800f156:	dc39      	bgt.n	800f1cc <_printf_float+0x2f4>
 800f158:	4a1b      	ldr	r2, [pc, #108]	; (800f1c8 <_printf_float+0x2f0>)
 800f15a:	2301      	movs	r3, #1
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	47b8      	blx	r7
 800f162:	3001      	adds	r0, #1
 800f164:	f43f af19 	beq.w	800ef9a <_printf_float+0xc2>
 800f168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f16c:	4313      	orrs	r3, r2
 800f16e:	d102      	bne.n	800f176 <_printf_float+0x29e>
 800f170:	6823      	ldr	r3, [r4, #0]
 800f172:	07d9      	lsls	r1, r3, #31
 800f174:	d5d8      	bpl.n	800f128 <_printf_float+0x250>
 800f176:	ee18 3a10 	vmov	r3, s16
 800f17a:	4652      	mov	r2, sl
 800f17c:	4631      	mov	r1, r6
 800f17e:	4628      	mov	r0, r5
 800f180:	47b8      	blx	r7
 800f182:	3001      	adds	r0, #1
 800f184:	f43f af09 	beq.w	800ef9a <_printf_float+0xc2>
 800f188:	f04f 0900 	mov.w	r9, #0
 800f18c:	f104 0a1a 	add.w	sl, r4, #26
 800f190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f192:	425b      	negs	r3, r3
 800f194:	454b      	cmp	r3, r9
 800f196:	dc01      	bgt.n	800f19c <_printf_float+0x2c4>
 800f198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f19a:	e792      	b.n	800f0c2 <_printf_float+0x1ea>
 800f19c:	2301      	movs	r3, #1
 800f19e:	4652      	mov	r2, sl
 800f1a0:	4631      	mov	r1, r6
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	47b8      	blx	r7
 800f1a6:	3001      	adds	r0, #1
 800f1a8:	f43f aef7 	beq.w	800ef9a <_printf_float+0xc2>
 800f1ac:	f109 0901 	add.w	r9, r9, #1
 800f1b0:	e7ee      	b.n	800f190 <_printf_float+0x2b8>
 800f1b2:	bf00      	nop
 800f1b4:	7fefffff 	.word	0x7fefffff
 800f1b8:	08011aa0 	.word	0x08011aa0
 800f1bc:	08011aa4 	.word	0x08011aa4
 800f1c0:	08011aac 	.word	0x08011aac
 800f1c4:	08011aa8 	.word	0x08011aa8
 800f1c8:	08011ab0 	.word	0x08011ab0
 800f1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	bfa8      	it	ge
 800f1d4:	461a      	movge	r2, r3
 800f1d6:	2a00      	cmp	r2, #0
 800f1d8:	4691      	mov	r9, r2
 800f1da:	dc37      	bgt.n	800f24c <_printf_float+0x374>
 800f1dc:	f04f 0b00 	mov.w	fp, #0
 800f1e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1e4:	f104 021a 	add.w	r2, r4, #26
 800f1e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	eba3 0309 	sub.w	r3, r3, r9
 800f1f0:	455b      	cmp	r3, fp
 800f1f2:	dc33      	bgt.n	800f25c <_printf_float+0x384>
 800f1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	db3b      	blt.n	800f274 <_printf_float+0x39c>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	07da      	lsls	r2, r3, #31
 800f200:	d438      	bmi.n	800f274 <_printf_float+0x39c>
 800f202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f204:	9a05      	ldr	r2, [sp, #20]
 800f206:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f208:	1a9a      	subs	r2, r3, r2
 800f20a:	eba3 0901 	sub.w	r9, r3, r1
 800f20e:	4591      	cmp	r9, r2
 800f210:	bfa8      	it	ge
 800f212:	4691      	movge	r9, r2
 800f214:	f1b9 0f00 	cmp.w	r9, #0
 800f218:	dc35      	bgt.n	800f286 <_printf_float+0x3ae>
 800f21a:	f04f 0800 	mov.w	r8, #0
 800f21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f222:	f104 0a1a 	add.w	sl, r4, #26
 800f226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f22a:	1a9b      	subs	r3, r3, r2
 800f22c:	eba3 0309 	sub.w	r3, r3, r9
 800f230:	4543      	cmp	r3, r8
 800f232:	f77f af79 	ble.w	800f128 <_printf_float+0x250>
 800f236:	2301      	movs	r3, #1
 800f238:	4652      	mov	r2, sl
 800f23a:	4631      	mov	r1, r6
 800f23c:	4628      	mov	r0, r5
 800f23e:	47b8      	blx	r7
 800f240:	3001      	adds	r0, #1
 800f242:	f43f aeaa 	beq.w	800ef9a <_printf_float+0xc2>
 800f246:	f108 0801 	add.w	r8, r8, #1
 800f24a:	e7ec      	b.n	800f226 <_printf_float+0x34e>
 800f24c:	4613      	mov	r3, r2
 800f24e:	4631      	mov	r1, r6
 800f250:	4642      	mov	r2, r8
 800f252:	4628      	mov	r0, r5
 800f254:	47b8      	blx	r7
 800f256:	3001      	adds	r0, #1
 800f258:	d1c0      	bne.n	800f1dc <_printf_float+0x304>
 800f25a:	e69e      	b.n	800ef9a <_printf_float+0xc2>
 800f25c:	2301      	movs	r3, #1
 800f25e:	4631      	mov	r1, r6
 800f260:	4628      	mov	r0, r5
 800f262:	9205      	str	r2, [sp, #20]
 800f264:	47b8      	blx	r7
 800f266:	3001      	adds	r0, #1
 800f268:	f43f ae97 	beq.w	800ef9a <_printf_float+0xc2>
 800f26c:	9a05      	ldr	r2, [sp, #20]
 800f26e:	f10b 0b01 	add.w	fp, fp, #1
 800f272:	e7b9      	b.n	800f1e8 <_printf_float+0x310>
 800f274:	ee18 3a10 	vmov	r3, s16
 800f278:	4652      	mov	r2, sl
 800f27a:	4631      	mov	r1, r6
 800f27c:	4628      	mov	r0, r5
 800f27e:	47b8      	blx	r7
 800f280:	3001      	adds	r0, #1
 800f282:	d1be      	bne.n	800f202 <_printf_float+0x32a>
 800f284:	e689      	b.n	800ef9a <_printf_float+0xc2>
 800f286:	9a05      	ldr	r2, [sp, #20]
 800f288:	464b      	mov	r3, r9
 800f28a:	4442      	add	r2, r8
 800f28c:	4631      	mov	r1, r6
 800f28e:	4628      	mov	r0, r5
 800f290:	47b8      	blx	r7
 800f292:	3001      	adds	r0, #1
 800f294:	d1c1      	bne.n	800f21a <_printf_float+0x342>
 800f296:	e680      	b.n	800ef9a <_printf_float+0xc2>
 800f298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f29a:	2a01      	cmp	r2, #1
 800f29c:	dc01      	bgt.n	800f2a2 <_printf_float+0x3ca>
 800f29e:	07db      	lsls	r3, r3, #31
 800f2a0:	d538      	bpl.n	800f314 <_printf_float+0x43c>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	4642      	mov	r2, r8
 800f2a6:	4631      	mov	r1, r6
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	47b8      	blx	r7
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	f43f ae74 	beq.w	800ef9a <_printf_float+0xc2>
 800f2b2:	ee18 3a10 	vmov	r3, s16
 800f2b6:	4652      	mov	r2, sl
 800f2b8:	4631      	mov	r1, r6
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	47b8      	blx	r7
 800f2be:	3001      	adds	r0, #1
 800f2c0:	f43f ae6b 	beq.w	800ef9a <_printf_float+0xc2>
 800f2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f7f1 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2d0:	b9d8      	cbnz	r0, 800f30a <_printf_float+0x432>
 800f2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d4:	f108 0201 	add.w	r2, r8, #1
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	4631      	mov	r1, r6
 800f2dc:	4628      	mov	r0, r5
 800f2de:	47b8      	blx	r7
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d10e      	bne.n	800f302 <_printf_float+0x42a>
 800f2e4:	e659      	b.n	800ef9a <_printf_float+0xc2>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	4652      	mov	r2, sl
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	47b8      	blx	r7
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	f43f ae52 	beq.w	800ef9a <_printf_float+0xc2>
 800f2f6:	f108 0801 	add.w	r8, r8, #1
 800f2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	4543      	cmp	r3, r8
 800f300:	dcf1      	bgt.n	800f2e6 <_printf_float+0x40e>
 800f302:	464b      	mov	r3, r9
 800f304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f308:	e6dc      	b.n	800f0c4 <_printf_float+0x1ec>
 800f30a:	f04f 0800 	mov.w	r8, #0
 800f30e:	f104 0a1a 	add.w	sl, r4, #26
 800f312:	e7f2      	b.n	800f2fa <_printf_float+0x422>
 800f314:	2301      	movs	r3, #1
 800f316:	4642      	mov	r2, r8
 800f318:	e7df      	b.n	800f2da <_printf_float+0x402>
 800f31a:	2301      	movs	r3, #1
 800f31c:	464a      	mov	r2, r9
 800f31e:	4631      	mov	r1, r6
 800f320:	4628      	mov	r0, r5
 800f322:	47b8      	blx	r7
 800f324:	3001      	adds	r0, #1
 800f326:	f43f ae38 	beq.w	800ef9a <_printf_float+0xc2>
 800f32a:	f108 0801 	add.w	r8, r8, #1
 800f32e:	68e3      	ldr	r3, [r4, #12]
 800f330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f332:	1a5b      	subs	r3, r3, r1
 800f334:	4543      	cmp	r3, r8
 800f336:	dcf0      	bgt.n	800f31a <_printf_float+0x442>
 800f338:	e6fa      	b.n	800f130 <_printf_float+0x258>
 800f33a:	f04f 0800 	mov.w	r8, #0
 800f33e:	f104 0919 	add.w	r9, r4, #25
 800f342:	e7f4      	b.n	800f32e <_printf_float+0x456>

0800f344 <_printf_common>:
 800f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f348:	4616      	mov	r6, r2
 800f34a:	4699      	mov	r9, r3
 800f34c:	688a      	ldr	r2, [r1, #8]
 800f34e:	690b      	ldr	r3, [r1, #16]
 800f350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f354:	4293      	cmp	r3, r2
 800f356:	bfb8      	it	lt
 800f358:	4613      	movlt	r3, r2
 800f35a:	6033      	str	r3, [r6, #0]
 800f35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f360:	4607      	mov	r7, r0
 800f362:	460c      	mov	r4, r1
 800f364:	b10a      	cbz	r2, 800f36a <_printf_common+0x26>
 800f366:	3301      	adds	r3, #1
 800f368:	6033      	str	r3, [r6, #0]
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	0699      	lsls	r1, r3, #26
 800f36e:	bf42      	ittt	mi
 800f370:	6833      	ldrmi	r3, [r6, #0]
 800f372:	3302      	addmi	r3, #2
 800f374:	6033      	strmi	r3, [r6, #0]
 800f376:	6825      	ldr	r5, [r4, #0]
 800f378:	f015 0506 	ands.w	r5, r5, #6
 800f37c:	d106      	bne.n	800f38c <_printf_common+0x48>
 800f37e:	f104 0a19 	add.w	sl, r4, #25
 800f382:	68e3      	ldr	r3, [r4, #12]
 800f384:	6832      	ldr	r2, [r6, #0]
 800f386:	1a9b      	subs	r3, r3, r2
 800f388:	42ab      	cmp	r3, r5
 800f38a:	dc26      	bgt.n	800f3da <_printf_common+0x96>
 800f38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f390:	1e13      	subs	r3, r2, #0
 800f392:	6822      	ldr	r2, [r4, #0]
 800f394:	bf18      	it	ne
 800f396:	2301      	movne	r3, #1
 800f398:	0692      	lsls	r2, r2, #26
 800f39a:	d42b      	bmi.n	800f3f4 <_printf_common+0xb0>
 800f39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	47c0      	blx	r8
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	d01e      	beq.n	800f3e8 <_printf_common+0xa4>
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	68e5      	ldr	r5, [r4, #12]
 800f3ae:	6832      	ldr	r2, [r6, #0]
 800f3b0:	f003 0306 	and.w	r3, r3, #6
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	bf08      	it	eq
 800f3b8:	1aad      	subeq	r5, r5, r2
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	6922      	ldr	r2, [r4, #16]
 800f3be:	bf0c      	ite	eq
 800f3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3c4:	2500      	movne	r5, #0
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	bfc4      	itt	gt
 800f3ca:	1a9b      	subgt	r3, r3, r2
 800f3cc:	18ed      	addgt	r5, r5, r3
 800f3ce:	2600      	movs	r6, #0
 800f3d0:	341a      	adds	r4, #26
 800f3d2:	42b5      	cmp	r5, r6
 800f3d4:	d11a      	bne.n	800f40c <_printf_common+0xc8>
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	e008      	b.n	800f3ec <_printf_common+0xa8>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	4652      	mov	r2, sl
 800f3de:	4649      	mov	r1, r9
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	47c0      	blx	r8
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d103      	bne.n	800f3f0 <_printf_common+0xac>
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	e7c6      	b.n	800f382 <_printf_common+0x3e>
 800f3f4:	18e1      	adds	r1, r4, r3
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	2030      	movs	r0, #48	; 0x30
 800f3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3fe:	4422      	add	r2, r4
 800f400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f408:	3302      	adds	r3, #2
 800f40a:	e7c7      	b.n	800f39c <_printf_common+0x58>
 800f40c:	2301      	movs	r3, #1
 800f40e:	4622      	mov	r2, r4
 800f410:	4649      	mov	r1, r9
 800f412:	4638      	mov	r0, r7
 800f414:	47c0      	blx	r8
 800f416:	3001      	adds	r0, #1
 800f418:	d0e6      	beq.n	800f3e8 <_printf_common+0xa4>
 800f41a:	3601      	adds	r6, #1
 800f41c:	e7d9      	b.n	800f3d2 <_printf_common+0x8e>
	...

0800f420 <_printf_i>:
 800f420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f424:	7e0f      	ldrb	r7, [r1, #24]
 800f426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f428:	2f78      	cmp	r7, #120	; 0x78
 800f42a:	4691      	mov	r9, r2
 800f42c:	4680      	mov	r8, r0
 800f42e:	460c      	mov	r4, r1
 800f430:	469a      	mov	sl, r3
 800f432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f436:	d807      	bhi.n	800f448 <_printf_i+0x28>
 800f438:	2f62      	cmp	r7, #98	; 0x62
 800f43a:	d80a      	bhi.n	800f452 <_printf_i+0x32>
 800f43c:	2f00      	cmp	r7, #0
 800f43e:	f000 80d8 	beq.w	800f5f2 <_printf_i+0x1d2>
 800f442:	2f58      	cmp	r7, #88	; 0x58
 800f444:	f000 80a3 	beq.w	800f58e <_printf_i+0x16e>
 800f448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f450:	e03a      	b.n	800f4c8 <_printf_i+0xa8>
 800f452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f456:	2b15      	cmp	r3, #21
 800f458:	d8f6      	bhi.n	800f448 <_printf_i+0x28>
 800f45a:	a101      	add	r1, pc, #4	; (adr r1, 800f460 <_printf_i+0x40>)
 800f45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f460:	0800f4b9 	.word	0x0800f4b9
 800f464:	0800f4cd 	.word	0x0800f4cd
 800f468:	0800f449 	.word	0x0800f449
 800f46c:	0800f449 	.word	0x0800f449
 800f470:	0800f449 	.word	0x0800f449
 800f474:	0800f449 	.word	0x0800f449
 800f478:	0800f4cd 	.word	0x0800f4cd
 800f47c:	0800f449 	.word	0x0800f449
 800f480:	0800f449 	.word	0x0800f449
 800f484:	0800f449 	.word	0x0800f449
 800f488:	0800f449 	.word	0x0800f449
 800f48c:	0800f5d9 	.word	0x0800f5d9
 800f490:	0800f4fd 	.word	0x0800f4fd
 800f494:	0800f5bb 	.word	0x0800f5bb
 800f498:	0800f449 	.word	0x0800f449
 800f49c:	0800f449 	.word	0x0800f449
 800f4a0:	0800f5fb 	.word	0x0800f5fb
 800f4a4:	0800f449 	.word	0x0800f449
 800f4a8:	0800f4fd 	.word	0x0800f4fd
 800f4ac:	0800f449 	.word	0x0800f449
 800f4b0:	0800f449 	.word	0x0800f449
 800f4b4:	0800f5c3 	.word	0x0800f5c3
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	1d1a      	adds	r2, r3, #4
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	602a      	str	r2, [r5, #0]
 800f4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e0a3      	b.n	800f614 <_printf_i+0x1f4>
 800f4cc:	6820      	ldr	r0, [r4, #0]
 800f4ce:	6829      	ldr	r1, [r5, #0]
 800f4d0:	0606      	lsls	r6, r0, #24
 800f4d2:	f101 0304 	add.w	r3, r1, #4
 800f4d6:	d50a      	bpl.n	800f4ee <_printf_i+0xce>
 800f4d8:	680e      	ldr	r6, [r1, #0]
 800f4da:	602b      	str	r3, [r5, #0]
 800f4dc:	2e00      	cmp	r6, #0
 800f4de:	da03      	bge.n	800f4e8 <_printf_i+0xc8>
 800f4e0:	232d      	movs	r3, #45	; 0x2d
 800f4e2:	4276      	negs	r6, r6
 800f4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4e8:	485e      	ldr	r0, [pc, #376]	; (800f664 <_printf_i+0x244>)
 800f4ea:	230a      	movs	r3, #10
 800f4ec:	e019      	b.n	800f522 <_printf_i+0x102>
 800f4ee:	680e      	ldr	r6, [r1, #0]
 800f4f0:	602b      	str	r3, [r5, #0]
 800f4f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4f6:	bf18      	it	ne
 800f4f8:	b236      	sxthne	r6, r6
 800f4fa:	e7ef      	b.n	800f4dc <_printf_i+0xbc>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	6820      	ldr	r0, [r4, #0]
 800f500:	1d19      	adds	r1, r3, #4
 800f502:	6029      	str	r1, [r5, #0]
 800f504:	0601      	lsls	r1, r0, #24
 800f506:	d501      	bpl.n	800f50c <_printf_i+0xec>
 800f508:	681e      	ldr	r6, [r3, #0]
 800f50a:	e002      	b.n	800f512 <_printf_i+0xf2>
 800f50c:	0646      	lsls	r6, r0, #25
 800f50e:	d5fb      	bpl.n	800f508 <_printf_i+0xe8>
 800f510:	881e      	ldrh	r6, [r3, #0]
 800f512:	4854      	ldr	r0, [pc, #336]	; (800f664 <_printf_i+0x244>)
 800f514:	2f6f      	cmp	r7, #111	; 0x6f
 800f516:	bf0c      	ite	eq
 800f518:	2308      	moveq	r3, #8
 800f51a:	230a      	movne	r3, #10
 800f51c:	2100      	movs	r1, #0
 800f51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f522:	6865      	ldr	r5, [r4, #4]
 800f524:	60a5      	str	r5, [r4, #8]
 800f526:	2d00      	cmp	r5, #0
 800f528:	bfa2      	ittt	ge
 800f52a:	6821      	ldrge	r1, [r4, #0]
 800f52c:	f021 0104 	bicge.w	r1, r1, #4
 800f530:	6021      	strge	r1, [r4, #0]
 800f532:	b90e      	cbnz	r6, 800f538 <_printf_i+0x118>
 800f534:	2d00      	cmp	r5, #0
 800f536:	d04d      	beq.n	800f5d4 <_printf_i+0x1b4>
 800f538:	4615      	mov	r5, r2
 800f53a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f53e:	fb03 6711 	mls	r7, r3, r1, r6
 800f542:	5dc7      	ldrb	r7, [r0, r7]
 800f544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f548:	4637      	mov	r7, r6
 800f54a:	42bb      	cmp	r3, r7
 800f54c:	460e      	mov	r6, r1
 800f54e:	d9f4      	bls.n	800f53a <_printf_i+0x11a>
 800f550:	2b08      	cmp	r3, #8
 800f552:	d10b      	bne.n	800f56c <_printf_i+0x14c>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	07de      	lsls	r6, r3, #31
 800f558:	d508      	bpl.n	800f56c <_printf_i+0x14c>
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	6861      	ldr	r1, [r4, #4]
 800f55e:	4299      	cmp	r1, r3
 800f560:	bfde      	ittt	le
 800f562:	2330      	movle	r3, #48	; 0x30
 800f564:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f56c:	1b52      	subs	r2, r2, r5
 800f56e:	6122      	str	r2, [r4, #16]
 800f570:	f8cd a000 	str.w	sl, [sp]
 800f574:	464b      	mov	r3, r9
 800f576:	aa03      	add	r2, sp, #12
 800f578:	4621      	mov	r1, r4
 800f57a:	4640      	mov	r0, r8
 800f57c:	f7ff fee2 	bl	800f344 <_printf_common>
 800f580:	3001      	adds	r0, #1
 800f582:	d14c      	bne.n	800f61e <_printf_i+0x1fe>
 800f584:	f04f 30ff 	mov.w	r0, #4294967295
 800f588:	b004      	add	sp, #16
 800f58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f58e:	4835      	ldr	r0, [pc, #212]	; (800f664 <_printf_i+0x244>)
 800f590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f594:	6829      	ldr	r1, [r5, #0]
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	f851 6b04 	ldr.w	r6, [r1], #4
 800f59c:	6029      	str	r1, [r5, #0]
 800f59e:	061d      	lsls	r5, r3, #24
 800f5a0:	d514      	bpl.n	800f5cc <_printf_i+0x1ac>
 800f5a2:	07df      	lsls	r7, r3, #31
 800f5a4:	bf44      	itt	mi
 800f5a6:	f043 0320 	orrmi.w	r3, r3, #32
 800f5aa:	6023      	strmi	r3, [r4, #0]
 800f5ac:	b91e      	cbnz	r6, 800f5b6 <_printf_i+0x196>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f023 0320 	bic.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	2310      	movs	r3, #16
 800f5b8:	e7b0      	b.n	800f51c <_printf_i+0xfc>
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	f043 0320 	orr.w	r3, r3, #32
 800f5c0:	6023      	str	r3, [r4, #0]
 800f5c2:	2378      	movs	r3, #120	; 0x78
 800f5c4:	4828      	ldr	r0, [pc, #160]	; (800f668 <_printf_i+0x248>)
 800f5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5ca:	e7e3      	b.n	800f594 <_printf_i+0x174>
 800f5cc:	0659      	lsls	r1, r3, #25
 800f5ce:	bf48      	it	mi
 800f5d0:	b2b6      	uxthmi	r6, r6
 800f5d2:	e7e6      	b.n	800f5a2 <_printf_i+0x182>
 800f5d4:	4615      	mov	r5, r2
 800f5d6:	e7bb      	b.n	800f550 <_printf_i+0x130>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	6826      	ldr	r6, [r4, #0]
 800f5dc:	6961      	ldr	r1, [r4, #20]
 800f5de:	1d18      	adds	r0, r3, #4
 800f5e0:	6028      	str	r0, [r5, #0]
 800f5e2:	0635      	lsls	r5, r6, #24
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	d501      	bpl.n	800f5ec <_printf_i+0x1cc>
 800f5e8:	6019      	str	r1, [r3, #0]
 800f5ea:	e002      	b.n	800f5f2 <_printf_i+0x1d2>
 800f5ec:	0670      	lsls	r0, r6, #25
 800f5ee:	d5fb      	bpl.n	800f5e8 <_printf_i+0x1c8>
 800f5f0:	8019      	strh	r1, [r3, #0]
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	6123      	str	r3, [r4, #16]
 800f5f6:	4615      	mov	r5, r2
 800f5f8:	e7ba      	b.n	800f570 <_printf_i+0x150>
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	1d1a      	adds	r2, r3, #4
 800f5fe:	602a      	str	r2, [r5, #0]
 800f600:	681d      	ldr	r5, [r3, #0]
 800f602:	6862      	ldr	r2, [r4, #4]
 800f604:	2100      	movs	r1, #0
 800f606:	4628      	mov	r0, r5
 800f608:	f7f0 fdf2 	bl	80001f0 <memchr>
 800f60c:	b108      	cbz	r0, 800f612 <_printf_i+0x1f2>
 800f60e:	1b40      	subs	r0, r0, r5
 800f610:	6060      	str	r0, [r4, #4]
 800f612:	6863      	ldr	r3, [r4, #4]
 800f614:	6123      	str	r3, [r4, #16]
 800f616:	2300      	movs	r3, #0
 800f618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61c:	e7a8      	b.n	800f570 <_printf_i+0x150>
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	462a      	mov	r2, r5
 800f622:	4649      	mov	r1, r9
 800f624:	4640      	mov	r0, r8
 800f626:	47d0      	blx	sl
 800f628:	3001      	adds	r0, #1
 800f62a:	d0ab      	beq.n	800f584 <_printf_i+0x164>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	079b      	lsls	r3, r3, #30
 800f630:	d413      	bmi.n	800f65a <_printf_i+0x23a>
 800f632:	68e0      	ldr	r0, [r4, #12]
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	4298      	cmp	r0, r3
 800f638:	bfb8      	it	lt
 800f63a:	4618      	movlt	r0, r3
 800f63c:	e7a4      	b.n	800f588 <_printf_i+0x168>
 800f63e:	2301      	movs	r3, #1
 800f640:	4632      	mov	r2, r6
 800f642:	4649      	mov	r1, r9
 800f644:	4640      	mov	r0, r8
 800f646:	47d0      	blx	sl
 800f648:	3001      	adds	r0, #1
 800f64a:	d09b      	beq.n	800f584 <_printf_i+0x164>
 800f64c:	3501      	adds	r5, #1
 800f64e:	68e3      	ldr	r3, [r4, #12]
 800f650:	9903      	ldr	r1, [sp, #12]
 800f652:	1a5b      	subs	r3, r3, r1
 800f654:	42ab      	cmp	r3, r5
 800f656:	dcf2      	bgt.n	800f63e <_printf_i+0x21e>
 800f658:	e7eb      	b.n	800f632 <_printf_i+0x212>
 800f65a:	2500      	movs	r5, #0
 800f65c:	f104 0619 	add.w	r6, r4, #25
 800f660:	e7f5      	b.n	800f64e <_printf_i+0x22e>
 800f662:	bf00      	nop
 800f664:	08011ab2 	.word	0x08011ab2
 800f668:	08011ac3 	.word	0x08011ac3

0800f66c <iprintf>:
 800f66c:	b40f      	push	{r0, r1, r2, r3}
 800f66e:	4b0a      	ldr	r3, [pc, #40]	; (800f698 <iprintf+0x2c>)
 800f670:	b513      	push	{r0, r1, r4, lr}
 800f672:	681c      	ldr	r4, [r3, #0]
 800f674:	b124      	cbz	r4, 800f680 <iprintf+0x14>
 800f676:	69a3      	ldr	r3, [r4, #24]
 800f678:	b913      	cbnz	r3, 800f680 <iprintf+0x14>
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7ff f9d0 	bl	800ea20 <__sinit>
 800f680:	ab05      	add	r3, sp, #20
 800f682:	9a04      	ldr	r2, [sp, #16]
 800f684:	68a1      	ldr	r1, [r4, #8]
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	4620      	mov	r0, r4
 800f68a:	f001 fe13 	bl	80112b4 <_vfiprintf_r>
 800f68e:	b002      	add	sp, #8
 800f690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f694:	b004      	add	sp, #16
 800f696:	4770      	bx	lr
 800f698:	200001a0 	.word	0x200001a0

0800f69c <putchar>:
 800f69c:	4b09      	ldr	r3, [pc, #36]	; (800f6c4 <putchar+0x28>)
 800f69e:	b513      	push	{r0, r1, r4, lr}
 800f6a0:	681c      	ldr	r4, [r3, #0]
 800f6a2:	4601      	mov	r1, r0
 800f6a4:	b134      	cbz	r4, 800f6b4 <putchar+0x18>
 800f6a6:	69a3      	ldr	r3, [r4, #24]
 800f6a8:	b923      	cbnz	r3, 800f6b4 <putchar+0x18>
 800f6aa:	9001      	str	r0, [sp, #4]
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f7ff f9b7 	bl	800ea20 <__sinit>
 800f6b2:	9901      	ldr	r1, [sp, #4]
 800f6b4:	68a2      	ldr	r2, [r4, #8]
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	b002      	add	sp, #8
 800f6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6be:	f001 bf29 	b.w	8011514 <_putc_r>
 800f6c2:	bf00      	nop
 800f6c4:	200001a0 	.word	0x200001a0

0800f6c8 <_puts_r>:
 800f6c8:	b570      	push	{r4, r5, r6, lr}
 800f6ca:	460e      	mov	r6, r1
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	b118      	cbz	r0, 800f6d8 <_puts_r+0x10>
 800f6d0:	6983      	ldr	r3, [r0, #24]
 800f6d2:	b90b      	cbnz	r3, 800f6d8 <_puts_r+0x10>
 800f6d4:	f7ff f9a4 	bl	800ea20 <__sinit>
 800f6d8:	69ab      	ldr	r3, [r5, #24]
 800f6da:	68ac      	ldr	r4, [r5, #8]
 800f6dc:	b913      	cbnz	r3, 800f6e4 <_puts_r+0x1c>
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f7ff f99e 	bl	800ea20 <__sinit>
 800f6e4:	4b2c      	ldr	r3, [pc, #176]	; (800f798 <_puts_r+0xd0>)
 800f6e6:	429c      	cmp	r4, r3
 800f6e8:	d120      	bne.n	800f72c <_puts_r+0x64>
 800f6ea:	686c      	ldr	r4, [r5, #4]
 800f6ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6ee:	07db      	lsls	r3, r3, #31
 800f6f0:	d405      	bmi.n	800f6fe <_puts_r+0x36>
 800f6f2:	89a3      	ldrh	r3, [r4, #12]
 800f6f4:	0598      	lsls	r0, r3, #22
 800f6f6:	d402      	bmi.n	800f6fe <_puts_r+0x36>
 800f6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6fa:	f7ff fa54 	bl	800eba6 <__retarget_lock_acquire_recursive>
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	0719      	lsls	r1, r3, #28
 800f702:	d51d      	bpl.n	800f740 <_puts_r+0x78>
 800f704:	6923      	ldr	r3, [r4, #16]
 800f706:	b1db      	cbz	r3, 800f740 <_puts_r+0x78>
 800f708:	3e01      	subs	r6, #1
 800f70a:	68a3      	ldr	r3, [r4, #8]
 800f70c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f710:	3b01      	subs	r3, #1
 800f712:	60a3      	str	r3, [r4, #8]
 800f714:	bb39      	cbnz	r1, 800f766 <_puts_r+0x9e>
 800f716:	2b00      	cmp	r3, #0
 800f718:	da38      	bge.n	800f78c <_puts_r+0xc4>
 800f71a:	4622      	mov	r2, r4
 800f71c:	210a      	movs	r1, #10
 800f71e:	4628      	mov	r0, r5
 800f720:	f000 f8bc 	bl	800f89c <__swbuf_r>
 800f724:	3001      	adds	r0, #1
 800f726:	d011      	beq.n	800f74c <_puts_r+0x84>
 800f728:	250a      	movs	r5, #10
 800f72a:	e011      	b.n	800f750 <_puts_r+0x88>
 800f72c:	4b1b      	ldr	r3, [pc, #108]	; (800f79c <_puts_r+0xd4>)
 800f72e:	429c      	cmp	r4, r3
 800f730:	d101      	bne.n	800f736 <_puts_r+0x6e>
 800f732:	68ac      	ldr	r4, [r5, #8]
 800f734:	e7da      	b.n	800f6ec <_puts_r+0x24>
 800f736:	4b1a      	ldr	r3, [pc, #104]	; (800f7a0 <_puts_r+0xd8>)
 800f738:	429c      	cmp	r4, r3
 800f73a:	bf08      	it	eq
 800f73c:	68ec      	ldreq	r4, [r5, #12]
 800f73e:	e7d5      	b.n	800f6ec <_puts_r+0x24>
 800f740:	4621      	mov	r1, r4
 800f742:	4628      	mov	r0, r5
 800f744:	f000 f90e 	bl	800f964 <__swsetup_r>
 800f748:	2800      	cmp	r0, #0
 800f74a:	d0dd      	beq.n	800f708 <_puts_r+0x40>
 800f74c:	f04f 35ff 	mov.w	r5, #4294967295
 800f750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f752:	07da      	lsls	r2, r3, #31
 800f754:	d405      	bmi.n	800f762 <_puts_r+0x9a>
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	059b      	lsls	r3, r3, #22
 800f75a:	d402      	bmi.n	800f762 <_puts_r+0x9a>
 800f75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f75e:	f7ff fa23 	bl	800eba8 <__retarget_lock_release_recursive>
 800f762:	4628      	mov	r0, r5
 800f764:	bd70      	pop	{r4, r5, r6, pc}
 800f766:	2b00      	cmp	r3, #0
 800f768:	da04      	bge.n	800f774 <_puts_r+0xac>
 800f76a:	69a2      	ldr	r2, [r4, #24]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	dc06      	bgt.n	800f77e <_puts_r+0xb6>
 800f770:	290a      	cmp	r1, #10
 800f772:	d004      	beq.n	800f77e <_puts_r+0xb6>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	6022      	str	r2, [r4, #0]
 800f77a:	7019      	strb	r1, [r3, #0]
 800f77c:	e7c5      	b.n	800f70a <_puts_r+0x42>
 800f77e:	4622      	mov	r2, r4
 800f780:	4628      	mov	r0, r5
 800f782:	f000 f88b 	bl	800f89c <__swbuf_r>
 800f786:	3001      	adds	r0, #1
 800f788:	d1bf      	bne.n	800f70a <_puts_r+0x42>
 800f78a:	e7df      	b.n	800f74c <_puts_r+0x84>
 800f78c:	6823      	ldr	r3, [r4, #0]
 800f78e:	250a      	movs	r5, #10
 800f790:	1c5a      	adds	r2, r3, #1
 800f792:	6022      	str	r2, [r4, #0]
 800f794:	701d      	strb	r5, [r3, #0]
 800f796:	e7db      	b.n	800f750 <_puts_r+0x88>
 800f798:	08011a5c 	.word	0x08011a5c
 800f79c:	08011a7c 	.word	0x08011a7c
 800f7a0:	08011a3c 	.word	0x08011a3c

0800f7a4 <puts>:
 800f7a4:	4b02      	ldr	r3, [pc, #8]	; (800f7b0 <puts+0xc>)
 800f7a6:	4601      	mov	r1, r0
 800f7a8:	6818      	ldr	r0, [r3, #0]
 800f7aa:	f7ff bf8d 	b.w	800f6c8 <_puts_r>
 800f7ae:	bf00      	nop
 800f7b0:	200001a0 	.word	0x200001a0

0800f7b4 <_sbrk_r>:
 800f7b4:	b538      	push	{r3, r4, r5, lr}
 800f7b6:	4d06      	ldr	r5, [pc, #24]	; (800f7d0 <_sbrk_r+0x1c>)
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	4608      	mov	r0, r1
 800f7be:	602b      	str	r3, [r5, #0]
 800f7c0:	f7f2 fea8 	bl	8002514 <_sbrk>
 800f7c4:	1c43      	adds	r3, r0, #1
 800f7c6:	d102      	bne.n	800f7ce <_sbrk_r+0x1a>
 800f7c8:	682b      	ldr	r3, [r5, #0]
 800f7ca:	b103      	cbz	r3, 800f7ce <_sbrk_r+0x1a>
 800f7cc:	6023      	str	r3, [r4, #0]
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}
 800f7d0:	20000a94 	.word	0x20000a94

0800f7d4 <siprintf>:
 800f7d4:	b40e      	push	{r1, r2, r3}
 800f7d6:	b500      	push	{lr}
 800f7d8:	b09c      	sub	sp, #112	; 0x70
 800f7da:	ab1d      	add	r3, sp, #116	; 0x74
 800f7dc:	9002      	str	r0, [sp, #8]
 800f7de:	9006      	str	r0, [sp, #24]
 800f7e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f7e4:	4809      	ldr	r0, [pc, #36]	; (800f80c <siprintf+0x38>)
 800f7e6:	9107      	str	r1, [sp, #28]
 800f7e8:	9104      	str	r1, [sp, #16]
 800f7ea:	4909      	ldr	r1, [pc, #36]	; (800f810 <siprintf+0x3c>)
 800f7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f0:	9105      	str	r1, [sp, #20]
 800f7f2:	6800      	ldr	r0, [r0, #0]
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	a902      	add	r1, sp, #8
 800f7f8:	f001 fc32 	bl	8011060 <_svfiprintf_r>
 800f7fc:	9b02      	ldr	r3, [sp, #8]
 800f7fe:	2200      	movs	r2, #0
 800f800:	701a      	strb	r2, [r3, #0]
 800f802:	b01c      	add	sp, #112	; 0x70
 800f804:	f85d eb04 	ldr.w	lr, [sp], #4
 800f808:	b003      	add	sp, #12
 800f80a:	4770      	bx	lr
 800f80c:	200001a0 	.word	0x200001a0
 800f810:	ffff0208 	.word	0xffff0208

0800f814 <__sread>:
 800f814:	b510      	push	{r4, lr}
 800f816:	460c      	mov	r4, r1
 800f818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81c:	f001 fec2 	bl	80115a4 <_read_r>
 800f820:	2800      	cmp	r0, #0
 800f822:	bfab      	itete	ge
 800f824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f826:	89a3      	ldrhlt	r3, [r4, #12]
 800f828:	181b      	addge	r3, r3, r0
 800f82a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f82e:	bfac      	ite	ge
 800f830:	6563      	strge	r3, [r4, #84]	; 0x54
 800f832:	81a3      	strhlt	r3, [r4, #12]
 800f834:	bd10      	pop	{r4, pc}

0800f836 <__swrite>:
 800f836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83a:	461f      	mov	r7, r3
 800f83c:	898b      	ldrh	r3, [r1, #12]
 800f83e:	05db      	lsls	r3, r3, #23
 800f840:	4605      	mov	r5, r0
 800f842:	460c      	mov	r4, r1
 800f844:	4616      	mov	r6, r2
 800f846:	d505      	bpl.n	800f854 <__swrite+0x1e>
 800f848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f84c:	2302      	movs	r3, #2
 800f84e:	2200      	movs	r2, #0
 800f850:	f000 ff84 	bl	801075c <_lseek_r>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f85e:	81a3      	strh	r3, [r4, #12]
 800f860:	4632      	mov	r2, r6
 800f862:	463b      	mov	r3, r7
 800f864:	4628      	mov	r0, r5
 800f866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f86a:	f000 b869 	b.w	800f940 <_write_r>

0800f86e <__sseek>:
 800f86e:	b510      	push	{r4, lr}
 800f870:	460c      	mov	r4, r1
 800f872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f876:	f000 ff71 	bl	801075c <_lseek_r>
 800f87a:	1c43      	adds	r3, r0, #1
 800f87c:	89a3      	ldrh	r3, [r4, #12]
 800f87e:	bf15      	itete	ne
 800f880:	6560      	strne	r0, [r4, #84]	; 0x54
 800f882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f88a:	81a3      	strheq	r3, [r4, #12]
 800f88c:	bf18      	it	ne
 800f88e:	81a3      	strhne	r3, [r4, #12]
 800f890:	bd10      	pop	{r4, pc}

0800f892 <__sclose>:
 800f892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f896:	f000 b8d3 	b.w	800fa40 <_close_r>
	...

0800f89c <__swbuf_r>:
 800f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89e:	460e      	mov	r6, r1
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	b118      	cbz	r0, 800f8ae <__swbuf_r+0x12>
 800f8a6:	6983      	ldr	r3, [r0, #24]
 800f8a8:	b90b      	cbnz	r3, 800f8ae <__swbuf_r+0x12>
 800f8aa:	f7ff f8b9 	bl	800ea20 <__sinit>
 800f8ae:	4b21      	ldr	r3, [pc, #132]	; (800f934 <__swbuf_r+0x98>)
 800f8b0:	429c      	cmp	r4, r3
 800f8b2:	d12b      	bne.n	800f90c <__swbuf_r+0x70>
 800f8b4:	686c      	ldr	r4, [r5, #4]
 800f8b6:	69a3      	ldr	r3, [r4, #24]
 800f8b8:	60a3      	str	r3, [r4, #8]
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	071a      	lsls	r2, r3, #28
 800f8be:	d52f      	bpl.n	800f920 <__swbuf_r+0x84>
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	b36b      	cbz	r3, 800f920 <__swbuf_r+0x84>
 800f8c4:	6923      	ldr	r3, [r4, #16]
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	1ac0      	subs	r0, r0, r3
 800f8ca:	6963      	ldr	r3, [r4, #20]
 800f8cc:	b2f6      	uxtb	r6, r6
 800f8ce:	4283      	cmp	r3, r0
 800f8d0:	4637      	mov	r7, r6
 800f8d2:	dc04      	bgt.n	800f8de <__swbuf_r+0x42>
 800f8d4:	4621      	mov	r1, r4
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	f7fe fffc 	bl	800e8d4 <_fflush_r>
 800f8dc:	bb30      	cbnz	r0, 800f92c <__swbuf_r+0x90>
 800f8de:	68a3      	ldr	r3, [r4, #8]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	60a3      	str	r3, [r4, #8]
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	1c5a      	adds	r2, r3, #1
 800f8e8:	6022      	str	r2, [r4, #0]
 800f8ea:	701e      	strb	r6, [r3, #0]
 800f8ec:	6963      	ldr	r3, [r4, #20]
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	4283      	cmp	r3, r0
 800f8f2:	d004      	beq.n	800f8fe <__swbuf_r+0x62>
 800f8f4:	89a3      	ldrh	r3, [r4, #12]
 800f8f6:	07db      	lsls	r3, r3, #31
 800f8f8:	d506      	bpl.n	800f908 <__swbuf_r+0x6c>
 800f8fa:	2e0a      	cmp	r6, #10
 800f8fc:	d104      	bne.n	800f908 <__swbuf_r+0x6c>
 800f8fe:	4621      	mov	r1, r4
 800f900:	4628      	mov	r0, r5
 800f902:	f7fe ffe7 	bl	800e8d4 <_fflush_r>
 800f906:	b988      	cbnz	r0, 800f92c <__swbuf_r+0x90>
 800f908:	4638      	mov	r0, r7
 800f90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f90c:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <__swbuf_r+0x9c>)
 800f90e:	429c      	cmp	r4, r3
 800f910:	d101      	bne.n	800f916 <__swbuf_r+0x7a>
 800f912:	68ac      	ldr	r4, [r5, #8]
 800f914:	e7cf      	b.n	800f8b6 <__swbuf_r+0x1a>
 800f916:	4b09      	ldr	r3, [pc, #36]	; (800f93c <__swbuf_r+0xa0>)
 800f918:	429c      	cmp	r4, r3
 800f91a:	bf08      	it	eq
 800f91c:	68ec      	ldreq	r4, [r5, #12]
 800f91e:	e7ca      	b.n	800f8b6 <__swbuf_r+0x1a>
 800f920:	4621      	mov	r1, r4
 800f922:	4628      	mov	r0, r5
 800f924:	f000 f81e 	bl	800f964 <__swsetup_r>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d0cb      	beq.n	800f8c4 <__swbuf_r+0x28>
 800f92c:	f04f 37ff 	mov.w	r7, #4294967295
 800f930:	e7ea      	b.n	800f908 <__swbuf_r+0x6c>
 800f932:	bf00      	nop
 800f934:	08011a5c 	.word	0x08011a5c
 800f938:	08011a7c 	.word	0x08011a7c
 800f93c:	08011a3c 	.word	0x08011a3c

0800f940 <_write_r>:
 800f940:	b538      	push	{r3, r4, r5, lr}
 800f942:	4d07      	ldr	r5, [pc, #28]	; (800f960 <_write_r+0x20>)
 800f944:	4604      	mov	r4, r0
 800f946:	4608      	mov	r0, r1
 800f948:	4611      	mov	r1, r2
 800f94a:	2200      	movs	r2, #0
 800f94c:	602a      	str	r2, [r5, #0]
 800f94e:	461a      	mov	r2, r3
 800f950:	f7f2 fd8f 	bl	8002472 <_write>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d102      	bne.n	800f95e <_write_r+0x1e>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	b103      	cbz	r3, 800f95e <_write_r+0x1e>
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	20000a94 	.word	0x20000a94

0800f964 <__swsetup_r>:
 800f964:	4b32      	ldr	r3, [pc, #200]	; (800fa30 <__swsetup_r+0xcc>)
 800f966:	b570      	push	{r4, r5, r6, lr}
 800f968:	681d      	ldr	r5, [r3, #0]
 800f96a:	4606      	mov	r6, r0
 800f96c:	460c      	mov	r4, r1
 800f96e:	b125      	cbz	r5, 800f97a <__swsetup_r+0x16>
 800f970:	69ab      	ldr	r3, [r5, #24]
 800f972:	b913      	cbnz	r3, 800f97a <__swsetup_r+0x16>
 800f974:	4628      	mov	r0, r5
 800f976:	f7ff f853 	bl	800ea20 <__sinit>
 800f97a:	4b2e      	ldr	r3, [pc, #184]	; (800fa34 <__swsetup_r+0xd0>)
 800f97c:	429c      	cmp	r4, r3
 800f97e:	d10f      	bne.n	800f9a0 <__swsetup_r+0x3c>
 800f980:	686c      	ldr	r4, [r5, #4]
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f988:	0719      	lsls	r1, r3, #28
 800f98a:	d42c      	bmi.n	800f9e6 <__swsetup_r+0x82>
 800f98c:	06dd      	lsls	r5, r3, #27
 800f98e:	d411      	bmi.n	800f9b4 <__swsetup_r+0x50>
 800f990:	2309      	movs	r3, #9
 800f992:	6033      	str	r3, [r6, #0]
 800f994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f998:	81a3      	strh	r3, [r4, #12]
 800f99a:	f04f 30ff 	mov.w	r0, #4294967295
 800f99e:	e03e      	b.n	800fa1e <__swsetup_r+0xba>
 800f9a0:	4b25      	ldr	r3, [pc, #148]	; (800fa38 <__swsetup_r+0xd4>)
 800f9a2:	429c      	cmp	r4, r3
 800f9a4:	d101      	bne.n	800f9aa <__swsetup_r+0x46>
 800f9a6:	68ac      	ldr	r4, [r5, #8]
 800f9a8:	e7eb      	b.n	800f982 <__swsetup_r+0x1e>
 800f9aa:	4b24      	ldr	r3, [pc, #144]	; (800fa3c <__swsetup_r+0xd8>)
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	bf08      	it	eq
 800f9b0:	68ec      	ldreq	r4, [r5, #12]
 800f9b2:	e7e6      	b.n	800f982 <__swsetup_r+0x1e>
 800f9b4:	0758      	lsls	r0, r3, #29
 800f9b6:	d512      	bpl.n	800f9de <__swsetup_r+0x7a>
 800f9b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9ba:	b141      	cbz	r1, 800f9ce <__swsetup_r+0x6a>
 800f9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	d002      	beq.n	800f9ca <__swsetup_r+0x66>
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	f7ff f907 	bl	800ebd8 <_free_r>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9d4:	81a3      	strh	r3, [r4, #12]
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	6063      	str	r3, [r4, #4]
 800f9da:	6923      	ldr	r3, [r4, #16]
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	f043 0308 	orr.w	r3, r3, #8
 800f9e4:	81a3      	strh	r3, [r4, #12]
 800f9e6:	6923      	ldr	r3, [r4, #16]
 800f9e8:	b94b      	cbnz	r3, 800f9fe <__swsetup_r+0x9a>
 800f9ea:	89a3      	ldrh	r3, [r4, #12]
 800f9ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9f4:	d003      	beq.n	800f9fe <__swsetup_r+0x9a>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f000 fee7 	bl	80107cc <__smakebuf_r>
 800f9fe:	89a0      	ldrh	r0, [r4, #12]
 800fa00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa04:	f010 0301 	ands.w	r3, r0, #1
 800fa08:	d00a      	beq.n	800fa20 <__swsetup_r+0xbc>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60a3      	str	r3, [r4, #8]
 800fa0e:	6963      	ldr	r3, [r4, #20]
 800fa10:	425b      	negs	r3, r3
 800fa12:	61a3      	str	r3, [r4, #24]
 800fa14:	6923      	ldr	r3, [r4, #16]
 800fa16:	b943      	cbnz	r3, 800fa2a <__swsetup_r+0xc6>
 800fa18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa1c:	d1ba      	bne.n	800f994 <__swsetup_r+0x30>
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	0781      	lsls	r1, r0, #30
 800fa22:	bf58      	it	pl
 800fa24:	6963      	ldrpl	r3, [r4, #20]
 800fa26:	60a3      	str	r3, [r4, #8]
 800fa28:	e7f4      	b.n	800fa14 <__swsetup_r+0xb0>
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	e7f7      	b.n	800fa1e <__swsetup_r+0xba>
 800fa2e:	bf00      	nop
 800fa30:	200001a0 	.word	0x200001a0
 800fa34:	08011a5c 	.word	0x08011a5c
 800fa38:	08011a7c 	.word	0x08011a7c
 800fa3c:	08011a3c 	.word	0x08011a3c

0800fa40 <_close_r>:
 800fa40:	b538      	push	{r3, r4, r5, lr}
 800fa42:	4d06      	ldr	r5, [pc, #24]	; (800fa5c <_close_r+0x1c>)
 800fa44:	2300      	movs	r3, #0
 800fa46:	4604      	mov	r4, r0
 800fa48:	4608      	mov	r0, r1
 800fa4a:	602b      	str	r3, [r5, #0]
 800fa4c:	f7f2 fd2d 	bl	80024aa <_close>
 800fa50:	1c43      	adds	r3, r0, #1
 800fa52:	d102      	bne.n	800fa5a <_close_r+0x1a>
 800fa54:	682b      	ldr	r3, [r5, #0]
 800fa56:	b103      	cbz	r3, 800fa5a <_close_r+0x1a>
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	bd38      	pop	{r3, r4, r5, pc}
 800fa5c:	20000a94 	.word	0x20000a94

0800fa60 <quorem>:
 800fa60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	6903      	ldr	r3, [r0, #16]
 800fa66:	690c      	ldr	r4, [r1, #16]
 800fa68:	42a3      	cmp	r3, r4
 800fa6a:	4607      	mov	r7, r0
 800fa6c:	f2c0 8081 	blt.w	800fb72 <quorem+0x112>
 800fa70:	3c01      	subs	r4, #1
 800fa72:	f101 0814 	add.w	r8, r1, #20
 800fa76:	f100 0514 	add.w	r5, r0, #20
 800fa7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa94:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa98:	d331      	bcc.n	800fafe <quorem+0x9e>
 800fa9a:	f04f 0e00 	mov.w	lr, #0
 800fa9e:	4640      	mov	r0, r8
 800faa0:	46ac      	mov	ip, r5
 800faa2:	46f2      	mov	sl, lr
 800faa4:	f850 2b04 	ldr.w	r2, [r0], #4
 800faa8:	b293      	uxth	r3, r2
 800faaa:	fb06 e303 	mla	r3, r6, r3, lr
 800faae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	ebaa 0303 	sub.w	r3, sl, r3
 800fab8:	f8dc a000 	ldr.w	sl, [ip]
 800fabc:	0c12      	lsrs	r2, r2, #16
 800fabe:	fa13 f38a 	uxtah	r3, r3, sl
 800fac2:	fb06 e202 	mla	r2, r6, r2, lr
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	9b00      	ldr	r3, [sp, #0]
 800faca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800face:	b292      	uxth	r2, r2
 800fad0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fad8:	f8bd 3000 	ldrh.w	r3, [sp]
 800fadc:	4581      	cmp	r9, r0
 800fade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fae2:	f84c 3b04 	str.w	r3, [ip], #4
 800fae6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800faea:	d2db      	bcs.n	800faa4 <quorem+0x44>
 800faec:	f855 300b 	ldr.w	r3, [r5, fp]
 800faf0:	b92b      	cbnz	r3, 800fafe <quorem+0x9e>
 800faf2:	9b01      	ldr	r3, [sp, #4]
 800faf4:	3b04      	subs	r3, #4
 800faf6:	429d      	cmp	r5, r3
 800faf8:	461a      	mov	r2, r3
 800fafa:	d32e      	bcc.n	800fb5a <quorem+0xfa>
 800fafc:	613c      	str	r4, [r7, #16]
 800fafe:	4638      	mov	r0, r7
 800fb00:	f001 f93a 	bl	8010d78 <__mcmp>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	db24      	blt.n	800fb52 <quorem+0xf2>
 800fb08:	3601      	adds	r6, #1
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f04f 0c00 	mov.w	ip, #0
 800fb10:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb14:	f8d0 e000 	ldr.w	lr, [r0]
 800fb18:	b293      	uxth	r3, r2
 800fb1a:	ebac 0303 	sub.w	r3, ip, r3
 800fb1e:	0c12      	lsrs	r2, r2, #16
 800fb20:	fa13 f38e 	uxtah	r3, r3, lr
 800fb24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb32:	45c1      	cmp	r9, r8
 800fb34:	f840 3b04 	str.w	r3, [r0], #4
 800fb38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb3c:	d2e8      	bcs.n	800fb10 <quorem+0xb0>
 800fb3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb46:	b922      	cbnz	r2, 800fb52 <quorem+0xf2>
 800fb48:	3b04      	subs	r3, #4
 800fb4a:	429d      	cmp	r5, r3
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	d30a      	bcc.n	800fb66 <quorem+0x106>
 800fb50:	613c      	str	r4, [r7, #16]
 800fb52:	4630      	mov	r0, r6
 800fb54:	b003      	add	sp, #12
 800fb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb5a:	6812      	ldr	r2, [r2, #0]
 800fb5c:	3b04      	subs	r3, #4
 800fb5e:	2a00      	cmp	r2, #0
 800fb60:	d1cc      	bne.n	800fafc <quorem+0x9c>
 800fb62:	3c01      	subs	r4, #1
 800fb64:	e7c7      	b.n	800faf6 <quorem+0x96>
 800fb66:	6812      	ldr	r2, [r2, #0]
 800fb68:	3b04      	subs	r3, #4
 800fb6a:	2a00      	cmp	r2, #0
 800fb6c:	d1f0      	bne.n	800fb50 <quorem+0xf0>
 800fb6e:	3c01      	subs	r4, #1
 800fb70:	e7eb      	b.n	800fb4a <quorem+0xea>
 800fb72:	2000      	movs	r0, #0
 800fb74:	e7ee      	b.n	800fb54 <quorem+0xf4>
	...

0800fb78 <_dtoa_r>:
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	ed2d 8b04 	vpush	{d8-d9}
 800fb80:	ec57 6b10 	vmov	r6, r7, d0
 800fb84:	b093      	sub	sp, #76	; 0x4c
 800fb86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb8c:	9106      	str	r1, [sp, #24]
 800fb8e:	ee10 aa10 	vmov	sl, s0
 800fb92:	4604      	mov	r4, r0
 800fb94:	9209      	str	r2, [sp, #36]	; 0x24
 800fb96:	930c      	str	r3, [sp, #48]	; 0x30
 800fb98:	46bb      	mov	fp, r7
 800fb9a:	b975      	cbnz	r5, 800fbba <_dtoa_r+0x42>
 800fb9c:	2010      	movs	r0, #16
 800fb9e:	f000 fe55 	bl	801084c <malloc>
 800fba2:	4602      	mov	r2, r0
 800fba4:	6260      	str	r0, [r4, #36]	; 0x24
 800fba6:	b920      	cbnz	r0, 800fbb2 <_dtoa_r+0x3a>
 800fba8:	4ba7      	ldr	r3, [pc, #668]	; (800fe48 <_dtoa_r+0x2d0>)
 800fbaa:	21ea      	movs	r1, #234	; 0xea
 800fbac:	48a7      	ldr	r0, [pc, #668]	; (800fe4c <_dtoa_r+0x2d4>)
 800fbae:	f001 fd0b 	bl	80115c8 <__assert_func>
 800fbb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbb6:	6005      	str	r5, [r0, #0]
 800fbb8:	60c5      	str	r5, [r0, #12]
 800fbba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbbc:	6819      	ldr	r1, [r3, #0]
 800fbbe:	b151      	cbz	r1, 800fbd6 <_dtoa_r+0x5e>
 800fbc0:	685a      	ldr	r2, [r3, #4]
 800fbc2:	604a      	str	r2, [r1, #4]
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	4093      	lsls	r3, r2
 800fbc8:	608b      	str	r3, [r1, #8]
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 fe92 	bl	80108f4 <_Bfree>
 800fbd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]
 800fbd6:	1e3b      	subs	r3, r7, #0
 800fbd8:	bfaa      	itet	ge
 800fbda:	2300      	movge	r3, #0
 800fbdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fbe0:	f8c8 3000 	strge.w	r3, [r8]
 800fbe4:	4b9a      	ldr	r3, [pc, #616]	; (800fe50 <_dtoa_r+0x2d8>)
 800fbe6:	bfbc      	itt	lt
 800fbe8:	2201      	movlt	r2, #1
 800fbea:	f8c8 2000 	strlt.w	r2, [r8]
 800fbee:	ea33 030b 	bics.w	r3, r3, fp
 800fbf2:	d11b      	bne.n	800fc2c <_dtoa_r+0xb4>
 800fbf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc00:	4333      	orrs	r3, r6
 800fc02:	f000 8592 	beq.w	801072a <_dtoa_r+0xbb2>
 800fc06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc08:	b963      	cbnz	r3, 800fc24 <_dtoa_r+0xac>
 800fc0a:	4b92      	ldr	r3, [pc, #584]	; (800fe54 <_dtoa_r+0x2dc>)
 800fc0c:	e022      	b.n	800fc54 <_dtoa_r+0xdc>
 800fc0e:	4b92      	ldr	r3, [pc, #584]	; (800fe58 <_dtoa_r+0x2e0>)
 800fc10:	9301      	str	r3, [sp, #4]
 800fc12:	3308      	adds	r3, #8
 800fc14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	9801      	ldr	r0, [sp, #4]
 800fc1a:	b013      	add	sp, #76	; 0x4c
 800fc1c:	ecbd 8b04 	vpop	{d8-d9}
 800fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc24:	4b8b      	ldr	r3, [pc, #556]	; (800fe54 <_dtoa_r+0x2dc>)
 800fc26:	9301      	str	r3, [sp, #4]
 800fc28:	3303      	adds	r3, #3
 800fc2a:	e7f3      	b.n	800fc14 <_dtoa_r+0x9c>
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	2300      	movs	r3, #0
 800fc30:	4650      	mov	r0, sl
 800fc32:	4659      	mov	r1, fp
 800fc34:	f7f0 ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc38:	ec4b ab19 	vmov	d9, sl, fp
 800fc3c:	4680      	mov	r8, r0
 800fc3e:	b158      	cbz	r0, 800fc58 <_dtoa_r+0xe0>
 800fc40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc42:	2301      	movs	r3, #1
 800fc44:	6013      	str	r3, [r2, #0]
 800fc46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 856b 	beq.w	8010724 <_dtoa_r+0xbac>
 800fc4e:	4883      	ldr	r0, [pc, #524]	; (800fe5c <_dtoa_r+0x2e4>)
 800fc50:	6018      	str	r0, [r3, #0]
 800fc52:	1e43      	subs	r3, r0, #1
 800fc54:	9301      	str	r3, [sp, #4]
 800fc56:	e7df      	b.n	800fc18 <_dtoa_r+0xa0>
 800fc58:	ec4b ab10 	vmov	d0, sl, fp
 800fc5c:	aa10      	add	r2, sp, #64	; 0x40
 800fc5e:	a911      	add	r1, sp, #68	; 0x44
 800fc60:	4620      	mov	r0, r4
 800fc62:	f001 f92f 	bl	8010ec4 <__d2b>
 800fc66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fc6a:	ee08 0a10 	vmov	s16, r0
 800fc6e:	2d00      	cmp	r5, #0
 800fc70:	f000 8084 	beq.w	800fd7c <_dtoa_r+0x204>
 800fc74:	ee19 3a90 	vmov	r3, s19
 800fc78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fc80:	4656      	mov	r6, sl
 800fc82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fc86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fc8e:	4b74      	ldr	r3, [pc, #464]	; (800fe60 <_dtoa_r+0x2e8>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	4630      	mov	r0, r6
 800fc94:	4639      	mov	r1, r7
 800fc96:	f7f0 faff 	bl	8000298 <__aeabi_dsub>
 800fc9a:	a365      	add	r3, pc, #404	; (adr r3, 800fe30 <_dtoa_r+0x2b8>)
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	f7f0 fcb2 	bl	8000608 <__aeabi_dmul>
 800fca4:	a364      	add	r3, pc, #400	; (adr r3, 800fe38 <_dtoa_r+0x2c0>)
 800fca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcaa:	f7f0 faf7 	bl	800029c <__adddf3>
 800fcae:	4606      	mov	r6, r0
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	460f      	mov	r7, r1
 800fcb4:	f7f0 fc3e 	bl	8000534 <__aeabi_i2d>
 800fcb8:	a361      	add	r3, pc, #388	; (adr r3, 800fe40 <_dtoa_r+0x2c8>)
 800fcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbe:	f7f0 fca3 	bl	8000608 <__aeabi_dmul>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	4639      	mov	r1, r7
 800fcca:	f7f0 fae7 	bl	800029c <__adddf3>
 800fcce:	4606      	mov	r6, r0
 800fcd0:	460f      	mov	r7, r1
 800fcd2:	f7f0 ff49 	bl	8000b68 <__aeabi_d2iz>
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	9000      	str	r0, [sp, #0]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	4630      	mov	r0, r6
 800fcde:	4639      	mov	r1, r7
 800fce0:	f7f0 ff04 	bl	8000aec <__aeabi_dcmplt>
 800fce4:	b150      	cbz	r0, 800fcfc <_dtoa_r+0x184>
 800fce6:	9800      	ldr	r0, [sp, #0]
 800fce8:	f7f0 fc24 	bl	8000534 <__aeabi_i2d>
 800fcec:	4632      	mov	r2, r6
 800fcee:	463b      	mov	r3, r7
 800fcf0:	f7f0 fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcf4:	b910      	cbnz	r0, 800fcfc <_dtoa_r+0x184>
 800fcf6:	9b00      	ldr	r3, [sp, #0]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	9b00      	ldr	r3, [sp, #0]
 800fcfe:	2b16      	cmp	r3, #22
 800fd00:	d85a      	bhi.n	800fdb8 <_dtoa_r+0x240>
 800fd02:	9a00      	ldr	r2, [sp, #0]
 800fd04:	4b57      	ldr	r3, [pc, #348]	; (800fe64 <_dtoa_r+0x2ec>)
 800fd06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	ec51 0b19 	vmov	r0, r1, d9
 800fd12:	f7f0 feeb 	bl	8000aec <__aeabi_dcmplt>
 800fd16:	2800      	cmp	r0, #0
 800fd18:	d050      	beq.n	800fdbc <_dtoa_r+0x244>
 800fd1a:	9b00      	ldr	r3, [sp, #0]
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	2300      	movs	r3, #0
 800fd22:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd26:	1b5d      	subs	r5, r3, r5
 800fd28:	1e6b      	subs	r3, r5, #1
 800fd2a:	9305      	str	r3, [sp, #20]
 800fd2c:	bf45      	ittet	mi
 800fd2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd32:	9304      	strmi	r3, [sp, #16]
 800fd34:	2300      	movpl	r3, #0
 800fd36:	2300      	movmi	r3, #0
 800fd38:	bf4c      	ite	mi
 800fd3a:	9305      	strmi	r3, [sp, #20]
 800fd3c:	9304      	strpl	r3, [sp, #16]
 800fd3e:	9b00      	ldr	r3, [sp, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	db3d      	blt.n	800fdc0 <_dtoa_r+0x248>
 800fd44:	9b05      	ldr	r3, [sp, #20]
 800fd46:	9a00      	ldr	r2, [sp, #0]
 800fd48:	920a      	str	r2, [sp, #40]	; 0x28
 800fd4a:	4413      	add	r3, r2
 800fd4c:	9305      	str	r3, [sp, #20]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	9307      	str	r3, [sp, #28]
 800fd52:	9b06      	ldr	r3, [sp, #24]
 800fd54:	2b09      	cmp	r3, #9
 800fd56:	f200 8089 	bhi.w	800fe6c <_dtoa_r+0x2f4>
 800fd5a:	2b05      	cmp	r3, #5
 800fd5c:	bfc4      	itt	gt
 800fd5e:	3b04      	subgt	r3, #4
 800fd60:	9306      	strgt	r3, [sp, #24]
 800fd62:	9b06      	ldr	r3, [sp, #24]
 800fd64:	f1a3 0302 	sub.w	r3, r3, #2
 800fd68:	bfcc      	ite	gt
 800fd6a:	2500      	movgt	r5, #0
 800fd6c:	2501      	movle	r5, #1
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	f200 8087 	bhi.w	800fe82 <_dtoa_r+0x30a>
 800fd74:	e8df f003 	tbb	[pc, r3]
 800fd78:	59383a2d 	.word	0x59383a2d
 800fd7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd80:	441d      	add	r5, r3
 800fd82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd86:	2b20      	cmp	r3, #32
 800fd88:	bfc1      	itttt	gt
 800fd8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fd92:	fa0b f303 	lslgt.w	r3, fp, r3
 800fd96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fd9a:	bfda      	itte	le
 800fd9c:	f1c3 0320 	rsble	r3, r3, #32
 800fda0:	fa06 f003 	lslle.w	r0, r6, r3
 800fda4:	4318      	orrgt	r0, r3
 800fda6:	f7f0 fbb5 	bl	8000514 <__aeabi_ui2d>
 800fdaa:	2301      	movs	r3, #1
 800fdac:	4606      	mov	r6, r0
 800fdae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fdb2:	3d01      	subs	r5, #1
 800fdb4:	930e      	str	r3, [sp, #56]	; 0x38
 800fdb6:	e76a      	b.n	800fc8e <_dtoa_r+0x116>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e7b2      	b.n	800fd22 <_dtoa_r+0x1aa>
 800fdbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fdbe:	e7b1      	b.n	800fd24 <_dtoa_r+0x1ac>
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	9a00      	ldr	r2, [sp, #0]
 800fdc4:	1a9b      	subs	r3, r3, r2
 800fdc6:	9304      	str	r3, [sp, #16]
 800fdc8:	4253      	negs	r3, r2
 800fdca:	9307      	str	r3, [sp, #28]
 800fdcc:	2300      	movs	r3, #0
 800fdce:	930a      	str	r3, [sp, #40]	; 0x28
 800fdd0:	e7bf      	b.n	800fd52 <_dtoa_r+0x1da>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9308      	str	r3, [sp, #32]
 800fdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dc55      	bgt.n	800fe88 <_dtoa_r+0x310>
 800fddc:	2301      	movs	r3, #1
 800fdde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fde2:	461a      	mov	r2, r3
 800fde4:	9209      	str	r2, [sp, #36]	; 0x24
 800fde6:	e00c      	b.n	800fe02 <_dtoa_r+0x28a>
 800fde8:	2301      	movs	r3, #1
 800fdea:	e7f3      	b.n	800fdd4 <_dtoa_r+0x25c>
 800fdec:	2300      	movs	r3, #0
 800fdee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdf0:	9308      	str	r3, [sp, #32]
 800fdf2:	9b00      	ldr	r3, [sp, #0]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	9302      	str	r3, [sp, #8]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	9303      	str	r3, [sp, #12]
 800fdfe:	bfb8      	it	lt
 800fe00:	2301      	movlt	r3, #1
 800fe02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe04:	2200      	movs	r2, #0
 800fe06:	6042      	str	r2, [r0, #4]
 800fe08:	2204      	movs	r2, #4
 800fe0a:	f102 0614 	add.w	r6, r2, #20
 800fe0e:	429e      	cmp	r6, r3
 800fe10:	6841      	ldr	r1, [r0, #4]
 800fe12:	d93d      	bls.n	800fe90 <_dtoa_r+0x318>
 800fe14:	4620      	mov	r0, r4
 800fe16:	f000 fd2d 	bl	8010874 <_Balloc>
 800fe1a:	9001      	str	r0, [sp, #4]
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d13b      	bne.n	800fe98 <_dtoa_r+0x320>
 800fe20:	4b11      	ldr	r3, [pc, #68]	; (800fe68 <_dtoa_r+0x2f0>)
 800fe22:	4602      	mov	r2, r0
 800fe24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe28:	e6c0      	b.n	800fbac <_dtoa_r+0x34>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e7df      	b.n	800fdee <_dtoa_r+0x276>
 800fe2e:	bf00      	nop
 800fe30:	636f4361 	.word	0x636f4361
 800fe34:	3fd287a7 	.word	0x3fd287a7
 800fe38:	8b60c8b3 	.word	0x8b60c8b3
 800fe3c:	3fc68a28 	.word	0x3fc68a28
 800fe40:	509f79fb 	.word	0x509f79fb
 800fe44:	3fd34413 	.word	0x3fd34413
 800fe48:	08011ae1 	.word	0x08011ae1
 800fe4c:	08011af8 	.word	0x08011af8
 800fe50:	7ff00000 	.word	0x7ff00000
 800fe54:	08011add 	.word	0x08011add
 800fe58:	08011ad4 	.word	0x08011ad4
 800fe5c:	08011ab1 	.word	0x08011ab1
 800fe60:	3ff80000 	.word	0x3ff80000
 800fe64:	08011be8 	.word	0x08011be8
 800fe68:	08011b53 	.word	0x08011b53
 800fe6c:	2501      	movs	r5, #1
 800fe6e:	2300      	movs	r3, #0
 800fe70:	9306      	str	r3, [sp, #24]
 800fe72:	9508      	str	r5, [sp, #32]
 800fe74:	f04f 33ff 	mov.w	r3, #4294967295
 800fe78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	2312      	movs	r3, #18
 800fe80:	e7b0      	b.n	800fde4 <_dtoa_r+0x26c>
 800fe82:	2301      	movs	r3, #1
 800fe84:	9308      	str	r3, [sp, #32]
 800fe86:	e7f5      	b.n	800fe74 <_dtoa_r+0x2fc>
 800fe88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe8e:	e7b8      	b.n	800fe02 <_dtoa_r+0x28a>
 800fe90:	3101      	adds	r1, #1
 800fe92:	6041      	str	r1, [r0, #4]
 800fe94:	0052      	lsls	r2, r2, #1
 800fe96:	e7b8      	b.n	800fe0a <_dtoa_r+0x292>
 800fe98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe9a:	9a01      	ldr	r2, [sp, #4]
 800fe9c:	601a      	str	r2, [r3, #0]
 800fe9e:	9b03      	ldr	r3, [sp, #12]
 800fea0:	2b0e      	cmp	r3, #14
 800fea2:	f200 809d 	bhi.w	800ffe0 <_dtoa_r+0x468>
 800fea6:	2d00      	cmp	r5, #0
 800fea8:	f000 809a 	beq.w	800ffe0 <_dtoa_r+0x468>
 800feac:	9b00      	ldr	r3, [sp, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	dd32      	ble.n	800ff18 <_dtoa_r+0x3a0>
 800feb2:	4ab7      	ldr	r2, [pc, #732]	; (8010190 <_dtoa_r+0x618>)
 800feb4:	f003 030f 	and.w	r3, r3, #15
 800feb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800febc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fec0:	9b00      	ldr	r3, [sp, #0]
 800fec2:	05d8      	lsls	r0, r3, #23
 800fec4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fec8:	d516      	bpl.n	800fef8 <_dtoa_r+0x380>
 800feca:	4bb2      	ldr	r3, [pc, #712]	; (8010194 <_dtoa_r+0x61c>)
 800fecc:	ec51 0b19 	vmov	r0, r1, d9
 800fed0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fed4:	f7f0 fcc2 	bl	800085c <__aeabi_ddiv>
 800fed8:	f007 070f 	and.w	r7, r7, #15
 800fedc:	4682      	mov	sl, r0
 800fede:	468b      	mov	fp, r1
 800fee0:	2503      	movs	r5, #3
 800fee2:	4eac      	ldr	r6, [pc, #688]	; (8010194 <_dtoa_r+0x61c>)
 800fee4:	b957      	cbnz	r7, 800fefc <_dtoa_r+0x384>
 800fee6:	4642      	mov	r2, r8
 800fee8:	464b      	mov	r3, r9
 800feea:	4650      	mov	r0, sl
 800feec:	4659      	mov	r1, fp
 800feee:	f7f0 fcb5 	bl	800085c <__aeabi_ddiv>
 800fef2:	4682      	mov	sl, r0
 800fef4:	468b      	mov	fp, r1
 800fef6:	e028      	b.n	800ff4a <_dtoa_r+0x3d2>
 800fef8:	2502      	movs	r5, #2
 800fefa:	e7f2      	b.n	800fee2 <_dtoa_r+0x36a>
 800fefc:	07f9      	lsls	r1, r7, #31
 800fefe:	d508      	bpl.n	800ff12 <_dtoa_r+0x39a>
 800ff00:	4640      	mov	r0, r8
 800ff02:	4649      	mov	r1, r9
 800ff04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff08:	f7f0 fb7e 	bl	8000608 <__aeabi_dmul>
 800ff0c:	3501      	adds	r5, #1
 800ff0e:	4680      	mov	r8, r0
 800ff10:	4689      	mov	r9, r1
 800ff12:	107f      	asrs	r7, r7, #1
 800ff14:	3608      	adds	r6, #8
 800ff16:	e7e5      	b.n	800fee4 <_dtoa_r+0x36c>
 800ff18:	f000 809b 	beq.w	8010052 <_dtoa_r+0x4da>
 800ff1c:	9b00      	ldr	r3, [sp, #0]
 800ff1e:	4f9d      	ldr	r7, [pc, #628]	; (8010194 <_dtoa_r+0x61c>)
 800ff20:	425e      	negs	r6, r3
 800ff22:	4b9b      	ldr	r3, [pc, #620]	; (8010190 <_dtoa_r+0x618>)
 800ff24:	f006 020f 	and.w	r2, r6, #15
 800ff28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	ec51 0b19 	vmov	r0, r1, d9
 800ff34:	f7f0 fb68 	bl	8000608 <__aeabi_dmul>
 800ff38:	1136      	asrs	r6, r6, #4
 800ff3a:	4682      	mov	sl, r0
 800ff3c:	468b      	mov	fp, r1
 800ff3e:	2300      	movs	r3, #0
 800ff40:	2502      	movs	r5, #2
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	d17a      	bne.n	801003c <_dtoa_r+0x4c4>
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1d3      	bne.n	800fef2 <_dtoa_r+0x37a>
 800ff4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 8082 	beq.w	8010056 <_dtoa_r+0x4de>
 800ff52:	4b91      	ldr	r3, [pc, #580]	; (8010198 <_dtoa_r+0x620>)
 800ff54:	2200      	movs	r2, #0
 800ff56:	4650      	mov	r0, sl
 800ff58:	4659      	mov	r1, fp
 800ff5a:	f7f0 fdc7 	bl	8000aec <__aeabi_dcmplt>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d079      	beq.n	8010056 <_dtoa_r+0x4de>
 800ff62:	9b03      	ldr	r3, [sp, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d076      	beq.n	8010056 <_dtoa_r+0x4de>
 800ff68:	9b02      	ldr	r3, [sp, #8]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	dd36      	ble.n	800ffdc <_dtoa_r+0x464>
 800ff6e:	9b00      	ldr	r3, [sp, #0]
 800ff70:	4650      	mov	r0, sl
 800ff72:	4659      	mov	r1, fp
 800ff74:	1e5f      	subs	r7, r3, #1
 800ff76:	2200      	movs	r2, #0
 800ff78:	4b88      	ldr	r3, [pc, #544]	; (801019c <_dtoa_r+0x624>)
 800ff7a:	f7f0 fb45 	bl	8000608 <__aeabi_dmul>
 800ff7e:	9e02      	ldr	r6, [sp, #8]
 800ff80:	4682      	mov	sl, r0
 800ff82:	468b      	mov	fp, r1
 800ff84:	3501      	adds	r5, #1
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7f0 fad4 	bl	8000534 <__aeabi_i2d>
 800ff8c:	4652      	mov	r2, sl
 800ff8e:	465b      	mov	r3, fp
 800ff90:	f7f0 fb3a 	bl	8000608 <__aeabi_dmul>
 800ff94:	4b82      	ldr	r3, [pc, #520]	; (80101a0 <_dtoa_r+0x628>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	f7f0 f980 	bl	800029c <__adddf3>
 800ff9c:	46d0      	mov	r8, sl
 800ff9e:	46d9      	mov	r9, fp
 800ffa0:	4682      	mov	sl, r0
 800ffa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d158      	bne.n	801005c <_dtoa_r+0x4e4>
 800ffaa:	4b7e      	ldr	r3, [pc, #504]	; (80101a4 <_dtoa_r+0x62c>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	4640      	mov	r0, r8
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	f7f0 f971 	bl	8000298 <__aeabi_dsub>
 800ffb6:	4652      	mov	r2, sl
 800ffb8:	465b      	mov	r3, fp
 800ffba:	4680      	mov	r8, r0
 800ffbc:	4689      	mov	r9, r1
 800ffbe:	f7f0 fdb3 	bl	8000b28 <__aeabi_dcmpgt>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	f040 8295 	bne.w	80104f2 <_dtoa_r+0x97a>
 800ffc8:	4652      	mov	r2, sl
 800ffca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ffce:	4640      	mov	r0, r8
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	f7f0 fd8b 	bl	8000aec <__aeabi_dcmplt>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	f040 8289 	bne.w	80104ee <_dtoa_r+0x976>
 800ffdc:	ec5b ab19 	vmov	sl, fp, d9
 800ffe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	f2c0 8148 	blt.w	8010278 <_dtoa_r+0x700>
 800ffe8:	9a00      	ldr	r2, [sp, #0]
 800ffea:	2a0e      	cmp	r2, #14
 800ffec:	f300 8144 	bgt.w	8010278 <_dtoa_r+0x700>
 800fff0:	4b67      	ldr	r3, [pc, #412]	; (8010190 <_dtoa_r+0x618>)
 800fff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fff6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	f280 80d5 	bge.w	80101ac <_dtoa_r+0x634>
 8010002:	9b03      	ldr	r3, [sp, #12]
 8010004:	2b00      	cmp	r3, #0
 8010006:	f300 80d1 	bgt.w	80101ac <_dtoa_r+0x634>
 801000a:	f040 826f 	bne.w	80104ec <_dtoa_r+0x974>
 801000e:	4b65      	ldr	r3, [pc, #404]	; (80101a4 <_dtoa_r+0x62c>)
 8010010:	2200      	movs	r2, #0
 8010012:	4640      	mov	r0, r8
 8010014:	4649      	mov	r1, r9
 8010016:	f7f0 faf7 	bl	8000608 <__aeabi_dmul>
 801001a:	4652      	mov	r2, sl
 801001c:	465b      	mov	r3, fp
 801001e:	f7f0 fd79 	bl	8000b14 <__aeabi_dcmpge>
 8010022:	9e03      	ldr	r6, [sp, #12]
 8010024:	4637      	mov	r7, r6
 8010026:	2800      	cmp	r0, #0
 8010028:	f040 8245 	bne.w	80104b6 <_dtoa_r+0x93e>
 801002c:	9d01      	ldr	r5, [sp, #4]
 801002e:	2331      	movs	r3, #49	; 0x31
 8010030:	f805 3b01 	strb.w	r3, [r5], #1
 8010034:	9b00      	ldr	r3, [sp, #0]
 8010036:	3301      	adds	r3, #1
 8010038:	9300      	str	r3, [sp, #0]
 801003a:	e240      	b.n	80104be <_dtoa_r+0x946>
 801003c:	07f2      	lsls	r2, r6, #31
 801003e:	d505      	bpl.n	801004c <_dtoa_r+0x4d4>
 8010040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010044:	f7f0 fae0 	bl	8000608 <__aeabi_dmul>
 8010048:	3501      	adds	r5, #1
 801004a:	2301      	movs	r3, #1
 801004c:	1076      	asrs	r6, r6, #1
 801004e:	3708      	adds	r7, #8
 8010050:	e777      	b.n	800ff42 <_dtoa_r+0x3ca>
 8010052:	2502      	movs	r5, #2
 8010054:	e779      	b.n	800ff4a <_dtoa_r+0x3d2>
 8010056:	9f00      	ldr	r7, [sp, #0]
 8010058:	9e03      	ldr	r6, [sp, #12]
 801005a:	e794      	b.n	800ff86 <_dtoa_r+0x40e>
 801005c:	9901      	ldr	r1, [sp, #4]
 801005e:	4b4c      	ldr	r3, [pc, #304]	; (8010190 <_dtoa_r+0x618>)
 8010060:	4431      	add	r1, r6
 8010062:	910d      	str	r1, [sp, #52]	; 0x34
 8010064:	9908      	ldr	r1, [sp, #32]
 8010066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801006a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801006e:	2900      	cmp	r1, #0
 8010070:	d043      	beq.n	80100fa <_dtoa_r+0x582>
 8010072:	494d      	ldr	r1, [pc, #308]	; (80101a8 <_dtoa_r+0x630>)
 8010074:	2000      	movs	r0, #0
 8010076:	f7f0 fbf1 	bl	800085c <__aeabi_ddiv>
 801007a:	4652      	mov	r2, sl
 801007c:	465b      	mov	r3, fp
 801007e:	f7f0 f90b 	bl	8000298 <__aeabi_dsub>
 8010082:	9d01      	ldr	r5, [sp, #4]
 8010084:	4682      	mov	sl, r0
 8010086:	468b      	mov	fp, r1
 8010088:	4649      	mov	r1, r9
 801008a:	4640      	mov	r0, r8
 801008c:	f7f0 fd6c 	bl	8000b68 <__aeabi_d2iz>
 8010090:	4606      	mov	r6, r0
 8010092:	f7f0 fa4f 	bl	8000534 <__aeabi_i2d>
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	4640      	mov	r0, r8
 801009c:	4649      	mov	r1, r9
 801009e:	f7f0 f8fb 	bl	8000298 <__aeabi_dsub>
 80100a2:	3630      	adds	r6, #48	; 0x30
 80100a4:	f805 6b01 	strb.w	r6, [r5], #1
 80100a8:	4652      	mov	r2, sl
 80100aa:	465b      	mov	r3, fp
 80100ac:	4680      	mov	r8, r0
 80100ae:	4689      	mov	r9, r1
 80100b0:	f7f0 fd1c 	bl	8000aec <__aeabi_dcmplt>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d163      	bne.n	8010180 <_dtoa_r+0x608>
 80100b8:	4642      	mov	r2, r8
 80100ba:	464b      	mov	r3, r9
 80100bc:	4936      	ldr	r1, [pc, #216]	; (8010198 <_dtoa_r+0x620>)
 80100be:	2000      	movs	r0, #0
 80100c0:	f7f0 f8ea 	bl	8000298 <__aeabi_dsub>
 80100c4:	4652      	mov	r2, sl
 80100c6:	465b      	mov	r3, fp
 80100c8:	f7f0 fd10 	bl	8000aec <__aeabi_dcmplt>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	f040 80b5 	bne.w	801023c <_dtoa_r+0x6c4>
 80100d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100d4:	429d      	cmp	r5, r3
 80100d6:	d081      	beq.n	800ffdc <_dtoa_r+0x464>
 80100d8:	4b30      	ldr	r3, [pc, #192]	; (801019c <_dtoa_r+0x624>)
 80100da:	2200      	movs	r2, #0
 80100dc:	4650      	mov	r0, sl
 80100de:	4659      	mov	r1, fp
 80100e0:	f7f0 fa92 	bl	8000608 <__aeabi_dmul>
 80100e4:	4b2d      	ldr	r3, [pc, #180]	; (801019c <_dtoa_r+0x624>)
 80100e6:	4682      	mov	sl, r0
 80100e8:	468b      	mov	fp, r1
 80100ea:	4640      	mov	r0, r8
 80100ec:	4649      	mov	r1, r9
 80100ee:	2200      	movs	r2, #0
 80100f0:	f7f0 fa8a 	bl	8000608 <__aeabi_dmul>
 80100f4:	4680      	mov	r8, r0
 80100f6:	4689      	mov	r9, r1
 80100f8:	e7c6      	b.n	8010088 <_dtoa_r+0x510>
 80100fa:	4650      	mov	r0, sl
 80100fc:	4659      	mov	r1, fp
 80100fe:	f7f0 fa83 	bl	8000608 <__aeabi_dmul>
 8010102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010104:	9d01      	ldr	r5, [sp, #4]
 8010106:	930f      	str	r3, [sp, #60]	; 0x3c
 8010108:	4682      	mov	sl, r0
 801010a:	468b      	mov	fp, r1
 801010c:	4649      	mov	r1, r9
 801010e:	4640      	mov	r0, r8
 8010110:	f7f0 fd2a 	bl	8000b68 <__aeabi_d2iz>
 8010114:	4606      	mov	r6, r0
 8010116:	f7f0 fa0d 	bl	8000534 <__aeabi_i2d>
 801011a:	3630      	adds	r6, #48	; 0x30
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4640      	mov	r0, r8
 8010122:	4649      	mov	r1, r9
 8010124:	f7f0 f8b8 	bl	8000298 <__aeabi_dsub>
 8010128:	f805 6b01 	strb.w	r6, [r5], #1
 801012c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801012e:	429d      	cmp	r5, r3
 8010130:	4680      	mov	r8, r0
 8010132:	4689      	mov	r9, r1
 8010134:	f04f 0200 	mov.w	r2, #0
 8010138:	d124      	bne.n	8010184 <_dtoa_r+0x60c>
 801013a:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <_dtoa_r+0x630>)
 801013c:	4650      	mov	r0, sl
 801013e:	4659      	mov	r1, fp
 8010140:	f7f0 f8ac 	bl	800029c <__adddf3>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4640      	mov	r0, r8
 801014a:	4649      	mov	r1, r9
 801014c:	f7f0 fcec 	bl	8000b28 <__aeabi_dcmpgt>
 8010150:	2800      	cmp	r0, #0
 8010152:	d173      	bne.n	801023c <_dtoa_r+0x6c4>
 8010154:	4652      	mov	r2, sl
 8010156:	465b      	mov	r3, fp
 8010158:	4913      	ldr	r1, [pc, #76]	; (80101a8 <_dtoa_r+0x630>)
 801015a:	2000      	movs	r0, #0
 801015c:	f7f0 f89c 	bl	8000298 <__aeabi_dsub>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	4640      	mov	r0, r8
 8010166:	4649      	mov	r1, r9
 8010168:	f7f0 fcc0 	bl	8000aec <__aeabi_dcmplt>
 801016c:	2800      	cmp	r0, #0
 801016e:	f43f af35 	beq.w	800ffdc <_dtoa_r+0x464>
 8010172:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010174:	1e6b      	subs	r3, r5, #1
 8010176:	930f      	str	r3, [sp, #60]	; 0x3c
 8010178:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801017c:	2b30      	cmp	r3, #48	; 0x30
 801017e:	d0f8      	beq.n	8010172 <_dtoa_r+0x5fa>
 8010180:	9700      	str	r7, [sp, #0]
 8010182:	e049      	b.n	8010218 <_dtoa_r+0x6a0>
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <_dtoa_r+0x624>)
 8010186:	f7f0 fa3f 	bl	8000608 <__aeabi_dmul>
 801018a:	4680      	mov	r8, r0
 801018c:	4689      	mov	r9, r1
 801018e:	e7bd      	b.n	801010c <_dtoa_r+0x594>
 8010190:	08011be8 	.word	0x08011be8
 8010194:	08011bc0 	.word	0x08011bc0
 8010198:	3ff00000 	.word	0x3ff00000
 801019c:	40240000 	.word	0x40240000
 80101a0:	401c0000 	.word	0x401c0000
 80101a4:	40140000 	.word	0x40140000
 80101a8:	3fe00000 	.word	0x3fe00000
 80101ac:	9d01      	ldr	r5, [sp, #4]
 80101ae:	4656      	mov	r6, sl
 80101b0:	465f      	mov	r7, fp
 80101b2:	4642      	mov	r2, r8
 80101b4:	464b      	mov	r3, r9
 80101b6:	4630      	mov	r0, r6
 80101b8:	4639      	mov	r1, r7
 80101ba:	f7f0 fb4f 	bl	800085c <__aeabi_ddiv>
 80101be:	f7f0 fcd3 	bl	8000b68 <__aeabi_d2iz>
 80101c2:	4682      	mov	sl, r0
 80101c4:	f7f0 f9b6 	bl	8000534 <__aeabi_i2d>
 80101c8:	4642      	mov	r2, r8
 80101ca:	464b      	mov	r3, r9
 80101cc:	f7f0 fa1c 	bl	8000608 <__aeabi_dmul>
 80101d0:	4602      	mov	r2, r0
 80101d2:	460b      	mov	r3, r1
 80101d4:	4630      	mov	r0, r6
 80101d6:	4639      	mov	r1, r7
 80101d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80101dc:	f7f0 f85c 	bl	8000298 <__aeabi_dsub>
 80101e0:	f805 6b01 	strb.w	r6, [r5], #1
 80101e4:	9e01      	ldr	r6, [sp, #4]
 80101e6:	9f03      	ldr	r7, [sp, #12]
 80101e8:	1bae      	subs	r6, r5, r6
 80101ea:	42b7      	cmp	r7, r6
 80101ec:	4602      	mov	r2, r0
 80101ee:	460b      	mov	r3, r1
 80101f0:	d135      	bne.n	801025e <_dtoa_r+0x6e6>
 80101f2:	f7f0 f853 	bl	800029c <__adddf3>
 80101f6:	4642      	mov	r2, r8
 80101f8:	464b      	mov	r3, r9
 80101fa:	4606      	mov	r6, r0
 80101fc:	460f      	mov	r7, r1
 80101fe:	f7f0 fc93 	bl	8000b28 <__aeabi_dcmpgt>
 8010202:	b9d0      	cbnz	r0, 801023a <_dtoa_r+0x6c2>
 8010204:	4642      	mov	r2, r8
 8010206:	464b      	mov	r3, r9
 8010208:	4630      	mov	r0, r6
 801020a:	4639      	mov	r1, r7
 801020c:	f7f0 fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 8010210:	b110      	cbz	r0, 8010218 <_dtoa_r+0x6a0>
 8010212:	f01a 0f01 	tst.w	sl, #1
 8010216:	d110      	bne.n	801023a <_dtoa_r+0x6c2>
 8010218:	4620      	mov	r0, r4
 801021a:	ee18 1a10 	vmov	r1, s16
 801021e:	f000 fb69 	bl	80108f4 <_Bfree>
 8010222:	2300      	movs	r3, #0
 8010224:	9800      	ldr	r0, [sp, #0]
 8010226:	702b      	strb	r3, [r5, #0]
 8010228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801022a:	3001      	adds	r0, #1
 801022c:	6018      	str	r0, [r3, #0]
 801022e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010230:	2b00      	cmp	r3, #0
 8010232:	f43f acf1 	beq.w	800fc18 <_dtoa_r+0xa0>
 8010236:	601d      	str	r5, [r3, #0]
 8010238:	e4ee      	b.n	800fc18 <_dtoa_r+0xa0>
 801023a:	9f00      	ldr	r7, [sp, #0]
 801023c:	462b      	mov	r3, r5
 801023e:	461d      	mov	r5, r3
 8010240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010244:	2a39      	cmp	r2, #57	; 0x39
 8010246:	d106      	bne.n	8010256 <_dtoa_r+0x6de>
 8010248:	9a01      	ldr	r2, [sp, #4]
 801024a:	429a      	cmp	r2, r3
 801024c:	d1f7      	bne.n	801023e <_dtoa_r+0x6c6>
 801024e:	9901      	ldr	r1, [sp, #4]
 8010250:	2230      	movs	r2, #48	; 0x30
 8010252:	3701      	adds	r7, #1
 8010254:	700a      	strb	r2, [r1, #0]
 8010256:	781a      	ldrb	r2, [r3, #0]
 8010258:	3201      	adds	r2, #1
 801025a:	701a      	strb	r2, [r3, #0]
 801025c:	e790      	b.n	8010180 <_dtoa_r+0x608>
 801025e:	4ba6      	ldr	r3, [pc, #664]	; (80104f8 <_dtoa_r+0x980>)
 8010260:	2200      	movs	r2, #0
 8010262:	f7f0 f9d1 	bl	8000608 <__aeabi_dmul>
 8010266:	2200      	movs	r2, #0
 8010268:	2300      	movs	r3, #0
 801026a:	4606      	mov	r6, r0
 801026c:	460f      	mov	r7, r1
 801026e:	f7f0 fc33 	bl	8000ad8 <__aeabi_dcmpeq>
 8010272:	2800      	cmp	r0, #0
 8010274:	d09d      	beq.n	80101b2 <_dtoa_r+0x63a>
 8010276:	e7cf      	b.n	8010218 <_dtoa_r+0x6a0>
 8010278:	9a08      	ldr	r2, [sp, #32]
 801027a:	2a00      	cmp	r2, #0
 801027c:	f000 80d7 	beq.w	801042e <_dtoa_r+0x8b6>
 8010280:	9a06      	ldr	r2, [sp, #24]
 8010282:	2a01      	cmp	r2, #1
 8010284:	f300 80ba 	bgt.w	80103fc <_dtoa_r+0x884>
 8010288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801028a:	2a00      	cmp	r2, #0
 801028c:	f000 80b2 	beq.w	80103f4 <_dtoa_r+0x87c>
 8010290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010294:	9e07      	ldr	r6, [sp, #28]
 8010296:	9d04      	ldr	r5, [sp, #16]
 8010298:	9a04      	ldr	r2, [sp, #16]
 801029a:	441a      	add	r2, r3
 801029c:	9204      	str	r2, [sp, #16]
 801029e:	9a05      	ldr	r2, [sp, #20]
 80102a0:	2101      	movs	r1, #1
 80102a2:	441a      	add	r2, r3
 80102a4:	4620      	mov	r0, r4
 80102a6:	9205      	str	r2, [sp, #20]
 80102a8:	f000 fbdc 	bl	8010a64 <__i2b>
 80102ac:	4607      	mov	r7, r0
 80102ae:	2d00      	cmp	r5, #0
 80102b0:	dd0c      	ble.n	80102cc <_dtoa_r+0x754>
 80102b2:	9b05      	ldr	r3, [sp, #20]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	dd09      	ble.n	80102cc <_dtoa_r+0x754>
 80102b8:	42ab      	cmp	r3, r5
 80102ba:	9a04      	ldr	r2, [sp, #16]
 80102bc:	bfa8      	it	ge
 80102be:	462b      	movge	r3, r5
 80102c0:	1ad2      	subs	r2, r2, r3
 80102c2:	9204      	str	r2, [sp, #16]
 80102c4:	9a05      	ldr	r2, [sp, #20]
 80102c6:	1aed      	subs	r5, r5, r3
 80102c8:	1ad3      	subs	r3, r2, r3
 80102ca:	9305      	str	r3, [sp, #20]
 80102cc:	9b07      	ldr	r3, [sp, #28]
 80102ce:	b31b      	cbz	r3, 8010318 <_dtoa_r+0x7a0>
 80102d0:	9b08      	ldr	r3, [sp, #32]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	f000 80af 	beq.w	8010436 <_dtoa_r+0x8be>
 80102d8:	2e00      	cmp	r6, #0
 80102da:	dd13      	ble.n	8010304 <_dtoa_r+0x78c>
 80102dc:	4639      	mov	r1, r7
 80102de:	4632      	mov	r2, r6
 80102e0:	4620      	mov	r0, r4
 80102e2:	f000 fc7f 	bl	8010be4 <__pow5mult>
 80102e6:	ee18 2a10 	vmov	r2, s16
 80102ea:	4601      	mov	r1, r0
 80102ec:	4607      	mov	r7, r0
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 fbce 	bl	8010a90 <__multiply>
 80102f4:	ee18 1a10 	vmov	r1, s16
 80102f8:	4680      	mov	r8, r0
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 fafa 	bl	80108f4 <_Bfree>
 8010300:	ee08 8a10 	vmov	s16, r8
 8010304:	9b07      	ldr	r3, [sp, #28]
 8010306:	1b9a      	subs	r2, r3, r6
 8010308:	d006      	beq.n	8010318 <_dtoa_r+0x7a0>
 801030a:	ee18 1a10 	vmov	r1, s16
 801030e:	4620      	mov	r0, r4
 8010310:	f000 fc68 	bl	8010be4 <__pow5mult>
 8010314:	ee08 0a10 	vmov	s16, r0
 8010318:	2101      	movs	r1, #1
 801031a:	4620      	mov	r0, r4
 801031c:	f000 fba2 	bl	8010a64 <__i2b>
 8010320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010322:	2b00      	cmp	r3, #0
 8010324:	4606      	mov	r6, r0
 8010326:	f340 8088 	ble.w	801043a <_dtoa_r+0x8c2>
 801032a:	461a      	mov	r2, r3
 801032c:	4601      	mov	r1, r0
 801032e:	4620      	mov	r0, r4
 8010330:	f000 fc58 	bl	8010be4 <__pow5mult>
 8010334:	9b06      	ldr	r3, [sp, #24]
 8010336:	2b01      	cmp	r3, #1
 8010338:	4606      	mov	r6, r0
 801033a:	f340 8081 	ble.w	8010440 <_dtoa_r+0x8c8>
 801033e:	f04f 0800 	mov.w	r8, #0
 8010342:	6933      	ldr	r3, [r6, #16]
 8010344:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010348:	6918      	ldr	r0, [r3, #16]
 801034a:	f000 fb3b 	bl	80109c4 <__hi0bits>
 801034e:	f1c0 0020 	rsb	r0, r0, #32
 8010352:	9b05      	ldr	r3, [sp, #20]
 8010354:	4418      	add	r0, r3
 8010356:	f010 001f 	ands.w	r0, r0, #31
 801035a:	f000 8092 	beq.w	8010482 <_dtoa_r+0x90a>
 801035e:	f1c0 0320 	rsb	r3, r0, #32
 8010362:	2b04      	cmp	r3, #4
 8010364:	f340 808a 	ble.w	801047c <_dtoa_r+0x904>
 8010368:	f1c0 001c 	rsb	r0, r0, #28
 801036c:	9b04      	ldr	r3, [sp, #16]
 801036e:	4403      	add	r3, r0
 8010370:	9304      	str	r3, [sp, #16]
 8010372:	9b05      	ldr	r3, [sp, #20]
 8010374:	4403      	add	r3, r0
 8010376:	4405      	add	r5, r0
 8010378:	9305      	str	r3, [sp, #20]
 801037a:	9b04      	ldr	r3, [sp, #16]
 801037c:	2b00      	cmp	r3, #0
 801037e:	dd07      	ble.n	8010390 <_dtoa_r+0x818>
 8010380:	ee18 1a10 	vmov	r1, s16
 8010384:	461a      	mov	r2, r3
 8010386:	4620      	mov	r0, r4
 8010388:	f000 fc86 	bl	8010c98 <__lshift>
 801038c:	ee08 0a10 	vmov	s16, r0
 8010390:	9b05      	ldr	r3, [sp, #20]
 8010392:	2b00      	cmp	r3, #0
 8010394:	dd05      	ble.n	80103a2 <_dtoa_r+0x82a>
 8010396:	4631      	mov	r1, r6
 8010398:	461a      	mov	r2, r3
 801039a:	4620      	mov	r0, r4
 801039c:	f000 fc7c 	bl	8010c98 <__lshift>
 80103a0:	4606      	mov	r6, r0
 80103a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d06e      	beq.n	8010486 <_dtoa_r+0x90e>
 80103a8:	ee18 0a10 	vmov	r0, s16
 80103ac:	4631      	mov	r1, r6
 80103ae:	f000 fce3 	bl	8010d78 <__mcmp>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	da67      	bge.n	8010486 <_dtoa_r+0x90e>
 80103b6:	9b00      	ldr	r3, [sp, #0]
 80103b8:	3b01      	subs	r3, #1
 80103ba:	ee18 1a10 	vmov	r1, s16
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	220a      	movs	r2, #10
 80103c2:	2300      	movs	r3, #0
 80103c4:	4620      	mov	r0, r4
 80103c6:	f000 fab7 	bl	8010938 <__multadd>
 80103ca:	9b08      	ldr	r3, [sp, #32]
 80103cc:	ee08 0a10 	vmov	s16, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 81b1 	beq.w	8010738 <_dtoa_r+0xbc0>
 80103d6:	2300      	movs	r3, #0
 80103d8:	4639      	mov	r1, r7
 80103da:	220a      	movs	r2, #10
 80103dc:	4620      	mov	r0, r4
 80103de:	f000 faab 	bl	8010938 <__multadd>
 80103e2:	9b02      	ldr	r3, [sp, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	4607      	mov	r7, r0
 80103e8:	f300 808e 	bgt.w	8010508 <_dtoa_r+0x990>
 80103ec:	9b06      	ldr	r3, [sp, #24]
 80103ee:	2b02      	cmp	r3, #2
 80103f0:	dc51      	bgt.n	8010496 <_dtoa_r+0x91e>
 80103f2:	e089      	b.n	8010508 <_dtoa_r+0x990>
 80103f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103fa:	e74b      	b.n	8010294 <_dtoa_r+0x71c>
 80103fc:	9b03      	ldr	r3, [sp, #12]
 80103fe:	1e5e      	subs	r6, r3, #1
 8010400:	9b07      	ldr	r3, [sp, #28]
 8010402:	42b3      	cmp	r3, r6
 8010404:	bfbf      	itttt	lt
 8010406:	9b07      	ldrlt	r3, [sp, #28]
 8010408:	9607      	strlt	r6, [sp, #28]
 801040a:	1af2      	sublt	r2, r6, r3
 801040c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801040e:	bfb6      	itet	lt
 8010410:	189b      	addlt	r3, r3, r2
 8010412:	1b9e      	subge	r6, r3, r6
 8010414:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010416:	9b03      	ldr	r3, [sp, #12]
 8010418:	bfb8      	it	lt
 801041a:	2600      	movlt	r6, #0
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfb7      	itett	lt
 8010420:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010424:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010428:	1a9d      	sublt	r5, r3, r2
 801042a:	2300      	movlt	r3, #0
 801042c:	e734      	b.n	8010298 <_dtoa_r+0x720>
 801042e:	9e07      	ldr	r6, [sp, #28]
 8010430:	9d04      	ldr	r5, [sp, #16]
 8010432:	9f08      	ldr	r7, [sp, #32]
 8010434:	e73b      	b.n	80102ae <_dtoa_r+0x736>
 8010436:	9a07      	ldr	r2, [sp, #28]
 8010438:	e767      	b.n	801030a <_dtoa_r+0x792>
 801043a:	9b06      	ldr	r3, [sp, #24]
 801043c:	2b01      	cmp	r3, #1
 801043e:	dc18      	bgt.n	8010472 <_dtoa_r+0x8fa>
 8010440:	f1ba 0f00 	cmp.w	sl, #0
 8010444:	d115      	bne.n	8010472 <_dtoa_r+0x8fa>
 8010446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801044a:	b993      	cbnz	r3, 8010472 <_dtoa_r+0x8fa>
 801044c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010450:	0d1b      	lsrs	r3, r3, #20
 8010452:	051b      	lsls	r3, r3, #20
 8010454:	b183      	cbz	r3, 8010478 <_dtoa_r+0x900>
 8010456:	9b04      	ldr	r3, [sp, #16]
 8010458:	3301      	adds	r3, #1
 801045a:	9304      	str	r3, [sp, #16]
 801045c:	9b05      	ldr	r3, [sp, #20]
 801045e:	3301      	adds	r3, #1
 8010460:	9305      	str	r3, [sp, #20]
 8010462:	f04f 0801 	mov.w	r8, #1
 8010466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010468:	2b00      	cmp	r3, #0
 801046a:	f47f af6a 	bne.w	8010342 <_dtoa_r+0x7ca>
 801046e:	2001      	movs	r0, #1
 8010470:	e76f      	b.n	8010352 <_dtoa_r+0x7da>
 8010472:	f04f 0800 	mov.w	r8, #0
 8010476:	e7f6      	b.n	8010466 <_dtoa_r+0x8ee>
 8010478:	4698      	mov	r8, r3
 801047a:	e7f4      	b.n	8010466 <_dtoa_r+0x8ee>
 801047c:	f43f af7d 	beq.w	801037a <_dtoa_r+0x802>
 8010480:	4618      	mov	r0, r3
 8010482:	301c      	adds	r0, #28
 8010484:	e772      	b.n	801036c <_dtoa_r+0x7f4>
 8010486:	9b03      	ldr	r3, [sp, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	dc37      	bgt.n	80104fc <_dtoa_r+0x984>
 801048c:	9b06      	ldr	r3, [sp, #24]
 801048e:	2b02      	cmp	r3, #2
 8010490:	dd34      	ble.n	80104fc <_dtoa_r+0x984>
 8010492:	9b03      	ldr	r3, [sp, #12]
 8010494:	9302      	str	r3, [sp, #8]
 8010496:	9b02      	ldr	r3, [sp, #8]
 8010498:	b96b      	cbnz	r3, 80104b6 <_dtoa_r+0x93e>
 801049a:	4631      	mov	r1, r6
 801049c:	2205      	movs	r2, #5
 801049e:	4620      	mov	r0, r4
 80104a0:	f000 fa4a 	bl	8010938 <__multadd>
 80104a4:	4601      	mov	r1, r0
 80104a6:	4606      	mov	r6, r0
 80104a8:	ee18 0a10 	vmov	r0, s16
 80104ac:	f000 fc64 	bl	8010d78 <__mcmp>
 80104b0:	2800      	cmp	r0, #0
 80104b2:	f73f adbb 	bgt.w	801002c <_dtoa_r+0x4b4>
 80104b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b8:	9d01      	ldr	r5, [sp, #4]
 80104ba:	43db      	mvns	r3, r3
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	f04f 0800 	mov.w	r8, #0
 80104c2:	4631      	mov	r1, r6
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 fa15 	bl	80108f4 <_Bfree>
 80104ca:	2f00      	cmp	r7, #0
 80104cc:	f43f aea4 	beq.w	8010218 <_dtoa_r+0x6a0>
 80104d0:	f1b8 0f00 	cmp.w	r8, #0
 80104d4:	d005      	beq.n	80104e2 <_dtoa_r+0x96a>
 80104d6:	45b8      	cmp	r8, r7
 80104d8:	d003      	beq.n	80104e2 <_dtoa_r+0x96a>
 80104da:	4641      	mov	r1, r8
 80104dc:	4620      	mov	r0, r4
 80104de:	f000 fa09 	bl	80108f4 <_Bfree>
 80104e2:	4639      	mov	r1, r7
 80104e4:	4620      	mov	r0, r4
 80104e6:	f000 fa05 	bl	80108f4 <_Bfree>
 80104ea:	e695      	b.n	8010218 <_dtoa_r+0x6a0>
 80104ec:	2600      	movs	r6, #0
 80104ee:	4637      	mov	r7, r6
 80104f0:	e7e1      	b.n	80104b6 <_dtoa_r+0x93e>
 80104f2:	9700      	str	r7, [sp, #0]
 80104f4:	4637      	mov	r7, r6
 80104f6:	e599      	b.n	801002c <_dtoa_r+0x4b4>
 80104f8:	40240000 	.word	0x40240000
 80104fc:	9b08      	ldr	r3, [sp, #32]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f000 80ca 	beq.w	8010698 <_dtoa_r+0xb20>
 8010504:	9b03      	ldr	r3, [sp, #12]
 8010506:	9302      	str	r3, [sp, #8]
 8010508:	2d00      	cmp	r5, #0
 801050a:	dd05      	ble.n	8010518 <_dtoa_r+0x9a0>
 801050c:	4639      	mov	r1, r7
 801050e:	462a      	mov	r2, r5
 8010510:	4620      	mov	r0, r4
 8010512:	f000 fbc1 	bl	8010c98 <__lshift>
 8010516:	4607      	mov	r7, r0
 8010518:	f1b8 0f00 	cmp.w	r8, #0
 801051c:	d05b      	beq.n	80105d6 <_dtoa_r+0xa5e>
 801051e:	6879      	ldr	r1, [r7, #4]
 8010520:	4620      	mov	r0, r4
 8010522:	f000 f9a7 	bl	8010874 <_Balloc>
 8010526:	4605      	mov	r5, r0
 8010528:	b928      	cbnz	r0, 8010536 <_dtoa_r+0x9be>
 801052a:	4b87      	ldr	r3, [pc, #540]	; (8010748 <_dtoa_r+0xbd0>)
 801052c:	4602      	mov	r2, r0
 801052e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010532:	f7ff bb3b 	b.w	800fbac <_dtoa_r+0x34>
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	3202      	adds	r2, #2
 801053a:	0092      	lsls	r2, r2, #2
 801053c:	f107 010c 	add.w	r1, r7, #12
 8010540:	300c      	adds	r0, #12
 8010542:	f7fe fb32 	bl	800ebaa <memcpy>
 8010546:	2201      	movs	r2, #1
 8010548:	4629      	mov	r1, r5
 801054a:	4620      	mov	r0, r4
 801054c:	f000 fba4 	bl	8010c98 <__lshift>
 8010550:	9b01      	ldr	r3, [sp, #4]
 8010552:	f103 0901 	add.w	r9, r3, #1
 8010556:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801055a:	4413      	add	r3, r2
 801055c:	9305      	str	r3, [sp, #20]
 801055e:	f00a 0301 	and.w	r3, sl, #1
 8010562:	46b8      	mov	r8, r7
 8010564:	9304      	str	r3, [sp, #16]
 8010566:	4607      	mov	r7, r0
 8010568:	4631      	mov	r1, r6
 801056a:	ee18 0a10 	vmov	r0, s16
 801056e:	f7ff fa77 	bl	800fa60 <quorem>
 8010572:	4641      	mov	r1, r8
 8010574:	9002      	str	r0, [sp, #8]
 8010576:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801057a:	ee18 0a10 	vmov	r0, s16
 801057e:	f000 fbfb 	bl	8010d78 <__mcmp>
 8010582:	463a      	mov	r2, r7
 8010584:	9003      	str	r0, [sp, #12]
 8010586:	4631      	mov	r1, r6
 8010588:	4620      	mov	r0, r4
 801058a:	f000 fc11 	bl	8010db0 <__mdiff>
 801058e:	68c2      	ldr	r2, [r0, #12]
 8010590:	f109 3bff 	add.w	fp, r9, #4294967295
 8010594:	4605      	mov	r5, r0
 8010596:	bb02      	cbnz	r2, 80105da <_dtoa_r+0xa62>
 8010598:	4601      	mov	r1, r0
 801059a:	ee18 0a10 	vmov	r0, s16
 801059e:	f000 fbeb 	bl	8010d78 <__mcmp>
 80105a2:	4602      	mov	r2, r0
 80105a4:	4629      	mov	r1, r5
 80105a6:	4620      	mov	r0, r4
 80105a8:	9207      	str	r2, [sp, #28]
 80105aa:	f000 f9a3 	bl	80108f4 <_Bfree>
 80105ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80105b2:	ea43 0102 	orr.w	r1, r3, r2
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	430b      	orrs	r3, r1
 80105ba:	464d      	mov	r5, r9
 80105bc:	d10f      	bne.n	80105de <_dtoa_r+0xa66>
 80105be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105c2:	d02a      	beq.n	801061a <_dtoa_r+0xaa2>
 80105c4:	9b03      	ldr	r3, [sp, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	dd02      	ble.n	80105d0 <_dtoa_r+0xa58>
 80105ca:	9b02      	ldr	r3, [sp, #8]
 80105cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80105d0:	f88b a000 	strb.w	sl, [fp]
 80105d4:	e775      	b.n	80104c2 <_dtoa_r+0x94a>
 80105d6:	4638      	mov	r0, r7
 80105d8:	e7ba      	b.n	8010550 <_dtoa_r+0x9d8>
 80105da:	2201      	movs	r2, #1
 80105dc:	e7e2      	b.n	80105a4 <_dtoa_r+0xa2c>
 80105de:	9b03      	ldr	r3, [sp, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	db04      	blt.n	80105ee <_dtoa_r+0xa76>
 80105e4:	9906      	ldr	r1, [sp, #24]
 80105e6:	430b      	orrs	r3, r1
 80105e8:	9904      	ldr	r1, [sp, #16]
 80105ea:	430b      	orrs	r3, r1
 80105ec:	d122      	bne.n	8010634 <_dtoa_r+0xabc>
 80105ee:	2a00      	cmp	r2, #0
 80105f0:	ddee      	ble.n	80105d0 <_dtoa_r+0xa58>
 80105f2:	ee18 1a10 	vmov	r1, s16
 80105f6:	2201      	movs	r2, #1
 80105f8:	4620      	mov	r0, r4
 80105fa:	f000 fb4d 	bl	8010c98 <__lshift>
 80105fe:	4631      	mov	r1, r6
 8010600:	ee08 0a10 	vmov	s16, r0
 8010604:	f000 fbb8 	bl	8010d78 <__mcmp>
 8010608:	2800      	cmp	r0, #0
 801060a:	dc03      	bgt.n	8010614 <_dtoa_r+0xa9c>
 801060c:	d1e0      	bne.n	80105d0 <_dtoa_r+0xa58>
 801060e:	f01a 0f01 	tst.w	sl, #1
 8010612:	d0dd      	beq.n	80105d0 <_dtoa_r+0xa58>
 8010614:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010618:	d1d7      	bne.n	80105ca <_dtoa_r+0xa52>
 801061a:	2339      	movs	r3, #57	; 0x39
 801061c:	f88b 3000 	strb.w	r3, [fp]
 8010620:	462b      	mov	r3, r5
 8010622:	461d      	mov	r5, r3
 8010624:	3b01      	subs	r3, #1
 8010626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801062a:	2a39      	cmp	r2, #57	; 0x39
 801062c:	d071      	beq.n	8010712 <_dtoa_r+0xb9a>
 801062e:	3201      	adds	r2, #1
 8010630:	701a      	strb	r2, [r3, #0]
 8010632:	e746      	b.n	80104c2 <_dtoa_r+0x94a>
 8010634:	2a00      	cmp	r2, #0
 8010636:	dd07      	ble.n	8010648 <_dtoa_r+0xad0>
 8010638:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801063c:	d0ed      	beq.n	801061a <_dtoa_r+0xaa2>
 801063e:	f10a 0301 	add.w	r3, sl, #1
 8010642:	f88b 3000 	strb.w	r3, [fp]
 8010646:	e73c      	b.n	80104c2 <_dtoa_r+0x94a>
 8010648:	9b05      	ldr	r3, [sp, #20]
 801064a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801064e:	4599      	cmp	r9, r3
 8010650:	d047      	beq.n	80106e2 <_dtoa_r+0xb6a>
 8010652:	ee18 1a10 	vmov	r1, s16
 8010656:	2300      	movs	r3, #0
 8010658:	220a      	movs	r2, #10
 801065a:	4620      	mov	r0, r4
 801065c:	f000 f96c 	bl	8010938 <__multadd>
 8010660:	45b8      	cmp	r8, r7
 8010662:	ee08 0a10 	vmov	s16, r0
 8010666:	f04f 0300 	mov.w	r3, #0
 801066a:	f04f 020a 	mov.w	r2, #10
 801066e:	4641      	mov	r1, r8
 8010670:	4620      	mov	r0, r4
 8010672:	d106      	bne.n	8010682 <_dtoa_r+0xb0a>
 8010674:	f000 f960 	bl	8010938 <__multadd>
 8010678:	4680      	mov	r8, r0
 801067a:	4607      	mov	r7, r0
 801067c:	f109 0901 	add.w	r9, r9, #1
 8010680:	e772      	b.n	8010568 <_dtoa_r+0x9f0>
 8010682:	f000 f959 	bl	8010938 <__multadd>
 8010686:	4639      	mov	r1, r7
 8010688:	4680      	mov	r8, r0
 801068a:	2300      	movs	r3, #0
 801068c:	220a      	movs	r2, #10
 801068e:	4620      	mov	r0, r4
 8010690:	f000 f952 	bl	8010938 <__multadd>
 8010694:	4607      	mov	r7, r0
 8010696:	e7f1      	b.n	801067c <_dtoa_r+0xb04>
 8010698:	9b03      	ldr	r3, [sp, #12]
 801069a:	9302      	str	r3, [sp, #8]
 801069c:	9d01      	ldr	r5, [sp, #4]
 801069e:	ee18 0a10 	vmov	r0, s16
 80106a2:	4631      	mov	r1, r6
 80106a4:	f7ff f9dc 	bl	800fa60 <quorem>
 80106a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	f805 ab01 	strb.w	sl, [r5], #1
 80106b2:	1aea      	subs	r2, r5, r3
 80106b4:	9b02      	ldr	r3, [sp, #8]
 80106b6:	4293      	cmp	r3, r2
 80106b8:	dd09      	ble.n	80106ce <_dtoa_r+0xb56>
 80106ba:	ee18 1a10 	vmov	r1, s16
 80106be:	2300      	movs	r3, #0
 80106c0:	220a      	movs	r2, #10
 80106c2:	4620      	mov	r0, r4
 80106c4:	f000 f938 	bl	8010938 <__multadd>
 80106c8:	ee08 0a10 	vmov	s16, r0
 80106cc:	e7e7      	b.n	801069e <_dtoa_r+0xb26>
 80106ce:	9b02      	ldr	r3, [sp, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	bfc8      	it	gt
 80106d4:	461d      	movgt	r5, r3
 80106d6:	9b01      	ldr	r3, [sp, #4]
 80106d8:	bfd8      	it	le
 80106da:	2501      	movle	r5, #1
 80106dc:	441d      	add	r5, r3
 80106de:	f04f 0800 	mov.w	r8, #0
 80106e2:	ee18 1a10 	vmov	r1, s16
 80106e6:	2201      	movs	r2, #1
 80106e8:	4620      	mov	r0, r4
 80106ea:	f000 fad5 	bl	8010c98 <__lshift>
 80106ee:	4631      	mov	r1, r6
 80106f0:	ee08 0a10 	vmov	s16, r0
 80106f4:	f000 fb40 	bl	8010d78 <__mcmp>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	dc91      	bgt.n	8010620 <_dtoa_r+0xaa8>
 80106fc:	d102      	bne.n	8010704 <_dtoa_r+0xb8c>
 80106fe:	f01a 0f01 	tst.w	sl, #1
 8010702:	d18d      	bne.n	8010620 <_dtoa_r+0xaa8>
 8010704:	462b      	mov	r3, r5
 8010706:	461d      	mov	r5, r3
 8010708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801070c:	2a30      	cmp	r2, #48	; 0x30
 801070e:	d0fa      	beq.n	8010706 <_dtoa_r+0xb8e>
 8010710:	e6d7      	b.n	80104c2 <_dtoa_r+0x94a>
 8010712:	9a01      	ldr	r2, [sp, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d184      	bne.n	8010622 <_dtoa_r+0xaaa>
 8010718:	9b00      	ldr	r3, [sp, #0]
 801071a:	3301      	adds	r3, #1
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	2331      	movs	r3, #49	; 0x31
 8010720:	7013      	strb	r3, [r2, #0]
 8010722:	e6ce      	b.n	80104c2 <_dtoa_r+0x94a>
 8010724:	4b09      	ldr	r3, [pc, #36]	; (801074c <_dtoa_r+0xbd4>)
 8010726:	f7ff ba95 	b.w	800fc54 <_dtoa_r+0xdc>
 801072a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801072c:	2b00      	cmp	r3, #0
 801072e:	f47f aa6e 	bne.w	800fc0e <_dtoa_r+0x96>
 8010732:	4b07      	ldr	r3, [pc, #28]	; (8010750 <_dtoa_r+0xbd8>)
 8010734:	f7ff ba8e 	b.w	800fc54 <_dtoa_r+0xdc>
 8010738:	9b02      	ldr	r3, [sp, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	dcae      	bgt.n	801069c <_dtoa_r+0xb24>
 801073e:	9b06      	ldr	r3, [sp, #24]
 8010740:	2b02      	cmp	r3, #2
 8010742:	f73f aea8 	bgt.w	8010496 <_dtoa_r+0x91e>
 8010746:	e7a9      	b.n	801069c <_dtoa_r+0xb24>
 8010748:	08011b53 	.word	0x08011b53
 801074c:	08011ab0 	.word	0x08011ab0
 8010750:	08011ad4 	.word	0x08011ad4

08010754 <_localeconv_r>:
 8010754:	4800      	ldr	r0, [pc, #0]	; (8010758 <_localeconv_r+0x4>)
 8010756:	4770      	bx	lr
 8010758:	200002f4 	.word	0x200002f4

0801075c <_lseek_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4d07      	ldr	r5, [pc, #28]	; (801077c <_lseek_r+0x20>)
 8010760:	4604      	mov	r4, r0
 8010762:	4608      	mov	r0, r1
 8010764:	4611      	mov	r1, r2
 8010766:	2200      	movs	r2, #0
 8010768:	602a      	str	r2, [r5, #0]
 801076a:	461a      	mov	r2, r3
 801076c:	f7f1 fec4 	bl	80024f8 <_lseek>
 8010770:	1c43      	adds	r3, r0, #1
 8010772:	d102      	bne.n	801077a <_lseek_r+0x1e>
 8010774:	682b      	ldr	r3, [r5, #0]
 8010776:	b103      	cbz	r3, 801077a <_lseek_r+0x1e>
 8010778:	6023      	str	r3, [r4, #0]
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	20000a94 	.word	0x20000a94

08010780 <__swhatbuf_r>:
 8010780:	b570      	push	{r4, r5, r6, lr}
 8010782:	460e      	mov	r6, r1
 8010784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010788:	2900      	cmp	r1, #0
 801078a:	b096      	sub	sp, #88	; 0x58
 801078c:	4614      	mov	r4, r2
 801078e:	461d      	mov	r5, r3
 8010790:	da08      	bge.n	80107a4 <__swhatbuf_r+0x24>
 8010792:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	602a      	str	r2, [r5, #0]
 801079a:	061a      	lsls	r2, r3, #24
 801079c:	d410      	bmi.n	80107c0 <__swhatbuf_r+0x40>
 801079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107a2:	e00e      	b.n	80107c2 <__swhatbuf_r+0x42>
 80107a4:	466a      	mov	r2, sp
 80107a6:	f000 ff3f 	bl	8011628 <_fstat_r>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	dbf1      	blt.n	8010792 <__swhatbuf_r+0x12>
 80107ae:	9a01      	ldr	r2, [sp, #4]
 80107b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107b8:	425a      	negs	r2, r3
 80107ba:	415a      	adcs	r2, r3
 80107bc:	602a      	str	r2, [r5, #0]
 80107be:	e7ee      	b.n	801079e <__swhatbuf_r+0x1e>
 80107c0:	2340      	movs	r3, #64	; 0x40
 80107c2:	2000      	movs	r0, #0
 80107c4:	6023      	str	r3, [r4, #0]
 80107c6:	b016      	add	sp, #88	; 0x58
 80107c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080107cc <__smakebuf_r>:
 80107cc:	898b      	ldrh	r3, [r1, #12]
 80107ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107d0:	079d      	lsls	r5, r3, #30
 80107d2:	4606      	mov	r6, r0
 80107d4:	460c      	mov	r4, r1
 80107d6:	d507      	bpl.n	80107e8 <__smakebuf_r+0x1c>
 80107d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	6123      	str	r3, [r4, #16]
 80107e0:	2301      	movs	r3, #1
 80107e2:	6163      	str	r3, [r4, #20]
 80107e4:	b002      	add	sp, #8
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
 80107e8:	ab01      	add	r3, sp, #4
 80107ea:	466a      	mov	r2, sp
 80107ec:	f7ff ffc8 	bl	8010780 <__swhatbuf_r>
 80107f0:	9900      	ldr	r1, [sp, #0]
 80107f2:	4605      	mov	r5, r0
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7fe fa5b 	bl	800ecb0 <_malloc_r>
 80107fa:	b948      	cbnz	r0, 8010810 <__smakebuf_r+0x44>
 80107fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010800:	059a      	lsls	r2, r3, #22
 8010802:	d4ef      	bmi.n	80107e4 <__smakebuf_r+0x18>
 8010804:	f023 0303 	bic.w	r3, r3, #3
 8010808:	f043 0302 	orr.w	r3, r3, #2
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	e7e3      	b.n	80107d8 <__smakebuf_r+0xc>
 8010810:	4b0d      	ldr	r3, [pc, #52]	; (8010848 <__smakebuf_r+0x7c>)
 8010812:	62b3      	str	r3, [r6, #40]	; 0x28
 8010814:	89a3      	ldrh	r3, [r4, #12]
 8010816:	6020      	str	r0, [r4, #0]
 8010818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801081c:	81a3      	strh	r3, [r4, #12]
 801081e:	9b00      	ldr	r3, [sp, #0]
 8010820:	6163      	str	r3, [r4, #20]
 8010822:	9b01      	ldr	r3, [sp, #4]
 8010824:	6120      	str	r0, [r4, #16]
 8010826:	b15b      	cbz	r3, 8010840 <__smakebuf_r+0x74>
 8010828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801082c:	4630      	mov	r0, r6
 801082e:	f000 ff0d 	bl	801164c <_isatty_r>
 8010832:	b128      	cbz	r0, 8010840 <__smakebuf_r+0x74>
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	f023 0303 	bic.w	r3, r3, #3
 801083a:	f043 0301 	orr.w	r3, r3, #1
 801083e:	81a3      	strh	r3, [r4, #12]
 8010840:	89a0      	ldrh	r0, [r4, #12]
 8010842:	4305      	orrs	r5, r0
 8010844:	81a5      	strh	r5, [r4, #12]
 8010846:	e7cd      	b.n	80107e4 <__smakebuf_r+0x18>
 8010848:	0800e9b9 	.word	0x0800e9b9

0801084c <malloc>:
 801084c:	4b02      	ldr	r3, [pc, #8]	; (8010858 <malloc+0xc>)
 801084e:	4601      	mov	r1, r0
 8010850:	6818      	ldr	r0, [r3, #0]
 8010852:	f7fe ba2d 	b.w	800ecb0 <_malloc_r>
 8010856:	bf00      	nop
 8010858:	200001a0 	.word	0x200001a0

0801085c <__malloc_lock>:
 801085c:	4801      	ldr	r0, [pc, #4]	; (8010864 <__malloc_lock+0x8>)
 801085e:	f7fe b9a2 	b.w	800eba6 <__retarget_lock_acquire_recursive>
 8010862:	bf00      	nop
 8010864:	20000a88 	.word	0x20000a88

08010868 <__malloc_unlock>:
 8010868:	4801      	ldr	r0, [pc, #4]	; (8010870 <__malloc_unlock+0x8>)
 801086a:	f7fe b99d 	b.w	800eba8 <__retarget_lock_release_recursive>
 801086e:	bf00      	nop
 8010870:	20000a88 	.word	0x20000a88

08010874 <_Balloc>:
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010878:	4604      	mov	r4, r0
 801087a:	460d      	mov	r5, r1
 801087c:	b976      	cbnz	r6, 801089c <_Balloc+0x28>
 801087e:	2010      	movs	r0, #16
 8010880:	f7ff ffe4 	bl	801084c <malloc>
 8010884:	4602      	mov	r2, r0
 8010886:	6260      	str	r0, [r4, #36]	; 0x24
 8010888:	b920      	cbnz	r0, 8010894 <_Balloc+0x20>
 801088a:	4b18      	ldr	r3, [pc, #96]	; (80108ec <_Balloc+0x78>)
 801088c:	4818      	ldr	r0, [pc, #96]	; (80108f0 <_Balloc+0x7c>)
 801088e:	2166      	movs	r1, #102	; 0x66
 8010890:	f000 fe9a 	bl	80115c8 <__assert_func>
 8010894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010898:	6006      	str	r6, [r0, #0]
 801089a:	60c6      	str	r6, [r0, #12]
 801089c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801089e:	68f3      	ldr	r3, [r6, #12]
 80108a0:	b183      	cbz	r3, 80108c4 <_Balloc+0x50>
 80108a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108aa:	b9b8      	cbnz	r0, 80108dc <_Balloc+0x68>
 80108ac:	2101      	movs	r1, #1
 80108ae:	fa01 f605 	lsl.w	r6, r1, r5
 80108b2:	1d72      	adds	r2, r6, #5
 80108b4:	0092      	lsls	r2, r2, #2
 80108b6:	4620      	mov	r0, r4
 80108b8:	f000 fb60 	bl	8010f7c <_calloc_r>
 80108bc:	b160      	cbz	r0, 80108d8 <_Balloc+0x64>
 80108be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108c2:	e00e      	b.n	80108e2 <_Balloc+0x6e>
 80108c4:	2221      	movs	r2, #33	; 0x21
 80108c6:	2104      	movs	r1, #4
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 fb57 	bl	8010f7c <_calloc_r>
 80108ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108d0:	60f0      	str	r0, [r6, #12]
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1e4      	bne.n	80108a2 <_Balloc+0x2e>
 80108d8:	2000      	movs	r0, #0
 80108da:	bd70      	pop	{r4, r5, r6, pc}
 80108dc:	6802      	ldr	r2, [r0, #0]
 80108de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108e2:	2300      	movs	r3, #0
 80108e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108e8:	e7f7      	b.n	80108da <_Balloc+0x66>
 80108ea:	bf00      	nop
 80108ec:	08011ae1 	.word	0x08011ae1
 80108f0:	08011b64 	.word	0x08011b64

080108f4 <_Bfree>:
 80108f4:	b570      	push	{r4, r5, r6, lr}
 80108f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108f8:	4605      	mov	r5, r0
 80108fa:	460c      	mov	r4, r1
 80108fc:	b976      	cbnz	r6, 801091c <_Bfree+0x28>
 80108fe:	2010      	movs	r0, #16
 8010900:	f7ff ffa4 	bl	801084c <malloc>
 8010904:	4602      	mov	r2, r0
 8010906:	6268      	str	r0, [r5, #36]	; 0x24
 8010908:	b920      	cbnz	r0, 8010914 <_Bfree+0x20>
 801090a:	4b09      	ldr	r3, [pc, #36]	; (8010930 <_Bfree+0x3c>)
 801090c:	4809      	ldr	r0, [pc, #36]	; (8010934 <_Bfree+0x40>)
 801090e:	218a      	movs	r1, #138	; 0x8a
 8010910:	f000 fe5a 	bl	80115c8 <__assert_func>
 8010914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010918:	6006      	str	r6, [r0, #0]
 801091a:	60c6      	str	r6, [r0, #12]
 801091c:	b13c      	cbz	r4, 801092e <_Bfree+0x3a>
 801091e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010920:	6862      	ldr	r2, [r4, #4]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010928:	6021      	str	r1, [r4, #0]
 801092a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801092e:	bd70      	pop	{r4, r5, r6, pc}
 8010930:	08011ae1 	.word	0x08011ae1
 8010934:	08011b64 	.word	0x08011b64

08010938 <__multadd>:
 8010938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801093c:	690d      	ldr	r5, [r1, #16]
 801093e:	4607      	mov	r7, r0
 8010940:	460c      	mov	r4, r1
 8010942:	461e      	mov	r6, r3
 8010944:	f101 0c14 	add.w	ip, r1, #20
 8010948:	2000      	movs	r0, #0
 801094a:	f8dc 3000 	ldr.w	r3, [ip]
 801094e:	b299      	uxth	r1, r3
 8010950:	fb02 6101 	mla	r1, r2, r1, r6
 8010954:	0c1e      	lsrs	r6, r3, #16
 8010956:	0c0b      	lsrs	r3, r1, #16
 8010958:	fb02 3306 	mla	r3, r2, r6, r3
 801095c:	b289      	uxth	r1, r1
 801095e:	3001      	adds	r0, #1
 8010960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010964:	4285      	cmp	r5, r0
 8010966:	f84c 1b04 	str.w	r1, [ip], #4
 801096a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801096e:	dcec      	bgt.n	801094a <__multadd+0x12>
 8010970:	b30e      	cbz	r6, 80109b6 <__multadd+0x7e>
 8010972:	68a3      	ldr	r3, [r4, #8]
 8010974:	42ab      	cmp	r3, r5
 8010976:	dc19      	bgt.n	80109ac <__multadd+0x74>
 8010978:	6861      	ldr	r1, [r4, #4]
 801097a:	4638      	mov	r0, r7
 801097c:	3101      	adds	r1, #1
 801097e:	f7ff ff79 	bl	8010874 <_Balloc>
 8010982:	4680      	mov	r8, r0
 8010984:	b928      	cbnz	r0, 8010992 <__multadd+0x5a>
 8010986:	4602      	mov	r2, r0
 8010988:	4b0c      	ldr	r3, [pc, #48]	; (80109bc <__multadd+0x84>)
 801098a:	480d      	ldr	r0, [pc, #52]	; (80109c0 <__multadd+0x88>)
 801098c:	21b5      	movs	r1, #181	; 0xb5
 801098e:	f000 fe1b 	bl	80115c8 <__assert_func>
 8010992:	6922      	ldr	r2, [r4, #16]
 8010994:	3202      	adds	r2, #2
 8010996:	f104 010c 	add.w	r1, r4, #12
 801099a:	0092      	lsls	r2, r2, #2
 801099c:	300c      	adds	r0, #12
 801099e:	f7fe f904 	bl	800ebaa <memcpy>
 80109a2:	4621      	mov	r1, r4
 80109a4:	4638      	mov	r0, r7
 80109a6:	f7ff ffa5 	bl	80108f4 <_Bfree>
 80109aa:	4644      	mov	r4, r8
 80109ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109b0:	3501      	adds	r5, #1
 80109b2:	615e      	str	r6, [r3, #20]
 80109b4:	6125      	str	r5, [r4, #16]
 80109b6:	4620      	mov	r0, r4
 80109b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109bc:	08011b53 	.word	0x08011b53
 80109c0:	08011b64 	.word	0x08011b64

080109c4 <__hi0bits>:
 80109c4:	0c03      	lsrs	r3, r0, #16
 80109c6:	041b      	lsls	r3, r3, #16
 80109c8:	b9d3      	cbnz	r3, 8010a00 <__hi0bits+0x3c>
 80109ca:	0400      	lsls	r0, r0, #16
 80109cc:	2310      	movs	r3, #16
 80109ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109d2:	bf04      	itt	eq
 80109d4:	0200      	lsleq	r0, r0, #8
 80109d6:	3308      	addeq	r3, #8
 80109d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109dc:	bf04      	itt	eq
 80109de:	0100      	lsleq	r0, r0, #4
 80109e0:	3304      	addeq	r3, #4
 80109e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80109e6:	bf04      	itt	eq
 80109e8:	0080      	lsleq	r0, r0, #2
 80109ea:	3302      	addeq	r3, #2
 80109ec:	2800      	cmp	r0, #0
 80109ee:	db05      	blt.n	80109fc <__hi0bits+0x38>
 80109f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80109f4:	f103 0301 	add.w	r3, r3, #1
 80109f8:	bf08      	it	eq
 80109fa:	2320      	moveq	r3, #32
 80109fc:	4618      	mov	r0, r3
 80109fe:	4770      	bx	lr
 8010a00:	2300      	movs	r3, #0
 8010a02:	e7e4      	b.n	80109ce <__hi0bits+0xa>

08010a04 <__lo0bits>:
 8010a04:	6803      	ldr	r3, [r0, #0]
 8010a06:	f013 0207 	ands.w	r2, r3, #7
 8010a0a:	4601      	mov	r1, r0
 8010a0c:	d00b      	beq.n	8010a26 <__lo0bits+0x22>
 8010a0e:	07da      	lsls	r2, r3, #31
 8010a10:	d423      	bmi.n	8010a5a <__lo0bits+0x56>
 8010a12:	0798      	lsls	r0, r3, #30
 8010a14:	bf49      	itett	mi
 8010a16:	085b      	lsrmi	r3, r3, #1
 8010a18:	089b      	lsrpl	r3, r3, #2
 8010a1a:	2001      	movmi	r0, #1
 8010a1c:	600b      	strmi	r3, [r1, #0]
 8010a1e:	bf5c      	itt	pl
 8010a20:	600b      	strpl	r3, [r1, #0]
 8010a22:	2002      	movpl	r0, #2
 8010a24:	4770      	bx	lr
 8010a26:	b298      	uxth	r0, r3
 8010a28:	b9a8      	cbnz	r0, 8010a56 <__lo0bits+0x52>
 8010a2a:	0c1b      	lsrs	r3, r3, #16
 8010a2c:	2010      	movs	r0, #16
 8010a2e:	b2da      	uxtb	r2, r3
 8010a30:	b90a      	cbnz	r2, 8010a36 <__lo0bits+0x32>
 8010a32:	3008      	adds	r0, #8
 8010a34:	0a1b      	lsrs	r3, r3, #8
 8010a36:	071a      	lsls	r2, r3, #28
 8010a38:	bf04      	itt	eq
 8010a3a:	091b      	lsreq	r3, r3, #4
 8010a3c:	3004      	addeq	r0, #4
 8010a3e:	079a      	lsls	r2, r3, #30
 8010a40:	bf04      	itt	eq
 8010a42:	089b      	lsreq	r3, r3, #2
 8010a44:	3002      	addeq	r0, #2
 8010a46:	07da      	lsls	r2, r3, #31
 8010a48:	d403      	bmi.n	8010a52 <__lo0bits+0x4e>
 8010a4a:	085b      	lsrs	r3, r3, #1
 8010a4c:	f100 0001 	add.w	r0, r0, #1
 8010a50:	d005      	beq.n	8010a5e <__lo0bits+0x5a>
 8010a52:	600b      	str	r3, [r1, #0]
 8010a54:	4770      	bx	lr
 8010a56:	4610      	mov	r0, r2
 8010a58:	e7e9      	b.n	8010a2e <__lo0bits+0x2a>
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	4770      	bx	lr
 8010a5e:	2020      	movs	r0, #32
 8010a60:	4770      	bx	lr
	...

08010a64 <__i2b>:
 8010a64:	b510      	push	{r4, lr}
 8010a66:	460c      	mov	r4, r1
 8010a68:	2101      	movs	r1, #1
 8010a6a:	f7ff ff03 	bl	8010874 <_Balloc>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	b928      	cbnz	r0, 8010a7e <__i2b+0x1a>
 8010a72:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <__i2b+0x24>)
 8010a74:	4805      	ldr	r0, [pc, #20]	; (8010a8c <__i2b+0x28>)
 8010a76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a7a:	f000 fda5 	bl	80115c8 <__assert_func>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	6144      	str	r4, [r0, #20]
 8010a82:	6103      	str	r3, [r0, #16]
 8010a84:	bd10      	pop	{r4, pc}
 8010a86:	bf00      	nop
 8010a88:	08011b53 	.word	0x08011b53
 8010a8c:	08011b64 	.word	0x08011b64

08010a90 <__multiply>:
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	4691      	mov	r9, r2
 8010a96:	690a      	ldr	r2, [r1, #16]
 8010a98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	bfb8      	it	lt
 8010aa0:	460b      	movlt	r3, r1
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	bfbc      	itt	lt
 8010aa6:	464c      	movlt	r4, r9
 8010aa8:	4699      	movlt	r9, r3
 8010aaa:	6927      	ldr	r7, [r4, #16]
 8010aac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ab0:	68a3      	ldr	r3, [r4, #8]
 8010ab2:	6861      	ldr	r1, [r4, #4]
 8010ab4:	eb07 060a 	add.w	r6, r7, sl
 8010ab8:	42b3      	cmp	r3, r6
 8010aba:	b085      	sub	sp, #20
 8010abc:	bfb8      	it	lt
 8010abe:	3101      	addlt	r1, #1
 8010ac0:	f7ff fed8 	bl	8010874 <_Balloc>
 8010ac4:	b930      	cbnz	r0, 8010ad4 <__multiply+0x44>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	4b44      	ldr	r3, [pc, #272]	; (8010bdc <__multiply+0x14c>)
 8010aca:	4845      	ldr	r0, [pc, #276]	; (8010be0 <__multiply+0x150>)
 8010acc:	f240 115d 	movw	r1, #349	; 0x15d
 8010ad0:	f000 fd7a 	bl	80115c8 <__assert_func>
 8010ad4:	f100 0514 	add.w	r5, r0, #20
 8010ad8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010adc:	462b      	mov	r3, r5
 8010ade:	2200      	movs	r2, #0
 8010ae0:	4543      	cmp	r3, r8
 8010ae2:	d321      	bcc.n	8010b28 <__multiply+0x98>
 8010ae4:	f104 0314 	add.w	r3, r4, #20
 8010ae8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010aec:	f109 0314 	add.w	r3, r9, #20
 8010af0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010af4:	9202      	str	r2, [sp, #8]
 8010af6:	1b3a      	subs	r2, r7, r4
 8010af8:	3a15      	subs	r2, #21
 8010afa:	f022 0203 	bic.w	r2, r2, #3
 8010afe:	3204      	adds	r2, #4
 8010b00:	f104 0115 	add.w	r1, r4, #21
 8010b04:	428f      	cmp	r7, r1
 8010b06:	bf38      	it	cc
 8010b08:	2204      	movcc	r2, #4
 8010b0a:	9201      	str	r2, [sp, #4]
 8010b0c:	9a02      	ldr	r2, [sp, #8]
 8010b0e:	9303      	str	r3, [sp, #12]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d80c      	bhi.n	8010b2e <__multiply+0x9e>
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	dd03      	ble.n	8010b20 <__multiply+0x90>
 8010b18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d05a      	beq.n	8010bd6 <__multiply+0x146>
 8010b20:	6106      	str	r6, [r0, #16]
 8010b22:	b005      	add	sp, #20
 8010b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b28:	f843 2b04 	str.w	r2, [r3], #4
 8010b2c:	e7d8      	b.n	8010ae0 <__multiply+0x50>
 8010b2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b32:	f1ba 0f00 	cmp.w	sl, #0
 8010b36:	d024      	beq.n	8010b82 <__multiply+0xf2>
 8010b38:	f104 0e14 	add.w	lr, r4, #20
 8010b3c:	46a9      	mov	r9, r5
 8010b3e:	f04f 0c00 	mov.w	ip, #0
 8010b42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b46:	f8d9 1000 	ldr.w	r1, [r9]
 8010b4a:	fa1f fb82 	uxth.w	fp, r2
 8010b4e:	b289      	uxth	r1, r1
 8010b50:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b58:	f8d9 2000 	ldr.w	r2, [r9]
 8010b5c:	4461      	add	r1, ip
 8010b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b62:	fb0a c20b 	mla	r2, sl, fp, ip
 8010b66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b6a:	b289      	uxth	r1, r1
 8010b6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b70:	4577      	cmp	r7, lr
 8010b72:	f849 1b04 	str.w	r1, [r9], #4
 8010b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b7a:	d8e2      	bhi.n	8010b42 <__multiply+0xb2>
 8010b7c:	9a01      	ldr	r2, [sp, #4]
 8010b7e:	f845 c002 	str.w	ip, [r5, r2]
 8010b82:	9a03      	ldr	r2, [sp, #12]
 8010b84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b88:	3304      	adds	r3, #4
 8010b8a:	f1b9 0f00 	cmp.w	r9, #0
 8010b8e:	d020      	beq.n	8010bd2 <__multiply+0x142>
 8010b90:	6829      	ldr	r1, [r5, #0]
 8010b92:	f104 0c14 	add.w	ip, r4, #20
 8010b96:	46ae      	mov	lr, r5
 8010b98:	f04f 0a00 	mov.w	sl, #0
 8010b9c:	f8bc b000 	ldrh.w	fp, [ip]
 8010ba0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010ba4:	fb09 220b 	mla	r2, r9, fp, r2
 8010ba8:	4492      	add	sl, r2
 8010baa:	b289      	uxth	r1, r1
 8010bac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010bb0:	f84e 1b04 	str.w	r1, [lr], #4
 8010bb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010bb8:	f8be 1000 	ldrh.w	r1, [lr]
 8010bbc:	0c12      	lsrs	r2, r2, #16
 8010bbe:	fb09 1102 	mla	r1, r9, r2, r1
 8010bc2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010bc6:	4567      	cmp	r7, ip
 8010bc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bcc:	d8e6      	bhi.n	8010b9c <__multiply+0x10c>
 8010bce:	9a01      	ldr	r2, [sp, #4]
 8010bd0:	50a9      	str	r1, [r5, r2]
 8010bd2:	3504      	adds	r5, #4
 8010bd4:	e79a      	b.n	8010b0c <__multiply+0x7c>
 8010bd6:	3e01      	subs	r6, #1
 8010bd8:	e79c      	b.n	8010b14 <__multiply+0x84>
 8010bda:	bf00      	nop
 8010bdc:	08011b53 	.word	0x08011b53
 8010be0:	08011b64 	.word	0x08011b64

08010be4 <__pow5mult>:
 8010be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010be8:	4615      	mov	r5, r2
 8010bea:	f012 0203 	ands.w	r2, r2, #3
 8010bee:	4606      	mov	r6, r0
 8010bf0:	460f      	mov	r7, r1
 8010bf2:	d007      	beq.n	8010c04 <__pow5mult+0x20>
 8010bf4:	4c25      	ldr	r4, [pc, #148]	; (8010c8c <__pow5mult+0xa8>)
 8010bf6:	3a01      	subs	r2, #1
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010bfe:	f7ff fe9b 	bl	8010938 <__multadd>
 8010c02:	4607      	mov	r7, r0
 8010c04:	10ad      	asrs	r5, r5, #2
 8010c06:	d03d      	beq.n	8010c84 <__pow5mult+0xa0>
 8010c08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c0a:	b97c      	cbnz	r4, 8010c2c <__pow5mult+0x48>
 8010c0c:	2010      	movs	r0, #16
 8010c0e:	f7ff fe1d 	bl	801084c <malloc>
 8010c12:	4602      	mov	r2, r0
 8010c14:	6270      	str	r0, [r6, #36]	; 0x24
 8010c16:	b928      	cbnz	r0, 8010c24 <__pow5mult+0x40>
 8010c18:	4b1d      	ldr	r3, [pc, #116]	; (8010c90 <__pow5mult+0xac>)
 8010c1a:	481e      	ldr	r0, [pc, #120]	; (8010c94 <__pow5mult+0xb0>)
 8010c1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c20:	f000 fcd2 	bl	80115c8 <__assert_func>
 8010c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c28:	6004      	str	r4, [r0, #0]
 8010c2a:	60c4      	str	r4, [r0, #12]
 8010c2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c34:	b94c      	cbnz	r4, 8010c4a <__pow5mult+0x66>
 8010c36:	f240 2171 	movw	r1, #625	; 0x271
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f7ff ff12 	bl	8010a64 <__i2b>
 8010c40:	2300      	movs	r3, #0
 8010c42:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c46:	4604      	mov	r4, r0
 8010c48:	6003      	str	r3, [r0, #0]
 8010c4a:	f04f 0900 	mov.w	r9, #0
 8010c4e:	07eb      	lsls	r3, r5, #31
 8010c50:	d50a      	bpl.n	8010c68 <__pow5mult+0x84>
 8010c52:	4639      	mov	r1, r7
 8010c54:	4622      	mov	r2, r4
 8010c56:	4630      	mov	r0, r6
 8010c58:	f7ff ff1a 	bl	8010a90 <__multiply>
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	4680      	mov	r8, r0
 8010c60:	4630      	mov	r0, r6
 8010c62:	f7ff fe47 	bl	80108f4 <_Bfree>
 8010c66:	4647      	mov	r7, r8
 8010c68:	106d      	asrs	r5, r5, #1
 8010c6a:	d00b      	beq.n	8010c84 <__pow5mult+0xa0>
 8010c6c:	6820      	ldr	r0, [r4, #0]
 8010c6e:	b938      	cbnz	r0, 8010c80 <__pow5mult+0x9c>
 8010c70:	4622      	mov	r2, r4
 8010c72:	4621      	mov	r1, r4
 8010c74:	4630      	mov	r0, r6
 8010c76:	f7ff ff0b 	bl	8010a90 <__multiply>
 8010c7a:	6020      	str	r0, [r4, #0]
 8010c7c:	f8c0 9000 	str.w	r9, [r0]
 8010c80:	4604      	mov	r4, r0
 8010c82:	e7e4      	b.n	8010c4e <__pow5mult+0x6a>
 8010c84:	4638      	mov	r0, r7
 8010c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c8a:	bf00      	nop
 8010c8c:	08011cb0 	.word	0x08011cb0
 8010c90:	08011ae1 	.word	0x08011ae1
 8010c94:	08011b64 	.word	0x08011b64

08010c98 <__lshift>:
 8010c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c9c:	460c      	mov	r4, r1
 8010c9e:	6849      	ldr	r1, [r1, #4]
 8010ca0:	6923      	ldr	r3, [r4, #16]
 8010ca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ca6:	68a3      	ldr	r3, [r4, #8]
 8010ca8:	4607      	mov	r7, r0
 8010caa:	4691      	mov	r9, r2
 8010cac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cb0:	f108 0601 	add.w	r6, r8, #1
 8010cb4:	42b3      	cmp	r3, r6
 8010cb6:	db0b      	blt.n	8010cd0 <__lshift+0x38>
 8010cb8:	4638      	mov	r0, r7
 8010cba:	f7ff fddb 	bl	8010874 <_Balloc>
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	b948      	cbnz	r0, 8010cd6 <__lshift+0x3e>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	4b2a      	ldr	r3, [pc, #168]	; (8010d70 <__lshift+0xd8>)
 8010cc6:	482b      	ldr	r0, [pc, #172]	; (8010d74 <__lshift+0xdc>)
 8010cc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ccc:	f000 fc7c 	bl	80115c8 <__assert_func>
 8010cd0:	3101      	adds	r1, #1
 8010cd2:	005b      	lsls	r3, r3, #1
 8010cd4:	e7ee      	b.n	8010cb4 <__lshift+0x1c>
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	f100 0114 	add.w	r1, r0, #20
 8010cdc:	f100 0210 	add.w	r2, r0, #16
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	4553      	cmp	r3, sl
 8010ce4:	db37      	blt.n	8010d56 <__lshift+0xbe>
 8010ce6:	6920      	ldr	r0, [r4, #16]
 8010ce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cec:	f104 0314 	add.w	r3, r4, #20
 8010cf0:	f019 091f 	ands.w	r9, r9, #31
 8010cf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010cf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010cfc:	d02f      	beq.n	8010d5e <__lshift+0xc6>
 8010cfe:	f1c9 0e20 	rsb	lr, r9, #32
 8010d02:	468a      	mov	sl, r1
 8010d04:	f04f 0c00 	mov.w	ip, #0
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	fa02 f209 	lsl.w	r2, r2, r9
 8010d0e:	ea42 020c 	orr.w	r2, r2, ip
 8010d12:	f84a 2b04 	str.w	r2, [sl], #4
 8010d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d1a:	4298      	cmp	r0, r3
 8010d1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010d20:	d8f2      	bhi.n	8010d08 <__lshift+0x70>
 8010d22:	1b03      	subs	r3, r0, r4
 8010d24:	3b15      	subs	r3, #21
 8010d26:	f023 0303 	bic.w	r3, r3, #3
 8010d2a:	3304      	adds	r3, #4
 8010d2c:	f104 0215 	add.w	r2, r4, #21
 8010d30:	4290      	cmp	r0, r2
 8010d32:	bf38      	it	cc
 8010d34:	2304      	movcc	r3, #4
 8010d36:	f841 c003 	str.w	ip, [r1, r3]
 8010d3a:	f1bc 0f00 	cmp.w	ip, #0
 8010d3e:	d001      	beq.n	8010d44 <__lshift+0xac>
 8010d40:	f108 0602 	add.w	r6, r8, #2
 8010d44:	3e01      	subs	r6, #1
 8010d46:	4638      	mov	r0, r7
 8010d48:	612e      	str	r6, [r5, #16]
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	f7ff fdd2 	bl	80108f4 <_Bfree>
 8010d50:	4628      	mov	r0, r5
 8010d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d56:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	e7c1      	b.n	8010ce2 <__lshift+0x4a>
 8010d5e:	3904      	subs	r1, #4
 8010d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d64:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d68:	4298      	cmp	r0, r3
 8010d6a:	d8f9      	bhi.n	8010d60 <__lshift+0xc8>
 8010d6c:	e7ea      	b.n	8010d44 <__lshift+0xac>
 8010d6e:	bf00      	nop
 8010d70:	08011b53 	.word	0x08011b53
 8010d74:	08011b64 	.word	0x08011b64

08010d78 <__mcmp>:
 8010d78:	b530      	push	{r4, r5, lr}
 8010d7a:	6902      	ldr	r2, [r0, #16]
 8010d7c:	690c      	ldr	r4, [r1, #16]
 8010d7e:	1b12      	subs	r2, r2, r4
 8010d80:	d10e      	bne.n	8010da0 <__mcmp+0x28>
 8010d82:	f100 0314 	add.w	r3, r0, #20
 8010d86:	3114      	adds	r1, #20
 8010d88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d98:	42a5      	cmp	r5, r4
 8010d9a:	d003      	beq.n	8010da4 <__mcmp+0x2c>
 8010d9c:	d305      	bcc.n	8010daa <__mcmp+0x32>
 8010d9e:	2201      	movs	r2, #1
 8010da0:	4610      	mov	r0, r2
 8010da2:	bd30      	pop	{r4, r5, pc}
 8010da4:	4283      	cmp	r3, r0
 8010da6:	d3f3      	bcc.n	8010d90 <__mcmp+0x18>
 8010da8:	e7fa      	b.n	8010da0 <__mcmp+0x28>
 8010daa:	f04f 32ff 	mov.w	r2, #4294967295
 8010dae:	e7f7      	b.n	8010da0 <__mcmp+0x28>

08010db0 <__mdiff>:
 8010db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	460c      	mov	r4, r1
 8010db6:	4606      	mov	r6, r0
 8010db8:	4611      	mov	r1, r2
 8010dba:	4620      	mov	r0, r4
 8010dbc:	4690      	mov	r8, r2
 8010dbe:	f7ff ffdb 	bl	8010d78 <__mcmp>
 8010dc2:	1e05      	subs	r5, r0, #0
 8010dc4:	d110      	bne.n	8010de8 <__mdiff+0x38>
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7ff fd53 	bl	8010874 <_Balloc>
 8010dce:	b930      	cbnz	r0, 8010dde <__mdiff+0x2e>
 8010dd0:	4b3a      	ldr	r3, [pc, #232]	; (8010ebc <__mdiff+0x10c>)
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	f240 2132 	movw	r1, #562	; 0x232
 8010dd8:	4839      	ldr	r0, [pc, #228]	; (8010ec0 <__mdiff+0x110>)
 8010dda:	f000 fbf5 	bl	80115c8 <__assert_func>
 8010dde:	2301      	movs	r3, #1
 8010de0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de8:	bfa4      	itt	ge
 8010dea:	4643      	movge	r3, r8
 8010dec:	46a0      	movge	r8, r4
 8010dee:	4630      	mov	r0, r6
 8010df0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010df4:	bfa6      	itte	ge
 8010df6:	461c      	movge	r4, r3
 8010df8:	2500      	movge	r5, #0
 8010dfa:	2501      	movlt	r5, #1
 8010dfc:	f7ff fd3a 	bl	8010874 <_Balloc>
 8010e00:	b920      	cbnz	r0, 8010e0c <__mdiff+0x5c>
 8010e02:	4b2e      	ldr	r3, [pc, #184]	; (8010ebc <__mdiff+0x10c>)
 8010e04:	4602      	mov	r2, r0
 8010e06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010e0a:	e7e5      	b.n	8010dd8 <__mdiff+0x28>
 8010e0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e10:	6926      	ldr	r6, [r4, #16]
 8010e12:	60c5      	str	r5, [r0, #12]
 8010e14:	f104 0914 	add.w	r9, r4, #20
 8010e18:	f108 0514 	add.w	r5, r8, #20
 8010e1c:	f100 0e14 	add.w	lr, r0, #20
 8010e20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e28:	f108 0210 	add.w	r2, r8, #16
 8010e2c:	46f2      	mov	sl, lr
 8010e2e:	2100      	movs	r1, #0
 8010e30:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e38:	fa1f f883 	uxth.w	r8, r3
 8010e3c:	fa11 f18b 	uxtah	r1, r1, fp
 8010e40:	0c1b      	lsrs	r3, r3, #16
 8010e42:	eba1 0808 	sub.w	r8, r1, r8
 8010e46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e4e:	fa1f f888 	uxth.w	r8, r8
 8010e52:	1419      	asrs	r1, r3, #16
 8010e54:	454e      	cmp	r6, r9
 8010e56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e5a:	f84a 3b04 	str.w	r3, [sl], #4
 8010e5e:	d8e7      	bhi.n	8010e30 <__mdiff+0x80>
 8010e60:	1b33      	subs	r3, r6, r4
 8010e62:	3b15      	subs	r3, #21
 8010e64:	f023 0303 	bic.w	r3, r3, #3
 8010e68:	3304      	adds	r3, #4
 8010e6a:	3415      	adds	r4, #21
 8010e6c:	42a6      	cmp	r6, r4
 8010e6e:	bf38      	it	cc
 8010e70:	2304      	movcc	r3, #4
 8010e72:	441d      	add	r5, r3
 8010e74:	4473      	add	r3, lr
 8010e76:	469e      	mov	lr, r3
 8010e78:	462e      	mov	r6, r5
 8010e7a:	4566      	cmp	r6, ip
 8010e7c:	d30e      	bcc.n	8010e9c <__mdiff+0xec>
 8010e7e:	f10c 0203 	add.w	r2, ip, #3
 8010e82:	1b52      	subs	r2, r2, r5
 8010e84:	f022 0203 	bic.w	r2, r2, #3
 8010e88:	3d03      	subs	r5, #3
 8010e8a:	45ac      	cmp	ip, r5
 8010e8c:	bf38      	it	cc
 8010e8e:	2200      	movcc	r2, #0
 8010e90:	441a      	add	r2, r3
 8010e92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010e96:	b17b      	cbz	r3, 8010eb8 <__mdiff+0x108>
 8010e98:	6107      	str	r7, [r0, #16]
 8010e9a:	e7a3      	b.n	8010de4 <__mdiff+0x34>
 8010e9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ea0:	fa11 f288 	uxtah	r2, r1, r8
 8010ea4:	1414      	asrs	r4, r2, #16
 8010ea6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010eaa:	b292      	uxth	r2, r2
 8010eac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010eb0:	f84e 2b04 	str.w	r2, [lr], #4
 8010eb4:	1421      	asrs	r1, r4, #16
 8010eb6:	e7e0      	b.n	8010e7a <__mdiff+0xca>
 8010eb8:	3f01      	subs	r7, #1
 8010eba:	e7ea      	b.n	8010e92 <__mdiff+0xe2>
 8010ebc:	08011b53 	.word	0x08011b53
 8010ec0:	08011b64 	.word	0x08011b64

08010ec4 <__d2b>:
 8010ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ec8:	4689      	mov	r9, r1
 8010eca:	2101      	movs	r1, #1
 8010ecc:	ec57 6b10 	vmov	r6, r7, d0
 8010ed0:	4690      	mov	r8, r2
 8010ed2:	f7ff fccf 	bl	8010874 <_Balloc>
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	b930      	cbnz	r0, 8010ee8 <__d2b+0x24>
 8010eda:	4602      	mov	r2, r0
 8010edc:	4b25      	ldr	r3, [pc, #148]	; (8010f74 <__d2b+0xb0>)
 8010ede:	4826      	ldr	r0, [pc, #152]	; (8010f78 <__d2b+0xb4>)
 8010ee0:	f240 310a 	movw	r1, #778	; 0x30a
 8010ee4:	f000 fb70 	bl	80115c8 <__assert_func>
 8010ee8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010eec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ef0:	bb35      	cbnz	r5, 8010f40 <__d2b+0x7c>
 8010ef2:	2e00      	cmp	r6, #0
 8010ef4:	9301      	str	r3, [sp, #4]
 8010ef6:	d028      	beq.n	8010f4a <__d2b+0x86>
 8010ef8:	4668      	mov	r0, sp
 8010efa:	9600      	str	r6, [sp, #0]
 8010efc:	f7ff fd82 	bl	8010a04 <__lo0bits>
 8010f00:	9900      	ldr	r1, [sp, #0]
 8010f02:	b300      	cbz	r0, 8010f46 <__d2b+0x82>
 8010f04:	9a01      	ldr	r2, [sp, #4]
 8010f06:	f1c0 0320 	rsb	r3, r0, #32
 8010f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f0e:	430b      	orrs	r3, r1
 8010f10:	40c2      	lsrs	r2, r0
 8010f12:	6163      	str	r3, [r4, #20]
 8010f14:	9201      	str	r2, [sp, #4]
 8010f16:	9b01      	ldr	r3, [sp, #4]
 8010f18:	61a3      	str	r3, [r4, #24]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	bf14      	ite	ne
 8010f1e:	2202      	movne	r2, #2
 8010f20:	2201      	moveq	r2, #1
 8010f22:	6122      	str	r2, [r4, #16]
 8010f24:	b1d5      	cbz	r5, 8010f5c <__d2b+0x98>
 8010f26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f2a:	4405      	add	r5, r0
 8010f2c:	f8c9 5000 	str.w	r5, [r9]
 8010f30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f34:	f8c8 0000 	str.w	r0, [r8]
 8010f38:	4620      	mov	r0, r4
 8010f3a:	b003      	add	sp, #12
 8010f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f44:	e7d5      	b.n	8010ef2 <__d2b+0x2e>
 8010f46:	6161      	str	r1, [r4, #20]
 8010f48:	e7e5      	b.n	8010f16 <__d2b+0x52>
 8010f4a:	a801      	add	r0, sp, #4
 8010f4c:	f7ff fd5a 	bl	8010a04 <__lo0bits>
 8010f50:	9b01      	ldr	r3, [sp, #4]
 8010f52:	6163      	str	r3, [r4, #20]
 8010f54:	2201      	movs	r2, #1
 8010f56:	6122      	str	r2, [r4, #16]
 8010f58:	3020      	adds	r0, #32
 8010f5a:	e7e3      	b.n	8010f24 <__d2b+0x60>
 8010f5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f64:	f8c9 0000 	str.w	r0, [r9]
 8010f68:	6918      	ldr	r0, [r3, #16]
 8010f6a:	f7ff fd2b 	bl	80109c4 <__hi0bits>
 8010f6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f72:	e7df      	b.n	8010f34 <__d2b+0x70>
 8010f74:	08011b53 	.word	0x08011b53
 8010f78:	08011b64 	.word	0x08011b64

08010f7c <_calloc_r>:
 8010f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f7e:	fba1 2402 	umull	r2, r4, r1, r2
 8010f82:	b94c      	cbnz	r4, 8010f98 <_calloc_r+0x1c>
 8010f84:	4611      	mov	r1, r2
 8010f86:	9201      	str	r2, [sp, #4]
 8010f88:	f7fd fe92 	bl	800ecb0 <_malloc_r>
 8010f8c:	9a01      	ldr	r2, [sp, #4]
 8010f8e:	4605      	mov	r5, r0
 8010f90:	b930      	cbnz	r0, 8010fa0 <_calloc_r+0x24>
 8010f92:	4628      	mov	r0, r5
 8010f94:	b003      	add	sp, #12
 8010f96:	bd30      	pop	{r4, r5, pc}
 8010f98:	220c      	movs	r2, #12
 8010f9a:	6002      	str	r2, [r0, #0]
 8010f9c:	2500      	movs	r5, #0
 8010f9e:	e7f8      	b.n	8010f92 <_calloc_r+0x16>
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	f7fd fe10 	bl	800ebc6 <memset>
 8010fa6:	e7f4      	b.n	8010f92 <_calloc_r+0x16>

08010fa8 <__ssputs_r>:
 8010fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fac:	688e      	ldr	r6, [r1, #8]
 8010fae:	429e      	cmp	r6, r3
 8010fb0:	4682      	mov	sl, r0
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	4690      	mov	r8, r2
 8010fb6:	461f      	mov	r7, r3
 8010fb8:	d838      	bhi.n	801102c <__ssputs_r+0x84>
 8010fba:	898a      	ldrh	r2, [r1, #12]
 8010fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010fc0:	d032      	beq.n	8011028 <__ssputs_r+0x80>
 8010fc2:	6825      	ldr	r5, [r4, #0]
 8010fc4:	6909      	ldr	r1, [r1, #16]
 8010fc6:	eba5 0901 	sub.w	r9, r5, r1
 8010fca:	6965      	ldr	r5, [r4, #20]
 8010fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	444b      	add	r3, r9
 8010fd8:	106d      	asrs	r5, r5, #1
 8010fda:	429d      	cmp	r5, r3
 8010fdc:	bf38      	it	cc
 8010fde:	461d      	movcc	r5, r3
 8010fe0:	0553      	lsls	r3, r2, #21
 8010fe2:	d531      	bpl.n	8011048 <__ssputs_r+0xa0>
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7fd fe63 	bl	800ecb0 <_malloc_r>
 8010fea:	4606      	mov	r6, r0
 8010fec:	b950      	cbnz	r0, 8011004 <__ssputs_r+0x5c>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	f8ca 3000 	str.w	r3, [sl]
 8010ff4:	89a3      	ldrh	r3, [r4, #12]
 8010ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ffa:	81a3      	strh	r3, [r4, #12]
 8010ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8011000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011004:	6921      	ldr	r1, [r4, #16]
 8011006:	464a      	mov	r2, r9
 8011008:	f7fd fdcf 	bl	800ebaa <memcpy>
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011016:	81a3      	strh	r3, [r4, #12]
 8011018:	6126      	str	r6, [r4, #16]
 801101a:	6165      	str	r5, [r4, #20]
 801101c:	444e      	add	r6, r9
 801101e:	eba5 0509 	sub.w	r5, r5, r9
 8011022:	6026      	str	r6, [r4, #0]
 8011024:	60a5      	str	r5, [r4, #8]
 8011026:	463e      	mov	r6, r7
 8011028:	42be      	cmp	r6, r7
 801102a:	d900      	bls.n	801102e <__ssputs_r+0x86>
 801102c:	463e      	mov	r6, r7
 801102e:	6820      	ldr	r0, [r4, #0]
 8011030:	4632      	mov	r2, r6
 8011032:	4641      	mov	r1, r8
 8011034:	f000 fb2c 	bl	8011690 <memmove>
 8011038:	68a3      	ldr	r3, [r4, #8]
 801103a:	1b9b      	subs	r3, r3, r6
 801103c:	60a3      	str	r3, [r4, #8]
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	4433      	add	r3, r6
 8011042:	6023      	str	r3, [r4, #0]
 8011044:	2000      	movs	r0, #0
 8011046:	e7db      	b.n	8011000 <__ssputs_r+0x58>
 8011048:	462a      	mov	r2, r5
 801104a:	f000 fb3b 	bl	80116c4 <_realloc_r>
 801104e:	4606      	mov	r6, r0
 8011050:	2800      	cmp	r0, #0
 8011052:	d1e1      	bne.n	8011018 <__ssputs_r+0x70>
 8011054:	6921      	ldr	r1, [r4, #16]
 8011056:	4650      	mov	r0, sl
 8011058:	f7fd fdbe 	bl	800ebd8 <_free_r>
 801105c:	e7c7      	b.n	8010fee <__ssputs_r+0x46>
	...

08011060 <_svfiprintf_r>:
 8011060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011064:	4698      	mov	r8, r3
 8011066:	898b      	ldrh	r3, [r1, #12]
 8011068:	061b      	lsls	r3, r3, #24
 801106a:	b09d      	sub	sp, #116	; 0x74
 801106c:	4607      	mov	r7, r0
 801106e:	460d      	mov	r5, r1
 8011070:	4614      	mov	r4, r2
 8011072:	d50e      	bpl.n	8011092 <_svfiprintf_r+0x32>
 8011074:	690b      	ldr	r3, [r1, #16]
 8011076:	b963      	cbnz	r3, 8011092 <_svfiprintf_r+0x32>
 8011078:	2140      	movs	r1, #64	; 0x40
 801107a:	f7fd fe19 	bl	800ecb0 <_malloc_r>
 801107e:	6028      	str	r0, [r5, #0]
 8011080:	6128      	str	r0, [r5, #16]
 8011082:	b920      	cbnz	r0, 801108e <_svfiprintf_r+0x2e>
 8011084:	230c      	movs	r3, #12
 8011086:	603b      	str	r3, [r7, #0]
 8011088:	f04f 30ff 	mov.w	r0, #4294967295
 801108c:	e0d1      	b.n	8011232 <_svfiprintf_r+0x1d2>
 801108e:	2340      	movs	r3, #64	; 0x40
 8011090:	616b      	str	r3, [r5, #20]
 8011092:	2300      	movs	r3, #0
 8011094:	9309      	str	r3, [sp, #36]	; 0x24
 8011096:	2320      	movs	r3, #32
 8011098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801109c:	f8cd 800c 	str.w	r8, [sp, #12]
 80110a0:	2330      	movs	r3, #48	; 0x30
 80110a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801124c <_svfiprintf_r+0x1ec>
 80110a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110aa:	f04f 0901 	mov.w	r9, #1
 80110ae:	4623      	mov	r3, r4
 80110b0:	469a      	mov	sl, r3
 80110b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110b6:	b10a      	cbz	r2, 80110bc <_svfiprintf_r+0x5c>
 80110b8:	2a25      	cmp	r2, #37	; 0x25
 80110ba:	d1f9      	bne.n	80110b0 <_svfiprintf_r+0x50>
 80110bc:	ebba 0b04 	subs.w	fp, sl, r4
 80110c0:	d00b      	beq.n	80110da <_svfiprintf_r+0x7a>
 80110c2:	465b      	mov	r3, fp
 80110c4:	4622      	mov	r2, r4
 80110c6:	4629      	mov	r1, r5
 80110c8:	4638      	mov	r0, r7
 80110ca:	f7ff ff6d 	bl	8010fa8 <__ssputs_r>
 80110ce:	3001      	adds	r0, #1
 80110d0:	f000 80aa 	beq.w	8011228 <_svfiprintf_r+0x1c8>
 80110d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110d6:	445a      	add	r2, fp
 80110d8:	9209      	str	r2, [sp, #36]	; 0x24
 80110da:	f89a 3000 	ldrb.w	r3, [sl]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f000 80a2 	beq.w	8011228 <_svfiprintf_r+0x1c8>
 80110e4:	2300      	movs	r3, #0
 80110e6:	f04f 32ff 	mov.w	r2, #4294967295
 80110ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110ee:	f10a 0a01 	add.w	sl, sl, #1
 80110f2:	9304      	str	r3, [sp, #16]
 80110f4:	9307      	str	r3, [sp, #28]
 80110f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110fa:	931a      	str	r3, [sp, #104]	; 0x68
 80110fc:	4654      	mov	r4, sl
 80110fe:	2205      	movs	r2, #5
 8011100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011104:	4851      	ldr	r0, [pc, #324]	; (801124c <_svfiprintf_r+0x1ec>)
 8011106:	f7ef f873 	bl	80001f0 <memchr>
 801110a:	9a04      	ldr	r2, [sp, #16]
 801110c:	b9d8      	cbnz	r0, 8011146 <_svfiprintf_r+0xe6>
 801110e:	06d0      	lsls	r0, r2, #27
 8011110:	bf44      	itt	mi
 8011112:	2320      	movmi	r3, #32
 8011114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011118:	0711      	lsls	r1, r2, #28
 801111a:	bf44      	itt	mi
 801111c:	232b      	movmi	r3, #43	; 0x2b
 801111e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011122:	f89a 3000 	ldrb.w	r3, [sl]
 8011126:	2b2a      	cmp	r3, #42	; 0x2a
 8011128:	d015      	beq.n	8011156 <_svfiprintf_r+0xf6>
 801112a:	9a07      	ldr	r2, [sp, #28]
 801112c:	4654      	mov	r4, sl
 801112e:	2000      	movs	r0, #0
 8011130:	f04f 0c0a 	mov.w	ip, #10
 8011134:	4621      	mov	r1, r4
 8011136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801113a:	3b30      	subs	r3, #48	; 0x30
 801113c:	2b09      	cmp	r3, #9
 801113e:	d94e      	bls.n	80111de <_svfiprintf_r+0x17e>
 8011140:	b1b0      	cbz	r0, 8011170 <_svfiprintf_r+0x110>
 8011142:	9207      	str	r2, [sp, #28]
 8011144:	e014      	b.n	8011170 <_svfiprintf_r+0x110>
 8011146:	eba0 0308 	sub.w	r3, r0, r8
 801114a:	fa09 f303 	lsl.w	r3, r9, r3
 801114e:	4313      	orrs	r3, r2
 8011150:	9304      	str	r3, [sp, #16]
 8011152:	46a2      	mov	sl, r4
 8011154:	e7d2      	b.n	80110fc <_svfiprintf_r+0x9c>
 8011156:	9b03      	ldr	r3, [sp, #12]
 8011158:	1d19      	adds	r1, r3, #4
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	9103      	str	r1, [sp, #12]
 801115e:	2b00      	cmp	r3, #0
 8011160:	bfbb      	ittet	lt
 8011162:	425b      	neglt	r3, r3
 8011164:	f042 0202 	orrlt.w	r2, r2, #2
 8011168:	9307      	strge	r3, [sp, #28]
 801116a:	9307      	strlt	r3, [sp, #28]
 801116c:	bfb8      	it	lt
 801116e:	9204      	strlt	r2, [sp, #16]
 8011170:	7823      	ldrb	r3, [r4, #0]
 8011172:	2b2e      	cmp	r3, #46	; 0x2e
 8011174:	d10c      	bne.n	8011190 <_svfiprintf_r+0x130>
 8011176:	7863      	ldrb	r3, [r4, #1]
 8011178:	2b2a      	cmp	r3, #42	; 0x2a
 801117a:	d135      	bne.n	80111e8 <_svfiprintf_r+0x188>
 801117c:	9b03      	ldr	r3, [sp, #12]
 801117e:	1d1a      	adds	r2, r3, #4
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	9203      	str	r2, [sp, #12]
 8011184:	2b00      	cmp	r3, #0
 8011186:	bfb8      	it	lt
 8011188:	f04f 33ff 	movlt.w	r3, #4294967295
 801118c:	3402      	adds	r4, #2
 801118e:	9305      	str	r3, [sp, #20]
 8011190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801125c <_svfiprintf_r+0x1fc>
 8011194:	7821      	ldrb	r1, [r4, #0]
 8011196:	2203      	movs	r2, #3
 8011198:	4650      	mov	r0, sl
 801119a:	f7ef f829 	bl	80001f0 <memchr>
 801119e:	b140      	cbz	r0, 80111b2 <_svfiprintf_r+0x152>
 80111a0:	2340      	movs	r3, #64	; 0x40
 80111a2:	eba0 000a 	sub.w	r0, r0, sl
 80111a6:	fa03 f000 	lsl.w	r0, r3, r0
 80111aa:	9b04      	ldr	r3, [sp, #16]
 80111ac:	4303      	orrs	r3, r0
 80111ae:	3401      	adds	r4, #1
 80111b0:	9304      	str	r3, [sp, #16]
 80111b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111b6:	4826      	ldr	r0, [pc, #152]	; (8011250 <_svfiprintf_r+0x1f0>)
 80111b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111bc:	2206      	movs	r2, #6
 80111be:	f7ef f817 	bl	80001f0 <memchr>
 80111c2:	2800      	cmp	r0, #0
 80111c4:	d038      	beq.n	8011238 <_svfiprintf_r+0x1d8>
 80111c6:	4b23      	ldr	r3, [pc, #140]	; (8011254 <_svfiprintf_r+0x1f4>)
 80111c8:	bb1b      	cbnz	r3, 8011212 <_svfiprintf_r+0x1b2>
 80111ca:	9b03      	ldr	r3, [sp, #12]
 80111cc:	3307      	adds	r3, #7
 80111ce:	f023 0307 	bic.w	r3, r3, #7
 80111d2:	3308      	adds	r3, #8
 80111d4:	9303      	str	r3, [sp, #12]
 80111d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d8:	4433      	add	r3, r6
 80111da:	9309      	str	r3, [sp, #36]	; 0x24
 80111dc:	e767      	b.n	80110ae <_svfiprintf_r+0x4e>
 80111de:	fb0c 3202 	mla	r2, ip, r2, r3
 80111e2:	460c      	mov	r4, r1
 80111e4:	2001      	movs	r0, #1
 80111e6:	e7a5      	b.n	8011134 <_svfiprintf_r+0xd4>
 80111e8:	2300      	movs	r3, #0
 80111ea:	3401      	adds	r4, #1
 80111ec:	9305      	str	r3, [sp, #20]
 80111ee:	4619      	mov	r1, r3
 80111f0:	f04f 0c0a 	mov.w	ip, #10
 80111f4:	4620      	mov	r0, r4
 80111f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111fa:	3a30      	subs	r2, #48	; 0x30
 80111fc:	2a09      	cmp	r2, #9
 80111fe:	d903      	bls.n	8011208 <_svfiprintf_r+0x1a8>
 8011200:	2b00      	cmp	r3, #0
 8011202:	d0c5      	beq.n	8011190 <_svfiprintf_r+0x130>
 8011204:	9105      	str	r1, [sp, #20]
 8011206:	e7c3      	b.n	8011190 <_svfiprintf_r+0x130>
 8011208:	fb0c 2101 	mla	r1, ip, r1, r2
 801120c:	4604      	mov	r4, r0
 801120e:	2301      	movs	r3, #1
 8011210:	e7f0      	b.n	80111f4 <_svfiprintf_r+0x194>
 8011212:	ab03      	add	r3, sp, #12
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	462a      	mov	r2, r5
 8011218:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <_svfiprintf_r+0x1f8>)
 801121a:	a904      	add	r1, sp, #16
 801121c:	4638      	mov	r0, r7
 801121e:	f7fd fe5b 	bl	800eed8 <_printf_float>
 8011222:	1c42      	adds	r2, r0, #1
 8011224:	4606      	mov	r6, r0
 8011226:	d1d6      	bne.n	80111d6 <_svfiprintf_r+0x176>
 8011228:	89ab      	ldrh	r3, [r5, #12]
 801122a:	065b      	lsls	r3, r3, #25
 801122c:	f53f af2c 	bmi.w	8011088 <_svfiprintf_r+0x28>
 8011230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011232:	b01d      	add	sp, #116	; 0x74
 8011234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011238:	ab03      	add	r3, sp, #12
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	462a      	mov	r2, r5
 801123e:	4b06      	ldr	r3, [pc, #24]	; (8011258 <_svfiprintf_r+0x1f8>)
 8011240:	a904      	add	r1, sp, #16
 8011242:	4638      	mov	r0, r7
 8011244:	f7fe f8ec 	bl	800f420 <_printf_i>
 8011248:	e7eb      	b.n	8011222 <_svfiprintf_r+0x1c2>
 801124a:	bf00      	nop
 801124c:	08011cbc 	.word	0x08011cbc
 8011250:	08011cc6 	.word	0x08011cc6
 8011254:	0800eed9 	.word	0x0800eed9
 8011258:	08010fa9 	.word	0x08010fa9
 801125c:	08011cc2 	.word	0x08011cc2

08011260 <__sfputc_r>:
 8011260:	6893      	ldr	r3, [r2, #8]
 8011262:	3b01      	subs	r3, #1
 8011264:	2b00      	cmp	r3, #0
 8011266:	b410      	push	{r4}
 8011268:	6093      	str	r3, [r2, #8]
 801126a:	da08      	bge.n	801127e <__sfputc_r+0x1e>
 801126c:	6994      	ldr	r4, [r2, #24]
 801126e:	42a3      	cmp	r3, r4
 8011270:	db01      	blt.n	8011276 <__sfputc_r+0x16>
 8011272:	290a      	cmp	r1, #10
 8011274:	d103      	bne.n	801127e <__sfputc_r+0x1e>
 8011276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801127a:	f7fe bb0f 	b.w	800f89c <__swbuf_r>
 801127e:	6813      	ldr	r3, [r2, #0]
 8011280:	1c58      	adds	r0, r3, #1
 8011282:	6010      	str	r0, [r2, #0]
 8011284:	7019      	strb	r1, [r3, #0]
 8011286:	4608      	mov	r0, r1
 8011288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801128c:	4770      	bx	lr

0801128e <__sfputs_r>:
 801128e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	4614      	mov	r4, r2
 8011296:	18d5      	adds	r5, r2, r3
 8011298:	42ac      	cmp	r4, r5
 801129a:	d101      	bne.n	80112a0 <__sfputs_r+0x12>
 801129c:	2000      	movs	r0, #0
 801129e:	e007      	b.n	80112b0 <__sfputs_r+0x22>
 80112a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a4:	463a      	mov	r2, r7
 80112a6:	4630      	mov	r0, r6
 80112a8:	f7ff ffda 	bl	8011260 <__sfputc_r>
 80112ac:	1c43      	adds	r3, r0, #1
 80112ae:	d1f3      	bne.n	8011298 <__sfputs_r+0xa>
 80112b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112b4 <_vfiprintf_r>:
 80112b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	460d      	mov	r5, r1
 80112ba:	b09d      	sub	sp, #116	; 0x74
 80112bc:	4614      	mov	r4, r2
 80112be:	4698      	mov	r8, r3
 80112c0:	4606      	mov	r6, r0
 80112c2:	b118      	cbz	r0, 80112cc <_vfiprintf_r+0x18>
 80112c4:	6983      	ldr	r3, [r0, #24]
 80112c6:	b90b      	cbnz	r3, 80112cc <_vfiprintf_r+0x18>
 80112c8:	f7fd fbaa 	bl	800ea20 <__sinit>
 80112cc:	4b89      	ldr	r3, [pc, #548]	; (80114f4 <_vfiprintf_r+0x240>)
 80112ce:	429d      	cmp	r5, r3
 80112d0:	d11b      	bne.n	801130a <_vfiprintf_r+0x56>
 80112d2:	6875      	ldr	r5, [r6, #4]
 80112d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112d6:	07d9      	lsls	r1, r3, #31
 80112d8:	d405      	bmi.n	80112e6 <_vfiprintf_r+0x32>
 80112da:	89ab      	ldrh	r3, [r5, #12]
 80112dc:	059a      	lsls	r2, r3, #22
 80112de:	d402      	bmi.n	80112e6 <_vfiprintf_r+0x32>
 80112e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112e2:	f7fd fc60 	bl	800eba6 <__retarget_lock_acquire_recursive>
 80112e6:	89ab      	ldrh	r3, [r5, #12]
 80112e8:	071b      	lsls	r3, r3, #28
 80112ea:	d501      	bpl.n	80112f0 <_vfiprintf_r+0x3c>
 80112ec:	692b      	ldr	r3, [r5, #16]
 80112ee:	b9eb      	cbnz	r3, 801132c <_vfiprintf_r+0x78>
 80112f0:	4629      	mov	r1, r5
 80112f2:	4630      	mov	r0, r6
 80112f4:	f7fe fb36 	bl	800f964 <__swsetup_r>
 80112f8:	b1c0      	cbz	r0, 801132c <_vfiprintf_r+0x78>
 80112fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112fc:	07dc      	lsls	r4, r3, #31
 80112fe:	d50e      	bpl.n	801131e <_vfiprintf_r+0x6a>
 8011300:	f04f 30ff 	mov.w	r0, #4294967295
 8011304:	b01d      	add	sp, #116	; 0x74
 8011306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130a:	4b7b      	ldr	r3, [pc, #492]	; (80114f8 <_vfiprintf_r+0x244>)
 801130c:	429d      	cmp	r5, r3
 801130e:	d101      	bne.n	8011314 <_vfiprintf_r+0x60>
 8011310:	68b5      	ldr	r5, [r6, #8]
 8011312:	e7df      	b.n	80112d4 <_vfiprintf_r+0x20>
 8011314:	4b79      	ldr	r3, [pc, #484]	; (80114fc <_vfiprintf_r+0x248>)
 8011316:	429d      	cmp	r5, r3
 8011318:	bf08      	it	eq
 801131a:	68f5      	ldreq	r5, [r6, #12]
 801131c:	e7da      	b.n	80112d4 <_vfiprintf_r+0x20>
 801131e:	89ab      	ldrh	r3, [r5, #12]
 8011320:	0598      	lsls	r0, r3, #22
 8011322:	d4ed      	bmi.n	8011300 <_vfiprintf_r+0x4c>
 8011324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011326:	f7fd fc3f 	bl	800eba8 <__retarget_lock_release_recursive>
 801132a:	e7e9      	b.n	8011300 <_vfiprintf_r+0x4c>
 801132c:	2300      	movs	r3, #0
 801132e:	9309      	str	r3, [sp, #36]	; 0x24
 8011330:	2320      	movs	r3, #32
 8011332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011336:	f8cd 800c 	str.w	r8, [sp, #12]
 801133a:	2330      	movs	r3, #48	; 0x30
 801133c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011500 <_vfiprintf_r+0x24c>
 8011340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011344:	f04f 0901 	mov.w	r9, #1
 8011348:	4623      	mov	r3, r4
 801134a:	469a      	mov	sl, r3
 801134c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011350:	b10a      	cbz	r2, 8011356 <_vfiprintf_r+0xa2>
 8011352:	2a25      	cmp	r2, #37	; 0x25
 8011354:	d1f9      	bne.n	801134a <_vfiprintf_r+0x96>
 8011356:	ebba 0b04 	subs.w	fp, sl, r4
 801135a:	d00b      	beq.n	8011374 <_vfiprintf_r+0xc0>
 801135c:	465b      	mov	r3, fp
 801135e:	4622      	mov	r2, r4
 8011360:	4629      	mov	r1, r5
 8011362:	4630      	mov	r0, r6
 8011364:	f7ff ff93 	bl	801128e <__sfputs_r>
 8011368:	3001      	adds	r0, #1
 801136a:	f000 80aa 	beq.w	80114c2 <_vfiprintf_r+0x20e>
 801136e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011370:	445a      	add	r2, fp
 8011372:	9209      	str	r2, [sp, #36]	; 0x24
 8011374:	f89a 3000 	ldrb.w	r3, [sl]
 8011378:	2b00      	cmp	r3, #0
 801137a:	f000 80a2 	beq.w	80114c2 <_vfiprintf_r+0x20e>
 801137e:	2300      	movs	r3, #0
 8011380:	f04f 32ff 	mov.w	r2, #4294967295
 8011384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011388:	f10a 0a01 	add.w	sl, sl, #1
 801138c:	9304      	str	r3, [sp, #16]
 801138e:	9307      	str	r3, [sp, #28]
 8011390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011394:	931a      	str	r3, [sp, #104]	; 0x68
 8011396:	4654      	mov	r4, sl
 8011398:	2205      	movs	r2, #5
 801139a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801139e:	4858      	ldr	r0, [pc, #352]	; (8011500 <_vfiprintf_r+0x24c>)
 80113a0:	f7ee ff26 	bl	80001f0 <memchr>
 80113a4:	9a04      	ldr	r2, [sp, #16]
 80113a6:	b9d8      	cbnz	r0, 80113e0 <_vfiprintf_r+0x12c>
 80113a8:	06d1      	lsls	r1, r2, #27
 80113aa:	bf44      	itt	mi
 80113ac:	2320      	movmi	r3, #32
 80113ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113b2:	0713      	lsls	r3, r2, #28
 80113b4:	bf44      	itt	mi
 80113b6:	232b      	movmi	r3, #43	; 0x2b
 80113b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113bc:	f89a 3000 	ldrb.w	r3, [sl]
 80113c0:	2b2a      	cmp	r3, #42	; 0x2a
 80113c2:	d015      	beq.n	80113f0 <_vfiprintf_r+0x13c>
 80113c4:	9a07      	ldr	r2, [sp, #28]
 80113c6:	4654      	mov	r4, sl
 80113c8:	2000      	movs	r0, #0
 80113ca:	f04f 0c0a 	mov.w	ip, #10
 80113ce:	4621      	mov	r1, r4
 80113d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113d4:	3b30      	subs	r3, #48	; 0x30
 80113d6:	2b09      	cmp	r3, #9
 80113d8:	d94e      	bls.n	8011478 <_vfiprintf_r+0x1c4>
 80113da:	b1b0      	cbz	r0, 801140a <_vfiprintf_r+0x156>
 80113dc:	9207      	str	r2, [sp, #28]
 80113de:	e014      	b.n	801140a <_vfiprintf_r+0x156>
 80113e0:	eba0 0308 	sub.w	r3, r0, r8
 80113e4:	fa09 f303 	lsl.w	r3, r9, r3
 80113e8:	4313      	orrs	r3, r2
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	46a2      	mov	sl, r4
 80113ee:	e7d2      	b.n	8011396 <_vfiprintf_r+0xe2>
 80113f0:	9b03      	ldr	r3, [sp, #12]
 80113f2:	1d19      	adds	r1, r3, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	9103      	str	r1, [sp, #12]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	bfbb      	ittet	lt
 80113fc:	425b      	neglt	r3, r3
 80113fe:	f042 0202 	orrlt.w	r2, r2, #2
 8011402:	9307      	strge	r3, [sp, #28]
 8011404:	9307      	strlt	r3, [sp, #28]
 8011406:	bfb8      	it	lt
 8011408:	9204      	strlt	r2, [sp, #16]
 801140a:	7823      	ldrb	r3, [r4, #0]
 801140c:	2b2e      	cmp	r3, #46	; 0x2e
 801140e:	d10c      	bne.n	801142a <_vfiprintf_r+0x176>
 8011410:	7863      	ldrb	r3, [r4, #1]
 8011412:	2b2a      	cmp	r3, #42	; 0x2a
 8011414:	d135      	bne.n	8011482 <_vfiprintf_r+0x1ce>
 8011416:	9b03      	ldr	r3, [sp, #12]
 8011418:	1d1a      	adds	r2, r3, #4
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	9203      	str	r2, [sp, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	bfb8      	it	lt
 8011422:	f04f 33ff 	movlt.w	r3, #4294967295
 8011426:	3402      	adds	r4, #2
 8011428:	9305      	str	r3, [sp, #20]
 801142a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011510 <_vfiprintf_r+0x25c>
 801142e:	7821      	ldrb	r1, [r4, #0]
 8011430:	2203      	movs	r2, #3
 8011432:	4650      	mov	r0, sl
 8011434:	f7ee fedc 	bl	80001f0 <memchr>
 8011438:	b140      	cbz	r0, 801144c <_vfiprintf_r+0x198>
 801143a:	2340      	movs	r3, #64	; 0x40
 801143c:	eba0 000a 	sub.w	r0, r0, sl
 8011440:	fa03 f000 	lsl.w	r0, r3, r0
 8011444:	9b04      	ldr	r3, [sp, #16]
 8011446:	4303      	orrs	r3, r0
 8011448:	3401      	adds	r4, #1
 801144a:	9304      	str	r3, [sp, #16]
 801144c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011450:	482c      	ldr	r0, [pc, #176]	; (8011504 <_vfiprintf_r+0x250>)
 8011452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011456:	2206      	movs	r2, #6
 8011458:	f7ee feca 	bl	80001f0 <memchr>
 801145c:	2800      	cmp	r0, #0
 801145e:	d03f      	beq.n	80114e0 <_vfiprintf_r+0x22c>
 8011460:	4b29      	ldr	r3, [pc, #164]	; (8011508 <_vfiprintf_r+0x254>)
 8011462:	bb1b      	cbnz	r3, 80114ac <_vfiprintf_r+0x1f8>
 8011464:	9b03      	ldr	r3, [sp, #12]
 8011466:	3307      	adds	r3, #7
 8011468:	f023 0307 	bic.w	r3, r3, #7
 801146c:	3308      	adds	r3, #8
 801146e:	9303      	str	r3, [sp, #12]
 8011470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011472:	443b      	add	r3, r7
 8011474:	9309      	str	r3, [sp, #36]	; 0x24
 8011476:	e767      	b.n	8011348 <_vfiprintf_r+0x94>
 8011478:	fb0c 3202 	mla	r2, ip, r2, r3
 801147c:	460c      	mov	r4, r1
 801147e:	2001      	movs	r0, #1
 8011480:	e7a5      	b.n	80113ce <_vfiprintf_r+0x11a>
 8011482:	2300      	movs	r3, #0
 8011484:	3401      	adds	r4, #1
 8011486:	9305      	str	r3, [sp, #20]
 8011488:	4619      	mov	r1, r3
 801148a:	f04f 0c0a 	mov.w	ip, #10
 801148e:	4620      	mov	r0, r4
 8011490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011494:	3a30      	subs	r2, #48	; 0x30
 8011496:	2a09      	cmp	r2, #9
 8011498:	d903      	bls.n	80114a2 <_vfiprintf_r+0x1ee>
 801149a:	2b00      	cmp	r3, #0
 801149c:	d0c5      	beq.n	801142a <_vfiprintf_r+0x176>
 801149e:	9105      	str	r1, [sp, #20]
 80114a0:	e7c3      	b.n	801142a <_vfiprintf_r+0x176>
 80114a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80114a6:	4604      	mov	r4, r0
 80114a8:	2301      	movs	r3, #1
 80114aa:	e7f0      	b.n	801148e <_vfiprintf_r+0x1da>
 80114ac:	ab03      	add	r3, sp, #12
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	462a      	mov	r2, r5
 80114b2:	4b16      	ldr	r3, [pc, #88]	; (801150c <_vfiprintf_r+0x258>)
 80114b4:	a904      	add	r1, sp, #16
 80114b6:	4630      	mov	r0, r6
 80114b8:	f7fd fd0e 	bl	800eed8 <_printf_float>
 80114bc:	4607      	mov	r7, r0
 80114be:	1c78      	adds	r0, r7, #1
 80114c0:	d1d6      	bne.n	8011470 <_vfiprintf_r+0x1bc>
 80114c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114c4:	07d9      	lsls	r1, r3, #31
 80114c6:	d405      	bmi.n	80114d4 <_vfiprintf_r+0x220>
 80114c8:	89ab      	ldrh	r3, [r5, #12]
 80114ca:	059a      	lsls	r2, r3, #22
 80114cc:	d402      	bmi.n	80114d4 <_vfiprintf_r+0x220>
 80114ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114d0:	f7fd fb6a 	bl	800eba8 <__retarget_lock_release_recursive>
 80114d4:	89ab      	ldrh	r3, [r5, #12]
 80114d6:	065b      	lsls	r3, r3, #25
 80114d8:	f53f af12 	bmi.w	8011300 <_vfiprintf_r+0x4c>
 80114dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114de:	e711      	b.n	8011304 <_vfiprintf_r+0x50>
 80114e0:	ab03      	add	r3, sp, #12
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	462a      	mov	r2, r5
 80114e6:	4b09      	ldr	r3, [pc, #36]	; (801150c <_vfiprintf_r+0x258>)
 80114e8:	a904      	add	r1, sp, #16
 80114ea:	4630      	mov	r0, r6
 80114ec:	f7fd ff98 	bl	800f420 <_printf_i>
 80114f0:	e7e4      	b.n	80114bc <_vfiprintf_r+0x208>
 80114f2:	bf00      	nop
 80114f4:	08011a5c 	.word	0x08011a5c
 80114f8:	08011a7c 	.word	0x08011a7c
 80114fc:	08011a3c 	.word	0x08011a3c
 8011500:	08011cbc 	.word	0x08011cbc
 8011504:	08011cc6 	.word	0x08011cc6
 8011508:	0800eed9 	.word	0x0800eed9
 801150c:	0801128f 	.word	0x0801128f
 8011510:	08011cc2 	.word	0x08011cc2

08011514 <_putc_r>:
 8011514:	b570      	push	{r4, r5, r6, lr}
 8011516:	460d      	mov	r5, r1
 8011518:	4614      	mov	r4, r2
 801151a:	4606      	mov	r6, r0
 801151c:	b118      	cbz	r0, 8011526 <_putc_r+0x12>
 801151e:	6983      	ldr	r3, [r0, #24]
 8011520:	b90b      	cbnz	r3, 8011526 <_putc_r+0x12>
 8011522:	f7fd fa7d 	bl	800ea20 <__sinit>
 8011526:	4b1c      	ldr	r3, [pc, #112]	; (8011598 <_putc_r+0x84>)
 8011528:	429c      	cmp	r4, r3
 801152a:	d124      	bne.n	8011576 <_putc_r+0x62>
 801152c:	6874      	ldr	r4, [r6, #4]
 801152e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011530:	07d8      	lsls	r0, r3, #31
 8011532:	d405      	bmi.n	8011540 <_putc_r+0x2c>
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	0599      	lsls	r1, r3, #22
 8011538:	d402      	bmi.n	8011540 <_putc_r+0x2c>
 801153a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801153c:	f7fd fb33 	bl	800eba6 <__retarget_lock_acquire_recursive>
 8011540:	68a3      	ldr	r3, [r4, #8]
 8011542:	3b01      	subs	r3, #1
 8011544:	2b00      	cmp	r3, #0
 8011546:	60a3      	str	r3, [r4, #8]
 8011548:	da05      	bge.n	8011556 <_putc_r+0x42>
 801154a:	69a2      	ldr	r2, [r4, #24]
 801154c:	4293      	cmp	r3, r2
 801154e:	db1c      	blt.n	801158a <_putc_r+0x76>
 8011550:	b2eb      	uxtb	r3, r5
 8011552:	2b0a      	cmp	r3, #10
 8011554:	d019      	beq.n	801158a <_putc_r+0x76>
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	6022      	str	r2, [r4, #0]
 801155c:	701d      	strb	r5, [r3, #0]
 801155e:	b2ed      	uxtb	r5, r5
 8011560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011562:	07da      	lsls	r2, r3, #31
 8011564:	d405      	bmi.n	8011572 <_putc_r+0x5e>
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	059b      	lsls	r3, r3, #22
 801156a:	d402      	bmi.n	8011572 <_putc_r+0x5e>
 801156c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801156e:	f7fd fb1b 	bl	800eba8 <__retarget_lock_release_recursive>
 8011572:	4628      	mov	r0, r5
 8011574:	bd70      	pop	{r4, r5, r6, pc}
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <_putc_r+0x88>)
 8011578:	429c      	cmp	r4, r3
 801157a:	d101      	bne.n	8011580 <_putc_r+0x6c>
 801157c:	68b4      	ldr	r4, [r6, #8]
 801157e:	e7d6      	b.n	801152e <_putc_r+0x1a>
 8011580:	4b07      	ldr	r3, [pc, #28]	; (80115a0 <_putc_r+0x8c>)
 8011582:	429c      	cmp	r4, r3
 8011584:	bf08      	it	eq
 8011586:	68f4      	ldreq	r4, [r6, #12]
 8011588:	e7d1      	b.n	801152e <_putc_r+0x1a>
 801158a:	4629      	mov	r1, r5
 801158c:	4622      	mov	r2, r4
 801158e:	4630      	mov	r0, r6
 8011590:	f7fe f984 	bl	800f89c <__swbuf_r>
 8011594:	4605      	mov	r5, r0
 8011596:	e7e3      	b.n	8011560 <_putc_r+0x4c>
 8011598:	08011a5c 	.word	0x08011a5c
 801159c:	08011a7c 	.word	0x08011a7c
 80115a0:	08011a3c 	.word	0x08011a3c

080115a4 <_read_r>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	4d07      	ldr	r5, [pc, #28]	; (80115c4 <_read_r+0x20>)
 80115a8:	4604      	mov	r4, r0
 80115aa:	4608      	mov	r0, r1
 80115ac:	4611      	mov	r1, r2
 80115ae:	2200      	movs	r2, #0
 80115b0:	602a      	str	r2, [r5, #0]
 80115b2:	461a      	mov	r2, r3
 80115b4:	f7f0 ff40 	bl	8002438 <_read>
 80115b8:	1c43      	adds	r3, r0, #1
 80115ba:	d102      	bne.n	80115c2 <_read_r+0x1e>
 80115bc:	682b      	ldr	r3, [r5, #0]
 80115be:	b103      	cbz	r3, 80115c2 <_read_r+0x1e>
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	20000a94 	.word	0x20000a94

080115c8 <__assert_func>:
 80115c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115ca:	4614      	mov	r4, r2
 80115cc:	461a      	mov	r2, r3
 80115ce:	4b09      	ldr	r3, [pc, #36]	; (80115f4 <__assert_func+0x2c>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	4605      	mov	r5, r0
 80115d4:	68d8      	ldr	r0, [r3, #12]
 80115d6:	b14c      	cbz	r4, 80115ec <__assert_func+0x24>
 80115d8:	4b07      	ldr	r3, [pc, #28]	; (80115f8 <__assert_func+0x30>)
 80115da:	9100      	str	r1, [sp, #0]
 80115dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115e0:	4906      	ldr	r1, [pc, #24]	; (80115fc <__assert_func+0x34>)
 80115e2:	462b      	mov	r3, r5
 80115e4:	f000 f80e 	bl	8011604 <fiprintf>
 80115e8:	f000 f8a8 	bl	801173c <abort>
 80115ec:	4b04      	ldr	r3, [pc, #16]	; (8011600 <__assert_func+0x38>)
 80115ee:	461c      	mov	r4, r3
 80115f0:	e7f3      	b.n	80115da <__assert_func+0x12>
 80115f2:	bf00      	nop
 80115f4:	200001a0 	.word	0x200001a0
 80115f8:	08011ccd 	.word	0x08011ccd
 80115fc:	08011cda 	.word	0x08011cda
 8011600:	08011d08 	.word	0x08011d08

08011604 <fiprintf>:
 8011604:	b40e      	push	{r1, r2, r3}
 8011606:	b503      	push	{r0, r1, lr}
 8011608:	4601      	mov	r1, r0
 801160a:	ab03      	add	r3, sp, #12
 801160c:	4805      	ldr	r0, [pc, #20]	; (8011624 <fiprintf+0x20>)
 801160e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011612:	6800      	ldr	r0, [r0, #0]
 8011614:	9301      	str	r3, [sp, #4]
 8011616:	f7ff fe4d 	bl	80112b4 <_vfiprintf_r>
 801161a:	b002      	add	sp, #8
 801161c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011620:	b003      	add	sp, #12
 8011622:	4770      	bx	lr
 8011624:	200001a0 	.word	0x200001a0

08011628 <_fstat_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	4d07      	ldr	r5, [pc, #28]	; (8011648 <_fstat_r+0x20>)
 801162c:	2300      	movs	r3, #0
 801162e:	4604      	mov	r4, r0
 8011630:	4608      	mov	r0, r1
 8011632:	4611      	mov	r1, r2
 8011634:	602b      	str	r3, [r5, #0]
 8011636:	f7f0 ff44 	bl	80024c2 <_fstat>
 801163a:	1c43      	adds	r3, r0, #1
 801163c:	d102      	bne.n	8011644 <_fstat_r+0x1c>
 801163e:	682b      	ldr	r3, [r5, #0]
 8011640:	b103      	cbz	r3, 8011644 <_fstat_r+0x1c>
 8011642:	6023      	str	r3, [r4, #0]
 8011644:	bd38      	pop	{r3, r4, r5, pc}
 8011646:	bf00      	nop
 8011648:	20000a94 	.word	0x20000a94

0801164c <_isatty_r>:
 801164c:	b538      	push	{r3, r4, r5, lr}
 801164e:	4d06      	ldr	r5, [pc, #24]	; (8011668 <_isatty_r+0x1c>)
 8011650:	2300      	movs	r3, #0
 8011652:	4604      	mov	r4, r0
 8011654:	4608      	mov	r0, r1
 8011656:	602b      	str	r3, [r5, #0]
 8011658:	f7f0 ff43 	bl	80024e2 <_isatty>
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	d102      	bne.n	8011666 <_isatty_r+0x1a>
 8011660:	682b      	ldr	r3, [r5, #0]
 8011662:	b103      	cbz	r3, 8011666 <_isatty_r+0x1a>
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	bd38      	pop	{r3, r4, r5, pc}
 8011668:	20000a94 	.word	0x20000a94

0801166c <__ascii_mbtowc>:
 801166c:	b082      	sub	sp, #8
 801166e:	b901      	cbnz	r1, 8011672 <__ascii_mbtowc+0x6>
 8011670:	a901      	add	r1, sp, #4
 8011672:	b142      	cbz	r2, 8011686 <__ascii_mbtowc+0x1a>
 8011674:	b14b      	cbz	r3, 801168a <__ascii_mbtowc+0x1e>
 8011676:	7813      	ldrb	r3, [r2, #0]
 8011678:	600b      	str	r3, [r1, #0]
 801167a:	7812      	ldrb	r2, [r2, #0]
 801167c:	1e10      	subs	r0, r2, #0
 801167e:	bf18      	it	ne
 8011680:	2001      	movne	r0, #1
 8011682:	b002      	add	sp, #8
 8011684:	4770      	bx	lr
 8011686:	4610      	mov	r0, r2
 8011688:	e7fb      	b.n	8011682 <__ascii_mbtowc+0x16>
 801168a:	f06f 0001 	mvn.w	r0, #1
 801168e:	e7f8      	b.n	8011682 <__ascii_mbtowc+0x16>

08011690 <memmove>:
 8011690:	4288      	cmp	r0, r1
 8011692:	b510      	push	{r4, lr}
 8011694:	eb01 0402 	add.w	r4, r1, r2
 8011698:	d902      	bls.n	80116a0 <memmove+0x10>
 801169a:	4284      	cmp	r4, r0
 801169c:	4623      	mov	r3, r4
 801169e:	d807      	bhi.n	80116b0 <memmove+0x20>
 80116a0:	1e43      	subs	r3, r0, #1
 80116a2:	42a1      	cmp	r1, r4
 80116a4:	d008      	beq.n	80116b8 <memmove+0x28>
 80116a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116ae:	e7f8      	b.n	80116a2 <memmove+0x12>
 80116b0:	4402      	add	r2, r0
 80116b2:	4601      	mov	r1, r0
 80116b4:	428a      	cmp	r2, r1
 80116b6:	d100      	bne.n	80116ba <memmove+0x2a>
 80116b8:	bd10      	pop	{r4, pc}
 80116ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116c2:	e7f7      	b.n	80116b4 <memmove+0x24>

080116c4 <_realloc_r>:
 80116c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c8:	4680      	mov	r8, r0
 80116ca:	4614      	mov	r4, r2
 80116cc:	460e      	mov	r6, r1
 80116ce:	b921      	cbnz	r1, 80116da <_realloc_r+0x16>
 80116d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116d4:	4611      	mov	r1, r2
 80116d6:	f7fd baeb 	b.w	800ecb0 <_malloc_r>
 80116da:	b92a      	cbnz	r2, 80116e8 <_realloc_r+0x24>
 80116dc:	f7fd fa7c 	bl	800ebd8 <_free_r>
 80116e0:	4625      	mov	r5, r4
 80116e2:	4628      	mov	r0, r5
 80116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e8:	f000 f82f 	bl	801174a <_malloc_usable_size_r>
 80116ec:	4284      	cmp	r4, r0
 80116ee:	4607      	mov	r7, r0
 80116f0:	d802      	bhi.n	80116f8 <_realloc_r+0x34>
 80116f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80116f6:	d812      	bhi.n	801171e <_realloc_r+0x5a>
 80116f8:	4621      	mov	r1, r4
 80116fa:	4640      	mov	r0, r8
 80116fc:	f7fd fad8 	bl	800ecb0 <_malloc_r>
 8011700:	4605      	mov	r5, r0
 8011702:	2800      	cmp	r0, #0
 8011704:	d0ed      	beq.n	80116e2 <_realloc_r+0x1e>
 8011706:	42bc      	cmp	r4, r7
 8011708:	4622      	mov	r2, r4
 801170a:	4631      	mov	r1, r6
 801170c:	bf28      	it	cs
 801170e:	463a      	movcs	r2, r7
 8011710:	f7fd fa4b 	bl	800ebaa <memcpy>
 8011714:	4631      	mov	r1, r6
 8011716:	4640      	mov	r0, r8
 8011718:	f7fd fa5e 	bl	800ebd8 <_free_r>
 801171c:	e7e1      	b.n	80116e2 <_realloc_r+0x1e>
 801171e:	4635      	mov	r5, r6
 8011720:	e7df      	b.n	80116e2 <_realloc_r+0x1e>

08011722 <__ascii_wctomb>:
 8011722:	b149      	cbz	r1, 8011738 <__ascii_wctomb+0x16>
 8011724:	2aff      	cmp	r2, #255	; 0xff
 8011726:	bf85      	ittet	hi
 8011728:	238a      	movhi	r3, #138	; 0x8a
 801172a:	6003      	strhi	r3, [r0, #0]
 801172c:	700a      	strbls	r2, [r1, #0]
 801172e:	f04f 30ff 	movhi.w	r0, #4294967295
 8011732:	bf98      	it	ls
 8011734:	2001      	movls	r0, #1
 8011736:	4770      	bx	lr
 8011738:	4608      	mov	r0, r1
 801173a:	4770      	bx	lr

0801173c <abort>:
 801173c:	b508      	push	{r3, lr}
 801173e:	2006      	movs	r0, #6
 8011740:	f000 f834 	bl	80117ac <raise>
 8011744:	2001      	movs	r0, #1
 8011746:	f7f0 fe6d 	bl	8002424 <_exit>

0801174a <_malloc_usable_size_r>:
 801174a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801174e:	1f18      	subs	r0, r3, #4
 8011750:	2b00      	cmp	r3, #0
 8011752:	bfbc      	itt	lt
 8011754:	580b      	ldrlt	r3, [r1, r0]
 8011756:	18c0      	addlt	r0, r0, r3
 8011758:	4770      	bx	lr

0801175a <_raise_r>:
 801175a:	291f      	cmp	r1, #31
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4604      	mov	r4, r0
 8011760:	460d      	mov	r5, r1
 8011762:	d904      	bls.n	801176e <_raise_r+0x14>
 8011764:	2316      	movs	r3, #22
 8011766:	6003      	str	r3, [r0, #0]
 8011768:	f04f 30ff 	mov.w	r0, #4294967295
 801176c:	bd38      	pop	{r3, r4, r5, pc}
 801176e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011770:	b112      	cbz	r2, 8011778 <_raise_r+0x1e>
 8011772:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011776:	b94b      	cbnz	r3, 801178c <_raise_r+0x32>
 8011778:	4620      	mov	r0, r4
 801177a:	f000 f831 	bl	80117e0 <_getpid_r>
 801177e:	462a      	mov	r2, r5
 8011780:	4601      	mov	r1, r0
 8011782:	4620      	mov	r0, r4
 8011784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011788:	f000 b818 	b.w	80117bc <_kill_r>
 801178c:	2b01      	cmp	r3, #1
 801178e:	d00a      	beq.n	80117a6 <_raise_r+0x4c>
 8011790:	1c59      	adds	r1, r3, #1
 8011792:	d103      	bne.n	801179c <_raise_r+0x42>
 8011794:	2316      	movs	r3, #22
 8011796:	6003      	str	r3, [r0, #0]
 8011798:	2001      	movs	r0, #1
 801179a:	e7e7      	b.n	801176c <_raise_r+0x12>
 801179c:	2400      	movs	r4, #0
 801179e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117a2:	4628      	mov	r0, r5
 80117a4:	4798      	blx	r3
 80117a6:	2000      	movs	r0, #0
 80117a8:	e7e0      	b.n	801176c <_raise_r+0x12>
	...

080117ac <raise>:
 80117ac:	4b02      	ldr	r3, [pc, #8]	; (80117b8 <raise+0xc>)
 80117ae:	4601      	mov	r1, r0
 80117b0:	6818      	ldr	r0, [r3, #0]
 80117b2:	f7ff bfd2 	b.w	801175a <_raise_r>
 80117b6:	bf00      	nop
 80117b8:	200001a0 	.word	0x200001a0

080117bc <_kill_r>:
 80117bc:	b538      	push	{r3, r4, r5, lr}
 80117be:	4d07      	ldr	r5, [pc, #28]	; (80117dc <_kill_r+0x20>)
 80117c0:	2300      	movs	r3, #0
 80117c2:	4604      	mov	r4, r0
 80117c4:	4608      	mov	r0, r1
 80117c6:	4611      	mov	r1, r2
 80117c8:	602b      	str	r3, [r5, #0]
 80117ca:	f7f0 fe1b 	bl	8002404 <_kill>
 80117ce:	1c43      	adds	r3, r0, #1
 80117d0:	d102      	bne.n	80117d8 <_kill_r+0x1c>
 80117d2:	682b      	ldr	r3, [r5, #0]
 80117d4:	b103      	cbz	r3, 80117d8 <_kill_r+0x1c>
 80117d6:	6023      	str	r3, [r4, #0]
 80117d8:	bd38      	pop	{r3, r4, r5, pc}
 80117da:	bf00      	nop
 80117dc:	20000a94 	.word	0x20000a94

080117e0 <_getpid_r>:
 80117e0:	f7f0 be08 	b.w	80023f4 <_getpid>

080117e4 <_init>:
 80117e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e6:	bf00      	nop
 80117e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117ea:	bc08      	pop	{r3}
 80117ec:	469e      	mov	lr, r3
 80117ee:	4770      	bx	lr

080117f0 <_fini>:
 80117f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f2:	bf00      	nop
 80117f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117f6:	bc08      	pop	{r3}
 80117f8:	469e      	mov	lr, r3
 80117fa:	4770      	bx	lr
